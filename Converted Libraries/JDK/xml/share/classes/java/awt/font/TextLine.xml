<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.text.Annotation"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.Bidi"/>
        <import package="java.text.CharacterIterator"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map"/>
        <import package="sun.font.AttributeValues"/>
        <import package="sun.font.BidiUtils"/>
        <import package="sun.font.CoreMetrics"/>
        <import package="sun.font.Decoration"/>
        <import package="sun.font.FontLineMetrics"/>
        <import package="sun.font.FontResolver"/>
        <import package="sun.font.GraphicComponent"/>
        <import package="sun.font.LayoutPathImpl"/>
        <import package="sun.font.LayoutPathImpl.EmptyPath"/>
        <import package="sun.font.LayoutPathImpl.SegmentPathBuilder"/>
        <import package="sun.font.TextLabelFactory"/>
        <import package="sun.font.TextLineComponent"/>
        <import package="sun.text.CodePointIterator"/>
        <import package="java.awt.geom.Line2D"/>
        <class name="TextLine" line="66">
            <comment line="88">
                if null, ltr                
            </comment>
            <comment line="89">
                x,y pairs for components in visual order                
            </comment>
            <comment line="93">
                if null, ltr                
            </comment>
            <comment line="94">
                if null, ltr                
            </comment>
            <comment line="95">
                if null, 0                
            </comment>
            <comment line="102">
                built on demand in getMetrics                
            </comment>
            <comment line="1214">
                A utility to get a range of text that is both logically and visually
                 contiguous.
                 If the entire range is ok, return limit, otherwise return the first
                 directional change after start.  We could do better than this, but
                 it doesn&apos;t seem worth it at the moment.
                private static int firstVisualChunk(int order[], byte direction[],
                int start, int limit)
                {
                if (order != null) {
                int min = order[start];
                int max = order[start];
                int count = limit - start;
                for (int i = start + 1; i &lt; limit; i++) {
                min = Math.min(min, order[i]);
                max = Math.max(max, order[i]);
                if (max - min &gt;= count) {
                if (direction != null) {
                byte baseLevel = direction[start];
                for (int j = start + 1; j &lt; i; j++) {
                if (direction[j] != baseLevel) {
                return j;
                }
                }
                }
                return i;
                }
                }
                }
                return limit;
                }                
            </comment>
            <comment line="1294">
                The new version requires that chunks be at the same level.                
            </comment>
            <comment line="1308">
                create a new line with characters between charStart and charLimit
                 justified using the provided width and ratio.                
            </comment>
            <comment line="1410">
                return the sum of the advances of text between the logical start and limit                
            </comment>
            <class name="TextLineMetrics" line="68">
                <declaration name="ascent" type="float" line="69"/>
                <declaration name="descent" type="float" line="70"/>
                <declaration name="leading" type="float" line="71"/>
                <declaration name="advance" type="float" line="72"/>
                <method name="TextLineMetrics" type="constructor" line="77">
                    <params>
                        <param name="ascent" type="float"/>
                        <param name="descent" type="float"/>
                        <param name="leading" type="float"/>
                        <param name="advance" type="float"/>
                    </params>
                </method>
            </class>
            <declaration name="fComponents" type="TextLineComponent[]" line="85"/>
            <declaration name="fBaselineOffsets" type="float[]" line="86"/>
            <declaration name="fComponentVisualOrder" type="int[]" line="87"/>
            <declaration name="locs" type="float[]" line="88"/>
            <declaration name="fChars" type="char[]" line="89"/>
            <declaration name="fCharsStart" type="int" line="90"/>
            <declaration name="fCharsLimit" type="int" line="91"/>
            <declaration name="fCharVisualOrder" type="int[]" line="92"/>
            <declaration name="fCharLogicalOrder" type="int[]" line="93"/>
            <declaration name="fCharLevels" type="byte[]" line="94"/>
            <declaration name="fIsDirectionLTR" type="boolean" line="95"/>
            <declaration name="lp" type="LayoutPathImpl" line="96"/>
            <declaration name="isSimple" type="boolean" line="97"/>
            <declaration name="pixelBounds" type="Rectangle" line="98"/>
            <declaration name="frc" type="FontRenderContext" line="99"/>
            <declaration name="fMetrics" type="TextLineMetrics" line="101"/>
            <method name="TextLine" type="constructor" line="111">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="components" type="TextLineComponent[]"/>
                    <param name="baselineOffsets" type="float[]"/>
                    <param name="chars" type="char[]"/>
                    <param name="charsStart" type="int"/>
                    <param name="charsLimit" type="int"/>
                    <param name="charLogicalOrder" type="int[]"/>
                    <param name="charLevels" type="byte[]"/>
                    <param name="isDirectionLTR" type="boolean"/>
                </params>
                <declaration name="componentVisualOrder" type="int[]" line="113"/>
            </method>
            <method name="checkCtorArgs" type="void" line="131">
                <declaration name="checkCharCount" type="int" line="133"/>
                <scope line="134"/>
                <scope line="138"/>
            </method>
            <method name="init" type="void" line="145">
                <comment line="147">
                    first, we need to check for graphic components on the TOP or BOTTOM baselines.  So                    
                </comment>
                <comment line="148">
                    we perform the work that used to be in getMetrics here.                    
                </comment>
                <comment line="155">
                    ascent + descent must not be less than this value                    
                </comment>
                <comment line="159">
                    walk through EGA&apos;s                    
                </comment>
                <comment line="205">
                    we now know enough to compute the locs, but we need the final loc                    
                </comment>
                <comment line="206">
                    for the advance before we can create the metrics object                    
                </comment>
                <comment line="209">
                    we have top or bottom baselines, so expand the baselines array                    
                </comment>
                <comment line="210">
                    full offsets are needed by CoreMetrics.effectiveBaselineOffset                    
                </comment>
                <comment line="232">
                    adjust because of italics                    
                </comment>
                <comment line="237">
                    1) compute the area of overlap - min effective ascent and min effective descent                    
                </comment>
                <comment line="238">
                    2) compute the x positions along italic angle of ascent and descent for left and right                    
                </comment>
                <comment line="239">
                    3) compute maximum left - right, adjust right position by this value                    
                </comment>
                <comment line="240">
                    this is a crude form of kerning between textcomponents                    
                </comment>
                <comment line="242">
                    note glyphvectors preposition glyphs based on offset,                    
                </comment>
                <comment line="243">
                    so tl doesn&apos;t need to adjust glyphvector position                    
                </comment>
                <comment line="244">
                    1)                    
                </comment>
                <comment line="248">
                    pb += pcm.ssOffset;                    
                </comment>
                <comment line="253">
                    cb += cm.ssOffset;                    
                </comment>
                <comment line="258">
                    2)                    
                </comment>
                <comment line="265">
                    3)                    
                </comment>
                <comment line="273">
                    no italic adjustment for x, but still need to compute y                    
                </comment>
                <comment line="274">
                    + cm.ssOffset;                    
                </comment>
                <comment line="286">
                    do we want italic padding at the right of the line?                    
                </comment>
                <comment line="304">
                    locs[locs.length - 1] = 0; // final offset is always back on baseline                    
                </comment>
                <comment line="306">
                    ok, build fMetrics since we have the final advance                    
                </comment>
                <comment line="310">
                    build path if we need it                    
                </comment>
                <comment line="335">
                    empty path                    
                </comment>
                <declaration name="ascent" type="float" line="150"/>
                <declaration name="descent" type="float" line="151"/>
                <declaration name="leading" type="float" line="152"/>
                <declaration name="advance" type="float" line="153"/>
                <declaration name="maxGraphicHeight" type="float" line="156"/>
                <declaration name="maxGraphicHeightWithLeading" type="float" line="157"/>
                <declaration name="tlc" type="TextLineComponent" line="160"/>
                <declaration name="fitTopAndBottomGraphics" type="boolean" line="161"/>
                <scope line="165">
                    <declaration name="cm" type="CoreMetrics" line="170"/>
                    <declaration name="baseline" type="byte" line="172"/>
                    <scope line="174">
                        <declaration name="baselineOffset" type="float" line="175"/>
                        <declaration name="gd" type="float" line="179"/>
                    </scope>
                    <scope line="184">
                        <declaration name="graphicHeight" type="float" line="186"/>
                        <declaration name="graphicHeightWithLeading" type="float" line="187"/>
                    </scope>
                </scope>
                <scope line="194">
                    <scope line="195"/>
                    <scope line="198"/>
                </scope>
                <scope line="208"/>
                <declaration name="x" type="float" line="220"/>
                <declaration name="y" type="float" line="221"/>
                <declaration name="pcm" type="CoreMetrics" line="222"/>
                <declaration name="needPath" type="boolean" line="224"/>
                <scope line="227">
                    <declaration name="cm" type="CoreMetrics" line="229"/>
                    <scope line="235">
                        <declaration name="pb" type="float" line="245"/>
                        <declaration name="pa" type="float" line="246"/>
                        <declaration name="pd" type="float" line="247"/>
                        <declaration name="cb" type="float" line="250"/>
                        <declaration name="ca" type="float" line="251"/>
                        <declaration name="cd" type="float" line="252"/>
                        <declaration name="a" type="float" line="255"/>
                        <declaration name="d" type="float" line="256"/>
                        <declaration name="pax" type="float" line="259"/>
                        <declaration name="pdx" type="float" line="260"/>
                        <declaration name="cax" type="float" line="262"/>
                        <declaration name="cdx" type="float" line="263"/>
                        <declaration name="dax" type="float" line="266"/>
                        <declaration name="ddx" type="float" line="267"/>
                        <declaration name="dx" type="float" line="268"/>
                    </scope>
                    <scope line="272"/>
                </scope>
                <scope line="287">
                    <declaration name="pb" type="float" line="288"/>
                    <declaration name="pa" type="float" line="289"/>
                    <declaration name="pd" type="float" line="290"/>
                    <declaration name="d" type="float" line="293"/>
                    <scope line="294"/>
                    <scope line="296"/>
                </scope>
                <scope line="311">
                    <declaration name="pt" type="Point2D.Double" line="314"/>
                    <declaration name="tx" type="double" line="315"/>
                    <declaration name="builder" type="SegmentPathBuilder" line="316"/>
                    <scope line="318">
                        <declaration name="at" type="AffineTransform" line="320"/>
                        <scope line="321">
                            <declaration name="dx" type="double" line="322"/>
                            <declaration name="dy" type="double" line="323"/>
                        </scope>
                        <scope line="328"/>
                    </scope>
                    <scope line="335">
                        <declaration name="at" type="AffineTransform" line="337"/>
                        <scope line="338"/>
                    </scope>
                </scope>
            </method>
            <method name="getPixelBounds" type="Rectangle" line="345">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <comment line="348">
                    if we have a matching frc, set it to null so we don&apos;t have to test it                    
                </comment>
                <comment line="349">
                    for each component                    
                </comment>
                <comment line="354">
                    only cache integral locations with the default frc, this is a bit strict                    
                </comment>
                <comment line="368">
                    couldn&apos;t use cache, or didn&apos;t have it, so compute                    
                </comment>
                <comment line="370">
                    all glyphvectors with no decorations, no layout path                    
                </comment>
                <comment line="385">
                    draw and test                    
                </comment>
                <declaration name="result" type="Rectangle" line="346"/>
                <scope line="350"/>
                <declaration name="ix" type="int" line="355"/>
                <declaration name="iy" type="int" line="356"/>
                <declaration name="rx" type="float" line="357"/>
                <declaration name="ry" type="float" line="358"/>
                <declaration name="canCache" type="boolean" line="359"/>
                <scope line="361"/>
                <scope line="370">
                    <scope line="371">
                        <declaration name="tlc" type="TextLineComponent" line="372"/>
                        <declaration name="pb" type="Rectangle" line="373"/>
                        <scope line="374">
                            <scope line="375"/>
                            <scope line="377"/>
                        </scope>
                    </scope>
                    <scope line="382"/>
                </scope>
                <scope line="385">
                    <declaration name="MARGIN" type="int" line="386"/>
                    <declaration name="r2d" type="Rectangle2D" line="387"/>
                    <scope line="388"/>
                    <declaration name="bounds" type="Rectangle" line="391"/>
                    <declaration name="im" type="BufferedImage" line="392"/>
                    <declaration name="g2d" type="Graphics2D" line="396"/>
                </scope>
                <scope line="408"/>
            </method>
            <method name="computePixelBounds" type="Rectangle" line="417">
                <params>
                    <param name="im" type="BufferedImage"/>
                </params>
                <comment line="424">
                    get top                    
                </comment>
                <comment line="427">
                    w ignored                    
                </comment>
                <comment line="436">
                    get bottom                    
                </comment>
                <comment line="440">
                    w ignored                    
                </comment>
                <comment line="450">
                    get left                    
                </comment>
                <comment line="462">
                    get right                    
                </comment>
                <declaration name="w" type="int" line="418"/>
                <declaration name="h" type="int" line="419"/>
                <declaration name="l" type="int" line="421"/>
                <scope line="423">
                    <declaration name="buf" type="int[]" line="425"/>
                    <scope line="426">
                        <scope line="428">
                            <scope line="429"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="437">
                    <declaration name="buf" type="int[]" line="438"/>
                    <scope line="439">
                        <scope line="441">
                            <scope line="442"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="451">
                    <scope line="452">
                        <scope line="453">
                            <declaration name="v" type="int" line="454"/>
                            <scope line="455"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="463">
                    <scope line="464">
                        <scope line="465">
                            <declaration name="v" type="int" line="466"/>
                            <scope line="467"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <class name="Function" line="478">
                <method name="computeFunction" type="float" line="480"/>
            </class>
            <declaration name="fgPosAdvF" type="Function" line="485"/>
            <anonymous_class line="485">
                <method name="computeFunction" type="float" line="488">
                    <params>
                        <param name="line" type="TextLine"/>
                        <param name="componentIndex" type="int"/>
                        <param name="indexInArray" type="int"/>
                    </params>
                    <declaration name="tlc" type="TextLineComponent" line="490"/>
                    <declaration name="vi" type="int" line="491"/>
                </method>
            </anonymous_class>
            <declaration name="fgAdvanceF" type="Function" line="496"/>
            <anonymous_class line="496">
                <method name="computeFunction" type="float" line="500">
                    <params>
                        <param name="line" type="TextLine"/>
                        <param name="componentIndex" type="int"/>
                        <param name="indexInArray" type="int"/>
                    </params>
                    <declaration name="tlc" type="TextLineComponent" line="502"/>
                </method>
            </anonymous_class>
            <declaration name="fgXPositionF" type="Function" line="507"/>
            <anonymous_class line="507">
                <method name="computeFunction" type="float" line="511">
                    <params>
                        <param name="line" type="TextLine"/>
                        <param name="componentIndex" type="int"/>
                        <param name="indexInArray" type="int"/>
                    </params>
                    <declaration name="vi" type="int" line="513"/>
                    <declaration name="tlc" type="TextLineComponent" line="514"/>
                </method>
            </anonymous_class>
            <declaration name="fgYPositionF" type="Function" line="519"/>
            <anonymous_class line="519">
                <method name="computeFunction" type="float" line="523">
                    <params>
                        <param name="line" type="TextLine"/>
                        <param name="componentIndex" type="int"/>
                        <param name="indexInArray" type="int"/>
                    </params>
                    <comment line="528">
                        charPos is relative to the component - adjust for                        
                    </comment>
                    <comment line="529">
                        baseline                        
                    </comment>
                    <declaration name="tlc" type="TextLineComponent" line="525"/>
                    <declaration name="charPos" type="float" line="526"/>
                </method>
            </anonymous_class>
            <method name="characterCount" type="int" line="535"/>
            <method name="isDirectionLTR" type="boolean" line="540"/>
            <method name="getMetrics" type="TextLineMetrics" line="545"/>
            <method name="visualToLogical" type="int" line="549">
                <params>
                    <param name="visualIndex" type="int"/>
                </params>
                <scope line="551"/>
                <scope line="555"/>
            </method>
            <method name="logicalToVisual" type="int" line="562">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharLevel" type="byte" line="568">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="isCharLTR" type="boolean" line="573">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharType" type="int" line="578">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="isCharSpace" type="boolean" line="583">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="isCharWhitespace" type="boolean" line="588">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharAngle" type="float" line="593">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCoreMetricsAt" type="CoreMetrics" line="598">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
                <scope line="600"/>
                <scope line="604"/>
                <declaration name="currentTlc" type="int" line="608"/>
                <declaration name="tlcStart" type="int" line="609"/>
                <declaration name="tlcLimit" type="int" line="610"/>
                <scope line="612">
                    <scope line="614"/>
                </scope>
            </method>
            <method name="getCharAscent" type="float" line="624">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharDescent" type="float" line="629">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharShift" type="float" line="634">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="applyFunctionAtIndex" type="float" line="639">
                <params>
                    <param name="logicalIndex" type="int"/>
                    <param name="f" type="Function"/>
                </params>
                <scope line="641"/>
                <declaration name="tlcStart" type="int" line="645"/>
                <scope line="647">
                    <declaration name="tlcLimit" type="int" line="649"/>
                    <scope line="650"/>
                    <scope line="653"/>
                </scope>
            </method>
            <method name="getCharAdvance" type="float" line="661">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharXPosition" type="float" line="666">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharYPosition" type="float" line="671">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharLinePosition" type="float" line="676">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharLinePosition" type="float" line="681">
                <params>
                    <param name="logicalIndex" type="int"/>
                    <param name="leading" type="boolean"/>
                </params>
                <declaration name="f" type="Function" line="682"/>
            </method>
            <method name="caretAtOffsetIsValid" type="boolean" line="686">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <scope line="688"/>
                <declaration name="tlcStart" type="int" line="692"/>
                <scope line="694">
                    <declaration name="tlcLimit" type="int" line="696"/>
                    <scope line="697"/>
                    <scope line="700"/>
                </scope>
            </method>
            <javadoc line="708">
                map a component visual index to the logical index.                
            </javadoc>
            <method name="getComponentLogicalIndex" type="int" line="711">
                <params>
                    <param name="vi" type="int"/>
                </params>
                <scope line="712"/>
            </method>
            <javadoc line="718">
                map a component logical index to the visual index.                
            </javadoc>
            <method name="getComponentVisualIndex" type="int" line="721">
                <params>
                    <param name="li" type="int"/>
                </params>
                <scope line="722"/>
                <scope line="725">
                    <scope line="726"/>
                </scope>
            </method>
            <method name="getCharBounds" type="Rectangle2D" line="733">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
                <scope line="735"/>
                <declaration name="tlcStart" type="int" line="739"/>
                <scope line="741">
                    <declaration name="tlcLimit" type="int" line="743"/>
                    <scope line="744">
                        <declaration name="tlc" type="TextLineComponent" line="746"/>
                        <declaration name="indexInTlc" type="int" line="747"/>
                        <declaration name="chBounds" type="Rectangle2D" line="748"/>
                        <declaration name="vi" type="int" line="750"/>
                    </scope>
                    <scope line="757"/>
                </scope>
            </method>
            <method name="getComponentShift" type="float" line="765">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="cm" type="CoreMetrics" line="766"/>
            </method>
            <method name="draw" type="void" line="770">
                <params>
                    <param name="g2" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="771">
                    <scope line="772">
                        <declaration name="tlc" type="TextLineComponent" line="773"/>
                    </scope>
                </scope>
                <scope line="776">
                    <declaration name="oldTx" type="AffineTransform" line="777"/>
                    <declaration name="pt" type="Point2D.Float" line="778"/>
                    <scope line="779">
                        <declaration name="tlc" type="TextLineComponent" line="780"/>
                        <declaration name="at" type="AffineTransform" line="784"/>
                        <scope line="786"/>
                        <scope line="791"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="798">
                Return the union of the visual bounds of all the components.
                  This incorporates the path.  It does not include logical
                  bounds (used by carets).                
            </javadoc>
            <method name="getVisualBounds" type="Rectangle2D" line="803">
                <declaration name="result" type="Rectangle2D" line="804"/>
                <scope line="806">
                    <declaration name="tlc" type="TextLineComponent" line="807"/>
                    <declaration name="r" type="Rectangle2D" line="808"/>
                    <declaration name="pt" type="Point2D.Float" line="810"/>
                    <scope line="811"/>
                    <scope line="814">
                        <declaration name="at" type="AffineTransform" line="817"/>
                        <scope line="818">
                            <declaration name="tx" type="AffineTransform" line="819"/>
                        </scope>
                        <scope line="823"/>
                    </scope>
                    <scope line="829"/>
                    <scope line="831"/>
                </scope>
                <scope line="836"/>
            </method>
            <method name="getItalicBounds" type="Rectangle2D" line="843">
                <declaration name="left" type="float" line="845"/>
                <declaration name="top" type="float" line="846"/>
                <scope line="848">
                    <declaration name="tlc" type="TextLineComponent" line="849"/>
                    <declaration name="tlcBounds" type="Rectangle2D" line="851"/>
                    <declaration name="x" type="float" line="852"/>
                    <declaration name="y" type="float" line="853"/>
                </scope>
            </method>
            <method name="getOutline" type="Shape" line="865">
                <params>
                    <param name="tx" type="AffineTransform"/>
                </params>
                <declaration name="dstShape" type="GeneralPath" line="867"/>
                <scope line="869">
                    <declaration name="tlc" type="TextLineComponent" line="870"/>
                </scope>
                <scope line="875"/>
            </method>
            <method name="hashCode" type="int" line="881"/>
            <method name="toString" type="String" line="886">
                <declaration name="buf" type="StringBuilder" line="887"/>
                <scope line="889"/>
            </method>
            <javadoc line="896">
                Create a TextLine from the text.  The Font must be able to
                  display all of the text.
                  attributes==null is equivalent to using an empty Map for
                  attributes                
            </javadoc>
            <method name="fastCreateTextLine" type="TextLine" line="906">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="chars" type="char[]"/>
                    <param name="font" type="Font"/>
                    <param name="lm" type="CoreMetrics"/>
                    <param name="attributes" type="Map"/>
                </params>
                <comment line="934">
                    dlf: get baseRot from font for now???                    
                </comment>
                <comment line="956">
                    no extra info yet, bidi determines run and line direction                    
                </comment>
                <declaration name="isDirectionLTR" type="boolean" line="908"/>
                <declaration name="levels" type="byte[]" line="909"/>
                <declaration name="charsLtoV" type="int[]" line="910"/>
                <declaration name="bidi" type="Bidi" line="911"/>
                <declaration name="characterCount" type="int" line="912"/>
                <declaration name="requiresBidi" type="boolean" line="914"/>
                <declaration name="embs" type="byte[]" line="915"/>
                <declaration name="values" type="AttributeValues" line="917"/>
                <scope line="918">
                    <scope line="920"/>
                    <scope line="924">
                        <declaration name="level" type="byte" line="926"/>
                        <scope line="928"/>
                    </scope>
                </scope>
                <scope line="936"/>
                <scope line="940">
                    <declaration name="bidiflags" type="int" line="941"/>
                    <scope line="946">
                        <declaration name="charsVtoL" type="int[]" line="948"/>
                    </scope>
                </scope>
                <declaration name="decorator" type="Decoration" line="954"/>
                <declaration name="layoutFlags" type="int" line="956"/>
                <declaration name="factory" type="TextLabelFactory" line="957"/>
                <declaration name="components" type="TextLineComponent[]" line="959"/>
                <declaration name="numComponents" type="int" line="970"/>
                <scope line="971"/>
                <scope line="975">
                    <declaration name="temp" type="TextLineComponent[]" line="976"/>
                </scope>
            </method>
            <method name="expandArray" type="TextLineComponent[]" line="985">
                <params>
                    <param name="orig" type="TextLineComponent[]"/>
                </params>
                <declaration name="newComponents" type="TextLineComponent[]" line="987"/>
            </method>
            <javadoc line="993">
                Returns an array in logical order of the TextLineComponents on
                  the text in the given range, with the given attributes.                
            </javadoc>
            <method name="createComponentsOnRun" type="TextLineComponent[]" line="1008">
                <params>
                    <param name="runStart" type="int"/>
                    <param name="runLimit" type="int"/>
                    <param name="chars" type="char[]"/>
                    <param name="charsLtoV" type="int[]"/>
                    <param name="levels" type="byte[]"/>
                    <param name="factory" type="TextLabelFactory"/>
                    <param name="font" type="Font"/>
                    <param name="cm" type="CoreMetrics"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="decorator" type="Decoration"/>
                    <param name="components" type="TextLineComponent[]"/>
                    <param name="numComponents" type="int"/>
                </params>
                <comment line="1012">
                    &lt;= displayLimit                    
                </comment>
                <declaration name="pos" type="int" line="1010"/>
                <scope line="1011">
                    <declaration name="chunkLimit" type="int" line="1012"/>
                    <scope line="1014">
                        <declaration name="startPos" type="int" line="1015"/>
                        <declaration name="lmCount" type="int" line="1016"/>
                        <scope line="1018">
                            <declaration name="lineMetrics" type="LineMetrics" line="1019"/>
                        </scope>
                        <scope line="1023"/>
                        <declaration name="nextComponent" type="TextLineComponent" line="1027"/>
                        <scope line="1031"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1045">
                Returns an array (in logical order) of the TextLineComponents representing
                  the text.  The components are both logically and visually contiguous.                
            </javadoc>
            <method name="getComponents" type="TextLineComponent[]" line="1055">
                <params>
                    <param name="styledParagraph" type="StyledParagraph"/>
                    <param name="chars" type="char[]"/>
                    <param name="textStart" type="int"/>
                    <param name="textLimit" type="int"/>
                    <param name="charsLtoV" type="int[]"/>
                    <param name="levels" type="byte[]"/>
                    <param name="factory" type="TextLabelFactory"/>
                </params>
                <comment line="1071">
                    AffineTransform baseRot = styledParagraph.getBaselineRotationAt(pos);                    
                </comment>
                <comment line="1072">
                    !!! For now, let&apos;s assign runs of text with both fonts and graphic attributes                    
                </comment>
                <comment line="1073">
                    a null rotation (e.g. the baseline rotation goes away when a graphic                    
                </comment>
                <comment line="1074">
                    is applied.                    
                </comment>
                <declaration name="frc" type="FontRenderContext" line="1057"/>
                <declaration name="numComponents" type="int" line="1059"/>
                <declaration name="tempComponents" type="TextLineComponent[]" line="1060"/>
                <declaration name="pos" type="int" line="1062"/>
                <scope line="1063">
                    <declaration name="runLimit" type="int" line="1064"/>
                    <declaration name="decorator" type="Decoration" line="1066"/>
                    <declaration name="graphicOrFont" type="Object" line="1068"/>
                    <scope line="1070">
                        <declaration name="baseRot" type="AffineTransform" line="1075"/>
                        <declaration name="graphicAttribute" type="GraphicAttribute" line="1076"/>
                        <scope line="1077">
                            <declaration name="chunkLimit" type="int" line="1078"/>
                            <declaration name="nextGraphic" type="GraphicComponent" line="1081"/>
                            <scope line="1086"/>
                        </scope>
                    </scope>
                    <scope line="1094">
                        <declaration name="font" type="Font" line="1095"/>
                        <scope line="1107"/>
                    </scope>
                </scope>
                <declaration name="components" type="TextLineComponent[]" line="1114"/>
                <scope line="1115"/>
                <scope line="1118"/>
            </method>
            <javadoc line="1126">
                Create a TextLine from the Font and character data over the
                  range.  The range is relative to both the StyledParagraph and the
                  character array.                
            </javadoc>
            <method name="createLineFromText" type="TextLine" line="1135">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="styledParagraph" type="StyledParagraph"/>
                    <param name="factory" type="TextLabelFactory"/>
                    <param name="isDirectionLTR" type="boolean"/>
                    <param name="baselineOffsets" type="float[]"/>
                </params>
                <declaration name="lineBidi" type="Bidi" line="1139"/>
                <declaration name="charsLtoV" type="int[]" line="1140"/>
                <declaration name="levels" type="byte[]" line="1141"/>
                <scope line="1143">
                    <declaration name="charsVtoL" type="int[]" line="1145"/>
                </scope>
                <declaration name="components" type="TextLineComponent[]" line="1149"/>
            </method>
            <javadoc line="1156">
                Compute the components order from the given components array and
                  logical-to-visual character mapping.  May return null if canonical.                
            </javadoc>
            <method name="computeComponentOrder" type="int[]" line="1161">
                <params>
                    <param name="components" type="TextLineComponent[]"/>
                    <param name="charsLtoV" type="int[]"/>
                </params>
                <comment line="1163">
                    Create a visual ordering for the glyph sets.  The important thing
                     here is that the values have the proper rank with respect to
                     each other, not the exact values.  For example, the first glyph
                     set that appears visually should have the lowest value.  The last
                     should have the highest value.  The values are then normalized
                     to map 1-1 with positions in glyphs.                    
                </comment>
                <declaration name="componentOrder" type="int[]" line="1172"/>
                <scope line="1173">
                    <declaration name="gStart" type="int" line="1175"/>
                    <scope line="1176"/>
                </scope>
            </method>
            <javadoc line="1188">
                Create a TextLine from the text.  chars is just the text in the iterator.                
            </javadoc>
            <method name="standardCreateTextLine" type="TextLine" line="1194">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="chars" type="char[]"/>
                    <param name="baselineOffsets" type="float[]"/>
                </params>
                <comment line="1201">
                    no extra info yet, bidi determines run and line direction                    
                </comment>
                <declaration name="styledParagraph" type="StyledParagraph" line="1196"/>
                <declaration name="bidi" type="Bidi" line="1197"/>
                <scope line="1198"/>
                <declaration name="layoutFlags" type="int" line="1201"/>
                <declaration name="factory" type="TextLabelFactory" line="1202"/>
                <declaration name="isDirectionLTR" type="boolean" line="1204"/>
                <scope line="1205"/>
            </method>
            <javadoc line="1246">
                When this returns, the ACI&apos;s current position will be at the start of the
                  first run which does NOT contain a GraphicAttribute.  If no such run exists
                  the ACI&apos;s position will be at the end, and this method will return false.                
            </javadoc>
            <method name="advanceToFirstFont" type="boolean" line="1251">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                </params>
                <scope line="1253">
                    <scope line="1255"/>
                </scope>
            </method>
            <method name="getNormalizedOffsets" type="float[]" line="1263">
                <params>
                    <param name="baselineOffsets" type="float[]"/>
                    <param name="baseline" type="byte"/>
                </params>
                <scope line="1265">
                    <declaration name="base" type="float" line="1266"/>
                    <declaration name="temp" type="float[]" line="1267"/>
                </scope>
            </method>
            <method name="getFontAtCurrentPos" type="Font" line="1275">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                </params>
                <declaration name="value" type="Object" line="1277"/>
                <scope line="1278"/>
                <scope line="1281"/>
                <declaration name="ch" type="int" line="1285"/>
                <scope line="1286">
                    <declaration name="resolver" type="FontResolver" line="1287"/>
                </scope>
            </method>
            <method name="firstVisualChunk" type="int" line="1298">
                <params>
                    <param name="order" type="int"/>
                    <param name="direction" type="byte"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <scope line="1299">
                    <declaration name="dir" type="byte" line="1300"/>
                    <scope line="1301"/>
                </scope>
            </method>
            <method name="getJustifiedLine" type="TextLine" line="1311">
                <params>
                    <param name="justificationWidth" type="float"/>
                    <param name="justifyRatio" type="float"/>
                    <param name="justStart" type="int"/>
                    <param name="justLimit" type="int"/>
                </params>
                <comment line="1323">
                    all characters outside the justification range must be in the base direction                    
                </comment>
                <comment line="1324">
                    of the layout, otherwise justification makes no sense.                    
                </comment>
                <comment line="1328">
                    get the actual justification delta                    
                </comment>
                <comment line="1331">
                    generate an array of GlyphJustificationInfo records to pass to                    
                </comment>
                <comment line="1332">
                    the justifier.  Array is visually ordered.                    
                </comment>
                <comment line="1334">
                    get positions that each component will be using                    
                </comment>
                <comment line="1344">
                    get justification infos                    
                </comment>
                <comment line="1361">
                    records are visually ordered, and contiguous, so start and end are                    
                </comment>
                <comment line="1362">
                    simply the places where we didn&apos;t fetch records                    
                </comment>
                <comment line="1373">
                    invoke justifier on the records                    
                </comment>
                <comment line="1382">
                    apply justification deltas                    
                </comment>
                <comment line="1401">
                    only make two passes                    
                </comment>
                <declaration name="newComponents" type="TextLineComponent[]" line="1313"/>
                <declaration name="leftHang" type="float" line="1316"/>
                <declaration name="adv" type="float" line="1317"/>
                <declaration name="justifyDelta" type="float" line="1318"/>
                <declaration name="rejustify" type="boolean" line="1319"/>
                <scope line="1320">
                    <declaration name="justifyAdvance" type="float" line="1326"/>
                    <declaration name="infoPositions" type="int[]" line="1335"/>
                    <declaration name="infoCount" type="int" line="1336"/>
                    <scope line="1337">
                        <declaration name="logIndex" type="int" line="1338"/>
                    </scope>
                    <declaration name="infos" type="GlyphJustificationInfo[]" line="1342"/>
                    <declaration name="compStart" type="int" line="1345"/>
                    <scope line="1346">
                        <declaration name="comp" type="TextLineComponent" line="1347"/>
                        <declaration name="compLength" type="int" line="1348"/>
                        <declaration name="compLimit" type="int" line="1349"/>
                        <scope line="1350">
                            <declaration name="rangeMin" type="int" line="1351"/>
                            <declaration name="rangeMax" type="int" line="1352"/>
                            <scope line="1355"/>
                        </scope>
                    </scope>
                    <declaration name="infoStart" type="int" line="1363"/>
                    <declaration name="infoLimit" type="int" line="1364"/>
                    <scope line="1365"/>
                    <scope line="1369"/>
                    <declaration name="justifier" type="TextJustifier" line="1374"/>
                    <declaration name="deltas" type="float[]" line="1376"/>
                    <declaration name="canRejustify" type="boolean" line="1378"/>
                    <declaration name="wantRejustify" type="boolean" line="1379"/>
                    <declaration name="flags" type="boolean[]" line="1380"/>
                    <scope line="1384">
                        <declaration name="comp" type="TextLineComponent" line="1385"/>
                        <declaration name="compLength" type="int" line="1386"/>
                        <declaration name="compLimit" type="int" line="1387"/>
                        <scope line="1388">
                            <declaration name="rangeMin" type="int" line="1389"/>
                            <declaration name="rangeMax" type="int" line="1390"/>
                            <scope line="1395"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getAdvanceBetween" type="float" line="1410">
                <params>
                    <param name="components" type="TextLineComponent[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="advance" type="float" line="1411"/>
                <declaration name="tlcStart" type="int" line="1413"/>
                <scope line="1414">
                    <declaration name="comp" type="TextLineComponent" line="1415"/>
                    <declaration name="tlcLength" type="int" line="1417"/>
                    <declaration name="tlcLimit" type="int" line="1418"/>
                    <scope line="1419">
                        <declaration name="measureStart" type="int" line="1420"/>
                        <declaration name="measureLimit" type="int" line="1421"/>
                        <scope line="1423"/>
                    </scope>
                </scope>
            </method>
            <method name="getLayoutPath" type="LayoutPathImpl" line="1434"/>
        </class>
    </source>