<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.text.Annotation"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.Bidi"/>
        <import package="java.text.CharacterIterator"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map"/>
        <import package="sun.font.AttributeValues"/>
        <import package="sun.font.BidiUtils"/>
        <import package="sun.font.CoreMetrics"/>
        <import package="sun.font.Decoration"/>
        <import package="sun.font.FontLineMetrics"/>
        <import package="sun.font.FontResolver"/>
        <import package="sun.font.GraphicComponent"/>
        <import package="sun.font.LayoutPathImpl"/>
        <import package="sun.font.LayoutPathImpl.EmptyPath"/>
        <import package="sun.font.LayoutPathImpl.SegmentPathBuilder"/>
        <import package="sun.font.TextLabelFactory"/>
        <import package="sun.font.TextLineComponent"/>
        <import package="sun.text.CodePointIterator"/>
        <import package="java.awt.geom.Line2D"/>
        <class name="TextLine" line="33">
            <class name="TextLineMetrics" line="34">
                <declaration name="ascent" type="float" line="35"/>
                <declaration name="descent" type="float" line="36"/>
                <declaration name="leading" type="float" line="37"/>
                <declaration name="advance" type="float" line="38"/>
                <method name="TextLineMetrics" type="constructor" line="39">
                    <params>
                        <param name="ascent" type="float"/>
                        <param name="descent" type="float"/>
                        <param name="leading" type="float"/>
                        <param name="advance" type="float"/>
                    </params>
                </method>
            </class>
            <declaration name="fComponents" type="TextLineComponent[]" line="46"/>
            <declaration name="fBaselineOffsets" type="float[]" line="47"/>
            <declaration name="fComponentVisualOrder" type="int[]" line="48"/>
            <declaration name="locs" type="float[]" line="49"/>
            <declaration name="fChars" type="char[]" line="50"/>
            <declaration name="fCharsStart" type="int" line="51"/>
            <declaration name="fCharsLimit" type="int" line="52"/>
            <declaration name="fCharVisualOrder" type="int[]" line="53"/>
            <declaration name="fCharLogicalOrder" type="int[]" line="54"/>
            <declaration name="fCharLevels" type="byte[]" line="55"/>
            <declaration name="fIsDirectionLTR" type="boolean" line="56"/>
            <declaration name="lp" type="LayoutPathImpl" line="57"/>
            <declaration name="isSimple" type="boolean" line="58"/>
            <declaration name="pixelBounds" type="Rectangle" line="59"/>
            <declaration name="frc" type="FontRenderContext" line="60"/>
            <declaration name="fMetrics" type="TextLineMetrics" line="61"/>
            <method name="TextLine" type="constructor" line="62">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="components" type="TextLineComponent[]"/>
                    <param name="baselineOffsets" type="float[]"/>
                    <param name="chars" type="char[]"/>
                    <param name="charsStart" type="int"/>
                    <param name="charsLimit" type="int"/>
                    <param name="charLogicalOrder" type="int[]"/>
                    <param name="charLevels" type="byte[]"/>
                    <param name="isDirectionLTR" type="boolean"/>
                </params>
                <declaration name="componentVisualOrder" type="int[]" line="63"/>
            </method>
            <method name="checkCtorArgs" type="void" line="77">
                <declaration name="checkCharCount" type="int" line="78"/>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <method name="init" type="void" line="86">
                <declaration name="ascent" type="float" line="87"/>
                <declaration name="descent" type="float" line="88"/>
                <declaration name="leading" type="float" line="89"/>
                <declaration name="advance" type="float" line="90"/>
                <declaration name="maxGraphicHeight" type="float" line="91"/>
                <declaration name="maxGraphicHeightWithLeading" type="float" line="92"/>
                <declaration name="tlc" type="TextLineComponent" line="93"/>
                <declaration name="fitTopAndBottomGraphics" type="boolean" line="94"/>
                <scope line="96">
                    <declaration name="cm" type="CoreMetrics" line="99"/>
                    <declaration name="baseline" type="byte" line="100"/>
                    <scope line="101">
                        <declaration name="baselineOffset" type="float" line="102"/>
                        <declaration name="gd" type="float" line="104"/>
                    </scope>
                    <scope line="108">
                        <declaration name="graphicHeight" type="float" line="110"/>
                        <declaration name="graphicHeightWithLeading" type="float" line="111"/>
                    </scope>
                </scope>
                <scope line="116">
                    <scope line="117"/>
                    <scope line="120"/>
                </scope>
                <scope line="125"/>
                <declaration name="x" type="float" line="128"/>
                <declaration name="y" type="float" line="129"/>
                <declaration name="pcm" type="CoreMetrics" line="130"/>
                <declaration name="needPath" type="boolean" line="131"/>
                <scope line="133">
                    <declaration name="cm" type="CoreMetrics" line="135"/>
                    <scope line="136">
                        <declaration name="pb" type="float" line="137"/>
                        <declaration name="pa" type="float" line="138"/>
                        <declaration name="pd" type="float" line="139"/>
                        <declaration name="cb" type="float" line="140"/>
                        <declaration name="ca" type="float" line="141"/>
                        <declaration name="cd" type="float" line="142"/>
                        <declaration name="a" type="float" line="143"/>
                        <declaration name="d" type="float" line="144"/>
                        <declaration name="pax" type="float" line="145"/>
                        <declaration name="pdx" type="float" line="146"/>
                        <declaration name="cax" type="float" line="147"/>
                        <declaration name="cdx" type="float" line="148"/>
                        <declaration name="dax" type="float" line="149"/>
                        <declaration name="ddx" type="float" line="150"/>
                        <declaration name="dx" type="float" line="151"/>
                    </scope>
                    <scope line="155"/>
                </scope>
                <scope line="164">
                    <declaration name="pb" type="float" line="165"/>
                    <declaration name="pa" type="float" line="166"/>
                    <declaration name="pd" type="float" line="167"/>
                    <declaration name="d" type="float" line="169"/>
                    <scope line="170"/>
                    <scope line="173"/>
                </scope>
                <scope line="182">
                    <declaration name="pt" type="Point2D.Double" line="184"/>
                    <declaration name="tx" type="double" line="185"/>
                    <declaration name="builder" type="SegmentPathBuilder" line="186"/>
                    <scope line="188">
                        <declaration name="at" type="AffineTransform" line="190"/>
                        <scope line="191">
                            <declaration name="dx" type="double" line="192"/>
                            <declaration name="dy" type="double" line="193"/>
                        </scope>
                        <scope line="198"/>
                    </scope>
                    <scope line="204">
                        <declaration name="at" type="AffineTransform" line="206"/>
                        <scope line="207"/>
                    </scope>
                </scope>
            </method>
            <method name="getPixelBounds" type="Rectangle" line="213">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="result" type="Rectangle" line="214"/>
                <scope line="215"/>
                <declaration name="ix" type="int" line="218"/>
                <declaration name="iy" type="int" line="219"/>
                <declaration name="rx" type="float" line="220"/>
                <declaration name="ry" type="float" line="221"/>
                <declaration name="canCache" type="boolean" line="222"/>
                <scope line="223"/>
                <scope line="229">
                    <scope line="230">
                        <declaration name="tlc" type="TextLineComponent" line="231"/>
                        <declaration name="pb" type="Rectangle" line="232"/>
                        <scope line="233">
                            <scope line="234"/>
                            <scope line="237"/>
                        </scope>
                    </scope>
                    <scope line="242"/>
                </scope>
                <scope line="246">
                    <declaration name="MARGIN" type="int" line="247"/>
                    <declaration name="r2d" type="Rectangle2D" line="248"/>
                    <scope line="249"/>
                    <declaration name="bounds" type="Rectangle" line="252"/>
                    <declaration name="im" type="BufferedImage" line="253"/>
                    <declaration name="g2d" type="Graphics2D" line="254"/>
                </scope>
                <scope line="263"/>
            </method>
            <method name="computePixelBounds" type="Rectangle" line="270">
                <params>
                    <param name="im" type="BufferedImage"/>
                </params>
                <declaration name="w" type="int" line="271"/>
                <declaration name="h" type="int" line="272"/>
                <declaration name="l" type="int" line="273"/>
                <scope line="274">
                    <declaration name="buf" type="int[]" line="275"/>
                    <scope line="276">
                        <scope line="278">
                            <scope line="279"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="285">
                    <declaration name="buf" type="int[]" line="286"/>
                    <scope line="287">
                        <scope line="289">
                            <scope line="290"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="297">
                    <scope line="298">
                        <scope line="299">
                            <declaration name="v" type="int" line="300"/>
                            <scope line="301"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="307">
                    <scope line="308">
                        <scope line="309">
                            <declaration name="v" type="int" line="310"/>
                            <scope line="311"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <class name="Function" line="320">
                <method name="computeFunction" type="float" line="321"/>
            </class>
            <declaration name="fgPosAdvF" type="Function" line="323"/>
            <anonymous_class line="323">
                <method name="computeFunction" type="float" line="324">
                    <params>
                        <param name="line" type="TextLine"/>
                        <param name="componentIndex" type="int"/>
                        <param name="indexInArray" type="int"/>
                    </params>
                    <declaration name="tlc" type="TextLineComponent" line="325"/>
                    <declaration name="vi" type="int" line="326"/>
                </method>
            </anonymous_class>
            <declaration name="fgAdvanceF" type="Function" line="331"/>
            <anonymous_class line="331">
                <method name="computeFunction" type="float" line="332">
                    <params>
                        <param name="line" type="TextLine"/>
                        <param name="componentIndex" type="int"/>
                        <param name="indexInArray" type="int"/>
                    </params>
                    <declaration name="tlc" type="TextLineComponent" line="333"/>
                </method>
            </anonymous_class>
            <declaration name="fgXPositionF" type="Function" line="338"/>
            <anonymous_class line="338">
                <method name="computeFunction" type="float" line="339">
                    <params>
                        <param name="line" type="TextLine"/>
                        <param name="componentIndex" type="int"/>
                        <param name="indexInArray" type="int"/>
                    </params>
                    <declaration name="vi" type="int" line="340"/>
                    <declaration name="tlc" type="TextLineComponent" line="341"/>
                </method>
            </anonymous_class>
            <declaration name="fgYPositionF" type="Function" line="346"/>
            <anonymous_class line="346">
                <method name="computeFunction" type="float" line="347">
                    <params>
                        <param name="line" type="TextLine"/>
                        <param name="componentIndex" type="int"/>
                        <param name="indexInArray" type="int"/>
                    </params>
                    <declaration name="tlc" type="TextLineComponent" line="348"/>
                    <declaration name="charPos" type="float" line="349"/>
                </method>
            </anonymous_class>
            <method name="characterCount" type="int" line="354"/>
            <method name="isDirectionLTR" type="boolean" line="357"/>
            <method name="getMetrics" type="TextLineMetrics" line="360"/>
            <method name="visualToLogical" type="int" line="363">
                <params>
                    <param name="visualIndex" type="int"/>
                </params>
                <scope line="364"/>
                <scope line="367"/>
            </method>
            <method name="logicalToVisual" type="int" line="372">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharLevel" type="byte" line="375">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="isCharLTR" type="boolean" line="378">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharType" type="int" line="381">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="isCharSpace" type="boolean" line="384">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="isCharWhitespace" type="boolean" line="387">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharAngle" type="float" line="390">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCoreMetricsAt" type="CoreMetrics" line="393">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
                <scope line="394"/>
                <scope line="397"/>
                <declaration name="currentTlc" type="int" line="400"/>
                <declaration name="tlcStart" type="int" line="401"/>
                <declaration name="tlcLimit" type="int" line="402"/>
                <scope line="403">
                    <scope line="405"/>
                </scope>
            </method>
            <method name="getCharAscent" type="float" line="414">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharDescent" type="float" line="417">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharShift" type="float" line="420">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="applyFunctionAtIndex" type="float" line="423">
                <params>
                    <param name="logicalIndex" type="int"/>
                    <param name="f" type="Function"/>
                </params>
                <scope line="424"/>
                <declaration name="tlcStart" type="int" line="427"/>
                <scope line="428">
                    <declaration name="tlcLimit" type="int" line="429"/>
                    <scope line="430"/>
                    <scope line="433"/>
                </scope>
            </method>
            <method name="getCharAdvance" type="float" line="439">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharXPosition" type="float" line="442">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharYPosition" type="float" line="445">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharLinePosition" type="float" line="448">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getCharLinePosition" type="float" line="451">
                <params>
                    <param name="logicalIndex" type="int"/>
                    <param name="leading" type="boolean"/>
                </params>
                <declaration name="f" type="Function" line="452"/>
            </method>
            <method name="caretAtOffsetIsValid" type="boolean" line="455">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <scope line="456"/>
                <declaration name="tlcStart" type="int" line="459"/>
                <scope line="460">
                    <declaration name="tlcLimit" type="int" line="461"/>
                    <scope line="462"/>
                    <scope line="465"/>
                </scope>
            </method>
            <javadoc line="471">
                map a component visual index to the logical index.                
            </javadoc>
            <method name="getComponentLogicalIndex" type="int" line="474">
                <params>
                    <param name="vi" type="int"/>
                </params>
                <scope line="475"/>
            </method>
            <javadoc line="480">
                map a component logical index to the visual index.                
            </javadoc>
            <method name="getComponentVisualIndex" type="int" line="483">
                <params>
                    <param name="li" type="int"/>
                </params>
                <scope line="484"/>
                <scope line="487">
                    <scope line="488"/>
                </scope>
            </method>
            <method name="getCharBounds" type="Rectangle2D" line="494">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
                <scope line="495"/>
                <declaration name="tlcStart" type="int" line="498"/>
                <scope line="499">
                    <declaration name="tlcLimit" type="int" line="500"/>
                    <scope line="501">
                        <declaration name="tlc" type="TextLineComponent" line="502"/>
                        <declaration name="indexInTlc" type="int" line="503"/>
                        <declaration name="chBounds" type="Rectangle2D" line="504"/>
                        <declaration name="vi" type="int" line="505"/>
                    </scope>
                    <scope line="509"/>
                </scope>
            </method>
            <method name="getComponentShift" type="float" line="515">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="cm" type="CoreMetrics" line="516"/>
            </method>
            <method name="draw" type="void" line="519">
                <params>
                    <param name="g2" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="520">
                    <scope line="521">
                        <declaration name="tlc" type="TextLineComponent" line="522"/>
                    </scope>
                </scope>
                <scope line="526">
                    <declaration name="oldTx" type="AffineTransform" line="527"/>
                    <declaration name="pt" type="Point2D.Float" line="528"/>
                    <scope line="529">
                        <declaration name="tlc" type="TextLineComponent" line="530"/>
                        <declaration name="at" type="AffineTransform" line="534"/>
                        <scope line="535"/>
                        <scope line="541"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="547">
                Return the union of the visual bounds of all the components.
                  This incorporates the path.  It does not include logical
                  bounds (used by carets).                
            </javadoc>
            <method name="getVisualBounds" type="Rectangle2D" line="552">
                <declaration name="result" type="Rectangle2D" line="553"/>
                <scope line="554">
                    <declaration name="tlc" type="TextLineComponent" line="555"/>
                    <declaration name="r" type="Rectangle2D" line="556"/>
                    <declaration name="pt" type="Point2D.Float" line="557"/>
                    <scope line="558"/>
                    <scope line="561">
                        <declaration name="at" type="AffineTransform" line="563"/>
                        <scope line="564">
                            <declaration name="tx" type="AffineTransform" line="565"/>
                        </scope>
                        <scope line="569"/>
                    </scope>
                    <scope line="573"/>
                    <scope line="576"/>
                </scope>
                <scope line="580"/>
            </method>
            <method name="getItalicBounds" type="Rectangle2D" line="585">
                <declaration name="left" type="float" line="586"/>
                <declaration name="top" type="float" line="587"/>
                <scope line="588">
                    <declaration name="tlc" type="TextLineComponent" line="589"/>
                    <declaration name="tlcBounds" type="Rectangle2D" line="590"/>
                    <declaration name="x" type="float" line="591"/>
                    <declaration name="y" type="float" line="592"/>
                </scope>
            </method>
            <method name="getOutline" type="Shape" line="600">
                <params>
                    <param name="tx" type="AffineTransform"/>
                </params>
                <declaration name="dstShape" type="GeneralPath" line="601"/>
                <scope line="602">
                    <declaration name="tlc" type="TextLineComponent" line="603"/>
                </scope>
                <scope line="606"/>
            </method>
            <method name="hashCode" type="int" line="611"/>
            <method name="toString" type="String" line="614">
                <declaration name="buf" type="StringBuilder" line="615"/>
                <scope line="616"/>
            </method>
            <javadoc line="621">
                Create a TextLine from the text.  The Font must be able to
                  display all of the text.
                  attributes==null is equivalent to using an empty Map for
                  attributes                
            </javadoc>
            <method name="fastCreateTextLine" type="TextLine" line="627">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="chars" type="char[]"/>
                    <param name="font" type="Font"/>
                    <param name="lm" type="CoreMetrics"/>
                    <param name="attributes" type="Map"/>
                </params>
                <declaration name="isDirectionLTR" type="boolean" line="628"/>
                <declaration name="levels" type="byte[]" line="629"/>
                <declaration name="charsLtoV" type="int[]" line="630"/>
                <declaration name="bidi" type="Bidi" line="631"/>
                <declaration name="characterCount" type="int" line="632"/>
                <declaration name="requiresBidi" type="boolean" line="633"/>
                <declaration name="embs" type="byte[]" line="634"/>
                <declaration name="values" type="AttributeValues" line="635"/>
                <scope line="636">
                    <scope line="638"/>
                    <scope line="642">
                        <declaration name="level" type="byte" line="644"/>
                        <scope line="646"/>
                    </scope>
                </scope>
                <scope line="651"/>
                <scope line="654">
                    <declaration name="bidiflags" type="int" line="655"/>
                    <scope line="657">
                        <declaration name="charsVtoL" type="int[]" line="659"/>
                    </scope>
                </scope>
                <declaration name="decorator" type="Decoration" line="664"/>
                <declaration name="layoutFlags" type="int" line="665"/>
                <declaration name="factory" type="TextLabelFactory" line="666"/>
                <declaration name="components" type="TextLineComponent[]" line="667"/>
                <declaration name="numComponents" type="int" line="669"/>
                <scope line="670"/>
                <scope line="673">
                    <declaration name="temp" type="TextLineComponent[]" line="674"/>
                </scope>
            </method>
            <method name="expandArray" type="TextLineComponent[]" line="680">
                <params>
                    <param name="orig" type="TextLineComponent[]"/>
                </params>
                <declaration name="newComponents" type="TextLineComponent[]" line="681"/>
            </method>
            <javadoc line="685">
                Returns an array in logical order of the TextLineComponents on
                  the text in the given range, with the given attributes.                
            </javadoc>
            <method name="createComponentsOnRun" type="TextLineComponent[]" line="689">
                <params>
                    <param name="runStart" type="int"/>
                    <param name="runLimit" type="int"/>
                    <param name="chars" type="char[]"/>
                    <param name="charsLtoV" type="int[]"/>
                    <param name="levels" type="byte[]"/>
                    <param name="factory" type="TextLabelFactory"/>
                    <param name="font" type="Font"/>
                    <param name="cm" type="CoreMetrics"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="decorator" type="Decoration"/>
                    <param name="components" type="TextLineComponent[]"/>
                    <param name="numComponents" type="int"/>
                </params>
                <declaration name="pos" type="int" line="690"/>
                <scope line="691">
                    <declaration name="chunkLimit" type="int" line="692"/>
                    <scope line="693">
                        <declaration name="startPos" type="int" line="694"/>
                        <declaration name="lmCount" type="int" line="695"/>
                        <scope line="696">
                            <declaration name="lineMetrics" type="LineMetrics" line="697"/>
                        </scope>
                        <scope line="701"/>
                        <declaration name="nextComponent" type="TextLineComponent" line="704"/>
                        <scope line="706"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="717">
                Returns an array (in logical order) of the TextLineComponents representing
                  the text.  The components are both logically and visually contiguous.                
            </javadoc>
            <method name="getComponents" type="TextLineComponent[]" line="721">
                <params>
                    <param name="styledParagraph" type="StyledParagraph"/>
                    <param name="chars" type="char[]"/>
                    <param name="textStart" type="int"/>
                    <param name="textLimit" type="int"/>
                    <param name="charsLtoV" type="int[]"/>
                    <param name="levels" type="byte[]"/>
                    <param name="factory" type="TextLabelFactory"/>
                </params>
                <declaration name="frc" type="FontRenderContext" line="722"/>
                <declaration name="numComponents" type="int" line="723"/>
                <declaration name="tempComponents" type="TextLineComponent[]" line="724"/>
                <declaration name="pos" type="int" line="725"/>
                <scope line="726">
                    <declaration name="runLimit" type="int" line="727"/>
                    <declaration name="decorator" type="Decoration" line="728"/>
                    <declaration name="graphicOrFont" type="Object" line="729"/>
                    <scope line="730">
                        <declaration name="baseRot" type="AffineTransform" line="731"/>
                        <declaration name="graphicAttribute" type="GraphicAttribute" line="732"/>
                        <scope line="733">
                            <declaration name="chunkLimit" type="int" line="734"/>
                            <declaration name="nextGraphic" type="GraphicComponent" line="735"/>
                            <scope line="738"/>
                        </scope>
                    </scope>
                    <scope line="745">
                        <declaration name="font" type="Font" line="746"/>
                        <scope line="750"/>
                    </scope>
                </scope>
                <declaration name="components" type="TextLineComponent[]" line="756"/>
                <scope line="757"/>
                <scope line="760"/>
            </method>
            <javadoc line="766">
                Create a TextLine from the Font and character data over the
                  range.  The range is relative to both the StyledParagraph and the
                  character array.                
            </javadoc>
            <method name="createLineFromText" type="TextLine" line="771">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="styledParagraph" type="StyledParagraph"/>
                    <param name="factory" type="TextLabelFactory"/>
                    <param name="isDirectionLTR" type="boolean"/>
                    <param name="baselineOffsets" type="float[]"/>
                </params>
                <declaration name="lineBidi" type="Bidi" line="773"/>
                <declaration name="charsLtoV" type="int[]" line="774"/>
                <declaration name="levels" type="byte[]" line="775"/>
                <scope line="776">
                    <declaration name="charsVtoL" type="int[]" line="778"/>
                </scope>
                <declaration name="components" type="TextLineComponent[]" line="781"/>
            </method>
            <javadoc line="784">
                Compute the components order from the given components array and
                  logical-to-visual character mapping.  May return null if canonical.                
            </javadoc>
            <method name="computeComponentOrder" type="int[]" line="788">
                <params>
                    <param name="components" type="TextLineComponent[]"/>
                    <param name="charsLtoV" type="int[]"/>
                </params>
                <declaration name="componentOrder" type="int[]" line="789"/>
                <scope line="790">
                    <declaration name="gStart" type="int" line="792"/>
                    <scope line="793"/>
                </scope>
            </method>
            <javadoc line="802">
                Create a TextLine from the text.  chars is just the text in the iterator.                
            </javadoc>
            <method name="standardCreateTextLine" type="TextLine" line="805">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="chars" type="char[]"/>
                    <param name="baselineOffsets" type="float[]"/>
                </params>
                <declaration name="styledParagraph" type="StyledParagraph" line="806"/>
                <declaration name="bidi" type="Bidi" line="807"/>
                <scope line="808"/>
                <declaration name="layoutFlags" type="int" line="811"/>
                <declaration name="factory" type="TextLabelFactory" line="812"/>
                <declaration name="isDirectionLTR" type="boolean" line="813"/>
                <scope line="814"/>
            </method>
            <javadoc line="819">
                When this returns, the ACI&apos;s current position will be at the start of the
                  first run which does NOT contain a GraphicAttribute.  If no such run exists
                  the ACI&apos;s position will be at the end, and this method will return false.                
            </javadoc>
            <method name="advanceToFirstFont" type="boolean" line="824">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                </params>
                <scope line="825">
                    <scope line="826"/>
                </scope>
            </method>
            <method name="getNormalizedOffsets" type="float[]" line="832">
                <params>
                    <param name="baselineOffsets" type="float[]"/>
                    <param name="baseline" type="byte"/>
                </params>
                <scope line="833">
                    <declaration name="base" type="float" line="834"/>
                    <declaration name="temp" type="float[]" line="835"/>
                </scope>
            </method>
            <method name="getFontAtCurrentPos" type="Font" line="841">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                </params>
                <declaration name="value" type="Object" line="842"/>
                <scope line="843"/>
                <scope line="846"/>
                <declaration name="ch" type="int" line="849"/>
                <scope line="850">
                    <declaration name="resolver" type="FontResolver" line="851"/>
                </scope>
            </method>
            <method name="firstVisualChunk" type="int" line="856">
                <params>
                    <param name="order" type="int"/>
                    <param name="direction" type="byte"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <scope line="857">
                    <declaration name="dir" type="byte" line="858"/>
                    <scope line="859"/>
                </scope>
            </method>
            <method name="getJustifiedLine" type="TextLine" line="865">
                <params>
                    <param name="justificationWidth" type="float"/>
                    <param name="justifyRatio" type="float"/>
                    <param name="justStart" type="int"/>
                    <param name="justLimit" type="int"/>
                </params>
                <declaration name="newComponents" type="TextLineComponent[]" line="866"/>
                <declaration name="leftHang" type="float" line="868"/>
                <declaration name="adv" type="float" line="869"/>
                <declaration name="justifyDelta" type="float" line="870"/>
                <declaration name="rejustify" type="boolean" line="871"/>
                <scope line="872">
                    <declaration name="justifyAdvance" type="float" line="874"/>
                    <declaration name="infoPositions" type="int[]" line="876"/>
                    <declaration name="infoCount" type="int" line="877"/>
                    <scope line="878">
                        <declaration name="logIndex" type="int" line="879"/>
                    </scope>
                    <declaration name="infos" type="GlyphJustificationInfo[]" line="883"/>
                    <declaration name="compStart" type="int" line="884"/>
                    <scope line="885">
                        <declaration name="comp" type="TextLineComponent" line="886"/>
                        <declaration name="compLength" type="int" line="887"/>
                        <declaration name="compLimit" type="int" line="888"/>
                        <scope line="889">
                            <declaration name="rangeMin" type="int" line="890"/>
                            <declaration name="rangeMax" type="int" line="891"/>
                            <scope line="893"/>
                        </scope>
                    </scope>
                    <declaration name="infoStart" type="int" line="898"/>
                    <declaration name="infoLimit" type="int" line="899"/>
                    <scope line="900"/>
                    <scope line="903"/>
                    <declaration name="justifier" type="TextJustifier" line="906"/>
                    <declaration name="deltas" type="float[]" line="907"/>
                    <declaration name="canRejustify" type="boolean" line="908"/>
                    <declaration name="wantRejustify" type="boolean" line="909"/>
                    <declaration name="flags" type="boolean[]" line="910"/>
                    <scope line="912">
                        <declaration name="comp" type="TextLineComponent" line="913"/>
                        <declaration name="compLength" type="int" line="914"/>
                        <declaration name="compLimit" type="int" line="915"/>
                        <scope line="916">
                            <declaration name="rangeMin" type="int" line="917"/>
                            <declaration name="rangeMax" type="int" line="918"/>
                            <scope line="921"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getAdvanceBetween" type="float" line="931">
                <params>
                    <param name="components" type="TextLineComponent[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="advance" type="float" line="932"/>
                <declaration name="tlcStart" type="int" line="933"/>
                <scope line="934">
                    <declaration name="comp" type="TextLineComponent" line="935"/>
                    <declaration name="tlcLength" type="int" line="936"/>
                    <declaration name="tlcLimit" type="int" line="937"/>
                    <scope line="938">
                        <declaration name="measureStart" type="int" line="939"/>
                        <declaration name="measureLimit" type="int" line="940"/>
                        <scope line="942"/>
                    </scope>
                </scope>
            </method>
            <method name="getLayoutPath" type="LayoutPathImpl" line="950"/>
        </class>
    </source>