<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="GlyphMetrics" line="45">
            <javadoc line="45">
                The &lt;code&gt;GlyphMetrics&lt;/code&gt; class represents infomation for a
                  single glyph.   A glyph is the visual representation of one or more
                  characters.  Many different glyphs can be used to represent a single
                  character or combination of characters.  &lt;code&gt;GlyphMetrics&lt;/code&gt;
                  instances are produced by {@link java.awt.Font Font} and are applicable
                  to a specific glyph in a particular &lt;code&gt;Font&lt;/code&gt;.
                  &lt;p&gt;
                  Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT.
                  &lt;ul&gt;
                  &lt;li&gt;STANDARD glyphs are commonly used to represent single characters.
                  &lt;li&gt;LIGATURE glyphs are used to represent sequences of characters.
                  &lt;li&gt;COMPONENT glyphs in a {@link GlyphVector} do not correspond to a
                  particular character in a text model. Instead, COMPONENT glyphs are
                  added for typographical reasons, such as Arabic justification.
                  &lt;li&gt;COMBINING glyphs embellish STANDARD or LIGATURE glyphs, such
                  as accent marks.  Carets do not appear before COMBINING glyphs.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Other metrics available through &lt;code&gt;GlyphMetrics&lt;/code&gt; are the
                  components of the advance, the visual bounds, and the left and right
                  side bearings.
                  &lt;p&gt;
                  Glyphs for a rotated font, or obtained from a &lt;code&gt;GlyphVector&lt;/code&gt;
                  which has applied a rotation to the glyph, can have advances that
                  contain both X and Y components.  Usually the advance only has one
                  component.
                  &lt;p&gt;
                  The advance of a glyph is the distance from the glyph&apos;s origin to the
                  origin of the next glyph along the baseline, which is either vertical
                  or horizontal.  Note that, in a &lt;code&gt;GlyphVector&lt;/code&gt;,
                  the distance from a glyph to its following glyph might not be the
                  glyph&apos;s advance, because of kerning or other positioning adjustments.
                  &lt;p&gt;
                  The bounds is the smallest rectangle that completely contains the
                  outline of the glyph.  The bounds rectangle is relative to the
                  glyph&apos;s origin.  The left-side bearing is the distance from the glyph
                  origin to the left of its bounds rectangle. If the left-side bearing is
                  negative, part of the glyph is drawn to the left of its origin.  The
                  right-side bearing is the distance from the right side of the bounds
                  rectangle to the next glyph origin (the origin plus the advance).  If
                  negative, part of the glyph is drawn to the right of the next glyph&apos;s
                  origin.  Note that the bounds does not necessarily enclose all the pixels
                  affected when rendering the glyph, because of rasterization and pixel
                  adjustment effects.
                  &lt;p&gt;
                  Although instances of &lt;code&gt;GlyphMetrics&lt;/code&gt; can be directly
                  constructed, they are almost always obtained from a
                  &lt;code&gt;GlyphVector&lt;/code&gt;.  Once constructed, &lt;code&gt;GlyphMetrics&lt;/code&gt;
                  objects are immutable.
                  &lt;p&gt;
                  &lt;strong&gt;Example&lt;/strong&gt;:&lt;p&gt;
                  Querying a &lt;code&gt;Font&lt;/code&gt; for glyph information
                  &lt;blockquote&gt;&lt;pre&gt;
                  Font font = ...;
                  int glyphIndex = ...;
                  GlyphMetrics metrics = GlyphVector.getGlyphMetrics(glyphIndex);
                  int isStandard = metrics.isStandard();
                  float glyphAdvance = metrics.getAdvance();
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <see>
                    java.awt.Font                    
                </see>
                <see>
                    GlyphVector                    
                </see>
            </javadoc>
            <declaration name="horizontal" type="boolean" line="110"/>
            <javadoc line="110">
                Indicates whether the metrics are for a horizontal or vertical baseline.                
            </javadoc>
            <declaration name="advanceX" type="float" line="115"/>
            <javadoc line="115">
                The x-component of the advance.                
            </javadoc>
            <declaration name="advanceY" type="float" line="120"/>
            <javadoc line="120">
                The y-component of the advance.                
            </javadoc>
            <declaration name="bounds" type="Rectangle2D.Float" line="125"/>
            <javadoc line="125">
                The bounds of the associated glyph.                
            </javadoc>
            <declaration name="glyphType" type="byte" line="130"/>
            <javadoc line="130">
                Additional information about the glyph encoded as a byte.                
            </javadoc>
            <declaration name="STANDARD" type="byte" line="135"/>
            <javadoc line="135">
                Indicates a glyph that represents a single standard
                  character.                
            </javadoc>
            <declaration name="LIGATURE" type="byte" line="141"/>
            <javadoc line="141">
                Indicates a glyph that represents multiple characters
                  as a ligature, for example &apos;fi&apos; or &apos;ffi&apos;.  It is followed by
                  filler glyphs for the remaining characters. Filler and combining
                  glyphs can be intermixed to control positioning of accent marks
                  on the logically preceeding ligature.                
            </javadoc>
            <declaration name="COMBINING" type="byte" line="150"/>
            <javadoc line="150">
                Indicates a glyph that represents a combining character,
                  such as an umlaut.  There is no caret position between this glyph
                  and the preceeding glyph.                
            </javadoc>
            <declaration name="COMPONENT" type="byte" line="157"/>
            <javadoc line="157">
                Indicates a glyph with no corresponding character in the
                  backing store.  The glyph is associated with the character
                  represented by the logicaly preceeding non-component glyph.  This
                  is used for kashida justification or other visual modifications to
                  existing glyphs.  There is no caret position between this glyph
                  and the preceeding glyph.                
            </javadoc>
            <declaration name="WHITESPACE" type="byte" line="167"/>
            <javadoc line="167">
                Indicates a glyph with no visual representation. It can
                  be added to the other code values to indicate an invisible glyph.                
            </javadoc>
            <javadoc line="173">
                Constructs a &lt;code&gt;GlyphMetrics&lt;/code&gt; object.                
                <param>
                    advance the advance width of the glyph                    
                </param>
                <param>
                    bounds the black box bounds of the glyph                    
                </param>
                <param>
                    glyphType the type of the glyph                    
                </param>
            </javadoc>
            <method name="GlyphMetrics" type="constructor" line="179">
                <params>
                    <param name="advance" type="float"/>
                    <param name="bounds" type="Rectangle2D"/>
                    <param name="glyphType" type="byte"/>
                </params>
            </method>
            <javadoc line="188">
                Constructs a &lt;code&gt;GlyphMetrics&lt;/code&gt; object.                
                <param>
                    horizontal if true, metrics are for a horizontal baseline,
                      otherwise they are for a vertical baseline                    
                </param>
                <param>
                    advanceX the X-component of the glyph's advance                    
                </param>
                <param>
                    advanceY the Y-component of the glyph's advance                    
                </param>
                <param>
                    bounds the visual bounds of the glyph                    
                </param>
                <param>
                    glyphType the type of the glyph                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="GlyphMetrics" type="constructor" line="199">
                <params>
                    <param name="horizontal" type="boolean"/>
                    <param name="advanceX" type="float"/>
                    <param name="advanceY" type="float"/>
                    <param name="bounds" type="Rectangle2D"/>
                    <param name="glyphType" type="byte"/>
                </params>
            </method>
            <javadoc line="209">
                Returns the advance of the glyph along the baseline (either
                  horizontal or vertical).                
                <return>
                    the advance of the glyph                    
                </return>
            </javadoc>
            <method name="getAdvance" type="float" line="214"/>
            <javadoc line="218">
                Returns the x-component of the advance of the glyph.                
                <return>
                    the x-component of the advance of the glyph                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAdvanceX" type="float" line="223"/>
            <javadoc line="227">
                Returns the y-component of the advance of the glyph.                
                <return>
                    the y-component of the advance of the glyph                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAdvanceY" type="float" line="232"/>
            <javadoc line="236">
                Returns the bounds of the glyph. This is the bounding box of the glyph outline.
                  Because of rasterization and pixel alignment effects, it does not necessarily
                  enclose the pixels that are affected when rendering the glyph.                
                <return>
                    a {@link Rectangle2D} that is the bounds of the glyph.                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="242"/>
            <javadoc line="246">
                Returns the left (top) side bearing of the glyph.
                  &lt;p&gt;
                  This is the distance from 0,&amp;nbsp;0 to the left (top) of the glyph
                  bounds.  If the bounds of the glyph is to the left of (above) the
                  origin, the LSB is negative.                
                <return>
                    the left side bearing of the glyph.                    
                </return>
            </javadoc>
            <method name="getLSB" type="float" line="254"/>
            <javadoc line="258">
                Returns the right (bottom) side bearing of the glyph.
                  &lt;p&gt;
                  This is the distance from the right (bottom) of the glyph bounds to
                  the advance. If the bounds of the glyph is to the right of (below)
                  the advance, the RSB is negative.                
                <return>
                    the right side bearing of the glyph.                    
                </return>
            </javadoc>
            <method name="getRSB" type="float" line="266"/>
            <javadoc line="272">
                Returns the raw glyph type code.                
                <return>
                    the raw glyph type code.                    
                </return>
            </javadoc>
            <method name="getType" type="int" line="276"/>
            <javadoc line="280">
                Returns &lt;code&gt;true&lt;/code&gt; if this is a standard glyph.                
                <return>
                    <code>true</code> if this is a standard glyph;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isStandard" type="boolean" line="285"/>
            <javadoc line="289">
                Returns &lt;code&gt;true&lt;/code&gt; if this is a ligature glyph.                
                <return>
                    <code>true</code> if this is a ligature glyph;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isLigature" type="boolean" line="294"/>
            <javadoc line="298">
                Returns &lt;code&gt;true&lt;/code&gt; if this is a combining glyph.                
                <return>
                    <code>true</code> if this is a combining glyph;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isCombining" type="boolean" line="303"/>
            <javadoc line="307">
                Returns &lt;code&gt;true&lt;/code&gt; if this is a component glyph.                
                <return>
                    <code>true</code> if this is a component glyph;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isComponent" type="boolean" line="312"/>
            <javadoc line="316">
                Returns &lt;code&gt;true&lt;/code&gt; if this is a whitespace glyph.                
                <return>
                    <code>true</code> if this is a whitespace glyph;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isWhitespace" type="boolean" line="321"/>
        </class>
    </source>