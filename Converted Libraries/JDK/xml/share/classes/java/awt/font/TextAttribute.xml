<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.io.InvalidObjectException"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <class name="TextAttribute" line="48">
            <extends class="Attribute"/>
            <comment line="260">
                table of all instances in this class, used by readResolve                
            </comment>
            <comment line="292">
                Serialization compatibility with Java 2 platform v1.2.
                 1.2 will throw an InvalidObjectException if ever asked to
                 deserialize INPUT_METHOD_UNDERLINE.
                 This shouldn&apos;t happen in real life.                
            </comment>
            <comment line="298">
                For use with Font.                
            </comment>
            <comment line="705">
                Adornments added to text.                
            </comment>
            <comment line="786">
                Attributes use to control layout of text on a line.                
            </comment>
            <comment line="890">
                For use by input method.                
            </comment>
            <javadoc line="48">
                The &lt;code&gt;TextAttribute&lt;/code&gt; class defines attribute keys and
                  attribute values used for text rendering.
                  &lt;p&gt;
                  &lt;code&gt;TextAttribute&lt;/code&gt; instances are used as attribute keys to
                  identify attributes in{@link java.awt.Font Font},{@link java.awt.font.TextLayout TextLayout},{@link java.text.AttributedCharacterIterator AttributedCharacterIterator},
                  and other classes handling text attributes. Other constants defined
                  in this class can be used as attribute values.
                  &lt;p&gt;
                  For each text attribute, the documentation provides:
                  &lt;UL&gt;
                  &lt;LI&gt;the type of its value,
                  &lt;LI&gt;the relevant predefined constants, if any
                  &lt;LI&gt;the default effect if the attribute is absent
                  &lt;LI&gt;the valid values if there are limitations
                  &lt;LI&gt;a description of the effect.
                  &lt;/UL&gt;
                  &lt;p&gt;
                  &lt;H4&gt;Values&lt;/H4&gt;
                  &lt;UL&gt;
                  &lt;LI&gt;The values of attributes must always be immutable.
                  &lt;LI&gt;Where value limitations are given, any value outside of that
                  set is reserved for future use; the value will be treated as
                  the default.
                  &lt;LI&gt;The value &lt;code&gt;null&lt;/code&gt; is treated the same as the
                  default value and results in the default behavior.
                  &lt;li&gt;If the value is not of the proper type, the attribute
                  will be ignored.
                  &lt;li&gt;The identity of the value does not matter, only the actual
                  value.  For example, &lt;code&gt;TextAttribute.WEIGHT_BOLD&lt;/code&gt; and
                  &lt;code&gt;new Float(2.0)&lt;/code&gt;
                  indicate the same &lt;code&gt;WEIGHT&lt;/code&gt;.
                  &lt;li&gt;Attribute values of type &lt;code&gt;Number&lt;/code&gt; (used for
                  &lt;code&gt;WEIGHT&lt;/code&gt;, &lt;code&gt;WIDTH&lt;/code&gt;, &lt;code&gt;POSTURE&lt;/code&gt;,
                  &lt;code&gt;SIZE&lt;/code&gt;, &lt;code&gt;JUSTIFICATION&lt;/code&gt;, and
                  &lt;code&gt;TRACKING&lt;/code&gt;) can vary along their natural range and are
                  not restricted to the predefined constants.
                  &lt;code&gt;Number.floatValue()&lt;/code&gt; is used to get the actual value
                  from the &lt;code&gt;Number&lt;/code&gt;.
                  &lt;li&gt;The values for &lt;code&gt;WEIGHT&lt;/code&gt;, &lt;code&gt;WIDTH&lt;/code&gt;, and
                  &lt;code&gt;POSTURE&lt;/code&gt; are interpolated by the system, which
                  can select the &apos;nearest available&apos; font or use other techniques to
                  approximate the user&apos;s request.
                  &lt;/UL&gt;
                  &lt;h4&gt;Summary of attributes&lt;/h4&gt;
                  &lt;p&gt;
                  &lt;font size=&quot;-1&quot;&gt;
                  &lt;table align=&quot;center&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;%95&quot;
                  summary=&quot;Key, value type, principal constants, and default value
                  behavior of all TextAttributes&quot;&gt;
                  &lt;tr bgcolor=&quot;#ccccff&quot;&gt;
                  &lt;th valign=&quot;TOP&quot; align=&quot;CENTER&quot;&gt;Key&lt;/th&gt;
                  &lt;th valign=&quot;TOP&quot; align=&quot;CENTER&quot;&gt;Value Type&lt;/th&gt;
                  &lt;th valign=&quot;TOP&quot; align=&quot;CENTER&quot;&gt;Principal Constants&lt;/th&gt;
                  &lt;th valign=&quot;TOP&quot; align=&quot;CENTER&quot;&gt;Default Value&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #FAMILY}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;String&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;See Font {@link java.awt.Font#DIALOG DIALOG},{@link java.awt.Font#DIALOG_INPUT DIALOG_INPUT},&lt;br&gt; {@link java.awt.Font#SERIF SERIF},{@link java.awt.Font#SANS_SERIF SANS_SERIF}, and {@link java.awt.Font#MONOSPACED MONOSPACED}.
                  &lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;&quot;Default&quot; (use platform default)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #WEIGHT}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Number&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;WEIGHT_REGULAR, WEIGHT_BOLD&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;WEIGHT_REGULAR&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #WIDTH}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Number&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;WIDTH_CONDENSED, WIDTH_REGULAR,&lt;br&gt;WIDTH_EXTENDED&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;WIDTH_REGULAR&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #POSTURE}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Number&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;POSTURE_REGULAR, POSTURE_OBLIQUE&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;POSTURE_REGULAR&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #SIZE}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Number&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;none&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;12.0&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #TRANSFORM}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link TransformAttribute}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;See TransformAttribute {@link TransformAttribute#IDENTITY IDENTITY}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;TransformAttribute.IDENTITY&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #SUPERSCRIPT}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Integer&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;SUPERSCRIPT_SUPER, SUPERSCRIPT_SUB&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;0 (use the standard glyphs and metrics)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #FONT}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link java.awt.Font}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;none&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;null (do not override font resolution)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #CHAR_REPLACEMENT}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link GraphicAttribute}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;none&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;null (draw text using font glyphs)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #FOREGROUND}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link java.awt.Paint}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;none&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;null (use current graphics paint)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #BACKGROUND}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link java.awt.Paint}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;none&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;null (do not render background)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #UNDERLINE}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Integer&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;UNDERLINE_ON&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;-1 (do not render underline)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #STRIKETHROUGH}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Boolean&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;STRIKETHROUGH_ON&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;false (do not render strikethrough)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #RUN_DIRECTION}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Boolean&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;RUN_DIRECTION_LTR&lt;br&gt;RUN_DIRECTION_RTL&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;null (use {@link java.text.Bidi} standard default)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #BIDI_EMBEDDING}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Integer&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;none&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;0 (use base line direction)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #JUSTIFICATION}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Number&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;JUSTIFICATION_FULL&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;JUSTIFICATION_FULL&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #INPUT_METHOD_HIGHLIGHT}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link java.awt.im.InputMethodHighlight},&lt;br&gt;{@link java.text.Annotation}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;(see class)&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;null (do not apply input highlighting)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #INPUT_METHOD_UNDERLINE}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Integer&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;UNDERLINE_LOW_ONE_PIXEL,&lt;br&gt;UNDERLINE_LOW_TWO_PIXEL&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;-1 (do not render underline)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #SWAP_COLORS}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Boolean&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;SWAP_COLORS_ON&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;false (do not swap colors)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #NUMERIC_SHAPING}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link java.awt.font.NumericShaper}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;none&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;null (do not shape digits)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #KERNING}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Integer&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;KERNING_ON&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;0 (do not request kerning)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr bgcolor=&quot;#eeeeff&quot;&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #LIGATURES}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Integer&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;LIGATURES_ON&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;0 (do not form optional ligatures)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;{@link #TRACKING}&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;Number&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;TRACKING_LOOSE, TRACKING_TIGHT&lt;/td&gt;
                  &lt;td valign=&quot;TOP&quot;&gt;0 (do not add tracking)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/font&gt;                
                <see>
                    java.awt.Font                    
                </see>
                <see>
                    java.awt.font.TextLayout                    
                </see>
                <see>
                    java.text.AttributedCharacterIterator                    
                </see>
            </javadoc>
            <declaration name="instanceMap" type="Map" line="260"/>
            <javadoc line="262">
                Constructs a &lt;code&gt;TextAttribute&lt;/code&gt; with the specified name.                
                <param>
                    name the attribute name to assign to this
                      &lt;code&gt;TextAttribute&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="TextAttribute" type="constructor" line="267">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="269"/>
            </method>
            <javadoc line="274">
                Resolves instances being deserialized to the predefined constants.                
            </javadoc>
            <method name="readResolve" type="Object" line="277">
                <scope line="278"/>
                <declaration name="instance" type="TextAttribute" line="283"/>
                <scope line="284"/>
                <scope line="286"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="295"/>
            <declaration name="FAMILY" type="TextAttribute" line="301"/>
            <javadoc line="301">
                Attribute key for the font name.  Values are instances of
                  &lt;b&gt;&lt;code&gt;String&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;&quot;Default&quot;&lt;/code&gt;, which causes the platform default font
                  family to be used.
                  &lt;p&gt; The &lt;code&gt;Font&lt;/code&gt; class defines constants for the logical
                  font names{@link java.awt.Font#DIALOG DIALOG},{@link java.awt.Font#DIALOG_INPUT DIALOG_INPUT},{@link java.awt.Font#SANS_SERIF SANS_SERIF},{@link java.awt.Font#SERIF SERIF}, and{@link java.awt.Font#MONOSPACED MONOSPACED}.
                  &lt;p&gt;This defines the value passed as &lt;code&gt;name&lt;/code&gt; to the
                  &lt;code&gt;Font&lt;/code&gt; constructor.  Both logical and physical
                  font names are allowed. If a font with the requested name
                  is not found, the default font is used.
                  &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This attribute is unfortunately misnamed, as
                  it specifies the face name and not just the family.  Thus
                  values such as &quot;Lucida Sans Bold&quot; will select that face if it
                  exists.  Note, though, that if the requested face does not
                  exist, the default will be used with &lt;em&gt;regular&lt;/em&gt; weight.
                  The &quot;Bold&quot; in the name is part of the face name, not a separate
                  request that the font&apos;s weight be bold.&lt;/p&gt;                
            </javadoc>
            <declaration name="WEIGHT" type="TextAttribute" line="331"/>
            <javadoc line="331">
                Attribute key for the weight of a font.  Values are instances
                  of &lt;b&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;WEIGHT_REGULAR&lt;/code&gt;.
                  &lt;p&gt;Several constant values are provided, see {@link #WEIGHT_EXTRA_LIGHT}, {@link #WEIGHT_LIGHT}, {@link #WEIGHT_DEMILIGHT}, {@link #WEIGHT_REGULAR}, {@link #WEIGHT_SEMIBOLD}, {@link #WEIGHT_MEDIUM}, {@link #WEIGHT_DEMIBOLD}, {@link #WEIGHT_BOLD}, {@link #WEIGHT_HEAVY},{@link #WEIGHT_EXTRABOLD}, and {@link #WEIGHT_ULTRABOLD}.  The
                  value &lt;code&gt;WEIGHT_BOLD&lt;/code&gt; corresponds to the
                  style value &lt;code&gt;Font.BOLD&lt;/code&gt; as passed to the
                  &lt;code&gt;Font&lt;/code&gt; constructor.
                  &lt;p&gt;The value is roughly the ratio of the stem width to that of
                  the regular weight.
                  &lt;p&gt;The system can interpolate the provided value.                
            </javadoc>
            <declaration name="WEIGHT_EXTRA_LIGHT" type="Float" line="354"/>
            <javadoc line="354">
                The lightest predefined weight.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_LIGHT" type="Float" line="361"/>
            <javadoc line="361">
                The standard light weight.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_DEMILIGHT" type="Float" line="368"/>
            <javadoc line="368">
                An intermediate weight between &lt;code&gt;WEIGHT_LIGHT&lt;/code&gt; and
                  &lt;code&gt;WEIGHT_STANDARD&lt;/code&gt;.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_REGULAR" type="Float" line="376"/>
            <javadoc line="376">
                The standard weight. This is the default value for &lt;code&gt;WEIGHT&lt;/code&gt;.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_SEMIBOLD" type="Float" line="383"/>
            <javadoc line="383">
                A moderately heavier weight than &lt;code&gt;WEIGHT_REGULAR&lt;/code&gt;.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_MEDIUM" type="Float" line="390"/>
            <javadoc line="390">
                An intermediate weight between &lt;code&gt;WEIGHT_REGULAR&lt;/code&gt; and
                  &lt;code&gt;WEIGHT_BOLD&lt;/code&gt;.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_DEMIBOLD" type="Float" line="398"/>
            <javadoc line="398">
                A moderately lighter weight than &lt;code&gt;WEIGHT_BOLD&lt;/code&gt;.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_BOLD" type="Float" line="405"/>
            <javadoc line="405">
                The standard bold weight.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_HEAVY" type="Float" line="412"/>
            <javadoc line="412">
                A moderately heavier weight than &lt;code&gt;WEIGHT_BOLD&lt;/code&gt;.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_EXTRABOLD" type="Float" line="419"/>
            <javadoc line="419">
                An extra heavy weight.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WEIGHT_ULTRABOLD" type="Float" line="426"/>
            <javadoc line="426">
                The heaviest predefined weight.                
                <see>
                    #WEIGHT                    
                </see>
            </javadoc>
            <declaration name="WIDTH" type="TextAttribute" line="433"/>
            <javadoc line="433">
                Attribute key for the width of a font.  Values are instances of
                  &lt;b&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;WIDTH_REGULAR&lt;/code&gt;.
                  &lt;p&gt;Several constant values are provided, see {@link #WIDTH_CONDENSED}, {@link #WIDTH_SEMI_CONDENSED}, {@link #WIDTH_REGULAR}, {@link #WIDTH_SEMI_EXTENDED}, {@link #WIDTH_EXTENDED}.
                  &lt;p&gt;The value is roughly the ratio of the advance width to that
                  of the regular width.
                  &lt;p&gt;The system can interpolate the provided value.                
            </javadoc>
            <declaration name="WIDTH_CONDENSED" type="Float" line="451"/>
            <javadoc line="451">
                The most condensed predefined width.                
                <see>
                    #WIDTH                    
                </see>
            </javadoc>
            <declaration name="WIDTH_SEMI_CONDENSED" type="Float" line="458"/>
            <javadoc line="458">
                A moderately condensed width.                
                <see>
                    #WIDTH                    
                </see>
            </javadoc>
            <declaration name="WIDTH_REGULAR" type="Float" line="465"/>
            <javadoc line="465">
                The standard width. This is the default value for
                  &lt;code&gt;WIDTH&lt;/code&gt;.                
                <see>
                    #WIDTH                    
                </see>
            </javadoc>
            <declaration name="WIDTH_SEMI_EXTENDED" type="Float" line="473"/>
            <javadoc line="473">
                A moderately extended width.                
                <see>
                    #WIDTH                    
                </see>
            </javadoc>
            <declaration name="WIDTH_EXTENDED" type="Float" line="480"/>
            <javadoc line="480">
                The most extended predefined width.                
                <see>
                    #WIDTH                    
                </see>
            </javadoc>
            <declaration name="POSTURE" type="TextAttribute" line="487"/>
            <javadoc line="487">
                Attribute key for the posture of a font.  Values are instances
                  of &lt;b&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/b&gt;. The default value is
                  &lt;code&gt;POSTURE_REGULAR&lt;/code&gt;.
                  &lt;p&gt;Two constant values are provided, {@link #POSTURE_REGULAR}and {@link #POSTURE_OBLIQUE}. The value
                  &lt;code&gt;POSTURE_OBLIQUE&lt;/code&gt; corresponds to the style value
                  &lt;code&gt;Font.ITALIC&lt;/code&gt; as passed to the &lt;code&gt;Font&lt;/code&gt;
                  constructor.
                  &lt;p&gt;The value is roughly the slope of the stems of the font,
                  expressed as the run over the rise.  Positive values lean right.
                  &lt;p&gt;The system can interpolate the provided value.
                  &lt;p&gt;This will affect the font&apos;s italic angle as returned by
                  &lt;code&gt;Font.getItalicAngle&lt;/code&gt;.                
                <see>
                    java.awt.Font#getItalicAngle()                    
                </see>
            </javadoc>
            <declaration name="POSTURE_REGULAR" type="Float" line="511"/>
            <javadoc line="511">
                The standard posture, upright.  This is the default value for
                  &lt;code&gt;POSTURE&lt;/code&gt;.                
                <see>
                    #POSTURE                    
                </see>
            </javadoc>
            <declaration name="POSTURE_OBLIQUE" type="Float" line="519"/>
            <javadoc line="519">
                The standard italic posture.                
                <see>
                    #POSTURE                    
                </see>
            </javadoc>
            <declaration name="SIZE" type="TextAttribute" line="526"/>
            <javadoc line="526">
                Attribute key for the font size.  Values are instances of
                  &lt;b&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/b&gt;.  The default value is 12pt.
                  &lt;p&gt;This corresponds to the &lt;code&gt;size&lt;/code&gt; parameter to the
                  &lt;code&gt;Font&lt;/code&gt; constructor.
                  &lt;p&gt;Very large or small sizes will impact rendering performance,
                  and the rendering system might not render text at these sizes.
                  Negative sizes are illegal and result in the default size.
                  &lt;p&gt;Note that the appearance and metrics of a 12pt font with a
                  2x transform might be different than that of a 24 point font
                  with no transform.                
            </javadoc>
            <declaration name="TRANSFORM" type="TextAttribute" line="544"/>
            <javadoc line="544">
                Attribute key for the transform of a font.  Values are
                  instances of &lt;b&gt;&lt;code&gt;TransformAttribute&lt;/code&gt;&lt;/b&gt;.  The
                  default value is &lt;code&gt;TransformAttribute.IDENTITY&lt;/code&gt;.
                  &lt;p&gt;The &lt;code&gt;TransformAttribute&lt;/code&gt; class defines the
                  constant {@link TransformAttribute#IDENTITY IDENTITY}.
                  &lt;p&gt;This corresponds to the transform passed to
                  &lt;code&gt;Font.deriveFont(AffineTransform)&lt;/code&gt;.  Since that
                  transform is mutable and &lt;code&gt;TextAttribute&lt;/code&gt; values must
                  not be, the &lt;code&gt;TransformAttribute&lt;/code&gt; wrapper class is
                  used.
                  &lt;p&gt;The primary intent is to support scaling and skewing, though
                  other effects are possible.&lt;/p&gt;
                  &lt;p&gt;Some transforms will cause the baseline to be rotated and/or
                  shifted.  The text and the baseline are transformed together so
                  that the text follows the new baseline.  For example, with text
                  on a horizontal baseline, the new baseline follows the
                  direction of the unit x vector passed through the
                  transform. Text metrics are measured against this new baseline.
                  So, for example, with other things being equal, text rendered
                  with a rotated TRANSFORM and an unrotated TRANSFORM will measure as
                  having the same ascent, descent, and advance.&lt;/p&gt;
                  &lt;p&gt;In styled text, the baselines for each such run are aligned
                  one after the other to potentially create a non-linear baseline
                  for the entire run of text. For more information, see {@link TextLayout#getLayoutPath}.&lt;/p&gt;                
                <see>
                    TransformAttribute                    
                </see>
                <see>
                    java.awt.geom.AffineTransform                    
                </see>
            </javadoc>
            <declaration name="SUPERSCRIPT" type="TextAttribute" line="582"/>
            <javadoc line="582">
                Attribute key for superscripting and subscripting.  Values are
                  instances of &lt;b&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/b&gt;.  The default value is
                  0, which means that no superscript or subscript is used.
                  &lt;p&gt;Two constant values are provided, see {@link #SUPERSCRIPT_SUPER} and {@link #SUPERSCRIPT_SUB}.  These have
                  the values 1 and -1 respectively.  Values of
                  greater magnitude define greater levels of superscript or
                  subscripting, for example, 2 corresponds to super-superscript,
                  3 to super-super-superscript, and similarly for negative values
                  and subscript, up to a level of 7 (or -7).  Values beyond this
                  range are reserved; behavior is platform-dependent.
                  &lt;p&gt;&lt;code&gt;SUPERSCRIPT&lt;/code&gt; can
                  impact the ascent and descent of a font.  The ascent
                  and descent can never become negative, however.                
            </javadoc>
            <declaration name="SUPERSCRIPT_SUPER" type="Integer" line="603"/>
            <javadoc line="603">
                Standard superscript.                
                <see>
                    #SUPERSCRIPT                    
                </see>
            </javadoc>
            <declaration name="SUPERSCRIPT_SUB" type="Integer" line="610"/>
            <javadoc line="610">
                Standard subscript.                
                <see>
                    #SUPERSCRIPT                    
                </see>
            </javadoc>
            <declaration name="FONT" type="TextAttribute" line="617"/>
            <javadoc line="617">
                Attribute key used to provide the font to use to render text.
                  Values are instances of {@link java.awt.Font}.  The default
                  value is null, indicating that normal resolution of a
                  &lt;code&gt;Font&lt;/code&gt; from attributes should be performed.
                  &lt;p&gt;&lt;code&gt;TextLayout&lt;/code&gt; and
                  &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; work in terms of
                  &lt;code&gt;Maps&lt;/code&gt; of &lt;code&gt;TextAttributes&lt;/code&gt;.  Normally,
                  all the attributes are examined and used to select and
                  configure a &lt;code&gt;Font&lt;/code&gt; instance.  If a &lt;code&gt;FONT&lt;/code&gt;
                  attribute is present, though, its associated &lt;code&gt;Font&lt;/code&gt;
                  will be used.  This provides a way for users to override the
                  resolution of font attributes into a &lt;code&gt;Font&lt;/code&gt;, or
                  force use of a particular &lt;code&gt;Font&lt;/code&gt; instance.  This
                  also allows users to specify subclasses of &lt;code&gt;Font&lt;/code&gt; in
                  cases where a &lt;code&gt;Font&lt;/code&gt; can be subclassed.
                  &lt;p&gt;&lt;code&gt;FONT&lt;/code&gt; is used for special situations where
                  clients already have a &lt;code&gt;Font&lt;/code&gt; instance but still
                  need to use &lt;code&gt;Map&lt;/code&gt;-based APIs.  Typically, there will
                  be no other attributes in the &lt;code&gt;Map&lt;/code&gt; except the
                  &lt;code&gt;FONT&lt;/code&gt; attribute.  With &lt;code&gt;Map&lt;/code&gt;-based APIs
                  the common case is to specify all attributes individually, so
                  &lt;code&gt;FONT&lt;/code&gt; is not needed or desireable.
                  &lt;p&gt;However, if both &lt;code&gt;FONT&lt;/code&gt; and other attributes are
                  present in the &lt;code&gt;Map&lt;/code&gt;, the rendering system will
                  merge the attributes defined in the &lt;code&gt;Font&lt;/code&gt; with the
                  additional attributes.  This merging process classifies
                  &lt;code&gt;TextAttributes&lt;/code&gt; into two groups.  One group, the
                  &apos;primary&apos; group, is considered fundamental to the selection and
                  metric behavior of a font.  These attributes are
                  &lt;code&gt;FAMILY&lt;/code&gt;, &lt;code&gt;WEIGHT&lt;/code&gt;, &lt;code&gt;WIDTH&lt;/code&gt;,
                  &lt;code&gt;POSTURE&lt;/code&gt;, &lt;code&gt;SIZE&lt;/code&gt;,
                  &lt;code&gt;TRANSFORM&lt;/code&gt;, &lt;code&gt;SUPERSCRIPT&lt;/code&gt;, and
                  &lt;code&gt;TRACKING&lt;/code&gt;. The other group, the &apos;secondary&apos; group,
                  consists of all other defined attributes, with the exception of
                  &lt;code&gt;FONT&lt;/code&gt; itself.
                  &lt;p&gt;To generate the new &lt;code&gt;Map&lt;/code&gt;, first the
                  &lt;code&gt;Font&lt;/code&gt; is obtained from the &lt;code&gt;FONT&lt;/code&gt;
                  attribute, and &lt;em&gt;all&lt;/em&gt; of its attributes extracted into a
                  new &lt;code&gt;Map&lt;/code&gt;.  Then only the &lt;em&gt;secondary&lt;/em&gt;
                  attributes from the original &lt;code&gt;Map&lt;/code&gt; are added to
                  those in the new &lt;code&gt;Map&lt;/code&gt;.  Thus the values of primary
                  attributes come solely from the &lt;code&gt;Font&lt;/code&gt;, and the
                  values of secondary attributes originate with the
                  &lt;code&gt;Font&lt;/code&gt; but can be overridden by other values in the
                  &lt;code&gt;Map&lt;/code&gt;.
                  &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;code&gt;Font&apos;s&lt;/code&gt; &lt;code&gt;Map&lt;/code&gt;-based
                  constructor and &lt;code&gt;deriveFont&lt;/code&gt; methods do not process
                  the &lt;code&gt;FONT&lt;/code&gt; attribute, as these are used to create
                  new &lt;code&gt;Font&lt;/code&gt; objects.  Instead, {@link java.awt.Font#getFont(Map) Font.getFont(Map)} should be used to
                  handle the &lt;code&gt;FONT&lt;/code&gt; attribute.                
                <see>
                    java.awt.Font                    
                </see>
            </javadoc>
            <declaration name="CHAR_REPLACEMENT" type="TextAttribute" line="680"/>
            <javadoc line="680">
                Attribute key for a user-defined glyph to display in lieu
                  of the font&apos;s standard glyph for a character.  Values are
                  intances of GraphicAttribute.  The default value is null,
                  indicating that the standard glyphs provided by the font
                  should be used.
                  &lt;p&gt;This attribute is used to reserve space for a graphic or
                  other component embedded in a line of text.  It is required for
                  correct positioning of &apos;inline&apos; components within a line when
                  bidirectional reordering (see {@link java.text.Bidi}) is
                  performed.  Each character (Unicode code point) will be
                  rendered using the provided GraphicAttribute. Typically, the
                  characters to which this attribute is applied should be
                  &lt;code&gt;&amp;#92;uFFFC&lt;/code&gt;.
                  &lt;p&gt;The GraphicAttribute determines the logical and visual
                  bounds of the text; the actual Font values are ignored.                
                <see>
                    GraphicAttribute                    
                </see>
            </javadoc>
            <declaration name="FOREGROUND" type="TextAttribute" line="708"/>
            <javadoc line="708">
                Attribute key for the paint used to render the text.  Values are
                  instances of &lt;b&gt;&lt;code&gt;Paint&lt;/code&gt;&lt;/b&gt;.  The default value is
                  null, indicating that the &lt;code&gt;Paint&lt;/code&gt; set on the
                  &lt;code&gt;Graphics2D&lt;/code&gt; at the time of rendering is used.
                  &lt;p&gt;Glyphs will be rendered using this
                  &lt;code&gt;Paint&lt;/code&gt; regardless of the &lt;code&gt;Paint&lt;/code&gt; value
                  set on the &lt;code&gt;Graphics&lt;/code&gt; (but see {@link #SWAP_COLORS}).                
                <see>
                    java.awt.Paint                    
                </see>
                <see>
                    #SWAP_COLORS                    
                </see>
            </javadoc>
            <declaration name="BACKGROUND" type="TextAttribute" line="724"/>
            <javadoc line="724">
                Attribute key for the paint used to render the background of
                  the text.  Values are instances of &lt;b&gt;&lt;code&gt;Paint&lt;/code&gt;&lt;/b&gt;.
                  The default value is null, indicating that the background
                  should not be rendered.
                  &lt;p&gt;The logical bounds of the text will be filled using this
                  &lt;code&gt;Paint&lt;/code&gt;, and then the text will be rendered on top
                  of it (but see {@link #SWAP_COLORS}).
                  &lt;p&gt;The visual bounds of the text is extended to include the
                  logical bounds, if necessary.  The outline is not affected.                
                <see>
                    java.awt.Paint                    
                </see>
                <see>
                    #SWAP_COLORS                    
                </see>
            </javadoc>
            <declaration name="UNDERLINE" type="TextAttribute" line="743"/>
            <javadoc line="743">
                Attribute key for underline.  Values are instances of
                  &lt;b&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/b&gt;.  The default value is -1, which
                  means no underline.
                  &lt;p&gt;The constant value {@link #UNDERLINE_ON} is provided.
                  &lt;p&gt;The underline affects both the visual bounds and the outline
                  of the text.                
            </javadoc>
            <declaration name="UNDERLINE_ON" type="Integer" line="756"/>
            <javadoc line="756">
                Standard underline.                
                <see>
                    #UNDERLINE                    
                </see>
            </javadoc>
            <declaration name="STRIKETHROUGH" type="TextAttribute" line="764"/>
            <javadoc line="764">
                Attribute key for strikethrough.  Values are instances of
                  &lt;b&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;false&lt;/code&gt;, which means no strikethrough.
                  &lt;p&gt;The constant value {@link #STRIKETHROUGH_ON} is provided.
                  &lt;p&gt;The strikethrough affects both the visual bounds and the
                  outline of the text.                
            </javadoc>
            <declaration name="STRIKETHROUGH_ON" type="Boolean" line="777"/>
            <javadoc line="777">
                A single strikethrough.                
                <see>
                    #STRIKETHROUGH                    
                </see>
            </javadoc>
            <declaration name="RUN_DIRECTION" type="TextAttribute" line="789"/>
            <javadoc line="789">
                Attribute key for the run direction of the line.  Values are
                  instances of &lt;b&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/b&gt;.  The default value is
                  null, which indicates that the standard Bidi algorithm for
                  determining run direction should be used with the value {@link java.text.Bidi#DIRECTION_DEFAULT_LEFT_TO_RIGHT}.
                  &lt;p&gt;The constants {@link #RUN_DIRECTION_RTL} and {@link #RUN_DIRECTION_LTR} are provided.
                  &lt;p&gt;This determines the value passed to the {@link java.text.Bidi} constructor to select the primary direction of
                  the text in the paragraph.
                  &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This attribute should have the same value for
                  all the text in a paragraph, otherwise the behavior is
                  undetermined.                
                <see>
                    java.text.Bidi                    
                </see>
            </javadoc>
            <declaration name="RUN_DIRECTION_LTR" type="Boolean" line="812"/>
            <javadoc line="812">
                Left-to-right run direction.                
                <see>
                    #RUN_DIRECTION                    
                </see>
            </javadoc>
            <declaration name="RUN_DIRECTION_RTL" type="Boolean" line="819"/>
            <javadoc line="819">
                Right-to-left run direction.                
                <see>
                    #RUN_DIRECTION                    
                </see>
            </javadoc>
            <declaration name="BIDI_EMBEDDING" type="TextAttribute" line="826"/>
            <javadoc line="826">
                Attribute key for the embedding level of the text.  Values are
                  instances of &lt;b&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;null&lt;/code&gt;, indicating that the the Bidirectional
                  algorithm should run without explicit embeddings.
                  &lt;p&gt;Positive values 1 through 61 are &lt;em&gt;embedding&lt;/em&gt; levels,
                  negative values -1 through -61 are &lt;em&gt;override&lt;/em&gt; levels.
                  The value 0 means that the base line direction is used.  These
                  levels are passed in the embedding levels array to the {@link java.text.Bidi} constructor.
                  &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; When this attribute is present anywhere in
                  a paragraph, then any Unicode bidi control characters (RLO,
                  LRO, RLE, LRE, and PDF) in the paragraph are
                  disregarded, and runs of text where this attribute is not
                  present are treated as though it were present and had the value
                  0.                
                <see>
                    java.text.Bidi                    
                </see>
            </javadoc>
            <declaration name="JUSTIFICATION" type="TextAttribute" line="850"/>
            <javadoc line="850">
                Attribute key for the justification of a paragraph.  Values are
                  instances of &lt;b&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/b&gt;.  The default value is
                  1, indicating that justification should use the full width
                  provided.  Values are pinned to the range [0..1].
                  &lt;p&gt;The constants {@link #JUSTIFICATION_FULL} and {@link #JUSTIFICATION_NONE} are provided.
                  &lt;p&gt;Specifies the fraction of the extra space to use when
                  justification is requested on a &lt;code&gt;TextLayout&lt;/code&gt;. For
                  example, if the line is 50 points wide and it is requested to
                  justify to 70 points, a value of 0.75 will pad to use
                  three-quarters of the remaining space, or 15 points, so that
                  the resulting line will be 65 points in length.
                  &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This should have the same value for all the
                  text in a paragraph, otherwise the behavior is undetermined.                
                <see>
                    TextLayout#getJustifiedLayout                    
                </see>
            </javadoc>
            <declaration name="JUSTIFICATION_FULL" type="Float" line="874"/>
            <javadoc line="874">
                Justify the line to the full requested width.  This is the
                  default value for &lt;code&gt;JUSTIFICATION&lt;/code&gt;.                
                <see>
                    #JUSTIFICATION                    
                </see>
            </javadoc>
            <declaration name="JUSTIFICATION_NONE" type="Float" line="882"/>
            <javadoc line="882">
                Do not allow the line to be justified.                
                <see>
                    #JUSTIFICATION                    
                </see>
            </javadoc>
            <declaration name="INPUT_METHOD_HIGHLIGHT" type="TextAttribute" line="893"/>
            <javadoc line="893">
                Attribute key for input method highlight styles.
                  &lt;p&gt;Values are instances of {@link java.awt.im.InputMethodHighlight} or {@link java.text.Annotation}.  The default value is &lt;code&gt;null&lt;/code&gt;,
                  which means that input method styles should not be applied
                  before rendering.
                  &lt;p&gt;If adjacent runs of text with the same
                  &lt;code&gt;InputMethodHighlight&lt;/code&gt; need to be rendered
                  separately, the &lt;code&gt;InputMethodHighlights&lt;/code&gt; should be
                  wrapped in &lt;code&gt;Annotation&lt;/code&gt; instances.
                  &lt;p&gt;Input method highlights are used while text is being
                  composed by an input method. Text editing components should
                  retain them even if they generally only deal with unstyled
                  text, and make them available to the drawing routines.                
                <see>
                    java.awt.Font                    
                </see>
                <see>
                    java.awt.im.InputMethodHighlight                    
                </see>
                <see>
                    java.text.Annotation                    
                </see>
            </javadoc>
            <declaration name="INPUT_METHOD_UNDERLINE" type="TextAttribute" line="919"/>
            <javadoc line="919">
                Attribute key for input method underlines.  Values
                  are instances of &lt;b&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/b&gt;.  The default
                  value is &lt;code&gt;-1&lt;/code&gt;, which means no underline.
                  &lt;p&gt;Several constant values are provided, see {@link #UNDERLINE_LOW_ONE_PIXEL}, {@link #UNDERLINE_LOW_TWO_PIXEL},{@link #UNDERLINE_LOW_DOTTED}, {@link #UNDERLINE_LOW_GRAY}, and{@link #UNDERLINE_LOW_DASHED}.
                  &lt;p&gt;This may be used in conjunction with {@link #UNDERLINE} if
                  desired.  The primary purpose is for use by input methods.
                  Other use of these underlines for simple ornamentation might
                  confuse users.
                  &lt;p&gt;The input method underline affects both the visual bounds and
                  the outline of the text.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="UNDERLINE_LOW_ONE_PIXEL" type="Integer" line="942"/>
            <javadoc line="942">
                Single pixel solid low underline.                
                <see>
                    #INPUT_METHOD_UNDERLINE                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="UNDERLINE_LOW_TWO_PIXEL" type="Integer" line="950"/>
            <javadoc line="950">
                Double pixel solid low underline.                
                <see>
                    #INPUT_METHOD_UNDERLINE                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="UNDERLINE_LOW_DOTTED" type="Integer" line="958"/>
            <javadoc line="958">
                Single pixel dotted low underline.                
                <see>
                    #INPUT_METHOD_UNDERLINE                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="UNDERLINE_LOW_GRAY" type="Integer" line="966"/>
            <javadoc line="966">
                Double pixel gray low underline.                
                <see>
                    #INPUT_METHOD_UNDERLINE                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="UNDERLINE_LOW_DASHED" type="Integer" line="974"/>
            <javadoc line="974">
                Single pixel dashed low underline.                
                <see>
                    #INPUT_METHOD_UNDERLINE                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="SWAP_COLORS" type="TextAttribute" line="982"/>
            <javadoc line="982">
                Attribute key for swapping foreground and background
                  &lt;code&gt;Paints&lt;/code&gt;.  Values are instances of
                  &lt;b&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;false&lt;/code&gt;, which means do not swap colors.
                  &lt;p&gt;The constant value {@link #SWAP_COLORS_ON} is defined.
                  &lt;p&gt;If the {@link #FOREGROUND} attribute is set, its
                  &lt;code&gt;Paint&lt;/code&gt; will be used as the background, otherwise
                  the &lt;code&gt;Paint&lt;/code&gt; currently on the &lt;code&gt;Graphics&lt;/code&gt;
                  will be used.  If the {@link #BACKGROUND} attribute is set, its
                  &lt;code&gt;Paint&lt;/code&gt; will be used as the foreground, otherwise
                  the system will find a contrasting color to the
                  (resolved) background so that the text will be visible.                
                <see>
                    #FOREGROUND                    
                </see>
                <see>
                    #BACKGROUND                    
                </see>
            </javadoc>
            <declaration name="SWAP_COLORS_ON" type="Boolean" line="1004"/>
            <javadoc line="1004">
                Swap foreground and background.                
                <see>
                    #SWAP_COLORS                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="NUMERIC_SHAPING" type="TextAttribute" line="1012"/>
            <javadoc line="1012">
                Attribute key for converting ASCII decimal digits to other
                  decimal ranges.  Values are instances of {@link NumericShaper}.
                  The default is &lt;code&gt;null&lt;/code&gt;, which means do not perform
                  numeric shaping.
                  &lt;p&gt;When a numeric shaper is defined, the text is first
                  processed by the shaper before any other analysis of the text
                  is performed.
                  &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This should have the same value for all the
                  text in the paragraph, otherwise the behavior is undetermined.                
                <see>
                    NumericShaper                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="KERNING" type="TextAttribute" line="1031"/>
            <javadoc line="1031">
                Attribute key to request kerning. Values are instances of
                  &lt;b&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;0&lt;/code&gt;, which does not request kerning.
                  &lt;p&gt;The constant value {@link #KERNING_ON} is provided.
                  &lt;p&gt;The default advances of single characters are not
                  appropriate for some character sequences, for example &quot;To&quot; or
                  &quot;AWAY&quot;.  Without kerning the adjacent characters appear to be
                  separated by too much space.  Kerning causes selected sequences
                  of characters to be spaced differently for a more pleasing
                  visual appearance.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="KERNING_ON" type="Integer" line="1050"/>
            <javadoc line="1050">
                Request standard kerning.                
                <see>
                    #KERNING                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="LIGATURES" type="TextAttribute" line="1059"/>
            <javadoc line="1059">
                Attribute key for enabling optional ligatures. Values are
                  instances of &lt;b&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;0&lt;/code&gt;, which means do not use optional ligatures.
                  &lt;p&gt;The constant value {@link #LIGATURES_ON} is defined.
                  &lt;p&gt;Ligatures required by the writing system are always enabled.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="LIGATURES_ON" type="Integer" line="1073"/>
            <javadoc line="1073">
                Request standard optional ligatures.                
                <see>
                    #LIGATURES                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="TRACKING" type="TextAttribute" line="1081"/>
            <javadoc line="1081">
                Attribute key to control tracking.  Values are instances of
                  &lt;b&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/b&gt;.  The default value is
                  &lt;code&gt;0&lt;/code&gt;, which means no additional tracking.
                  &lt;p&gt;The constant values {@link #TRACKING_TIGHT} and {@link #TRACKING_LOOSE} are provided.
                  &lt;p&gt;The tracking value is multiplied by the font point size and
                  passed through the font transform to determine an additional
                  amount to add to the advance of each glyph cluster.  Positive
                  tracking values will inhibit formation of optional ligatures.
                  Tracking values are typically between &lt;code&gt;-0.1&lt;/code&gt; and
                  &lt;code&gt;0.3&lt;/code&gt;; values outside this range are generally not
                  desireable.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="TRACKING_TIGHT" type="Float" line="1102"/>
            <javadoc line="1102">
                Perform tight tracking.                
                <see>
                    #TRACKING                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="TRACKING_LOOSE" type="Float" line="1110"/>
            <javadoc line="1110">
                Perform loose tracking.                
                <see>
                    #TRACKING                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </class>
    </source>