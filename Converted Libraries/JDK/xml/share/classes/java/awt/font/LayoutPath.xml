<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.geom.Point2D"/>
        <class name="LayoutPath" line="3">
            <javadoc line="3">
                LayoutPath provides a mapping between locations relative to the
                  baseline and points in user space.  Locations consist of an advance
                  along the baseline, and an offset perpendicular to the baseline at
                  the advance.  Positive values along the perpendicular are in the
                  direction that is 90 degrees clockwise from the baseline vector.
                  Locations are represented as a &lt;code&gt;Point2D&lt;/code&gt;, where x is the advance and
                  y is the offset.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="pointToPath" type="boolean" line="14"/>
            <javadoc line="14">
                Convert a point in user space to a location relative to the
                  path. The location is chosen so as to minimize the distance
                  from the point to the path (e.g., the magnitude of the offset
                  will be smallest).  If there is more than one such location,
                  the location with the smallest advance is chosen.                
                <param>
                    point the point to convert.  If it is not the same
                      object as location, point will remain unmodified by this call.                    
                </param>
                <param>
                    location a &lt;code&gt;Point2D&lt;/code&gt; to hold the returned location.
                      It can be the same object as point.                    
                </param>
                <return>
                    true if the point is associated with the portion of the
                      path preceding the location, false if it is associated with
                      the portion following.  The default, if the location is not at
                      a break or sharp bend in the path, is to return true.                    
                </return>
                <throws>
                    NullPointerException if point or location is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="pathToPoint" type="void" line="32"/>
            <javadoc line="32">
                Convert a location relative to the path to a point in user
                  coordinates.  The path might bend abruptly or be disjoint at
                  the location&apos;s advance.  If this is the case, the value of
                  &apos;preceding&apos; is used to disambiguate the portion of the path
                  whose location and slope is to be used to interpret the offset.                
                <param>
                    location a &lt;code&gt;Point2D&lt;/code&gt; representing the advance (in x) and
                      offset (in y) of a location relative to the path.  If location
                      is not the same object as point, location will remain
                      unmodified by this call.                    
                </param>
                <param>
                    preceding if true, the portion preceding the advance
                      should be used, if false the portion after should be used.
                      This has no effect if the path does not break or bend sharply
                      at the advance.                    
                </param>
                <param>
                    point a &lt;code&gt;Point2D&lt;/code&gt; to hold the returned point.  It can be
                      the same object as location.                    
                </param>
                <throws>
                    NullPointerException if location or point is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </class>
    </source>