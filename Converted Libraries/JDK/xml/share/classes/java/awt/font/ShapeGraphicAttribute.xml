<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.Shape"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="ShapeGraphicAttribute" line="9">
            <extends class="GraphicAttribute"/>
            <javadoc line="9">
                The &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; class is an implementation of{@link GraphicAttribute} that draws shapes in a {@link TextLayout}.                
                <see>
                    GraphicAttribute                    
                </see>
            </javadoc>
            <declaration name="fShape" type="Shape" line="14"/>
            <declaration name="fStroke" type="boolean" line="15"/>
            <declaration name="STROKE" type="boolean" line="16"/>
            <javadoc line="16">
                A key indicating the shape should be stroked with a 1-pixel wide stroke.                
            </javadoc>
            <declaration name="FILL" type="boolean" line="20"/>
            <javadoc line="20">
                A key indicating the shape should be filled.                
            </javadoc>
            <declaration name="fShapeBounds" type="Rectangle2D" line="24"/>
            <javadoc line="25">
                Constructs a &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; for the specified{@link Shape}.                
                <param>
                    shape the <code>Shape</code> to render.  The
                      <code>Shape</code> is rendered with its origin at the origin of
                      this <code>ShapeGraphicAttribute</code> in the
                      host <code>TextLayout</code>.  This object maintains a reference to
                      <code>shape</code>.                    
                </param>
                <param>
                    alignment one of the alignments from this
                      <code>ShapeGraphicAttribute</code>.                    
                </param>
                <param>
                    stroke <code>true</code> if the <code>Shape</code> should be
                      stroked; <code>false</code> if the <code>Shape</code> should be
                      filled.                    
                </param>
            </javadoc>
            <method name="ShapeGraphicAttribute" type="constructor" line="38">
                <params>
                    <param name="shape" type="Shape"/>
                    <param name="alignment" type="int"/>
                    <param name="stroke" type="boolean"/>
                </params>
            </method>
            <javadoc line="44">
                Returns the ascent of this &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt;.  The
                  ascent of a &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; is the positive
                  distance from the origin of its &lt;code&gt;Shape&lt;/code&gt; to the top of
                  bounds of its &lt;code&gt;Shape&lt;/code&gt;.                
                <return>
                    the ascent of this <code>ShapeGraphicAttribute</code>.                    
                </return>
            </javadoc>
            <method name="getAscent" type="float" line="51"/>
            <javadoc line="54">
                Returns the descent of this &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt;.
                  The descent of a &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; is the distance
                  from the origin of its &lt;code&gt;Shape&lt;/code&gt; to the bottom of the
                  bounds of its &lt;code&gt;Shape&lt;/code&gt;.                
                <return>
                    the descent of this <code>ShapeGraphicAttribute</code>.                    
                </return>
            </javadoc>
            <method name="getDescent" type="float" line="61"/>
            <javadoc line="64">
                Returns the advance of this &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt;.
                  The advance of a &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; is the distance
                  from the origin of its &lt;code&gt;Shape&lt;/code&gt; to the right side of the
                  bounds of its &lt;code&gt;Shape&lt;/code&gt;.                
                <return>
                    the advance of this <code>ShapeGraphicAttribute</code>.                    
                </return>
            </javadoc>
            <method name="getAdvance" type="float" line="71"/>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="draw" type="void" line="77">
                <params>
                    <param name="graphics" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="79">
                    <scope line="80"/>
                    <scope line="83"/>
                </scope>
                <scope line="87"/>
            </method>
            <javadoc line="91">
                Returns a {@link Rectangle2D} that encloses all of the
                  bits drawn by this &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; relative to
                  the rendering position.  A graphic can be rendered beyond its
                  origin, ascent, descent, or advance;  but if it does, this method&apos;s
                  implementation should indicate where the graphic is rendered.                
                <return>
                    a <code>Rectangle2D</code> that encloses all of the bits
                      rendered by this <code>ShapeGraphicAttribute</code>.                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle2D" line="100">
                <declaration name="bounds" type="Rectangle2D.Float" line="101"/>
                <scope line="103"/>
            </method>
            <javadoc line="109">
                Return a {@link java.awt.Shape} that represents the region that
                  this &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; renders.  This is used when a{@link TextLayout} is requested to return the outline of the text.
                  The (untransformed) shape must not extend outside the rectangular
                  bounds returned by &lt;code&gt;getBounds&lt;/code&gt;.                
                <param>
                    tx an optional {@link AffineTransform} to apply to the
                      this <code>ShapeGraphicAttribute</code>. This can be null.                    
                </param>
                <return>
                    the <code>Shape</code> representing this graphic attribute,
                      suitable for stroking or filling.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getOutline" type="Shape" line="120">
                <params>
                    <param name="tx" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="123">
                Returns a hashcode for this &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt;.                
                <return>
                    a hash code value for this
                      <code>ShapeGraphicAttribute</code>.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="128"/>
            <javadoc line="131">
                Compares this &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; to the specified
                  &lt;code&gt;Object&lt;/code&gt;.                
                <param>
                    rhs the <code>Object</code> to compare for equality                    
                </param>
                <return>
                    <code>true</code> if this
                      <code>ShapeGraphicAttribute</code> equals <code>rhs</code>;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="139">
                <params>
                    <param name="rhs" type="Object"/>
                </params>
                <scope line="140"/>
                <scope line="143"/>
            </method>
            <javadoc line="147">
                Compares this &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; to the specified
                  &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt;.                
                <param>
                    rhs the <code>ShapeGraphicAttribute</code> to compare for
                      equality                    
                </param>
                <return>
                    <code>true</code> if this
                      <code>ShapeGraphicAttribute</code> equals <code>rhs</code>;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="156">
                <params>
                    <param name="rhs" type="ShapeGraphicAttribute"/>
                </params>
                <scope line="157"/>
                <scope line="160"/>
                <scope line="163"/>
                <scope line="166"/>
                <scope line="169"/>
            </method>
        </class>
    </source>