<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.geom.AffineTransform"/>
        <class name="FontRenderContext" line="5">
            <javadoc line="5">
                The &lt;code&gt;FontRenderContext&lt;/code&gt; class is a container for the
                  information needed to correctly measure text.  The measurement of text
                  can vary because of rules that map outlines to pixels, and rendering
                  hints provided by an application.
                  &lt;p&gt;
                  One such piece of information is a transform that scales
                  typographical points to pixels. (A point is defined to be exactly 1/72
                  of an inch, which is slightly different than
                  the traditional mechanical measurement of a point.)  A character that
                  is rendered at 12pt on a 600dpi device might have a different size
                  than the same character rendered at 12pt on a 72dpi device because of
                  such factors as rounding to pixel boundaries and hints that the font
                  designer may have specified.
                  &lt;p&gt;
                  Anti-aliasing and Fractional-metrics specified by an application can also
                  affect the size of a character because of rounding to pixel
                  boundaries.
                  &lt;p&gt;
                  Typically, instances of &lt;code&gt;FontRenderContext&lt;/code&gt; are
                  obtained from a {@link java.awt.Graphics2D Graphics2D} object.  A
                  &lt;code&gt;FontRenderContext&lt;/code&gt; which is directly constructed will
                  most likely not represent any actual graphics device, and may lead
                  to unexpected or incorrect results.
                  &lt;p&gt;                
                <see>
                    java.awt.RenderingHints#KEY_TEXT_ANTIALIASING                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_FRACTIONALMETRICS                    
                </see>
                <see>
                    java.awt.Graphics2D#getFontRenderContext()                    
                </see>
                <see>
                    java.awt.font.LineMetrics                    
                </see>
            </javadoc>
            <declaration name="tx" type="AffineTransform" line="36"/>
            <declaration name="aaHintValue" type="Object" line="37"/>
            <declaration name="fmHintValue" type="Object" line="38"/>
            <declaration name="defaulting" type="boolean" line="39"/>
            <javadoc line="40">
                Constructs a new &lt;code&gt;FontRenderContext&lt;/code&gt;
                  object.                
            </javadoc>
            <method name="FontRenderContext" type="constructor" line="44"/>
            <javadoc line="49">
                Constructs a &lt;code&gt;FontRenderContext&lt;/code&gt; object from an
                  optional {@link AffineTransform} and two &lt;code&gt;boolean&lt;/code&gt;
                  values that determine if the newly constructed object has
                  anti-aliasing or fractional metrics.
                  In each case the boolean values &lt;CODE&gt;true&lt;/CODE&gt; and &lt;CODE&gt;false&lt;/CODE&gt;
                  correspond to the rendering hint values &lt;CODE&gt;ON&lt;/CODE&gt; and
                  &lt;CODE&gt;OFF&lt;/CODE&gt; respectively.
                  &lt;p&gt;
                  To specify other hint values, use the constructor which
                  specifies the rendering hint values as parameters :{@link #FontRenderContext(AffineTransform,Object,Object)}.                
                <param>
                    tx the transform which is used to scale typographical points
                      to pixels in this <code>FontRenderContext</code>.  If null, an
                      identity transform is used.                    
                </param>
                <param>
                    isAntiAliased determines if the newly constructed object
                      has anti-aliasing.                    
                </param>
                <param>
                    usesFractionalMetrics determines if the newly constructed
                      object has fractional metrics.                    
                </param>
            </javadoc>
            <method name="FontRenderContext" type="constructor" line="68">
                <params>
                    <param name="tx" type="AffineTransform"/>
                    <param name="isAntiAliased" type="boolean"/>
                    <param name="usesFractionalMetrics" type="boolean"/>
                </params>
                <scope line="69"/>
                <scope line="72"/>
                <scope line="75"/>
                <scope line="78"/>
                <scope line="81"/>
            </method>
            <javadoc line="85">
                Constructs a &lt;code&gt;FontRenderContext&lt;/code&gt; object from an
                  optional {@link AffineTransform} and two &lt;code&gt;Object&lt;/code&gt;
                  values that determine if the newly constructed object has
                  anti-aliasing or fractional metrics.                
                <param>
                    tx the transform which is used to scale typographical points
                      to pixels in this <code>FontRenderContext</code>.  If null, an
                      identity tranform is used.                    
                </param>
                <param>
                    aaHint - one of the text antialiasing rendering hint values
                      defined in {@link java.awt.RenderingHints java.awt.RenderingHints}.
                      Any other value will throw <code>IllegalArgumentException</code>.{@link java.awt.RenderingHints#VALUE_TEXT_ANTIALIAS_DEFAULT VALUE_TEXT_ANTIALIAS_DEFAULT}may be specified, in which case the mode used is implementation
                      dependent.                    
                </param>
                <param>
                    fmHint - one of the text fractional rendering hint values defined
                      in {@link java.awt.RenderingHints java.awt.RenderingHints}.{@link java.awt.RenderingHints#VALUE_FRACTIONALMETRICS_DEFAULT VALUE_FRACTIONALMETRICS_DEFAULT}may be specified, in which case the mode used is implementation
                      dependent.
                      Any other value will throw <code>IllegalArgumentException</code>                    
                </param>
                <throws>
                    IllegalArgumentException if the hints are not one of the
                      legal values.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="FontRenderContext" type="constructor" line="105">
                <params>
                    <param name="tx" type="AffineTransform"/>
                    <param name="aaHint" type="Object"/>
                    <param name="fmHint" type="Object"/>
                </params>
                <scope line="106"/>
                <scope line="109">
                    <scope line="110"/>
                    <scope line="113"/>
                </scope>
                <scope line="117"/>
                <scope line="120">
                    <scope line="121"/>
                    <scope line="124"/>
                </scope>
                <scope line="128"/>
            </method>
            <javadoc line="132">
                Indicates whether or not this &lt;code&gt;FontRenderContext&lt;/code&gt; object
                  measures text in a transformed render context.                
                <return>
                    <code>true</code> if this <code>FontRenderContext</code>
                      object has a non-identity AffineTransform attribute.
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.awt.font.FontRenderContext#getTransform                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isTransformed" type="boolean" line="141">
                <scope line="142"/>
                <scope line="145"/>
            </method>
            <javadoc line="149">
                Returns the integer type of the affine transform for this
                  &lt;code&gt;FontRenderContext&lt;/code&gt; as specified by{@link java.awt.geom.AffineTransform#getType()}                
                <return>
                    the type of the transform.                    
                </return>
                <see>
                    AffineTransform                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getTransformType" type="int" line="156">
                <scope line="157">
                    <scope line="158"/>
                    <scope line="161"/>
                </scope>
                <scope line="165"/>
            </method>
            <javadoc line="169">
                Gets the transform that is used to scale typographical points
                  to pixels in this &lt;code&gt;FontRenderContext&lt;/code&gt;.                
                <return>
                    the <code>AffineTransform</code> of this
                      <code>FontRenderContext</code>.                    
                </return>
                <see>
                    AffineTransform                    
                </see>
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="176"/>
            <javadoc line="179">
                Returns a boolean which indicates whether or not some form of
                  antialiasing is specified by this &lt;code&gt;FontRenderContext&lt;/code&gt;.
                  Call {@link #getAntiAliasingHint() getAntiAliasingHint()}for the specific rendering hint value.                
                <return>
                    <code>true</code>, if text is anti-aliased in this
                      <code>FontRenderContext</code>; <code>false</code> otherwise.                    
                </return>
                <see>
                    java.awt.RenderingHints#KEY_TEXT_ANTIALIASING                    
                </see>
                <see>
                    #FontRenderContext(AffineTransform,boolean,boolean)                    
                </see>
                <see>
                    #FontRenderContext(AffineTransform,Object,Object)                    
                </see>
            </javadoc>
            <method name="isAntiAliased" type="boolean" line="189"/>
            <javadoc line="192">
                Returns a boolean which whether text fractional metrics mode
                  is used in this &lt;code&gt;FontRenderContext&lt;/code&gt;.
                  Call {@link #getFractionalMetricsHint() getFractionalMetricsHint()}to obtain the corresponding rendering hint value.                
                <return>
                    <code>true</code>, if layout should be performed with
                      fractional metrics; <code>false</code> otherwise.
                      in this <code>FontRenderContext</code>.                    
                </return>
                <see>
                    java.awt.RenderingHints#KEY_FRACTIONALMETRICS                    
                </see>
                <see>
                    #FontRenderContext(AffineTransform,boolean,boolean)                    
                </see>
                <see>
                    #FontRenderContext(AffineTransform,Object,Object)                    
                </see>
            </javadoc>
            <method name="usesFractionalMetrics" type="boolean" line="203"/>
            <javadoc line="206">
                Return the text anti-aliasing rendering mode hint used in this
                  &lt;code&gt;FontRenderContext&lt;/code&gt;.
                  This will be one of the text antialiasing rendering hint values
                  defined in {@link java.awt.RenderingHints java.awt.RenderingHints}.                
                <return>
                    text anti-aliasing rendering mode hint used in this
                      <code>FontRenderContext</code>.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getAntiAliasingHint" type="Object" line="215">
                <scope line="216">
                    <scope line="217"/>
                    <scope line="220"/>
                </scope>
            </method>
            <javadoc line="226">
                Return the text fractional metrics rendering mode hint used in this
                  &lt;code&gt;FontRenderContext&lt;/code&gt;.
                  This will be one of the text fractional metrics rendering hint values
                  defined in {@link java.awt.RenderingHints java.awt.RenderingHints}.                
                <return>
                    the text fractional metrics rendering mode hint used in this
                      <code>FontRenderContext</code>.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getFractionalMetricsHint" type="Object" line="235">
                <scope line="236">
                    <scope line="237"/>
                    <scope line="240"/>
                </scope>
            </method>
            <javadoc line="246">
                Return true if obj is an instance of FontRenderContext and has the same
                  transform, antialiasing, and fractional metrics values as this.                
                <param>
                    obj the object to test for equality                    
                </param>
                <return>
                    <code>true</code> if the specified object is equal to
                      this <code>FontRenderContext</code>; <code>false</code>
                      otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="254">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="255"/>
                <scope line="258"/>
            </method>
            <javadoc line="262">
                Return true if rhs has the same transform, antialiasing,
                  and fractional metrics values as this.                
                <param>
                    rhs the <code>FontRenderContext</code> to test for equality                    
                </param>
                <return>
                    <code>true</code> if <code>rhs</code> is equal to
                      this <code>FontRenderContext</code>; <code>false</code>
                      otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="271">
                <params>
                    <param name="rhs" type="FontRenderContext"/>
                </params>
                <scope line="272"/>
                <scope line="275"/>
                <scope line="278">
                    <scope line="279"/>
                </scope>
                <scope line="284"/>
            </method>
            <javadoc line="288">
                Return a hashcode for this FontRenderContext.                
            </javadoc>
            <method name="hashCode" type="int" line="291">
                <declaration name="hash" type="int" line="292"/>
                <scope line="293"/>
                <scope line="297"/>
            </method>
        </class>
    </source>