<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Polygon"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.font.GlyphMetrics"/>
        <import package="java.awt.font.GlyphJustificationInfo"/>
        <class name="GlyphVector" line="12">
            <implements interface="Cloneable"/>
            <javadoc line="12">
                A &lt;code&gt;GlyphVector&lt;/code&gt; object is a collection of glyphs
                  containing geometric information for the placement of each glyph
                  in a transformed coordinate space which corresponds to the
                  device on which the &lt;code&gt;GlyphVector&lt;/code&gt; is ultimately
                  displayed.
                  &lt;p&gt;
                  The &lt;code&gt;GlyphVector&lt;/code&gt; does not attempt any interpretation of
                  the sequence of glyphs it contains.  Relationships between adjacent
                  glyphs in sequence are solely used to determine the placement of
                  the glyphs in the visual coordinate space.
                  &lt;p&gt;
                  Instances of &lt;code&gt;GlyphVector&lt;/code&gt; are created by a {@link Font}.
                  &lt;p&gt;
                  In a text processing application that can cache intermediate
                  representations of text, creation and subsequent caching of a
                  &lt;code&gt;GlyphVector&lt;/code&gt; for use during rendering is the fastest
                  method to present the visual representation of characters to a user.
                  &lt;p&gt;
                  A &lt;code&gt;GlyphVector&lt;/code&gt; is associated with exactly one
                  &lt;code&gt;Font&lt;/code&gt;, and can provide data useful only in relation to
                  this &lt;code&gt;Font&lt;/code&gt;.  In addition, metrics obtained from a
                  &lt;code&gt;GlyphVector&lt;/code&gt; are not generally geometrically scaleable
                  since the pixelization and spacing are dependent on grid-fitting
                  algorithms within a &lt;code&gt;Font&lt;/code&gt;.  To facilitate accurate
                  measurement of a &lt;code&gt;GlyphVector&lt;/code&gt; and its component
                  glyphs, you must specify a scaling transform, anti-alias mode, and
                  fractional metrics mode when creating the &lt;code&gt;GlyphVector&lt;/code&gt;.
                  These characteristics can be derived from the destination device.
                  &lt;p&gt;
                  For each glyph in the &lt;code&gt;GlyphVector&lt;/code&gt;, you can obtain:
                  &lt;ul&gt;
                  &lt;li&gt;the position of the glyph
                  &lt;li&gt;the transform associated with the glyph
                  &lt;li&gt;the metrics of the glyph in the context of the
                  &lt;code&gt;GlyphVector&lt;/code&gt;.  The metrics of the glyph may be
                  different under different transforms, application specified
                  rendering hints, and the specific instance of the glyph within
                  the &lt;code&gt;GlyphVector&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Altering the data used to create the &lt;code&gt;GlyphVector&lt;/code&gt; does not
                  alter the state of the &lt;code&gt;GlyphVector&lt;/code&gt;.
                  &lt;p&gt;
                  Methods are provided to adjust the positions of the glyphs
                  within the &lt;code&gt;GlyphVector&lt;/code&gt;.  These methods are most
                  appropriate for applications that are performing justification
                  operations for the presentation of the glyphs.
                  &lt;p&gt;
                  Methods are provided to transform individual glyphs within the
                  &lt;code&gt;GlyphVector&lt;/code&gt;.  These methods are primarily useful for
                  special effects.
                  &lt;p&gt;
                  Methods are provided to return both the visual, logical, and pixel bounds
                  of the entire &lt;code&gt;GlyphVector&lt;/code&gt; or of individual glyphs within
                  the &lt;code&gt;GlyphVector&lt;/code&gt;.
                  &lt;p&gt;
                  Methods are provided to return a {@link Shape} for the
                  &lt;code&gt;GlyphVector&lt;/code&gt;, and for individual glyphs within the
                  &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <see>
                    Font                    
                </see>
                <see>
                    GlyphMetrics                    
                </see>
                <see>
                    TextLayout                    
                </see>
                <author>
                    Charlton Innovations, Inc.                    
                </author>
            </javadoc>
            <method name="getFont" type="Font" line="78"/>
            <javadoc line="78">
                Returns the &lt;code&gt;Font&lt;/code&gt; associated with this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <return>
                    <code>Font</code> used to create this
                      <code>GlyphVector</code>.                    
                </return>
                <see>
                    Font                    
                </see>
            </javadoc>
            <method name="getFontRenderContext" type="FontRenderContext" line="86"/>
            <javadoc line="86">
                Returns the {@link FontRenderContext} associated with this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <return>
                    <code>FontRenderContext</code> used to create this
                      <code>GlyphVector</code>.                    
                </return>
                <see>
                    FontRenderContext                    
                </see>
                <see>
                    Font                    
                </see>
            </javadoc>
            <method name="performDefaultLayout" type="void" line="95"/>
            <javadoc line="95">
                Assigns default positions to each glyph in this
                  &lt;code&gt;GlyphVector&lt;/code&gt;. This can destroy information
                  generated during initial layout of this &lt;code&gt;GlyphVector&lt;/code&gt;.                
            </javadoc>
            <method name="getNumGlyphs" type="int" line="101"/>
            <javadoc line="101">
                Returns the number of glyphs in this &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <return>
                    number of glyphs in this <code>GlyphVector</code>.                    
                </return>
            </javadoc>
            <method name="getGlyphCode" type="int" line="106"/>
            <javadoc line="106">
                Returns the glyphcode of the specified glyph.
                  This return value is meaningless to anything other
                  than the &lt;code&gt;Font&lt;/code&gt; object that created this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>
                      that corresponds to the glyph from which to retrieve the
                      glyphcode.                    
                </param>
                <return>
                    the glyphcode of the glyph at the specified
                      <code>glyphIndex</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the
                      number of glyphs in this <code>GlyphVector</code>                    
                </throws>
            </javadoc>
            <method name="getGlyphCodes" type="int[]" line="121"/>
            <javadoc line="121">
                Returns an array of glyphcodes for the specified glyphs.
                  The contents of this return value are meaningless to anything other
                  than the &lt;code&gt;Font&lt;/code&gt; used to create this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.  This method is used
                  for convenience and performance when processing glyphcodes.
                  If no array is passed in, a new array is created.                
                <param>
                    beginGlyphIndex the index into this
                      <code>GlyphVector</code> at which to start retrieving glyphcodes                    
                </param>
                <param>
                    numEntries the number of glyphcodes to retrieve                    
                </param>
                <param>
                    codeReturn the array that receives the glyphcodes and is
                      then returned                    
                </param>
                <return>
                    an array of glyphcodes for the specified glyphs.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>numEntries</code> is
                      less than 0                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if <code>beginGlyphIndex</code>
                      is less than 0                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the sum of
                      <code>beginGlyphIndex</code> and <code>numEntries</code> is
                      greater than the number of glyphs in this
                      <code>GlyphVector</code>                    
                </throws>
            </javadoc>
            <javadoc line="144">
                Returns the character index of the specified glyph.
                  The character index is the index of the first logical
                  character represented by the glyph.  The default
                  implementation assumes a one-to-one, left-to-right mapping
                  of glyphs to characters.                
                <param>
                    glyphIndex the index of the glyph                    
                </param>
                <return>
                    the index of the first character represented by the glyph                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getGlyphCharIndex" type="int" line="154">
                <params>
                    <param name="glyphIndex" type="int"/>
                </params>
            </method>
            <javadoc line="157">
                Returns the character indices of the specified glyphs.
                  The character index is the index of the first logical
                  character represented by the glyph.  Indices are returned
                  in glyph order.  The default implementation invokes
                  getGlyphCharIndex for each glyph, and subclassers will probably
                  want to override this implementation for performance reasons.
                  Use this method for convenience and performance
                  in processing of glyphcodes. If no array is passed in,
                  a new array is created.                
                <param>
                    beginGlyphIndex the index of the first glyph                    
                </param>
                <param>
                    numEntries the number of glyph indices                    
                </param>
                <param>
                    codeReturn the array into which to return the character indices                    
                </param>
                <return>
                    an array of character indices, one per glyph.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getGlyphCharIndices" type="int[]" line="173">
                <params>
                    <param name="beginGlyphIndex" type="int"/>
                    <param name="numEntries" type="int"/>
                    <param name="codeReturn" type="int[]"/>
                </params>
                <scope line="174"/>
                <scope line="177"/>
            </method>
            <method name="getLogicalBounds" type="Rectangle2D" line="182"/>
            <javadoc line="182">
                Returns the logical bounds of this &lt;code&gt;GlyphVector&lt;/code&gt;.
                  This method is used when positioning this &lt;code&gt;GlyphVector&lt;/code&gt;
                  in relation to visually adjacent &lt;code&gt;GlyphVector&lt;/code&gt; objects.                
                <return>
                    a {@link Rectangle2D} that is the logical bounds of this
                      <code>GlyphVector</code>.                    
                </return>
            </javadoc>
            <method name="getVisualBounds" type="Rectangle2D" line="190"/>
            <javadoc line="190">
                Returns the visual bounds of this &lt;code&gt;GlyphVector&lt;/code&gt;
                  The visual bounds is the bounding box of the outline of this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.  Because of rasterization and
                  alignment of pixels, it is possible that this box does not
                  enclose all pixels affected by rendering this &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <return>
                    a <code>Rectangle2D</code> that is the bounding box
                      of this <code>GlyphVector</code>.                    
                </return>
            </javadoc>
            <javadoc line="200">
                Returns the pixel bounds of this &lt;code&gt;GlyphVector&lt;/code&gt; when
                  rendered in a graphics with the given
                  &lt;code&gt;FontRenderContext&lt;/code&gt; at the given location.  The
                  renderFRC need not be the same as the
                  &lt;code&gt;FontRenderContext&lt;/code&gt; of this
                  &lt;code&gt;GlyphVector&lt;/code&gt;, and can be null.  If it is null, the
                  &lt;code&gt;FontRenderContext&lt;/code&gt; of this &lt;code&gt;GlyphVector&lt;/code&gt;
                  is used.  The default implementation returns the visual bounds,
                  offset to x, y and rounded out to the next integer value (i.e. returns an
                  integer rectangle which encloses the visual bounds) and
                  ignores the FRC.  Subclassers should override this method.                
                <param>
                    renderFRC the <code>FontRenderContext</code> of the <code>Graphics</code>.                    
                </param>
                <param>
                    x the x-coordinate at which to render this <code>GlyphVector</code>.                    
                </param>
                <param>
                    y the y-coordinate at which to render this <code>GlyphVector</code>.                    
                </param>
                <return>
                    a <code>Rectangle</code> bounding the pixels that would be affected.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPixelBounds" type="Rectangle" line="218">
                <params>
                    <param name="renderFRC" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="rect" type="Rectangle2D" line="219"/>
                <declaration name="l" type="int" line="220"/>
                <declaration name="t" type="int" line="221"/>
                <declaration name="r" type="int" line="222"/>
                <declaration name="b" type="int" line="223"/>
            </method>
            <method name="getOutline" type="Shape" line="226"/>
            <javadoc line="226">
                Returns a &lt;code&gt;Shape&lt;/code&gt; whose interior corresponds to the
                  visual representation of this &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <return>
                    a <code>Shape</code> that is the outline of this
                      <code>GlyphVector</code>.                    
                </return>
            </javadoc>
            <method name="getOutline" type="Shape" line="233"/>
            <javadoc line="233">
                Returns a &lt;code&gt;Shape&lt;/code&gt; whose interior corresponds to the
                  visual representation of this &lt;code&gt;GlyphVector&lt;/code&gt; when
                  rendered at x,&amp;nbsp;y.                
                <param>
                    x the X coordinate of this <code>GlyphVector</code>.                    
                </param>
                <param>
                    y the Y coordinate of this <code>GlyphVector</code>.                    
                </param>
                <return>
                    a <code>Shape</code> that is the outline of this
                      <code>GlyphVector</code> when rendered at the specified
                      coordinates.                    
                </return>
            </javadoc>
            <method name="getGlyphOutline" type="Shape" line="244"/>
            <javadoc line="244">
                Returns a &lt;code&gt;Shape&lt;/code&gt; whose interior corresponds to the
                  visual representation of the specified glyph
                  within this &lt;code&gt;GlyphVector&lt;/code&gt;.
                  The outline returned by this method is positioned around the
                  origin of each individual glyph.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>                    
                </param>
                <return>
                    a <code>Shape</code> that is the outline of the glyph
                      at the specified <code>glyphIndex</code> of this
                      <code>GlyphVector</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the number
                      of glyphs in this <code>GlyphVector</code>                    
                </throws>
            </javadoc>
            <javadoc line="259">
                Returns a &lt;code&gt;Shape&lt;/code&gt; whose interior corresponds to the
                  visual representation of the specified glyph
                  within this &lt;code&gt;GlyphVector&lt;/code&gt;, offset to x,&amp;nbsp;y.
                  The outline returned by this method is positioned around the
                  origin of each individual glyph.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>                    
                </param>
                <param>
                    x the X coordinate of the location of this {@code GlyphVector}                    
                </param>
                <param>
                    y the Y coordinate of the location of this {@code GlyphVector}                    
                </param>
                <return>
                    a <code>Shape</code> that is the outline of the glyph
                      at the specified <code>glyphIndex</code> of this
                      <code>GlyphVector</code> when rendered at the specified
                      coordinates.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the number
                      of glyphs in this <code>GlyphVector</code>                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getGlyphOutline" type="Shape" line="277">
                <params>
                    <param name="glyphIndex" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="s" type="Shape" line="278"/>
                <declaration name="at" type="AffineTransform" line="279"/>
            </method>
            <method name="getGlyphPosition" type="Point2D" line="282"/>
            <javadoc line="282">
                Returns the position of the specified glyph relative to the
                  origin of this &lt;code&gt;GlyphVector&lt;/code&gt;.
                  If &lt;code&gt;glyphIndex&lt;/code&gt; equals the number of of glyphs in
                  this &lt;code&gt;GlyphVector&lt;/code&gt;, this method returns the position after
                  the last glyph. This position is used to define the advance of
                  the entire &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>                    
                </param>
                <return>
                    a {@link Point2D} object that is the position of the glyph
                      at the specified <code>glyphIndex</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than the number of glyphs
                      in this <code>GlyphVector</code>                    
                </throws>
                <see>
                    #setGlyphPosition                    
                </see>
            </javadoc>
            <method name="setGlyphPosition" type="void" line="298"/>
            <javadoc line="298">
                Sets the position of the specified glyph within this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.
                  If &lt;code&gt;glyphIndex&lt;/code&gt; equals the number of of glyphs in
                  this &lt;code&gt;GlyphVector&lt;/code&gt;, this method sets the position after
                  the last glyph. This position is used to define the advance of
                  the entire &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>                    
                </param>
                <param>
                    newPos the <code>Point2D</code> at which to position the
                      glyph at the specified <code>glyphIndex</code>                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than the number of glyphs
                      in this <code>GlyphVector</code>                    
                </throws>
                <see>
                    #getGlyphPosition                    
                </see>
            </javadoc>
            <method name="getGlyphTransform" type="AffineTransform" line="314"/>
            <javadoc line="314">
                Returns the transform of the specified glyph within this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.  The transform is relative to the
                  glyph position.  If no special transform has been applied,
                  &lt;code&gt;null&lt;/code&gt; can be returned.  A null return indicates
                  an identity transform.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>                    
                </param>
                <return>
                    an {@link AffineTransform} that is the transform of
                      the glyph at the specified <code>glyphIndex</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the number
                      of glyphs in this <code>GlyphVector</code>                    
                </throws>
                <see>
                    #setGlyphTransform                    
                </see>
            </javadoc>
            <method name="setGlyphTransform" type="void" line="329"/>
            <javadoc line="329">
                Sets the transform of the specified glyph within this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.  The transform is relative to the glyph
                  position.  A &lt;code&gt;null&lt;/code&gt; argument for &lt;code&gt;newTX&lt;/code&gt;
                  indicates that no special transform is applied for the specified
                  glyph.
                  This method can be used to rotate, mirror, translate and scale the
                  glyph.  Adding a transform can result in signifant performance changes.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>                    
                </param>
                <param>
                    newTX the new transform of the glyph at <code>glyphIndex</code>                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the number
                      of glyphs in this <code>GlyphVector</code>                    
                </throws>
                <see>
                    #getGlyphTransform                    
                </see>
            </javadoc>
            <javadoc line="345">
                Returns flags describing the global state of the GlyphVector.
                  Flags not described below are reserved.  The default
                  implementation returns 0 (meaning false) for the position adjustments,
                  transforms, rtl, and complex flags.
                  Subclassers should override this method, and make sure
                  it correctly describes the GlyphVector and corresponds
                  to the results of related calls.                
                <return>
                    an int containing the flags describing the state                    
                </return>
                <see>
                    #FLAG_HAS_POSITION_ADJUSTMENTS                    
                </see>
                <see>
                    #FLAG_HAS_TRANSFORMS                    
                </see>
                <see>
                    #FLAG_RUN_RTL                    
                </see>
                <see>
                    #FLAG_COMPLEX_GLYPHS                    
                </see>
                <see>
                    #FLAG_MASK                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getLayoutFlags" type="int" line="361"/>
            <declaration name="FLAG_HAS_TRANSFORMS" type="int" line="364"/>
            <javadoc line="364">
                A flag used with getLayoutFlags that indicates that this &lt;code&gt;GlyphVector&lt;/code&gt; has
                  per-glyph transforms.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="FLAG_HAS_POSITION_ADJUSTMENTS" type="int" line="370"/>
            <javadoc line="370">
                A flag used with getLayoutFlags that indicates that this &lt;code&gt;GlyphVector&lt;/code&gt; has
                  position adjustments.  When this is true, the glyph positions don&apos;t match the
                  accumulated default advances of the glyphs (for example, if kerning has been done).                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="FLAG_RUN_RTL" type="int" line="377"/>
            <javadoc line="377">
                A flag used with getLayoutFlags that indicates that this &lt;code&gt;GlyphVector&lt;/code&gt; has
                  a right-to-left run direction.  This refers to the glyph-to-char mapping and does
                  not imply that the visual locations of the glyphs are necessarily in this order,
                  although generally they will be.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="FLAG_COMPLEX_GLYPHS" type="int" line="385"/>
            <javadoc line="385">
                A flag used with getLayoutFlags that indicates that this &lt;code&gt;GlyphVector&lt;/code&gt; has
                  a complex glyph-to-char mapping (one that does not map glyphs to chars one-to-one in
                  strictly ascending or descending order matching the run direction).                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="FLAG_MASK" type="int" line="392"/>
            <javadoc line="392">
                A mask for supported flags from getLayoutFlags.  Only bits covered by the mask
                  should be tested.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getGlyphPositions" type="float[]" line="398"/>
            <javadoc line="398">
                Returns an array of glyph positions for the specified glyphs.
                  This method is used for convenience and performance when
                  processing glyph positions.
                  If no array is passed in, a new array is created.
                  Even numbered array entries beginning with position zero are the X
                  coordinates of the glyph numbered &lt;code&gt;beginGlyphIndex + position/2&lt;/code&gt;.
                  Odd numbered array entries beginning with position one are the Y
                  coordinates of the glyph numbered &lt;code&gt;beginGlyphIndex + (position-1)/2&lt;/code&gt;.
                  If &lt;code&gt;beginGlyphIndex&lt;/code&gt; equals the number of of glyphs in
                  this &lt;code&gt;GlyphVector&lt;/code&gt;, this method gets the position after
                  the last glyph and this position is used to define the advance of
                  the entire &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <param>
                    beginGlyphIndex the index at which to begin retrieving
                      glyph positions                    
                </param>
                <param>
                    numEntries the number of glyphs to retrieve                    
                </param>
                <param>
                    positionReturn the array that receives the glyph positions
                      and is then returned.                    
                </param>
                <return>
                    an array of glyph positions specified by
                      <code>beginGlyphIndex</code> and <code>numEntries</code>.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>numEntries</code> is
                      less than 0                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if <code>beginGlyphIndex</code>
                      is less than 0                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the sum of
                      <code>beginGlyphIndex</code> and <code>numEntries</code>
                      is greater than the number of glyphs in this
                      <code>GlyphVector</code> plus one                    
                </throws>
            </javadoc>
            <method name="getGlyphLogicalBounds" type="Shape" line="428"/>
            <javadoc line="428">
                Returns the logical bounds of the specified glyph within this
                  &lt;code&gt;GlyphVector&lt;/code&gt;.
                  These logical bounds have a total of four edges, with two edges
                  parallel to the baseline under the glyph&apos;s transform and the other two
                  edges are shared with adjacent glyphs if they are present.  This
                  method is useful for hit-testing of the specified glyph,
                  positioning of a caret at the leading or trailing edge of a glyph,
                  and for drawing a highlight region around the specified glyph.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>
                      that corresponds to the glyph from which to retrieve its logical
                      bounds                    
                </param>
                <return>
                    a <code>Shape</code> that is the logical bounds of the
                      glyph at the specified <code>glyphIndex</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the number
                      of glyphs in this <code>GlyphVector</code>                    
                </throws>
                <see>
                    #getGlyphVisualBounds                    
                </see>
            </javadoc>
            <method name="getGlyphVisualBounds" type="Shape" line="448"/>
            <javadoc line="448">
                Returns the visual bounds of the specified glyph within the
                  &lt;code&gt;GlyphVector&lt;/code&gt;.
                  The bounds returned by this method is positioned around the
                  origin of each individual glyph.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>
                      that corresponds to the glyph from which to retrieve its visual
                      bounds                    
                </param>
                <return>
                    a <code>Shape</code> that is the visual bounds of the
                      glyph at the specified <code>glyphIndex</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the number
                      of glyphs in this <code>GlyphVector</code>                    
                </throws>
                <see>
                    #getGlyphLogicalBounds                    
                </see>
            </javadoc>
            <javadoc line="464">
                Returns the pixel bounds of the glyph at index when this
                  &lt;code&gt;GlyphVector&lt;/code&gt; is rendered in a &lt;code&gt;Graphics&lt;/code&gt; with the
                  given &lt;code&gt;FontRenderContext&lt;/code&gt; at the given location. The
                  renderFRC need not be the same as the
                  &lt;code&gt;FontRenderContext&lt;/code&gt; of this
                  &lt;code&gt;GlyphVector&lt;/code&gt;, and can be null.  If it is null, the
                  &lt;code&gt;FontRenderContext&lt;/code&gt; of this &lt;code&gt;GlyphVector&lt;/code&gt;
                  is used.  The default implementation returns the visual bounds of the glyph,
                  offset to x, y and rounded out to the next integer value, and
                  ignores the FRC.  Subclassers should override this method.                
                <param>
                    index the index of the glyph.                    
                </param>
                <param>
                    renderFRC the <code>FontRenderContext</code> of the <code>Graphics</code>.                    
                </param>
                <param>
                    x the X position at which to render this <code>GlyphVector</code>.                    
                </param>
                <param>
                    y the Y position at which to render this <code>GlyphVector</code>.                    
                </param>
                <return>
                    a <code>Rectangle</code> bounding the pixels that would be affected.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getGlyphPixelBounds" type="Rectangle" line="482">
                <params>
                    <param name="index" type="int"/>
                    <param name="renderFRC" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="rect" type="Rectangle2D" line="483"/>
                <declaration name="l" type="int" line="484"/>
                <declaration name="t" type="int" line="485"/>
                <declaration name="r" type="int" line="486"/>
                <declaration name="b" type="int" line="487"/>
            </method>
            <method name="getGlyphMetrics" type="GlyphMetrics" line="490"/>
            <javadoc line="490">
                Returns the metrics of the glyph at the specified index into
                  this &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>
                      that corresponds to the glyph from which to retrieve its metrics                    
                </param>
                <return>
                    a {@link GlyphMetrics} object that represents the
                      metrics of the glyph at the specified <code>glyphIndex</code>
                      into this <code>GlyphVector</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the number
                      of glyphs in this <code>GlyphVector</code>                    
                </throws>
            </javadoc>
            <method name="getGlyphJustificationInfo" type="GlyphJustificationInfo" line="503"/>
            <javadoc line="503">
                Returns the justification information for the glyph at
                  the specified index into this &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <param>
                    glyphIndex the index into this <code>GlyphVector</code>
                      that corresponds to the glyph from which to retrieve its
                      justification properties                    
                </param>
                <return>
                    a {@link GlyphJustificationInfo} object that
                      represents the justification properties of the glyph at the
                      specified <code>glyphIndex</code> into this
                      <code>GlyphVector</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <code>glyphIndex</code>
                      is less than 0 or greater than or equal to the number
                      of glyphs in this <code>GlyphVector</code>                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="518"/>
            <javadoc line="518">
                Tests if the specified &lt;code&gt;GlyphVector&lt;/code&gt; exactly
                  equals this &lt;code&gt;GlyphVector&lt;/code&gt;.                
                <param>
                    set the specified <code>GlyphVector</code> to test                    
                </param>
                <return>
                    <code>true</code> if the specified
                      <code>GlyphVector</code> equals this <code>GlyphVector</code>;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
        </class>
    </source>