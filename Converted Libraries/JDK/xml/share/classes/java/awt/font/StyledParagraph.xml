<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.text.Annotation"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.util.Vector"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.font.Decoration"/>
        <import package="sun.font.FontResolver"/>
        <import package="sun.text.CodePointIterator"/>
        <class name="StyledParagraph" line="44">
            <comment line="54">
                the length of the paragraph                
            </comment>
            <comment line="57">
                If there is a single Decoration for the whole paragraph, it
                 is stored here.  Otherwise this field is ignored.                
            </comment>
            <comment line="62">
                If there is a single Font or GraphicAttribute for the whole
                 paragraph, it is stored here.  Otherwise this field is ignored.                
            </comment>
            <comment line="66">
                If there are multiple Decorations in the paragraph, they are
                 stored in this Vector, in order.  Otherwise this vector and
                 the decorationStarts array are null.                
            </comment>
            <comment line="70">
                If there are multiple Decorations in the paragraph,
                 decorationStarts[i] contains the index where decoration i
                 starts.  For convenience, there is an extra entry at the
                 end of this array with the length of the paragraph.                
            </comment>
            <comment line="76">
                If there are multiple Fonts/GraphicAttributes in the paragraph,
                 they are
                 stored in this Vector, in order.  Otherwise this vector and
                 the fontStarts array are null.                
            </comment>
            <comment line="81">
                If there are multiple Fonts/GraphicAttributes in the paragraph,
                 fontStarts[i] contains the index where decoration i
                 starts.  For convenience, there is an extra entry at the
                 end of this array with the length of the paragraph.                
            </comment>
            <javadoc line="44">
                This class stores Font, GraphicAttribute, and Decoration intervals
                  on a paragraph of styled text.
                  &lt;p&gt;
                  Currently, this class is optimized for a small number of intervals
                  (preferrably 1).                
            </javadoc>
            <declaration name="length" type="int" line="54"/>
            <declaration name="decoration" type="Decoration" line="59"/>
            <declaration name="font" type="Object" line="63"/>
            <declaration name="decorations" type="Vector" line="68"/>
            <declaration name="decorationStarts" type="int[]" line="73"/>
            <declaration name="fonts" type="Vector" line="79"/>
            <declaration name="fontStarts" type="int[]" line="84"/>
            <declaration name="INITIAL_SIZE" type="int" line="86"/>
            <javadoc line="88">
                Create a new StyledParagraph over the given styled text.                
                <param>
                    aci an iterator over the text                    
                </param>
                <param>
                    chars the characters extracted from aci                    
                </param>
            </javadoc>
            <method name="StyledParagraph" type="constructor" line="94">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                    <param name="chars" type="char[]"/>
                </params>
                <comment line="126">
                    Add extra entries to starts arrays with the length
                     of the paragraph.  &apos;this&apos; is used as a dummy value
                     in the Vector.                    
                </comment>
                <declaration name="start" type="int" line="96"/>
                <declaration name="end" type="int" line="97"/>
                <declaration name="index" type="int" line="100"/>
                <scope line="103">
                    <declaration name="nextRunStart" type="int" line="104"/>
                    <declaration name="localIndex" type="int" line="105"/>
                    <declaration name="attributes" type="Map" line="107"/>
                    <declaration name="d" type="Decoration" line="109"/>
                    <declaration name="f" type="Object" line="112"/>
                    <scope line="113"/>
                    <scope line="116"/>
                </scope>
                <scope line="128"/>
                <scope line="131"/>
            </method>
            <javadoc line="136">
                Adjust indices in starts to reflect an insertion after pos.
                  Any index in starts greater than pos will be increased by 1.                
            </javadoc>
            <method name="insertInto" type="void" line="140">
                <params>
                    <param name="pos" type="int"/>
                    <param name="starts" type="int[]"/>
                    <param name="numStarts" type="int"/>
                </params>
                <scope line="142"/>
            </method>
            <javadoc line="147">
                Return a StyledParagraph reflecting the insertion of a single character
                  into the text.  This method will attempt to reuse the given paragraph,
                  but may create a new paragraph.                
                <param>
                    aci an iterator over the text.  The text should be the same as the
                      text used to create (or most recently update) oldParagraph, with
                      the exception of inserting a single character at insertPos.                    
                </param>
                <param>
                    chars the characters in aci                    
                </param>
                <param>
                    insertPos the index of the new character in aci                    
                </param>
                <param>
                    oldParagraph a StyledParagraph for the text in aci before the
                      insertion                    
                </param>
            </javadoc>
            <method name="insertChar" type="StyledParagraph" line="162">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                    <param name="chars" type="char[]"/>
                    <param name="insertPos" type="int"/>
                    <param name="oldParagraph" type="StyledParagraph"/>
                </params>
                <comment line="165">
                    If the styles at insertPos match those at insertPos-1,
                     oldParagraph will be reused.  Otherwise we create a new
                     paragraph.                    
                </comment>
                <comment line="187">
                    insert into existing paragraph                    
                </comment>
                <declaration name="ch" type="char" line="168"/>
                <declaration name="relativePos" type="int" line="169"/>
                <declaration name="attributes" type="Map" line="171"/>
                <declaration name="d" type="Decoration" line="172"/>
                <scope line="173"/>
                <declaration name="f" type="Object" line="176"/>
                <scope line="177">
                    <declaration name="resolver" type="FontResolver" line="178"/>
                    <declaration name="fontIndex" type="int" line="179"/>
                </scope>
                <scope line="182"/>
                <scope line="188"/>
                <scope line="193"/>
            </method>
            <javadoc line="201">
                Adjust indices in starts to reflect a deletion after deleteAt.
                  Any index in starts greater than deleteAt will be increased by 1.
                  It is the caller&apos;s responsibility to make sure that no 0-length
                  runs result.                
            </javadoc>
            <method name="deleteFrom" type="void" line="207">
                <params>
                    <param name="deleteAt" type="int"/>
                    <param name="starts" type="int[]"/>
                    <param name="numStarts" type="int"/>
                </params>
                <scope line="209"/>
            </method>
            <javadoc line="214">
                Return a StyledParagraph reflecting the insertion of a single character
                  into the text.  This method will attempt to reuse the given paragraph,
                  but may create a new paragraph.                
                <param>
                    aci an iterator over the text.  The text should be the same as the
                      text used to create (or most recently update) oldParagraph, with
                      the exception of deleting a single character at deletePos.                    
                </param>
                <param>
                    chars the characters in aci                    
                </param>
                <param>
                    deletePos the index where a character was removed                    
                </param>
                <param>
                    oldParagraph a StyledParagraph for the text in aci before the
                      insertion                    
                </param>
            </javadoc>
            <method name="deleteChar" type="StyledParagraph" line="229">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                    <param name="chars" type="char[]"/>
                    <param name="deletePos" type="int"/>
                    <param name="oldParagraph" type="StyledParagraph"/>
                </params>
                <comment line="232">
                    We will reuse oldParagraph unless there was a length-1 run
                     at deletePos.  We could do more work and check the individual
                     Font and Decoration runs, but we don&apos;t right now...                    
                </comment>
                <scope line="236"/>
                <scope line="241">
                    <scope line="242"/>
                </scope>
                <scope line="248"/>
                <scope line="253"/>
            </method>
            <javadoc line="261">
                Return the index at which there is a different Font, GraphicAttribute, or
                  Dcoration than at the given index.                
                <param>
                    index a valid index in the paragraph                    
                </param>
                <return>
                    the first index where there is a change in attributes from
                      those at index                    
                </return>
            </javadoc>
            <method name="getRunLimit" type="int" line="268">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="270"/>
                <declaration name="limit1" type="int" line="273"/>
                <scope line="274">
                    <declaration name="run" type="int" line="275"/>
                </scope>
                <declaration name="limit2" type="int" line="278"/>
                <scope line="279">
                    <declaration name="run" type="int" line="280"/>
                </scope>
            </method>
            <javadoc line="286">
                Return the Decoration in effect at the given index.                
                <param>
                    index a valid index in the paragraph                    
                </param>
                <return>
                    the Decoration at index.                    
                </return>
            </javadoc>
            <method name="getDecorationAt" type="Decoration" line="291">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="293"/>
                <scope line="296"/>
                <declaration name="run" type="int" line="299"/>
            </method>
            <javadoc line="303">
                Return the Font or GraphicAttribute in effect at the given index.
                  The client must test the type of the return value to determine what
                  it is.                
                <param>
                    index a valid index in the paragraph                    
                </param>
                <return>
                    the Font or GraphicAttribute at index.                    
                </return>
            </javadoc>
            <method name="getFontOrGraphicAt" type="Object" line="310">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="312"/>
                <scope line="315"/>
                <declaration name="run" type="int" line="318"/>
            </method>
            <javadoc line="322">
                Return i such that starts[i] &lt;= index &lt; starts[i+1].  starts
                  must be in increasing order, with at least one element greater
                  than index.                
            </javadoc>
            <method name="findRunContaining" type="int" line="327">
                <params>
                    <param name="index" type="int"/>
                    <param name="starts" type="int[]"/>
                </params>
                <scope line="329">
                    <scope line="330"/>
                </scope>
            </method>
            <javadoc line="336">
                Append the given Object to the given Vector.  Add
                  the given index to the given starts array.  If the
                  starts array does not have room for the index, a
                  new array is created and returned.                
            </javadoc>
            <method name="addToVector" type="int[]" line="345">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="index" type="int"/>
                    <param name="v" type="Vector"/>
                    <param name="starts" type="int[]"/>
                </params>
                <scope line="347">
                    <declaration name="count" type="int" line="349"/>
                    <scope line="350">
                        <declaration name="temp" type="int[]" line="351"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="360">
                Add a new Decoration run with the given Decoration at the
                  given index.                
            </javadoc>
            <method name="addDecoration" type="void" line="364">
                <params>
                    <param name="d" type="Decoration"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="366"/>
                <scope line="372"/>
                <scope line="375">
                    <scope line="376"/>
                </scope>
            </method>
            <javadoc line="387">
                Add a new Font/GraphicAttribute run with the given object at the
                  given index.                
            </javadoc>
            <method name="addFont" type="void" line="391">
                <params>
                    <param name="f" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="393"/>
                <scope line="396"/>
                <scope line="399">
                    <scope line="400"/>
                </scope>
            </method>
            <javadoc line="411">
                Resolve the given chars into Fonts using FontResolver, then add
                  font runs for each.                
            </javadoc>
            <method name="addFonts" type="void" line="415">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="attributes" type="Map"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="resolver" type="FontResolver" line="417"/>
                <declaration name="iter" type="CodePointIterator" line="418"/>
                <scope line="419">
                    <declaration name="fontIndex" type="int" line="420"/>
                </scope>
            </method>
            <javadoc line="425">
                Return a Map with entries from oldStyles, as well as input
                  method entries, if any.                
            </javadoc>
            <method name="addInputMethodAttrs" type="Map" line="429">
                <params>
                    <param name="oldStyles" type="Map"/>
                </params>
                <declaration name="value" type="Object" line="431"/>
                <scope line="433">
                    <scope line="434">
                        <scope line="435"/>
                        <declaration name="hl" type="InputMethodHighlight" line="439"/>
                        <declaration name="imStyles" type="Map" line="442"/>
                        <scope line="443"/>
                        <scope line="445"/>
                        <scope line="448">
                            <declaration name="tk" type="Toolkit" line="449"/>
                        </scope>
                        <scope line="453">
                            <declaration name="newStyles" type="HashMap" line="454"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="463"/>
            </method>
            <javadoc line="469">
                Extract a GraphicAttribute or Font from the given attributes.
                  If attributes does not contain a GraphicAttribute, Font, or
                  Font family entry this method returns null.                
            </javadoc>
            <method name="getGraphicOrFont" type="Object" line="474">
                <params>
                    <param name="attributes" type="Map"/>
                </params>
                <declaration name="value" type="Object" line="476"/>
                <scope line="477"/>
                <scope line="481"/>
                <scope line="485"/>
                <scope line="488"/>
            </method>
        </class>
    </source>