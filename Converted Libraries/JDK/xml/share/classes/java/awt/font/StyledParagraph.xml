<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.text.Annotation"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.util.Vector"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.font.Decoration"/>
        <import package="sun.font.FontResolver"/>
        <import package="sun.text.CodePointIterator"/>
        <class name="StyledParagraph" line="13">
            <javadoc line="13">
                This class stores Font, GraphicAttribute, and Decoration intervals
                  on a paragraph of styled text.
                  &lt;p&gt;
                  Currently, this class is optimized for a small number of intervals
                  (preferrably 1).                
            </javadoc>
            <declaration name="length" type="int" line="21"/>
            <declaration name="decoration" type="Decoration" line="22"/>
            <declaration name="font" type="Object" line="23"/>
            <declaration name="decorations" type="Vector" line="24"/>
            <declaration name="decorationStarts" type="int[]" line="25"/>
            <declaration name="fonts" type="Vector" line="26"/>
            <declaration name="fontStarts" type="int[]" line="27"/>
            <declaration name="INITIAL_SIZE" type="int" line="28"/>
            <javadoc line="29">
                Create a new StyledParagraph over the given styled text.                
                <param>
                    aci an iterator over the text                    
                </param>
                <param>
                    chars the characters extracted from aci                    
                </param>
            </javadoc>
            <method name="StyledParagraph" type="constructor" line="34">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                    <param name="chars" type="char[]"/>
                </params>
                <declaration name="start" type="int" line="35"/>
                <declaration name="end" type="int" line="36"/>
                <declaration name="index" type="int" line="38"/>
                <scope line="40">
                    <declaration name="nextRunStart" type="int" line="41"/>
                    <declaration name="localIndex" type="int" line="42"/>
                    <declaration name="attributes" type="Map" line="43"/>
                    <declaration name="d" type="Decoration" line="45"/>
                    <declaration name="f" type="Object" line="47"/>
                    <scope line="48"/>
                    <scope line="51"/>
                </scope>
                <scope line="58"/>
                <scope line="61"/>
            </method>
            <javadoc line="65">
                Adjust indices in starts to reflect an insertion after pos.
                  Any index in starts greater than pos will be increased by 1.                
            </javadoc>
            <method name="insertInto" type="void" line="69">
                <params>
                    <param name="pos" type="int"/>
                    <param name="starts" type="int[]"/>
                    <param name="numStarts" type="int"/>
                </params>
                <scope line="70"/>
            </method>
            <javadoc line="74">
                Return a StyledParagraph reflecting the insertion of a single character
                  into the text.  This method will attempt to reuse the given paragraph,
                  but may create a new paragraph.                
                <param>
                    aci an iterator over the text.  The text should be the same as the
                      text used to create (or most recently update) oldParagraph, with
                      the exception of inserting a single character at insertPos.                    
                </param>
                <param>
                    chars the characters in aci                    
                </param>
                <param>
                    insertPos the index of the new character in aci                    
                </param>
                <param>
                    oldParagraph a StyledParagraph for the text in aci before the
                      insertion                    
                </param>
            </javadoc>
            <method name="insertChar" type="StyledParagraph" line="86">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                    <param name="chars" type="char[]"/>
                    <param name="insertPos" type="int"/>
                    <param name="oldParagraph" type="StyledParagraph"/>
                </params>
                <declaration name="ch" type="char" line="87"/>
                <declaration name="relativePos" type="int" line="88"/>
                <declaration name="attributes" type="Map" line="89"/>
                <declaration name="d" type="Decoration" line="90"/>
                <scope line="91"/>
                <declaration name="f" type="Object" line="94"/>
                <scope line="95">
                    <declaration name="resolver" type="FontResolver" line="96"/>
                    <declaration name="fontIndex" type="int" line="97"/>
                </scope>
                <scope line="100"/>
                <scope line="104"/>
                <scope line="107"/>
            </method>
            <javadoc line="112">
                Adjust indices in starts to reflect a deletion after deleteAt.
                  Any index in starts greater than deleteAt will be increased by 1.
                  It is the caller&apos;s responsibility to make sure that no 0-length
                  runs result.                
            </javadoc>
            <method name="deleteFrom" type="void" line="118">
                <params>
                    <param name="deleteAt" type="int"/>
                    <param name="starts" type="int[]"/>
                    <param name="numStarts" type="int"/>
                </params>
                <scope line="119"/>
            </method>
            <javadoc line="123">
                Return a StyledParagraph reflecting the insertion of a single character
                  into the text.  This method will attempt to reuse the given paragraph,
                  but may create a new paragraph.                
                <param>
                    aci an iterator over the text.  The text should be the same as the
                      text used to create (or most recently update) oldParagraph, with
                      the exception of deleting a single character at deletePos.                    
                </param>
                <param>
                    chars the characters in aci                    
                </param>
                <param>
                    deletePos the index where a character was removed                    
                </param>
                <param>
                    oldParagraph a StyledParagraph for the text in aci before the
                      insertion                    
                </param>
            </javadoc>
            <method name="deleteChar" type="StyledParagraph" line="135">
                <params>
                    <param name="aci" type="AttributedCharacterIterator"/>
                    <param name="chars" type="char[]"/>
                    <param name="deletePos" type="int"/>
                    <param name="oldParagraph" type="StyledParagraph"/>
                </params>
                <scope line="137"/>
                <scope line="141">
                    <scope line="142"/>
                </scope>
                <scope line="147"/>
                <scope line="150"/>
            </method>
            <javadoc line="155">
                Return the index at which there is a different Font, GraphicAttribute, or
                  Dcoration than at the given index.                
                <param>
                    index a valid index in the paragraph                    
                </param>
                <return>
                    the first index where there is a change in attributes from
                      those at index                    
                </return>
            </javadoc>
            <method name="getRunLimit" type="int" line="162">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="163"/>
                <declaration name="limit1" type="int" line="166"/>
                <scope line="167">
                    <declaration name="run" type="int" line="168"/>
                </scope>
                <declaration name="limit2" type="int" line="171"/>
                <scope line="172">
                    <declaration name="run" type="int" line="173"/>
                </scope>
            </method>
            <javadoc line="178">
                Return the Decoration in effect at the given index.                
                <param>
                    index a valid index in the paragraph                    
                </param>
                <return>
                    the Decoration at index.                    
                </return>
            </javadoc>
            <method name="getDecorationAt" type="Decoration" line="183">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="184"/>
                <scope line="187"/>
                <declaration name="run" type="int" line="190"/>
            </method>
            <javadoc line="193">
                Return the Font or GraphicAttribute in effect at the given index.
                  The client must test the type of the return value to determine what
                  it is.                
                <param>
                    index a valid index in the paragraph                    
                </param>
                <return>
                    the Font or GraphicAttribute at index.                    
                </return>
            </javadoc>
            <method name="getFontOrGraphicAt" type="Object" line="200">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="201"/>
                <scope line="204"/>
                <declaration name="run" type="int" line="207"/>
            </method>
            <javadoc line="210">
                Return i such that starts[i] &lt;= index &lt; starts[i+1].  starts
                  must be in increasing order, with at least one element greater
                  than index.                
            </javadoc>
            <method name="findRunContaining" type="int" line="215">
                <params>
                    <param name="index" type="int"/>
                    <param name="starts" type="int[]"/>
                </params>
                <scope line="216">
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="222">
                Append the given Object to the given Vector.  Add
                  the given index to the given starts array.  If the
                  starts array does not have room for the index, a
                  new array is created and returned.                
            </javadoc>
            <method name="addToVector" type="int[]" line="228">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="index" type="int"/>
                    <param name="v" type="Vector"/>
                    <param name="starts" type="int[]"/>
                </params>
                <scope line="229">
                    <declaration name="count" type="int" line="231"/>
                    <scope line="232">
                        <declaration name="temp" type="int[]" line="233"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="241">
                Add a new Decoration run with the given Decoration at the
                  given index.                
            </javadoc>
            <method name="addDecoration" type="void" line="245">
                <params>
                    <param name="d" type="Decoration"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="246"/>
                <scope line="249"/>
                <scope line="252">
                    <scope line="253"/>
                </scope>
            </method>
            <javadoc line="263">
                Add a new Font/GraphicAttribute run with the given object at the
                  given index.                
            </javadoc>
            <method name="addFont" type="void" line="267">
                <params>
                    <param name="f" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="268"/>
                <scope line="271"/>
                <scope line="274">
                    <scope line="275"/>
                </scope>
            </method>
            <javadoc line="285">
                Resolve the given chars into Fonts using FontResolver, then add
                  font runs for each.                
            </javadoc>
            <method name="addFonts" type="void" line="289">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="attributes" type="Map"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="resolver" type="FontResolver" line="290"/>
                <declaration name="iter" type="CodePointIterator" line="291"/>
                <scope line="292">
                    <declaration name="fontIndex" type="int" line="293"/>
                </scope>
            </method>
            <javadoc line="297">
                Return a Map with entries from oldStyles, as well as input
                  method entries, if any.                
            </javadoc>
            <method name="addInputMethodAttrs" type="Map" line="301">
                <params>
                    <param name="oldStyles" type="Map"/>
                </params>
                <declaration name="value" type="Object" line="302"/>
                <scope line="303">
                    <scope line="304">
                        <scope line="305"/>
                        <declaration name="hl" type="InputMethodHighlight" line="308"/>
                        <declaration name="imStyles" type="Map" line="310"/>
                        <scope line="311"/>
                        <scope line="314"/>
                        <scope line="316">
                            <declaration name="tk" type="Toolkit" line="317"/>
                        </scope>
                        <scope line="320">
                            <declaration name="newStyles" type="HashMap" line="321"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="328"/>
            </method>
            <javadoc line="332">
                Extract a GraphicAttribute or Font from the given attributes.
                  If attributes does not contain a GraphicAttribute, Font, or
                  Font family entry this method returns null.                
            </javadoc>
            <method name="getGraphicOrFont" type="Object" line="337">
                <params>
                    <param name="attributes" type="Map"/>
                </params>
                <declaration name="value" type="Object" line="338"/>
                <scope line="339"/>
                <scope line="343"/>
                <scope line="346"/>
                <scope line="349"/>
            </method>
        </class>
    </source>