<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.lang.String"/>
        <class name="TextHitInfo" line="44">
            <javadoc line="44">
                The &lt;code&gt;TextHitInfo&lt;/code&gt; class represents a character position in a
                  text model, and a &lt;b&gt;bias&lt;/b&gt;, or &quot;side,&quot; of the character.  Biases are
                  either &lt;EM&gt;leading&lt;/EM&gt; (the left edge, for a left-to-right character)
                  or &lt;EM&gt;trailing&lt;/EM&gt; (the right edge, for a left-to-right character).
                  Instances of &lt;code&gt;TextHitInfo&lt;/code&gt; are used to specify caret and
                  insertion positions within text.
                  &lt;p&gt;
                  For example, consider the text &quot;abc&quot;.  TextHitInfo.trailing(1)
                  corresponds to the right side of the &apos;b&apos; in the text.
                  &lt;p&gt;
                  &lt;code&gt;TextHitInfo&lt;/code&gt; is used primarily by {@link TextLayout} and
                  clients of &lt;code&gt;TextLayout&lt;/code&gt;.  Clients of &lt;code&gt;TextLayout&lt;/code&gt;
                  query &lt;code&gt;TextHitInfo&lt;/code&gt; instances for an insertion offset, where
                  new text is inserted into the text model.  The insertion offset is equal
                  to the character position in the &lt;code&gt;TextHitInfo&lt;/code&gt; if the bias
                  is leading, and one character after if the bias is trailing.  The
                  insertion offset for TextHitInfo.trailing(1) is 2.
                  &lt;p&gt;
                  Sometimes it is convenient to construct a &lt;code&gt;TextHitInfo&lt;/code&gt; with
                  the same insertion offset as an existing one, but on the opposite
                  character.  The &lt;code&gt;getOtherHit&lt;/code&gt; method constructs a new
                  &lt;code&gt;TextHitInfo&lt;/code&gt; with the same insertion offset as an existing
                  one, with a hit on the character on the other side of the insertion offset.
                  Calling &lt;code&gt;getOtherHit&lt;/code&gt; on trailing(1) would return leading(2).
                  In general, &lt;code&gt;getOtherHit&lt;/code&gt; for trailing(n) returns
                  leading(n+1) and &lt;code&gt;getOtherHit&lt;/code&gt; for leading(n)
                  returns trailing(n-1).
                  &lt;p&gt;
                  &lt;strong&gt;Example&lt;/strong&gt;:&lt;p&gt;
                  Converting a graphical point to an insertion point within a text
                  model
                  &lt;blockquote&gt;&lt;pre&gt;
                  TextLayout layout = ...;
                  Point2D.Float hitPoint = ...;
                  TextHitInfo hitInfo = layout.hitTestChar(hitPoint.x, hitPoint.y);
                  int insPoint = hitInfo.getInsertionIndex();
                  // insPoint is relative to layout;  may need to adjust for use
                  // in a text model
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <see>
                    TextLayout                    
                </see>
            </javadoc>
            <declaration name="charIndex" type="int" line="89"/>
            <declaration name="isLeadingEdge" type="boolean" line="90"/>
            <javadoc line="92">
                Constructs a new &lt;code&gt;TextHitInfo&lt;/code&gt;.                
                <param>
                    charIndex the index of the character hit                    
                </param>
                <param>
                    isLeadingEdge <code>true</code> if the leading edge of the
                      character was hit                    
                </param>
            </javadoc>
            <method name="TextHitInfo" type="constructor" line="98">
                <params>
                    <param name="charIndex" type="int"/>
                    <param name="isLeadingEdge" type="boolean"/>
                </params>
            </method>
            <javadoc line="103">
                Returns the index of the character hit.                
                <return>
                    the index of the character hit.                    
                </return>
            </javadoc>
            <method name="getCharIndex" type="int" line="107"/>
            <javadoc line="111">
                Returns &lt;code&gt;true&lt;/code&gt; if the leading edge of the character was
                  hit.                
                <return>
                    <code>true</code> if the leading edge of the character was
                      hit; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isLeadingEdge" type="boolean" line="117"/>
            <javadoc line="121">
                Returns the insertion index.  This is the character index if
                  the leading edge of the character was hit, and one greater
                  than the character index if the trailing edge was hit.                
                <return>
                    the insertion index.                    
                </return>
            </javadoc>
            <method name="getInsertionIndex" type="int" line="127"/>
            <javadoc line="131">
                Returns the hash code.                
                <return>
                    the hash code of this <code>TextHitInfo</code>, which is
                      also the <code>charIndex</code> of this <code>TextHitInfo</code>.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="136"/>
            <javadoc line="140">
                Returns &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Object&lt;/code&gt; is a
                  &lt;code&gt;TextHitInfo&lt;/code&gt; and equals this &lt;code&gt;TextHitInfo&lt;/code&gt;.                
                <param>
                    obj the <code>Object</code> to test for equality                    
                </param>
                <return>
                    <code>true</code> if the specified <code>Object</code>
                      equals this <code>TextHitInfo</code>; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="147">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="151">
                Returns &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;TextHitInfo&lt;/code&gt;
                  has the same &lt;code&gt;charIndex&lt;/code&gt; and &lt;code&gt;isLeadingEdge&lt;/code&gt;
                  as this &lt;code&gt;TextHitInfo&lt;/code&gt;.  This is not the same as having
                  the same insertion offset.                
                <param>
                    hitInfo a specified <code>TextHitInfo</code>                    
                </param>
                <return>
                    <code>true</code> if the specified <code>TextHitInfo</code>
                      has the same <code>charIndex</code> and <code>isLeadingEdge</code>
                      as this <code>TextHitInfo</code>.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="161">
                <params>
                    <param name="hitInfo" type="TextHitInfo"/>
                </params>
            </method>
            <javadoc line="166">
                Returns a &lt;code&gt;String&lt;/code&gt; representing the hit for debugging
                  use only.                
                <return>
                    a <code>String</code> representing this
                      <code>TextHitInfo</code>.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="172"/>
            <javadoc line="176">
                Creates a &lt;code&gt;TextHitInfo&lt;/code&gt; on the leading edge of the
                  character at the specified &lt;code&gt;charIndex&lt;/code&gt;.                
                <param>
                    charIndex the index of the character hit                    
                </param>
                <return>
                    a <code>TextHitInfo</code> on the leading edge of the
                      character at the specified <code>charIndex</code>.                    
                </return>
            </javadoc>
            <method name="leading" type="TextHitInfo" line="183">
                <params>
                    <param name="charIndex" type="int"/>
                </params>
            </method>
            <javadoc line="187">
                Creates a hit on the trailing edge of the character at
                  the specified &lt;code&gt;charIndex&lt;/code&gt;.                
                <param>
                    charIndex the index of the character hit                    
                </param>
                <return>
                    a <code>TextHitInfo</code> on the trailing edge of the
                      character at the specified <code>charIndex</code>.                    
                </return>
            </javadoc>
            <method name="trailing" type="TextHitInfo" line="194">
                <params>
                    <param name="charIndex" type="int"/>
                </params>
            </method>
            <javadoc line="198">
                Creates a &lt;code&gt;TextHitInfo&lt;/code&gt; at the specified offset,
                  associated with the character before the offset.                
                <param>
                    offset an offset associated with the character before
                      the offset                    
                </param>
                <return>
                    a <code>TextHitInfo</code> at the specified offset.                    
                </return>
            </javadoc>
            <method name="beforeOffset" type="TextHitInfo" line="205">
                <params>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="209">
                Creates a &lt;code&gt;TextHitInfo&lt;/code&gt; at the specified offset,
                  associated with the character after the offset.                
                <param>
                    offset an offset associated with the character after
                      the offset                    
                </param>
                <return>
                    a <code>TextHitInfo</code> at the specified offset.                    
                </return>
            </javadoc>
            <method name="afterOffset" type="TextHitInfo" line="216">
                <params>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="220">
                Creates a &lt;code&gt;TextHitInfo&lt;/code&gt; on the other side of the
                  insertion point.  This &lt;code&gt;TextHitInfo&lt;/code&gt; remains unchanged.                
                <return>
                    a <code>TextHitInfo</code> on the other side of the
                      insertion point.                    
                </return>
            </javadoc>
            <method name="getOtherHit" type="TextHitInfo" line="226">
                <scope line="227"/>
                <scope line="229"/>
            </method>
            <javadoc line="234">
                Creates a &lt;code&gt;TextHitInfo&lt;/code&gt; whose character index is offset
                  by &lt;code&gt;delta&lt;/code&gt; from the &lt;code&gt;charIndex&lt;/code&gt; of this
                  &lt;code&gt;TextHitInfo&lt;/code&gt;. This &lt;code&gt;TextHitInfo&lt;/code&gt; remains
                  unchanged.                
                <param>
                    delta the value to offset this <code>charIndex</code>                    
                </param>
                <return>
                    a <code>TextHitInfo</code> whose <code>charIndex</code> is
                      offset by <code>delta</code> from the <code>charIndex</code> of
                      this <code>TextHitInfo</code>.                    
                </return>
            </javadoc>
            <method name="getOffsetHit" type="TextHitInfo" line="244">
                <params>
                    <param name="delta" type="int"/>
                </params>
            </method>
        </class>
    </source>