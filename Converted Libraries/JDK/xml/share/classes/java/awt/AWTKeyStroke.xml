<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Field"/>
        <class name="AWTKeyStroke" line="41">
            <comment line="207">
                returns noarg Constructor for class with accessible flag. No security
                threat as accessible flag is set only for this Constructor object,
                not for Class constructor.                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="41">
                An &lt;code&gt;AWTKeyStroke&lt;/code&gt; represents a key action on the
                  keyboard, or equivalent input device. &lt;code&gt;AWTKeyStroke&lt;/code&gt;s
                  can correspond to only a press or release of a
                  particular key, just as &lt;code&gt;KEY_PRESSED&lt;/code&gt; and
                  &lt;code&gt;KEY_RELEASED&lt;/code&gt; &lt;code&gt;KeyEvent&lt;/code&gt;s do;
                  alternately, they can correspond to typing a specific Java character, just
                  as &lt;code&gt;KEY_TYPED&lt;/code&gt; &lt;code&gt;KeyEvent&lt;/code&gt;s do.
                  In all cases, &lt;code&gt;AWTKeyStroke&lt;/code&gt;s can specify modifiers
                  (alt, shift, control, meta, altGraph, or a combination thereof) which must be present
                  during the action for an exact match.
                  &lt;p&gt;
                  &lt;code&gt;AWTKeyStrokes&lt;/code&gt; are immutable, and are intended
                  to be unique. Client code should never create an
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt; on its own, but should instead use
                  a variant of &lt;code&gt;getAWTKeyStroke&lt;/code&gt;. Client use of these factory
                  methods allows the &lt;code&gt;AWTKeyStroke&lt;/code&gt; implementation
                  to cache and share instances efficiently.                
                <see>
                    #getAWTKeyStroke                    
                </see>
                <author>
                    Arnaud Weber                    
                </author>
                <author>
                    David Mendenhall                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="67"/>
            <declaration name="cache" type="Map" line="69"/>
            <declaration name="cacheKey" type="AWTKeyStroke" line="70"/>
            <declaration name="ctor" type="Constructor" line="71"/>
            <declaration name="modifierKeywords" type="Map" line="72"/>
            <declaration name="vks" type="VKCollection" line="73"/>
            <javadoc line="73">
                Associates VK_XXX (as a String) with code (as Integer). This is
                  done to avoid the overhead of the reflective call to find the
                  constant.                
            </javadoc>
            <declaration name="keyChar" type="char" line="80"/>
            <declaration name="keyCode" type="int" line="81"/>
            <declaration name="modifiers" type="int" line="82"/>
            <declaration name="onKeyRelease" type="boolean" line="83"/>
            <scope line="85"/>
            <javadoc line="90">
                Constructs an &lt;code&gt;AWTKeyStroke&lt;/code&gt; with default values.
                  The default values used are:
                  &lt;table border=&quot;1&quot; summary=&quot;AWTKeyStroke default values&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;Key Char&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;KeyEvent.CHAR_UNDEFINED&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;Key Code&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;KeyEvent.VK_UNDEFINED&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;Modifiers&lt;/td&gt;
                  &lt;td&gt;none&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;On key release?&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt;s should not be constructed
                  by client code. Use a variant of &lt;code&gt;getAWTKeyStroke&lt;/code&gt;
                  instead.                
                <see>
                    #getAWTKeyStroke                    
                </see>
            </javadoc>
            <method name="AWTKeyStroke" type="constructor" line="119"/>
            <javadoc line="122">
                Constructs an &lt;code&gt;AWTKeyStroke&lt;/code&gt; with the specified
                  values. &lt;code&gt;AWTKeyStroke&lt;/code&gt;s should not be constructed
                  by client code. Use a variant of &lt;code&gt;getAWTKeyStroke&lt;/code&gt;
                  instead.                
                <param>
                    keyChar the character value for a keyboard key                    
                </param>
                <param>
                    keyCode the key code for this &lt;code&gt;AWTKeyStroke&lt;/code&gt;                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <param>
                    onKeyRelease &lt;code&gt;true&lt;/code&gt; if this
                      &lt;code&gt;AWTKeyStroke&lt;/code&gt; corresponds
                      to a key release; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <see>
                    #getAWTKeyStroke                    
                </see>
            </javadoc>
            <method name="AWTKeyStroke" type="constructor" line="137">
                <params>
                    <param name="keyChar" type="char"/>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
            </method>
            <javadoc line="144">
                Registers a new class which the factory methods in
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt; will use when generating new
                  instances of &lt;code&gt;AWTKeyStroke&lt;/code&gt;s. After invoking this
                  method, the factory methods will return instances of the specified
                  Class. The specified Class must be either &lt;code&gt;AWTKeyStroke&lt;/code&gt;
                  or derived from &lt;code&gt;AWTKeyStroke&lt;/code&gt;, and it must have a
                  no-arg constructor. The constructor can be of any accessibility,
                  including &lt;code&gt;private&lt;/code&gt;. This operation
                  flushes the current &lt;code&gt;AWTKeyStroke&lt;/code&gt; cache.                
                <param>
                    subclass the new Class of which the factory methods should create
                      instances                    
                </param>
                <throws>
                    IllegalArgumentException if subclass is &lt;code&gt;null&lt;/code&gt;,
                      or if subclass does not have a no-arg constructor                    
                </throws>
                <throws>
                    ClassCastException if subclass is not
                      &lt;code&gt;AWTKeyStroke&lt;/code&gt;, or a class derived from
                      &lt;code&gt;AWTKeyStroke&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="registerSubclass" type="void" line="163">
                <params>
                    <param name="subclass" type="Class<?>"/>
                </params>
                <comment line="169">
                    Already registered                    
                </comment>
                <scope line="164"/>
                <scope line="167"/>
                <scope line="171"/>
                <declaration name="ctor" type="Constructor" line="175"/>
                <declaration name="couldNotInstantiate" type="String" line="177"/>
                <scope line="179"/>
                <scope line="182">
                    <declaration name="stroke" type="AWTKeyStroke" line="183"/>
                    <scope line="184"/>
                </scope>
                <scope line="187"/>
                <scope line="189"/>
                <scope line="191"/>
                <scope line="193"/>
                <scope line="195"/>
                <scope line="199"/>
            </method>
            <method name="getCtor" type="Constructor" line="211">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
                <anonymous_class line="212">
                    <method name="run" type="Object" line="213">
                        <scope line="214">
                            <declaration name="ctor" type="Constructor" line="215"/>
                            <scope line="216"/>
                        </scope>
                        <scope line="220"/>
                        <scope line="221"/>
                    </method>
                </anonymous_class>
                <declaration name="ctor" type="Object" line="212"/>
            </method>
            <method name="getCachedStroke" type="AWTKeyStroke" line="231">
                <params>
                    <param name="keyChar" type="char"/>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
                <scope line="232"/>
                <scope line="236">
                    <scope line="237"/>
                    <scope line="239"/>
                    <scope line="241"/>
                    <scope line="243"/>
                </scope>
                <declaration name="stroke" type="AWTKeyStroke" line="252"/>
                <scope line="253"/>
            </method>
            <javadoc line="262">
                Returns a shared instance of an &lt;code&gt;AWTKeyStroke&lt;/code&gt;
                  that represents a &lt;code&gt;KEY_TYPED&lt;/code&gt; event for the
                  specified character.                
                <param>
                    keyChar the character value for a keyboard key                    
                </param>
                <return>
                    an &lt;code&gt;AWTKeyStroke&lt;/code&gt; object for that key                    
                </return>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="270">
                <params>
                    <param name="keyChar" type="char"/>
                </params>
            </method>
            <javadoc line="274">
                Returns a shared instance of an {@code AWTKeyStroke}that represents a {@code KEY_TYPED} event for the
                  specified Character object and a set of modifiers. Note
                  that the first parameter is of type Character rather than
                  char. This is to avoid inadvertent clashes with
                  calls to &lt;code&gt;getAWTKeyStroke(int keyCode, int modifiers)&lt;/code&gt;.
                  The modifiers consist of any combination of following:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers listed below also can be used, but they are
                  mapped to _DOWN_ modifiers. &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyChar the Character object for a keyboard character                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <return>
                    an &lt;code&gt;AWTKeyStroke&lt;/code&gt; object for that key                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;keyChar&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    java.awt.event.InputEvent                    
                </see>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="312">
                <params>
                    <param name="keyChar" type="Character"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="313"/>
            </method>
            <javadoc line="320">
                Returns a shared instance of an &lt;code&gt;AWTKeyStroke&lt;/code&gt;,
                  given a numeric key code and a set of modifiers, specifying
                  whether the key is activated when it is pressed or released.
                  &lt;p&gt;
                  The &quot;virtual key&quot; constants defined in
                  &lt;code&gt;java.awt.event.KeyEvent&lt;/code&gt; can be
                  used to specify the key code. For example:&lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_ENTER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_TAB&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_SPACE&lt;/code&gt;
                  &lt;/ul&gt;
                  Alternatively, the key code may be obtained by calling
                  &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt;.
                  The modifiers consist of any combination of:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyCode an int specifying the numeric code for a keyboard key                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <param>
                    onKeyRelease &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;AWTKeyStroke&lt;/code&gt;
                      should represent a key release; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <return>
                    an AWTKeyStroke object for that key                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.InputEvent                    
                </see>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="365">
                <params>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
            </method>
            <javadoc line="370">
                Returns a shared instance of an &lt;code&gt;AWTKeyStroke&lt;/code&gt;,
                  given a numeric key code and a set of modifiers. The returned
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt; will correspond to a key press.
                  &lt;p&gt;
                  The &quot;virtual key&quot; constants defined in
                  &lt;code&gt;java.awt.event.KeyEvent&lt;/code&gt; can be
                  used to specify the key code. For example:&lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_ENTER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_TAB&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_SPACE&lt;/code&gt;
                  &lt;/ul&gt;
                  The modifiers consist of any combination of:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyCode an int specifying the numeric code for a keyboard key                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <return>
                    an &lt;code&gt;AWTKeyStroke&lt;/code&gt; object for that key                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.InputEvent                    
                </see>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="409">
                <params>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="414">
                Returns an &lt;code&gt;AWTKeyStroke&lt;/code&gt; which represents the
                  stroke which generated a given &lt;code&gt;KeyEvent&lt;/code&gt;.
                  &lt;p&gt;
                  This method obtains the keyChar from a &lt;code&gt;KeyTyped&lt;/code&gt;
                  event, and the keyCode from a &lt;code&gt;KeyPressed&lt;/code&gt; or
                  &lt;code&gt;KeyReleased&lt;/code&gt; event. The &lt;code&gt;KeyEvent&lt;/code&gt; modifiers are
                  obtained for all three types of &lt;code&gt;KeyEvent&lt;/code&gt;.                
                <param>
                    anEvent the &lt;code&gt;KeyEvent&lt;/code&gt; from which to
                      obtain the &lt;code&gt;AWTKeyStroke&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;anEvent&lt;/code&gt; is null                    
                </throws>
                <return>
                    the &lt;code&gt;AWTKeyStroke&lt;/code&gt; that precipitated the event                    
                </return>
            </javadoc>
            <method name="getAWTKeyStrokeForEvent" type="AWTKeyStroke" line="428">
                <params>
                    <param name="anEvent" type="KeyEvent"/>
                </params>
                <comment line="444">
                    Invalid ID for this KeyEvent                    
                </comment>
                <declaration name="id" type="int" line="429"/>
            </method>
            <javadoc line="448">
                Parses a string and returns an &lt;code&gt;AWTKeyStroke&lt;/code&gt;.
                  The string must have the following syntax:
                  &lt;pre&gt;
                  &amp;lt;modifiers&amp;gt; (&amp;lt;typedID&amp;gt; | &amp;lt;pressedReleasedID&amp;gt;)
                  modifiers := shift | control | ctrl | meta | alt | altGraph
                  typedID := typed &amp;lt;typedKey&amp;gt;
                  typedKey := string of length 1 giving Unicode character.
                  pressedReleasedID := (pressed | released) key
                  key := KeyEvent key code name, i.e. the name following &quot;VK_&quot;.
                  &lt;/pre&gt;
                  If typed, pressed or released is not specified, pressed is assumed. Here
                  are some examples:
                  &lt;pre&gt;
                  &quot;INSERT&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_INSERT, 0);
                  &quot;control DELETE&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);
                  &quot;alt shift X&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);
                  &quot;alt shift released X&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);
                  &quot;typed a&quot; =&gt; getAWTKeyStroke(&apos;a&apos;);
                  &lt;/pre&gt;                
                <param>
                    s a String formatted as described above                    
                </param>
                <return>
                    an &lt;code&gt;AWTKeyStroke&lt;/code&gt; object for that String                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                      or is formatted incorrectly                    
                </throws>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="475">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="476"/>
                <declaration name="errmsg" type="String" line="480"/>
                <declaration name="st" type="StringTokenizer" line="482"/>
                <declaration name="mask" type="int" line="484"/>
                <declaration name="released" type="boolean" line="485"/>
                <declaration name="typed" type="boolean" line="486"/>
                <declaration name="pressed" type="boolean" line="487"/>
                <scope line="489">
                    <scope line="490">
                        <declaration name="uninitializedMap" type="Map" line="491"/>
                    </scope>
                </scope>
                <declaration name="count" type="int" line="521"/>
                <scope line="523">
                    <declaration name="token" type="String" line="524"/>
                    <scope line="526">
                        <scope line="527"/>
                    </scope>
                    <scope line="534">
                        <scope line="535"/>
                        <declaration name="keyCodeName" type="String" line="539"/>
                        <declaration name="keyCode" type="int" line="540"/>
                    </scope>
                    <scope line="546"/>
                    <scope line="550"/>
                    <scope line="554"/>
                    <declaration name="tokenMask" type="Integer" line="559"/>
                    <scope line="560"/>
                    <scope line="562"/>
                </scope>
            </method>
            <method name="getVKCollection" type="VKCollection" line="570">
                <scope line="571"/>
            </method>
            <javadoc line="576">
                Returns the integer constant for the KeyEvent.VK field named
                  &lt;code&gt;key&lt;/code&gt;. This will throw an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is
                  not a valid constant.                
            </javadoc>
            <method name="getVKValue" type="int" line="582">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="vkCollect" type="VKCollection" line="583"/>
                <declaration name="value" type="Integer" line="585"/>
                <scope line="587">
                    <declaration name="keyCode" type="int" line="588"/>
                    <declaration name="errmsg" type="String" line="589"/>
                    <scope line="591"/>
                    <scope line="593"/>
                    <scope line="595"/>
                </scope>
            </method>
            <javadoc line="604">
                Returns the character for this &lt;code&gt;AWTKeyStroke&lt;/code&gt;.                
                <return>
                    a char value                    
                </return>
                <see>
                    #getAWTKeyStroke(char)                    
                </see>
                <see>
                    KeyEvent#getKeyChar                    
                </see>
            </javadoc>
            <method name="getKeyChar" type="char" line="611"/>
            <javadoc line="615">
                Returns the numeric key code for this &lt;code&gt;AWTKeyStroke&lt;/code&gt;.                
                <return>
                    an int containing the key code value                    
                </return>
                <see>
                    #getAWTKeyStroke(int,int)                    
                </see>
                <see>
                    KeyEvent#getKeyCode                    
                </see>
            </javadoc>
            <method name="getKeyCode" type="int" line="622"/>
            <javadoc line="626">
                Returns the modifier keys for this &lt;code&gt;AWTKeyStroke&lt;/code&gt;.                
                <return>
                    an int containing the modifiers                    
                </return>
                <see>
                    #getAWTKeyStroke(int,int)                    
                </see>
            </javadoc>
            <method name="getModifiers" type="int" line="632"/>
            <javadoc line="636">
                Returns whether this &lt;code&gt;AWTKeyStroke&lt;/code&gt; represents a key release.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;AWTKeyStroke&lt;/code&gt;
                      represents a key release; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <see>
                    #getAWTKeyStroke(int,int,boolean)                    
                </see>
            </javadoc>
            <method name="isOnKeyRelease" type="boolean" line="643"/>
            <javadoc line="647">
                Returns the type of &lt;code&gt;KeyEvent&lt;/code&gt; which corresponds to
                  this &lt;code&gt;AWTKeyStroke&lt;/code&gt;.                
                <return>
                    &lt;code&gt;KeyEvent.KEY_PRESSED&lt;/code&gt;,
                      &lt;code&gt;KeyEvent.KEY_TYPED&lt;/code&gt;,
                      or &lt;code&gt;KeyEvent.KEY_RELEASED&lt;/code&gt;                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
            </javadoc>
            <method name="getKeyEventType" type="int" line="656">
                <scope line="657"/>
                <scope line="659"/>
            </method>
            <javadoc line="666">
                Returns a numeric value for this object that is likely to be unique,
                  making it a good choice as the index value in a hash table.                
                <return>
                    an int that represents this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="672"/>
            <javadoc line="677">
                Returns true if this object is identical to the specified object.                
                <param>
                    anObject the Object to compare this object to                    
                </param>
                <return>
                    true if the objects are identical                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="683">
                <params>
                    <param name="anObject" type="Object"/>
                </params>
                <scope line="684">
                    <declaration name="ks" type="AWTKeyStroke" line="685"/>
                </scope>
            </method>
            <javadoc line="693">
                Returns a string that displays and identifies this object&apos;s properties.
                  The &lt;code&gt;String&lt;/code&gt; returned by this method can be passed
                  as a parameter to &lt;code&gt;getAWTKeyStroke(String)&lt;/code&gt; to produce
                  a key stroke equal to this key stroke.                
                <return>
                    a String representation of this object                    
                </return>
                <see>
                    #getAWTKeyStroke(String)                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="702">
                <scope line="703"/>
                <scope line="705"/>
            </method>
            <method name="getModifiersText" type="String" line="712">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="713"/>
                <scope line="715"/>
                <scope line="718"/>
                <scope line="721"/>
                <scope line="724"/>
                <scope line="727"/>
                <scope line="730"/>
                <scope line="733"/>
                <scope line="736"/>
            </method>
            <method name="getVKText" type="String" line="743">
                <params>
                    <param name="keyCode" type="int"/>
                </params>
                <declaration name="vkCollect" type="VKCollection" line="744"/>
                <declaration name="key" type="Integer" line="745"/>
                <declaration name="name" type="String" line="746"/>
                <scope line="747"/>
                <declaration name="expected_modifiers" type="int" line="750"/>
                <declaration name="fields" type="Field[]" line="753"/>
                <scope line="754">
                    <scope line="755">
                        <scope line="760"/>
                    </scope>
                    <scope line="765"/>
                </scope>
            </method>
            <javadoc line="772">
                Returns a cached instance of &lt;code&gt;AWTKeyStroke&lt;/code&gt; (or a subclass of
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt;) which is equal to this instance.                
                <return>
                    a cached instance which is equal to this instance                    
                </return>
            </javadoc>
            <method name="readResolve" type="Object" line="778">
                <scope line="779">
                    <declaration name="newClass" type="Class" line="780"/>
                    <scope line="781"/>
                </scope>
            </method>
            <method name="mapOldModifiers" type="int" line="788">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="789"/>
                <scope line="792"/>
                <scope line="795"/>
                <scope line="798"/>
                <scope line="801"/>
            </method>
            <method name="mapNewModifiers" type="int" line="817">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="818"/>
                <scope line="821"/>
                <scope line="824"/>
                <scope line="827"/>
                <scope line="830"/>
            </method>
        </class>
        <class name="VKCollection" line="839">
            <comment line="207">
                returns noarg Constructor for class with accessible flag. No security
                threat as accessible flag is set only for this Constructor object,
                not for Class constructor.                
            </comment>
            <declaration name="code2name" type="Map" line="840"/>
            <declaration name="name2code" type="Map" line="841"/>
            <method name="VKCollection" type="constructor" line="843"/>
            <method name="put" type="void" line="848">
                <params>
                    <param name="name" type="String"/>
                    <param name="code" type="Integer"/>
                </params>
            </method>
            <method name="findCode" type="Integer" line="856">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="findName" type="String" line="861">
                <params>
                    <param name="code" type="Integer"/>
                </params>
            </method>
        </class>
    </source>