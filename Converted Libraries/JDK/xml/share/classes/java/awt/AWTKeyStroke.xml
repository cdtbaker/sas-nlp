<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Field"/>
        <class name="AWTKeyStroke" line="15">
            <implements interface="Serializable"/>
            <javadoc line="15">
                An &lt;code&gt;AWTKeyStroke&lt;/code&gt; represents a key action on the
                  keyboard, or equivalent input device. &lt;code&gt;AWTKeyStroke&lt;/code&gt;s
                  can correspond to only a press or release of a
                  particular key, just as &lt;code&gt;KEY_PRESSED&lt;/code&gt; and
                  &lt;code&gt;KEY_RELEASED&lt;/code&gt; &lt;code&gt;KeyEvent&lt;/code&gt;s do;
                  alternately, they can correspond to typing a specific Java character, just
                  as &lt;code&gt;KEY_TYPED&lt;/code&gt; &lt;code&gt;KeyEvent&lt;/code&gt;s do.
                  In all cases, &lt;code&gt;AWTKeyStroke&lt;/code&gt;s can specify modifiers
                  (alt, shift, control, meta, altGraph, or a combination thereof) which must be present
                  during the action for an exact match.
                  &lt;p&gt;
                  &lt;code&gt;AWTKeyStrokes&lt;/code&gt; are immutable, and are intended
                  to be unique. Client code should never create an
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt; on its own, but should instead use
                  a variant of &lt;code&gt;getAWTKeyStroke&lt;/code&gt;. Client use of these factory
                  methods allows the &lt;code&gt;AWTKeyStroke&lt;/code&gt; implementation
                  to cache and share instances efficiently.                
                <see>
                    #getAWTKeyStroke                    
                </see>
                <author>
                    Arnaud Weber                    
                </author>
                <author>
                    David Mendenhall                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <declaration name="cache" type="Map" line="40"/>
            <declaration name="cacheKey" type="AWTKeyStroke" line="41"/>
            <declaration name="ctor" type="Constructor" line="42"/>
            <declaration name="modifierKeywords" type="Map" line="43"/>
            <declaration name="vks" type="VKCollection" line="44"/>
            <javadoc line="44">
                Associates VK_XXX (as a String) with code (as Integer). This is
                  done to avoid the overhead of the reflective call to find the
                  constant.                
            </javadoc>
            <declaration name="keyChar" type="char" line="50"/>
            <declaration name="keyCode" type="int" line="51"/>
            <declaration name="modifiers" type="int" line="52"/>
            <declaration name="onKeyRelease" type="boolean" line="53"/>
            <scope line="54"/>
            <javadoc line="57">
                Constructs an &lt;code&gt;AWTKeyStroke&lt;/code&gt; with default values.
                  The default values used are:
                  &lt;table border=&quot;1&quot; summary=&quot;AWTKeyStroke default values&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;Key Char&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;KeyEvent.CHAR_UNDEFINED&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;Key Code&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;KeyEvent.VK_UNDEFINED&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;Modifiers&lt;/td&gt;
                  &lt;td&gt;none&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;On key release?&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt;s should not be constructed
                  by client code. Use a variant of &lt;code&gt;getAWTKeyStroke&lt;/code&gt;
                  instead.                
                <see>
                    #getAWTKeyStroke                    
                </see>
            </javadoc>
            <method name="AWTKeyStroke" type="constructor" line="84"/>
            <javadoc line="86">
                Constructs an &lt;code&gt;AWTKeyStroke&lt;/code&gt; with the specified
                  values. &lt;code&gt;AWTKeyStroke&lt;/code&gt;s should not be constructed
                  by client code. Use a variant of &lt;code&gt;getAWTKeyStroke&lt;/code&gt;
                  instead.                
                <param>
                    keyChar the character value for a keyboard key                    
                </param>
                <param>
                    keyCode the key code for this &lt;code&gt;AWTKeyStroke&lt;/code&gt;                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <param>
                    onKeyRelease &lt;code&gt;true&lt;/code&gt; if this
                      &lt;code&gt;AWTKeyStroke&lt;/code&gt; corresponds
                      to a key release; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <see>
                    #getAWTKeyStroke                    
                </see>
            </javadoc>
            <method name="AWTKeyStroke" type="constructor" line="99">
                <params>
                    <param name="keyChar" type="char"/>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
            </method>
            <javadoc line="105">
                Registers a new class which the factory methods in
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt; will use when generating new
                  instances of &lt;code&gt;AWTKeyStroke&lt;/code&gt;s. After invoking this
                  method, the factory methods will return instances of the specified
                  Class. The specified Class must be either &lt;code&gt;AWTKeyStroke&lt;/code&gt;
                  or derived from &lt;code&gt;AWTKeyStroke&lt;/code&gt;, and it must have a
                  no-arg constructor. The constructor can be of any accessibility,
                  including &lt;code&gt;private&lt;/code&gt;. This operation
                  flushes the current &lt;code&gt;AWTKeyStroke&lt;/code&gt; cache.                
                <param>
                    subclass the new Class of which the factory methods should create
                      instances                    
                </param>
                <throws>
                    IllegalArgumentException if subclass is &lt;code&gt;null&lt;/code&gt;,
                      or if subclass does not have a no-arg constructor                    
                </throws>
                <throws>
                    ClassCastException if subclass is not
                      &lt;code&gt;AWTKeyStroke&lt;/code&gt;, or a class derived from
                      &lt;code&gt;AWTKeyStroke&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="registerSubclass" type="void" line="123">
                <params>
                    <param name="subclass" type="Class&lt;?&gt;"/>
                </params>
                <scope line="124"/>
                <scope line="127"/>
                <scope line="130"/>
                <declaration name="ctor" type="Constructor" line="133"/>
                <declaration name="couldNotInstantiate" type="String" line="134"/>
                <scope line="135"/>
                <scope line="138">
                    <declaration name="stroke" type="AWTKeyStroke" line="139"/>
                    <scope line="140"/>
                </scope>
                <scope line="144"/>
                <scope line="147"/>
                <scope line="150"/>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="159"/>
            </method>
            <method name="getCtor" type="Constructor" line="165">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
                <anonymous_class line="166">
                    <method name="run" type="Object" line="167">
                        <scope line="168">
                            <declaration name="ctor" type="Constructor" line="169"/>
                            <scope line="170"/>
                        </scope>
                        <scope line="175"/>
                        <scope line="177"/>
                    </method>
                </anonymous_class>
                <declaration name="ctor" type="Object" line="166"/>
            </method>
            <method name="getCachedStroke" type="AWTKeyStroke" line="185">
                <params>
                    <param name="keyChar" type="char"/>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
                <scope line="186"/>
                <scope line="189">
                    <scope line="190"/>
                    <scope line="193"/>
                    <scope line="196"/>
                    <scope line="199"/>
                </scope>
                <declaration name="stroke" type="AWTKeyStroke" line="207"/>
                <scope line="208"/>
            </method>
            <javadoc line="215">
                Returns a shared instance of an &lt;code&gt;AWTKeyStroke&lt;/code&gt;
                  that represents a &lt;code&gt;KEY_TYPED&lt;/code&gt; event for the
                  specified character.                
                <param>
                    keyChar the character value for a keyboard key                    
                </param>
                <return>
                    an &lt;code&gt;AWTKeyStroke&lt;/code&gt; object for that key                    
                </return>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="222">
                <params>
                    <param name="keyChar" type="char"/>
                </params>
            </method>
            <javadoc line="225">
                Returns a shared instance of an {@code AWTKeyStroke}that represents a {@code KEY_TYPED} event for the
                  specified Character object and a set of modifiers. Note
                  that the first parameter is of type Character rather than
                  char. This is to avoid inadvertent clashes with
                  calls to &lt;code&gt;getAWTKeyStroke(int keyCode, int modifiers)&lt;/code&gt;.
                  The modifiers consist of any combination of following:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers listed below also can be used, but they are
                  mapped to _DOWN_ modifiers. &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyChar the Character object for a keyboard character                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <return>
                    an &lt;code&gt;AWTKeyStroke&lt;/code&gt; object for that key                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;keyChar&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    java.awt.event.InputEvent                    
                </see>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="257">
                <params>
                    <param name="keyChar" type="Character"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="258"/>
            </method>
            <javadoc line="263">
                Returns a shared instance of an &lt;code&gt;AWTKeyStroke&lt;/code&gt;,
                  given a numeric key code and a set of modifiers, specifying
                  whether the key is activated when it is pressed or released.
                  &lt;p&gt;
                  The &quot;virtual key&quot; constants defined in
                  &lt;code&gt;java.awt.event.KeyEvent&lt;/code&gt; can be
                  used to specify the key code. For example:&lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_ENTER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_TAB&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_SPACE&lt;/code&gt;
                  &lt;/ul&gt;
                  Alternatively, the key code may be obtained by calling
                  &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt;.
                  The modifiers consist of any combination of:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyCode an int specifying the numeric code for a keyboard key                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <param>
                    onKeyRelease &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;AWTKeyStroke&lt;/code&gt;
                      should represent a key release; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <return>
                    an AWTKeyStroke object for that key                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.InputEvent                    
                </see>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="303">
                <params>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
            </method>
            <javadoc line="306">
                Returns a shared instance of an &lt;code&gt;AWTKeyStroke&lt;/code&gt;,
                  given a numeric key code and a set of modifiers. The returned
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt; will correspond to a key press.
                  &lt;p&gt;
                  The &quot;virtual key&quot; constants defined in
                  &lt;code&gt;java.awt.event.KeyEvent&lt;/code&gt; can be
                  used to specify the key code. For example:&lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_ENTER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_TAB&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;java.awt.event.KeyEvent.VK_SPACE&lt;/code&gt;
                  &lt;/ul&gt;
                  The modifiers consist of any combination of:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyCode an int specifying the numeric code for a keyboard key                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <return>
                    an &lt;code&gt;AWTKeyStroke&lt;/code&gt; object for that key                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.InputEvent                    
                </see>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="342">
                <params>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="345">
                Returns an &lt;code&gt;AWTKeyStroke&lt;/code&gt; which represents the
                  stroke which generated a given &lt;code&gt;KeyEvent&lt;/code&gt;.
                  &lt;p&gt;
                  This method obtains the keyChar from a &lt;code&gt;KeyTyped&lt;/code&gt;
                  event, and the keyCode from a &lt;code&gt;KeyPressed&lt;/code&gt; or
                  &lt;code&gt;KeyReleased&lt;/code&gt; event. The &lt;code&gt;KeyEvent&lt;/code&gt; modifiers are
                  obtained for all three types of &lt;code&gt;KeyEvent&lt;/code&gt;.                
                <param>
                    anEvent the &lt;code&gt;KeyEvent&lt;/code&gt; from which to
                      obtain the &lt;code&gt;AWTKeyStroke&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;anEvent&lt;/code&gt; is null                    
                </throws>
                <return>
                    the &lt;code&gt;AWTKeyStroke&lt;/code&gt; that precipitated the event                    
                </return>
            </javadoc>
            <method name="getAWTKeyStrokeForEvent" type="AWTKeyStroke" line="358">
                <params>
                    <param name="anEvent" type="KeyEvent"/>
                </params>
                <declaration name="id" type="int" line="359"/>
            </method>
            <javadoc line="370">
                Parses a string and returns an &lt;code&gt;AWTKeyStroke&lt;/code&gt;.
                  The string must have the following syntax:
                  &lt;pre&gt;
                  &amp;lt;modifiers&amp;gt; (&amp;lt;typedID&amp;gt; | &amp;lt;pressedReleasedID&amp;gt;)
                  modifiers := shift | control | ctrl | meta | alt | altGraph
                  typedID := typed &amp;lt;typedKey&amp;gt;
                  typedKey := string of length 1 giving Unicode character.
                  pressedReleasedID := (pressed | released) key
                  key := KeyEvent key code name, i.e. the name following &quot;VK_&quot;.
                  &lt;/pre&gt;
                  If typed, pressed or released is not specified, pressed is assumed. Here
                  are some examples:
                  &lt;pre&gt;
                  &quot;INSERT&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_INSERT, 0);
                  &quot;control DELETE&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);
                  &quot;alt shift X&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);
                  &quot;alt shift released X&quot; =&gt; getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);
                  &quot;typed a&quot; =&gt; getAWTKeyStroke(&apos;a&apos;);
                  &lt;/pre&gt;                
                <param>
                    s a String formatted as described above                    
                </param>
                <return>
                    an &lt;code&gt;AWTKeyStroke&lt;/code&gt; object for that String                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                      or is formatted incorrectly                    
                </throws>
            </javadoc>
            <method name="getAWTKeyStroke" type="AWTKeyStroke" line="395">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="396"/>
                <declaration name="errmsg" type="String" line="399"/>
                <declaration name="st" type="StringTokenizer" line="400"/>
                <declaration name="mask" type="int" line="401"/>
                <declaration name="released" type="boolean" line="402"/>
                <declaration name="typed" type="boolean" line="403"/>
                <declaration name="pressed" type="boolean" line="404"/>
                <scope line="405">
                    <scope line="406">
                        <declaration name="uninitializedMap" type="Map" line="407"/>
                    </scope>
                </scope>
                <declaration name="count" type="int" line="420"/>
                <scope line="421">
                    <declaration name="token" type="String" line="422"/>
                    <scope line="423">
                        <scope line="424"/>
                    </scope>
                    <scope line="429">
                        <scope line="430"/>
                        <declaration name="keyCodeName" type="String" line="433"/>
                        <declaration name="keyCode" type="int" line="434"/>
                    </scope>
                    <scope line="437"/>
                    <scope line="441"/>
                    <scope line="445"/>
                    <declaration name="tokenMask" type="Integer" line="449"/>
                    <scope line="450"/>
                    <scope line="453"/>
                </scope>
            </method>
            <method name="getVKCollection" type="VKCollection" line="459">
                <scope line="460"/>
            </method>
            <javadoc line="465">
                Returns the integer constant for the KeyEvent.VK field named
                  &lt;code&gt;key&lt;/code&gt;. This will throw an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is
                  not a valid constant.                
            </javadoc>
            <method name="getVKValue" type="int" line="471">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="vkCollect" type="VKCollection" line="472"/>
                <declaration name="value" type="Integer" line="473"/>
                <scope line="474">
                    <declaration name="keyCode" type="int" line="475"/>
                    <declaration name="errmsg" type="String" line="476"/>
                    <scope line="477"/>
                    <scope line="480"/>
                    <scope line="483"/>
                </scope>
            </method>
            <javadoc line="491">
                Returns the character for this &lt;code&gt;AWTKeyStroke&lt;/code&gt;.                
                <return>
                    a char value                    
                </return>
                <see>
                    #getAWTKeyStroke(char)                    
                </see>
                <see>
                    KeyEvent#getKeyChar                    
                </see>
            </javadoc>
            <method name="getKeyChar" type="char" line="497"/>
            <javadoc line="500">
                Returns the numeric key code for this &lt;code&gt;AWTKeyStroke&lt;/code&gt;.                
                <return>
                    an int containing the key code value                    
                </return>
                <see>
                    #getAWTKeyStroke(int,int)                    
                </see>
                <see>
                    KeyEvent#getKeyCode                    
                </see>
            </javadoc>
            <method name="getKeyCode" type="int" line="506"/>
            <javadoc line="509">
                Returns the modifier keys for this &lt;code&gt;AWTKeyStroke&lt;/code&gt;.                
                <return>
                    an int containing the modifiers                    
                </return>
                <see>
                    #getAWTKeyStroke(int,int)                    
                </see>
            </javadoc>
            <method name="getModifiers" type="int" line="514"/>
            <javadoc line="517">
                Returns whether this &lt;code&gt;AWTKeyStroke&lt;/code&gt; represents a key release.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;AWTKeyStroke&lt;/code&gt;
                      represents a key release; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <see>
                    #getAWTKeyStroke(int,int,boolean)                    
                </see>
            </javadoc>
            <method name="isOnKeyRelease" type="boolean" line="523"/>
            <javadoc line="526">
                Returns the type of &lt;code&gt;KeyEvent&lt;/code&gt; which corresponds to
                  this &lt;code&gt;AWTKeyStroke&lt;/code&gt;.                
                <return>
                    &lt;code&gt;KeyEvent.KEY_PRESSED&lt;/code&gt;,
                      &lt;code&gt;KeyEvent.KEY_TYPED&lt;/code&gt;,
                      or &lt;code&gt;KeyEvent.KEY_RELEASED&lt;/code&gt;                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
            </javadoc>
            <method name="getKeyEventType" type="int" line="534">
                <scope line="535"/>
                <scope line="538"/>
            </method>
            <javadoc line="542">
                Returns a numeric value for this object that is likely to be unique,
                  making it a good choice as the index value in a hash table.                
                <return>
                    an int that represents this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="547"/>
            <javadoc line="550">
                Returns true if this object is identical to the specified object.                
                <param>
                    anObject the Object to compare this object to                    
                </param>
                <return>
                    true if the objects are identical                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="555">
                <params>
                    <param name="anObject" type="Object"/>
                </params>
                <scope line="556">
                    <declaration name="ks" type="AWTKeyStroke" line="557"/>
                </scope>
            </method>
            <javadoc line="562">
                Returns a string that displays and identifies this object&apos;s properties.
                  The &lt;code&gt;String&lt;/code&gt; returned by this method can be passed
                  as a parameter to &lt;code&gt;getAWTKeyStroke(String)&lt;/code&gt; to produce
                  a key stroke equal to this key stroke.                
                <return>
                    a String representation of this object                    
                </return>
                <see>
                    #getAWTKeyStroke(String)                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="570">
                <scope line="571"/>
                <scope line="574"/>
            </method>
            <method name="getModifiersText" type="String" line="578">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="579"/>
                <scope line="580"/>
                <scope line="583"/>
                <scope line="586"/>
                <scope line="589"/>
                <scope line="592"/>
                <scope line="595"/>
                <scope line="598"/>
                <scope line="601"/>
            </method>
            <method name="getVKText" type="String" line="606">
                <params>
                    <param name="keyCode" type="int"/>
                </params>
                <declaration name="vkCollect" type="VKCollection" line="607"/>
                <declaration name="key" type="Integer" line="608"/>
                <declaration name="name" type="String" line="609"/>
                <scope line="610"/>
                <declaration name="expected_modifiers" type="int" line="613"/>
                <declaration name="fields" type="Field[]" line="614"/>
                <scope line="615">
                    <scope line="616">
                        <scope line="617"/>
                    </scope>
                    <scope line="623"/>
                </scope>
            </method>
            <javadoc line="629">
                Returns a cached instance of &lt;code&gt;AWTKeyStroke&lt;/code&gt; (or a subclass of
                  &lt;code&gt;AWTKeyStroke&lt;/code&gt;) which is equal to this instance.                
                <return>
                    a cached instance which is equal to this instance                    
                </return>
            </javadoc>
            <method name="readResolve" type="Object" line="634">
                <scope line="635">
                    <declaration name="newClass" type="Class" line="636"/>
                    <scope line="637"/>
                </scope>
            </method>
            <method name="mapOldModifiers" type="int" line="643">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="644"/>
                <scope line="647"/>
                <scope line="650"/>
                <scope line="653"/>
                <scope line="656"/>
            </method>
            <method name="mapNewModifiers" type="int" line="662">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="663"/>
                <scope line="666"/>
                <scope line="669"/>
                <scope line="672"/>
                <scope line="675"/>
            </method>
        </class>
        <class name="VKCollection" line="681">
            <declaration name="code2name" type="Map" line="682"/>
            <declaration name="name2code" type="Map" line="683"/>
            <method name="VKCollection" type="constructor" line="684"/>
            <method name="put" type="void" line="688">
                <params>
                    <param name="name" type="String"/>
                    <param name="code" type="Integer"/>
                </params>
            </method>
            <method name="findCode" type="Integer" line="695">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="findName" type="String" line="699">
                <params>
                    <param name="code" type="Integer"/>
                </params>
            </method>
        </class>
    </source>