<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.io.PrintStream"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Locale"/>
        <import package="java.util.EventListener"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.Collections"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.ContainerPeer"/>
        <import package="java.awt.peer.LightweightPeer"/>
        <import package="java.awt.image.BufferStrategy"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.event"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeSupport"/>
        <import package="java.beans.Transient"/>
        <import package="java.awt.event.InputMethodListener"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.im.InputContext"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="java.awt.dnd.DropTarget"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AccessControlContext"/>
        <import package="javax.accessibility"/>
        <import package="java.applet.Applet"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.awt.ConstrainableGraphics"/>
        <import package="sun.awt.SubRegionShowable"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.WindowClosingListener"/>
        <import package="sun.awt.CausedFocusEvent"/>
        <import package="sun.awt.EmbeddedFrame"/>
        <import package="sun.awt.dnd.SunDropTargetEvent"/>
        <import package="sun.awt.im.CompositionArea"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.SunFontManager"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.awt.image.VSyncedBSManager"/>
        <import package="sun.java2d.pipe.hw.ExtendedBufferCapabilities"/>
        <import package="sun.java2d.pipe.hw.ExtendedBufferCapabilities.VSyncType"/>
        <import package="sun.awt.RequestFocusController"/>
        <import package="sun.java2d.SunGraphicsEnvironment"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="Component" line="62">
            <implements interface="ImageObserver"/>
            <implements interface="MenuContainer"/>
            <implements interface="Serializable"/>
            <javadoc line="62">
                A &lt;em&gt;component&lt;/em&gt; is an object having a graphical representation
                  that can be displayed on the screen and that can interact with the
                  user. Examples of components are the buttons, checkboxes, and scrollbars
                  of a typical graphical user interface. &lt;p&gt;
                  The &lt;code&gt;Component&lt;/code&gt; class is the abstract superclass of
                  the nonmenu-related Abstract Window Toolkit components. Class
                  &lt;code&gt;Component&lt;/code&gt; can also be extended directly to create a
                  lightweight component. A lightweight component is a component that is
                  not associated with a native window. On the contrary, a heavyweight
                  component is associated with a native window. The {@link #isLightweight()}method may be used to distinguish between the two kinds of the components.
                  &lt;p&gt;
                  Lightweight and heavyweight components may be mixed in a single component
                  hierarchy. However, for correct operating of such a mixed hierarchy of
                  components, the whole hierarchy must be valid. When the hierarchy gets
                  invalidated, like after changing the bounds of components, or
                  adding/removing components to/from containers, the whole hierarchy must be
                  validated afterwards by means of the {@link Container#validate()} method
                  invoked on the top-most invalid container of the hierarchy.
                  &lt;p&gt;
                  &lt;h3&gt;Serialization&lt;/h3&gt;
                  It is important to note that only AWT listeners which conform
                  to the &lt;code&gt;Serializable&lt;/code&gt; protocol will be saved when
                  the object is stored.  If an AWT object has listeners that
                  aren&apos;t marked serializable, they will be dropped at
                  &lt;code&gt;writeObject&lt;/code&gt; time.  Developers will need, as always,
                  to consider the implications of making an object serializable.
                  One situation to watch out for is this:
                  &lt;pre&gt;
                  import java.awt.;
                  import java.awt.event.;
                  import java.io.Serializable;
                  class MyApp implements ActionListener, Serializable
                  {
                  BigObjectThatShouldNotBeSerializedWithAButton bigOne;
                  Button aButton = new Button();
                  MyApp()
                  {
                  // Oops, now aButton has a listener with a reference
                  // to bigOne!
                  aButton.addActionListener(this);
                  }
                  public void actionPerformed(ActionEvent e)
                  {
                  System.out.println(&quot;Hello There&quot;);
                  }
                  }
                  &lt;/pre&gt;
                  In this example, serializing &lt;code&gt;aButton&lt;/code&gt; by itself
                  will cause &lt;code&gt;MyApp&lt;/code&gt; and everything it refers to
                  to be serialized as well.  The problem is that the listener
                  is serializable by coincidence, not by design.  To separate
                  the decisions about &lt;code&gt;MyApp&lt;/code&gt; and the
                  &lt;code&gt;ActionListener&lt;/code&gt; being serializable one can use a
                  nested class, as in the following example:
                  &lt;pre&gt;
                  import java.awt.;
                  import java.awt.event.;
                  import java.io.Serializable;
                  class MyApp java.io.Serializable
                  {
                  BigObjectThatShouldNotBeSerializedWithAButton bigOne;
                  Button aButton = new Button();
                  static class MyActionListener implements ActionListener
                  {
                  public void actionPerformed(ActionEvent e)
                  {
                  System.out.println(&quot;Hello There&quot;);
                  }
                  }
                  MyApp()
                  {
                  aButton.addActionListener(new MyActionListener());
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: For more information on the paint mechanisms utilitized
                  by AWT and Swing, including information on how to write the most
                  efficient painting code, see
                  &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/painting/index.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;.
                  &lt;p&gt;
                  For details on the focus subsystem, see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html&quot;&gt;
                  How to Use the Focus Subsystem&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;, and the
                  &lt;a href=&quot;../../java/awt/doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt;
                  for more information.                
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Sami Shaio                    
                </author>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="154"/>
            <declaration name="eventLog" type="PlatformLogger" line="155"/>
            <declaration name="focusLog" type="PlatformLogger" line="156"/>
            <declaration name="mixingLog" type="PlatformLogger" line="157"/>
            <declaration name="peer" type="ComponentPeer" line="158"/>
            <javadoc line="158">
                The peer of the component. The peer implements the component&apos;s
                  behavior. The peer is set when the &lt;code&gt;Component&lt;/code&gt; is
                  added to a container that also is a peer.                
                <see>
                    #addNotify                    
                </see>
                <see>
                    #removeNotify                    
                </see>
            </javadoc>
            <declaration name="parent" type="Container" line="166"/>
            <javadoc line="166">
                The parent of the object. It may be &lt;code&gt;null&lt;/code&gt;
                  for top-level components.                
                <see>
                    #getParent                    
                </see>
            </javadoc>
            <declaration name="appContext" type="AppContext" line="172"/>
            <javadoc line="172">
                The &lt;code&gt;AppContext&lt;/code&gt; of the component. Applets/Plugin may
                  change the AppContext.                
            </javadoc>
            <declaration name="x" type="int" line="177"/>
            <javadoc line="177">
                The x position of the component in the parent&apos;s coordinate system.                
                <serial>
                                        
                </serial>
                <see>
                    #getLocation                    
                </see>
            </javadoc>
            <declaration name="y" type="int" line="183"/>
            <javadoc line="183">
                The y position of the component in the parent&apos;s coordinate system.                
                <serial>
                                        
                </serial>
                <see>
                    #getLocation                    
                </see>
            </javadoc>
            <declaration name="width" type="int" line="189"/>
            <javadoc line="189">
                The width of the component.                
                <serial>
                                        
                </serial>
                <see>
                    #getSize                    
                </see>
            </javadoc>
            <declaration name="height" type="int" line="195"/>
            <javadoc line="195">
                The height of the component.                
                <serial>
                                        
                </serial>
                <see>
                    #getSize                    
                </see>
            </javadoc>
            <declaration name="foreground" type="Color" line="201"/>
            <javadoc line="201">
                The foreground color for this component.
                  &lt;code&gt;foreground&lt;/code&gt; can be &lt;code&gt;null&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getForeground                    
                </see>
                <see>
                    #setForeground                    
                </see>
            </javadoc>
            <declaration name="background" type="Color" line="209"/>
            <javadoc line="209">
                The background color for this component.
                  &lt;code&gt;background&lt;/code&gt; can be &lt;code&gt;null&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getBackground                    
                </see>
                <see>
                    #setBackground                    
                </see>
            </javadoc>
            <declaration name="font" type="Font" line="217"/>
            <javadoc line="217">
                The font used by this component.
                  The &lt;code&gt;font&lt;/code&gt; can be &lt;code&gt;null&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getFont                    
                </see>
                <see>
                    #setFont                    
                </see>
            </javadoc>
            <declaration name="peerFont" type="Font" line="225"/>
            <javadoc line="225">
                The font which the peer is currently using.
                  (&lt;code&gt;null&lt;/code&gt; if no peer exists.)                
            </javadoc>
            <declaration name="cursor" type="Cursor" line="230"/>
            <javadoc line="230">
                The cursor displayed when pointer is over this component.
                  This value can be &lt;code&gt;null&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getCursor                    
                </see>
                <see>
                    #setCursor                    
                </see>
            </javadoc>
            <declaration name="locale" type="Locale" line="238"/>
            <javadoc line="238">
                The locale for the component.                
                <serial>
                                        
                </serial>
                <see>
                    #getLocale                    
                </see>
                <see>
                    #setLocale                    
                </see>
            </javadoc>
            <declaration name="graphicsConfig" type="GraphicsConfiguration" line="245"/>
            <javadoc line="245">
                A reference to a &lt;code&gt;GraphicsConfiguration&lt;/code&gt; object
                  used to describe the characteristics of a graphics
                  destination.
                  This value can be &lt;code&gt;null&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
                <serial>
                                        
                </serial>
                <see>
                    GraphicsConfiguration                    
                </see>
                <see>
                    #getGraphicsConfiguration                    
                </see>
            </javadoc>
            <declaration name="bufferStrategy" type="BufferStrategy" line="256"/>
            <javadoc line="256">
                A reference to a &lt;code&gt;BufferStrategy&lt;/code&gt; object
                  used to manipulate the buffers on this component.                
                <since>
                    1.4                    
                </since>
                <see>
                    java.awt.image.BufferStrategy                    
                </see>
                <see>
                    #getBufferStrategy()                    
                </see>
            </javadoc>
            <declaration name="ignoreRepaint" type="boolean" line="264"/>
            <javadoc line="264">
                True when the object should ignore all repaint events.                
                <since>
                    1.4                    
                </since>
                <serial>
                                        
                </serial>
                <see>
                    #setIgnoreRepaint                    
                </see>
                <see>
                    #getIgnoreRepaint                    
                </see>
            </javadoc>
            <declaration name="visible" type="boolean" line="272"/>
            <javadoc line="272">
                True when the object is visible. An object that is not
                  visible is not drawn on the screen.                
                <serial>
                                        
                </serial>
                <see>
                    #isVisible                    
                </see>
                <see>
                    #setVisible                    
                </see>
            </javadoc>
            <declaration name="enabled" type="boolean" line="280"/>
            <javadoc line="280">
                True when the object is enabled. An object that is not
                  enabled does not interact with the user.                
                <serial>
                                        
                </serial>
                <see>
                    #isEnabled                    
                </see>
                <see>
                    #setEnabled                    
                </see>
            </javadoc>
            <declaration name="valid" type="boolean" line="288"/>
            <javadoc line="288">
                True when the object is valid. An invalid object needs to
                  be layed out. This flag is set to false when the object
                  size is changed.                
                <serial>
                                        
                </serial>
                <see>
                    #isValid                    
                </see>
                <see>
                    #validate                    
                </see>
                <see>
                    #invalidate                    
                </see>
            </javadoc>
            <declaration name="dropTarget" type="DropTarget" line="298"/>
            <javadoc line="298">
                The &lt;code&gt;DropTarget&lt;/code&gt; associated with this component.                
                <since>
                    1.2                    
                </since>
                <serial>
                                        
                </serial>
                <see>
                    #setDropTarget                    
                </see>
                <see>
                    #getDropTarget                    
                </see>
            </javadoc>
            <declaration name="popups" type="Vector" line="306"/>
            <javadoc line="306">
                @serial                
                <see>
                    #add                    
                </see>
            </javadoc>
            <declaration name="name" type="String" line="311"/>
            <javadoc line="311">
                A component&apos;s name.
                  This field can be &lt;code&gt;null&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getName                    
                </see>
                <see>
                    #setName(String)                    
                </see>
            </javadoc>
            <declaration name="nameExplicitlySet" type="boolean" line="319"/>
            <javadoc line="319">
                A bool to determine whether the name has
                  been set explicitly. &lt;code&gt;nameExplicitlySet&lt;/code&gt; will
                  be false if the name has not been set and
                  true if it has.                
                <serial>
                                        
                </serial>
                <see>
                    #getName                    
                </see>
                <see>
                    #setName(String)                    
                </see>
            </javadoc>
            <declaration name="focusable" type="boolean" line="329"/>
            <javadoc line="329">
                Indicates whether this Component can be focused.                
                <serial>
                                        
                </serial>
                <see>
                    #setFocusable                    
                </see>
                <see>
                    #isFocusable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="FOCUS_TRAVERSABLE_UNKNOWN" type="int" line="337"/>
            <declaration name="FOCUS_TRAVERSABLE_DEFAULT" type="int" line="338"/>
            <declaration name="FOCUS_TRAVERSABLE_SET" type="int" line="339"/>
            <declaration name="isFocusTraversableOverridden" type="int" line="340"/>
            <javadoc line="340">
                Tracks whether this Component is relying on default focus travesability.                
                <serial>
                                        
                </serial>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="focusTraversalKeys" type="Set[]" line="346"/>
            <javadoc line="346">
                The focus traversal keys. These keys will generate focus traversal
                  behavior for Components for which focus traversal keys are enabled. If a
                  value of null is specified for a traversal key, this Component inherits
                  that traversal key from its parent. If all ancestors of this Component
                  have null specified for that traversal key, then the current
                  KeyboardFocusManager&apos;s default traversal key is used.                
                <serial>
                                        
                </serial>
                <see>
                    #setFocusTraversalKeys                    
                </see>
                <see>
                    #getFocusTraversalKeys                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="focusTraversalKeyPropertyNames" type="String[]" line="359"/>
            <declaration name="focusTraversalKeysEnabled" type="boolean" line="360"/>
            <javadoc line="360">
                Indicates whether focus traversal keys are enabled for this Component.
                  Components for which focus traversal keys are disabled receive key
                  events for focus traversal keys. Components for which focus traversal
                  keys are enabled do not see these events; instead, the events are
                  automatically converted to traversal operations.                
                <serial>
                                        
                </serial>
                <see>
                    #setFocusTraversalKeysEnabled                    
                </see>
                <see>
                    #getFocusTraversalKeysEnabled                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="LOCK" type="Object" line="372"/>
            <javadoc line="372">
                The locking object for AWT component-tree and layout operations.                
                <see>
                    #getTreeLock                    
                </see>
            </javadoc>
            <class name="AWTTreeLock" line="377"/>
            <declaration name="acc" type="AccessControlContext" line="379"/>
            <declaration name="minSize" type="Dimension" line="380"/>
            <javadoc line="380">
                Minimum size.
                  (This field perhaps should have been transient).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="minSizeSet" type="boolean" line="386"/>
            <javadoc line="386">
                Whether or not setMinimumSize has been invoked with a non-null value.                
            </javadoc>
            <declaration name="prefSize" type="Dimension" line="390"/>
            <javadoc line="390">
                Preferred size.
                  (This field perhaps should have been transient).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="prefSizeSet" type="boolean" line="396"/>
            <javadoc line="396">
                Whether or not setPreferredSize has been invoked with a non-null value.                
            </javadoc>
            <declaration name="maxSize" type="Dimension" line="400"/>
            <javadoc line="400">
                Maximum size                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="maxSizeSet" type="boolean" line="405"/>
            <javadoc line="405">
                Whether or not setMaximumSize has been invoked with a non-null value.                
            </javadoc>
            <declaration name="componentOrientation" type="ComponentOrientation" line="409"/>
            <javadoc line="409">
                The orientation for this component.                
                <see>
                    #getComponentOrientation                    
                </see>
                <see>
                    #setComponentOrientation                    
                </see>
            </javadoc>
            <declaration name="newEventsOnly" type="boolean" line="415"/>
            <javadoc line="415">
                &lt;code&gt;newEventsOnly&lt;/code&gt; will be true if the event is
                  one of the event types enabled for the component.
                  It will then allow for normal processing to
                  continue.  If it is false the event is passed
                  to the component&apos;s parent and up the ancestor
                  tree until the event has been consumed.                
                <serial>
                                        
                </serial>
                <see>
                    #dispatchEvent                    
                </see>
            </javadoc>
            <declaration name="componentListener" type="ComponentListener" line="426"/>
            <declaration name="focusListener" type="FocusListener" line="427"/>
            <declaration name="hierarchyListener" type="HierarchyListener" line="428"/>
            <declaration name="hierarchyBoundsListener" type="HierarchyBoundsListener" line="429"/>
            <declaration name="keyListener" type="KeyListener" line="430"/>
            <declaration name="mouseListener" type="MouseListener" line="431"/>
            <declaration name="mouseMotionListener" type="MouseMotionListener" line="432"/>
            <declaration name="mouseWheelListener" type="MouseWheelListener" line="433"/>
            <declaration name="inputMethodListener" type="InputMethodListener" line="434"/>
            <declaration name="windowClosingException" type="RuntimeException" line="435"/>
            <declaration name="actionListenerK" type="String" line="436"/>
            <javadoc line="436">
                Internal, constants for serialization                
            </javadoc>
            <declaration name="adjustmentListenerK" type="String" line="440"/>
            <declaration name="componentListenerK" type="String" line="441"/>
            <declaration name="containerListenerK" type="String" line="442"/>
            <declaration name="focusListenerK" type="String" line="443"/>
            <declaration name="itemListenerK" type="String" line="444"/>
            <declaration name="keyListenerK" type="String" line="445"/>
            <declaration name="mouseListenerK" type="String" line="446"/>
            <declaration name="mouseMotionListenerK" type="String" line="447"/>
            <declaration name="mouseWheelListenerK" type="String" line="448"/>
            <declaration name="textListenerK" type="String" line="449"/>
            <declaration name="ownedWindowK" type="String" line="450"/>
            <declaration name="windowListenerK" type="String" line="451"/>
            <declaration name="inputMethodListenerK" type="String" line="452"/>
            <declaration name="hierarchyListenerK" type="String" line="453"/>
            <declaration name="hierarchyBoundsListenerK" type="String" line="454"/>
            <declaration name="windowStateListenerK" type="String" line="455"/>
            <declaration name="windowFocusListenerK" type="String" line="456"/>
            <declaration name="eventMask" type="long" line="457"/>
            <javadoc line="457">
                The &lt;code&gt;eventMask&lt;/code&gt; is ONLY set by subclasses via
                  &lt;code&gt;enableEvents&lt;/code&gt;.
                  The mask should NOT be set when listeners are registered
                  so that we can distinguish the difference between when
                  listeners request events and subclasses request them.
                  One bit is used to indicate whether input methods are
                  enabled; this bit is set by &lt;code&gt;enableInputMethods&lt;/code&gt; and is
                  on by default.                
                <serial>
                                        
                </serial>
                <see>
                    #enableInputMethods                    
                </see>
                <see>
                    AWTEvent                    
                </see>
            </javadoc>
            <declaration name="isInc" type="boolean" line="471"/>
            <javadoc line="471">
                Static properties for incremental drawing.                
                <see>
                    #imageUpdate                    
                </see>
            </javadoc>
            <declaration name="incRate" type="int" line="476"/>
            <scope line="477">
                <scope line="479"/>
                <declaration name="s" type="String" line="482"/>
            </scope>
            <declaration name="TOP_ALIGNMENT" type="float" line="487"/>
            <javadoc line="487">
                Ease-of-use constant for &lt;code&gt;getAlignmentY()&lt;/code&gt;.
                  Specifies an alignment to the top of the component.                
                <see>
                    #getAlignmentY                    
                </see>
            </javadoc>
            <declaration name="CENTER_ALIGNMENT" type="float" line="493"/>
            <javadoc line="493">
                Ease-of-use constant for &lt;code&gt;getAlignmentY&lt;/code&gt; and
                  &lt;code&gt;getAlignmentX&lt;/code&gt;. Specifies an alignment to
                  the center of the component                
                <see>
                    #getAlignmentX                    
                </see>
                <see>
                    #getAlignmentY                    
                </see>
            </javadoc>
            <declaration name="BOTTOM_ALIGNMENT" type="float" line="501"/>
            <javadoc line="501">
                Ease-of-use constant for &lt;code&gt;getAlignmentY&lt;/code&gt;.
                  Specifies an alignment to the bottom of the component.                
                <see>
                    #getAlignmentY                    
                </see>
            </javadoc>
            <declaration name="LEFT_ALIGNMENT" type="float" line="507"/>
            <javadoc line="507">
                Ease-of-use constant for &lt;code&gt;getAlignmentX&lt;/code&gt;.
                  Specifies an alignment to the left side of the component.                
                <see>
                    #getAlignmentX                    
                </see>
            </javadoc>
            <declaration name="RIGHT_ALIGNMENT" type="float" line="513"/>
            <javadoc line="513">
                Ease-of-use constant for &lt;code&gt;getAlignmentX&lt;/code&gt;.
                  Specifies an alignment to the right side of the component.                
                <see>
                    #getAlignmentX                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="519"/>
            <declaration name="changeSupport" type="PropertyChangeSupport" line="520"/>
            <javadoc line="520">
                If any &lt;code&gt;PropertyChangeListeners&lt;/code&gt; have been registered,
                  the &lt;code&gt;changeSupport&lt;/code&gt; field describes them.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #firePropertyChange                    
                </see>
            </javadoc>
            <declaration name="objectLock" type="Object" line="530"/>
            <method name="getObjectLock" type="Object" line="531"/>
            <method name="getAccessControlContext" type="AccessControlContext" line="534">
                <scope line="535"/>
            </method>
            <declaration name="isPacked" type="boolean" line="540"/>
            <declaration name="boundsOp" type="int" line="541"/>
            <javadoc line="541">
                Pseudoparameter for direct Geometry API (setLocation, setBounds setSize
                  to signal setBounds what&apos;s changing. Should be used under TreeLock.
                  This is only needed due to the inability to change the cross-calling
                  order of public and deprecated methods.                
            </javadoc>
            <declaration name="BaselineResizeBehavior" type="enum" line="548"/>
            <javadoc line="548">
                Enumeration of the common ways the baseline of a component can
                  change as the size changes.  The baseline resize behavior is
                  primarily for layout managers that need to know how the
                  position of the baseline changes as the component size changes.
                  In general the baseline resize behavior will be valid for sizes
                  greater than or equal to the minimum size (the actual minimum
                  size; not a developer specified minimum size).  For sizes
                  smaller than the minimum size the baseline may change in a way
                  other than the baseline resize behavior indicates.  Similarly,
                  as the size approaches &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; and/or
                  &lt;code&gt;Short.MAX_VALUE&lt;/code&gt; the baseline may change in a way
                  other than the baseline resize behavior indicates.                
                <see>
                    #getBaselineResizeBehavior                    
                </see>
                <see>
                    #getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="565"/>
            <declaration name="compoundShape" type="Region" line="626"/>
            <javadoc line="619">
                Indicates the baseline resize behavior can not be expressed using
                  any of the other constants.  This may also indicate the baseline
                  varies with the width of the component.  This is also returned
                  by components that do not have a baseline.                
            </javadoc>
            <declaration name="mixingCutoutRegion" type="Region" line="627"/>
            <declaration name="isAddNotifyComplete" type="boolean" line="628"/>
            <javadoc line="629">
                Should only be used in subclass getBounds to check that part of bounds
                  is actualy changing                
            </javadoc>
            <method name="getBoundsOp" type="int" line="633"/>
            <method name="setBoundsOp" type="void" line="637">
                <params>
                    <param name="op" type="int"/>
                </params>
            </method>
            <declaration name="backgroundEraseDisabled" type="boolean" line="646"/>
            <scope line="647">
                <anonymous_class line="648">
                    <method name="setBackgroundEraseDisabled" type="void" line="649">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="disabled" type="boolean"/>
                        </params>
                    </method>
                    <method name="getBackgroundEraseDisabled" type="boolean" line="652">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getBounds" type="Rectangle" line="655">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="setMixingCutoutShape" type="void" line="658">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="shape" type="Shape"/>
                        </params>
                        <declaration name="region" type="Region" line="659"/>
                        <scope line="660">
                            <declaration name="needShowing" type="boolean" line="661"/>
                            <declaration name="needHiding" type="boolean" line="662"/>
                            <scope line="663"/>
                            <scope line="667"/>
                            <scope line="670">
                                <scope line="671"/>
                                <scope line="674"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="setGraphicsConfiguration" type="void" line="680">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="gc" type="GraphicsConfiguration"/>
                        </params>
                    </method>
                    <method name="requestFocus" type="boolean" line="683">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="cause" type="CausedFocusEvent.Cause"/>
                        </params>
                    </method>
                    <method name="canBeFocusOwner" type="boolean" line="686">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="isVisible" type="boolean" line="689">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="setRequestFocusController" type="void" line="692">
                        <params>
                            <param name="requestController" type="RequestFocusController"/>
                        </params>
                    </method>
                    <method name="getAppContext" type="AppContext" line="695">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="setAppContext" type="void" line="698">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="appContext" type="AppContext"/>
                        </params>
                    </method>
                    <method name="getParent" type="Container" line="701">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="setParent" type="void" line="704">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="parent" type="Container"/>
                        </params>
                    </method>
                    <method name="setSize" type="void" line="707">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="width" type="int"/>
                            <param name="height" type="int"/>
                        </params>
                    </method>
                    <method name="getLocation" type="Point" line="711">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="setLocation" type="void" line="714">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="x" type="int"/>
                            <param name="y" type="int"/>
                        </params>
                    </method>
                    <method name="isEnabled" type="boolean" line="718">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="isDisplayable" type="boolean" line="721">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getCursor" type="Cursor" line="724">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getPeer" type="ComponentPeer" line="727">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="setPeer" type="void" line="730">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="peer" type="ComponentPeer"/>
                        </params>
                    </method>
                    <method name="isLightweight" type="boolean" line="733">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getIgnoreRepaint" type="boolean" line="736">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getWidth" type="int" line="739">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getHeight" type="int" line="742">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getX" type="int" line="745">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getY" type="int" line="748">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getForeground" type="Color" line="751">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="getBackground" type="Color" line="754">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="setBackground" type="void" line="757">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="background" type="Color"/>
                        </params>
                    </method>
                    <method name="getFont" type="Font" line="760">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                    <method name="processEvent" type="void" line="763">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="e" type="AWTEvent"/>
                        </params>
                    </method>
                    <method name="getAccessControlContext" type="AccessControlContext" line="766">
                        <params>
                            <param name="comp" type="Component"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
            <javadoc line="772">
                Constructs a new component. Class &lt;code&gt;Component&lt;/code&gt; can be
                  extended directly to create a lightweight component that does not
                  utilize an opaque native window. A lightweight component must be
                  hosted by a native container somewhere higher up in the component
                  tree (for example, by a &lt;code&gt;Frame&lt;/code&gt; object).                
            </javadoc>
            <method name="Component" type="constructor" line="779"/>
            <method name="initializeFocusTraversalKeys" type="void" line="782"/>
            <javadoc line="785">
                Constructs a name for this component.  Called by &lt;code&gt;getName&lt;/code&gt;
                  when the name is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="constructComponentName" type="String" line="789"/>
            <javadoc line="792">
                Gets the name of the component.                
                <return>
                    this component's name                    
                </return>
                <see>
                    #setName                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="798">
                <scope line="799">
                    <scope line="800"/>
                </scope>
            </method>
            <javadoc line="806">
                Sets the name of the component to the specified string.                
                <param>
                    name  the string that is to be this
                      component's name                    
                </param>
                <see>
                    #getName                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setName" type="void" line="813">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="oldName" type="String" line="814"/>
                <scope line="815"/>
            </method>
            <javadoc line="822">
                Gets the parent of this component.                
                <return>
                    the parent container of this component                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getParent" type="Container" line="827"/>
            <method name="getParent_NoClientCode" type="Container" line="830"/>
            <method name="getContainer" type="Container" line="833"/>
            <javadoc line="836">
                @deprecated As of JDK version 1.1,
                  programs should not directly manipulate peers;
                  replaced by &lt;code&gt;boolean isDisplayable()&lt;/code&gt;.                
            </javadoc>
            <method name="getPeer" type="ComponentPeer" line="841"/>
            <javadoc line="844">
                Associate a &lt;code&gt;DropTarget&lt;/code&gt; with this component.
                  The &lt;code&gt;Component&lt;/code&gt; will receive drops only if it
                  is enabled.                
                <see>
                    #isEnabled                    
                </see>
                <param>
                    dt The DropTarget                    
                </param>
            </javadoc>
            <method name="setDropTarget" type="void" line="851">
                <params>
                    <param name="dt" type="DropTarget"/>
                </params>
                <declaration name="old" type="DropTarget" line="853"/>
                <scope line="854">
                    <declaration name="t" type="DropTarget" line="856"/>
                    <scope line="858"/>
                    <scope line="861"/>
                </scope>
                <scope line="864">
                    <scope line="865"/>
                    <scope line="869">
                        <scope line="870">
                            <scope line="871"/>
                            <scope line="875"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="881">
                Gets the &lt;code&gt;DropTarget&lt;/code&gt; associated with this
                  &lt;code&gt;Component&lt;/code&gt;.                
            </javadoc>
            <method name="getDropTarget" type="DropTarget" line="885"/>
            <javadoc line="888">
                Gets the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; associated with this
                  &lt;code&gt;Component&lt;/code&gt;.
                  If the &lt;code&gt;Component&lt;/code&gt; has not been assigned a specific
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;,
                  the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; of the
                  &lt;code&gt;Component&lt;/code&gt; object&apos;s top-level container is
                  returned.
                  If the &lt;code&gt;Component&lt;/code&gt; has been created, but not yet added
                  to a &lt;code&gt;Container&lt;/code&gt;, this method returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the <code>GraphicsConfiguration</code> used by this
                      <code>Component</code> or <code>null</code>                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="902">
                <scope line="903"/>
            </method>
            <method name="getGraphicsConfiguration_NoClientCode" type="GraphicsConfiguration" line="907"/>
            <method name="setGraphicsConfiguration" type="void" line="910">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="911">
                    <scope line="912"/>
                </scope>
            </method>
            <method name="updateGraphicsData" type="boolean" line="918">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="921"/>
                <scope line="922"/>
            </method>
            <javadoc line="927">
                Checks that this component&apos;s &lt;code&gt;GraphicsDevice&lt;/code&gt;
                  &lt;code&gt;idString&lt;/code&gt; matches the string argument.                
            </javadoc>
            <method name="checkGD" type="void" line="931">
                <params>
                    <param name="stringID" type="String"/>
                </params>
                <scope line="932">
                    <scope line="933"/>
                </scope>
            </method>
            <javadoc line="938">
                Gets this component&apos;s locking object (the object that owns the thread
                  synchronization monitor) for AWT component-tree and layout
                  operations.                
                <return>
                    this component's locking object                    
                </return>
            </javadoc>
            <method name="getTreeLock" type="Object" line="944"/>
            <method name="checkTreeLock" type="void" line="947">
                <scope line="948"/>
            </method>
            <javadoc line="952">
                Gets the toolkit of this component. Note that
                  the frame that contains a component controls which
                  toolkit is used by that component. Therefore if the component
                  is moved from one frame to another, the toolkit it uses may change.                
                <return>
                    the toolkit of this component                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getToolkit" type="Toolkit" line="960"/>
            <method name="getToolkitImpl" type="Toolkit" line="963">
                <declaration name="peer" type="ComponentPeer" line="964"/>
                <scope line="965"/>
                <declaration name="parent" type="Container" line="968"/>
                <scope line="969"/>
            </method>
            <javadoc line="974">
                Determines whether this component is valid. A component is valid
                  when it is correctly sized and positioned within its parent
                  container and all its children are also valid.
                  In order to account for peers&apos; size requirements, components are invalidated
                  before they are first shown on the screen. By the time the parent container
                  is fully realized, all its components will be valid.                
                <return>
                    <code>true</code> if the component is valid, <code>false</code>
                      otherwise                    
                </return>
                <see>
                    #validate                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isValid" type="boolean" line="987"/>
            <javadoc line="990">
                Determines whether this component is displayable. A component is
                  displayable when it is connected to a native screen resource.
                  &lt;p&gt;
                  A component is made displayable either when it is added to
                  a displayable containment hierarchy or when its containment
                  hierarchy is made displayable.
                  A containment hierarchy is made displayable when its ancestor
                  window is either packed or made visible.
                  &lt;p&gt;
                  A component is made undisplayable either when it is removed from
                  a displayable containment hierarchy or when its containment hierarchy
                  is made undisplayable.  A containment hierarchy is made
                  undisplayable when its ancestor window is disposed.                
                <return>
                    <code>true</code> if the component is displayable,
                      <code>false</code> otherwise                    
                </return>
                <see>
                    Container#add(Component)                    
                </see>
                <see>
                    Window#pack                    
                </see>
                <see>
                    Window#show                    
                </see>
                <see>
                    Container#remove(Component)                    
                </see>
                <see>
                    Window#dispose                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isDisplayable" type="boolean" line="1013"/>
            <javadoc line="1016">
                Determines whether this component should be visible when its
                  parent is visible. Components are
                  initially visible, with the exception of top level components such
                  as &lt;code&gt;Frame&lt;/code&gt; objects.                
                <return>
                    <code>true</code> if the component is visible,
                      <code>false</code> otherwise                    
                </return>
                <see>
                    #setVisible                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isVisible" type="boolean" line="1026"/>
            <method name="isVisible_NoClientCode" type="boolean" line="1029"/>
            <javadoc line="1032">
                Determines whether this component will be displayed on the screen.                
                <return>
                    <code>true</code> if the component and all of its ancestors
                      until a toplevel window or null parent are visible,
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isRecursivelyVisible" type="boolean" line="1038"/>
            <javadoc line="1041">
                Translates absolute coordinates into coordinates in the coordinate
                  space of this component.                
            </javadoc>
            <method name="pointRelativeToComponent" type="Point" line="1045">
                <params>
                    <param name="absolute" type="Point"/>
                </params>
                <declaration name="compCoords" type="Point" line="1046"/>
            </method>
            <javadoc line="1049">
                Assuming that mouse location is stored in PointerInfo passed
                  to this method, it finds a Component that is in the same
                  Window as this Component and is located under the mouse pointer.
                  If no such Component exists, null is returned.
                  NOTE: this method should be called under the protection of
                  tree lock, as it is done in Component.getMousePosition() and
                  Container.getMousePosition(boolean).                
            </javadoc>
            <method name="findUnderMouseInWindow" type="Component" line="1058">
                <params>
                    <param name="pi" type="PointerInfo"/>
                </params>
                <scope line="1059"/>
                <declaration name="win" type="Window" line="1062"/>
                <scope line="1063"/>
                <declaration name="INCLUDE_DISABLED" type="boolean" line="1066"/>
                <declaration name="relativeToWindow" type="Point" line="1067"/>
                <declaration name="inTheSameWindow" type="Component" line="1068"/>
            </method>
            <javadoc line="1071">
                Returns the position of the mouse pointer in this &lt;code&gt;Component&lt;/code&gt;&apos;s
                  coordinate space if the &lt;code&gt;Component&lt;/code&gt; is directly under the mouse
                  pointer, otherwise returns &lt;code&gt;null&lt;/code&gt;.
                  If the &lt;code&gt;Component&lt;/code&gt; is not showing on the screen, this method
                  returns &lt;code&gt;null&lt;/code&gt; even if the mouse pointer is above the area
                  where the &lt;code&gt;Component&lt;/code&gt; would be displayed.
                  If the &lt;code&gt;Component&lt;/code&gt; is partially or fully obscured by other
                  &lt;code&gt;Component&lt;/code&gt;s or native windows, this method returns a non-null
                  value only if the mouse pointer is located above the unobscured part of the
                  &lt;code&gt;Component&lt;/code&gt;.
                  &lt;p&gt;
                  For &lt;code&gt;Container&lt;/code&gt;s it returns a non-null value if the mouse is
                  above the &lt;code&gt;Container&lt;/code&gt; itself or above any of its descendants.
                  Use {@link Container#getMousePosition(boolean)} if you need to exclude children.
                  &lt;p&gt;
                  Sometimes the exact mouse coordinates are not important, and the only thing
                  that matters is whether a specific &lt;code&gt;Component&lt;/code&gt; is under the mouse
                  pointer. If the return value of this method is &lt;code&gt;null&lt;/code&gt;, mouse
                  pointer is not directly above the &lt;code&gt;Component&lt;/code&gt;.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless() returns true                    
                </exception>
                <see>
                    #isShowing                    
                </see>
                <see>
                    Container#getMousePosition                    
                </see>
                <return>
                    mouse coordinates relative to this <code>Component</code>, or null                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getMousePosition" type="Point" line="1097">
                <scope line="1098"/>
                <anonymous_class line="1101">
                    <method name="run" type="Object" line="1102"/>
                </anonymous_class>
                <declaration name="pi" type="PointerInfo" line="1101"/>
                <scope line="1107">
                    <declaration name="inTheSameWindow" type="Component" line="1108"/>
                    <scope line="1109"/>
                </scope>
            </method>
            <javadoc line="1115">
                Overridden in Container. Must be called under TreeLock.                
            </javadoc>
            <method name="isSameOrAncestorOf" type="boolean" line="1118">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="allowChildren" type="boolean"/>
                </params>
            </method>
            <javadoc line="1121">
                Determines whether this component is showing on screen. This means
                  that the component must be visible, and it must be in a container
                  that is visible and showing.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; sometimes there is no way to detect whether the{@code Component} is actually visible to the user.  This can happen when:
                  &lt;ul&gt;
                  &lt;li&gt;the component has been added to a visible {@code ScrollPane} but
                  the {@code Component} is not currently in the scroll pane&apos;s view port.
                  &lt;li&gt;the {@code Component} is obscured by another {@code Component} or{@code Container}.
                  &lt;/ul&gt;                
                <return>
                    <code>true</code> if the component is showing,
                      <code>false</code> otherwise                    
                </return>
                <see>
                    #setVisible                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isShowing" type="boolean" line="1137">
                <scope line="1138">
                    <declaration name="parent" type="Container" line="1139"/>
                </scope>
            </method>
            <javadoc line="1144">
                Determines whether this component is enabled. An enabled component
                  can respond to user input and generate events. Components are
                  enabled initially by default. A component may be enabled or disabled by
                  calling its &lt;code&gt;setEnabled&lt;/code&gt; method.                
                <return>
                    <code>true</code> if the component is enabled,
                      <code>false</code> otherwise                    
                </return>
                <see>
                    #setEnabled                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isEnabled" type="boolean" line="1154"/>
            <method name="isEnabledImpl" type="boolean" line="1157"/>
            <javadoc line="1160">
                Enables or disables this component, depending on the value of the
                  parameter &lt;code&gt;b&lt;/code&gt;. An enabled component can respond to user
                  input and generate events. Components are enabled initially by default.
                  &lt;p&gt;Note: Disabling a lightweight component does not prevent it from
                  receiving MouseEvents.
                  &lt;p&gt;Note: Disabling a heavyweight container prevents all components
                  in this container from receiving any input events.  But disabling a
                  lightweight container affects only this container.                
                <param>
                    b   If <code>true</code>, this component is
                      enabled; otherwise this component is disabled                    
                </param>
                <see>
                    #isEnabled                    
                </see>
                <see>
                    #isLightweight                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setEnabled" type="void" line="1175">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="1178">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setEnabled(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="enable" type="void" line="1182">
                <scope line="1183">
                    <scope line="1184">
                        <declaration name="peer" type="ComponentPeer" line="1186"/>
                        <scope line="1187">
                            <scope line="1189"/>
                        </scope>
                    </scope>
                    <scope line="1194"/>
                </scope>
            </method>
            <javadoc line="1199">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setEnabled(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="enable" type="void" line="1203">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="1204"/>
                <scope line="1207"/>
            </method>
            <javadoc line="1211">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setEnabled(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="disable" type="void" line="1215">
                <scope line="1216">
                    <scope line="1218">
                        <scope line="1220"/>
                        <declaration name="peer" type="ComponentPeer" line="1223"/>
                        <scope line="1224">
                            <scope line="1226"/>
                        </scope>
                    </scope>
                    <scope line="1231"/>
                </scope>
            </method>
            <javadoc line="1236">
                Returns true if this component is painted to an offscreen image
                  (&quot;buffer&quot;) that&apos;s copied to the screen later.  Component
                  subclasses that support double buffering should override this
                  method to return true if double buffering is enabled.                
                <return>
                    false by default                    
                </return>
            </javadoc>
            <method name="isDoubleBuffered" type="boolean" line="1243"/>
            <javadoc line="1246">
                Enables or disables input method support for this component. If input
                  method support is enabled and the component also processes key events,
                  incoming events are offered to
                  the current input method and will only be processed by the component or
                  dispatched to its listeners if the input method does not consume them.
                  By default, input method support is enabled.                
                <param>
                    enable true to enable, false to disable                    
                </param>
                <see>
                    #processKeyEvent                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="enableInputMethods" type="void" line="1257">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
                <scope line="1258">
                    <scope line="1260">
                        <declaration name="inputContext" type="InputContext" line="1261"/>
                        <scope line="1262">
                            <declaration name="focusGainedEvent" type="FocusEvent" line="1263"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1269">
                    <scope line="1270">
                        <declaration name="inputContext" type="InputContext" line="1271"/>
                        <scope line="1272"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1280">
                Shows or hides this component depending on the value of parameter
                  &lt;code&gt;b&lt;/code&gt;.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    b  if <code>true</code>, shows this component;
                      otherwise, hides this component                    
                </param>
                <see>
                    #isVisible                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setVisible" type="void" line="1292">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="1295">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setVisible(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="show" type="void" line="1299">
                <scope line="1300">
                    <scope line="1301">
                        <declaration name="peer" type="ComponentPeer" line="1304"/>
                        <scope line="1305">
                            <scope line="1308"/>
                        </scope>
                        <scope line="1313">
                            <declaration name="e" type="ComponentEvent" line="1314"/>
                        </scope>
                    </scope>
                    <declaration name="parent" type="Container" line="1318"/>
                    <scope line="1319"/>
                </scope>
            </method>
            <javadoc line="1324">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setVisible(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="show" type="void" line="1328">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="1329"/>
                <scope line="1332"/>
            </method>
            <method name="containsFocus" type="boolean" line="1336"/>
            <method name="clearMostRecentFocusOwnerOnHide" type="void" line="1339"/>
            <method name="clearCurrentFocusCycleRootOnHide" type="void" line="1342"/>
            <javadoc line="1344">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setVisible(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="hide" type="void" line="1348">
                <scope line="1350">
                    <scope line="1353">
                        <scope line="1356"/>
                        <declaration name="peer" type="ComponentPeer" line="1359"/>
                        <scope line="1360">
                            <scope line="1363"/>
                        </scope>
                        <scope line="1368">
                            <declaration name="e" type="ComponentEvent" line="1369"/>
                        </scope>
                    </scope>
                    <declaration name="parent" type="Container" line="1373"/>
                    <scope line="1374"/>
                </scope>
            </method>
            <javadoc line="1379">
                Gets the foreground color of this component.                
                <return>
                    this component's foreground color; if this component does
                      not have a foreground color, the foreground color of its parent
                      is returned                    
                </return>
                <see>
                    #setForeground                    
                </see>
                <since>
                    JDK1.0                    
                </since>
                <beaninfobound>
                    : true                    
                </beaninfobound>
            </javadoc>
            <method name="getForeground" type="Color" line="1388">
                <declaration name="foreground" type="Color" line="1389"/>
                <scope line="1390"/>
                <declaration name="parent" type="Container" line="1393"/>
            </method>
            <javadoc line="1396">
                Sets the foreground color of this component.                
                <param>
                    c the color to become this component's
                      foreground color; if this parameter is <code>null</code>
                      then this component will inherit
                      the foreground color of its parent                    
                </param>
                <see>
                    #getForeground                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setForeground" type="void" line="1405">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="oldColor" type="Color" line="1406"/>
                <declaration name="peer" type="ComponentPeer" line="1407"/>
                <scope line="1409">
                    <scope line="1411"/>
                </scope>
            </method>
            <javadoc line="1417">
                Returns whether the foreground color has been explicitly set for this
                  Component. If this method returns &lt;code&gt;false&lt;/code&gt;, this Component is
                  inheriting its foreground color from an ancestor.                
                <return>
                    <code>true</code> if the foreground color has been explicitly
                      set for this Component; <code>false</code> otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isForegroundSet" type="boolean" line="1425"/>
            <javadoc line="1428">
                Gets the background color of this component.                
                <return>
                    this component's background color; if this component does
                      not have a background color,
                      the background color of its parent is returned                    
                </return>
                <see>
                    #setBackground                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getBackground" type="Color" line="1436">
                <declaration name="background" type="Color" line="1437"/>
                <scope line="1438"/>
                <declaration name="parent" type="Container" line="1441"/>
            </method>
            <javadoc line="1444">
                Sets the background color of this component.
                  &lt;p&gt;
                  The background color affects each component differently and the
                  parts of the component that are affected by the background color
                  may differ between operating systems.                
                <param>
                    c the color to become this component's color;
                      if this parameter is <code>null</code>, then this
                      component will inherit the background color of its parent                    
                </param>
                <see>
                    #getBackground                    
                </see>
                <since>
                    JDK1.0                    
                </since>
                <beaninfobound>
                    : true                    
                </beaninfobound>
            </javadoc>
            <method name="setBackground" type="void" line="1457">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="oldColor" type="Color" line="1458"/>
                <declaration name="peer" type="ComponentPeer" line="1459"/>
                <scope line="1461">
                    <scope line="1463"/>
                </scope>
            </method>
            <javadoc line="1469">
                Returns whether the background color has been explicitly set for this
                  Component. If this method returns &lt;code&gt;false&lt;/code&gt;, this Component is
                  inheriting its background color from an ancestor.                
                <return>
                    <code>true</code> if the background color has been explicitly
                      set for this Component; <code>false</code> otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isBackgroundSet" type="boolean" line="1477"/>
            <javadoc line="1480">
                Gets the font of this component.                
                <return>
                    this component's font; if a font has not been set
                      for this component, the font of its parent is returned                    
                </return>
                <see>
                    #setFont                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getFont" type="Font" line="1487"/>
            <method name="getFont_NoClientCode" type="Font" line="1490">
                <declaration name="font" type="Font" line="1491"/>
                <scope line="1492"/>
                <declaration name="parent" type="Container" line="1495"/>
            </method>
            <javadoc line="1498">
                Sets the font of this component.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    f the font to become this component's font;
                      if this parameter is <code>null</code> then this
                      component will inherit the font of its parent                    
                </param>
                <see>
                    #getFont                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.0                    
                </since>
                <beaninfobound>
                    : true                    
                </beaninfobound>
            </javadoc>
            <method name="setFont" type="void" line="1511">
                <params>
                    <param name="f" type="Font"/>
                </params>
                <declaration name="oldFont" type="Font" line="1512"/>
                <scope line="1513">
                    <scope line="1514"/>
                    <declaration name="peer" type="ComponentPeer" line="1518"/>
                    <scope line="1519">
                        <scope line="1521"/>
                    </scope>
                </scope>
                <scope line="1528"/>
            </method>
            <javadoc line="1532">
                Returns whether the font has been explicitly set for this Component. If
                  this method returns &lt;code&gt;false&lt;/code&gt;, this Component is inheriting its
                  font from an ancestor.                
                <return>
                    <code>true</code> if the font has been explicitly set for this
                      Component; <code>false</code> otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFontSet" type="boolean" line="1540"/>
            <javadoc line="1543">
                Gets the locale of this component.                
                <return>
                    this component's locale; if this component does not
                      have a locale, the locale of its parent is returned                    
                </return>
                <see>
                    #setLocale                    
                </see>
                <exception>
                    IllegalComponentStateException if the <code>Component</code>
                      does not have its own locale and has not yet been added to
                      a containment hierarchy such that the locale can be determined
                      from the containing parent                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getLocale" type="Locale" line="1554">
                <declaration name="locale" type="Locale" line="1555"/>
                <scope line="1556"/>
                <declaration name="parent" type="Container" line="1559"/>
                <scope line="1560"/>
                <scope line="1563"/>
            </method>
            <javadoc line="1567">
                Sets the locale of this component.  This is a bound property.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    l the locale to become this component's locale                    
                </param>
                <see>
                    #getLocale                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setLocale" type="void" line="1577">
                <params>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="oldValue" type="Locale" line="1578"/>
            </method>
            <javadoc line="1583">
                Gets the instance of &lt;code&gt;ColorModel&lt;/code&gt; used to display
                  the component on the output device.                
                <return>
                    the color model used by this component                    
                </return>
                <see>
                    java.awt.image.ColorModel                    
                </see>
                <see>
                    java.awt.peer.ComponentPeer#getColorModel()                    
                </see>
                <see>
                    Toolkit#getColorModel()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="1592">
                <declaration name="peer" type="ComponentPeer" line="1593"/>
                <scope line="1594"/>
                <scope line="1597"/>
            </method>
            <javadoc line="1602">
                Gets the location of this component in the form of a
                  point specifying the component&apos;s top-left corner.
                  The location will be relative to the parent&apos;s coordinate space.
                  &lt;p&gt;
                  Due to the asynchronous nature of native event handling, this
                  method can return outdated values (for instance, after several calls
                  of &lt;code&gt;setLocation()&lt;/code&gt; in rapid succession).  For this
                  reason, the recommended method of obtaining a component&apos;s position is
                  within &lt;code&gt;java.awt.event.ComponentListener.componentMoved()&lt;/code&gt;,
                  which is called after the operating system has finished moving the
                  component.
                  &lt;/p&gt;                
                <return>
                    an instance of <code>Point</code> representing
                      the top-left corner of the component's bounds in
                      the coordinate space of the component's parent                    
                </return>
                <see>
                    #setLocation                    
                </see>
                <see>
                    #getLocationOnScreen                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getLocation" type="Point" line="1622"/>
            <javadoc line="1625">
                Gets the location of this component in the form of a point
                  specifying the component&apos;s top-left corner in the screen&apos;s
                  coordinate space.                
                <return>
                    an instance of <code>Point</code> representing
                      the top-left corner of the component's bounds in the
                      coordinate space of the screen                    
                </return>
                <throws>
                    <code>IllegalComponentStateException</code> if the
                      component is not showing on the screen                    
                </throws>
                <see>
                    #setLocation                    
                </see>
                <see>
                    #getLocation                    
                </see>
            </javadoc>
            <method name="getLocationOnScreen" type="Point" line="1637">
                <scope line="1638"/>
            </method>
            <method name="getLocationOnScreen_NoTreeLock" type="Point" line="1642">
                <scope line="1643">
                    <scope line="1644">
                        <declaration name="host" type="Container" line="1645"/>
                        <declaration name="pt" type="Point" line="1646"/>
                        <scope line="1647"/>
                    </scope>
                    <scope line="1653">
                        <declaration name="pt" type="Point" line="1654"/>
                    </scope>
                </scope>
                <scope line="1658"/>
            </method>
            <javadoc line="1662">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getLocation()&lt;/code&gt;.                
            </javadoc>
            <method name="location" type="Point" line="1666"/>
            <method name="location_NoClientCode" type="Point" line="1669"/>
            <javadoc line="1672">
                Moves this component to a new location. The top-left corner of
                  the new location is specified by the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;
                  parameters in the coordinate space of this component&apos;s parent.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    x the <i>x</i>-coordinate of the new location's
                      top-left corner in the parent's coordinate space                    
                </param>
                <param>
                    y the <i>y</i>-coordinate of the new location's
                      top-left corner in the parent's coordinate space                    
                </param>
                <see>
                    #getLocation                    
                </see>
                <see>
                    #setBounds                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setLocation" type="void" line="1688">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="1691">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setLocation(int, int)&lt;/code&gt;.                
            </javadoc>
            <method name="move" type="void" line="1695">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="1696"/>
            </method>
            <javadoc line="1701">
                Moves this component to a new location. The top-left corner of
                  the new location is specified by point &lt;code&gt;p&lt;/code&gt;. Point
                  &lt;code&gt;p&lt;/code&gt; is given in the parent&apos;s coordinate space.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    p the point defining the top-left corner
                      of the new location, given in the coordinate space of this
                      component's parent                    
                </param>
                <see>
                    #getLocation                    
                </see>
                <see>
                    #setBounds                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setLocation" type="void" line="1716">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="1719">
                Returns the size of this component in the form of a
                  &lt;code&gt;Dimension&lt;/code&gt; object. The &lt;code&gt;height&lt;/code&gt;
                  field of the &lt;code&gt;Dimension&lt;/code&gt; object contains
                  this component&apos;s height, and the &lt;code&gt;width&lt;/code&gt;
                  field of the &lt;code&gt;Dimension&lt;/code&gt; object contains
                  this component&apos;s width.                
                <return>
                    a <code>Dimension</code> object that indicates the
                      size of this component                    
                </return>
                <see>
                    #setSize                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getSize" type="Dimension" line="1731"/>
            <javadoc line="1734">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getSize()&lt;/code&gt;.                
            </javadoc>
            <method name="size" type="Dimension" line="1738"/>
            <javadoc line="1741">
                Resizes this component so that it has width &lt;code&gt;width&lt;/code&gt;
                  and height &lt;code&gt;height&lt;/code&gt;.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    width the new width of this component in pixels                    
                </param>
                <param>
                    height the new height of this component in pixels                    
                </param>
                <see>
                    #getSize                    
                </see>
                <see>
                    #setBounds                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setSize" type="void" line="1754">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="1757">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setSize(int, int)&lt;/code&gt;.                
            </javadoc>
            <method name="resize" type="void" line="1761">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="1762"/>
            </method>
            <javadoc line="1767">
                Resizes this component so that it has width &lt;code&gt;d.width&lt;/code&gt;
                  and height &lt;code&gt;d.height&lt;/code&gt;.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    d the dimension specifying the new size
                      of this component                    
                </param>
                <throws>
                    NullPointerException if {@code d} is {@code null}                    
                </throws>
                <see>
                    #setSize                    
                </see>
                <see>
                    #setBounds                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setSize" type="void" line="1781">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="1784">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setSize(Dimension)&lt;/code&gt;.                
            </javadoc>
            <method name="resize" type="void" line="1788">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="1791">
                Gets the bounds of this component in the form of a
                  &lt;code&gt;Rectangle&lt;/code&gt; object. The bounds specify this
                  component&apos;s width, height, and location relative to
                  its parent.                
                <return>
                    a rectangle indicating this component's bounds                    
                </return>
                <see>
                    #setBounds                    
                </see>
                <see>
                    #getLocation                    
                </see>
                <see>
                    #getSize                    
                </see>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="1801"/>
            <javadoc line="1804">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getBounds()&lt;/code&gt;.                
            </javadoc>
            <method name="bounds" type="Rectangle" line="1808"/>
            <javadoc line="1811">
                Moves and resizes this component. The new location of the top-left
                  corner is specified by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and the
                  new size is specified by &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    x the new <i>x</i>-coordinate of this component                    
                </param>
                <param>
                    y the new <i>y</i>-coordinate of this component                    
                </param>
                <param>
                    width the new <code>width</code> of this component                    
                </param>
                <param>
                    height the new <code>height</code> of this
                      component                    
                </param>
                <see>
                    #getBounds                    
                </see>
                <see>
                    #setLocation(int,int)                    
                </see>
                <see>
                    #setLocation(Point)                    
                </see>
                <see>
                    #setSize(int,int)                    
                </see>
                <see>
                    #setSize(Dimension)                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setBounds" type="void" line="1831">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="1834">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setBounds(int, int, int, int)&lt;/code&gt;.                
            </javadoc>
            <method name="reshape" type="void" line="1838">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="1839">
                    <scope line="1840">
                        <declaration name="resized" type="boolean" line="1842"/>
                        <declaration name="moved" type="boolean" line="1843"/>
                        <scope line="1844"/>
                        <declaration name="oldX" type="int" line="1847"/>
                        <declaration name="oldY" type="int" line="1848"/>
                        <declaration name="oldWidth" type="int" line="1849"/>
                        <declaration name="oldHeight" type="int" line="1850"/>
                        <scope line="1855"/>
                        <declaration name="needNotify" type="boolean" line="1858"/>
                        <scope line="1860">
                            <scope line="1861">
                                <scope line="1865"/>
                            </scope>
                            <scope line="1869"/>
                            <scope line="1872"/>
                        </scope>
                        <scope line="1876"/>
                    </scope>
                    <scope line="1881"/>
                </scope>
            </method>
            <method name="repaintParentIfNeeded" type="void" line="1886">
                <params>
                    <param name="oldX" type="int"/>
                    <param name="oldY" type="int"/>
                    <param name="oldWidth" type="int"/>
                    <param name="oldHeight" type="int"/>
                </params>
                <scope line="1887"/>
            </method>
            <method name="reshapeNativePeer" type="void" line="1892">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
                <declaration name="nativeX" type="int" line="1893"/>
                <declaration name="nativeY" type="int" line="1894"/>
                <scope line="1895"/>
            </method>
            <method name="notifyNewBounds" type="void" line="1901">
                <params>
                    <param name="resized" type="boolean"/>
                    <param name="moved" type="boolean"/>
                </params>
                <scope line="1902">
                    <scope line="1903">
                        <declaration name="e" type="ComponentEvent" line="1904"/>
                    </scope>
                    <scope line="1907">
                        <declaration name="e" type="ComponentEvent" line="1908"/>
                    </scope>
                </scope>
                <scope line="1912">
                    <scope line="1913">
                        <declaration name="enabledOnToolkit" type="boolean" line="1914"/>
                        <scope line="1915"/>
                        <scope line="1918"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1924">
                Moves and resizes this component to conform to the new
                  bounding rectangle &lt;code&gt;r&lt;/code&gt;. This component&apos;s new
                  position is specified by &lt;code&gt;r.x&lt;/code&gt; and &lt;code&gt;r.y&lt;/code&gt;,
                  and its new size is specified by &lt;code&gt;r.width&lt;/code&gt; and
                  &lt;code&gt;r.height&lt;/code&gt;
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    r the new bounding rectangle for this component                    
                </param>
                <throws>
                    NullPointerException if {@code r} is {@code null}                    
                </throws>
                <see>
                    #getBounds                    
                </see>
                <see>
                    #setLocation(int,int)                    
                </see>
                <see>
                    #setLocation(Point)                    
                </see>
                <see>
                    #setSize(int,int)                    
                </see>
                <see>
                    #setSize(Dimension)                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setBounds" type="void" line="1943">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="1946">
                Returns the current x coordinate of the components origin.
                  This method is preferable to writing
                  &lt;code&gt;component.getBounds().x&lt;/code&gt;,
                  or &lt;code&gt;component.getLocation().x&lt;/code&gt; because it doesn&apos;t
                  cause any heap allocations.                
                <return>
                    the current x coordinate of the components origin                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getX" type="int" line="1955"/>
            <javadoc line="1958">
                Returns the current y coordinate of the components origin.
                  This method is preferable to writing
                  &lt;code&gt;component.getBounds().y&lt;/code&gt;,
                  or &lt;code&gt;component.getLocation().y&lt;/code&gt; because it
                  doesn&apos;t cause any heap allocations.                
                <return>
                    the current y coordinate of the components origin                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getY" type="int" line="1967"/>
            <javadoc line="1970">
                Returns the current width of this component.
                  This method is preferable to writing
                  &lt;code&gt;component.getBounds().width&lt;/code&gt;,
                  or &lt;code&gt;component.getSize().width&lt;/code&gt; because it
                  doesn&apos;t cause any heap allocations.                
                <return>
                    the current width of this component                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getWidth" type="int" line="1979"/>
            <javadoc line="1982">
                Returns the current height of this component.
                  This method is preferable to writing
                  &lt;code&gt;component.getBounds().height&lt;/code&gt;,
                  or &lt;code&gt;component.getSize().height&lt;/code&gt; because it
                  doesn&apos;t cause any heap allocations.                
                <return>
                    the current height of this component                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getHeight" type="int" line="1991"/>
            <javadoc line="1994">
                Stores the bounds of this component into &quot;return value&quot; &lt;b&gt;rv&lt;/b&gt; and
                  return &lt;b&gt;rv&lt;/b&gt;.  If rv is &lt;code&gt;null&lt;/code&gt; a new
                  &lt;code&gt;Rectangle&lt;/code&gt; is allocated.
                  This version of &lt;code&gt;getBounds&lt;/code&gt; is useful if the caller
                  wants to avoid allocating a new &lt;code&gt;Rectangle&lt;/code&gt; object
                  on the heap.                
                <param>
                    rv the return value, modified to the components bounds                    
                </param>
                <return>
                    rv                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="2004">
                <params>
                    <param name="rv" type="Rectangle"/>
                </params>
                <scope line="2005"/>
                <scope line="2008"/>
            </method>
            <javadoc line="2013">
                Stores the width/height of this component into &quot;return value&quot; &lt;b&gt;rv&lt;/b&gt;
                  and return &lt;b&gt;rv&lt;/b&gt;.   If rv is &lt;code&gt;null&lt;/code&gt; a new
                  &lt;code&gt;Dimension&lt;/code&gt; object is allocated.  This version of
                  &lt;code&gt;getSize&lt;/code&gt; is useful if the caller wants to avoid
                  allocating a new &lt;code&gt;Dimension&lt;/code&gt; object on the heap.                
                <param>
                    rv the return value, modified to the components size                    
                </param>
                <return>
                    rv                    
                </return>
            </javadoc>
            <method name="getSize" type="Dimension" line="2022">
                <params>
                    <param name="rv" type="Dimension"/>
                </params>
                <scope line="2023"/>
                <scope line="2026"/>
            </method>
            <javadoc line="2031">
                Stores the x,y origin of this component into &quot;return value&quot; &lt;b&gt;rv&lt;/b&gt;
                  and return &lt;b&gt;rv&lt;/b&gt;.   If rv is &lt;code&gt;null&lt;/code&gt; a new
                  &lt;code&gt;Point&lt;/code&gt; is allocated.
                  This version of &lt;code&gt;getLocation&lt;/code&gt; is useful if the
                  caller wants to avoid allocating a new &lt;code&gt;Point&lt;/code&gt;
                  object on the heap.                
                <param>
                    rv the return value, modified to the components location                    
                </param>
                <return>
                    rv                    
                </return>
            </javadoc>
            <method name="getLocation" type="Point" line="2041">
                <params>
                    <param name="rv" type="Point"/>
                </params>
                <scope line="2042"/>
                <scope line="2045"/>
            </method>
            <javadoc line="2050">
                Returns true if this component is completely opaque, returns
                  false by default.
                  &lt;p&gt;
                  An opaque component paints every pixel within its
                  rectangular region. A non-opaque component paints only some of
                  its pixels, allowing the pixels underneath it to &quot;show through&quot;.
                  A component that does not fully paint its pixels therefore
                  provides a degree of transparency.
                  &lt;p&gt;
                  Subclasses that guarantee to always completely paint their
                  contents should override this method and return true.                
                <return>
                    true if this component is completely opaque                    
                </return>
                <see>
                    #isLightweight                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isOpaque" type="boolean" line="2066">
                <scope line="2067"/>
                <scope line="2070"/>
            </method>
            <javadoc line="2074">
                A lightweight component doesn&apos;t have a native toolkit peer.
                  Subclasses of &lt;code&gt;Component&lt;/code&gt; and &lt;code&gt;Container&lt;/code&gt;,
                  other than the ones defined in this package like &lt;code&gt;Button&lt;/code&gt;
                  or &lt;code&gt;Scrollbar&lt;/code&gt;, are lightweight.
                  All of the Swing components are lightweights.
                  &lt;p&gt;
                  This method will always return &lt;code&gt;false&lt;/code&gt; if this component
                  is not displayable because it is impossible to determine the
                  weight of an undisplayable component.                
                <return>
                    true if this component has a lightweight peer; false if
                      it has a native peer or no peer                    
                </return>
                <see>
                    #isDisplayable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isLightweight" type="boolean" line="2089"/>
            <javadoc line="2092">
                Sets the preferred size of this component to a constant
                  value.  Subsequent calls to &lt;code&gt;getPreferredSize&lt;/code&gt; will always
                  return this value.  Setting the preferred size to &lt;code&gt;null&lt;/code&gt;
                  restores the default behavior.                
                <param>
                    preferredSize The new preferred size, or null                    
                </param>
                <see>
                    #getPreferredSize                    
                </see>
                <see>
                    #isPreferredSizeSet                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setPreferredSize" type="void" line="2102">
                <params>
                    <param name="preferredSize" type="Dimension"/>
                </params>
                <declaration name="old" type="Dimension" line="2103"/>
                <scope line="2104"/>
                <scope line="2107"/>
            </method>
            <javadoc line="2114">
                Returns true if the preferred size has been set to a
                  non-&lt;code&gt;null&lt;/code&gt; value otherwise returns false.                
                <return>
                    true if <code>setPreferredSize</code> has been invoked
                      with a non-null value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isPreferredSizeSet" type="boolean" line="2121"/>
            <javadoc line="2124">
                Gets the preferred size of this component.                
                <return>
                    a dimension object indicating this component's preferred size                    
                </return>
                <see>
                    #getMinimumSize                    
                </see>
                <see>
                    LayoutManager                    
                </see>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="2130"/>
            <javadoc line="2133">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getPreferredSize()&lt;/code&gt;.                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="2137">
                <declaration name="dim" type="Dimension" line="2138"/>
                <scope line="2139">
                    <scope line="2140"/>
                </scope>
            </method>
            <javadoc line="2147">
                Sets the minimum size of this component to a constant
                  value.  Subsequent calls to &lt;code&gt;getMinimumSize&lt;/code&gt; will always
                  return this value.  Setting the minimum size to &lt;code&gt;null&lt;/code&gt;
                  restores the default behavior.                
                <param>
                    minimumSize the new minimum size of this component                    
                </param>
                <see>
                    #getMinimumSize                    
                </see>
                <see>
                    #isMinimumSizeSet                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setMinimumSize" type="void" line="2157">
                <params>
                    <param name="minimumSize" type="Dimension"/>
                </params>
                <declaration name="old" type="Dimension" line="2158"/>
                <scope line="2159"/>
                <scope line="2162"/>
            </method>
            <javadoc line="2169">
                Returns whether or not &lt;code&gt;setMinimumSize&lt;/code&gt; has been
                  invoked with a non-null value.                
                <return>
                    true if <code>setMinimumSize</code> has been invoked with a
                      non-null value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isMinimumSizeSet" type="boolean" line="2176"/>
            <javadoc line="2179">
                Gets the mininimum size of this component.                
                <return>
                    a dimension object indicating this component's minimum size                    
                </return>
                <see>
                    #getPreferredSize                    
                </see>
                <see>
                    LayoutManager                    
                </see>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="2185"/>
            <javadoc line="2188">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getMinimumSize()&lt;/code&gt;.                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="2192">
                <declaration name="dim" type="Dimension" line="2193"/>
                <scope line="2194">
                    <scope line="2195"/>
                </scope>
            </method>
            <javadoc line="2202">
                Sets the maximum size of this component to a constant
                  value.  Subsequent calls to &lt;code&gt;getMaximumSize&lt;/code&gt; will always
                  return this value.  Setting the maximum size to &lt;code&gt;null&lt;/code&gt;
                  restores the default behavior.                
                <param>
                    maximumSize a <code>Dimension</code> containing the
                      desired maximum allowable size                    
                </param>
                <see>
                    #getMaximumSize                    
                </see>
                <see>
                    #isMaximumSizeSet                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setMaximumSize" type="void" line="2213">
                <params>
                    <param name="maximumSize" type="Dimension"/>
                </params>
                <declaration name="old" type="Dimension" line="2214"/>
                <scope line="2215"/>
                <scope line="2218"/>
            </method>
            <javadoc line="2225">
                Returns true if the maximum size has been set to a non-&lt;code&gt;null&lt;/code&gt;
                  value otherwise returns false.                
                <return>
                    true if <code>maximumSize</code> is non-<code>null</code>,
                      false otherwise                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isMaximumSizeSet" type="boolean" line="2232"/>
            <javadoc line="2235">
                Gets the maximum size of this component.                
                <return>
                    a dimension object indicating this component's maximum size                    
                </return>
                <see>
                    #getMinimumSize                    
                </see>
                <see>
                    #getPreferredSize                    
                </see>
                <see>
                    LayoutManager                    
                </see>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="2242">
                <scope line="2243"/>
            </method>
            <javadoc line="2248">
                Returns the alignment along the x axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.                
            </javadoc>
            <method name="getAlignmentX" type="float" line="2255"/>
            <javadoc line="2258">
                Returns the alignment along the y axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.                
            </javadoc>
            <method name="getAlignmentY" type="float" line="2265"/>
            <javadoc line="2268">
                Returns the baseline.  The baseline is measured from the top of
                  the component.  This method is primarily meant for
                  &lt;code&gt;LayoutManager&lt;/code&gt;s to align components along their
                  baseline.  A return value less than 0 indicates this component
                  does not have a reasonable baseline and that
                  &lt;code&gt;LayoutManager&lt;/code&gt;s should not align this component on
                  its baseline.
                  &lt;p&gt;
                  The default implementation returns -1.  Subclasses that support
                  baseline should override appropriately.  If a value &amp;gt;= 0 is
                  returned, then the component has a valid baseline for any
                  size &amp;gt;= the minimum size and &lt;code&gt;getBaselineResizeBehavior&lt;/code&gt;
                  can be used to determine how the baseline changes with size.                
                <param>
                    width the width to get the baseline for                    
                </param>
                <param>
                    height the height to get the baseline for                    
                </param>
                <return>
                    the baseline or &lt; 0 indicating there is no reasonable
                      baseline                    
                </return>
                <throws>
                    IllegalArgumentException if width or height is &lt; 0                    
                </throws>
                <see>
                    #getBaselineResizeBehavior                    
                </see>
                <see>
                    java.awt.FontMetrics                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="2291">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="2292"/>
            </method>
            <javadoc line="2297">
                Returns an enum indicating how the baseline of the component
                  changes as the size changes.  This method is primarily meant for
                  layout managers and GUI builders.
                  &lt;p&gt;
                  The default implementation returns
                  &lt;code&gt;BaselineResizeBehavior.OTHER&lt;/code&gt;.  Subclasses that have a
                  baseline should override appropriately.  Subclasses should
                  never return &lt;code&gt;null&lt;/code&gt;; if the baseline can not be
                  calculated return &lt;code&gt;BaselineResizeBehavior.OTHER&lt;/code&gt;.  Callers
                  should first ask for the baseline using
                  &lt;code&gt;getBaseline&lt;/code&gt; and if a value &amp;gt;= 0 is returned use
                  this method.  It is acceptable for this method to return a
                  value other than &lt;code&gt;BaselineResizeBehavior.OTHER&lt;/code&gt; even if
                  &lt;code&gt;getBaseline&lt;/code&gt; returns a value less than 0.                
                <return>
                    an enum indicating how the baseline changes as the component
                      size changes                    
                </return>
                <see>
                    #getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="BaselineResizeBehavior" line="2317"/>
            <javadoc line="2320">
                Prompts the layout manager to lay out this component. This is
                  usually called when the component (more specifically, container)
                  is validated.                
                <see>
                    #validate                    
                </see>
                <see>
                    LayoutManager                    
                </see>
            </javadoc>
            <method name="doLayout" type="void" line="2327"/>
            <javadoc line="2330">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;doLayout()&lt;/code&gt;.                
            </javadoc>
            <method name="layout" type="void" line="2334"/>
            <javadoc line="2336">
                Validates this component.
                  &lt;p&gt;
                  The meaning of the term &lt;i&gt;validating&lt;/i&gt; is defined by the ancestors of
                  this class. See {@link Container#validate} for more details.                
                <see>
                    #invalidate                    
                </see>
                <see>
                    #doLayout()                    
                </see>
                <see>
                    LayoutManager                    
                </see>
                <see>
                    Container#validate                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="validate" type="void" line="2347">
                <scope line="2348">
                    <declaration name="peer" type="ComponentPeer" line="2349"/>
                    <declaration name="wasValid" type="boolean" line="2350"/>
                    <scope line="2351">
                        <declaration name="newfont" type="Font" line="2352"/>
                        <declaration name="oldfont" type="Font" line="2353"/>
                        <scope line="2354"/>
                    </scope>
                    <scope line="2361"/>
                </scope>
            </method>
            <javadoc line="2366">
                Invalidates this component and its ancestors.
                  &lt;p&gt;
                  By default, all the ancestors of the component up to the top-most
                  container of the hierarchy are marked invalid. If the {@codejava.awt.smartInvalidate} system property is set to {@code true},
                  invalidation stops on the nearest validate root of this component.
                  Marking a container &lt;i&gt;invalid&lt;/i&gt; indicates that the container needs to
                  be laid out.
                  &lt;p&gt;
                  This method is called automatically when any layout-related information
                  changes (e.g. setting the bounds of the component, or adding the
                  component to a container).
                  &lt;p&gt;
                  This method might be called often, so it should work fast.                
                <see>
                    #validate                    
                </see>
                <see>
                    #doLayout                    
                </see>
                <see>
                    LayoutManager                    
                </see>
                <see>
                    java.awt.Container#isValidateRoot                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="invalidate" type="void" line="2386">
                <scope line="2387">
                    <scope line="2389"/>
                    <scope line="2392"/>
                    <scope line="2395"/>
                </scope>
            </method>
            <javadoc line="2401">
                Invalidates the parent of this component if any.
                  This method MUST BE invoked under the TreeLock.                
            </javadoc>
            <method name="invalidateParent" type="void" line="2405">
                <scope line="2406"/>
            </method>
            <javadoc line="2410">
                Invalidates the component unless it is already invalid.                
            </javadoc>
            <method name="invalidateIfValid" type="void" line="2413">
                <scope line="2414"/>
            </method>
            <javadoc line="2418">
                Revalidates the component hierarchy up to the nearest validate root.
                  &lt;p&gt;
                  This method first invalidates the component hierarchy starting from this
                  component up to the nearest validate root. Afterwards, the component
                  hierarchy is validated starting from the nearest validate root.
                  &lt;p&gt;
                  This is a convenience method supposed to help application developers
                  avoid looking for validate roots manually. Basically, it&apos;s equivalent to
                  first calling the {@link #invalidate()} method on this component, and
                  then calling the {@link #validate()} method on the nearest validate
                  root.                
                <see>
                    Container#isValidateRoot                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="revalidate" type="void" line="2433">
                <scope line="2434">
                    <declaration name="root" type="Container" line="2436"/>
                    <scope line="2437"/>
                    <scope line="2440">
                        <scope line="2441">
                            <scope line="2442"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2451">
                Creates a graphics context for this component. This method will
                  return &lt;code&gt;null&lt;/code&gt; if this component is currently not
                  displayable.                
                <return>
                    a graphics context for this component, or <code>null</code>
                      if it has none                    
                </return>
                <see>
                    #paint                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="2460">
                <scope line="2461">
                    <declaration name="g" type="Graphics" line="2463"/>
                    <scope line="2465"/>
                    <scope line="2468"/>
                </scope>
                <scope line="2475">
                    <declaration name="peer" type="ComponentPeer" line="2476"/>
                </scope>
            </method>
            <method name="getGraphics_NoClientCode" type="Graphics" line="2480">
                <declaration name="peer" type="ComponentPeer" line="2481"/>
                <scope line="2482">
                    <declaration name="parent" type="Container" line="2483"/>
                    <declaration name="g" type="Graphics" line="2485"/>
                    <scope line="2487"/>
                    <scope line="2490"/>
                </scope>
                <scope line="2497"/>
            </method>
            <javadoc line="2501">
                Gets the font metrics for the specified font.
                  Warning: Since Font metrics are affected by the{@link java.awt.font.FontRenderContext FontRenderContext} and
                  this method does not provide one, it can return only metrics for
                  the default render context which may not match that used when
                  rendering on the Component if {@link Graphics2D} functionality is being
                  used. Instead metrics can be obtained at rendering time by calling{@link Graphics#getFontMetrics()} or text measurement APIs on the{@link Font Font} class.                
                <param>
                    font the font for which font metrics is to be
                      obtained                    
                </param>
                <return>
                    the font metrics for <code>font</code>                    
                </return>
                <see>
                    #getFont                    
                </see>
                <see>
                    #getPeer                    
                </see>
                <see>
                    java.awt.peer.ComponentPeer#getFontMetrics(Font)                    
                </see>
                <see>
                    Toolkit#getFontMetrics(Font)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="2517">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="fm" type="FontManager" line="2518"/>
                <scope line="2519">
                    <scope line="2520"/>
                </scope>
            </method>
            <javadoc line="2526">
                Sets the cursor image to the specified cursor.  This cursor
                  image is displayed when the &lt;code&gt;contains&lt;/code&gt; method for
                  this component returns true for the current cursor location, and
                  this Component is visible, displayable, and enabled. Setting the
                  cursor of a &lt;code&gt;Container&lt;/code&gt; causes that cursor to be displayed
                  within all of the container&apos;s subcomponents, except for those
                  that have a non-&lt;code&gt;null&lt;/code&gt; cursor.
                  &lt;p&gt;
                  The method may have no visual effect if the Java platform
                  implementation and/or the native system do not support
                  changing the mouse cursor shape.                
                <param>
                    cursor One of the constants defined
                      by the <code>Cursor</code> class;
                      if this parameter is <code>null</code>
                      then this component will inherit
                      the cursor of its parent                    
                </param>
                <see>
                    #isEnabled                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <see>
                    #getCursor                    
                </see>
                <see>
                    #contains                    
                </see>
                <see>
                    Toolkit#createCustomCursor                    
                </see>
                <see>
                    Cursor                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setCursor" type="void" line="2551">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
            </method>
            <javadoc line="2555">
                Updates the cursor.  May not be invoked from the native
                  message pump.                
            </javadoc>
            <method name="updateCursorImmediately" type="void" line="2559">
                <scope line="2560">
                    <declaration name="nativeContainer" type="Container" line="2561"/>
                    <declaration name="cPeer" type="ComponentPeer" line="2563"/>
                    <scope line="2564"/>
                </scope>
                <scope line="2568"/>
            </method>
            <javadoc line="2572">
                Gets the cursor set in the component. If the component does
                  not have a cursor set, the cursor of its parent is returned.
                  If no cursor is set in the entire hierarchy,
                  &lt;code&gt;Cursor.DEFAULT_CURSOR&lt;/code&gt; is returned.                
                <see>
                    #setCursor                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getCursor" type="Cursor" line="2580"/>
            <method name="getCursor_NoClientCode" type="Cursor" line="2583">
                <declaration name="cursor" type="Cursor" line="2584"/>
                <scope line="2585"/>
                <declaration name="parent" type="Container" line="2588"/>
                <scope line="2589"/>
                <scope line="2592"/>
            </method>
            <javadoc line="2596">
                Returns whether the cursor has been explicitly set for this Component.
                  If this method returns &lt;code&gt;false&lt;/code&gt;, this Component is inheriting
                  its cursor from an ancestor.                
                <return>
                    <code>true</code> if the cursor has been explicitly set for this
                      Component; <code>false</code> otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isCursorSet" type="boolean" line="2604"/>
            <javadoc line="2607">
                Paints this component.
                  &lt;p&gt;
                  This method is called when the contents of the component should
                  be painted; such as when the component is first being shown or
                  is damaged and in need of repair.  The clip rectangle in the
                  &lt;code&gt;Graphics&lt;/code&gt; parameter is set to the area
                  which needs to be painted.
                  Subclasses of &lt;code&gt;Component&lt;/code&gt; that override this
                  method need not call &lt;code&gt;super.paint(g)&lt;/code&gt;.
                  &lt;p&gt;
                  For performance reasons, &lt;code&gt;Component&lt;/code&gt;s with zero width
                  or height aren&apos;t considered to need painting when they are first shown,
                  and also aren&apos;t considered to need repair.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: For more information on the paint mechanisms utilitized
                  by AWT and Swing, including information on how to write the most
                  efficient painting code, see
                  &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/painting/index.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;.                
                <param>
                    g the graphics context to use for painting                    
                </param>
                <see>
                    #update                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="paint" type="void" line="2630">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="2632">
                Updates this component.
                  &lt;p&gt;
                  If this component is not a lightweight component, the
                  AWT calls the &lt;code&gt;update&lt;/code&gt; method in response to
                  a call to &lt;code&gt;repaint&lt;/code&gt;.  You can assume that
                  the background is not cleared.
                  &lt;p&gt;
                  The &lt;code&gt;update&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;
                  calls this component&apos;s &lt;code&gt;paint&lt;/code&gt; method to redraw
                  this component.  This method is commonly overridden by subclasses
                  which need to do additional work in response to a call to
                  &lt;code&gt;repaint&lt;/code&gt;.
                  Subclasses of Component that override this method should either
                  call &lt;code&gt;super.update(g)&lt;/code&gt;, or call &lt;code&gt;paint(g)&lt;/code&gt;
                  directly from their &lt;code&gt;update&lt;/code&gt; method.
                  &lt;p&gt;
                  The origin of the graphics context, its
                  (&lt;code&gt;0&lt;/code&gt;,&amp;nbsp;&lt;code&gt;0&lt;/code&gt;) coordinate point, is the
                  top-left corner of this component. The clipping region of the
                  graphics context is the bounding rectangle of this component.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: For more information on the paint mechanisms utilitized
                  by AWT and Swing, including information on how to write the most
                  efficient painting code, see
                  &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/painting/index.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;.                
                <param>
                    g the specified context to use for updating                    
                </param>
                <see>
                    #paint                    
                </see>
                <see>
                    #repaint()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="update" type="void" line="2663">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="2666">
                Paints this component and all of its subcomponents.
                  &lt;p&gt;
                  The origin of the graphics context, its
                  (&lt;code&gt;0&lt;/code&gt;,&amp;nbsp;&lt;code&gt;0&lt;/code&gt;) coordinate point, is the
                  top-left corner of this component. The clipping region of the
                  graphics context is the bounding rectangle of this component.                
                <param>
                    g   the graphics context to use for painting                    
                </param>
                <see>
                    #paint                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="paintAll" type="void" line="2677">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="2678"/>
            </method>
            <javadoc line="2682">
                Simulates the peer callbacks into java.awt for painting of
                  lightweight Components.                
                <param>
                    g   the graphics context to use for painting                    
                </param>
                <see>
                    #paintAll                    
                </see>
            </javadoc>
            <method name="lightweightPaint" type="void" line="2688">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="2691">
                Paints all the heavyweight subcomponents.                
            </javadoc>
            <method name="paintHeavyweightComponents" type="void" line="2694">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="2696">
                Repaints this component.
                  &lt;p&gt;
                  If this component is a lightweight component, this method
                  causes a call to this component&apos;s &lt;code&gt;paint&lt;/code&gt;
                  method as soon as possible.  Otherwise, this method causes
                  a call to this component&apos;s &lt;code&gt;update&lt;/code&gt; method as soon
                  as possible.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: For more information on the paint mechanisms utilitized
                  by AWT and Swing, including information on how to write the most
                  efficient painting code, see
                  &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/painting/index.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;.                
                <see>
                    #update(Graphics)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="2712"/>
            <javadoc line="2715">
                Repaints the component.  If this component is a lightweight
                  component, this results in a call to &lt;code&gt;paint&lt;/code&gt;
                  within &lt;code&gt;tm&lt;/code&gt; milliseconds.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: For more information on the paint mechanisms utilitized
                  by AWT and Swing, including information on how to write the most
                  efficient painting code, see
                  &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/painting/index.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;.                
                <param>
                    tm maximum time in milliseconds before update                    
                </param>
                <see>
                    #paint                    
                </see>
                <see>
                    #update(Graphics)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="2729">
                <params>
                    <param name="tm" type="long"/>
                </params>
            </method>
            <javadoc line="2732">
                Repaints the specified rectangle of this component.
                  &lt;p&gt;
                  If this component is a lightweight component, this method
                  causes a call to this component&apos;s &lt;code&gt;paint&lt;/code&gt; method
                  as soon as possible.  Otherwise, this method causes a call to
                  this component&apos;s &lt;code&gt;update&lt;/code&gt; method as soon as possible.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: For more information on the paint mechanisms utilitized
                  by AWT and Swing, including information on how to write the most
                  efficient painting code, see
                  &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/painting/index.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;.                
                <param>
                    x   the <i>x</i> coordinate                    
                </param>
                <param>
                    y   the <i>y</i> coordinate                    
                </param>
                <param>
                    width   the width                    
                </param>
                <param>
                    height  the height                    
                </param>
                <see>
                    #update(Graphics)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="2751">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="2754">
                Repaints the specified rectangle of this component within
                  &lt;code&gt;tm&lt;/code&gt; milliseconds.
                  &lt;p&gt;
                  If this component is a lightweight component, this method causes
                  a call to this component&apos;s &lt;code&gt;paint&lt;/code&gt; method.
                  Otherwise, this method causes a call to this component&apos;s
                  &lt;code&gt;update&lt;/code&gt; method.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: For more information on the paint mechanisms utilitized
                  by AWT and Swing, including information on how to write the most
                  efficient painting code, see
                  &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/painting/index.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;.                
                <param>
                    tm   maximum time in milliseconds before update                    
                </param>
                <param>
                    x    the <i>x</i> coordinate                    
                </param>
                <param>
                    y    the <i>y</i> coordinate                    
                </param>
                <param>
                    width    the width                    
                </param>
                <param>
                    height   the height                    
                </param>
                <see>
                    #update(Graphics)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="2775">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="2776">
                    <scope line="2777">
                        <scope line="2778"/>
                        <scope line="2782"/>
                        <declaration name="pwidth" type="int" line="2786"/>
                        <declaration name="pheight" type="int" line="2787"/>
                        <scope line="2788"/>
                        <declaration name="px" type="int" line="2791"/>
                        <declaration name="py" type="int" line="2792"/>
                    </scope>
                </scope>
                <scope line="2796">
                    <scope line="2797">
                        <declaration name="e" type="PaintEvent" line="2798"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2803">
                Prints this component. Applications should override this method
                  for components that must do special processing before being
                  printed or should be printed differently than they are painted.
                  &lt;p&gt;
                  The default implementation of this method calls the
                  &lt;code&gt;paint&lt;/code&gt; method.
                  &lt;p&gt;
                  The origin of the graphics context, its
                  (&lt;code&gt;0&lt;/code&gt;,&amp;nbsp;&lt;code&gt;0&lt;/code&gt;) coordinate point, is the
                  top-left corner of this component. The clipping region of the
                  graphics context is the bounding rectangle of this component.                
                <param>
                    g   the graphics context to use for printing                    
                </param>
                <see>
                    #paint(Graphics)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="print" type="void" line="2819">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="2822">
                Prints this component and all of its subcomponents.
                  &lt;p&gt;
                  The origin of the graphics context, its
                  (&lt;code&gt;0&lt;/code&gt;,&amp;nbsp;&lt;code&gt;0&lt;/code&gt;) coordinate point, is the
                  top-left corner of this component. The clipping region of the
                  graphics context is the bounding rectangle of this component.                
                <param>
                    g   the graphics context to use for printing                    
                </param>
                <see>
                    #print(Graphics)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="printAll" type="void" line="2833">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="2834"/>
            </method>
            <javadoc line="2838">
                Simulates the peer callbacks into java.awt for printing of
                  lightweight Components.                
                <param>
                    g   the graphics context to use for printing                    
                </param>
                <see>
                    #printAll                    
                </see>
            </javadoc>
            <method name="lightweightPrint" type="void" line="2844">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="2847">
                Prints all the heavyweight subcomponents.                
            </javadoc>
            <method name="printHeavyweightComponents" type="void" line="2850">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="getInsets_NoClientCode" type="Insets" line="2852">
                <declaration name="peer" type="ComponentPeer" line="2853"/>
                <scope line="2854"/>
            </method>
            <javadoc line="2859">
                Repaints the component when the image has changed.
                  This &lt;code&gt;imageUpdate&lt;/code&gt; method of an &lt;code&gt;ImageObserver&lt;/code&gt;
                  is called when more information about an
                  image which had been previously requested using an asynchronous
                  routine such as the &lt;code&gt;drawImage&lt;/code&gt; method of
                  &lt;code&gt;Graphics&lt;/code&gt; becomes available.
                  See the definition of &lt;code&gt;imageUpdate&lt;/code&gt; for
                  more information on this method and its arguments.
                  &lt;p&gt;
                  The &lt;code&gt;imageUpdate&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;
                  incrementally draws an image on the component as more of the bits
                  of the image are available.
                  &lt;p&gt;
                  If the system property &lt;code&gt;awt.image.incrementaldraw&lt;/code&gt;
                  is missing or has the value &lt;code&gt;true&lt;/code&gt;, the image is
                  incrementally drawn. If the system property has any other value,
                  then the image is not drawn until it has been completely loaded.
                  &lt;p&gt;
                  Also, if incremental drawing is in effect, the value of the
                  system property &lt;code&gt;awt.image.redrawrate&lt;/code&gt; is interpreted
                  as an integer to give the maximum redraw rate, in milliseconds. If
                  the system property is missing or cannot be interpreted as an
                  integer, the redraw rate is once every 100ms.
                  &lt;p&gt;
                  The interpretation of the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;,
                  &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; arguments depends on
                  the value of the &lt;code&gt;infoflags&lt;/code&gt; argument.                
                <param>
                    img   the image being observed                    
                </param>
                <param>
                    infoflags   see <code>imageUpdate</code> for more information                    
                </param>
                <param>
                    x   the <i>x</i> coordinate                    
                </param>
                <param>
                    y   the <i>y</i> coordinate                    
                </param>
                <param>
                    w   the width                    
                </param>
                <param>
                    h   the height                    
                </param>
                <return>
                    <code>false</code> if the infoflags indicate that the
                      image is completely loaded; <code>true</code> otherwise.                    
                </return>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    Graphics#drawImage(Image,int,int,Color,java.awt.image.ImageObserver)                    
                </see>
                <see>
                    Graphics#drawImage(Image,int,int,java.awt.image.ImageObserver)                    
                </see>
                <see>
                    Graphics#drawImage(Image,int,int,int,int,Color,java.awt.image.ImageObserver)                    
                </see>
                <see>
                    Graphics#drawImage(Image,int,int,int,int,java.awt.image.ImageObserver)                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="imageUpdate" type="boolean" line="2903">
                <params>
                    <param name="img" type="Image"/>
                    <param name="infoflags" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="rate" type="int" line="2904"/>
                <scope line="2905"/>
                <scope line="2908">
                    <scope line="2909">
                        <scope line="2911"/>
                    </scope>
                </scope>
                <scope line="2916"/>
            </method>
            <javadoc line="2921">
                Creates an image from the specified image producer.                
                <param>
                    producer  the image producer                    
                </param>
                <return>
                    the image produced                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="createImage" type="Image" line="2927">
                <params>
                    <param name="producer" type="ImageProducer"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="2928"/>
                <scope line="2929"/>
            </method>
            <javadoc line="2934">
                Creates an off-screen drawable image
                  to be used for double buffering.                
                <param>
                    width the specified width                    
                </param>
                <param>
                    height the specified height                    
                </param>
                <return>
                    an off-screen drawable image, which can be used for double
                      buffering.  The return value may be <code>null</code> if the
                      component is not displayable.  This will always happen if
                      <code>GraphicsEnvironment.isHeadless()</code> returns
                      <code>true</code>.                    
                </return>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="createImage" type="Image" line="2948">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="2949"/>
                <scope line="2950">
                    <scope line="2951"/>
                    <scope line="2954"/>
                </scope>
                <scope line="2958"/>
            </method>
            <javadoc line="2962">
                Creates a volatile off-screen drawable image
                  to be used for double buffering.                
                <param>
                    width the specified width.                    
                </param>
                <param>
                    height the specified height.                    
                </param>
                <return>
                    an off-screen drawable image, which can be used for double
                      buffering.  The return value may be <code>null</code> if the
                      component is not displayable.  This will always happen if
                      <code>GraphicsEnvironment.isHeadless()</code> returns
                      <code>true</code>.                    
                </return>
                <see>
                    java.awt.image.VolatileImage                    
                </see>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createVolatileImage" type="VolatileImage" line="2977">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="2978"/>
                <scope line="2979">
                    <scope line="2980"/>
                    <scope line="2983"/>
                </scope>
                <scope line="2987"/>
            </method>
            <javadoc line="2991">
                Creates a volatile off-screen drawable image, with the given capabilities.
                  The contents of this image may be lost at any time due
                  to operating system issues, so the image must be managed
                  via the &lt;code&gt;VolatileImage&lt;/code&gt; interface.                
                <param>
                    width the specified width.                    
                </param>
                <param>
                    height the specified height.                    
                </param>
                <param>
                    caps the image capabilities                    
                </param>
                <exception>
                    AWTException if an image with the specified capabilities cannot
                      be created                    
                </exception>
                <return>
                    a VolatileImage object, which can be used
                      to manage surface contents loss and capabilities.                    
                </return>
                <see>
                    java.awt.image.VolatileImage                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createVolatileImage" type="VolatileImage" line="3006">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="caps" type="ImageCapabilities"/>
                </params>
            </method>
            <javadoc line="3009">
                Prepares an image for rendering on this component.  The image
                  data is downloaded asynchronously in another thread and the
                  appropriate screen representation of the image is generated.                
                <param>
                    image   the <code>Image</code> for which to
                      prepare a screen representation                    
                </param>
                <param>
                    observer   the <code>ImageObserver</code> object
                      to be notified as the image is being prepared                    
                </param>
                <return>
                    <code>true</code> if the image has already been fully
                      prepared; <code>false</code> otherwise                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="prepareImage" type="boolean" line="3021">
                <params>
                    <param name="image" type="Image"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="3024">
                Prepares an image for rendering on this component at the
                  specified width and height.
                  &lt;p&gt;
                  The image data is downloaded asynchronously in another thread,
                  and an appropriately scaled screen representation of the image is
                  generated.                
                <param>
                    image    the instance of <code>Image</code>
                      for which to prepare a screen representation                    
                </param>
                <param>
                    width    the width of the desired screen representation                    
                </param>
                <param>
                    height   the height of the desired screen representation                    
                </param>
                <param>
                    observer   the <code>ImageObserver</code> object
                      to be notified as the image is being prepared                    
                </param>
                <return>
                    <code>true</code> if the image has already been fully
                      prepared; <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="prepareImage" type="boolean" line="3042">
                <params>
                    <param name="image" type="Image"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="3043"/>
                <scope line="3044"/>
                <scope line="3047"/>
            </method>
            <javadoc line="3051">
                Returns the status of the construction of a screen representation
                  of the specified image.
                  &lt;p&gt;
                  This method does not cause the image to begin loading. An
                  application must use the &lt;code&gt;prepareImage&lt;/code&gt; method
                  to force the loading of an image.
                  &lt;p&gt;
                  Information on the flags returned by this method can be found
                  with the discussion of the &lt;code&gt;ImageObserver&lt;/code&gt; interface.                
                <param>
                    image   the <code>Image</code> object whose status
                      is being checked                    
                </param>
                <param>
                    observer   the <code>ImageObserver</code>
                      object to be notified as the image is being prepared                    
                </param>
                <return>
                    the bitwise inclusive <b>OR</b> of
                      <code>ImageObserver</code> flags indicating what
                      information about the image is currently available                    
                </return>
                <see>
                    #prepareImage(Image,int,int,java.awt.image.ImageObserver)                    
                </see>
                <see>
                    Toolkit#checkImage(Image,int,int,java.awt.image.ImageObserver)                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="checkImage" type="int" line="3073">
                <params>
                    <param name="image" type="Image"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="3076">
                Returns the status of the construction of a screen representation
                  of the specified image.
                  &lt;p&gt;
                  This method does not cause the image to begin loading. An
                  application must use the &lt;code&gt;prepareImage&lt;/code&gt; method
                  to force the loading of an image.
                  &lt;p&gt;
                  The &lt;code&gt;checkImage&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;
                  calls its peer&apos;s &lt;code&gt;checkImage&lt;/code&gt; method to calculate
                  the flags. If this component does not yet have a peer, the
                  component&apos;s toolkit&apos;s &lt;code&gt;checkImage&lt;/code&gt; method is called
                  instead.
                  &lt;p&gt;
                  Information on the flags returned by this method can be found
                  with the discussion of the &lt;code&gt;ImageObserver&lt;/code&gt; interface.                
                <param>
                    image   the <code>Image</code> object whose status
                      is being checked                    
                </param>
                <param>
                    width   the width of the scaled version
                      whose status is to be checked                    
                </param>
                <param>
                    height  the height of the scaled version
                      whose status is to be checked                    
                </param>
                <param>
                    observer   the <code>ImageObserver</code> object
                      to be notified as the image is being prepared                    
                </param>
                <return>
                    the bitwise inclusive <b>OR</b> of
                      <code>ImageObserver</code> flags indicating what
                      information about the image is currently available                    
                </return>
                <see>
                    #prepareImage(Image,int,int,java.awt.image.ImageObserver)                    
                </see>
                <see>
                    Toolkit#checkImage(Image,int,int,java.awt.image.ImageObserver)                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="checkImage" type="int" line="3108">
                <params>
                    <param name="image" type="Image"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="3109"/>
                <scope line="3110"/>
                <scope line="3113"/>
            </method>
            <javadoc line="3117">
                Creates a new strategy for multi-buffering on this component.
                  Multi-buffering is useful for rendering performance.  This method
                  attempts to create the best strategy available with the number of
                  buffers supplied.  It will always create a &lt;code&gt;BufferStrategy&lt;/code&gt;
                  with that number of buffers.
                  A page-flipping strategy is attempted first, then a blitting strategy
                  using accelerated buffers.  Finally, an unaccelerated blitting
                  strategy is used.
                  &lt;p&gt;
                  Each time this method is called,
                  the existing buffer strategy for this component is discarded.                
                <param>
                    numBuffers number of buffers to create, including the front buffer                    
                </param>
                <exception>
                    IllegalArgumentException if numBuffers is less than 1.                    
                </exception>
                <exception>
                    IllegalStateException if the component is not displayable                    
                </exception>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    Window#getBufferStrategy()                    
                </see>
                <see>
                    Canvas#getBufferStrategy()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createBufferStrategy" type="void" line="3137">
                <params>
                    <param name="numBuffers" type="int"/>
                </params>
                <declaration name="bufferCaps" type="BufferCapabilities" line="3138"/>
                <scope line="3139">
                    <scope line="3141"/>
                    <scope line="3145"/>
                </scope>
                <scope line="3149"/>
                <scope line="3153"/>
                <scope line="3156"/>
                <scope line="3160"/>
            </method>
            <javadoc line="3164">
                Creates a new strategy for multi-buffering on this component with the
                  required buffer capabilities.  This is useful, for example, if only
                  accelerated memory or page flipping is desired (as specified by the
                  buffer capabilities).
                  &lt;p&gt;
                  Each time this method
                  is called, &lt;code&gt;dispose&lt;/code&gt; will be invoked on the existing
                  &lt;code&gt;BufferStrategy&lt;/code&gt;.                
                <param>
                    numBuffers number of buffers to create                    
                </param>
                <param>
                    caps the required capabilities for creating the buffer strategy;
                      cannot be <code>null</code>                    
                </param>
                <exception>
                    AWTException if the capabilities supplied could not be
                      supported or met; this may happen, for example, if there is not enough
                      accelerated memory currently available, or if page flipping is specified
                      but not possible.                    
                </exception>
                <exception>
                    IllegalArgumentException if numBuffers is less than 1, or if
                      caps is <code>null</code>                    
                </exception>
                <see>
                    Window#getBufferStrategy()                    
                </see>
                <see>
                    Canvas#getBufferStrategy()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createBufferStrategy" type="void" line="3186">
                <params>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <scope line="3187"/>
                <scope line="3190"/>
                <scope line="3193"/>
                <scope line="3196"/>
                <scope line="3199">
                    <declaration name="sge" type="SunGraphicsEnvironment" line="3200"/>
                    <scope line="3201"/>
                    <scope line="3204"/>
                    <scope line="3207"/>
                </scope>
            </method>
            <class name="ProxyCapabilities" line="3212">
                <extends class="ExtendedBufferCapabilities"/>
                <javadoc line="3212">
                    This is a proxy capabilities class used when a FlipBufferStrategy
                      is created instead of the requested Blit strategy.                    
                    <see>
                        sun.awt.SunGraphicsEnvironment#isFlipStrategyPreferred(ComponentPeer)                        
                    </see>
                </javadoc>
                <declaration name="orig" type="BufferCapabilities" line="3218"/>
                <method name="ProxyCapabilities" type="constructor" line="3219">
                    <params>
                        <param name="orig" type="BufferCapabilities"/>
                    </params>
                </method>
            </class>
            <javadoc line="3224">
                @return the buffer strategy used by this component                
                <see>
                    Window#createBufferStrategy                    
                </see>
                <see>
                    Canvas#createBufferStrategy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBufferStrategy" type="BufferStrategy" line="3230"/>
            <javadoc line="3233">
                @return the back buffer currently used by this component&apos;s
                  BufferStrategy.  If there is no BufferStrategy or no
                  back buffer, this method returns null.                
            </javadoc>
            <method name="getBackBuffer" type="Image" line="3238">
                <scope line="3239">
                    <scope line="3240">
                        <declaration name="bltBS" type="BltBufferStrategy" line="3241"/>
                    </scope>
                    <scope line="3244">
                        <declaration name="flipBS" type="FlipBufferStrategy" line="3245"/>
                    </scope>
                </scope>
            </method>
            <class name="FlipBufferStrategy" line="3251">
                <extends class="BufferStrategy"/>
                <javadoc line="3251">
                    Inner class for flipping buffers on a component.  That component must
                      be a &lt;code&gt;Canvas&lt;/code&gt; or &lt;code&gt;Window&lt;/code&gt;.                    
                    <see>
                        Canvas                        
                    </see>
                    <see>
                        Window                        
                    </see>
                    <see>
                        java.awt.image.BufferStrategy                        
                    </see>
                    <author>
                        Michael Martak                        
                    </author>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="numBuffers" type="int" line="3261"/>
                <javadoc line="3261">
                    The number of buffers                    
                </javadoc>
                <declaration name="caps" type="BufferCapabilities" line="3265"/>
                <javadoc line="3265">
                    The buffering capabilities                    
                </javadoc>
                <declaration name="drawBuffer" type="Image" line="3269"/>
                <javadoc line="3269">
                    The drawing buffer                    
                </javadoc>
                <declaration name="drawVBuffer" type="VolatileImage" line="3273"/>
                <javadoc line="3273">
                    The drawing buffer as a volatile image                    
                </javadoc>
                <declaration name="validatedContents" type="boolean" line="3277"/>
                <javadoc line="3277">
                    Whether or not the drawing buffer has been recently restored from
                      a lost state.                    
                </javadoc>
                <declaration name="width" type="int" line="3282"/>
                <javadoc line="3282">
                    Size of the back buffers.  (Note: these fields were added in 6.0
                      but kept package-private to avoid exposing them in the spec.
                      None of these fields/methods really should have been marked
                      protected when they were introduced in 1.4, but now we just have
                      to live with that decision.)                    
                </javadoc>
                <declaration name="height" type="int" line="3290"/>
                <javadoc line="3291">
                    Creates a new flipping buffer strategy for this component.
                      The component must be a &lt;code&gt;Canvas&lt;/code&gt; or &lt;code&gt;Window&lt;/code&gt;.                    
                    <see>
                        Canvas                        
                    </see>
                    <see>
                        Window                        
                    </see>
                    <param>
                        numBuffers the number of buffers                        
                    </param>
                    <param>
                        caps the capabilities of the buffers                        
                    </param>
                    <exception>
                        AWTException if the capabilities supplied could not be
                          supported or met                        
                    </exception>
                    <exception>
                        ClassCastException if the component is not a canvas or
                          window.                        
                    </exception>
                    <exception>
                        IllegalStateException if the component has no peer                        
                    </exception>
                    <exception>
                        IllegalArgumentException if {@code numBuffers} is less than two,
                          or if {@code BufferCapabilities.isPageFlipping} is not{@code true}.                        
                    </exception>
                    <see>
                        #createBuffers(int,BufferCapabilities)                        
                    </see>
                </javadoc>
                <method name="FlipBufferStrategy" type="constructor" line="3307">
                    <params>
                        <param name="numBuffers" type="int"/>
                        <param name="caps" type="BufferCapabilities"/>
                    </params>
                    <scope line="3308"/>
                </method>
                <javadoc line="3315">
                    Creates one or more complex, flipping buffers with the given
                      capabilities.                    
                    <param>
                        numBuffers number of buffers to create; must be greater than
                          one                        
                    </param>
                    <param>
                        caps the capabilities of the buffers.
                          <code>BufferCapabilities.isPageFlipping</code> must be
                          <code>true</code>.                        
                    </param>
                    <exception>
                        AWTException if the capabilities supplied could not be
                          supported or met                        
                    </exception>
                    <exception>
                        IllegalStateException if the component has no peer                        
                    </exception>
                    <exception>
                        IllegalArgumentException if numBuffers is less than two,
                          or if <code>BufferCapabilities.isPageFlipping</code> is not
                          <code>true</code>.                        
                    </exception>
                    <see>
                        java.awt.BufferCapabilities#isPageFlipping()                        
                    </see>
                </javadoc>
                <method name="createBuffers" type="void" line="3331">
                    <params>
                        <param name="numBuffers" type="int"/>
                        <param name="caps" type="BufferCapabilities"/>
                    </params>
                    <scope line="3332"/>
                    <scope line="3335"/>
                    <scope line="3338"/>
                    <scope line="3343"/>
                    <scope line="3348">
                        <declaration name="ebc" type="ExtendedBufferCapabilities" line="3349"/>
                        <scope line="3350">
                            <scope line="3351"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="3359">
                    Updates internal buffers (both volatile and non-volatile)
                      by requesting the back-buffer from the peer.                    
                </javadoc>
                <method name="updateInternalBuffers" type="void" line="3363">
                    <scope line="3365"/>
                    <scope line="3368"/>
                </method>
                <javadoc line="3372">
                    @return direct access to the back buffer, as an image.                    
                    <exception>
                        IllegalStateException if the buffers have not yet
                          been created                        
                    </exception>
                </javadoc>
                <method name="getBackBuffer" type="Image" line="3377">
                    <scope line="3378"/>
                    <scope line="3381"/>
                </method>
                <javadoc line="3385">
                    Flipping moves the contents of the back buffer to the front buffer,
                      either by copying or by moving the video pointer.                    
                    <param>
                        flipAction an integer value describing the flipping action
                          for the contents of the back buffer.  This should be one of the
                          values of the <code>BufferCapabilities.FlipContents</code>
                          property.                        
                    </param>
                    <exception>
                        IllegalStateException if the buffers have not yet
                          been created                        
                    </exception>
                    <see>
                        java.awt.BufferCapabilities#getFlipContents()                        
                    </see>
                </javadoc>
                <method name="flip" type="void" line="3396">
                    <params>
                        <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                    </params>
                    <scope line="3397">
                        <declaration name="backBuffer" type="Image" line="3398"/>
                        <scope line="3399"/>
                    </scope>
                    <scope line="3403"/>
                </method>
                <method name="flipSubRegion" type="void" line="3407">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                        <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                    </params>
                    <scope line="3408"/>
                    <scope line="3411"/>
                </method>
                <javadoc line="3415">
                    Destroys the buffers created through this object                    
                </javadoc>
                <method name="destroyBuffers" type="void" line="3418">
                    <scope line="3420"/>
                    <scope line="3423"/>
                </method>
                <javadoc line="3427">
                    @return the buffering capabilities of this strategy                    
                </javadoc>
                <method name="getCapabilities" type="BufferCapabilities" line="3430">
                    <scope line="3431"/>
                    <scope line="3434"/>
                </method>
                <javadoc line="3438">
                    @return the graphics on the drawing buffer.  This method may not
                      be synchronized for performance reasons; use of this method by multiple
                      threads should be handled at the application level.  Disposal of the
                      graphics object must be handled by the application.                    
                </javadoc>
                <method name="getDrawGraphics" type="Graphics" line="3444"/>
                <javadoc line="3448">
                    Restore the drawing buffer if it has been lost                    
                </javadoc>
                <method name="revalidate" type="void" line="3451"/>
                <method name="revalidate" type="void" line="3454">
                    <params>
                        <param name="checkSize" type="boolean"/>
                    </params>
                    <scope line="3456">
                        <scope line="3457"/>
                        <scope line="3460"/>
                    </scope>
                    <scope line="3465">
                        <declaration name="gc" type="GraphicsConfiguration" line="3466"/>
                        <declaration name="returnCode" type="int" line="3467"/>
                        <scope line="3468">
                            <scope line="3469"/>
                            <scope line="3472"/>
                            <scope line="3474"/>
                        </scope>
                        <scope line="3479"/>
                    </scope>
                </method>
                <javadoc line="3484">
                    @return whether the drawing buffer was lost since the last call to
                      &lt;code&gt;getDrawGraphics&lt;/code&gt;                    
                </javadoc>
                <method name="contentsLost" type="boolean" line="3488">
                    <scope line="3489"/>
                </method>
                <javadoc line="3494">
                    @return whether the drawing buffer was recently restored from a lost
                      state and reinitialized to the default background color (white)                    
                </javadoc>
                <method name="contentsRestored" type="boolean" line="3498"/>
                <javadoc line="3501">
                    Makes the next available buffer visible by either blitting or
                      flipping.                    
                </javadoc>
                <method name="show" type="void" line="3505"/>
                <javadoc line="3508">
                    Makes specified region of the the next available buffer visible
                      by either blitting or flipping.                    
                </javadoc>
                <method name="showSubRegion" type="void" line="3512">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                    </params>
                </method>
                <javadoc line="3515">
                    {@inheritDoc}                    
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="dispose" type="void" line="3519">
                    <scope line="3520">
                        <scope line="3522"/>
                    </scope>
                </method>
            </class>
            <class name="BltBufferStrategy" line="3528">
                <extends class="BufferStrategy"/>
                <javadoc line="3528">
                    Inner class for blitting offscreen surfaces to a component.                    
                    <author>
                        Michael Martak                        
                    </author>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="caps" type="BufferCapabilities" line="3534"/>
                <javadoc line="3534">
                    The buffering capabilities                    
                </javadoc>
                <declaration name="backBuffers" type="VolatileImage[]" line="3538"/>
                <javadoc line="3538">
                    The back buffers                    
                </javadoc>
                <declaration name="validatedContents" type="boolean" line="3542"/>
                <javadoc line="3542">
                    Whether or not the drawing buffer has been recently restored from
                      a lost state.                    
                </javadoc>
                <declaration name="width" type="int" line="3547"/>
                <javadoc line="3547">
                    Size of the back buffers                    
                </javadoc>
                <declaration name="height" type="int" line="3551"/>
                <declaration name="insets" type="Insets" line="3552"/>
                <javadoc line="3552">
                    Insets for the hosting Component.  The size of the back buffer
                      is constrained by these.                    
                </javadoc>
                <javadoc line="3557">
                    Creates a new blt buffer strategy around a component                    
                    <param>
                        numBuffers number of buffers to create, including the
                          front buffer                        
                    </param>
                    <param>
                        caps the capabilities of the buffers                        
                    </param>
                </javadoc>
                <method name="BltBufferStrategy" type="constructor" line="3563">
                    <params>
                        <param name="numBuffers" type="int"/>
                        <param name="caps" type="BufferCapabilities"/>
                    </params>
                </method>
                <javadoc line="3567">
                    {@inheritDoc}                    
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="dispose" type="void" line="3571">
                    <scope line="3572">
                        <scope line="3573">
                            <scope line="3574"/>
                        </scope>
                    </scope>
                    <scope line="3580"/>
                </method>
                <javadoc line="3584">
                    Creates the back buffers                    
                </javadoc>
                <method name="createBackBuffers" type="void" line="3587">
                    <params>
                        <param name="numBuffers" type="int"/>
                    </params>
                    <scope line="3588"/>
                    <scope line="3591">
                        <declaration name="iWidth" type="int" line="3595"/>
                        <declaration name="iHeight" type="int" line="3596"/>
                        <scope line="3599"/>
                        <scope line="3602">
                            <scope line="3603">
                                <scope line="3604"/>
                            </scope>
                        </scope>
                        <scope line="3610"/>
                    </scope>
                </method>
                <javadoc line="3615">
                    @return the buffering capabilities of this strategy                    
                </javadoc>
                <method name="getCapabilities" type="BufferCapabilities" line="3618"/>
                <javadoc line="3621">
                    @return the draw graphics                    
                </javadoc>
                <method name="getDrawGraphics" type="Graphics" line="3624">
                    <declaration name="backBuffer" type="Image" line="3626"/>
                    <scope line="3627"/>
                    <declaration name="g" type="SunGraphics2D" line="3630"/>
                </method>
                <javadoc line="3634">
                    @return direct access to the back buffer, as an image.
                      If there is no back buffer, returns null.                    
                </javadoc>
                <method name="getBackBuffer" type="Image" line="3638">
                    <scope line="3639"/>
                    <scope line="3642"/>
                </method>
                <javadoc line="3646">
                    Makes the next available buffer visible.                    
                </javadoc>
                <method name="show" type="void" line="3649"/>
                <javadoc line="3652">
                    Package-private method to present a specific rectangular area
                      of this buffer.  This class currently shows only the entire
                      buffer, by calling showSubRegion() with the full dimensions of
                      the buffer.  Subclasses (e.g., BltSubRegionBufferStrategy
                      and FlipSubRegionBufferStrategy) may have region-specific show
                      methods that call this method with actual sub regions of the
                      buffer.                    
                </javadoc>
                <method name="showSubRegion" type="void" line="3661">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                    </params>
                    <scope line="3662"/>
                    <declaration name="g" type="Graphics" line="3669"/>
                    <scope line="3670"/>
                    <scope line="3673">
                        <scope line="3675"/>
                    </scope>
                    <scope line="3682">
                        <scope line="3683"/>
                    </scope>
                </method>
                <javadoc line="3688">
                    Restore the drawing buffer if it has been lost                    
                </javadoc>
                <method name="revalidate" type="void" line="3691"/>
                <method name="revalidate" type="void" line="3694">
                    <params>
                        <param name="checkSize" type="boolean"/>
                    </params>
                    <scope line="3696"/>
                    <scope line="3699">
                        <declaration name="insets" type="Insets" line="3700"/>
                        <scope line="3701"/>
                    </scope>
                    <declaration name="gc" type="GraphicsConfiguration" line="3706"/>
                    <declaration name="returnCode" type="int" line="3707"/>
                    <scope line="3708">
                        <scope line="3709"/>
                    </scope>
                    <scope line="3715"/>
                </method>
                <javadoc line="3719">
                    @return whether the drawing buffer was lost since the last call to
                      &lt;code&gt;getDrawGraphics&lt;/code&gt;                    
                </javadoc>
                <method name="contentsLost" type="boolean" line="3723">
                    <scope line="3724"/>
                    <scope line="3727"/>
                </method>
                <javadoc line="3731">
                    @return whether the drawing buffer was recently restored from a lost
                      state and reinitialized to the default background color (white)                    
                </javadoc>
                <method name="contentsRestored" type="boolean" line="3735"/>
            </class>
            <class name="FlipSubRegionBufferStrategy" line="3739">
                <extends class="FlipBufferStrategy"/>
                <implements interface="SubRegionShowable"/>
                <javadoc line="3739">
                    Private class to perform sub-region flipping.                    
                </javadoc>
                <method name="FlipSubRegionBufferStrategy" type="constructor" line="3743">
                    <params>
                        <param name="numBuffers" type="int"/>
                        <param name="caps" type="BufferCapabilities"/>
                    </params>
                </method>
                <method name="show" type="void" line="3746">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                    </params>
                </method>
                <method name="showIfNotLost" type="boolean" line="3749">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                    </params>
                    <scope line="3750"/>
                </method>
            </class>
            <class name="BltSubRegionBufferStrategy" line="3757">
                <extends class="BltBufferStrategy"/>
                <implements interface="SubRegionShowable"/>
                <javadoc line="3757">
                    Private class to perform sub-region blitting.  Swing will use
                      this subclass via the SubRegionShowable interface in order to
                      copy only the area changed during a repaint.                    
                    <see>
                        javax.swing.BufferStrategyPaintManager                        
                    </see>
                </javadoc>
                <method name="BltSubRegionBufferStrategy" type="constructor" line="3764">
                    <params>
                        <param name="numBuffers" type="int"/>
                        <param name="caps" type="BufferCapabilities"/>
                    </params>
                </method>
                <method name="show" type="void" line="3767">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                    </params>
                </method>
                <method name="showIfNotLost" type="boolean" line="3770">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                    </params>
                    <scope line="3771"/>
                </method>
            </class>
            <class name="SingleBufferStrategy" line="3778">
                <extends class="BufferStrategy"/>
                <javadoc line="3778">
                    Inner class for flipping buffers on a component.  That component must
                      be a &lt;code&gt;Canvas&lt;/code&gt; or &lt;code&gt;Window&lt;/code&gt;.                    
                    <see>
                        Canvas                        
                    </see>
                    <see>
                        Window                        
                    </see>
                    <see>
                        java.awt.image.BufferStrategy                        
                    </see>
                    <author>
                        Michael Martak                        
                    </author>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="caps" type="BufferCapabilities" line="3788"/>
                <method name="SingleBufferStrategy" type="constructor" line="3789">
                    <params>
                        <param name="caps" type="BufferCapabilities"/>
                    </params>
                </method>
                <method name="getCapabilities" type="BufferCapabilities" line="3792"/>
                <method name="getDrawGraphics" type="Graphics" line="3795"/>
                <method name="contentsLost" type="boolean" line="3798"/>
                <method name="contentsRestored" type="boolean" line="3801"/>
                <method name="show" type="void" line="3804"/>
            </class>
            <javadoc line="3807">
                Sets whether or not paint messages received from the operating system
                  should be ignored.  This does not affect paint events generated in
                  software by the AWT, unless they are an immediate response to an
                  OS-level paint message.
                  &lt;p&gt;
                  This is useful, for example, if running under full-screen mode and
                  better performance is desired, or if page-flipping is used as the
                  buffer strategy.                
                <since>
                    1.4                    
                </since>
                <see>
                    #getIgnoreRepaint                    
                </see>
                <see>
                    Canvas#createBufferStrategy                    
                </see>
                <see>
                    Window#createBufferStrategy                    
                </see>
                <see>
                    java.awt.image.BufferStrategy                    
                </see>
                <see>
                    GraphicsDevice#setFullScreenWindow                    
                </see>
            </javadoc>
            <method name="setIgnoreRepaint" type="void" line="3823">
                <params>
                    <param name="ignoreRepaint" type="boolean"/>
                </params>
            </method>
            <javadoc line="3826">
                @return whether or not paint messages received from the operating system
                  should be ignored.                
                <since>
                    1.4                    
                </since>
                <see>
                    #setIgnoreRepaint                    
                </see>
            </javadoc>
            <method name="getIgnoreRepaint" type="boolean" line="3832"/>
            <javadoc line="3835">
                Checks whether this component &quot;contains&quot; the specified point,
                  where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are defined to be
                  relative to the coordinate system of this component.                
                <param>
                    x   the <i>x</i> coordinate of the point                    
                </param>
                <param>
                    y   the <i>y</i> coordinate of the point                    
                </param>
                <see>
                    #getComponentAt(int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="3844">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="3847">
                @deprecated As of JDK version 1.1,
                  replaced by contains(int, int).                
            </javadoc>
            <method name="inside" type="boolean" line="3851">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="3854">
                Checks whether this component &quot;contains&quot; the specified point,
                  where the point&apos;s &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates are defined
                  to be relative to the coordinate system of this component.                
                <param>
                    p     the point                    
                </param>
                <throws>
                    NullPointerException if {@code p} is {@code null}                    
                </throws>
                <see>
                    #getComponentAt(Point)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="3863">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="3866">
                Determines if this component or one of its immediate
                  subcomponents contains the (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) location,
                  and if so, returns the containing component. This method only
                  looks one level deep. If the point (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) is
                  inside a subcomponent that itself has subcomponents, it does not
                  go looking down the subcomponent tree.
                  &lt;p&gt;
                  The &lt;code&gt;locate&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; simply
                  returns the component itself if the (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;)
                  coordinate location is inside its bounding box, and &lt;code&gt;null&lt;/code&gt;
                  otherwise.                
                <param>
                    x   the <i>x</i> coordinate                    
                </param>
                <param>
                    y   the <i>y</i> coordinate                    
                </param>
                <return>
                    the component or subcomponent that contains the
                      (<i>x</i>,&nbsp;<i>y</i>) location;
                      <code>null</code> if the location
                      is outside this component                    
                </return>
                <see>
                    #contains(int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getComponentAt" type="Component" line="3887">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="3890">
                @deprecated As of JDK version 1.1,
                  replaced by getComponentAt(int, int).                
            </javadoc>
            <method name="locate" type="Component" line="3894">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="3897">
                Returns the component or subcomponent that contains the
                  specified point.                
                <param>
                    p   the point                    
                </param>
                <see>
                    java.awt.Component#contains                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getComponentAt" type="Component" line="3904">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="3907">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;dispatchEvent(AWTEvent e)&lt;/code&gt;.                
            </javadoc>
            <method name="deliverEvent" type="void" line="3911">
                <params>
                    <param name="e" type="Event"/>
                </params>
            </method>
            <javadoc line="3914">
                Dispatches an event to this component or one of its sub components.
                  Calls &lt;code&gt;processEvent&lt;/code&gt; before returning for 1.1-style
                  events which have been enabled for the &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    e the event                    
                </param>
            </javadoc>
            <method name="dispatchEvent" type="void" line="3920">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <method name="dispatchEventImpl" type="void" line="3923">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <declaration name="id" type="int" line="3924"/>
                <declaration name="compContext" type="AppContext" line="3925"/>
                <scope line="3926">
                    <scope line="3927"/>
                </scope>
                <scope line="3931"/>
                <scope line="3935"/>
                <scope line="3939">
                    <scope line="3940"/>
                    <scope line="3944"/>
                </scope>
                <scope line="3948"/>
                <scope line="3951"/>
                <declaration name="toolkit" type="Toolkit" line="3954"/>
                <scope line="3956">
                    <scope line="3957">
                        <scope line="3959"/>
                    </scope>
                </scope>
                <scope line="3964">
                    <scope line="3965">
                        <declaration name="inputContext" type="InputContext" line="3966"/>
                        <scope line="3967">
                            <scope line="3969">
                                <scope line="3970"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="3978">
                    <scope line="3979">
                        <declaration name="inputContext" type="InputContext" line="3980"/>
                        <scope line="3981"/>
                    </scope>
                </scope>
                <declaration name="p" type="Container" line="3989"/>
                <scope line="3990">
                    <scope line="3992">
                        <scope line="3993"/>
                    </scope>
                </scope>
                <scope line="4001">
                    <scope line="4003"/>
                </scope>
                <scope line="4011">
                    <scope line="4012"/>
                </scope>
                <scope line="4016"/>
                <scope line="4019">
                    <declaration name="olde" type="Event" line="4020"/>
                    <scope line="4021">
                        <declaration name="key" type="int" line="4022"/>
                        <declaration name="modifiers" type="int" line="4023"/>
                        <scope line="4025"/>
                        <scope line="4033"/>
                        <scope line="4036"/>
                    </scope>
                </scope>
                <scope line="4045">
                    <scope line="4046">
                        <scope line="4048"/>
                    </scope>
                </scope>
                <scope line="4053">
                    <declaration name="tpeer" type="ComponentPeer" line="4054"/>
                    <scope line="4055">
                        <declaration name="source" type="Component" line="4056"/>
                        <scope line="4057">
                            <declaration name="target" type="Container" line="4058"/>
                            <scope line="4059"/>
                        </scope>
                    </scope>
                    <scope line="4064"/>
                </scope>
            </method>
            <method name="autoProcessMouseWheel" type="void" line="4069">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
            </method>
            <method name="dispatchMouseWheelToAncestor" type="boolean" line="4071">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
                <declaration name="newX" type="int" line="4072"/>
                <declaration name="newMWE" type="MouseWheelEvent" line="4075"/>
                <scope line="4076"/>
                <scope line="4080">
                    <declaration name="anc" type="Container" line="4081"/>
                    <scope line="4082">
                        <scope line="4085"/>
                        <scope line="4088"/>
                    </scope>
                    <scope line="4092"/>
                    <scope line="4095">
                        <scope line="4099"/>
                    </scope>
                </scope>
            </method>
            <method name="checkWindowClosingException" type="boolean" line="4107">
                <scope line="4108">
                    <scope line="4109"/>
                    <scope line="4112"/>
                </scope>
            </method>
            <method name="areInputMethodsEnabled" type="boolean" line="4121"/>
            <method name="eventEnabled" type="boolean" line="4124">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <method name="eventTypeEnabled" type="boolean" line="4127">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="4133"/>
                <scope line="4139"/>
                <scope line="4146"/>
                <scope line="4155"/>
                <scope line="4161"/>
                <scope line="4166"/>
                <scope line="4172"/>
                <scope line="4177"/>
                <scope line="4183"/>
                <scope line="4188"/>
                <scope line="4193"/>
                <scope line="4198"/>
                <scope line="4203"/>
                <scope line="4210"/>
            </method>
            <javadoc line="4215">
                @deprecated As of JDK version 1.1,
                  replaced by dispatchEvent(AWTEvent).                
            </javadoc>
            <method name="postEvent" type="boolean" line="4219">
                <params>
                    <param name="e" type="Event"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="4220"/>
                <scope line="4221"/>
                <declaration name="parent" type="Component" line="4225"/>
                <declaration name="eventx" type="int" line="4226"/>
                <declaration name="eventy" type="int" line="4227"/>
                <scope line="4228">
                    <scope line="4230"/>
                </scope>
            </method>
            <javadoc line="4239">
                Adds the specified component listener to receive component events from
                  this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the component listener                    
                </param>
                <see>
                    java.awt.event.ComponentEvent                    
                </see>
                <see>
                    java.awt.event.ComponentListener                    
                </see>
                <see>
                    #removeComponentListener                    
                </see>
                <see>
                    #getComponentListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addComponentListener" type="void" line="4253">
                <params>
                    <param name="l" type="ComponentListener"/>
                </params>
                <scope line="4254"/>
            </method>
            <javadoc line="4260">
                Removes the specified component listener so that it no longer
                  receives component events from this component. This method performs
                  no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the component listener                    
                </param>
                <see>
                    java.awt.event.ComponentEvent                    
                </see>
                <see>
                    java.awt.event.ComponentListener                    
                </see>
                <see>
                    #addComponentListener                    
                </see>
                <see>
                    #getComponentListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeComponentListener" type="void" line="4276">
                <params>
                    <param name="l" type="ComponentListener"/>
                </params>
                <scope line="4277"/>
            </method>
            <javadoc line="4282">
                Returns an array of all the component listeners
                  registered on this component.                
                <return>
                    all of this comonent's <code>ComponentListener</code>s
                      or an empty array if no component
                      listeners are currently registered                    
                </return>
                <see>
                    #addComponentListener                    
                </see>
                <see>
                    #removeComponentListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getComponentListeners" type="ComponentListener[]" line="4292"/>
            <javadoc line="4295">
                Adds the specified focus listener to receive focus events from
                  this component when this component gains input focus.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the focus listener                    
                </param>
                <see>
                    java.awt.event.FocusEvent                    
                </see>
                <see>
                    java.awt.event.FocusListener                    
                </see>
                <see>
                    #removeFocusListener                    
                </see>
                <see>
                    #getFocusListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addFocusListener" type="void" line="4309">
                <params>
                    <param name="l" type="FocusListener"/>
                </params>
                <scope line="4310"/>
                <scope line="4315"/>
            </method>
            <javadoc line="4319">
                Removes the specified focus listener so that it no longer
                  receives focus events from this component. This method performs
                  no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the focus listener                    
                </param>
                <see>
                    java.awt.event.FocusEvent                    
                </see>
                <see>
                    java.awt.event.FocusListener                    
                </see>
                <see>
                    #addFocusListener                    
                </see>
                <see>
                    #getFocusListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeFocusListener" type="void" line="4335">
                <params>
                    <param name="l" type="FocusListener"/>
                </params>
                <scope line="4336"/>
            </method>
            <javadoc line="4341">
                Returns an array of all the focus listeners
                  registered on this component.                
                <return>
                    all of this component's <code>FocusListener</code>s
                      or an empty array if no component
                      listeners are currently registered                    
                </return>
                <see>
                    #addFocusListener                    
                </see>
                <see>
                    #removeFocusListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFocusListeners" type="FocusListener[]" line="4351"/>
            <javadoc line="4354">
                Adds the specified hierarchy listener to receive hierarchy changed
                  events from this component when the hierarchy to which this container
                  belongs changes.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the hierarchy listener                    
                </param>
                <see>
                    java.awt.event.HierarchyEvent                    
                </see>
                <see>
                    java.awt.event.HierarchyListener                    
                </see>
                <see>
                    #removeHierarchyListener                    
                </see>
                <see>
                    #getHierarchyListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="addHierarchyListener" type="void" line="4369">
                <params>
                    <param name="l" type="HierarchyListener"/>
                </params>
                <scope line="4370"/>
                <declaration name="notifyAncestors" type="boolean" line="4373"/>
                <scope line="4374"/>
                <scope line="4380">
                    <scope line="4381"/>
                </scope>
            </method>
            <javadoc line="4386">
                Removes the specified hierarchy listener so that it no longer
                  receives hierarchy changed events from this component. This method
                  performs no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the hierarchy listener                    
                </param>
                <see>
                    java.awt.event.HierarchyEvent                    
                </see>
                <see>
                    java.awt.event.HierarchyListener                    
                </see>
                <see>
                    #addHierarchyListener                    
                </see>
                <see>
                    #getHierarchyListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="removeHierarchyListener" type="void" line="4402">
                <params>
                    <param name="l" type="HierarchyListener"/>
                </params>
                <scope line="4403"/>
                <declaration name="notifyAncestors" type="boolean" line="4406"/>
                <scope line="4407"/>
                <scope line="4412">
                    <scope line="4413"/>
                </scope>
            </method>
            <javadoc line="4418">
                Returns an array of all the hierarchy listeners
                  registered on this component.                
                <return>
                    all of this component's <code>HierarchyListener</code>s
                      or an empty array if no hierarchy
                      listeners are currently registered                    
                </return>
                <see>
                    #addHierarchyListener                    
                </see>
                <see>
                    #removeHierarchyListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHierarchyListeners" type="HierarchyListener[]" line="4428"/>
            <javadoc line="4431">
                Adds the specified hierarchy bounds listener to receive hierarchy
                  bounds events from this component when the hierarchy to which this
                  container belongs changes.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the hierarchy bounds listener                    
                </param>
                <see>
                    java.awt.event.HierarchyEvent                    
                </see>
                <see>
                    java.awt.event.HierarchyBoundsListener                    
                </see>
                <see>
                    #removeHierarchyBoundsListener                    
                </see>
                <see>
                    #getHierarchyBoundsListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="addHierarchyBoundsListener" type="void" line="4446">
                <params>
                    <param name="l" type="HierarchyBoundsListener"/>
                </params>
                <scope line="4447"/>
                <declaration name="notifyAncestors" type="boolean" line="4450"/>
                <scope line="4451"/>
                <scope line="4457">
                    <scope line="4458"/>
                </scope>
            </method>
            <javadoc line="4463">
                Removes the specified hierarchy bounds listener so that it no longer
                  receives hierarchy bounds events from this component. This method
                  performs no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the hierarchy bounds listener                    
                </param>
                <see>
                    java.awt.event.HierarchyEvent                    
                </see>
                <see>
                    java.awt.event.HierarchyBoundsListener                    
                </see>
                <see>
                    #addHierarchyBoundsListener                    
                </see>
                <see>
                    #getHierarchyBoundsListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="removeHierarchyBoundsListener" type="void" line="4479">
                <params>
                    <param name="l" type="HierarchyBoundsListener"/>
                </params>
                <scope line="4480"/>
                <declaration name="notifyAncestors" type="boolean" line="4483"/>
                <scope line="4484"/>
                <scope line="4489">
                    <scope line="4490"/>
                </scope>
            </method>
            <method name="numListening" type="int" line="4495">
                <params>
                    <param name="mask" type="long"/>
                </params>
                <scope line="4496">
                    <scope line="4497"/>
                </scope>
                <scope line="4501"/>
                <scope line="4504"/>
            </method>
            <method name="countHierarchyMembers" type="int" line="4508"/>
            <method name="createHierarchyEvents" type="int" line="4511">
                <params>
                    <param name="id" type="int"/>
                    <param name="changed" type="Component"/>
                    <param name="changedParent" type="Container"/>
                    <param name="changeFlags" type="long"/>
                    <param name="enabledOnToolkit" type="boolean"/>
                </params>
                <scope line="4514">
                    <declaration name="e" type="HierarchyEvent" line="4515"/>
                </scope>
                <scope line="4522">
                    <scope line="4523"/>
                </scope>
                <scope line="4527">
                    <declaration name="e" type="HierarchyEvent" line="4528"/>
                </scope>
                <scope line="4534"/>
            </method>
            <javadoc line="4541">
                Returns an array of all the hierarchy bounds listeners
                  registered on this component.                
                <return>
                    all of this component's <code>HierarchyBoundsListener</code>s
                      or an empty array if no hierarchy bounds
                      listeners are currently registered                    
                </return>
                <see>
                    #addHierarchyBoundsListener                    
                </see>
                <see>
                    #removeHierarchyBoundsListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHierarchyBoundsListeners" type="HierarchyBoundsListener[]" line="4551"/>
            <method name="adjustListeningChildrenOnParent" type="void" line="4554">
                <params>
                    <param name="mask" type="long"/>
                    <param name="num" type="int"/>
                </params>
                <scope line="4555"/>
            </method>
            <javadoc line="4559">
                Adds the specified key listener to receive key events from
                  this component.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the key listener.                    
                </param>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.KeyListener                    
                </see>
                <see>
                    #removeKeyListener                    
                </see>
                <see>
                    #getKeyListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addKeyListener" type="void" line="4572">
                <params>
                    <param name="l" type="KeyListener"/>
                </params>
                <scope line="4573"/>
                <scope line="4578"/>
            </method>
            <javadoc line="4582">
                Removes the specified key listener so that it no longer
                  receives key events from this component. This method performs
                  no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the key listener                    
                </param>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.KeyListener                    
                </see>
                <see>
                    #addKeyListener                    
                </see>
                <see>
                    #getKeyListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeKeyListener" type="void" line="4598">
                <params>
                    <param name="l" type="KeyListener"/>
                </params>
                <scope line="4599"/>
            </method>
            <javadoc line="4604">
                Returns an array of all the key listeners
                  registered on this component.                
                <return>
                    all of this component's <code>KeyListener</code>s
                      or an empty array if no key
                      listeners are currently registered                    
                </return>
                <see>
                    #addKeyListener                    
                </see>
                <see>
                    #removeKeyListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getKeyListeners" type="KeyListener[]" line="4614"/>
            <javadoc line="4617">
                Adds the specified mouse listener to receive mouse events from
                  this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the mouse listener                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseListener                    
                </see>
                <see>
                    #removeMouseListener                    
                </see>
                <see>
                    #getMouseListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addMouseListener" type="void" line="4631">
                <params>
                    <param name="l" type="MouseListener"/>
                </params>
                <scope line="4632"/>
                <scope line="4637"/>
            </method>
            <javadoc line="4641">
                Removes the specified mouse listener so that it no longer
                  receives mouse events from this component. This method performs
                  no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the mouse listener                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseListener                    
                </see>
                <see>
                    #addMouseListener                    
                </see>
                <see>
                    #getMouseListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeMouseListener" type="void" line="4657">
                <params>
                    <param name="l" type="MouseListener"/>
                </params>
                <scope line="4658"/>
            </method>
            <javadoc line="4663">
                Returns an array of all the mouse listeners
                  registered on this component.                
                <return>
                    all of this component's <code>MouseListener</code>s
                      or an empty array if no mouse
                      listeners are currently registered                    
                </return>
                <see>
                    #addMouseListener                    
                </see>
                <see>
                    #removeMouseListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMouseListeners" type="MouseListener[]" line="4673"/>
            <javadoc line="4676">
                Adds the specified mouse motion listener to receive mouse motion
                  events from this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the mouse motion listener                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseMotionListener                    
                </see>
                <see>
                    #removeMouseMotionListener                    
                </see>
                <see>
                    #getMouseMotionListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addMouseMotionListener" type="void" line="4690">
                <params>
                    <param name="l" type="MouseMotionListener"/>
                </params>
                <scope line="4691"/>
                <scope line="4696"/>
            </method>
            <javadoc line="4700">
                Removes the specified mouse motion listener so that it no longer
                  receives mouse motion events from this component. This method performs
                  no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the mouse motion listener                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseMotionListener                    
                </see>
                <see>
                    #addMouseMotionListener                    
                </see>
                <see>
                    #getMouseMotionListeners                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeMouseMotionListener" type="void" line="4716">
                <params>
                    <param name="l" type="MouseMotionListener"/>
                </params>
                <scope line="4717"/>
            </method>
            <javadoc line="4722">
                Returns an array of all the mouse motion listeners
                  registered on this component.                
                <return>
                    all of this component's <code>MouseMotionListener</code>s
                      or an empty array if no mouse motion
                      listeners are currently registered                    
                </return>
                <see>
                    #addMouseMotionListener                    
                </see>
                <see>
                    #removeMouseMotionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMouseMotionListeners" type="MouseMotionListener[]" line="4732"/>
            <javadoc line="4735">
                Adds the specified mouse wheel listener to receive mouse wheel events
                  from this component.  Containers also receive mouse wheel events from
                  sub-components.
                  &lt;p&gt;
                  For information on how mouse wheel events are dispatched, see
                  the class description for {@link MouseWheelEvent}.
                  &lt;p&gt;
                  If l is &lt;code&gt;null&lt;/code&gt;, no exception is thrown and no
                  action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the mouse wheel listener                    
                </param>
                <see>
                    java.awt.event.MouseWheelEvent                    
                </see>
                <see>
                    java.awt.event.MouseWheelListener                    
                </see>
                <see>
                    #removeMouseWheelListener                    
                </see>
                <see>
                    #getMouseWheelListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addMouseWheelListener" type="void" line="4754">
                <params>
                    <param name="l" type="MouseWheelListener"/>
                </params>
                <scope line="4755"/>
                <scope line="4760"/>
            </method>
            <javadoc line="4764">
                Removes the specified mouse wheel listener so that it no longer
                  receives mouse wheel events from this component. This method performs
                  no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the mouse wheel listener.                    
                </param>
                <see>
                    java.awt.event.MouseWheelEvent                    
                </see>
                <see>
                    java.awt.event.MouseWheelListener                    
                </see>
                <see>
                    #addMouseWheelListener                    
                </see>
                <see>
                    #getMouseWheelListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="removeMouseWheelListener" type="void" line="4779">
                <params>
                    <param name="l" type="MouseWheelListener"/>
                </params>
                <scope line="4780"/>
            </method>
            <javadoc line="4785">
                Returns an array of all the mouse wheel listeners
                  registered on this component.                
                <return>
                    all of this component's <code>MouseWheelListener</code>s
                      or an empty array if no mouse wheel
                      listeners are currently registered                    
                </return>
                <see>
                    #addMouseWheelListener                    
                </see>
                <see>
                    #removeMouseWheelListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMouseWheelListeners" type="MouseWheelListener[]" line="4795"/>
            <javadoc line="4798">
                Adds the specified input method listener to receive
                  input method events from this component. A component will
                  only receive input method events from input methods
                  if it also overrides &lt;code&gt;getInputMethodRequests&lt;/code&gt; to return an
                  &lt;code&gt;InputMethodRequests&lt;/code&gt; instance.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;{@docRoot}/java/awt/doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the input method listener                    
                </param>
                <see>
                    java.awt.event.InputMethodEvent                    
                </see>
                <see>
                    java.awt.event.InputMethodListener                    
                </see>
                <see>
                    #removeInputMethodListener                    
                </see>
                <see>
                    #getInputMethodListeners                    
                </see>
                <see>
                    #getInputMethodRequests                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addInputMethodListener" type="void" line="4816">
                <params>
                    <param name="l" type="InputMethodListener"/>
                </params>
                <scope line="4817"/>
            </method>
            <javadoc line="4823">
                Removes the specified input method listener so that it no longer
                  receives input method events from this component. This method performs
                  no function, nor does it throw an exception, if the listener
                  specified by the argument was not previously added to this component.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l   the input method listener                    
                </param>
                <see>
                    java.awt.event.InputMethodEvent                    
                </see>
                <see>
                    java.awt.event.InputMethodListener                    
                </see>
                <see>
                    #addInputMethodListener                    
                </see>
                <see>
                    #getInputMethodListeners                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="removeInputMethodListener" type="void" line="4839">
                <params>
                    <param name="l" type="InputMethodListener"/>
                </params>
                <scope line="4840"/>
            </method>
            <javadoc line="4845">
                Returns an array of all the input method listeners
                  registered on this component.                
                <return>
                    all of this component's <code>InputMethodListener</code>s
                      or an empty array if no input method
                      listeners are currently registered                    
                </return>
                <see>
                    #addInputMethodListener                    
                </see>
                <see>
                    #removeInputMethodListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInputMethodListeners" type="InputMethodListener[]" line="4855"/>
            <javadoc line="4858">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;Component&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;Component&lt;/code&gt; &lt;code&gt;c&lt;/code&gt;
                  for its mouse listeners with the following code:
                  &lt;pre&gt;MouseListener[] mls = (MouseListener[])(c.getListeners(MouseListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this component,
                      or an empty array if no such listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <throws>
                    NullPointerException if {@code listenerType} is {@code null}                    
                </throws>
                <see>
                    #getComponentListeners                    
                </see>
                <see>
                    #getFocusListeners                    
                </see>
                <see>
                    #getHierarchyListeners                    
                </see>
                <see>
                    #getHierarchyBoundsListeners                    
                </see>
                <see>
                    #getKeyListeners                    
                </see>
                <see>
                    #getMouseListeners                    
                </see>
                <see>
                    #getMouseMotionListeners                    
                </see>
                <see>
                    #getMouseWheelListeners                    
                </see>
                <see>
                    #getInputMethodListeners                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="4895">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
                <declaration name="l" type="EventListener" line="4896"/>
                <scope line="4897"/>
                <scope line="4900"/>
                <scope line="4903"/>
                <scope line="4906"/>
                <scope line="4909"/>
                <scope line="4912"/>
                <scope line="4915"/>
                <scope line="4918"/>
                <scope line="4921"/>
                <scope line="4924"/>
            </method>
            <javadoc line="4929">
                Gets the input method request handler which supports
                  requests from input methods for this component. A component
                  that supports on-the-spot text input must override this
                  method to return an &lt;code&gt;InputMethodRequests&lt;/code&gt; instance.
                  At the same time, it also has to handle input method events.                
                <return>
                    the input method request handler for this component,
                      <code>null</code> by default                    
                </return>
                <see>
                    #addInputMethodListener                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getInputMethodRequests" type="InputMethodRequests" line="4940"/>
            <javadoc line="4943">
                Gets the input context used by this component for handling
                  the communication with input methods when text is entered
                  in this component. By default, the input context used for
                  the parent component is returned. Components may
                  override this to return a private input context.                
                <return>
                    the input context used by this component;
                      <code>null</code> if no context can be determined                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getInputContext" type="InputContext" line="4953">
                <declaration name="parent" type="Container" line="4954"/>
                <scope line="4955"/>
                <scope line="4958"/>
            </method>
            <javadoc line="4962">
                Enables the events defined by the specified event mask parameter
                  to be delivered to this component.
                  &lt;p&gt;
                  Event types are automatically enabled when a listener for
                  that event type is added to the component.
                  &lt;p&gt;
                  This method only needs to be invoked by subclasses of
                  &lt;code&gt;Component&lt;/code&gt; which desire to have the specified event
                  types delivered to &lt;code&gt;processEvent&lt;/code&gt; regardless of whether
                  or not a listener is registered.                
                <param>
                    eventsToEnable   the event mask defining the event types                    
                </param>
                <see>
                    #processEvent                    
                </see>
                <see>
                    #disableEvents                    
                </see>
                <see>
                    AWTEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="enableEvents" type="void" line="4979">
                <params>
                    <param name="eventsToEnable" type="long"/>
                </params>
                <declaration name="notifyAncestors" type="long" line="4980"/>
                <scope line="4981">
                    <scope line="4982"/>
                    <scope line="4985"/>
                </scope>
                <scope line="4991"/>
                <scope line="4994">
                    <scope line="4995"/>
                </scope>
            </method>
            <javadoc line="5000">
                Disables the events defined by the specified event mask parameter
                  from being delivered to this component.                
                <param>
                    eventsToDisable   the event mask defining the event types                    
                </param>
                <see>
                    #enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="disableEvents" type="void" line="5007">
                <params>
                    <param name="eventsToDisable" type="long"/>
                </params>
                <declaration name="notifyAncestors" type="long" line="5008"/>
                <scope line="5009">
                    <scope line="5010"/>
                    <scope line="5013"/>
                </scope>
                <scope line="5018">
                    <scope line="5019"/>
                </scope>
            </method>
            <declaration name="eventCache" type="sun.awt.EventQueueItem[]" line="5024"/>
            <declaration name="coalescingEnabled" type="boolean" line="5025"/>
            <javadoc line="5025">
                @see #isCoalescingEnabled                
                <see>
                    #checkCoalescing                    
                </see>
            </javadoc>
            <declaration name="coalesceMap" type="Map&lt;Class&lt;?&gt;,Boolean&gt;" line="5030"/>
            <javadoc line="5030">
                Weak map of known coalesceEvent overriders.
                  Value indicates whether overriden.
                  Bootstrap classes are not included.                
            </javadoc>
            <javadoc line="5036">
                Indicates whether this class overrides coalesceEvents.
                  It is assumed that all classes that are loaded from the bootstrap
                  do not.
                  The boostrap class loader is assumed to be represented by null.
                  We do not check that the method really overrides
                  (it might be static, private or package private).                
            </javadoc>
            <method name="checkCoalescing" type="boolean" line="5044">
                <scope line="5045"/>
                <declaration name="clazz" type="Class&lt;? extends Component&gt;" line="5048"/>
                <scope line="5049">
                    <declaration name="value" type="Boolean" line="5050"/>
                    <scope line="5051"/>
                    <anonymous_class line="5054">
                        <method name="run" type="Boolean" line="5055"/>
                    </anonymous_class>
                    <declaration name="enabled" type="Boolean" line="5054"/>
                </scope>
            </method>
            <declaration name="coalesceEventsParams" type="Class[]" line="5064"/>
            <javadoc line="5064">
                Parameter types of coalesceEvents(AWTEvent,AWTEVent).                
            </javadoc>
            <javadoc line="5068">
                Indicates whether a class or its superclasses override coalesceEvents.
                  Must be called with lock on coalesceMap and privileged.                
                <see>
                    checkCoalsecing                    
                </see>
            </javadoc>
            <method name="isCoalesceEventsOverriden" type="boolean" line="5073">
                <params>
                    <param name="clazz" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="5099">
                Indicates whether coalesceEvents may do something.                
            </javadoc>
            <method name="isCoalescingEnabled" type="boolean" line="5102"/>
            <javadoc line="5105">
                Potentially coalesce an event being posted with an existing
                  event.  This method is called by &lt;code&gt;EventQueue.postEvent&lt;/code&gt;
                  if an event with the same ID as the event to be posted is found in
                  the queue (both events must have this component as their source).
                  This method either returns a coalesced event which replaces
                  the existing event (and the new event is then discarded), or
                  &lt;code&gt;null&lt;/code&gt; to indicate that no combining should be done
                  (add the second event to the end of the queue).  Either event
                  parameter may be modified and returned, as the other one is discarded
                  unless &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt;
                  This implementation of &lt;code&gt;coalesceEvents&lt;/code&gt; coalesces
                  two event types: mouse move (and drag) events,
                  and paint (and update) events.
                  For mouse move events the last event is always returned, causing
                  intermediate moves to be discarded.  For paint events, the new
                  event is coalesced into a complex &lt;code&gt;RepaintArea&lt;/code&gt; in the peer.
                  The new &lt;code&gt;AWTEvent&lt;/code&gt; is always returned.                
                <param>
                    existingEvent  the event already on the <code>EventQueue</code>                    
                </param>
                <param>
                    newEvent       the event being posted to the
                      <code>EventQueue</code>                    
                </param>
                <return>
                    a coalesced event, or <code>null</code> indicating that no
                      coalescing was done                    
                </return>
            </javadoc>
            <method name="coalesceEvents" type="AWTEvent" line="5130">
                <params>
                    <param name="existingEvent" type="AWTEvent"/>
                    <param name="newEvent" type="AWTEvent"/>
                </params>
            </method>
            <javadoc line="5133">
                Processes events occurring on this component. By default this
                  method calls the appropriate
                  &lt;code&gt;process&amp;lt;event&amp;nbsp;type&amp;gt;Event&lt;/code&gt;
                  method for the given class of event.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    #processComponentEvent                    
                </see>
                <see>
                    #processFocusEvent                    
                </see>
                <see>
                    #processKeyEvent                    
                </see>
                <see>
                    #processMouseEvent                    
                </see>
                <see>
                    #processMouseMotionEvent                    
                </see>
                <see>
                    #processInputMethodEvent                    
                </see>
                <see>
                    #processHierarchyEvent                    
                </see>
                <see>
                    #processMouseWheelEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="5152">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="5153"/>
                <scope line="5156"/>
                <scope line="5174"/>
                <scope line="5177"/>
                <scope line="5180"/>
                <scope line="5183"/>
            </method>
            <javadoc line="5195">
                Processes component events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;ComponentListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless component events are
                  enabled for this component. Component events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;A &lt;code&gt;ComponentListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addComponentListener&lt;/code&gt;.
                  &lt;li&gt;Component events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the component event                    
                </param>
                <see>
                    java.awt.event.ComponentEvent                    
                </see>
                <see>
                    java.awt.event.ComponentListener                    
                </see>
                <see>
                    #addComponentListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processComponentEvent" type="void" line="5218">
                <params>
                    <param name="e" type="ComponentEvent"/>
                </params>
                <declaration name="listener" type="ComponentListener" line="5219"/>
                <scope line="5220">
                    <declaration name="id" type="int" line="5221"/>
                </scope>
            </method>
            <javadoc line="5238">
                Processes focus events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;FocusListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless focus events are
                  enabled for this component. Focus events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;A &lt;code&gt;FocusListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addFocusListener&lt;/code&gt;.
                  &lt;li&gt;Focus events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If focus events are enabled for a &lt;code&gt;Component&lt;/code&gt;,
                  the current &lt;code&gt;KeyboardFocusManager&lt;/code&gt; determines
                  whether or not a focus event should be dispatched to
                  registered &lt;code&gt;FocusListener&lt;/code&gt; objects.  If the
                  events are to be dispatched, the &lt;code&gt;KeyboardFocusManager&lt;/code&gt;
                  calls the &lt;code&gt;Component&lt;/code&gt;&apos;s &lt;code&gt;dispatchEvent&lt;/code&gt;
                  method, which results in a call to the &lt;code&gt;Component&lt;/code&gt;&apos;s
                  &lt;code&gt;processFocusEvent&lt;/code&gt; method.
                  &lt;p&gt;
                  If focus events are enabled for a &lt;code&gt;Component&lt;/code&gt;, calling
                  the &lt;code&gt;Component&lt;/code&gt;&apos;s &lt;code&gt;dispatchEvent&lt;/code&gt; method
                  with a &lt;code&gt;FocusEvent&lt;/code&gt; as the argument will result in a
                  call to the &lt;code&gt;Component&lt;/code&gt;&apos;s &lt;code&gt;processFocusEvent&lt;/code&gt;
                  method regardless of the current &lt;code&gt;KeyboardFocusManager&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the focus event                    
                </param>
                <see>
                    java.awt.event.FocusEvent                    
                </see>
                <see>
                    java.awt.event.FocusListener                    
                </see>
                <see>
                    java.awt.KeyboardFocusManager                    
                </see>
                <see>
                    #addFocusListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <see>
                    #dispatchEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processFocusEvent" type="void" line="5279">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
                <declaration name="listener" type="FocusListener" line="5280"/>
                <scope line="5281">
                    <declaration name="id" type="int" line="5282"/>
                </scope>
            </method>
            <javadoc line="5293">
                Processes key events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;KeyListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless key events are
                  enabled for this component. Key events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;A &lt;code&gt;KeyListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addKeyListener&lt;/code&gt;.
                  &lt;li&gt;Key events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If key events are enabled for a &lt;code&gt;Component&lt;/code&gt;,
                  the current &lt;code&gt;KeyboardFocusManager&lt;/code&gt; determines
                  whether or not a key event should be dispatched to
                  registered &lt;code&gt;KeyListener&lt;/code&gt; objects.  The
                  &lt;code&gt;DefaultKeyboardFocusManager&lt;/code&gt; will not dispatch
                  key events to a &lt;code&gt;Component&lt;/code&gt; that is not the focus
                  owner or is not showing.
                  &lt;p&gt;
                  As of J2SE 1.4, &lt;code&gt;KeyEvent&lt;/code&gt;s are redirected to
                  the focus owner. Please see the
                  &lt;a href=&quot;doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt;
                  for further information.
                  &lt;p&gt;
                  Calling a &lt;code&gt;Component&lt;/code&gt;&apos;s &lt;code&gt;dispatchEvent&lt;/code&gt;
                  method with a &lt;code&gt;KeyEvent&lt;/code&gt; as the argument will
                  result in a call to the &lt;code&gt;Component&lt;/code&gt;&apos;s
                  &lt;code&gt;processKeyEvent&lt;/code&gt; method regardless of the
                  current &lt;code&gt;KeyboardFocusManager&lt;/code&gt; as long as the
                  component is showing, focused, and enabled, and key events
                  are enabled on it.
                  &lt;p&gt;If the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the key event                    
                </param>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.KeyListener                    
                </see>
                <see>
                    java.awt.KeyboardFocusManager                    
                </see>
                <see>
                    java.awt.DefaultKeyboardFocusManager                    
                </see>
                <see>
                    #processEvent                    
                </see>
                <see>
                    #dispatchEvent                    
                </see>
                <see>
                    #addKeyListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processKeyEvent" type="void" line="5342">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <declaration name="listener" type="KeyListener" line="5343"/>
                <scope line="5344">
                    <declaration name="id" type="int" line="5345"/>
                </scope>
            </method>
            <javadoc line="5359">
                Processes mouse events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;MouseListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless mouse events are
                  enabled for this component. Mouse events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;A &lt;code&gt;MouseListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addMouseListener&lt;/code&gt;.
                  &lt;li&gt;Mouse events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the mouse event                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseListener                    
                </see>
                <see>
                    #addMouseListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processMouseEvent" type="void" line="5382">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="listener" type="MouseListener" line="5383"/>
                <scope line="5384">
                    <declaration name="id" type="int" line="5385"/>
                </scope>
            </method>
            <javadoc line="5405">
                Processes mouse motion events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;MouseMotionListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless mouse motion events are
                  enabled for this component. Mouse motion events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;A &lt;code&gt;MouseMotionListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addMouseMotionListener&lt;/code&gt;.
                  &lt;li&gt;Mouse motion events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the mouse motion event                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseMotionListener                    
                </see>
                <see>
                    #addMouseMotionListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processMouseMotionEvent" type="void" line="5428">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="listener" type="MouseMotionListener" line="5429"/>
                <scope line="5430">
                    <declaration name="id" type="int" line="5431"/>
                </scope>
            </method>
            <javadoc line="5442">
                Processes mouse wheel events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;MouseWheelListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless mouse wheel events are
                  enabled for this component. Mouse wheel events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;A &lt;code&gt;MouseWheelListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addMouseWheelListener&lt;/code&gt;.
                  &lt;li&gt;Mouse wheel events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  For information on how mouse wheel events are dispatched, see
                  the class description for {@link MouseWheelEvent}.
                  &lt;p&gt;
                  Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the mouse wheel event                    
                </param>
                <see>
                    java.awt.event.MouseWheelEvent                    
                </see>
                <see>
                    java.awt.event.MouseWheelListener                    
                </see>
                <see>
                    #addMouseWheelListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="processMouseWheelEvent" type="void" line="5469">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
                <declaration name="listener" type="MouseWheelListener" line="5470"/>
                <scope line="5471">
                    <declaration name="id" type="int" line="5472"/>
                </scope>
            </method>
            <method name="postsOldMouseEvents" type="boolean" line="5480"/>
            <javadoc line="5483">
                Processes input method events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;InputMethodListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless input method events
                  are enabled for this component. Input method events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;InputMethodListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addInputMethodListener&lt;/code&gt;.
                  &lt;li&gt;Input method events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the input method event                    
                </param>
                <see>
                    java.awt.event.InputMethodEvent                    
                </see>
                <see>
                    java.awt.event.InputMethodListener                    
                </see>
                <see>
                    #addInputMethodListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="processInputMethodEvent" type="void" line="5506">
                <params>
                    <param name="e" type="InputMethodEvent"/>
                </params>
                <declaration name="listener" type="InputMethodListener" line="5507"/>
                <scope line="5508">
                    <declaration name="id" type="int" line="5509"/>
                </scope>
            </method>
            <javadoc line="5520">
                Processes hierarchy events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;HierarchyListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless hierarchy events
                  are enabled for this component. Hierarchy events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;HierarchyListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addHierarchyListener&lt;/code&gt;.
                  &lt;li&gt;Hierarchy events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the hierarchy event                    
                </param>
                <see>
                    java.awt.event.HierarchyEvent                    
                </see>
                <see>
                    java.awt.event.HierarchyListener                    
                </see>
                <see>
                    #addHierarchyListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="processHierarchyEvent" type="void" line="5543">
                <params>
                    <param name="e" type="HierarchyEvent"/>
                </params>
                <declaration name="listener" type="HierarchyListener" line="5544"/>
                <scope line="5545">
                    <declaration name="id" type="int" line="5546"/>
                </scope>
            </method>
            <javadoc line="5554">
                Processes hierarchy bounds events occurring on this component by
                  dispatching them to any registered
                  &lt;code&gt;HierarchyBoundsListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless hierarchy bounds events
                  are enabled for this component. Hierarchy bounds events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;HierarchyBoundsListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addHierarchyBoundsListener&lt;/code&gt;.
                  &lt;li&gt;Hierarchy bounds events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the hierarchy event                    
                </param>
                <see>
                    java.awt.event.HierarchyEvent                    
                </see>
                <see>
                    java.awt.event.HierarchyBoundsListener                    
                </see>
                <see>
                    #addHierarchyBoundsListener                    
                </see>
                <see>
                    #enableEvents                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="processHierarchyBoundsEvent" type="void" line="5577">
                <params>
                    <param name="e" type="HierarchyEvent"/>
                </params>
                <declaration name="listener" type="HierarchyBoundsListener" line="5578"/>
                <scope line="5579">
                    <declaration name="id" type="int" line="5580"/>
                </scope>
            </method>
            <javadoc line="5591">
                @deprecated As of JDK version 1.1
                  replaced by processEvent(AWTEvent).                
            </javadoc>
            <method name="handleEvent" type="boolean" line="5595">
                <params>
                    <param name="evt" type="Event"/>
                </params>
            </method>
            <javadoc line="5624">
                @deprecated As of JDK version 1.1,
                  replaced by processMouseEvent(MouseEvent).                
            </javadoc>
            <method name="mouseDown" type="boolean" line="5628">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="5631">
                @deprecated As of JDK version 1.1,
                  replaced by processMouseMotionEvent(MouseEvent).                
            </javadoc>
            <method name="mouseDrag" type="boolean" line="5635">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="5638">
                @deprecated As of JDK version 1.1,
                  replaced by processMouseEvent(MouseEvent).                
            </javadoc>
            <method name="mouseUp" type="boolean" line="5642">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="5645">
                @deprecated As of JDK version 1.1,
                  replaced by processMouseMotionEvent(MouseEvent).                
            </javadoc>
            <method name="mouseMove" type="boolean" line="5649">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="5652">
                @deprecated As of JDK version 1.1,
                  replaced by processMouseEvent(MouseEvent).                
            </javadoc>
            <method name="mouseEnter" type="boolean" line="5656">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="5659">
                @deprecated As of JDK version 1.1,
                  replaced by processMouseEvent(MouseEvent).                
            </javadoc>
            <method name="mouseExit" type="boolean" line="5663">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="5666">
                @deprecated As of JDK version 1.1,
                  replaced by processKeyEvent(KeyEvent).                
            </javadoc>
            <method name="keyDown" type="boolean" line="5670">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="5673">
                @deprecated As of JDK version 1.1,
                  replaced by processKeyEvent(KeyEvent).                
            </javadoc>
            <method name="keyUp" type="boolean" line="5677">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="5680">
                @deprecated As of JDK version 1.1,
                  should register this component as ActionListener on component
                  which fires action events.                
            </javadoc>
            <method name="action" type="boolean" line="5685">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="what" type="Object"/>
                </params>
            </method>
            <javadoc line="5688">
                Makes this &lt;code&gt;Component&lt;/code&gt; displayable by connecting it to a
                  native screen resource.
                  This method is called internally by the toolkit and should
                  not be called directly by programs.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    #removeNotify                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="addNotify" type="void" line="5701">
                <scope line="5702">
                    <declaration name="peer" type="ComponentPeer" line="5703"/>
                    <scope line="5704">
                        <scope line="5705"/>
                        <scope line="5708">
                            <declaration name="mask" type="long" line="5709"/>
                            <scope line="5710"/>
                            <scope line="5713"/>
                            <scope line="5716"/>
                            <scope line="5719"/>
                            <scope line="5722"/>
                            <scope line="5725"/>
                        </scope>
                    </scope>
                    <scope line="5730">
                        <declaration name="parent" type="Container" line="5731"/>
                        <scope line="5732">
                            <scope line="5734"/>
                        </scope>
                    </scope>
                    <declaration name="npopups" type="int" line="5740"/>
                    <scope line="5741">
                        <declaration name="popup" type="PopupMenu" line="5742"/>
                    </scope>
                    <scope line="5747"/>
                    <scope line="5751"/>
                    <scope line="5755">
                        <declaration name="e" type="HierarchyEvent" line="5756"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="5761">
                Makes this &lt;code&gt;Component&lt;/code&gt; undisplayable by destroying it native
                  screen resource.
                  &lt;p&gt;
                  This method is called by the toolkit internally and should
                  not be called directly by programs. Code overriding
                  this method should call &lt;code&gt;super.removeNotify&lt;/code&gt; as
                  the first line of the overriding method.                
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    #addNotify                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="removeNotify" type="void" line="5773">
                <scope line="5775"/>
                <scope line="5778">
                    <scope line="5779"/>
                    <scope line="5782"/>
                    <declaration name="npopups" type="int" line="5785"/>
                    <scope line="5786">
                        <declaration name="popup" type="PopupMenu" line="5787"/>
                    </scope>
                    <scope line="5790">
                        <declaration name="inputContext" type="InputContext" line="5791"/>
                        <scope line="5792"/>
                    </scope>
                    <declaration name="p" type="ComponentPeer" line="5796"/>
                    <scope line="5797">
                        <declaration name="isLightweight" type="boolean" line="5798"/>
                        <scope line="5799"/>
                        <scope line="5803"/>
                    </scope>
                    <scope line="5815">
                        <declaration name="e" type="HierarchyEvent" line="5816"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="5821">
                @deprecated As of JDK version 1.1,
                  replaced by processFocusEvent(FocusEvent).                
            </javadoc>
            <method name="gotFocus" type="boolean" line="5825">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="what" type="Object"/>
                </params>
            </method>
            <javadoc line="5828">
                @deprecated As of JDK version 1.1,
                  replaced by processFocusEvent(FocusEvent).                
            </javadoc>
            <method name="lostFocus" type="boolean" line="5832">
                <params>
                    <param name="evt" type="Event"/>
                    <param name="what" type="Object"/>
                </params>
            </method>
            <javadoc line="5835">
                Returns whether this &lt;code&gt;Component&lt;/code&gt; can become the focus
                  owner.                
                <return>
                    <code>true</code> if this <code>Component</code> is
                      focusable; <code>false</code> otherwise                    
                </return>
                <see>
                    #setFocusable                    
                </see>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    As of 1.4, replaced by <code>isFocusable()</code>.                    
                </deprecated>
            </javadoc>
            <method name="isFocusTraversable" type="boolean" line="5844">
                <scope line="5845"/>
            </method>
            <javadoc line="5850">
                Returns whether this Component can be focused.                
                <return>
                    <code>true</code> if this Component is focusable;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    #setFocusable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFocusable" type="boolean" line="5857"/>
            <javadoc line="5860">
                Sets the focusable state of this Component to the specified value. This
                  value overrides the Component&apos;s default focusability.                
                <param>
                    focusable indicates whether this Component is focusable                    
                </param>
                <see>
                    #isFocusable                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true                    
                </beaninfobound>
            </javadoc>
            <method name="setFocusable" type="void" line="5868">
                <params>
                    <param name="focusable" type="boolean"/>
                </params>
                <declaration name="oldFocusable" type="boolean" line="5869"/>
                <scope line="5870"/>
                <scope line="5876">
                    <scope line="5877"/>
                </scope>
            </method>
            <method name="isFocusTraversableOverridden" type="boolean" line="5883"/>
            <javadoc line="5886">
                Sets the focus traversal keys for a given traversal operation for this
                  Component.
                  &lt;p&gt;
                  The default values for a Component&apos;s focus traversal keys are
                  implementation-dependent. Sun recommends that all implementations for a
                  particular native platform use the same default values. The
                  recommendations for Windows and Unix are listed below. These
                  recommendations are used in the Sun AWT implementations.
                  &lt;table border=1 summary=&quot;Recommended default values for a Component&apos;s focus traversal keys&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Identifier&lt;/th&gt;
                  &lt;th&gt;Meaning&lt;/th&gt;
                  &lt;th&gt;Default&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS&lt;/td&gt;
                  &lt;td&gt;Normal forward keyboard traversal&lt;/td&gt;
                  &lt;td&gt;TAB on KEY_PRESSED, CTRL-TAB on KEY_PRESSED&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS&lt;/td&gt;
                  &lt;td&gt;Normal reverse keyboard traversal&lt;/td&gt;
                  &lt;td&gt;SHIFT-TAB on KEY_PRESSED, CTRL-SHIFT-TAB on KEY_PRESSED&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS&lt;/td&gt;
                  &lt;td&gt;Go up one focus traversal cycle&lt;/td&gt;
                  &lt;td&gt;none&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  To disable a traversal key, use an empty Set; Collections.EMPTY_SET is
                  recommended.
                  &lt;p&gt;
                  Using the AWTKeyStroke API, client code can specify on which of two
                  specific KeyEvents, KEY_PRESSED or KEY_RELEASED, the focus traversal
                  operation will occur. Regardless of which KeyEvent is specified,
                  however, all KeyEvents related to the focus traversal key, including the
                  associated KEY_TYPED event, will be consumed, and will not be dispatched
                  to any Component. It is a runtime error to specify a KEY_TYPED event as
                  mapping to a focus traversal operation, or to map the same event to
                  multiple default focus traversal operations.
                  &lt;p&gt;
                  If a value of null is specified for the Set, this Component inherits the
                  Set from its parent. If all ancestors of this Component have null
                  specified for the Set, then the current KeyboardFocusManager&apos;s default
                  Set is used.                
                <param>
                    id one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or
                      KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS                    
                </param>
                <param>
                    keystrokes the Set of AWTKeyStroke for the specified operation                    
                </param>
                <see>
                    #getFocusTraversalKeys                    
                </see>
                <see>
                    KeyboardFocusManager#FORWARD_TRAVERSAL_KEYS                    
                </see>
                <see>
                    KeyboardFocusManager#BACKWARD_TRAVERSAL_KEYS                    
                </see>
                <see>
                    KeyboardFocusManager#UP_CYCLE_TRAVERSAL_KEYS                    
                </see>
                <throws>
                    IllegalArgumentException if id is not one of
                      KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or
                      KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or if keystrokes
                      contains null, or if any Object in keystrokes is not an
                      AWTKeyStroke, or if any keystroke represents a KEY_TYPED event,
                      or if any keystroke already maps to another focus traversal
                      operation for this Component                    
                </throws>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true                    
                </beaninfobound>
            </javadoc>
            <method name="setFocusTraversalKeys" type="void" line="5952">
                <params>
                    <param name="id" type="int"/>
                    <param name="keystrokes" type="Set<? extends AWTKeyStroke>"/>
                </params>
                <scope line="5953"/>
            </method>
            <javadoc line="5958">
                Returns the Set of focus traversal keys for a given traversal operation
                  for this Component. (See
                  &lt;code&gt;setFocusTraversalKeys&lt;/code&gt; for a full description of each key.)
                  &lt;p&gt;
                  If a Set of traversal keys has not been explicitly defined for this
                  Component, then this Component&apos;s parent&apos;s Set is returned. If no Set
                  has been explicitly defined for any of this Component&apos;s ancestors, then
                  the current KeyboardFocusManager&apos;s default Set is returned.                
                <param>
                    id one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or
                      KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS                    
                </param>
                <return>
                    the Set of AWTKeyStrokes for the specified operation. The Set
                      will be unmodifiable, and may be empty. null will never be
                      returned.                    
                </return>
                <see>
                    #setFocusTraversalKeys                    
                </see>
                <see>
                    KeyboardFocusManager#FORWARD_TRAVERSAL_KEYS                    
                </see>
                <see>
                    KeyboardFocusManager#BACKWARD_TRAVERSAL_KEYS                    
                </see>
                <see>
                    KeyboardFocusManager#UP_CYCLE_TRAVERSAL_KEYS                    
                </see>
                <throws>
                    IllegalArgumentException if id is not one of
                      KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or
                      KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFocusTraversalKeys" type="Set<AWTKeyStroke>" line="5983">
                <params>
                    <param name="id" type="int"/>
                </params>
                <scope line="5984"/>
            </method>
            <method name="setFocusTraversalKeys_NoIDCheck" type="void" line="5989">
                <params>
                    <param name="id" type="int"/>
                    <param name="keystrokes" type="Set<? extends AWTKeyStroke>"/>
                </params>
                <declaration name="oldKeys" type="Set" line="5990"/>
                <scope line="5991">
                    <scope line="5992"/>
                    <scope line="5995">
                        <scope line="5996">
                            <declaration name="obj" type="Object" line="5997"/>
                            <scope line="5998"/>
                            <scope line="6001"/>
                            <declaration name="keystroke" type="AWTKeyStroke" line="6004"/>
                            <scope line="6005"/>
                            <scope line="6008">
                                <scope line="6009"/>
                                <scope line="6012"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getFocusTraversalKeys_NoIDCheck" type="Set" line="6023">
                <params>
                    <param name="id" type="int"/>
                </params>
                <declaration name="keystrokes" type="Set" line="6024"/>
                <scope line="6025"/>
                <scope line="6028">
                    <declaration name="parent" type="Container" line="6029"/>
                    <scope line="6030"/>
                    <scope line="6033"/>
                </scope>
            </method>
            <javadoc line="6038">
                Returns whether the Set of focus traversal keys for the given focus
                  traversal operation has been explicitly defined for this Component. If
                  this method returns &lt;code&gt;false&lt;/code&gt;, this Component is inheriting the
                  Set from an ancestor, or from the current KeyboardFocusManager.                
                <param>
                    id one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or
                      KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS                    
                </param>
                <return>
                    <code>true</code> if the the Set of focus traversal keys for the
                      given focus traversal operation has been explicitly defined for
                      this Component; <code>false</code> otherwise.                    
                </return>
                <throws>
                    IllegalArgumentException if id is not one of
                      KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or
                      KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="areFocusTraversalKeysSet" type="boolean" line="6055">
                <params>
                    <param name="id" type="int"/>
                </params>
                <scope line="6056"/>
            </method>
            <javadoc line="6061">
                Sets whether focus traversal keys are enabled for this Component.
                  Components for which focus traversal keys are disabled receive key
                  events for focus traversal keys. Components for which focus traversal
                  keys are enabled do not see these events; instead, the events are
                  automatically converted to traversal operations.                
                <param>
                    focusTraversalKeysEnabled whether focus traversal keys are
                      enabled for this Component                    
                </param>
                <see>
                    #getFocusTraversalKeysEnabled                    
                </see>
                <see>
                    #setFocusTraversalKeys                    
                </see>
                <see>
                    #getFocusTraversalKeys                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true                    
                </beaninfobound>
            </javadoc>
            <method name="setFocusTraversalKeysEnabled" type="void" line="6075">
                <params>
                    <param name="focusTraversalKeysEnabled" type="boolean"/>
                </params>
                <declaration name="oldFocusTraversalKeysEnabled" type="boolean" line="6076"/>
                <scope line="6077"/>
            </method>
            <javadoc line="6083">
                Returns whether focus traversal keys are enabled for this Component.
                  Components for which focus traversal keys are disabled receive key
                  events for focus traversal keys. Components for which focus traversal
                  keys are enabled do not see these events; instead, the events are
                  automatically converted to traversal operations.                
                <return>
                    whether focus traversal keys are enabled for this Component                    
                </return>
                <see>
                    #setFocusTraversalKeysEnabled                    
                </see>
                <see>
                    #setFocusTraversalKeys                    
                </see>
                <see>
                    #getFocusTraversalKeys                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFocusTraversalKeysEnabled" type="boolean" line="6095"/>
            <javadoc line="6098">
                Requests that this Component get the input focus, and that this
                  Component&apos;s top-level ancestor become the focused Window. This
                  component must be displayable, focusable, visible and all of
                  its ancestors (with the exception of the top-level Window) must
                  be visible for the request to be granted. Every effort will be
                  made to honor the request; however, in some cases it may be
                  impossible to do so. Developers must never assume that this
                  Component is the focus owner until this Component receives a
                  FOCUS_GAINED event. If this request is denied because this
                  Component&apos;s top-level Window cannot become the focused Window,
                  the request will be remembered and will be granted when the
                  Window is later focused by the user.
                  &lt;p&gt;
                  This method cannot be used to set the focus owner to no Component at
                  all. Use &lt;code&gt;KeyboardFocusManager.clearGlobalFocusOwner()&lt;/code&gt;
                  instead.
                  &lt;p&gt;
                  Because the focus behavior of this method is platform-dependent,
                  developers are strongly encouraged to use
                  &lt;code&gt;requestFocusInWindow&lt;/code&gt; when possible.
                  &lt;p&gt;Note: Not all focus transfers result from invoking this method. As
                  such, a component may receive focus without this or any of the other{@code requestFocus} methods of {@code Component} being invoked.                
                <see>
                    #requestFocusInWindow                    
                </see>
                <see>
                    java.awt.event.FocusEvent                    
                </see>
                <see>
                    #addFocusListener                    
                </see>
                <see>
                    #isFocusable                    
                </see>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    KeyboardFocusManager#clearGlobalFocusOwner                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="requestFocus" type="void" line="6129"/>
            <method name="requestFocus" type="boolean" line="6132">
                <params>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
            </method>
            <javadoc line="6135">
                Requests that this &lt;code&gt;Component&lt;/code&gt; get the input focus,
                  and that this &lt;code&gt;Component&lt;/code&gt;&apos;s top-level ancestor
                  become the focused &lt;code&gt;Window&lt;/code&gt;. This component must be
                  displayable, focusable, visible and all of its ancestors (with
                  the exception of the top-level Window) must be visible for the
                  request to be granted. Every effort will be made to honor the
                  request; however, in some cases it may be impossible to do
                  so. Developers must never assume that this component is the
                  focus owner until this component receives a FOCUS_GAINED
                  event. If this request is denied because this component&apos;s
                  top-level window cannot become the focused window, the request
                  will be remembered and will be granted when the window is later
                  focused by the user.
                  &lt;p&gt;
                  This method returns a boolean value. If &lt;code&gt;false&lt;/code&gt; is returned,
                  the request is &lt;b&gt;guaranteed to fail&lt;/b&gt;. If &lt;code&gt;true&lt;/code&gt; is
                  returned, the request will succeed &lt;b&gt;unless&lt;/b&gt; it is vetoed, or an
                  extraordinary event, such as disposal of the component&apos;s peer, occurs
                  before the request can be granted by the native windowing system. Again,
                  while a return value of &lt;code&gt;true&lt;/code&gt; indicates that the request is
                  likely to succeed, developers must never assume that this component is
                  the focus owner until this component receives a FOCUS_GAINED event.
                  &lt;p&gt;
                  This method cannot be used to set the focus owner to no component at
                  all. Use &lt;code&gt;KeyboardFocusManager.clearGlobalFocusOwner&lt;/code&gt;
                  instead.
                  &lt;p&gt;
                  Because the focus behavior of this method is platform-dependent,
                  developers are strongly encouraged to use
                  &lt;code&gt;requestFocusInWindow&lt;/code&gt; when possible.
                  &lt;p&gt;
                  Every effort will be made to ensure that &lt;code&gt;FocusEvent&lt;/code&gt;s
                  generated as a
                  result of this request will have the specified temporary value. However,
                  because specifying an arbitrary temporary state may not be implementable
                  on all native windowing systems, correct behavior for this method can be
                  guaranteed only for lightweight &lt;code&gt;Component&lt;/code&gt;s.
                  This method is not intended
                  for general use, but exists instead as a hook for lightweight component
                  libraries, such as Swing.
                  &lt;p&gt;Note: Not all focus transfers result from invoking this method. As
                  such, a component may receive focus without this or any of the other{@code requestFocus} methods of {@code Component} being invoked.                
                <param>
                    temporary true if the focus change is temporary,
                      such as when the window loses the focus; for
                      more information on temporary focus changes see the
                      <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>                    
                </param>
                <return>
                    <code>false</code> if the focus change request is guaranteed to
                      fail; <code>true</code> if it is likely to succeed                    
                </return>
                <see>
                    java.awt.event.FocusEvent                    
                </see>
                <see>
                    #addFocusListener                    
                </see>
                <see>
                    #isFocusable                    
                </see>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    KeyboardFocusManager#clearGlobalFocusOwner                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="requestFocus" type="boolean" line="6191">
                <params>
                    <param name="temporary" type="boolean"/>
                </params>
            </method>
            <method name="requestFocus" type="boolean" line="6194">
                <params>
                    <param name="temporary" type="boolean"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
            </method>
            <javadoc line="6197">
                Requests that this Component get the input focus, if this
                  Component&apos;s top-level ancestor is already the focused
                  Window. This component must be displayable, focusable, visible
                  and all of its ancestors (with the exception of the top-level
                  Window) must be visible for the request to be granted. Every
                  effort will be made to honor the request; however, in some
                  cases it may be impossible to do so. Developers must never
                  assume that this Component is the focus owner until this
                  Component receives a FOCUS_GAINED event.
                  &lt;p&gt;
                  This method returns a boolean value. If &lt;code&gt;false&lt;/code&gt; is returned,
                  the request is &lt;b&gt;guaranteed to fail&lt;/b&gt;. If &lt;code&gt;true&lt;/code&gt; is
                  returned, the request will succeed &lt;b&gt;unless&lt;/b&gt; it is vetoed, or an
                  extraordinary event, such as disposal of the Component&apos;s peer, occurs
                  before the request can be granted by the native windowing system. Again,
                  while a return value of &lt;code&gt;true&lt;/code&gt; indicates that the request is
                  likely to succeed, developers must never assume that this Component is
                  the focus owner until this Component receives a FOCUS_GAINED event.
                  &lt;p&gt;
                  This method cannot be used to set the focus owner to no Component at
                  all. Use &lt;code&gt;KeyboardFocusManager.clearGlobalFocusOwner()&lt;/code&gt;
                  instead.
                  &lt;p&gt;
                  The focus behavior of this method can be implemented uniformly across
                  platforms, and thus developers are strongly encouraged to use this
                  method over &lt;code&gt;requestFocus&lt;/code&gt; when possible. Code which relies
                  on &lt;code&gt;requestFocus&lt;/code&gt; may exhibit different focus behavior on
                  different platforms.
                  &lt;p&gt;Note: Not all focus transfers result from invoking this method. As
                  such, a component may receive focus without this or any of the other{@code requestFocus} methods of {@code Component} being invoked.                
                <return>
                    <code>false</code> if the focus change request is guaranteed to
                      fail; <code>true</code> if it is likely to succeed                    
                </return>
                <see>
                    #requestFocus                    
                </see>
                <see>
                    java.awt.event.FocusEvent                    
                </see>
                <see>
                    #addFocusListener                    
                </see>
                <see>
                    #isFocusable                    
                </see>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    KeyboardFocusManager#clearGlobalFocusOwner                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="requestFocusInWindow" type="boolean" line="6238"/>
            <method name="requestFocusInWindow" type="boolean" line="6241">
                <params>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
            </method>
            <javadoc line="6244">
                Requests that this &lt;code&gt;Component&lt;/code&gt; get the input focus,
                  if this &lt;code&gt;Component&lt;/code&gt;&apos;s top-level ancestor is already
                  the focused &lt;code&gt;Window&lt;/code&gt;.  This component must be
                  displayable, focusable, visible and all of its ancestors (with
                  the exception of the top-level Window) must be visible for the
                  request to be granted. Every effort will be made to honor the
                  request; however, in some cases it may be impossible to do
                  so. Developers must never assume that this component is the
                  focus owner until this component receives a FOCUS_GAINED event.
                  &lt;p&gt;
                  This method returns a boolean value. If &lt;code&gt;false&lt;/code&gt; is returned,
                  the request is &lt;b&gt;guaranteed to fail&lt;/b&gt;. If &lt;code&gt;true&lt;/code&gt; is
                  returned, the request will succeed &lt;b&gt;unless&lt;/b&gt; it is vetoed, or an
                  extraordinary event, such as disposal of the component&apos;s peer, occurs
                  before the request can be granted by the native windowing system. Again,
                  while a return value of &lt;code&gt;true&lt;/code&gt; indicates that the request is
                  likely to succeed, developers must never assume that this component is
                  the focus owner until this component receives a FOCUS_GAINED event.
                  &lt;p&gt;
                  This method cannot be used to set the focus owner to no component at
                  all. Use &lt;code&gt;KeyboardFocusManager.clearGlobalFocusOwner&lt;/code&gt;
                  instead.
                  &lt;p&gt;
                  The focus behavior of this method can be implemented uniformly across
                  platforms, and thus developers are strongly encouraged to use this
                  method over &lt;code&gt;requestFocus&lt;/code&gt; when possible. Code which relies
                  on &lt;code&gt;requestFocus&lt;/code&gt; may exhibit different focus behavior on
                  different platforms.
                  &lt;p&gt;
                  Every effort will be made to ensure that &lt;code&gt;FocusEvent&lt;/code&gt;s
                  generated as a
                  result of this request will have the specified temporary value. However,
                  because specifying an arbitrary temporary state may not be implementable
                  on all native windowing systems, correct behavior for this method can be
                  guaranteed only for lightweight components. This method is not intended
                  for general use, but exists instead as a hook for lightweight component
                  libraries, such as Swing.
                  &lt;p&gt;Note: Not all focus transfers result from invoking this method. As
                  such, a component may receive focus without this or any of the other{@code requestFocus} methods of {@code Component} being invoked.                
                <param>
                    temporary true if the focus change is temporary,
                      such as when the window loses the focus; for
                      more information on temporary focus changes see the
                      <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>                    
                </param>
                <return>
                    <code>false</code> if the focus change request is guaranteed to
                      fail; <code>true</code> if it is likely to succeed                    
                </return>
                <see>
                    #requestFocus                    
                </see>
                <see>
                    java.awt.event.FocusEvent                    
                </see>
                <see>
                    #addFocusListener                    
                </see>
                <see>
                    #isFocusable                    
                </see>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    KeyboardFocusManager#clearGlobalFocusOwner                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="requestFocusInWindow" type="boolean" line="6298">
                <params>
                    <param name="temporary" type="boolean"/>
                </params>
            </method>
            <method name="requestFocusInWindow" type="boolean" line="6301">
                <params>
                    <param name="temporary" type="boolean"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
            </method>
            <method name="requestFocusHelper" type="boolean" line="6304">
                <params>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                </params>
            </method>
            <method name="requestFocusHelper" type="boolean" line="6307">
                <params>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
                <scope line="6308">
                    <scope line="6309"/>
                </scope>
                <declaration name="window" type="Component" line="6315"/>
                <scope line="6316">
                    <scope line="6317">
                        <scope line="6318"/>
                    </scope>
                </scope>
                <declaration name="peer" type="ComponentPeer" line="6325"/>
                <declaration name="heavyweight" type="Component" line="6326"/>
                <scope line="6327">
                    <scope line="6328"/>
                </scope>
                <scope line="6334">
                    <scope line="6335"/>
                </scope>
                <declaration name="time" type="long" line="6340"/>
                <declaration name="success" type="boolean" line="6341"/>
                <scope line="6342">
                    <scope line="6344"/>
                </scope>
                <scope line="6348">
                    <scope line="6349"/>
                </scope>
            </method>
            <method name="isRequestFocusAccepted" type="boolean" line="6355">
                <params>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
                <scope line="6356">
                    <scope line="6357"/>
                </scope>
                <declaration name="peer" type="ComponentPeer" line="6362"/>
                <scope line="6363">
                    <scope line="6364"/>
                </scope>
                <declaration name="window" type="Window" line="6369"/>
                <scope line="6370">
                    <scope line="6371"/>
                </scope>
                <declaration name="focusOwner" type="Component" line="6376"/>
                <scope line="6377">
                    <scope line="6379"/>
                </scope>
                <scope line="6383">
                    <scope line="6384"/>
                </scope>
                <scope line="6389">
                    <scope line="6390"/>
                </scope>
                <declaration name="ret" type="boolean" line="6395"/>
                <scope line="6396"/>
            </method>
            <declaration name="requestFocusController" type="RequestFocusController" line="6401"/>
            <class name="DummyRequestFocusController" line="6402">
                <implements interface="RequestFocusController"/>
                <method name="acceptRequestFocus" type="boolean" line="6403">
                    <params>
                        <param name="from" type="Component"/>
                        <param name="to" type="Component"/>
                        <param name="temporary" type="boolean"/>
                        <param name="focusedWindowChangeAllowed" type="boolean"/>
                        <param name="cause" type="CausedFocusEvent.Cause"/>
                    </params>
                </method>
            </class>
            <method name="setRequestFocusController" type="void" line="6407">
                <params>
                    <param name="requestController" type="RequestFocusController"/>
                </params>
                <scope line="6408"/>
                <scope line="6411"/>
            </method>
            <javadoc line="6415">
                Returns the Container which is the focus cycle root of this Component&apos;s
                  focus traversal cycle. Each focus traversal cycle has only a single
                  focus cycle root and each Component which is not a Container belongs to
                  only a single focus traversal cycle. Containers which are focus cycle
                  roots belong to two cycles: one rooted at the Container itself, and one
                  rooted at the Container&apos;s nearest focus-cycle-root ancestor. For such
                  Containers, this method will return the Container&apos;s nearest focus-cycle-
                  root ancestor.                
                <return>
                    this Component's nearest focus-cycle-root ancestor                    
                </return>
                <see>
                    Container#isFocusCycleRoot()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFocusCycleRootAncestor" type="Container" line="6428">
                <declaration name="rootAncestor" type="Container" line="6429"/>
                <scope line="6430"/>
            </method>
            <javadoc line="6435">
                Returns whether the specified Container is the focus cycle root of this
                  Component&apos;s focus traversal cycle. Each focus traversal cycle has only
                  a single focus cycle root and each Component which is not a Container
                  belongs to only a single focus traversal cycle.                
                <param>
                    container the Container to be tested                    
                </param>
                <return>
                    <code>true</code> if the specified Container is a focus-cycle-
                      root of this Component; <code>false</code> otherwise                    
                </return>
                <see>
                    Container#isFocusCycleRoot()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFocusCycleRoot" type="boolean" line="6446">
                <params>
                    <param name="container" type="Container"/>
                </params>
                <declaration name="rootAncestor" type="Container" line="6447"/>
            </method>
            <method name="getTraversalRoot" type="Container" line="6450"/>
            <javadoc line="6453">
                Transfers the focus to the next component, as though this Component were
                  the focus owner.                
                <see>
                    #requestFocus()                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="transferFocus" type="void" line="6459"/>
            <javadoc line="6462">
                @deprecated As of JDK version 1.1,
                  replaced by transferFocus().                
            </javadoc>
            <method name="nextFocus" type="void" line="6466"/>
            <method name="transferFocus" type="boolean" line="6469">
                <params>
                    <param name="clearOnFailure" type="boolean"/>
                </params>
                <scope line="6470"/>
                <declaration name="toFocus" type="Component" line="6473"/>
                <declaration name="res" type="boolean" line="6474"/>
                <scope line="6475"/>
                <scope line="6478">
                    <scope line="6479"/>
                </scope>
                <scope line="6484"/>
            </method>
            <method name="getNextFocusCandidate" type="Component" line="6489">
                <declaration name="rootAncestor" type="Container" line="6490"/>
                <declaration name="comp" type="Component" line="6491"/>
                <scope line="6492"/>
                <scope line="6496"/>
                <declaration name="candidate" type="Component" line="6499"/>
                <scope line="6500">
                    <declaration name="policy" type="FocusTraversalPolicy" line="6501"/>
                    <declaration name="toFocus" type="Component" line="6502"/>
                    <scope line="6503"/>
                    <scope line="6506">
                        <scope line="6508"/>
                    </scope>
                    <scope line="6512">
                        <declaration name="applet" type="Applet" line="6513"/>
                        <scope line="6514"/>
                    </scope>
                </scope>
                <scope line="6520"/>
            </method>
            <javadoc line="6525">
                Transfers the focus to the previous component, as though this Component
                  were the focus owner.                
                <see>
                    #requestFocus()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="transferFocusBackward" type="void" line="6531"/>
            <method name="transferFocusBackward" type="boolean" line="6534">
                <params>
                    <param name="clearOnFailure" type="boolean"/>
                </params>
                <declaration name="rootAncestor" type="Container" line="6535"/>
                <declaration name="comp" type="Component" line="6536"/>
                <scope line="6537"/>
                <declaration name="res" type="boolean" line="6541"/>
                <scope line="6542">
                    <declaration name="policy" type="FocusTraversalPolicy" line="6543"/>
                    <declaration name="toFocus" type="Component" line="6544"/>
                    <scope line="6545"/>
                    <scope line="6548"/>
                </scope>
                <scope line="6552">
                    <scope line="6553"/>
                </scope>
                <scope line="6558"/>
            </method>
            <javadoc line="6563">
                Transfers the focus up one focus traversal cycle. Typically, the focus
                  owner is set to this Component&apos;s focus cycle root, and the current focus
                  cycle root is set to the new focus owner&apos;s focus cycle root. If,
                  however, this Component&apos;s focus cycle root is a Window, then the focus
                  owner is set to the focus cycle root&apos;s default Component to focus, and
                  the current focus cycle root is unchanged.                
                <see>
                    #requestFocus()                    
                </see>
                <see>
                    Container#isFocusCycleRoot()                    
                </see>
                <see>
                    Container#setFocusCycleRoot(boolean)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="transferFocusUpCycle" type="void" line="6575">
                <declaration name="rootAncestor" type="Container" line="6576"/>
                <scope line="6577"/>
                <scope line="6579">
                    <declaration name="rootAncestorRootAncestor" type="Container" line="6580"/>
                </scope>
                <scope line="6584">
                    <declaration name="window" type="Window" line="6585"/>
                    <scope line="6586">
                        <declaration name="toFocus" type="Component" line="6587"/>
                        <scope line="6588"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="6595">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Component&lt;/code&gt; is the
                  focus owner.  This method is obsolete, and has been replaced by
                  &lt;code&gt;isFocusOwner()&lt;/code&gt;.                
                <return>
                    <code>true</code> if this <code>Component</code> is the
                      focus owner; <code>false</code> otherwise                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hasFocus" type="boolean" line="6603"/>
            <javadoc line="6606">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Component&lt;/code&gt; is the
                  focus owner.                
                <return>
                    <code>true</code> if this <code>Component</code> is the
                      focus owner; <code>false</code> otherwise                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFocusOwner" type="boolean" line="6613"/>
            <declaration name="autoFocusTransferOnDisposal" type="boolean" line="6616"/>
            <method name="setAutoFocusTransferOnDisposal" type="void" line="6617">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <method name="isAutoFocusTransferOnDisposal" type="boolean" line="6620"/>
            <javadoc line="6623">
                Adds the specified popup menu to the component.                
                <param>
                    popup the popup menu to be added to the component.                    
                </param>
                <see>
                    #remove(MenuComponent)                    
                </see>
                <exception>
                    NullPointerException if {@code popup} is {@code null}                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="add" type="void" line="6630">
                <params>
                    <param name="popup" type="PopupMenu"/>
                </params>
                <scope line="6631">
                    <scope line="6632"/>
                    <scope line="6635"/>
                    <scope line="6640">
                        <scope line="6641"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="6647">
                Removes the specified popup menu from the component.                
                <param>
                    popup the popup menu to be removed                    
                </param>
                <see>
                    #add(PopupMenu)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="remove" type="void" line="6653">
                <params>
                    <param name="popup" type="MenuComponent"/>
                </params>
                <scope line="6654">
                    <scope line="6655"/>
                    <declaration name="index" type="int" line="6658"/>
                    <scope line="6659">
                        <declaration name="pmenu" type="PopupMenu" line="6660"/>
                        <scope line="6661"/>
                        <scope line="6666"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="6672">
                Returns a string representing the state of this component. This
                  method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this component's state                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="paramString" type="String" line="6681">
                <declaration name="thisName" type="String" line="6682"/>
                <declaration name="str" type="String" line="6683"/>
                <scope line="6684"/>
                <scope line="6687"/>
                <scope line="6690"/>
            </method>
            <javadoc line="6695">
                Returns a string representation of this component and its values.                
                <return>
                    a string representation of this component                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="6700"/>
            <javadoc line="6703">
                Prints a listing of this component to the standard system output
                  stream &lt;code&gt;System.out&lt;/code&gt;.                
                <see>
                    java.lang.System#out                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="list" type="void" line="6709"/>
            <javadoc line="6712">
                Prints a listing of this component to the specified output
                  stream.                
                <param>
                    out   a print stream                    
                </param>
                <throws>
                    NullPointerException if {@code out} is {@code null}                    
                </throws>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="list" type="void" line="6719">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
            </method>
            <javadoc line="6722">
                Prints out a list, starting at the specified indentation, to the
                  specified print stream.                
                <param>
                    out      a print stream                    
                </param>
                <param>
                    indent   number of spaces to indent                    
                </param>
                <see>
                    java.io.PrintStream#println(java.lang.Object)                    
                </see>
                <throws>
                    NullPointerException if {@code out} is {@code null}                    
                </throws>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="list" type="void" line="6731">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="6732"/>
            </method>
            <javadoc line="6737">
                Prints a listing to the specified print writer.                
                <param>
                    out  the print writer to print to                    
                </param>
                <throws>
                    NullPointerException if {@code out} is {@code null}                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="list" type="void" line="6743">
                <params>
                    <param name="out" type="PrintWriter"/>
                </params>
            </method>
            <javadoc line="6746">
                Prints out a list, starting at the specified indentation, to
                  the specified print writer.                
                <param>
                    out the print writer to print to                    
                </param>
                <param>
                    indent the number of spaces to indent                    
                </param>
                <throws>
                    NullPointerException if {@code out} is {@code null}                    
                </throws>
                <see>
                    java.io.PrintStream#println(java.lang.Object)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="list" type="void" line="6755">
                <params>
                    <param name="out" type="PrintWriter"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="6756"/>
            </method>
            <method name="getNativeContainer" type="Container" line="6761">
                <declaration name="p" type="Container" line="6762"/>
                <scope line="6763"/>
            </method>
            <javadoc line="6768">
                Adds a PropertyChangeListener to the listener list. The listener is
                  registered for all bound properties of this class, including the
                  following:
                  &lt;ul&gt;
                  &lt;li&gt;this Component&apos;s font (&quot;font&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s background color (&quot;background&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s foreground color (&quot;foreground&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s focusability (&quot;focusable&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s focus traversal keys enabled state
                  (&quot;focusTraversalKeysEnabled&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s Set of FORWARD_TRAVERSAL_KEYS
                  (&quot;forwardFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s Set of BACKWARD_TRAVERSAL_KEYS
                  (&quot;backwardFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s Set of UP_CYCLE_TRAVERSAL_KEYS
                  (&quot;upCycleFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s preferred size (&quot;preferredSize&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s minimum size (&quot;minimumSize&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s maximum size (&quot;maximumSize&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s name (&quot;name&quot;)&lt;/li&gt;
                  &lt;/ul&gt;
                  Note that if this &lt;code&gt;Component&lt;/code&gt; is inheriting a bound property, then no
                  event will be fired in response to a change in the inherited property.
                  &lt;p&gt;
                  If &lt;code&gt;listener&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.                
                <param>
                    listener  the property change listener to be added                    
                </param>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
                <see>
                    #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="6800">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="6801">
                    <scope line="6802"/>
                    <scope line="6805"/>
                </scope>
            </method>
            <javadoc line="6811">
                Removes a PropertyChangeListener from the listener list. This method
                  should be used to remove PropertyChangeListeners that were registered
                  for all bound properties of this class.
                  &lt;p&gt;
                  If listener is null, no exception is thrown and no action is performed.                
                <param>
                    listener the PropertyChangeListener to be removed                    
                </param>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
                <see>
                    #removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="6822">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="6823">
                    <scope line="6824"/>
                </scope>
            </method>
            <javadoc line="6830">
                Returns an array of all the property change listeners
                  registered on this component.                
                <return>
                    all of this component's <code>PropertyChangeListener</code>s
                      or an empty array if no property change
                      listeners are currently registered                    
                </return>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners(java.lang.String)                    
                </see>
                <see>
                    java.beans.PropertyChangeSupport#getPropertyChangeListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="6842">
                <scope line="6843">
                    <scope line="6844"/>
                </scope>
            </method>
            <javadoc line="6850">
                Adds a PropertyChangeListener to the listener list for a specific
                  property. The specified property may be user-defined, or one of the
                  following:
                  &lt;ul&gt;
                  &lt;li&gt;this Component&apos;s font (&quot;font&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s background color (&quot;background&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s foreground color (&quot;foreground&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s focusability (&quot;focusable&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s focus traversal keys enabled state
                  (&quot;focusTraversalKeysEnabled&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s Set of FORWARD_TRAVERSAL_KEYS
                  (&quot;forwardFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s Set of BACKWARD_TRAVERSAL_KEYS
                  (&quot;backwardFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Component&apos;s Set of UP_CYCLE_TRAVERSAL_KEYS
                  (&quot;upCycleFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;/ul&gt;
                  Note that if this &lt;code&gt;Component&lt;/code&gt; is inheriting a bound property, then no
                  event will be fired in response to a change in the inherited property.
                  &lt;p&gt;
                  If &lt;code&gt;propertyName&lt;/code&gt; or &lt;code&gt;listener&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is taken.                
                <param>
                    propertyName one of the property names listed above                    
                </param>
                <param>
                    listener the property change listener to be added                    
                </param>
                <see>
                    #removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners(java.lang.String)                    
                </see>
                <see>
                    #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="6879">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="6880">
                    <scope line="6881"/>
                    <scope line="6884"/>
                </scope>
            </method>
            <javadoc line="6890">
                Removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; from the listener
                  list for a specific property. This method should be used to remove
                  &lt;code&gt;PropertyChangeListener&lt;/code&gt;s
                  that were registered for a specific bound property.
                  &lt;p&gt;
                  If &lt;code&gt;propertyName&lt;/code&gt; or &lt;code&gt;listener&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is taken.                
                <param>
                    propertyName a valid property name                    
                </param>
                <param>
                    listener the PropertyChangeListener to be removed                    
                </param>
                <see>
                    #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners(java.lang.String)                    
                </see>
                <see>
                    #removePropertyChangeListener(java.beans.PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="6904">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="6905">
                    <scope line="6906"/>
                </scope>
            </method>
            <javadoc line="6912">
                Returns an array of all the listeners which have been associated
                  with the named property.                
                <return>
                    all of the <code>PropertyChangeListener</code>s associated with
                      the named property; if no such listeners have been added or
                      if <code>propertyName</code> is <code>null</code>, an empty
                      array is returned                    
                </return>
                <see>
                    #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    #removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="6924">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
                <scope line="6925">
                    <scope line="6926"/>
                </scope>
            </method>
            <javadoc line="6932">
                Support for reporting bound property changes for Object properties.
                  This method can be called when a bound property has changed and it will
                  send the appropriate PropertyChangeEvent to any registered
                  PropertyChangeListeners.                
                <param>
                    propertyName the property whose value has changed                    
                </param>
                <param>
                    oldValue the property's previous value                    
                </param>
                <param>
                    newValue the property's new value                    
                </param>
            </javadoc>
            <method name="firePropertyChange" type="void" line="6941">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <declaration name="changeSupport" type="PropertyChangeSupport" line="6942"/>
                <scope line="6943"/>
                <scope line="6946"/>
            </method>
            <javadoc line="6951">
                Support for reporting bound property changes for boolean properties.
                  This method can be called when a bound property has changed and it will
                  send the appropriate PropertyChangeEvent to any registered
                  PropertyChangeListeners.                
                <param>
                    propertyName the property whose value has changed                    
                </param>
                <param>
                    oldValue the property's previous value                    
                </param>
                <param>
                    newValue the property's new value                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="firePropertyChange" type="void" line="6961">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="boolean"/>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="changeSupport" type="PropertyChangeSupport" line="6962"/>
                <scope line="6963"/>
            </method>
            <javadoc line="6968">
                Support for reporting bound property changes for integer properties.
                  This method can be called when a bound property has changed and it will
                  send the appropriate PropertyChangeEvent to any registered
                  PropertyChangeListeners.                
                <param>
                    propertyName the property whose value has changed                    
                </param>
                <param>
                    oldValue the property's previous value                    
                </param>
                <param>
                    newValue the property's new value                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="firePropertyChange" type="void" line="6978">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
                <declaration name="changeSupport" type="PropertyChangeSupport" line="6979"/>
                <scope line="6980"/>
            </method>
            <javadoc line="6985">
                Reports a bound property change.                
                <param>
                    propertyName the programmatic name of the property
                      that was changed                    
                </param>
                <param>
                    oldValue the old value of the property (as a byte)                    
                </param>
                <param>
                    newValue the new value of the property (as a byte)                    
                </param>
                <see>
                    #firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="firePropertyChange" type="void" line="6994">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="byte"/>
                    <param name="newValue" type="byte"/>
                </params>
                <scope line="6995"/>
            </method>
            <javadoc line="7000">
                Reports a bound property change.                
                <param>
                    propertyName the programmatic name of the property
                      that was changed                    
                </param>
                <param>
                    oldValue the old value of the property (as a char)                    
                </param>
                <param>
                    newValue the new value of the property (as a char)                    
                </param>
                <see>
                    #firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="firePropertyChange" type="void" line="7009">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="char"/>
                    <param name="newValue" type="char"/>
                </params>
                <scope line="7010"/>
            </method>
            <javadoc line="7015">
                Reports a bound property change.                
                <param>
                    propertyName the programmatic name of the property
                      that was changed                    
                </param>
                <param>
                    oldValue the old value of the property (as a short)                    
                </param>
                <param>
                    newValue the old value of the property (as a short)                    
                </param>
                <see>
                    #firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="firePropertyChange" type="void" line="7024">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="short"/>
                    <param name="newValue" type="short"/>
                </params>
                <scope line="7025"/>
            </method>
            <javadoc line="7030">
                Reports a bound property change.                
                <param>
                    propertyName the programmatic name of the property
                      that was changed                    
                </param>
                <param>
                    oldValue the old value of the property (as a long)                    
                </param>
                <param>
                    newValue the new value of the property (as a long)                    
                </param>
                <see>
                    #firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="firePropertyChange" type="void" line="7039">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="long"/>
                    <param name="newValue" type="long"/>
                </params>
                <scope line="7040"/>
            </method>
            <javadoc line="7045">
                Reports a bound property change.                
                <param>
                    propertyName the programmatic name of the property
                      that was changed                    
                </param>
                <param>
                    oldValue the old value of the property (as a float)                    
                </param>
                <param>
                    newValue the new value of the property (as a float)                    
                </param>
                <see>
                    #firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="firePropertyChange" type="void" line="7054">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="float"/>
                    <param name="newValue" type="float"/>
                </params>
                <scope line="7055"/>
            </method>
            <javadoc line="7060">
                Reports a bound property change.                
                <param>
                    propertyName the programmatic name of the property
                      that was changed                    
                </param>
                <param>
                    oldValue the old value of the property (as a double)                    
                </param>
                <param>
                    newValue the new value of the property (as a double)                    
                </param>
                <see>
                    #firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="firePropertyChange" type="void" line="7069">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="double"/>
                    <param name="newValue" type="double"/>
                </params>
                <scope line="7070"/>
            </method>
            <declaration name="componentSerializedDataVersion" type="int" line="7075"/>
            <javadoc line="7075">
                Component Serialized Data Version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="7080">
                This hack is for Swing serialization. It will invoke
                  the Swing package private method &lt;code&gt;compWriteObjectNotify&lt;/code&gt;.                
            </javadoc>
            <method name="doSwingSerialization" type="void" line="7084">
                <declaration name="swingPackage" type="Package" line="7085"/>
                <scope line="7086">
                    <scope line="7087">
                        <declaration name="swingClass" type="Class" line="7088"/>
                        <anonymous_class line="7089">
                            <method name="run" type="Object" line="7090"/>
                        </anonymous_class>
                        <declaration name="methods" type="Method[]" line="7089"/>
                        <scope line="7095">
                            <declaration name="method" type="Method" line="7096"/>
                            <scope line="7097">
                                <anonymous_class line="7098">
                                    <method name="run" type="Object" line="7099"/>
                                </anonymous_class>
                                <scope line="7105"/>
                                <scope line="7108"/>
                                <scope line="7110"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="7118">
                Writes default serializable fields to stream.  Writes
                  a variety of serializable listeners as optional data.
                  The non-serializable listeners are detected and
                  no attempt is made to serialize them.                
                <param>
                    s the <code>ObjectOutputStream</code> to write                    
                </param>
                <serialData>
                    <code>null</code> terminated sequence of
                      0 or more pairs; the pair consists of a <code>String</code>
                      and an <code>Object</code>; the <code>String</code> indicates
                      the type of object and is one of the following (as of 1.4):
                      <code>componentListenerK</code> indicating an
                      <code>ComponentListener</code> object;
                      <code>focusListenerK</code> indicating an
                      <code>FocusListener</code> object;
                      <code>keyListenerK</code> indicating an
                      <code>KeyListener</code> object;
                      <code>mouseListenerK</code> indicating an
                      <code>MouseListener</code> object;
                      <code>mouseMotionListenerK</code> indicating an
                      <code>MouseMotionListener</code> object;
                      <code>inputMethodListenerK</code> indicating an
                      <code>InputMethodListener</code> object;
                      <code>hierarchyListenerK</code> indicating an
                      <code>HierarchyListener</code> object;
                      <code>hierarchyBoundsListenerK</code> indicating an
                      <code>HierarchyBoundsListener</code> object;
                      <code>mouseWheelListenerK</code> indicating an
                      <code>MouseWheelListener</code> object                    
                </serialData>
                <serialData>
                    an optional <code>ComponentOrientation</code>
                      (after <code>inputMethodListener</code>, as of 1.2)                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(java.io.ObjectOutputStream,java.lang.String,java.util.EventListener)                    
                </see>
                <see>
                    #componentListenerK                    
                </see>
                <see>
                    #focusListenerK                    
                </see>
                <see>
                    #keyListenerK                    
                </see>
                <see>
                    #mouseListenerK                    
                </see>
                <see>
                    #mouseMotionListenerK                    
                </see>
                <see>
                    #inputMethodListenerK                    
                </see>
                <see>
                    #hierarchyListenerK                    
                </see>
                <see>
                    #hierarchyBoundsListenerK                    
                </see>
                <see>
                    #mouseWheelListenerK                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="7160">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="7177">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and if it isn&apos;t
                  &lt;code&gt;null&lt;/code&gt; adds a listener to receive a variety
                  of events fired by the component.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the <code>ObjectInputStream</code> to read                    
                </param>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="7185">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="7191"/>
                <declaration name="keyOrNull" type="Object" line="7197"/>
                <scope line="7198">
                    <declaration name="key" type="String" line="7199"/>
                </scope>
                <declaration name="orient" type="Object" line="7208"/>
                <scope line="7209"/>
                <scope line="7212">
                    <scope line="7213"/>
                </scope>
                <scope line="7217"/>
                <scope line="7220"/>
                <scope line="7223">
                    <scope line="7224">
                        <declaration name="key" type="String" line="7225"/>
                        <scope line="7226"/>
                        <scope line="7229"/>
                        <scope line="7232"/>
                    </scope>
                </scope>
                <scope line="7237">
                    <scope line="7238"/>
                </scope>
                <scope line="7242">
                    <scope line="7243">
                        <declaration name="key" type="String" line="7244"/>
                        <scope line="7245"/>
                        <scope line="7248"/>
                    </scope>
                </scope>
                <scope line="7253">
                    <scope line="7254"/>
                </scope>
                <scope line="7258">
                    <declaration name="npopups" type="int" line="7259"/>
                    <scope line="7260">
                        <declaration name="popup" type="PopupMenu" line="7261"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="7266">
                Sets the language-sensitive orientation that is to be used to order
                  the elements or text within this component.  Language-sensitive
                  &lt;code&gt;LayoutManager&lt;/code&gt; and &lt;code&gt;Component&lt;/code&gt;
                  subclasses will use this property to
                  determine how to lay out and draw components.
                  &lt;p&gt;
                  At construction time, a component&apos;s orientation is set to
                  &lt;code&gt;ComponentOrientation.UNKNOWN&lt;/code&gt;,
                  indicating that it has not been specified
                  explicitly.  The UNKNOWN orientation behaves the same as
                  &lt;code&gt;ComponentOrientation.LEFT_TO_RIGHT&lt;/code&gt;.
                  &lt;p&gt;
                  To set the orientation of a single component, use this method.
                  To set the orientation of an entire component
                  hierarchy, use{@link #applyComponentOrientation applyComponentOrientation}.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <see>
                    ComponentOrientation                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <author>
                    Laura Werner, IBM                    
                </author>
                <beaninfobound>
                    : true                    
                </beaninfobound>
            </javadoc>
            <method name="setComponentOrientation" type="void" line="7290">
                <params>
                    <param name="o" type="ComponentOrientation"/>
                </params>
                <declaration name="oldValue" type="ComponentOrientation" line="7291"/>
            </method>
            <javadoc line="7296">
                Retrieves the language-sensitive orientation that is to be used to order
                  the elements or text within this component.  &lt;code&gt;LayoutManager&lt;/code&gt;
                  and &lt;code&gt;Component&lt;/code&gt;
                  subclasses that wish to respect orientation should call this method to
                  get the component&apos;s orientation before performing layout or drawing.                
                <see>
                    ComponentOrientation                    
                </see>
                <author>
                    Laura Werner, IBM                    
                </author>
            </javadoc>
            <method name="getComponentOrientation" type="ComponentOrientation" line="7305"/>
            <javadoc line="7308">
                Sets the &lt;code&gt;ComponentOrientation&lt;/code&gt; property of this component
                  and all components contained within it.
                  &lt;p&gt;
                  This method changes layout-related information, and therefore,
                  invalidates the component hierarchy.                
                <param>
                    orientation the new component orientation of this component and
                      the components contained within it.                    
                </param>
                <exception>
                    NullPointerException if <code>orientation</code> is null.                    
                </exception>
                <see>
                    #setComponentOrientation                    
                </see>
                <see>
                    #getComponentOrientation                    
                </see>
                <see>
                    #invalidate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="applyComponentOrientation" type="void" line="7322">
                <params>
                    <param name="orientation" type="ComponentOrientation"/>
                </params>
                <scope line="7323"/>
            </method>
            <method name="canBeFocusOwner" type="boolean" line="7328">
                <scope line="7329"/>
            </method>
            <javadoc line="7334">
                Checks that this component meets the prerequesites to be focus owner:
                  - it is enabled, visible, focusable
                  - it&apos;s parents are all enabled and showing
                  - top-level window is focusable
                  - if focus cycle root has DefaultFocusTraversalPolicy then it also checks that this policy accepts
                  this component as focus owner                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="canBeFocusOwnerRecursively" type="boolean" line="7343">
                <scope line="7344"/>
                <scope line="7347">
                    <scope line="7348"/>
                </scope>
            </method>
            <javadoc line="7354">
                Fix the location of the HW component in a LW container hierarchy.                
            </javadoc>
            <method name="relocateComponent" type="void" line="7357">
                <scope line="7358">
                    <scope line="7359"/>
                    <declaration name="nativeX" type="int" line="7362"/>
                    <declaration name="nativeY" type="int" line="7363"/>
                    <scope line="7364"/>
                </scope>
            </method>
            <javadoc line="7371">
                Returns the &lt;code&gt;Window&lt;/code&gt; ancestor of the component.                
                <return>
                    Window ancestor of the component or component by itself if it is Window;
                      null, if component is not a part of window hierarchy                    
                </return>
            </javadoc>
            <method name="getContainingWindow" type="Window" line="7376"/>
            <method name="initIDs" type="void" line="7379"/>
            <javadoc line="7379">
                Initialize JNI field and method IDs                
            </javadoc>
            <declaration name="accessibleContext" type="AccessibleContext" line="7383"/>
            <javadoc line="7384">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated
                  with this &lt;code&gt;Component&lt;/code&gt;.
                  The method implemented by this base
                  class returns null.  Classes that extend &lt;code&gt;Component&lt;/code&gt;
                  should implement this method to return the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; associated with the subclass.                
                <return>
                    the <code>AccessibleContext</code> of this
                      <code>Component</code>                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="7395"/>
            <class name="AccessibleAWTComponent" line="7398">
                <extends class="AccessibleContext"/>
                <implements interface="Serializable"/>
                <implements interface="AccessibleComponent"/>
                <javadoc line="7398">
                    Inner class of Component used to provide default support for
                      accessibility.  This class is not meant to be used directly by
                      application developers, but is instead meant only to be
                      subclassed by component developers.
                      &lt;p&gt;
                      The class used to obtain the accessible role for this object.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="7408"/>
                <javadoc line="7409">
                    Though the class is abstract, this should be called by
                      all sub-classes.                    
                </javadoc>
                <method name="AccessibleAWTComponent" type="constructor" line="7413"/>
                <declaration name="accessibleAWTComponentHandler" type="ComponentListener" line="7415"/>
                <declaration name="accessibleAWTFocusHandler" type="FocusListener" line="7416"/>
                <class name="AccessibleAWTComponentHandler" line="7417">
                    <implements interface="ComponentListener"/>
                    <javadoc line="7417">
                        Fire PropertyChange listener, if one is registered,
                          when shown/hidden..                        
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="componentHidden" type="void" line="7423">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                        <scope line="7424"/>
                    </method>
                    <method name="componentShown" type="void" line="7428">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                        <scope line="7429"/>
                    </method>
                    <method name="componentMoved" type="void" line="7433">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                    </method>
                    <method name="componentResized" type="void" line="7435">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                    </method>
                </class>
                <class name="AccessibleAWTFocusHandler" line="7438">
                    <implements interface="FocusListener"/>
                    <javadoc line="7438">
                        Fire PropertyChange listener, if one is registered,
                          when focus events happen                        
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="focusGained" type="void" line="7444">
                        <params>
                            <param name="event" type="FocusEvent"/>
                        </params>
                        <scope line="7445"/>
                    </method>
                    <method name="focusLost" type="void" line="7449">
                        <params>
                            <param name="event" type="FocusEvent"/>
                        </params>
                        <scope line="7450"/>
                    </method>
                </class>
                <javadoc line="7455">
                    Adds a &lt;code&gt;PropertyChangeListener&lt;/code&gt; to the listener list.                    
                    <param>
                        listener  the property change listener to be added                        
                    </param>
                </javadoc>
                <method name="addPropertyChangeListener" type="void" line="7459">
                    <params>
                        <param name="listener" type="PropertyChangeListener"/>
                    </params>
                    <scope line="7460"/>
                    <scope line="7464"/>
                </method>
                <javadoc line="7470">
                    Remove a PropertyChangeListener from the listener list.
                      This removes a PropertyChangeListener that was registered
                      for all properties.                    
                    <param>
                        listener  The PropertyChangeListener to be removed                        
                    </param>
                </javadoc>
                <method name="removePropertyChangeListener" type="void" line="7476">
                    <params>
                        <param name="listener" type="PropertyChangeListener"/>
                    </params>
                    <scope line="7477"/>
                    <scope line="7481"/>
                </method>
                <javadoc line="7487">
                    Gets the accessible name of this object.  This should almost never
                      return &lt;code&gt;java.awt.Component.getName()&lt;/code&gt;,
                      as that generally isn&apos;t a localized name,
                      and doesn&apos;t have meaning for the user.  If the
                      object is fundamentally a text object (e.g. a menu item), the
                      accessible name should be the text of the object (e.g. &quot;save&quot;).
                      If the object has a tooltip, the tooltip text may also be an
                      appropriate String to return.                    
                    <return>
                        the localized name of the object -- can be
                          <code>null</code> if this
                          object does not have a name                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleContext#setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleName" type="String" line="7501"/>
                <javadoc line="7504">
                    Gets the accessible description of this object.  This should be
                      a concise, localized description of what this object is - what
                      is its meaning to the user.  If the object has a tooltip, the
                      tooltip text may be an appropriate string to return, assuming
                      it contains a concise description of the object (instead of just
                      the name of the object - e.g. a &quot;Save&quot; icon on a toolbar that
                      had &quot;save&quot; as the tooltip text shouldn&apos;t return the tooltip
                      text as the description, but something like &quot;Saves the current
                      text document&quot; instead).                    
                    <return>
                        the localized description of the object -- can be
                          <code>null</code> if this object does not have a description                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleContext#setAccessibleDescription                        
                    </see>
                </javadoc>
                <method name="getAccessibleDescription" type="String" line="7518"/>
                <javadoc line="7521">
                    Gets the role of this object.                    
                    <return>
                        an instance of <code>AccessibleRole</code>
                          describing the role of the object                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="7527"/>
                <javadoc line="7530">
                    Gets the state of this object.                    
                    <return>
                        an instance of <code>AccessibleStateSet</code>
                          containing the current state set of the object                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="7536"/>
                <javadoc line="7539">
                    Gets the &lt;code&gt;Accessible&lt;/code&gt; parent of this object.
                      If the parent of this object implements &lt;code&gt;Accessible&lt;/code&gt;,
                      this method should simply return &lt;code&gt;getParent&lt;/code&gt;.                    
                    <return>
                        the <code>Accessible</code> parent of this
                          object -- can be <code>null</code> if this
                          object does not have an <code>Accessible</code> parent                        
                    </return>
                </javadoc>
                <method name="getAccessibleParent" type="Accessible" line="7547">
                    <scope line="7548"/>
                    <scope line="7551">
                        <declaration name="parent" type="Container" line="7552"/>
                        <scope line="7553"/>
                    </scope>
                </method>
                <javadoc line="7559">
                    Gets the index of this object in its accessible parent.                    
                    <return>
                        the index of this object in its parent; or -1 if this
                          object does not have an accessible parent                        
                    </return>
                    <see>
                        #getAccessibleParent                        
                    </see>
                </javadoc>
                <method name="getAccessibleIndexInParent" type="int" line="7565"/>
                <javadoc line="7568">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement &lt;code&gt;Accessible&lt;/code&gt;,
                      then this method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="7574"/>
                <javadoc line="7577">
                    Returns the nth &lt;code&gt;Accessible&lt;/code&gt; child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth <code>Accessible</code> child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="7582">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="7585">
                    Returns the locale of this object.                    
                    <return>
                        the locale of this object                        
                    </return>
                </javadoc>
                <method name="getLocale" type="Locale" line="7589"/>
                <javadoc line="7592">
                    Gets the &lt;code&gt;AccessibleComponent&lt;/code&gt; associated
                      with this object if one exists.
                      Otherwise return &lt;code&gt;null&lt;/code&gt;.                    
                    <return>
                        the component                        
                    </return>
                </javadoc>
                <method name="getAccessibleComponent" type="AccessibleComponent" line="7598"/>
                <javadoc line="7601">
                    Gets the background color of this object.                    
                    <return>
                        the background color, if supported, of the object;
                          otherwise, <code>null</code>                        
                    </return>
                </javadoc>
                <method name="getBackground" type="Color" line="7606"/>
                <javadoc line="7609">
                    Sets the background color of this object.
                      (For transparency, see &lt;code&gt;isOpaque&lt;/code&gt;.)                    
                    <param>
                        c the new <code>Color</code> for the background                        
                    </param>
                    <see>
                        Component#isOpaque                        
                    </see>
                </javadoc>
                <method name="setBackground" type="void" line="7615">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <javadoc line="7618">
                    Gets the foreground color of this object.                    
                    <return>
                        the foreground color, if supported, of the object;
                          otherwise, <code>null</code>                        
                    </return>
                </javadoc>
                <method name="getForeground" type="Color" line="7623"/>
                <javadoc line="7626">
                    Sets the foreground color of this object.                    
                    <param>
                        c the new <code>Color</code> for the foreground                        
                    </param>
                </javadoc>
                <method name="setForeground" type="void" line="7630">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <javadoc line="7633">
                    Gets the &lt;code&gt;Cursor&lt;/code&gt; of this object.                    
                    <return>
                        the <code>Cursor</code>, if supported,
                          of the object; otherwise, <code>null</code>                        
                    </return>
                </javadoc>
                <method name="getCursor" type="Cursor" line="7638"/>
                <javadoc line="7641">
                    Sets the &lt;code&gt;Cursor&lt;/code&gt; of this object.
                      &lt;p&gt;
                      The method may have no visual effect if the Java platform
                      implementation and/or the native system do not support
                      changing the mouse cursor shape.                    
                    <param>
                        cursor the new <code>Cursor</code> for the object                        
                    </param>
                </javadoc>
                <method name="setCursor" type="void" line="7649">
                    <params>
                        <param name="cursor" type="Cursor"/>
                    </params>
                </method>
                <javadoc line="7652">
                    Gets the &lt;code&gt;Font&lt;/code&gt; of this object.                    
                    <return>
                        the <code>Font</code>, if supported,
                          for the object; otherwise, <code>null</code>                        
                    </return>
                </javadoc>
                <method name="getFont" type="Font" line="7657"/>
                <javadoc line="7660">
                    Sets the &lt;code&gt;Font&lt;/code&gt; of this object.                    
                    <param>
                        f the new <code>Font</code> for the object                        
                    </param>
                </javadoc>
                <method name="setFont" type="void" line="7664">
                    <params>
                        <param name="f" type="Font"/>
                    </params>
                </method>
                <javadoc line="7667">
                    Gets the &lt;code&gt;FontMetrics&lt;/code&gt; of this object.                    
                    <param>
                        f the <code>Font</code>                        
                    </param>
                    <return>
                        the <code>FontMetrics</code>, if supported,
                          the object; otherwise, <code>null</code>                        
                    </return>
                    <see>
                        #getFont                        
                    </see>
                </javadoc>
                <method name="getFontMetrics" type="FontMetrics" line="7674">
                    <params>
                        <param name="f" type="Font"/>
                    </params>
                    <scope line="7675"/>
                    <scope line="7678"/>
                </method>
                <javadoc line="7682">
                    Determines if the object is enabled.                    
                    <return>
                        true if object is enabled; otherwise, false                        
                    </return>
                </javadoc>
                <method name="isEnabled" type="boolean" line="7686"/>
                <javadoc line="7689">
                    Sets the enabled state of the object.                    
                    <param>
                        b if true, enables this object; otherwise, disables it                        
                    </param>
                </javadoc>
                <method name="setEnabled" type="void" line="7693">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                    <declaration name="old" type="boolean" line="7694"/>
                    <scope line="7696">
                        <scope line="7697">
                            <scope line="7698"/>
                            <scope line="7701"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="7707">
                    Determines if the object is visible.  Note: this means that the
                      object intends to be visible; however, it may not in fact be
                      showing on the screen because one of the objects that this object
                      is contained by is not visible.  To determine if an object is
                      showing on the screen, use &lt;code&gt;isShowing&lt;/code&gt;.                    
                    <return>
                        true if object is visible; otherwise, false                        
                    </return>
                </javadoc>
                <method name="isVisible" type="boolean" line="7715"/>
                <javadoc line="7718">
                    Sets the visible state of the object.                    
                    <param>
                        b if true, shows this object; otherwise, hides it                        
                    </param>
                </javadoc>
                <method name="setVisible" type="void" line="7722">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                    <declaration name="old" type="boolean" line="7723"/>
                    <scope line="7725">
                        <scope line="7726">
                            <scope line="7727"/>
                            <scope line="7730"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="7736">
                    Determines if the object is showing.  This is determined by checking
                      the visibility of the object and ancestors of the object.  Note:
                      this will return true even if the object is obscured by another
                      (for example, it happens to be underneath a menu that was pulled
                      down).                    
                    <return>
                        true if object is showing; otherwise, false                        
                    </return>
                </javadoc>
                <method name="isShowing" type="boolean" line="7744"/>
                <javadoc line="7747">
                    Checks whether the specified point is within this object&apos;s bounds,
                      where the point&apos;s x and y coordinates are defined to be relative to
                      the coordinate system of the object.                    
                    <param>
                        p the <code>Point</code> relative to the
                          coordinate system of the object                        
                    </param>
                    <return>
                        true if object contains <code>Point</code>; otherwise false                        
                    </return>
                </javadoc>
                <method name="contains" type="boolean" line="7755">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                </method>
                <javadoc line="7758">
                    Returns the location of the object on the screen.                    
                    <return>
                        location of object on screen -- can be
                          <code>null</code> if this object is not on the screen                        
                    </return>
                </javadoc>
                <method name="getLocationOnScreen" type="Point" line="7763">
                    <scope line="7764">
                        <scope line="7765"/>
                        <scope line="7768"/>
                    </scope>
                </method>
                <javadoc line="7773">
                    Gets the location of the object relative to the parent in the form
                      of a point specifying the object&apos;s top-left corner in the screen&apos;s
                      coordinate space.                    
                    <return>
                        an instance of Point representing the top-left corner of
                          the object's bounds in the coordinate space of the screen;
                          <code>null</code> if this object or its parent are not on the screen                        
                    </return>
                </javadoc>
                <method name="getLocation" type="Point" line="7781"/>
                <javadoc line="7784">
                    Sets the location of the object relative to the parent.                    
                    <param>
                        p  the coordinates of the object                        
                    </param>
                </javadoc>
                <method name="setLocation" type="void" line="7788">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                </method>
                <javadoc line="7791">
                    Gets the bounds of this object in the form of a Rectangle object.
                      The bounds specify this object&apos;s width, height, and location
                      relative to its parent.                    
                    <return>
                        a rectangle indicating this component's bounds;
                          <code>null</code> if this object is not on the screen                        
                    </return>
                </javadoc>
                <method name="getBounds" type="Rectangle" line="7798"/>
                <javadoc line="7801">
                    Sets the bounds of this object in the form of a
                      &lt;code&gt;Rectangle&lt;/code&gt; object.
                      The bounds specify this object&apos;s width, height, and location
                      relative to its parent.                    
                    <param>
                        r a rectangle indicating this component's bounds                        
                    </param>
                </javadoc>
                <method name="setBounds" type="void" line="7808">
                    <params>
                        <param name="r" type="Rectangle"/>
                    </params>
                </method>
                <javadoc line="7811">
                    Returns the size of this object in the form of a
                      &lt;code&gt;Dimension&lt;/code&gt; object. The height field of the
                      &lt;code&gt;Dimension&lt;/code&gt; object contains this objects&apos;s
                      height, and the width field of the &lt;code&gt;Dimension&lt;/code&gt;
                      object contains this object&apos;s width.                    
                    <return>
                        a <code>Dimension</code> object that indicates
                          the size of this component; <code>null</code> if
                          this object is not on the screen                        
                    </return>
                </javadoc>
                <method name="getSize" type="Dimension" line="7821"/>
                <javadoc line="7824">
                    Resizes this object so that it has width and height.                    
                    <param>
                        d - the dimension specifying the new size of the object                        
                    </param>
                </javadoc>
                <method name="setSize" type="void" line="7828">
                    <params>
                        <param name="d" type="Dimension"/>
                    </params>
                </method>
                <javadoc line="7831">
                    Returns the &lt;code&gt;Accessible&lt;/code&gt; child,
                      if one exists, contained at the local
                      coordinate &lt;code&gt;Point&lt;/code&gt;.  Otherwise returns
                      &lt;code&gt;null&lt;/code&gt;.                    
                    <param>
                        p the point defining the top-left corner of
                          the <code>Accessible</code>, given in the
                          coordinate space of the object's parent                        
                    </param>
                    <return>
                        the <code>Accessible</code>, if it exists,
                          at the specified location; else <code>null</code>                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="7842">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                </method>
                <javadoc line="7845">
                    Returns whether this object can accept focus or not.                    
                    <return>
                        true if object can accept focus; otherwise false                        
                    </return>
                </javadoc>
                <method name="isFocusTraversable" type="boolean" line="7849"/>
                <javadoc line="7852">
                    Requests focus for this object.                    
                </javadoc>
                <method name="requestFocus" type="void" line="7855"/>
                <javadoc line="7858">
                    Adds the specified focus listener to receive focus events from this
                      component.                    
                    <param>
                        l the focus listener                        
                    </param>
                </javadoc>
                <method name="addFocusListener" type="void" line="7863">
                    <params>
                        <param name="l" type="FocusListener"/>
                    </params>
                </method>
                <javadoc line="7866">
                    Removes the specified focus listener so it no longer receives focus
                      events from this component.                    
                    <param>
                        l the focus listener                        
                    </param>
                </javadoc>
                <method name="removeFocusListener" type="void" line="7871">
                    <params>
                        <param name="l" type="FocusListener"/>
                    </params>
                </method>
            </class>
            <javadoc line="7875">
                Gets the index of this object in its accessible parent.
                  If this object does not have an accessible parent, returns
                  -1.                
                <return>
                    the index of this object in its accessible parent                    
                </return>
            </javadoc>
            <method name="getAccessibleIndexInParent" type="int" line="7881">
                <scope line="7882">
                    <declaration name="index" type="int" line="7883"/>
                    <declaration name="parent" type="Container" line="7884"/>
                    <scope line="7885">
                        <declaration name="ca" type="Component" line="7886"/>
                        <scope line="7887">
                            <scope line="7888"/>
                            <scope line="7891"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="7899">
                Gets the current state set of this object.                
                <return>
                    an instance of <code>AccessibleStateSet</code>
                      containing the current state set of the object                    
                </return>
                <see>
                    AccessibleState                    
                </see>
            </javadoc>
            <method name="getAccessibleStateSet" type="AccessibleStateSet" line="7905">
                <scope line="7906">
                    <declaration name="states" type="AccessibleStateSet" line="7907"/>
                    <scope line="7908"/>
                    <scope line="7911"/>
                    <scope line="7914"/>
                    <scope line="7917"/>
                    <scope line="7920"/>
                    <scope line="7923">
                        <declaration name="ac" type="AccessibleContext" line="7924"/>
                        <scope line="7925">
                            <declaration name="ap" type="Accessible" line="7926"/>
                            <scope line="7927">
                                <declaration name="pac" type="AccessibleContext" line="7928"/>
                                <scope line="7929">
                                    <declaration name="as" type="AccessibleSelection" line="7930"/>
                                    <scope line="7931">
                                        <declaration name="i" type="int" line="7933"/>
                                        <scope line="7934">
                                            <scope line="7935"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="7944">
                        <scope line="7945"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="7952">
                Checks that the given object is instance of the given class.                
                <param>
                    obj Object to be checked                    
                </param>
                <param>
                    className The name of the class. Must be fully-qualified class name.                    
                </param>
                <return>
                    true, if this object is instanceof given class,
                      false, otherwise, or if obj or className is null                    
                </return>
            </javadoc>
            <method name="isInstanceOf" type="boolean" line="7959">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="className" type="String"/>
                </params>
                <declaration name="cls" type="Class" line="7962"/>
                <scope line="7963">
                    <scope line="7964"/>
                </scope>
            </method>
            <javadoc line="7971">
                Check whether we can trust the current bounds of the component.
                  The return value of false indicates that the container of the
                  component is invalid, and therefore needs to be layed out, which would
                  probably mean changing the bounds of its children.
                  Null-layout of the container or absence of the container mean
                  the bounds of the component are final and can be trusted.                
            </javadoc>
            <method name="areBoundsValid" type="boolean" line="7979">
                <declaration name="cont" type="Container" line="7980"/>
            </method>
            <javadoc line="7983">
                Applies the shape to the component                
                <param>
                    shape Shape to be applied to the component                    
                </param>
            </javadoc>
            <method name="applyCompoundShape" type="void" line="7987">
                <params>
                    <param name="shape" type="Region"/>
                </params>
                <scope line="7989">
                    <scope line="7990"/>
                </scope>
                <scope line="7995">
                    <declaration name="peer" type="ComponentPeer" line="7996"/>
                    <scope line="7997">
                        <scope line="7998"/>
                        <scope line="8001">
                            <scope line="8002"/>
                        </scope>
                        <scope line="8008">
                            <scope line="8009"/>
                            <declaration name="compAbsolute" type="Point" line="8013"/>
                            <scope line="8014"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="8022">
                Returns the shape previously set with applyCompoundShape().
                  If the component is LW or no shape was applied yet,
                  the method returns the normal shape.                
            </javadoc>
            <method name="getAppliedShape" type="Region" line="8027"/>
            <method name="getLocationOnWindow" type="Point" line="8031">
                <declaration name="curLocation" type="Point" line="8033"/>
                <scope line="8034"/>
            </method>
            <javadoc line="8040">
                Returns the full shape of the component located in window coordinates                
            </javadoc>
            <method name="getNormalShape" type="Region" line="8043">
                <declaration name="compAbsolute" type="Point" line="8045"/>
            </method>
            <javadoc line="8048">
                Returns the &quot;opaque shape&quot; of the component.
                  The opaque shape of a lightweight components is the actual shape that
                  needs to be cut off of the heavyweight components in order to mix this
                  lightweight component correctly with them.
                  The method is overriden in the java.awt.Container to handle non-opaque
                  containers containing opaque children.
                  See 6637655 for details.                
            </javadoc>
            <method name="getOpaqueShape" type="Region" line="8057">
                <scope line="8059"/>
                <scope line="8062"/>
            </method>
            <method name="getSiblingIndexAbove" type="int" line="8066">
                <declaration name="parent" type="Container" line="8068"/>
                <scope line="8069"/>
                <declaration name="nextAbove" type="int" line="8072"/>
            </method>
            <method name="getHWPeerAboveMe" type="ComponentPeer" line="8075">
                <declaration name="cont" type="Container" line="8077"/>
                <declaration name="indexAbove" type="int" line="8078"/>
                <scope line="8079">
                    <scope line="8080">
                        <declaration name="comp" type="Component" line="8081"/>
                        <scope line="8082"/>
                    </scope>
                    <scope line="8086"/>
                </scope>
            </method>
            <method name="getSiblingIndexBelow" type="int" line="8094">
                <declaration name="parent" type="Container" line="8096"/>
                <scope line="8097"/>
                <declaration name="nextBelow" type="int" line="8100"/>
            </method>
            <method name="isNonOpaqueForMixing" type="boolean" line="8103"/>
            <method name="calculateCurrentShape" type="Region" line="8106">
                <declaration name="s" type="Region" line="8108"/>
                <scope line="8109"/>
                <scope line="8112">
                    <declaration name="comp" type="Component" line="8113"/>
                    <declaration name="cont" type="Container" line="8114"/>
                    <scope line="8115">
                        <scope line="8116">
                            <declaration name="c" type="Component" line="8117"/>
                            <scope line="8118"/>
                        </scope>
                        <scope line="8122"/>
                        <scope line="8125"/>
                    </scope>
                </scope>
                <scope line="8132"/>
            </method>
            <method name="applyCurrentShape" type="void" line="8137">
                <scope line="8139">
                    <scope line="8140"/>
                </scope>
                <scope line="8145"/>
            </method>
            <method name="subtractAndApplyShape" type="void" line="8150">
                <params>
                    <param name="s" type="Region"/>
                </params>
                <scope line="8152"/>
            </method>
            <method name="applyCurrentShapeBelowMe" type="void" line="8157">
                <declaration name="parent" type="Container" line="8159"/>
                <scope line="8160">
                    <declaration name="parent2" type="Container" line="8162"/>
                    <scope line="8163"/>
                </scope>
            </method>
            <method name="subtractAndApplyShapeBelowMe" type="void" line="8170">
                <declaration name="parent" type="Container" line="8172"/>
                <scope line="8173">
                    <declaration name="opaqueShape" type="Region" line="8174"/>
                    <declaration name="parent2" type="Container" line="8176"/>
                    <scope line="8177"/>
                </scope>
            </method>
            <method name="mixOnShowing" type="void" line="8184">
                <scope line="8185">
                    <scope line="8186"/>
                    <scope line="8189"/>
                    <scope line="8192"/>
                    <scope line="8195"/>
                </scope>
            </method>
            <method name="mixOnHiding" type="void" line="8200">
                <params>
                    <param name="isLightweight" type="boolean"/>
                </params>
                <scope line="8201">
                    <scope line="8202"/>
                    <scope line="8205"/>
                    <scope line="8208"/>
                </scope>
            </method>
            <method name="mixOnReshaping" type="void" line="8213">
                <scope line="8214">
                    <scope line="8215"/>
                    <scope line="8218"/>
                    <scope line="8221"/>
                    <scope line="8224"/>
                </scope>
            </method>
            <method name="mixOnZOrderChanging" type="void" line="8229">
                <params>
                    <param name="oldZorder" type="int"/>
                    <param name="newZorder" type="int"/>
                </params>
                <scope line="8230">
                    <declaration name="becameHigher" type="boolean" line="8231"/>
                    <declaration name="parent" type="Container" line="8232"/>
                    <scope line="8233"/>
                    <scope line="8236"/>
                    <scope line="8239">
                        <scope line="8240">
                            <scope line="8241"/>
                        </scope>
                        <scope line="8245">
                            <scope line="8246"/>
                        </scope>
                    </scope>
                    <scope line="8251">
                        <scope line="8252"/>
                        <scope line="8255">
                            <scope line="8256">
                                <declaration name="shape" type="Region" line="8257"/>
                                <scope line="8258">
                                    <declaration name="c" type="Component" line="8259"/>
                                    <scope line="8260"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="mixOnValidating" type="void" line="8270"/>
            <method name="isMixingNeeded" type="boolean" line="8272">
                <scope line="8273">
                    <scope line="8274"/>
                </scope>
                <scope line="8279">
                    <scope line="8280"/>
                </scope>
                <declaration name="window" type="Window" line="8285"/>
                <scope line="8286">
                    <scope line="8287">
                        <scope line="8288"/>
                    </scope>
                </scope>
                <scope line="8294">
                    <scope line="8295"/>
                </scope>
            </method>
            <method name="updateZOrder" type="void" line="8302"/>
        </class>
    </source>