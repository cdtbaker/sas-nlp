<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URISyntaxException"/>
        <import package="java.net.URI"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.awt.AWTPermission"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.peer.DesktopPeer"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.HeadlessToolkit"/>
        <import package="java.io.FilePermission"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="Desktop" line="16">
            <javadoc line="16">
                The {@code Desktop} class allows a Java application to launch
                  associated applications registered on the native desktop to handle
                  a {@link java.net.URI} or a file.
                  &lt;p&gt; Supported operations include:
                  &lt;ul&gt;
                  &lt;li&gt;launching the user-default browser to show a specified
                  URI;&lt;/li&gt;
                  &lt;li&gt;launching the user-default mail client with an optional{@code mailto} URI;&lt;/li&gt;
                  &lt;li&gt;launching a registered application to open, edit or print a
                  specified file.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt; This class provides methods corresponding to these
                  operations. The methods look for the associated application
                  registered on the current platform, and launch it to handle a URI
                  or file. If there is no associated application or the associated
                  application fails to be launched, an exception is thrown.
                  &lt;p&gt; An application is registered to a URI or file type; for
                  example, the {@code &quot;sxi&quot;} file extension is typically registered
                  to StarOffice.  The mechanism of registering, accessing, and
                  launching the associated application is platform-dependent.
                  &lt;p&gt; Each operation is an action type represented by the {@link Desktop.Action} class.
                  &lt;p&gt; Note: when some action is invoked and the associated
                  application is executed, it will be executed on the same system as
                  the one on which the Java application was launched.                
                <since>
                    1.6                    
                </since>
                <author>
                    Armin Chen                    
                </author>
                <author>
                    George Zhang                    
                </author>
            </javadoc>
            <declaration name="Action" type="enum" line="46"/>
            <javadoc line="46">
                Represents an action type.  Each platform supports a different
                  set of actions.  You may use the {@link Desktop#isSupported}method to determine if the given action is supported by the
                  current platform.                
                <see>
                    java.awt.Desktop#isSupported(java.awt.Desktop.Action)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="53"/>
            <declaration name="peer" type="DesktopPeer" line="75"/>
            <javadoc line="70">
                Represents a &quot;browse&quot; action.                
                <see>
                    Desktop#browse(java.net.URI)                    
                </see>
            </javadoc>
            <javadoc line="76">
                Suppresses default constructor for noninstantiability.                
            </javadoc>
            <method name="Desktop" type="constructor" line="79"/>
            <javadoc line="82">
                Returns the &lt;code&gt;Desktop&lt;/code&gt; instance of the current
                  browser context.  On some platforms the Desktop API may not be
                  supported; use the {@link #isDesktopSupported} method to
                  determine if the current desktop is supported.                
                <return>
                    the Desktop instance of the current browser context                    
                </return>
                <throws>
                    HeadlessException if {@link GraphicsEnvironment#isHeadless()} returns {@code true}                    
                </throws>
                <throws>
                    UnsupportedOperationException if this class is not
                      supported on the current platform                    
                </throws>
                <see>
                    #isDesktopSupported()                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="getDesktop" type="Desktop" line="94">
                <scope line="96"/>
                <declaration name="context" type="sun.awt.AppContext" line="99"/>
                <declaration name="desktop" type="Desktop" line="100"/>
                <scope line="101"/>
            </method>
            <javadoc line="107">
                Tests whether this class is supported on the current platform.
                  If it&apos;s supported, use {@link #getDesktop()} to retrieve an
                  instance.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this class is supported on the
                      current platform; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <see>
                    #getDesktop()                    
                </see>
            </javadoc>
            <method name="isDesktopSupported" type="boolean" line="115">
                <declaration name="defaultToolkit" type="Toolkit" line="116"/>
                <scope line="117"/>
            </method>
            <javadoc line="122">
                Tests whether an action is supported on the current platform.
                  &lt;p&gt;Even when the platform supports an action, a file or URI may
                  not have a registered application for the action.  For example,
                  most of the platforms support the {@link Desktop.Action#OPEN}action.  But for a specific file, there may not be an
                  application registered to open it.  In this case, {@link #isSupported} may return {@code true}, but the corresponding
                  action method will throw an {@link IOException}.                
                <param>
                    action the specified {@link Action}                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified action is supported on
                      the current platform; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <see>
                    Desktop.Action                    
                </see>
            </javadoc>
            <method name="isSupported" type="boolean" line="134">
                <params>
                    <param name="action" type="Action"/>
                </params>
            </method>
            <javadoc line="137">
                Checks if the file is a valid file and readable.                
                <throws>
                    SecurityException If a security manager exists and its{@link SecurityManager#checkRead(java.lang.String)} method
                      denies read access to the file                    
                </throws>
                <throws>
                    NullPointerException if file is null                    
                </throws>
                <throws>
                    IllegalArgumentException if file doesn&apos;t exist                    
                </throws>
            </javadoc>
            <method name="checkFileValidation" type="void" line="144">
                <params>
                    <param name="file" type="File"/>
                </params>
                <scope line="146"/>
            </method>
            <javadoc line="151">
                Checks if the action type is supported.                
                <param>
                    actionType the action type in question                    
                </param>
                <throws>
                    UnsupportedOperationException if the specified action type is not
                      supported on the current platform                    
                </throws>
            </javadoc>
            <method name="checkActionSupport" type="void" line="157">
                <params>
                    <param name="actionType" type="Action"/>
                </params>
                <scope line="158"/>
            </method>
            <javadoc line="162">
                Calls to the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method with
                  an &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt;
                  permission.                
            </javadoc>
            <method name="checkAWTPermission" type="void" line="167">
                <declaration name="sm" type="SecurityManager" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="173">
                Launches the associated application to open the file.
                  &lt;p&gt; If the specified file is a directory, the file manager of
                  the current platform is launched to open it.                
                <param>
                    file the file to be opened with the associated application                    
                </param>
                <throws>
                    NullPointerException if {@code file} is {@code null}                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified file doesn&apos;t
                      exist                    
                </throws>
                <throws>
                    UnsupportedOperationException if the current platform
                      does not support the {@link Desktop.Action#OPEN} action                    
                </throws>
                <throws>
                    IOException if the specified file has no associated
                      application or the associated application fails to be launched                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its{@link java.lang.SecurityManager#checkRead(java.lang.String)}method denies read access to the file, or it denies the
                      &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt;
                      permission, or the calling thread is not allowed to create a
                      subprocess                    
                </throws>
                <see>
                    java.awt.AWTPermission                    
                </see>
            </javadoc>
            <method name="open" type="void" line="191">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="198">
                Launches the associated editor application and opens a file for
                  editing.                
                <param>
                    file the file to be opened for editing                    
                </param>
                <throws>
                    NullPointerException if the specified file is {@code null}                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified file doesn&apos;t
                      exist                    
                </throws>
                <throws>
                    UnsupportedOperationException if the current platform
                      does not support the {@link Desktop.Action#EDIT} action                    
                </throws>
                <throws>
                    IOException if the specified file has no associated
                      editor, or the associated application fails to be launched                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its{@link java.lang.SecurityManager#checkRead(java.lang.String)}method denies read access to the file, or {@link java.lang.SecurityManager#checkWrite(java.lang.String)} method
                      denies write access to the file, or it denies the
                      &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt;
                      permission, or the calling thread is not allowed to create a
                      subprocess                    
                </throws>
                <see>
                    java.awt.AWTPermission                    
                </see>
            </javadoc>
            <method name="edit" type="void" line="216">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="224">
                Prints a file with the native desktop printing facility, using
                  the associated application&apos;s print command.                
                <param>
                    file the file to be printed                    
                </param>
                <throws>
                    NullPointerException if the specified file is {@codenull}                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified file doesn&apos;t
                      exist                    
                </throws>
                <throws>
                    UnsupportedOperationException if the current platform
                      does not support the {@link Desktop.Action#PRINT} action                    
                </throws>
                <throws>
                    IOException if the specified file has no associated
                      application that can be used to print it                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its{@link java.lang.SecurityManager#checkRead(java.lang.String)}method denies read access to the file, or its {@link java.lang.SecurityManager#checkPrintJobAccess()} method denies
                      the permission to print the file, or the calling thread is not
                      allowed to create a subprocess                    
                </throws>
            </javadoc>
            <method name="print" type="void" line="239">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="241"/>
                <scope line="242"/>
            </method>
            <javadoc line="249">
                Launches the default browser to display a {@code URI}.
                  If the default browser is not able to handle the specified{@code URI}, the application registered for handling{@code URIs} of the specified type is invoked. The application
                  is determined from the protocol and path of the {@code URI}, as
                  defined by the {@code URI} class.
                  &lt;p&gt;
                  If the calling thread does not have the necessary permissions,
                  and this is invoked from within an applet,{@code AppletContext.showDocument()} is used. Similarly, if the calling
                  does not have the necessary permissions, and this is invoked from within
                  a Java Web Started application, {@code BasicService.showDocument()}is used.                
                <param>
                    uri the URI to be displayed in the user default browser                    
                </param>
                <throws>
                    NullPointerException if {@code uri} is {@code null}                    
                </throws>
                <throws>
                    UnsupportedOperationException if the current platform
                      does not support the {@link Desktop.Action#BROWSE} action                    
                </throws>
                <throws>
                    IOException if the user default browser is not found,
                      or it fails to be launched, or the default handler application
                      failed to be launched                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and it
                      denies the
                      &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt;
                      permission, or the calling thread is not allowed to create a
                      subprocess; and not invoked from within an applet or Java Web Started
                      application                    
                </throws>
                <throws>
                    IllegalArgumentException if the necessary permissions
                      are not available and the URI can not be converted to a {@code URL}                    
                </throws>
                <see>
                    java.net.URI                    
                </see>
                <see>
                    java.awt.AWTPermission                    
                </see>
                <see>
                    java.applet.AppletContext                    
                </see>
            </javadoc>
            <method name="browse" type="void" line="278">
                <params>
                    <param name="uri" type="URI"/>
                </params>
                <declaration name="securityException" type="SecurityException" line="279"/>
                <scope line="280"/>
                <scope line="284"/>
                <scope line="288"/>
                <scope line="291"/>
                <declaration name="url" type="URL" line="295"/>
                <scope line="296"/>
                <scope line="299"/>
                <declaration name="db" type="sun.awt.DesktopBrowse" line="302"/>
                <scope line="303"/>
            </method>
            <javadoc line="308">
                Launches the mail composing window of the user default mail
                  client.                
                <throws>
                    UnsupportedOperationException if the current platform
                      does not support the {@link Desktop.Action#MAIL} action                    
                </throws>
                <throws>
                    IOException if the user default mail client is not
                      found, or it fails to be launched                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and it
                      denies the
                      &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt;
                      permission, or the calling thread is not allowed to create a
                      subprocess                    
                </throws>
                <see>
                    java.awt.AWTPermission                    
                </see>
            </javadoc>
            <method name="mail" type="void" line="322">
                <declaration name="mailtoURI" type="URI" line="326"/>
                <scope line="327"/>
                <scope line="331"/>
            </method>
            <javadoc line="334">
                Launches the mail composing window of the user default mail
                  client, filling the message fields specified by a {@codemailto:} URI.
                  &lt;p&gt; A &lt;code&gt;mailto:&lt;/code&gt; URI can specify message fields
                  including &lt;i&gt;&quot;to&quot;&lt;/i&gt;, &lt;i&gt;&quot;cc&quot;&lt;/i&gt;, &lt;i&gt;&quot;subject&quot;&lt;/i&gt;,
                  &lt;i&gt;&quot;body&quot;&lt;/i&gt;, etc.  See &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2368.txt&quot;&gt;The mailto URL
                  scheme (RFC 2368)&lt;/a&gt; for the {@code mailto:} URI specification
                  details.                
                <param>
                    mailtoURI the specified {@code mailto:} URI                    
                </param>
                <throws>
                    NullPointerException if the specified URI is {@codenull}                    
                </throws>
                <throws>
                    IllegalArgumentException if the URI scheme is not
                      &lt;code&gt;&quot;mailto&quot;&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if the current platform
                      does not support the {@link Desktop.Action#MAIL} action                    
                </throws>
                <throws>
                    IOException if the user default mail client is not
                      found or fails to be launched                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and it
                      denies the
                      &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt;
                      permission, or the calling thread is not allowed to create a
                      subprocess                    
                </throws>
                <see>
                    java.net.URI                    
                </see>
                <see>
                    java.awt.AWTPermission                    
                </see>
            </javadoc>
            <method name="mail" type="void" line="359">
                <params>
                    <param name="mailtoURI" type="URI"/>
                </params>
                <scope line="364"/>
            </method>
            <method name="checkExec" type="void" line="369">
                <declaration name="sm" type="SecurityManager" line="370"/>
                <scope line="371"/>
            </method>
        </class>
    </source>