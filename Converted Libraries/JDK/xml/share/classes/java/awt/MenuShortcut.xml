<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event.KeyEvent"/>
        <class name="MenuShortcut" line="3">
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                The &lt;code&gt;MenuShortcut&lt;/code&gt;class represents a keyboard accelerator
                  for a MenuItem.
                  &lt;p&gt;
                  Menu shortcuts are created using virtual keycodes, not characters.
                  For example, a menu shortcut for Ctrl-a (assuming that Control is
                  the accelerator key) would be created with code like the following:
                  &lt;p&gt;
                  &lt;code&gt;MenuShortcut ms = new MenuShortcut(KeyEvent.VK_A, false);&lt;/code&gt;
                  &lt;p&gt; or alternatively
                  &lt;p&gt;
                  &lt;code&gt;MenuShortcut ms = new MenuShortcut(KeyEvent.getExtendedKeyCodeForChar(&apos;A&apos;), false);&lt;/code&gt;
                  &lt;p&gt;
                  Menu shortcuts may also be constructed for a wider set of keycodes
                  using the &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt; call.
                  For example, a menu shortcut for &quot;Ctrl+cyrillic ef&quot; is created by
                  &lt;p&gt;
                  &lt;code&gt;MenuShortcut ms = new MenuShortcut(KeyEvent.getExtendedKeyCodeForChar(&apos;\u0444&apos;), false);&lt;/code&gt;
                  &lt;p&gt;
                  Note that shortcuts created with a keycode or an extended keycode defined as a constant in &lt;code&gt;KeyEvent&lt;/code&gt;
                  work regardless of the current keyboard layout. However, a shortcut made of
                  an extended keycode not listed in &lt;code&gt;KeyEvent&lt;/code&gt;
                  only work if the current keyboard layout produces a corresponding letter.
                  &lt;p&gt;
                  The accelerator key is platform-dependent and may be obtained
                  via {@link Toolkit#getMenuShortcutKeyMask}.                
                <author>
                    Thomas Ball                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="key" type="int" line="33"/>
            <javadoc line="33">
                The virtual keycode for the menu shortcut.
                  This is the keycode with which the menu shortcut will be created.
                  Note that it is a virtual keycode, not a character,
                  e.g. KeyEvent.VK_A, not &apos;a&apos;.
                  Note: in 1.1.x you must use setActionCommand() on a menu item
                  in order for its shortcut to work, otherwise it will fire a null
                  action command.                
                <serial>
                                        
                </serial>
                <see>
                    #getKey()                    
                </see>
                <see>
                    #usesShiftModifier()                    
                </see>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="usesShift" type="boolean" line="48"/>
            <javadoc line="48">
                Indicates whether the shft key was pressed.
                  If true, the shift key was pressed.
                  If false, the shift key was not pressed                
                <serial>
                                        
                </serial>
                <see>
                    #usesShiftModifier()                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="57"/>
            <javadoc line="58">
                Constructs a new MenuShortcut for the specified virtual keycode.                
                <param>
                    key the raw keycode for this MenuShortcut, as would be returned
                      in the keyCode field of a {@link java.awt.event.KeyEvent KeyEvent} if
                      this key were pressed.                    
                </param>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
            </javadoc>
            <method name="MenuShortcut" type="constructor" line="65">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="68">
                Constructs a new MenuShortcut for the specified virtual keycode.                
                <param>
                    key the raw keycode for this MenuShortcut, as would be returned
                      in the keyCode field of a {@link java.awt.event.KeyEvent KeyEvent} if
                      this key were pressed.                    
                </param>
                <param>
                    useShiftModifier indicates whether this MenuShortcut is invoked
                      with the SHIFT key down.                    
                </param>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
            </javadoc>
            <method name="MenuShortcut" type="constructor" line="77">
                <params>
                    <param name="key" type="int"/>
                    <param name="useShiftModifier" type="boolean"/>
                </params>
            </method>
            <javadoc line="81">
                Returns the raw keycode of this MenuShortcut.                
                <return>
                    the raw keycode of this MenuShortcut.                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getKey" type="int" line="87"/>
            <javadoc line="90">
                Returns whether this MenuShortcut must be invoked using the SHIFT key.                
                <return>
                    <code>true</code> if this MenuShortcut must be invoked using the
                      SHIFT key, <code>false</code> otherwise.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="usesShiftModifier" type="boolean" line="96"/>
            <javadoc line="99">
                Returns whether this MenuShortcut is the same as another:
                  equality is defined to mean that both MenuShortcuts use the same key
                  and both either use or don&apos;t use the SHIFT key.                
                <param>
                    s the MenuShortcut to compare with this.                    
                </param>
                <return>
                    <code>true</code> if this MenuShortcut is the same as another,
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="108">
                <params>
                    <param name="s" type="MenuShortcut"/>
                </params>
            </method>
            <javadoc line="111">
                Returns whether this MenuShortcut is the same as another:
                  equality is defined to mean that both MenuShortcuts use the same key
                  and both either use or don&apos;t use the SHIFT key.                
                <param>
                    obj the Object to compare with this.                    
                </param>
                <return>
                    <code>true</code> if this MenuShortcut is the same as another,
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="120">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="121"/>
            </method>
            <javadoc line="126">
                Returns the hashcode for this MenuShortcut.                
                <return>
                    the hashcode for this MenuShortcut.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="131"/>
            <javadoc line="134">
                Returns an internationalized description of the MenuShortcut.                
                <return>
                    a string representation of this MenuShortcut.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="139">
                <declaration name="modifiers" type="int" line="140"/>
                <scope line="141"/>
                <scope line="144"/>
            </method>
            <javadoc line="149">
                Returns the parameter string representing the state of this
                  MenuShortcut. This string is useful for debugging.                
                <return>
                    the parameter string of this MenuShortcut.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="paramString" type="String" line="155">
                <declaration name="str" type="String" line="156"/>
                <scope line="157"/>
            </method>
        </class>
    </source>