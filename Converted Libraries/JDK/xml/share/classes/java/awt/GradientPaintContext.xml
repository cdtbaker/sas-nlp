<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.image.Raster"/>
        <import package="sun.awt.image.IntegerComponentRaster"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.lang.ref.WeakReference"/>
        <class name="GradientPaintContext" line="37">
            <implements interface="PaintContext"/>
            <declaration name="xrgbmodel" type="ColorModel" line="38"/>
            <declaration name="xbgrmodel" type="ColorModel" line="40"/>
            <declaration name="cachedModel" type="ColorModel" line="43"/>
            <declaration name="cached" type="WeakReference" line="44"/>
            <method name="getCachedRaster" type="Raster" line="46">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="47">
                    <scope line="48">
                        <declaration name="ras" type="Raster" line="49"/>
                        <scope line="53"/>
                    </scope>
                </scope>
            </method>
            <method name="putCachedRaster" type="void" line="62">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="ras" type="Raster"/>
                </params>
                <scope line="63">
                    <declaration name="cras" type="Raster" line="64"/>
                    <scope line="65">
                        <declaration name="cw" type="int" line="66"/>
                        <declaration name="ch" type="int" line="67"/>
                        <declaration name="iw" type="int" line="68"/>
                        <declaration name="ih" type="int" line="69"/>
                        <scope line="70"/>
                        <scope line="73"/>
                    </scope>
                </scope>
            </method>
            <declaration name="x1" type="double" line="82"/>
            <declaration name="y1" type="double" line="83"/>
            <declaration name="dx" type="double" line="84"/>
            <declaration name="dy" type="double" line="85"/>
            <declaration name="cyclic" type="boolean" line="86"/>
            <declaration name="interp" type="int" line="87"/>
            <declaration name="saved" type="Raster" line="88"/>
            <declaration name="model" type="ColorModel" line="89"/>
            <method name="GradientPaintContext" type="constructor" line="93">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="p1" type="Point2D"/>
                    <param name="p2" type="Point2D"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="c1" type="Color"/>
                    <param name="c2" type="Color"/>
                    <param name="cyclic" type="boolean"/>
                </params>
                <comment line="94">
                    First calculate the distance moved in user space when                    
                </comment>
                <comment line="95">
                    we move a single unit along the X &amp; Y axes in device space.                    
                </comment>
                <comment line="107">
                    Now calculate the (square of the) user space distance                    
                </comment>
                <comment line="108">
                    between the anchor points. This value equals:                    
                </comment>
                <comment line="109">
                    (UserVec . UserVec)                    
                </comment>
                <comment line="118">
                    Now calculate the proportional distance moved along the                    
                </comment>
                <comment line="119">
                    vector from p1 to p2 when we move a unit along X &amp; Y in                    
                </comment>
                <comment line="120">
                    device space.                    
                </comment>
                <comment line="121">
                                        
                </comment>
                <comment line="122">
                    The length of the projection of the Device Axis Vector is                    
                </comment>
                <comment line="123">
                    its dot product with the Unit User Vector:                    
                </comment>
                <comment line="124">
                    (DevAxisVec . (UserVec / Len(UserVec))                    
                </comment>
                <comment line="125">
                                        
                </comment>
                <comment line="126">
                    The &quot;proportional&quot; length is that length divided again                    
                </comment>
                <comment line="127">
                    by the length of the User Vector:                    
                </comment>
                <comment line="128">
                    (DevAxisVec . (UserVec / Len(UserVec))) / Len(UserVec)                    
                </comment>
                <comment line="129">
                    which simplifies to:                    
                </comment>
                <comment line="130">
                    ((DevAxisVec . UserVec) / Len(UserVec)) / Len(UserVec)                    
                </comment>
                <comment line="131">
                    which simplifies to:                    
                </comment>
                <comment line="132">
                    (DevAxisVec . UserVec) / LenSquared(UserVec)                    
                </comment>
                <comment line="140">
                    We are acyclic                    
                </comment>
                <comment line="142">
                    If we are using the acyclic form below, we need                    
                </comment>
                <comment line="143">
                    dx to be non-negative for simplicity of scanning                    
                </comment>
                <comment line="144">
                    across the scan lines for the transition points.                    
                </comment>
                <comment line="145">
                    To ensure that constraint, we negate the dx/dy                    
                </comment>
                <comment line="146">
                    values and swap the points and colors.                    
                </comment>
                <declaration name="xvec" type="Point2D" line="96"/>
                <declaration name="yvec" type="Point2D" line="97"/>
                <scope line="98">
                    <declaration name="inverse" type="AffineTransform" line="99"/>
                </scope>
                <scope line="102"/>
                <declaration name="udx" type="double" line="110"/>
                <declaration name="udy" type="double" line="111"/>
                <declaration name="ulenSq" type="double" line="112"/>
                <scope line="114"/>
                <scope line="117">
                    <scope line="136"/>
                    <scope line="139">
                        <scope line="141">
                            <declaration name="p" type="Point2D" line="147"/>
                            <declaration name="c" type="Color" line="148"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="dp1" type="Point2D" line="155"/>
                <declaration name="rgb1" type="int" line="160"/>
                <declaration name="rgb2" type="int" line="161"/>
                <declaration name="a1" type="int" line="162"/>
                <declaration name="r1" type="int" line="163"/>
                <declaration name="g1" type="int" line="164"/>
                <declaration name="b1" type="int" line="165"/>
                <declaration name="da" type="int" line="166"/>
                <declaration name="dr" type="int" line="167"/>
                <declaration name="dg" type="int" line="168"/>
                <declaration name="db" type="int" line="169"/>
                <scope line="170">
                    <scope line="172">
                        <declaration name="dcm" type="DirectColorModel" line="173"/>
                        <declaration name="tmp" type="int" line="174"/>
                        <scope line="179"/>
                    </scope>
                </scope>
                <scope line="185"/>
                <scope line="189">
                    <declaration name="rel" type="float" line="190"/>
                    <declaration name="rgb" type="int" line="191"/>
                    <scope line="197"/>
                </scope>
            </method>
            <javadoc line="203">
                Release the resources allocated for the operation.                
            </javadoc>
            <method name="dispose" type="void" line="206">
                <scope line="207"/>
            </method>
            <javadoc line="213">
                Return the ColorModel of the output.                
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="216"/>
            <javadoc line="220">
                Return a Raster containing the colors generated for the graphics
                  operation.                
                <param>
                    x,y,w,h The area in device space for which colors are
                      generated.                    
                </param>
            </javadoc>
            <method name="getRaster" type="Raster" line="226">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="rowrel" type="double" line="227"/>
                <declaration name="rast" type="Raster" line="229"/>
                <scope line="230"/>
                <declaration name="irast" type="IntegerComponentRaster" line="234"/>
                <declaration name="off" type="int" line="235"/>
                <declaration name="adjust" type="int" line="236"/>
                <declaration name="pixels" type="int[]" line="237"/>
                <scope line="239"/>
                <scope line="241"/>
            </method>
            <method name="cycleFillRaster" type="void" line="251">
                <params>
                    <param name="pixels" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="rowrel" type="double"/>
                    <param name="dx" type="double"/>
                    <param name="dy" type="double"/>
                </params>
                <declaration name="irowrel" type="int" line="253"/>
                <declaration name="idx" type="int" line="254"/>
                <declaration name="idy" type="int" line="255"/>
                <scope line="256">
                    <declaration name="icolrel" type="int" line="257"/>
                    <scope line="258"/>
                </scope>
            </method>
            <method name="clipFillRaster" type="void" line="269">
                <params>
                    <param name="pixels" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="rowrel" type="double"/>
                    <param name="dx" type="double"/>
                    <param name="dy" type="double"/>
                </params>
                <scope line="270">
                    <declaration name="colrel" type="double" line="271"/>
                    <declaration name="j" type="int" line="272"/>
                    <scope line="273">
                        <declaration name="rgb" type="int" line="274"/>
                        <scope line="275"/>
                    </scope>
                    <scope line="280"/>
                    <scope line="284">
                        <declaration name="rgb" type="int" line="285"/>
                        <scope line="286"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>