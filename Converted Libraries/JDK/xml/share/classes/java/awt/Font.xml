<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.peer.FontPeer"/>
        <import package="java.io"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="java.text.CharacterIterator"/>
        <import package="java.text.StringCharacterIterator"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="sun.font.StandardGlyphVector"/>
        <import package="sun.font.AttributeMap"/>
        <import package="sun.font.AttributeValues"/>
        <import package="sun.font.CompositeFont"/>
        <import package="sun.font.CreatedFontTracker"/>
        <import package="sun.font.Font2D"/>
        <import package="sun.font.Font2DHandle"/>
        <import package="sun.font.FontAccess"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.FontUtilities"/>
        <import package="sun.font.GlyphLayout"/>
        <import package="sun.font.FontLineMetrics"/>
        <import package="sun.font.CoreMetrics"/>
        <import package="sun.font.EAttribute"/>
        <class name="Font" line="36">
            <implements interface="java.io.Serializable"/>
            <javadoc line="36">
                The &lt;code&gt;Font&lt;/code&gt; class represents fonts, which are used to
                  render text in a visible way.
                  A font provides the information needed to map sequences of
                  &lt;em&gt;characters&lt;/em&gt; to sequences of &lt;em&gt;glyphs&lt;/em&gt;
                  and to render sequences of glyphs on &lt;code&gt;Graphics&lt;/code&gt; and
                  &lt;code&gt;Component&lt;/code&gt; objects.
                  &lt;h4&gt;Characters and Glyphs&lt;/h4&gt;
                  A &lt;em&gt;character&lt;/em&gt; is a symbol that represents an item such as a letter,
                  a digit, or punctuation in an abstract way. For example, &lt;code&gt;&apos;g&apos;&lt;/code&gt;,
                  &lt;font size=-1&gt;LATIN SMALL LETTER G&lt;/font&gt;, is a character.
                  &lt;p&gt;
                  A &lt;em&gt;glyph&lt;/em&gt; is a shape used to render a character or a sequence of
                  characters. In simple writing systems, such as Latin, typically one glyph
                  represents one character. In general, however, characters and glyphs do not
                  have one-to-one correspondence. For example, the character &apos;&amp;aacute;&apos;
                  &lt;font size=-1&gt;LATIN SMALL LETTER A WITH ACUTE&lt;/font&gt;, can be represented by
                  two glyphs: one for &apos;a&apos; and one for &apos;&amp;acute;&apos;. On the other hand, the
                  two-character string &quot;fi&quot; can be represented by a single glyph, an
                  &quot;fi&quot; ligature. In complex writing systems, such as Arabic or the South
                  and South-East Asian writing systems, the relationship between characters
                  and glyphs can be more complicated and involve context-dependent selection
                  of glyphs as well as glyph reordering.
                  A font encapsulates the collection of glyphs needed to render a selected set
                  of characters as well as the tables needed to map sequences of characters to
                  corresponding sequences of glyphs.
                  &lt;h4&gt;Physical and Logical Fonts&lt;/h4&gt;
                  The Java Platform distinguishes between two kinds of fonts:
                  &lt;em&gt;physical&lt;/em&gt; fonts and &lt;em&gt;logical&lt;/em&gt; fonts.
                  &lt;p&gt;
                  &lt;em&gt;Physical&lt;/em&gt; fonts are the actual font libraries containing glyph data
                  and tables to map from character sequences to glyph sequences, using a font
                  technology such as TrueType or PostScript Type 1.
                  All implementations of the Java Platform must support TrueType fonts;
                  support for other font technologies is implementation dependent.
                  Physical fonts may use names such as Helvetica, Palatino, HonMincho, or
                  any number of other font names.
                  Typically, each physical font supports only a limited set of writing
                  systems, for example, only Latin characters or only Japanese and Basic
                  Latin.
                  The set of available physical fonts varies between configurations.
                  Applications that require specific fonts can bundle them and instantiate
                  them using the {@link #createFont createFont} method.
                  &lt;p&gt;
                  &lt;em&gt;Logical&lt;/em&gt; fonts are the five font families defined by the Java
                  platform which must be supported by any Java runtime environment:
                  Serif, SansSerif, Monospaced, Dialog, and DialogInput.
                  These logical fonts are not actual font libraries. Instead, the logical
                  font names are mapped to physical fonts by the Java runtime environment.
                  The mapping is implementation and usually locale dependent, so the look
                  and the metrics provided by them vary.
                  Typically, each logical font name maps to several physical fonts in order to
                  cover a large range of characters.
                  &lt;p&gt;
                  Peered AWT components, such as {@link Label Label} and{@link TextField TextField}, can only use logical fonts.
                  &lt;p&gt;
                  For a discussion of the relative advantages and disadvantages of using
                  physical or logical fonts, see the
                  &lt;a href=&quot;http://java.sun.com/j2se/corejava/intl/reference/faqs/index.html#desktop-rendering&quot;&gt;Internationalization FAQ&lt;/a&gt;
                  document.
                  &lt;h4&gt;Font Faces and Names&lt;/h4&gt;
                  A &lt;code&gt;Font&lt;/code&gt;
                  can have many faces, such as heavy, medium, oblique, gothic and
                  regular. All of these faces have similar typographic design.
                  &lt;p&gt;
                  There are three different names that you can get from a
                  &lt;code&gt;Font&lt;/code&gt; object.  The &lt;em&gt;logical font name&lt;/em&gt; is simply the
                  name that was used to construct the font.
                  The &lt;em&gt;font face name&lt;/em&gt;, or just &lt;em&gt;font name&lt;/em&gt; for
                  short, is the name of a particular font face, like Helvetica Bold. The
                  &lt;em&gt;family name&lt;/em&gt; is the name of the font family that determines the
                  typographic design across several faces, like Helvetica.
                  &lt;p&gt;
                  The &lt;code&gt;Font&lt;/code&gt; class represents an instance of a font face from
                  a collection of  font faces that are present in the system resources
                  of the host system.  As examples, Arial Bold and Courier Bold Italic
                  are font faces.  There can be several &lt;code&gt;Font&lt;/code&gt; objects
                  associated with a font face, each differing in size, style, transform
                  and font features.
                  &lt;p&gt;
                  The {@link GraphicsEnvironment#getAllFonts() getAllFonts} method
                  of the &lt;code&gt;GraphicsEnvironment&lt;/code&gt; class returns an
                  array of all font faces available in the system. These font faces are
                  returned as &lt;code&gt;Font&lt;/code&gt; objects with a size of 1, identity
                  transform and default font features. These
                  base fonts can then be used to derive new &lt;code&gt;Font&lt;/code&gt; objects
                  with varying sizes, styles, transforms and font features via the
                  &lt;code&gt;deriveFont&lt;/code&gt; methods in this class.
                  &lt;h4&gt;Font and TextAttribute&lt;/h4&gt;
                  &lt;p&gt;&lt;code&gt;Font&lt;/code&gt; supports most
                  &lt;code&gt;TextAttribute&lt;/code&gt;s.  This makes some operations, such as
                  rendering underlined text, convenient since it is not
                  necessary to explicitly construct a &lt;code&gt;TextLayout&lt;/code&gt; object.
                  Attributes can be set on a Font by constructing or deriving it
                  using a &lt;code&gt;Map&lt;/code&gt; of &lt;code&gt;TextAttribute&lt;/code&gt; values.
                  &lt;p&gt;The values of some &lt;code&gt;TextAttributes&lt;/code&gt; are not
                  serializable, and therefore attempting to serialize an instance of
                  &lt;code&gt;Font&lt;/code&gt; that has such values will not serialize them.
                  This means a Font deserialized from such a stream will not compare
                  equal to the original Font that contained the non-serializable
                  attributes.  This should very rarely pose a problem
                  since these attributes are typically used only in special
                  circumstances and are unlikely to be serialized.
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;FOREGROUND&lt;/code&gt; and &lt;code&gt;BACKGROUND&lt;/code&gt; use
                  &lt;code&gt;Paint&lt;/code&gt; values. The subclass &lt;code&gt;Color&lt;/code&gt; is
                  serializable, while &lt;code&gt;GradientPaint&lt;/code&gt; and
                  &lt;code&gt;TexturePaint&lt;/code&gt; are not.&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;CHAR_REPLACEMENT&lt;/code&gt; uses
                  &lt;code&gt;GraphicAttribute&lt;/code&gt; values.  The subclasses
                  &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; and
                  &lt;code&gt;ImageGraphicAttribute&lt;/code&gt; are not serializable.&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;INPUT_METHOD_HIGHLIGHT&lt;/code&gt; uses
                  &lt;code&gt;InputMethodHighlight&lt;/code&gt; values, which are
                  not serializable.  See {@link java.awt.im.InputMethodHighlight}.&lt;/li&gt;
                  &lt;/ul&gt;
                  Clients who create custom subclasses of &lt;code&gt;Paint&lt;/code&gt; and
                  &lt;code&gt;GraphicAttribute&lt;/code&gt; can make them serializable and
                  avoid this problem.  Clients who use input method highlights can
                  convert these to the platform-specific attributes for that
                  highlight on the current platform and set them on the Font as
                  a workaround.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;Map&lt;/code&gt;-based constructor and
                  &lt;code&gt;deriveFont&lt;/code&gt; APIs ignore the FONT attribute, and it is
                  not retained by the Font; the static {@link #getFont} method should
                  be used if the FONT attribute might be present.  See {@link java.awt.font.TextAttribute#FONT} for more information.&lt;/p&gt;
                  &lt;p&gt;Several attributes will cause additional rendering overhead
                  and potentially invoke layout.  If a &lt;code&gt;Font&lt;/code&gt; has such
                  attributes, the &lt;code&gt;{@link #hasLayoutAttributes()}&lt;/code&gt; method
                  will return true.&lt;/p&gt;
                  &lt;p&gt;Note: Font rotations can cause text baselines to be rotated.  In
                  order to account for this (rare) possibility, font APIs are
                  specified to return metrics and take parameters &apos;in
                  baseline-relative coordinates&apos;.  This maps the &apos;x&apos; coordinate to
                  the advance along the baseline, (positive x is forward along the
                  baseline), and the &apos;y&apos; coordinate to a distance along the
                  perpendicular to the baseline at &apos;x&apos; (positive y is 90 degrees
                  clockwise from the baseline vector).  APIs for which this is
                  especially important are called out as having &apos;baseline-relative
                  coordinates.&apos;                
            </javadoc>
            <class name="FontAccessImpl" line="178">
                <extends class="FontAccess"/>
                <method name="getFont2D" type="Font2D" line="179">
                    <params>
                        <param name="font" type="Font"/>
                    </params>
                </method>
                <method name="setFont2D" type="void" line="182">
                    <params>
                        <param name="font" type="Font"/>
                        <param name="handle" type="Font2DHandle"/>
                    </params>
                </method>
                <method name="setCreatedFont" type="void" line="185">
                    <params>
                        <param name="font" type="Font"/>
                    </params>
                </method>
                <method name="isCreatedFont" type="boolean" line="188">
                    <params>
                        <param name="font" type="Font"/>
                    </params>
                </method>
            </class>
            <scope line="192"/>
            <declaration name="fRequestedAttributes" type="Hashtable" line="197"/>
            <javadoc line="197">
                This is now only used during serialization.  Typically
                  it is null.                
                <serial>
                                        
                </serial>
                <see>
                    #getAttributes()                    
                </see>
            </javadoc>
            <declaration name="DIALOG" type="String" line="204"/>
            <javadoc line="204">
                A String constant for the canonical family name of the
                  logical font &quot;Dialog&quot;. It is useful in Font construction
                  to provide compile-time verification of the name.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="DIALOG_INPUT" type="String" line="211"/>
            <javadoc line="211">
                A String constant for the canonical family name of the
                  logical font &quot;DialogInput&quot;. It is useful in Font construction
                  to provide compile-time verification of the name.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="SANS_SERIF" type="String" line="218"/>
            <javadoc line="218">
                A String constant for the canonical family name of the
                  logical font &quot;SansSerif&quot;. It is useful in Font construction
                  to provide compile-time verification of the name.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="SERIF" type="String" line="225"/>
            <javadoc line="225">
                A String constant for the canonical family name of the
                  logical font &quot;Serif&quot;. It is useful in Font construction
                  to provide compile-time verification of the name.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="MONOSPACED" type="String" line="232"/>
            <javadoc line="232">
                A String constant for the canonical family name of the
                  logical font &quot;Monospaced&quot;. It is useful in Font construction
                  to provide compile-time verification of the name.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="PLAIN" type="int" line="239"/>
            <javadoc line="239">
                The plain style constant.                
            </javadoc>
            <declaration name="BOLD" type="int" line="243"/>
            <javadoc line="243">
                The bold style constant.  This can be combined with the other style
                  constants (except PLAIN) for mixed styles.                
            </javadoc>
            <declaration name="ITALIC" type="int" line="248"/>
            <javadoc line="248">
                The italicized style constant.  This can be combined with the other
                  style constants (except PLAIN) for mixed styles.                
            </javadoc>
            <declaration name="ROMAN_BASELINE" type="int" line="253"/>
            <javadoc line="253">
                The baseline used in most Roman scripts when laying out text.                
            </javadoc>
            <declaration name="CENTER_BASELINE" type="int" line="257"/>
            <javadoc line="257">
                The baseline used in ideographic scripts like Chinese, Japanese,
                  and Korean when laying out text.                
            </javadoc>
            <declaration name="HANGING_BASELINE" type="int" line="262"/>
            <javadoc line="262">
                The baseline used in Devanigiri and similar scripts when laying
                  out text.                
            </javadoc>
            <declaration name="TRUETYPE_FONT" type="int" line="267"/>
            <javadoc line="267">
                Identify a font resource of type TRUETYPE.
                  Used to specify a TrueType font resource to the{@link #createFont} method.
                  The TrueType format was extended to become the OpenType
                  format, which adds support for fonts with Postscript outlines,
                  this tag therefore references these fonts, as well as those
                  with TrueType outlines.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="TYPE1_FONT" type="int" line="277"/>
            <javadoc line="277">
                Identify a font resource of type TYPE1.
                  Used to specify a Type1 font resource to the{@link #createFont} method.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="name" type="String" line="283"/>
            <javadoc line="283">
                The logical name of this &lt;code&gt;Font&lt;/code&gt;, as passed to the
                  constructor.                
                <since>
                    JDK1.0                    
                </since>
                <serial>
                                        
                </serial>
                <see>
                    #getName                    
                </see>
            </javadoc>
            <declaration name="style" type="int" line="291"/>
            <javadoc line="291">
                The style of this &lt;code&gt;Font&lt;/code&gt;, as passed to the constructor.
                  This style can be PLAIN, BOLD, ITALIC, or BOLD+ITALIC.                
                <since>
                    JDK1.0                    
                </since>
                <serial>
                                        
                </serial>
                <see>
                    #getStyle()                    
                </see>
            </javadoc>
            <declaration name="size" type="int" line="299"/>
            <javadoc line="299">
                The point size of this &lt;code&gt;Font&lt;/code&gt;, rounded to integer.                
                <since>
                    JDK1.0                    
                </since>
                <serial>
                                        
                </serial>
                <see>
                    #getSize()                    
                </see>
            </javadoc>
            <declaration name="pointSize" type="float" line="306"/>
            <javadoc line="306">
                The point size of this &lt;code&gt;Font&lt;/code&gt; in &lt;code&gt;float&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getSize()                    
                </see>
                <see>
                    #getSize2D()                    
                </see>
            </javadoc>
            <declaration name="peer" type="FontPeer" line="313"/>
            <javadoc line="313">
                The platform specific font information.                
            </javadoc>
            <declaration name="pData" type="long" line="317"/>
            <declaration name="font2DHandle" type="Font2DHandle" line="318"/>
            <declaration name="values" type="AttributeValues" line="319"/>
            <declaration name="hasLayoutAttributes" type="boolean" line="320"/>
            <declaration name="createdFont" type="boolean" line="321"/>
            <declaration name="nonIdentityTx" type="boolean" line="322"/>
            <declaration name="identityTx" type="AffineTransform" line="323"/>
            <declaration name="serialVersionUID" type="long" line="324"/>
            <javadoc line="325">
                Gets the peer of this &lt;code&gt;Font&lt;/code&gt;.                
                <return>
                    the peer of the &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    Font rendering is now platform independent.                    
                </deprecated>
            </javadoc>
            <method name="getPeer" type="FontPeer" line="331"/>
            <method name="getPeer_NoClientCode" type="FontPeer" line="334">
                <scope line="335">
                    <declaration name="tk" type="Toolkit" line="336"/>
                </scope>
            </method>
            <javadoc line="341">
                Return the AttributeValues object associated with this
                  font.  Most of the time, the internal object is null.
                  If required, it will be created from the &apos;standard&apos;
                  state on the font.  Only non-default values will be
                  set in the AttributeValues object.
                  &lt;p&gt;Since the AttributeValues object is mutable, and it
                  is cached in the font, care must be taken to ensure that
                  it is not mutated.                
            </javadoc>
            <method name="getAttributeValues" type="AttributeValues" line="351">
                <scope line="352">
                    <declaration name="valuesTmp" type="AttributeValues" line="353"/>
                    <scope line="356"/>
                    <scope line="359"/>
                </scope>
            </method>
            <method name="getFont2D" type="Font2D" line="367">
                <declaration name="fm" type="FontManager" line="368"/>
                <scope line="369"/>
                <scope line="372"/>
            </method>
            <javadoc line="377">
                Creates a new &lt;code&gt;Font&lt;/code&gt; from the specified name, style and
                  point size.
                  &lt;p&gt;
                  The font name can be a font face name or a font family name.
                  It is used together with the style to find an appropriate font face.
                  When a font family name is specified, the style argument is used to
                  select the most appropriate face from the family. When a font face
                  name is specified, the face&apos;s style and the style argument are
                  merged to locate the best matching font from the same family.
                  For example if face name &quot;Arial Bold&quot; is specified with style
                  &lt;code&gt;Font.ITALIC&lt;/code&gt;, the font system looks for a face in the
                  &quot;Arial&quot; family that is bold and italic, and may associate the font
                  instance with the physical font face &quot;Arial Bold Italic&quot;.
                  The style argument is merged with the specified face&apos;s style, not
                  added or subtracted.
                  This means, specifying a bold face and a bold style does not
                  double-embolden the font, and specifying a bold face and a plain
                  style does not lighten the font.
                  &lt;p&gt;
                  If no face for the requested style can be found, the font system
                  may apply algorithmic styling to achieve the desired style.
                  For example, if &lt;code&gt;ITALIC&lt;/code&gt; is requested, but no italic
                  face is available, glyphs from the plain face may be algorithmically
                  obliqued (slanted).
                  &lt;p&gt;
                  Font name lookup is case insensitive, using the case folding
                  rules of the US locale.
                  &lt;p&gt;
                  If the &lt;code&gt;name&lt;/code&gt; parameter represents something other than a
                  logical font, i.e. is interpreted as a physical font face or family, and
                  this cannot be mapped by the implementation to a physical font or a
                  compatible alternative, then the font system will map the Font
                  instance to &quot;Dialog&quot;, such that for example, the family as reported
                  by {@link #getFamily() getFamily} will be &quot;Dialog&quot;.
                  &lt;p&gt;                
                <param>
                    name the font name.  This can be a font face name or a font
                      family name, and may represent either a logical font or a physical
                      font found in this {@code GraphicsEnvironment}.
                      The family names for logical fonts are: Dialog, DialogInput,
                      Monospaced, Serif, or SansSerif. Pre-defined String constants exist
                      for all of these names, for example, {@code DIALOG}. If {@code name} is{@code null}, the &lt;em&gt;logical font name&lt;/em&gt; of the new{@code Font} as returned by {@code getName()} is set to
                      the name &quot;Default&quot;.                    
                </param>
                <param>
                    style the style constant for the {@code Font}The style argument is an integer bitmask that may
                      be {@code PLAIN}, or a bitwise union of {@code BOLD} and/or{@code ITALIC} (for example, {@code ITALIC} or {@code BOLD|ITALIC}).
                      If the style argument does not conform to one of the expected
                      integer bitmasks then the style is set to {@code PLAIN}.                    
                </param>
                <param>
                    size the point size of the {@code Font}                    
                </param>
                <see>
                    GraphicsEnvironment#getAllFonts                    
                </see>
                <see>
                    GraphicsEnvironment#getAvailableFontFamilyNames                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="Font" type="constructor" line="429">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="Font" type="constructor" line="435">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                    <param name="sizePts" type="float"/>
                </params>
            </method>
            <method name="Font" type="constructor" line="441">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                    <param name="sizePts" type="float"/>
                    <param name="created" type="boolean"/>
                    <param name="handle" type="Font2DHandle"/>
                </params>
                <scope line="444">
                    <scope line="445">
                        <declaration name="fm" type="FontManager" line="446"/>
                    </scope>
                    <scope line="449"/>
                </scope>
            </method>
            <method name="Font" type="constructor" line="454">
                <params>
                    <param name="fontFile" type="File"/>
                    <param name="fontFormat" type="int"/>
                    <param name="isCopy" type="boolean"/>
                    <param name="tracker" type="CreatedFontTracker"/>
                </params>
                <declaration name="fm" type="FontManager" line="456"/>
            </method>
            <method name="Font" type="constructor" line="463">
                <params>
                    <param name="values" type="AttributeValues"/>
                    <param name="oldName" type="String"/>
                    <param name="oldStyle" type="int"/>
                    <param name="created" type="boolean"/>
                    <param name="handle" type="Font2DHandle"/>
                </params>
                <scope line="465">
                    <declaration name="newName" type="String" line="467"/>
                    <scope line="468"/>
                    <declaration name="newStyle" type="int" line="472"/>
                    <scope line="473"/>
                    <scope line="476"/>
                    <scope line="481">
                        <scope line="482">
                            <declaration name="fm" type="FontManager" line="483"/>
                        </scope>
                    </scope>
                    <scope line="487"/>
                </scope>
            </method>
            <javadoc line="494">
                Creates a new &lt;code&gt;Font&lt;/code&gt; with the specified attributes.
                  Only keys defined in {@link java.awt.font.TextAttribute TextAttribute}are recognized.  In addition the FONT attribute is
                  not recognized by this constructor
                  (see {@link #getAvailableAttributes}). Only attributes that have
                  values of valid types will affect the new &lt;code&gt;Font&lt;/code&gt;.
                  &lt;p&gt;
                  If &lt;code&gt;attributes&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a new
                  &lt;code&gt;Font&lt;/code&gt; is initialized with default values.                
                <see>
                    java.awt.font.TextAttribute                    
                </see>
                <param>
                    attributes the attributes to assign to the new
                      &lt;code&gt;Font&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="Font" type="constructor" line="507">
                <params>
                    <param name="attributes" type="Map&lt;? extends Attribute,?&gt;"/>
                </params>
            </method>
            <javadoc line="510">
                Creates a new &lt;code&gt;Font&lt;/code&gt; from the specified &lt;code&gt;font&lt;/code&gt;.
                  This constructor is intended for use by subclasses.                
                <param>
                    font from which to create this &lt;code&gt;Font&lt;/code&gt;.                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;font&lt;/code&gt; is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="Font" type="constructor" line="517">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <scope line="518"/>
                <scope line="521"/>
            </method>
            <declaration name="RECOGNIZED_MASK" type="int" line="530"/>
            <javadoc line="530">
                Font recognizes all attributes except FONT.                
            </javadoc>
            <declaration name="PRIMARY_MASK" type="int" line="534"/>
            <javadoc line="534">
                These attributes are considered primary by the FONT attribute.                
            </javadoc>
            <declaration name="SECONDARY_MASK" type="int" line="538"/>
            <javadoc line="538">
                These attributes are considered secondary by the FONT attribute.                
            </javadoc>
            <declaration name="LAYOUT_MASK" type="int" line="542"/>
            <javadoc line="542">
                These attributes are handled by layout.                
            </javadoc>
            <declaration name="EXTRA_MASK" type="int" line="546"/>
            <javadoc line="547">
                Initialize the standard Font fields from the values object.                
            </javadoc>
            <method name="initFromValues" type="void" line="550">
                <params>
                    <param name="values" type="AttributeValues"/>
                </params>
            </method>
            <javadoc line="561">
                Returns a &lt;code&gt;Font&lt;/code&gt; appropriate to the attributes.
                  If &lt;code&gt;attributes&lt;/code&gt;contains a &lt;code&gt;FONT&lt;/code&gt; attribute
                  with a valid &lt;code&gt;Font&lt;/code&gt; as its value, it will be
                  merged with any remaining attributes.  See{@link java.awt.font.TextAttribute#FONT} for more
                  information.                
                <param>
                    attributes the attributes to assign to the new
                      &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; created with the specified
                      attributes                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;attributes&lt;/code&gt; is null.                    
                </throws>
                <since>
                    1.2                    
                </since>
                <see>
                    java.awt.font.TextAttribute                    
                </see>
            </javadoc>
            <method name="getFont" type="Font" line="575">
                <params>
                    <param name="attributes" type="Map&lt;? extends Attribute,?&gt;"/>
                </params>
                <scope line="576">
                    <declaration name="values" type="AttributeValues" line="577"/>
                    <scope line="578">
                        <declaration name="font" type="Font" line="579"/>
                        <scope line="580"/>
                    </scope>
                </scope>
                <declaration name="font" type="Font" line="589"/>
                <scope line="590">
                    <scope line="591">
                        <declaration name="values" type="AttributeValues" line="592"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="600">
                Used with the byte count tracker for fonts created from streams.
                  If a thread can create temp files anyway, no point in counting
                  font bytes.                
            </javadoc>
            <method name="hasTempPermission" type="boolean" line="605">
                <scope line="606"/>
                <declaration name="f" type="File" line="609"/>
                <declaration name="hasPerm" type="boolean" line="610"/>
                <scope line="611"/>
                <scope line="617"/>
            </method>
            <javadoc line="621">
                Returns a new &lt;code&gt;Font&lt;/code&gt; using the specified font type
                  and input data.  The new &lt;code&gt;Font&lt;/code&gt; is
                  created with a point size of 1 and style {@link #PLAIN PLAIN}.
                  This base font can then be used with the &lt;code&gt;deriveFont&lt;/code&gt;
                  methods in this class to derive new &lt;code&gt;Font&lt;/code&gt; objects with
                  varying sizes, styles, transforms and font features.  This
                  method does not close the {@link InputStream}.
                  &lt;p&gt;
                  To make the &lt;code&gt;Font&lt;/code&gt; available to Font constructors the
                  returned &lt;code&gt;Font&lt;/code&gt; must be registered in the
                  &lt;code&gt;GraphicsEnviroment&lt;/code&gt; by calling{@link GraphicsEnvironment#registerFont(Font) registerFont(Font)}.                
                <param>
                    fontFormat the type of the &lt;code&gt;Font&lt;/code&gt;, which is{@link #TRUETYPE_FONT TRUETYPE_FONT} if a TrueType resource is specified.
                      or {@link #TYPE1_FONT TYPE1_FONT} if a Type 1 resource is specified.                    
                </param>
                <param>
                    fontStream an &lt;code&gt;InputStream&lt;/code&gt; object representing the
                      input data for the font.                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; created with the specified font type.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;fontFormat&lt;/code&gt; is not
                      &lt;code&gt;TRUETYPE_FONT&lt;/code&gt;or&lt;code&gt;TYPE1_FONT&lt;/code&gt;.                    
                </throws>
                <throws>
                    FontFormatException if the &lt;code&gt;fontStream&lt;/code&gt; data does
                      not contain the required font tables for the specified format.                    
                </throws>
                <throws>
                    IOException if the &lt;code&gt;fontStream&lt;/code&gt;
                      cannot be completely read.                    
                </throws>
                <see>
                    GraphicsEnvironment#registerFont(Font)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createFont" type="Font" line="647">
                <params>
                    <param name="fontFormat" type="int"/>
                    <param name="fontStream" type="InputStream"/>
                </params>
                <scope line="648"/>
                <declaration name="copiedFontData" type="boolean" line="651"/>
                <scope line="652">
                    <anonymous_class line="653">
                        <method name="run" type="File" line="654"/>
                    </anonymous_class>
                    <declaration name="tFile" type="File" line="653"/>
                    <declaration name="totalSize" type="int" line="659"/>
                    <declaration name="tracker" type="CreatedFontTracker" line="660"/>
                    <scope line="661">
                        <anonymous_class line="662">
                            <method name="run" type="OutputStream" line="663"/>
                        </anonymous_class>
                        <declaration name="outStream" type="OutputStream" line="662"/>
                        <scope line="668"/>
                        <scope line="671">
                            <declaration name="buf" type="byte[]" line="672"/>
                            <scope line="673">
                                <declaration name="bytesRead" type="int" line="674"/>
                                <scope line="675"/>
                                <scope line="678">
                                    <scope line="679"/>
                                    <scope line="682"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="691"/>
                        <declaration name="font" type="Font" line="695"/>
                    </scope>
                    <scope line="698">
                        <scope line="699">
                            <scope line="700"/>
                            <anonymous_class line="703">
                                <method name="run" type="Void" line="704"/>
                            </anonymous_class>
                        </scope>
                    </scope>
                </scope>
                <scope line="713">
                    <scope line="714"/>
                    <scope line="717"/>
                    <declaration name="cause" type="Throwable" line="720"/>
                    <scope line="721"/>
                </scope>
            </method>
            <javadoc line="727">
                Returns a new &lt;code&gt;Font&lt;/code&gt; using the specified font type
                  and the specified font file.  The new &lt;code&gt;Font&lt;/code&gt; is
                  created with a point size of 1 and style {@link #PLAIN PLAIN}.
                  This base font can then be used with the &lt;code&gt;deriveFont&lt;/code&gt;
                  methods in this class to derive new &lt;code&gt;Font&lt;/code&gt; objects with
                  varying sizes, styles, transforms and font features.                
                <param>
                    fontFormat the type of the &lt;code&gt;Font&lt;/code&gt;, which is{@link #TRUETYPE_FONT TRUETYPE_FONT} if a TrueType resource is
                      specified or {@link #TYPE1_FONT TYPE1_FONT} if a Type 1 resource is
                      specified.
                      So long as the returned font, or its derived fonts are referenced
                      the implementation may continue to access &lt;code&gt;fontFile&lt;/code&gt;
                      to retrieve font data. Thus the results are undefined if the file
                      is changed, or becomes inaccessible.
                      &lt;p&gt;
                      To make the &lt;code&gt;Font&lt;/code&gt; available to Font constructors the
                      returned &lt;code&gt;Font&lt;/code&gt; must be registered in the
                      &lt;code&gt;GraphicsEnviroment&lt;/code&gt; by calling{@link GraphicsEnvironment#registerFont(Font) registerFont(Font)}.                    
                </param>
                <param>
                    fontFile a &lt;code&gt;File&lt;/code&gt; object representing the
                      input data for the font.                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; created with the specified font type.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;fontFormat&lt;/code&gt; is not
                      &lt;code&gt;TRUETYPE_FONT&lt;/code&gt;or&lt;code&gt;TYPE1_FONT&lt;/code&gt;.                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;fontFile&lt;/code&gt; is null.                    
                </throws>
                <throws>
                    IOException if the &lt;code&gt;fontFile&lt;/code&gt; cannot be read.                    
                </throws>
                <throws>
                    FontFormatException if &lt;code&gt;fontFile&lt;/code&gt; does
                      not contain the required font tables for the specified format.                    
                </throws>
                <throws>
                    SecurityException if the executing code does not have
                      permission to read from the file.                    
                </throws>
                <see>
                    GraphicsEnvironment#registerFont(Font)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createFont" type="Font" line="759">
                <params>
                    <param name="fontFormat" type="int"/>
                    <param name="fontFile" type="File"/>
                </params>
                <scope line="761"/>
                <declaration name="sm" type="SecurityManager" line="764"/>
                <scope line="765">
                    <declaration name="filePermission" type="FilePermission" line="766"/>
                </scope>
                <scope line="769"/>
            </method>
            <javadoc line="774">
                Returns a copy of the transform associated with this
                  &lt;code&gt;Font&lt;/code&gt;.  This transform is not necessarily the one
                  used to construct the font.  If the font has algorithmic
                  superscripting or width adjustment, this will be incorporated
                  into the returned &lt;code&gt;AffineTransform&lt;/code&gt;.
                  &lt;p&gt;
                  Typically, fonts will not be transformed.  Clients generally
                  should call {@link #isTransformed} first, and only call this
                  method if &lt;code&gt;isTransformed&lt;/code&gt; returns true.                
                <return>
                    an {@link AffineTransform} object representing the
                      transform attribute of this &lt;code&gt;Font&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="787">
                <scope line="788">
                    <declaration name="values" type="AttributeValues" line="789"/>
                    <declaration name="at" type="AffineTransform" line="790"/>
                    <scope line="791">
                        <declaration name="superscript" type="int" line="792"/>
                        <declaration name="trans" type="double" line="793"/>
                        <declaration name="n" type="int" line="794"/>
                        <declaration name="up" type="boolean" line="795"/>
                        <declaration name="sign" type="int" line="796"/>
                        <declaration name="ss" type="int" line="797"/>
                        <scope line="798">
                            <declaration name="newn" type="int" line="799"/>
                        </scope>
                        <declaration name="scale" type="double" line="806"/>
                    </scope>
                    <scope line="810"/>
                </scope>
            </method>
            <declaration name="ssinfo" type="float[]" line="817"/>
            <javadoc line="818">
                Returns the family name of this &lt;code&gt;Font&lt;/code&gt;.
                  &lt;p&gt;The family name of a font is font specific. Two fonts such as
                  Helvetica Italic and Helvetica Bold have the same family name,
                  &lt;i&gt;Helvetica&lt;/i&gt;, whereas their font face names are
                  &lt;i&gt;Helvetica Bold&lt;/i&gt; and &lt;i&gt;Helvetica Italic&lt;/i&gt;. The list of
                  available family names may be obtained by using the{@link GraphicsEnvironment#getAvailableFontFamilyNames()} method.
                  &lt;p&gt;Use &lt;code&gt;getName&lt;/code&gt; to get the logical name of the font.
                  Use &lt;code&gt;getFontName&lt;/code&gt; to get the font face name of the font.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; that is the family name of this
                      &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getName                    
                </see>
                <see>
                    #getFontName                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getFamily" type="String" line="833"/>
            <method name="getFamily_NoClientCode" type="String" line="836"/>
            <javadoc line="839">
                Returns the family name of this &lt;code&gt;Font&lt;/code&gt;, localized for
                  the specified locale.
                  &lt;p&gt;The family name of a font is font specific. Two fonts such as
                  Helvetica Italic and Helvetica Bold have the same family name,
                  &lt;i&gt;Helvetica&lt;/i&gt;, whereas their font face names are
                  &lt;i&gt;Helvetica Bold&lt;/i&gt; and &lt;i&gt;Helvetica Italic&lt;/i&gt;. The list of
                  available family names may be obtained by using the{@link GraphicsEnvironment#getAvailableFontFamilyNames()} method.
                  &lt;p&gt;Use &lt;code&gt;getFontName&lt;/code&gt; to get the font face name of the font.                
                <param>
                    l locale for which to get the family name                    
                </param>
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the family name of the
                      font, localized for the specified locale.                    
                </return>
                <see>
                    #getFontName                    
                </see>
                <see>
                    java.util.Locale                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFamily" type="String" line="855">
                <params>
                    <param name="l" type="Locale"/>
                </params>
                <scope line="856"/>
            </method>
            <javadoc line="861">
                Returns the postscript name of this &lt;code&gt;Font&lt;/code&gt;.
                  Use &lt;code&gt;getFamily&lt;/code&gt; to get the family name of the font.
                  Use &lt;code&gt;getFontName&lt;/code&gt; to get the font face name of the font.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the postscript name of
                      this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPSName" type="String" line="869"/>
            <javadoc line="872">
                Returns the logical name of this &lt;code&gt;Font&lt;/code&gt;.
                  Use &lt;code&gt;getFamily&lt;/code&gt; to get the family name of the font.
                  Use &lt;code&gt;getFontName&lt;/code&gt; to get the font face name of the font.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the logical name of
                      this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getFamily                    
                </see>
                <see>
                    #getFontName                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="882"/>
            <javadoc line="885">
                Returns the font face name of this &lt;code&gt;Font&lt;/code&gt;.  For example,
                  Helvetica Bold could be returned as a font face name.
                  Use &lt;code&gt;getFamily&lt;/code&gt; to get the family name of the font.
                  Use &lt;code&gt;getName&lt;/code&gt; to get the logical name of the font.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the font face name of
                      this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getFamily                    
                </see>
                <see>
                    #getName                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFontName" type="String" line="896"/>
            <javadoc line="899">
                Returns the font face name of the &lt;code&gt;Font&lt;/code&gt;, localized
                  for the specified locale. For example, Helvetica Fett could be
                  returned as the font face name.
                  Use &lt;code&gt;getFamily&lt;/code&gt; to get the family name of the font.                
                <param>
                    l a locale for which to get the font face name                    
                </param>
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the font face name,
                      localized for the specified locale.                    
                </return>
                <see>
                    #getFamily                    
                </see>
                <see>
                    java.util.Locale                    
                </see>
            </javadoc>
            <method name="getFontName" type="String" line="910">
                <params>
                    <param name="l" type="Locale"/>
                </params>
                <scope line="911"/>
            </method>
            <javadoc line="916">
                Returns the style of this &lt;code&gt;Font&lt;/code&gt;.  The style can be
                  PLAIN, BOLD, ITALIC, or BOLD+ITALIC.                
                <return>
                    the style of this &lt;code&gt;Font&lt;/code&gt;                    
                </return>
                <see>
                    #isPlain                    
                </see>
                <see>
                    #isBold                    
                </see>
                <see>
                    #isItalic                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getStyle" type="int" line="925"/>
            <javadoc line="928">
                Returns the point size of this &lt;code&gt;Font&lt;/code&gt;, rounded to
                  an integer.
                  Most users are familiar with the idea of using &lt;i&gt;point size&lt;/i&gt; to
                  specify the size of glyphs in a font. This point size defines a
                  measurement between the baseline of one line to the baseline of the
                  following line in a single spaced text document. The point size is
                  based on &lt;i&gt;typographic points&lt;/i&gt;, approximately 1/72 of an inch.
                  &lt;p&gt;
                  The Java(tm)2D API adopts the convention that one point is
                  equivalent to one unit in user coordinates.  When using a
                  normalized transform for converting user space coordinates to
                  device space coordinates 72 user
                  space units equal 1 inch in device space.  In this case one point
                  is 1/72 of an inch.                
                <return>
                    the point size of this &lt;code&gt;Font&lt;/code&gt; in 1/72 of an
                      inch units.                    
                </return>
                <see>
                    #getSize2D                    
                </see>
                <see>
                    GraphicsConfiguration#getDefaultTransform                    
                </see>
                <see>
                    GraphicsConfiguration#getNormalizingTransform                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getSize" type="int" line="950"/>
            <javadoc line="953">
                Returns the point size of this &lt;code&gt;Font&lt;/code&gt; in
                  &lt;code&gt;float&lt;/code&gt; value.                
                <return>
                    the point size of this &lt;code&gt;Font&lt;/code&gt; as a
                      &lt;code&gt;float&lt;/code&gt; value.                    
                </return>
                <see>
                    #getSize                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSize2D" type="float" line="961"/>
            <javadoc line="964">
                Indicates whether or not this &lt;code&gt;Font&lt;/code&gt; object&apos;s style is
                  PLAIN.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Font&lt;/code&gt; has a
                      PLAIN sytle;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.awt.Font#getStyle                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isPlain" type="boolean" line="973"/>
            <javadoc line="976">
                Indicates whether or not this &lt;code&gt;Font&lt;/code&gt; object&apos;s style is
                  BOLD.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Font&lt;/code&gt; object&apos;s
                      style is BOLD;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.awt.Font#getStyle                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isBold" type="boolean" line="985"/>
            <javadoc line="988">
                Indicates whether or not this &lt;code&gt;Font&lt;/code&gt; object&apos;s style is
                  ITALIC.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Font&lt;/code&gt; object&apos;s
                      style is ITALIC;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.awt.Font#getStyle                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isItalic" type="boolean" line="997"/>
            <javadoc line="1000">
                Indicates whether or not this &lt;code&gt;Font&lt;/code&gt; object has a
                  transform that affects its size in addition to the Size
                  attribute.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Font&lt;/code&gt; object
                      has a non-identity AffineTransform attribute.
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.awt.Font#getTransform                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isTransformed" type="boolean" line="1010"/>
            <javadoc line="1013">
                Return true if this Font contains attributes that require extra
                  layout processing.                
                <return>
                    true if the font has layout attributes                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="hasLayoutAttributes" type="boolean" line="1019"/>
            <javadoc line="1022">
                Returns a &lt;code&gt;Font&lt;/code&gt; object from the system properties list.
                  &lt;code&gt;nm&lt;/code&gt; is treated as the name of a system property to be
                  obtained.  The &lt;code&gt;String&lt;/code&gt; value of this property is then
                  interpreted as a &lt;code&gt;Font&lt;/code&gt; object according to the
                  specification of &lt;code&gt;Font.decode(String)&lt;/code&gt;
                  If the specified property is not found, or the executing code does
                  not have permission to read the property, null is returned instead.                
                <param>
                    nm the property name                    
                </param>
                <return>
                    a &lt;code&gt;Font&lt;/code&gt; object that the property name
                      describes, or null if no such property exists.                    
                </return>
                <throws>
                    NullPointerException if nm is null.                    
                </throws>
                <since>
                    1.2                    
                </since>
                <see>
                    #decode(String)                    
                </see>
            </javadoc>
            <method name="getFont" type="Font" line="1037">
                <params>
                    <param name="nm" type="String"/>
                </params>
            </method>
            <javadoc line="1040">
                Returns the &lt;code&gt;Font&lt;/code&gt; that the &lt;code&gt;str&lt;/code&gt;
                  argument describes.
                  To ensure that this method returns the desired Font,
                  format the &lt;code&gt;str&lt;/code&gt; parameter in
                  one of these ways
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;em&gt;fontname-style-pointsize&lt;/em&gt;
                  &lt;li&gt;&lt;em&gt;fontname-pointsize&lt;/em&gt;
                  &lt;li&gt;&lt;em&gt;fontname-style&lt;/em&gt;
                  &lt;li&gt;&lt;em&gt;fontname&lt;/em&gt;
                  &lt;li&gt;&lt;em&gt;fontname style pointsize&lt;/em&gt;
                  &lt;li&gt;&lt;em&gt;fontname pointsize&lt;/em&gt;
                  &lt;li&gt;&lt;em&gt;fontname style&lt;/em&gt;
                  &lt;li&gt;&lt;em&gt;fontname&lt;/em&gt;
                  &lt;/ul&gt;
                  in which &lt;i&gt;style&lt;/i&gt; is one of the four
                  case-insensitive strings:
                  &lt;code&gt;&quot;PLAIN&quot;&lt;/code&gt;, &lt;code&gt;&quot;BOLD&quot;&lt;/code&gt;, &lt;code&gt;&quot;BOLDITALIC&quot;&lt;/code&gt;, or
                  &lt;code&gt;&quot;ITALIC&quot;&lt;/code&gt;, and pointsize is a positive decimal integer
                  representation of the point size.
                  For example, if you want a font that is Arial, bold, with
                  a point size of 18, you would call this method with:
                  &quot;Arial-BOLD-18&quot;.
                  This is equivalent to calling the Font constructor :
                  &lt;code&gt;new Font(&quot;Arial&quot;, Font.BOLD, 18);&lt;/code&gt;
                  and the values are interpreted as specified by that constructor.
                  &lt;p&gt;
                  A valid trailing decimal field is always interpreted as the pointsize.
                  Therefore a fontname containing a trailing decimal value should not
                  be used in the fontname only form.
                  &lt;p&gt;
                  If a style name field is not one of the valid style strings, it is
                  interpreted as part of the font name, and the default style is used.
                  &lt;p&gt;
                  Only one of &apos; &apos; or &apos;-&apos; may be used to separate fields in the input.
                  The identified separator is the one closest to the end of the string
                  which separates a valid pointsize, or a valid style name from
                  the rest of the string.
                  Null (empty) pointsize and style fields are treated
                  as valid fields with the default value for that field.
                  &lt;p&gt;
                  Some font names may include the separator characters &apos; &apos; or &apos;-&apos;.
                  If &lt;code&gt;str&lt;/code&gt; is not formed with 3 components, e.g. such that
                  &lt;code&gt;style&lt;/code&gt; or &lt;code&gt;pointsize&lt;/code&gt; fields are not present in
                  &lt;code&gt;str&lt;/code&gt;, and &lt;code&gt;fontname&lt;/code&gt; also contains a
                  character determined to be the separator character
                  then these characters where they appear as intended to be part of
                  &lt;code&gt;fontname&lt;/code&gt; may instead be interpreted as separators
                  so the font name may not be properly recognised.
                  &lt;p&gt;
                  The default size is 12 and the default style is PLAIN.
                  If &lt;code&gt;str&lt;/code&gt; does not specify a valid size, the returned
                  &lt;code&gt;Font&lt;/code&gt; has a size of 12.  If &lt;code&gt;str&lt;/code&gt; does not
                  specify a valid style, the returned Font has a style of PLAIN.
                  If you do not specify a valid font name in
                  the &lt;code&gt;str&lt;/code&gt; argument, this method will return
                  a font with the family name &quot;Dialog&quot;.
                  To determine what font family names are available on
                  your system, use the{@link GraphicsEnvironment#getAvailableFontFamilyNames()} method.
                  If &lt;code&gt;str&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a new &lt;code&gt;Font&lt;/code&gt;
                  is returned with the family name &quot;Dialog&quot;, a size of 12 and a
                  PLAIN style.                
                <param>
                    str the name of the font, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;Font&lt;/code&gt; object that &lt;code&gt;str&lt;/code&gt;
                      describes, or a new default &lt;code&gt;Font&lt;/code&gt; if
                      &lt;code&gt;str&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getFamily                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="decode" type="Font" line="1111">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="fontName" type="String" line="1112"/>
                <declaration name="styleName" type="String" line="1113"/>
                <declaration name="fontSize" type="int" line="1114"/>
                <declaration name="fontStyle" type="int" line="1115"/>
                <scope line="1116"/>
                <declaration name="lastHyphen" type="int" line="1119"/>
                <declaration name="lastSpace" type="int" line="1120"/>
                <declaration name="sepChar" type="char" line="1121"/>
                <declaration name="sizeIndex" type="int" line="1122"/>
                <declaration name="styleIndex" type="int" line="1123"/>
                <declaration name="strlen" type="int" line="1124"/>
                <scope line="1125">
                    <scope line="1126">
                        <scope line="1128"/>
                    </scope>
                    <scope line="1132">
                        <scope line="1135"/>
                    </scope>
                </scope>
                <scope line="1140">
                    <scope line="1143"/>
                    <scope line="1146"/>
                    <scope line="1149"/>
                    <scope line="1152"/>
                    <scope line="1155">
                        <scope line="1157"/>
                    </scope>
                </scope>
                <scope line="1163">
                    <declaration name="fontEnd" type="int" line="1164"/>
                    <scope line="1165"/>
                    <scope line="1168"/>
                    <scope line="1171"/>
                </scope>
            </method>
            <javadoc line="1178">
                Gets the specified &lt;code&gt;Font&lt;/code&gt; from the system properties
                  list.  As in the &lt;code&gt;getProperty&lt;/code&gt; method of
                  &lt;code&gt;System&lt;/code&gt;, the first
                  argument is treated as the name of a system property to be
                  obtained.  The &lt;code&gt;String&lt;/code&gt; value of this property is then
                  interpreted as a &lt;code&gt;Font&lt;/code&gt; object.
                  &lt;p&gt;
                  The property value should be one of the forms accepted by
                  &lt;code&gt;Font.decode(String)&lt;/code&gt;
                  If the specified property is not found, or the executing code does not
                  have permission to read the property, the &lt;code&gt;font&lt;/code&gt;
                  argument is returned instead.                
                <param>
                    nm the case-insensitive property name                    
                </param>
                <param>
                    font a default &lt;code&gt;Font&lt;/code&gt; to return if property
                      &lt;code&gt;nm&lt;/code&gt; is not defined                    
                </param>
                <return>
                    the &lt;code&gt;Font&lt;/code&gt; value of the property.                    
                </return>
                <throws>
                    NullPointerException if nm is null.                    
                </throws>
                <see>
                    #decode(String)                    
                </see>
            </javadoc>
            <method name="getFont" type="Font" line="1198">
                <params>
                    <param name="nm" type="String"/>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="str" type="String" line="1199"/>
                <scope line="1200"/>
                <scope line="1203"/>
                <scope line="1205"/>
            </method>
            <declaration name="hash" type="int" line="1210"/>
            <javadoc line="1211">
                Returns a hashcode for this &lt;code&gt;Font&lt;/code&gt;.                
                <return>
                    a hashcode value for this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="1216">
                <scope line="1217">
                    <scope line="1219"/>
                </scope>
            </method>
            <javadoc line="1225">
                Compares this &lt;code&gt;Font&lt;/code&gt; object to the specified
                  &lt;code&gt;Object&lt;/code&gt;.                
                <param>
                    obj the &lt;code&gt;Object&lt;/code&gt; to compare                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are the same
                      or if the argument is a &lt;code&gt;Font&lt;/code&gt; object
                      describing the same font as this object;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="1235">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="1236"/>
                <scope line="1239">
                    <scope line="1240">
                        <declaration name="font" type="Font" line="1241"/>
                        <scope line="1242">
                            <scope line="1243">
                                <scope line="1244"/>
                                <scope line="1247"/>
                            </scope>
                            <scope line="1251"/>
                        </scope>
                    </scope>
                    <scope line="1256"/>
                </scope>
            </method>
            <javadoc line="1261">
                Converts this &lt;code&gt;Font&lt;/code&gt; object to a &lt;code&gt;String&lt;/code&gt;
                  representation.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representation of this
                      &lt;code&gt;Font&lt;/code&gt; object.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="1268">
                <declaration name="strStyle" type="String" line="1269"/>
                <scope line="1270"/>
                <scope line="1273"/>
            </method>
            <declaration name="fontSerializedDataVersion" type="int" line="1278"/>
            <javadoc line="1278">
                The &lt;code&gt;Font&lt;/code&gt; Serializable Data Form.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="1283">
                Writes default serializable fields to a stream.                
                <param>
                    s the &lt;code&gt;ObjectOutputStream&lt;/code&gt; to write                    
                </param>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    #readObject(java.io.ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="1289">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <scope line="1290">
                    <scope line="1291"/>
                </scope>
                <scope line="1297"/>
            </method>
            <javadoc line="1301">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt;.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the &lt;code&gt;ObjectInputStream&lt;/code&gt; to read                    
                </param>
                <serial>
                                        
                </serial>
                <see>
                    #writeObject(java.io.ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="1308">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <scope line="1310"/>
                <scope line="1313">
                    <declaration name="extras" type="AttributeValues" line="1315"/>
                    <scope line="1316"/>
                </scope>
            </method>
            <javadoc line="1325">
                Returns the number of glyphs in this &lt;code&gt;Font&lt;/code&gt;. Glyph codes
                  for this &lt;code&gt;Font&lt;/code&gt; range from 0 to
                  &lt;code&gt;getNumGlyphs()&lt;/code&gt; - 1.                
                <return>
                    the number of glyphs in this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getNumGlyphs" type="int" line="1332"/>
            <javadoc line="1335">
                Returns the glyphCode which is used when this &lt;code&gt;Font&lt;/code&gt;
                  does not have a glyph for a specified unicode code point.                
                <return>
                    the glyphCode of this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMissingGlyphCode" type="int" line="1341"/>
            <javadoc line="1344">
                Returns the baseline appropriate for displaying this character.
                  &lt;p&gt;
                  Large fonts can support different writing systems, and each system can
                  use a different baseline.
                  The character argument determines the writing system to use. Clients
                  should not assume all characters use the same baseline.                
                <param>
                    c a character used to identify the writing system                    
                </param>
                <return>
                    the baseline appropriate for the specified character.                    
                </return>
                <see>
                    LineMetrics#getBaselineOffsets                    
                </see>
                <see>
                    #ROMAN_BASELINE                    
                </see>
                <see>
                    #CENTER_BASELINE                    
                </see>
                <see>
                    #HANGING_BASELINE                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBaselineFor" type="byte" line="1359">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="1362">
                Returns a map of font attributes available in this
                  &lt;code&gt;Font&lt;/code&gt;.  Attributes include things like ligatures and
                  glyph substitution.                
                <return>
                    the attributes map of this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getAttributes" type="Map&lt;TextAttribute,?&gt;" line="1368"/>
            <javadoc line="1371">
                Returns the keys of all the attributes supported by this
                  &lt;code&gt;Font&lt;/code&gt;.  These attributes can be used to derive other
                  fonts.                
                <return>
                    an array containing the keys of all the attributes
                      supported by this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getAvailableAttributes" type="Attribute[]" line="1379">
                <declaration name="attributes" type="Attribute" line="1380"/>
            </method>
            <javadoc line="1383">
                Creates a new &lt;code&gt;Font&lt;/code&gt; object by replicating this
                  &lt;code&gt;Font&lt;/code&gt; object and applying a new style and size.                
                <param>
                    style the style for the new &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <param>
                    size the size for the new &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deriveFont" type="Font" line="1391">
                <params>
                    <param name="style" type="int"/>
                    <param name="size" type="float"/>
                </params>
                <scope line="1392"/>
                <declaration name="newValues" type="AttributeValues" line="1395"/>
                <declaration name="oldStyle" type="int" line="1396"/>
            </method>
            <javadoc line="1401">
                Creates a new &lt;code&gt;Font&lt;/code&gt; object by replicating this
                  &lt;code&gt;Font&lt;/code&gt; object and applying a new style and transform.                
                <param>
                    style the style for the new &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <param>
                    trans the &lt;code&gt;AffineTransform&lt;/code&gt; associated with the
                      new &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; object.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;trans&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deriveFont" type="Font" line="1412">
                <params>
                    <param name="style" type="int"/>
                    <param name="trans" type="AffineTransform"/>
                </params>
                <declaration name="newValues" type="AttributeValues" line="1413"/>
                <declaration name="oldStyle" type="int" line="1414"/>
            </method>
            <javadoc line="1419">
                Creates a new &lt;code&gt;Font&lt;/code&gt; object by replicating the current
                  &lt;code&gt;Font&lt;/code&gt; object and applying a new size to it.                
                <param>
                    size the size for the new &lt;code&gt;Font&lt;/code&gt;.                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deriveFont" type="Font" line="1426">
                <params>
                    <param name="size" type="float"/>
                </params>
                <scope line="1427"/>
                <declaration name="newValues" type="AttributeValues" line="1430"/>
            </method>
            <javadoc line="1434">
                Creates a new &lt;code&gt;Font&lt;/code&gt; object by replicating the current
                  &lt;code&gt;Font&lt;/code&gt; object and applying a new transform to it.                
                <param>
                    trans the &lt;code&gt;AffineTransform&lt;/code&gt; associated with the
                      new &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; object.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;trans&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deriveFont" type="Font" line="1444">
                <params>
                    <param name="trans" type="AffineTransform"/>
                </params>
                <declaration name="newValues" type="AttributeValues" line="1445"/>
            </method>
            <javadoc line="1449">
                Creates a new &lt;code&gt;Font&lt;/code&gt; object by replicating the current
                  &lt;code&gt;Font&lt;/code&gt; object and applying a new style to it.                
                <param>
                    style the style for the new &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deriveFont" type="Font" line="1456">
                <params>
                    <param name="style" type="int"/>
                </params>
                <scope line="1457"/>
                <declaration name="newValues" type="AttributeValues" line="1460"/>
                <declaration name="oldStyle" type="int" line="1461"/>
            </method>
            <javadoc line="1465">
                Creates a new &lt;code&gt;Font&lt;/code&gt; object by replicating the current
                  &lt;code&gt;Font&lt;/code&gt; object and applying a new set of font attributes
                  to it.                
                <param>
                    attributes a map of attributes enabled for the new
                      &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;Font&lt;/code&gt; object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deriveFont" type="Font" line="1474">
                <params>
                    <param name="attributes" type="Map&lt;? extends Attribute,?&gt;"/>
                </params>
                <scope line="1475"/>
                <declaration name="newValues" type="AttributeValues" line="1478"/>
            </method>
            <javadoc line="1482">
                Checks if this &lt;code&gt;Font&lt;/code&gt; has a glyph for the specified
                  character.
                  &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;../../java/lang/Character.html#supplementary&quot;&gt; supplementary
                  characters&lt;/a&gt;. To support all Unicode characters, including
                  supplementary characters, use the {@link #canDisplay(int)}method or &lt;code&gt;canDisplayUpTo&lt;/code&gt; methods.                
                <param>
                    c the character for which a glyph is needed                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Font&lt;/code&gt; has a glyph for this
                      character; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="canDisplay" type="boolean" line="1494">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="1497">
                Checks if this &lt;code&gt;Font&lt;/code&gt; has a glyph for the specified
                  character.                
                <param>
                    codePoint the character (Unicode code point) for which a glyph
                      is needed.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Font&lt;/code&gt; has a glyph for the
                      character; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <throws>
                    IllegalArgumentException if the code point is not a valid Unicode
                      code point.                    
                </throws>
                <see>
                    Character#isValidCodePoint(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="canDisplay" type="boolean" line="1509">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <scope line="1510"/>
            </method>
            <javadoc line="1515">
                Indicates whether or not this &lt;code&gt;Font&lt;/code&gt; can display a
                  specified &lt;code&gt;String&lt;/code&gt;.  For strings with Unicode encoding,
                  it is important to know if a particular font can display the
                  string. This method returns an offset into the &lt;code&gt;String&lt;/code&gt;
                  &lt;code&gt;str&lt;/code&gt; which is the first character this
                  &lt;code&gt;Font&lt;/code&gt; cannot display without using the missing glyph
                  code. If the &lt;code&gt;Font&lt;/code&gt; can display all characters, -1 is
                  returned.                
                <param>
                    str a &lt;code&gt;String&lt;/code&gt; object                    
                </param>
                <return>
                    an offset into &lt;code&gt;str&lt;/code&gt; that points
                      to the first character in &lt;code&gt;str&lt;/code&gt; that this
                      &lt;code&gt;Font&lt;/code&gt; cannot display; or &lt;code&gt;-1&lt;/code&gt; if
                      this &lt;code&gt;Font&lt;/code&gt; can display all characters in
                      &lt;code&gt;str&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="canDisplayUpTo" type="int" line="1532">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="font2d" type="Font2D" line="1533"/>
                <declaration name="len" type="int" line="1534"/>
                <scope line="1535">
                    <declaration name="c" type="char" line="1536"/>
                    <scope line="1537"/>
                    <scope line="1540"/>
                    <scope line="1543"/>
                </scope>
            </method>
            <javadoc line="1550">
                Indicates whether or not this &lt;code&gt;Font&lt;/code&gt; can display
                  the characters in the specified &lt;code&gt;text&lt;/code&gt;
                  starting at &lt;code&gt;start&lt;/code&gt; and ending at
                  &lt;code&gt;limit&lt;/code&gt;.  This method is a convenience overload.                
                <param>
                    text the specified array of &lt;code&gt;char&lt;/code&gt; values                    
                </param>
                <param>
                    start the specified starting offset (in
                      &lt;code&gt;char&lt;/code&gt;s) into the specified array of
                      &lt;code&gt;char&lt;/code&gt; values                    
                </param>
                <param>
                    limit the specified ending offset (in
                      &lt;code&gt;char&lt;/code&gt;s) into the specified array of
                      &lt;code&gt;char&lt;/code&gt; values                    
                </param>
                <return>
                    an offset into &lt;code&gt;text&lt;/code&gt; that points
                      to the first character in &lt;code&gt;text&lt;/code&gt; that this
                      &lt;code&gt;Font&lt;/code&gt; cannot display; or &lt;code&gt;-1&lt;/code&gt; if
                      this &lt;code&gt;Font&lt;/code&gt; can display all characters in
                      &lt;code&gt;text&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="canDisplayUpTo" type="int" line="1569">
                <params>
                    <param name="text" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="font2d" type="Font2D" line="1570"/>
                <scope line="1571">
                    <declaration name="c" type="char" line="1572"/>
                    <scope line="1573"/>
                    <scope line="1576"/>
                    <scope line="1579"/>
                </scope>
            </method>
            <javadoc line="1586">
                Indicates whether or not this &lt;code&gt;Font&lt;/code&gt; can display the
                  text specified by the &lt;code&gt;iter&lt;/code&gt; starting at
                  &lt;code&gt;start&lt;/code&gt; and ending at &lt;code&gt;limit&lt;/code&gt;.                
                <param>
                    iter  a {@link CharacterIterator} object                    
                </param>
                <param>
                    start the specified starting offset into the specified
                      &lt;code&gt;CharacterIterator&lt;/code&gt;.                    
                </param>
                <param>
                    limit the specified ending offset into the specified
                      &lt;code&gt;CharacterIterator&lt;/code&gt;.                    
                </param>
                <return>
                    an offset into &lt;code&gt;iter&lt;/code&gt; that points
                      to the first character in &lt;code&gt;iter&lt;/code&gt; that this
                      &lt;code&gt;Font&lt;/code&gt; cannot display; or &lt;code&gt;-1&lt;/code&gt; if
                      this &lt;code&gt;Font&lt;/code&gt; can display all characters in
                      &lt;code&gt;iter&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="canDisplayUpTo" type="int" line="1602">
                <params>
                    <param name="iter" type="CharacterIterator"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="font2d" type="Font2D" line="1603"/>
                <declaration name="c" type="char" line="1604"/>
                <scope line="1605">
                    <scope line="1606"/>
                    <scope line="1609"/>
                    <declaration name="c2" type="char" line="1612"/>
                    <scope line="1613"/>
                    <scope line="1616"/>
                </scope>
            </method>
            <javadoc line="1623">
                Returns the italic angle of this &lt;code&gt;Font&lt;/code&gt;.  The italic angle
                  is the inverse slope of the caret which best matches the posture of this
                  &lt;code&gt;Font&lt;/code&gt;.                
                <see>
                    TextAttribute#POSTURE                    
                </see>
                <return>
                    the angle of the ITALIC style of this &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getItalicAngle" type="float" line="1630"/>
            <method name="getItalicAngle" type="float" line="1633">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="aa" type="Object" line="1634"/>
                <scope line="1635"/>
                <scope line="1639"/>
            </method>
            <javadoc line="1645">
                Checks whether or not this &lt;code&gt;Font&lt;/code&gt; has uniform
                  line metrics.  A logical &lt;code&gt;Font&lt;/code&gt; might be a
                  composite font, which means that it is composed of different
                  physical fonts to cover different code ranges.  Each of these
                  fonts might have different &lt;code&gt;LineMetrics&lt;/code&gt;.  If the
                  logical &lt;code&gt;Font&lt;/code&gt; is a single
                  font then the metrics would be uniform.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Font&lt;/code&gt; has
                      uniform line metrics; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="hasUniformLineMetrics" type="boolean" line="1656"/>
            <declaration name="flmref" type="SoftReference" line="1659"/>
            <method name="defaultLineMetrics" type="FontLineMetrics" line="1660">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="flm" type="FontLineMetrics" line="1661"/>
                <scope line="1662">
                    <declaration name="metrics" type="float[]" line="1663"/>
                    <declaration name="ascent" type="float" line="1665"/>
                    <declaration name="descent" type="float" line="1666"/>
                    <declaration name="leading" type="float" line="1667"/>
                    <declaration name="ssOffset" type="float" line="1668"/>
                    <scope line="1669"/>
                    <declaration name="height" type="float" line="1674"/>
                    <declaration name="baselineIndex" type="int" line="1675"/>
                    <declaration name="baselineOffsets" type="float[]" line="1676"/>
                    <declaration name="strikethroughOffset" type="float" line="1677"/>
                    <declaration name="strikethroughThickness" type="float" line="1678"/>
                    <declaration name="underlineOffset" type="float" line="1679"/>
                    <declaration name="underlineThickness" type="float" line="1680"/>
                    <declaration name="italicAngle" type="float" line="1681"/>
                    <scope line="1682">
                        <declaration name="ctx" type="AffineTransform" line="1683"/>
                        <scope line="1684">
                            <declaration name="pt" type="Point2D.Float" line="1685"/>
                        </scope>
                    </scope>
                    <declaration name="cm" type="CoreMetrics" line="1702"/>
                </scope>
            </method>
            <javadoc line="1708">
                Returns a {@link LineMetrics} object created with the specified
                  &lt;code&gt;String&lt;/code&gt; and {@link FontRenderContext}.                
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                      specified &lt;code&gt;String&lt;/code&gt; and {@link FontRenderContext}.                    
                </return>
            </javadoc>
            <method name="getLineMetrics" type="LineMetrics" line="1716">
                <params>
                    <param name="str" type="String"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="flm" type="FontLineMetrics" line="1717"/>
            </method>
            <javadoc line="1721">
                Returns a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                  specified arguments.                
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <param>
                    beginIndex the initial offset of &lt;code&gt;str&lt;/code&gt;                    
                </param>
                <param>
                    limit the end offset of &lt;code&gt;str&lt;/code&gt;                    
                </param>
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                      specified arguments.                    
                </return>
            </javadoc>
            <method name="getLineMetrics" type="LineMetrics" line="1731">
                <params>
                    <param name="str" type="String"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="flm" type="FontLineMetrics" line="1732"/>
                <declaration name="numChars" type="int" line="1733"/>
            </method>
            <javadoc line="1737">
                Returns a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                  specified arguments.                
                <param>
                    chars an array of characters                    
                </param>
                <param>
                    beginIndex the initial offset of &lt;code&gt;chars&lt;/code&gt;                    
                </param>
                <param>
                    limit the end offset of &lt;code&gt;chars&lt;/code&gt;                    
                </param>
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                      specified arguments.                    
                </return>
            </javadoc>
            <method name="getLineMetrics" type="LineMetrics" line="1747">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="flm" type="FontLineMetrics" line="1748"/>
                <declaration name="numChars" type="int" line="1749"/>
            </method>
            <javadoc line="1753">
                Returns a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                  specified arguments.                
                <param>
                    ci the specified &lt;code&gt;CharacterIterator&lt;/code&gt;                    
                </param>
                <param>
                    beginIndex the initial offset in &lt;code&gt;ci&lt;/code&gt;                    
                </param>
                <param>
                    limit the end offset of &lt;code&gt;ci&lt;/code&gt;                    
                </param>
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                      specified arguments.                    
                </return>
            </javadoc>
            <method name="getLineMetrics" type="LineMetrics" line="1763">
                <params>
                    <param name="ci" type="CharacterIterator"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="flm" type="FontLineMetrics" line="1764"/>
                <declaration name="numChars" type="int" line="1765"/>
            </method>
            <javadoc line="1769">
                Returns the logical bounds of the specified &lt;code&gt;String&lt;/code&gt; in
                  the specified &lt;code&gt;FontRenderContext&lt;/code&gt;.  The logical bounds
                  contains the origin, ascent, advance, and height, which includes
                  the leading.  The logical bounds does not always enclose all the
                  text.  For example, in some languages and in some fonts, accent
                  marks can be positioned above the ascent or below the descent.
                  To obtain a visual bounding box, which encloses all the text,
                  use the {@link TextLayout#getBounds() getBounds} method of
                  &lt;code&gt;TextLayout&lt;/code&gt;.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.Font class notes}).                
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a {@link Rectangle2D} that is the bounding box of the
                      specified &lt;code&gt;String&lt;/code&gt; in the specified
                      &lt;code&gt;FontRenderContext&lt;/code&gt;.                    
                </return>
                <see>
                    FontRenderContext                    
                </see>
                <see>
                    Font#createGlyphVector                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getStringBounds" type="Rectangle2D" line="1790">
                <params>
                    <param name="str" type="String"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="array" type="char[]" line="1791"/>
            </method>
            <javadoc line="1794">
                Returns the logical bounds of the specified &lt;code&gt;String&lt;/code&gt; in
                  the specified &lt;code&gt;FontRenderContext&lt;/code&gt;.  The logical bounds
                  contains the origin, ascent, advance, and height, which includes
                  the leading.  The logical bounds does not always enclose all the
                  text.  For example, in some languages and in some fonts, accent
                  marks can be positioned above the ascent or below the descent.
                  To obtain a visual bounding box, which encloses all the text,
                  use the {@link TextLayout#getBounds() getBounds} method of
                  &lt;code&gt;TextLayout&lt;/code&gt;.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.Font class notes}).                
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <param>
                    beginIndex the initial offset of &lt;code&gt;str&lt;/code&gt;                    
                </param>
                <param>
                    limit the end offset of &lt;code&gt;str&lt;/code&gt;                    
                </param>
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box of the
                      specified &lt;code&gt;String&lt;/code&gt; in the specified
                      &lt;code&gt;FontRenderContext&lt;/code&gt;.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if &lt;code&gt;beginIndex&lt;/code&gt; is
                      less than zero, or &lt;code&gt;limit&lt;/code&gt; is greater than the
                      length of &lt;code&gt;str&lt;/code&gt;, or &lt;code&gt;beginIndex&lt;/code&gt;
                      is greater than &lt;code&gt;limit&lt;/code&gt;.                    
                </throws>
                <see>
                    FontRenderContext                    
                </see>
                <see>
                    Font#createGlyphVector                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getStringBounds" type="Rectangle2D" line="1821">
                <params>
                    <param name="str" type="String"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="substr" type="String" line="1822"/>
            </method>
            <javadoc line="1825">
                Returns the logical bounds of the specified array of characters
                  in the specified &lt;code&gt;FontRenderContext&lt;/code&gt;.  The logical
                  bounds contains the origin, ascent, advance, and height, which
                  includes the leading.  The logical bounds does not always enclose
                  all the text.  For example, in some languages and in some fonts,
                  accent marks can be positioned above the ascent or below the
                  descent.  To obtain a visual bounding box, which encloses all the
                  text, use the {@link TextLayout#getBounds() getBounds} method of
                  &lt;code&gt;TextLayout&lt;/code&gt;.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.Font class notes}).                
                <param>
                    chars an array of characters                    
                </param>
                <param>
                    beginIndex the initial offset in the array of
                      characters                    
                </param>
                <param>
                    limit the end offset in the array of characters                    
                </param>
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box of the
                      specified array of characters in the specified
                      &lt;code&gt;FontRenderContext&lt;/code&gt;.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if &lt;code&gt;beginIndex&lt;/code&gt; is
                      less than zero, or &lt;code&gt;limit&lt;/code&gt; is greater than the
                      length of &lt;code&gt;chars&lt;/code&gt;, or &lt;code&gt;beginIndex&lt;/code&gt;
                      is greater than &lt;code&gt;limit&lt;/code&gt;.                    
                </throws>
                <see>
                    FontRenderContext                    
                </see>
                <see>
                    Font#createGlyphVector                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getStringBounds" type="Rectangle2D" line="1853">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <scope line="1854"/>
                <scope line="1857"/>
                <scope line="1860"/>
                <declaration name="simple" type="boolean" line="1863"/>
                <scope line="1864"/>
                <scope line="1867">
                    <declaration name="gv" type="GlyphVector" line="1868"/>
                </scope>
                <scope line="1871">
                    <declaration name="str" type="String" line="1872"/>
                    <declaration name="tl" type="TextLayout" line="1873"/>
                </scope>
            </method>
            <javadoc line="1877">
                Returns the logical bounds of the characters indexed in the
                  specified {@link CharacterIterator} in the
                  specified &lt;code&gt;FontRenderContext&lt;/code&gt;.  The logical bounds
                  contains the origin, ascent, advance, and height, which includes
                  the leading.  The logical bounds does not always enclose all the
                  text.  For example, in some languages and in some fonts, accent
                  marks can be positioned above the ascent or below the descent.
                  To obtain a visual bounding box, which encloses all the text,
                  use the {@link TextLayout#getBounds() getBounds} method of
                  &lt;code&gt;TextLayout&lt;/code&gt;.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.Font class notes}).                
                <param>
                    ci the specified &lt;code&gt;CharacterIterator&lt;/code&gt;                    
                </param>
                <param>
                    beginIndex the initial offset in &lt;code&gt;ci&lt;/code&gt;                    
                </param>
                <param>
                    limit the end offset in &lt;code&gt;ci&lt;/code&gt;                    
                </param>
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box of the
                      characters indexed in the specified &lt;code&gt;CharacterIterator&lt;/code&gt;
                      in the specified &lt;code&gt;FontRenderContext&lt;/code&gt;.                    
                </return>
                <see>
                    FontRenderContext                    
                </see>
                <see>
                    Font#createGlyphVector                    
                </see>
                <since>
                    1.2                    
                </since>
                <throws>
                    IndexOutOfBoundsException if &lt;code&gt;beginIndex&lt;/code&gt; is
                      less than the start index of &lt;code&gt;ci&lt;/code&gt;, or
                      &lt;code&gt;limit&lt;/code&gt; is greater than the end index of
                      &lt;code&gt;ci&lt;/code&gt;, or &lt;code&gt;beginIndex&lt;/code&gt; is greater
                      than &lt;code&gt;limit&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getStringBounds" type="Rectangle2D" line="1906">
                <params>
                    <param name="ci" type="CharacterIterator"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="start" type="int" line="1907"/>
                <declaration name="end" type="int" line="1908"/>
                <scope line="1909"/>
                <scope line="1912"/>
                <scope line="1915"/>
                <declaration name="arr" type="char[]" line="1918"/>
                <scope line="1920"/>
            </method>
            <javadoc line="1926">
                Returns the bounds for the character with the maximum
                  bounds as defined in the specified &lt;code&gt;FontRenderContext&lt;/code&gt;.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.Font class notes}).                
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box
                      for the character with the maximum bounds.                    
                </return>
            </javadoc>
            <method name="getMaxCharBounds" type="Rectangle2D" line="1935">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="metrics" type="float[]" line="1936"/>
            </method>
            <javadoc line="1940">
                Creates a {@link java.awt.font.GlyphVector GlyphVector} by
                  mapping characters to glyphs one-to-one based on the
                  Unicode cmap in this &lt;code&gt;Font&lt;/code&gt;.  This method does no other
                  processing besides the mapping of glyphs to characters.  This
                  means that this method is not useful for some scripts, such
                  as Arabic, Hebrew, Thai, and Indic, that require reordering,
                  shaping, or ligature substitution.                
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;GlyphVector&lt;/code&gt; created with the
                      specified &lt;code&gt;String&lt;/code&gt; and the specified
                      &lt;code&gt;FontRenderContext&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="createGlyphVector" type="GlyphVector" line="1954">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="1957">
                Creates a {@link java.awt.font.GlyphVector GlyphVector} by
                  mapping characters to glyphs one-to-one based on the
                  Unicode cmap in this &lt;code&gt;Font&lt;/code&gt;.  This method does no other
                  processing besides the mapping of glyphs to characters.  This
                  means that this method is not useful for some scripts, such
                  as Arabic, Hebrew, Thai, and Indic, that require reordering,
                  shaping, or ligature substitution.                
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <param>
                    chars the specified array of characters                    
                </param>
                <return>
                    a new &lt;code&gt;GlyphVector&lt;/code&gt; created with the
                      specified array of characters and the specified
                      &lt;code&gt;FontRenderContext&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="createGlyphVector" type="GlyphVector" line="1971">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="chars" type="char[]"/>
                </params>
            </method>
            <javadoc line="1974">
                Creates a {@link java.awt.font.GlyphVector GlyphVector} by
                  mapping the specified characters to glyphs one-to-one based on the
                  Unicode cmap in this &lt;code&gt;Font&lt;/code&gt;.  This method does no other
                  processing besides the mapping of glyphs to characters.  This
                  means that this method is not useful for some scripts, such
                  as Arabic, Hebrew, Thai, and Indic, that require reordering,
                  shaping, or ligature substitution.                
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <param>
                    ci the specified &lt;code&gt;CharacterIterator&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;GlyphVector&lt;/code&gt; created with the
                      specified &lt;code&gt;CharacterIterator&lt;/code&gt; and the specified
                      &lt;code&gt;FontRenderContext&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="createGlyphVector" type="GlyphVector" line="1988">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="ci" type="CharacterIterator"/>
                </params>
            </method>
            <javadoc line="1991">
                Creates a {@link java.awt.font.GlyphVector GlyphVector} by
                  mapping characters to glyphs one-to-one based on the
                  Unicode cmap in this &lt;code&gt;Font&lt;/code&gt;.  This method does no other
                  processing besides the mapping of glyphs to characters.  This
                  means that this method is not useful for some scripts, such
                  as Arabic, Hebrew, Thai, and Indic, that require reordering,
                  shaping, or ligature substitution.                
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <param>
                    glyphCodes the specified integer array                    
                </param>
                <return>
                    a new &lt;code&gt;GlyphVector&lt;/code&gt; created with the
                      specified integer array and the specified
                      &lt;code&gt;FontRenderContext&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="createGlyphVector" type="GlyphVector" line="2005">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="glyphCodes" type="int[]"/>
                </params>
            </method>
            <javadoc line="2008">
                Returns a new &lt;code&gt;GlyphVector&lt;/code&gt; object, performing full
                  layout of the text if possible.  Full layout is required for
                  complex text, such as Arabic or Hindi.  Support for different
                  scripts depends on the font and implementation.
                  &lt;p&gt;
                  Layout requires bidi analysis, as performed by
                  &lt;code&gt;Bidi&lt;/code&gt;, and should only be performed on text that
                  has a uniform direction.  The direction is indicated in the
                  flags parameter,by using LAYOUT_RIGHT_TO_LEFT to indicate a
                  right-to-left (Arabic and Hebrew) run direction, or
                  LAYOUT_LEFT_TO_RIGHT to indicate a left-to-right (English)
                  run direction.
                  &lt;p&gt;
                  In addition, some operations, such as Arabic shaping, require
                  context, so that the characters at the start and limit can have
                  the proper shapes.  Sometimes the data in the buffer outside
                  the provided range does not have valid data.  The values
                  LAYOUT_NO_START_CONTEXT and LAYOUT_NO_LIMIT_CONTEXT can be
                  added to the flags parameter to indicate that the text before
                  start, or after limit, respectively, should not be examined
                  for context.
                  &lt;p&gt;
                  All other values for the flags parameter are reserved.                
                <param>
                    frc the specified &lt;code&gt;FontRenderContext&lt;/code&gt;                    
                </param>
                <param>
                    text the text to layout                    
                </param>
                <param>
                    start the start of the text to use for the &lt;code&gt;GlyphVector&lt;/code&gt;                    
                </param>
                <param>
                    limit the limit of the text to use for the &lt;code&gt;GlyphVector&lt;/code&gt;                    
                </param>
                <param>
                    flags control flags as described above                    
                </param>
                <return>
                    a new &lt;code&gt;GlyphVector&lt;/code&gt; representing the text between
                      start and limit, with glyphs chosen and positioned so as to best represent
                      the text                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if start or limit is
                      out of bounds                    
                </throws>
                <see>
                    java.text.Bidi                    
                </see>
                <see>
                    #LAYOUT_LEFT_TO_RIGHT                    
                </see>
                <see>
                    #LAYOUT_RIGHT_TO_LEFT                    
                </see>
                <see>
                    #LAYOUT_NO_START_CONTEXT                    
                </see>
                <see>
                    #LAYOUT_NO_LIMIT_CONTEXT                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="layoutGlyphVector" type="GlyphVector" line="2049">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="text" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="flags" type="int"/>
                </params>
                <declaration name="gl" type="GlyphLayout" line="2050"/>
                <declaration name="gv" type="StandardGlyphVector" line="2051"/>
            </method>
            <declaration name="LAYOUT_LEFT_TO_RIGHT" type="int" line="2055"/>
            <javadoc line="2055">
                A flag to layoutGlyphVector indicating that text is left-to-right as
                  determined by Bidi analysis.                
            </javadoc>
            <declaration name="LAYOUT_RIGHT_TO_LEFT" type="int" line="2060"/>
            <javadoc line="2060">
                A flag to layoutGlyphVector indicating that text is right-to-left as
                  determined by Bidi analysis.                
            </javadoc>
            <declaration name="LAYOUT_NO_START_CONTEXT" type="int" line="2065"/>
            <javadoc line="2065">
                A flag to layoutGlyphVector indicating that text in the char array
                  before the indicated start should not be examined.                
            </javadoc>
            <declaration name="LAYOUT_NO_LIMIT_CONTEXT" type="int" line="2070"/>
            <javadoc line="2070">
                A flag to layoutGlyphVector indicating that text in the char array
                  after the indicated limit should not be examined.                
            </javadoc>
            <method name="applyTransform" type="void" line="2075">
                <params>
                    <param name="trans" type="AffineTransform"/>
                    <param name="values" type="AttributeValues"/>
                </params>
                <scope line="2076"/>
            </method>
            <method name="applyStyle" type="void" line="2081">
                <params>
                    <param name="style" type="int"/>
                    <param name="values" type="AttributeValues"/>
                </params>
            </method>
            <method name="initIDs" type="void" line="2085"/>
        </class>
    </source>