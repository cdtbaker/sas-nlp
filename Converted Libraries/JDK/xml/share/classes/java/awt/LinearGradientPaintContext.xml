<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.MultipleGradientPaint.CycleMethod"/>
        <import package="java.awt.MultipleGradientPaint.ColorSpaceType"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.ColorModel"/>
        <class name="LinearGradientPaintContext" line="35">
            <extends class="MultipleGradientPaintContext"/>
            <javadoc line="35">
                Provides the actual implementation for the LinearGradientPaint.
                  This is where the pixel processing is done.                
                <see>
                    java.awt.LinearGradientPaint                    
                </see>
                <see>
                    java.awt.PaintContext                    
                </see>
                <see>
                    java.awt.Paint                    
                </see>
                <author>
                    Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans                    
                </author>
            </javadoc>
            <declaration name="dgdX" type="float" line="46"/>
            <javadoc line="46">
                The following invariants are used to process the gradient value from
                  a device space coordinate, (X, Y):
                  g(X, Y) = dgdXX + dgdYY + gc                
            </javadoc>
            <javadoc line="53">
                Constructor for LinearGradientPaintContext.                
                <param>
                    paint the {@code LinearGradientPaint} from which this context
                      is created                    
                </param>
                <param>
                    cm {@code ColorModel} that receives
                      the <code>Paint</code> data. This is used only as a hint.                    
                </param>
                <param>
                    deviceBounds the device space bounding box of the
                      graphics primitive being rendered                    
                </param>
                <param>
                    userBounds the user space bounding box of the
                      graphics primitive being rendered                    
                </param>
                <param>
                    t the {@code AffineTransform} from user
                      space into device space (gradientTransform should be
                      concatenated with this)                    
                </param>
                <param>
                    hints the hints that the context object uses to choose
                      between rendering alternatives                    
                </param>
                <param>
                    dStart gradient start point, in user space                    
                </param>
                <param>
                    dEnd gradient end point, in user space                    
                </param>
                <param>
                    fractions the fractions specifying the gradient distribution                    
                </param>
                <param>
                    colors the gradient colors                    
                </param>
                <param>
                    cycleMethod either NO_CYCLE, REFLECT, or REPEAT                    
                </param>
                <param>
                    colorSpace which colorspace to use for interpolation,
                      either SRGB or LINEAR_RGB                    
                </param>
            </javadoc>
            <method name="LinearGradientPaintContext" type="constructor" line="89">
                <params>
                    <param name="paint" type="LinearGradientPaint"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="deviceBounds" type="Rectangle"/>
                    <param name="userBounds" type="Rectangle2D"/>
                    <param name="t" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                    <param name="start" type="Point2D"/>
                    <param name="end" type="Point2D"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                    <param name="colorSpace" type="ColorSpaceType"/>
                </params>
                <comment line="93">
                    A given point in the raster should take on the same color as its                    
                </comment>
                <comment line="94">
                    projection onto the gradient vector.                    
                </comment>
                <comment line="95">
                    Thus, we want the projection of the current position vector                    
                </comment>
                <comment line="96">
                    onto the gradient vector, then normalized with respect to the                    
                </comment>
                <comment line="97">
                    length of the gradient vector, giving a value which can be mapped                    
                </comment>
                <comment line="98">
                    into the range 0-1.                    
                </comment>
                <comment line="99">
                    projection =                    
                </comment>
                <comment line="100">
                    currentVector dot gradientVector / length(gradientVector)                    
                </comment>
                <comment line="101">
                    normalized = projection / length(gradientVector)                    
                </comment>
                <comment line="108">
                    change in x from start to end                    
                </comment>
                <comment line="109">
                    change in y from start to end                    
                </comment>
                <comment line="110">
                    total distance squared                    
                </comment>
                <comment line="112">
                    avoid repeated calculations by doing these divides once                    
                </comment>
                <comment line="116">
                    incremental change along gradient for +x                    
                </comment>
                <comment line="118">
                    incremental change along gradient for +y                    
                </comment>
                <comment line="121">
                    constant, incorporates the translation components from the matrix                    
                </comment>
                <declaration name="startx" type="float" line="103"/>
                <declaration name="starty" type="float" line="104"/>
                <declaration name="endx" type="float" line="105"/>
                <declaration name="endy" type="float" line="106"/>
                <declaration name="dx" type="float" line="108"/>
                <declaration name="dy" type="float" line="109"/>
                <declaration name="dSq" type="float" line="110"/>
                <declaration name="constX" type="float" line="113"/>
                <declaration name="constY" type="float" line="114"/>
            </method>
            <javadoc line="125">
                Return a Raster containing the colors generated for the graphics
                  operation.  This is where the area is filled with colors distributed
                  linearly.                
                <param>
                    x,y,w,h the area in device space for which colors are
                      generated.                    
                </param>
            </javadoc>
            <method name="fillRaster" type="void" line="135">
                <params>
                    <param name="pixels" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="136">
                    current value for row gradients                    
                </comment>
                <comment line="139">
                    used to end iteration on rows                    
                </comment>
                <comment line="142">
                    constant which can be pulled out of the inner loop                    
                </comment>
                <comment line="145">
                    for every row                    
                </comment>
                <comment line="147">
                    initialize current value to be start                    
                </comment>
                <comment line="150">
                    for every pixel in this row                    
                </comment>
                <comment line="151">
                    get the color                    
                </comment>
                <comment line="154">
                    incremental change in g                    
                </comment>
                <comment line="158">
                    change in off from row to row                    
                </comment>
                <comment line="161">
                    rowlimit is width + offset                    
                </comment>
                <declaration name="g" type="float" line="137"/>
                <declaration name="rowLimit" type="int" line="140"/>
                <declaration name="initConst" type="float" line="143"/>
                <scope line="145">
                    <scope line="150"/>
                </scope>
            </method>
        </class>
    </source>