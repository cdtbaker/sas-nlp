<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.MultipleGradientPaint.CycleMethod"/>
        <import package="java.awt.MultipleGradientPaint.ColorSpaceType"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.ColorModel"/>
        <class name="LinearGradientPaintContext" line="8">
            <extends class="MultipleGradientPaintContext"/>
            <javadoc line="8">
                Provides the actual implementation for the LinearGradientPaint.
                  This is where the pixel processing is done.                
                <see>
                    java.awt.LinearGradientPaint                    
                </see>
                <see>
                    java.awt.PaintContext                    
                </see>
                <see>
                    java.awt.Paint                    
                </see>
                <author>
                    Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans                    
                </author>
            </javadoc>
            <declaration name="dgdX" type="float" line="17"/>
            <javadoc line="17">
                The following invariants are used to process the gradient value from
                  a device space coordinate, (X, Y):
                  g(X, Y) = dgdXX + dgdYY + gc                
            </javadoc>
            <javadoc line="23">
                Constructor for LinearGradientPaintContext.                
                <param>
                    paint the {@code LinearGradientPaint} from which this context
                      is created                    
                </param>
                <param>
                    cm {@code ColorModel} that receives
                      the &lt;code&gt;Paint&lt;/code&gt; data. This is used only as a hint.                    
                </param>
                <param>
                    deviceBounds the device space bounding box of the
                      graphics primitive being rendered                    
                </param>
                <param>
                    userBounds the user space bounding box of the
                      graphics primitive being rendered                    
                </param>
                <param>
                    t the {@code AffineTransform} from user
                      space into device space (gradientTransform should be
                      concatenated with this)                    
                </param>
                <param>
                    hints the hints that the context object uses to choose
                      between rendering alternatives                    
                </param>
                <param>
                    dStart gradient start point, in user space                    
                </param>
                <param>
                    dEnd gradient end point, in user space                    
                </param>
                <param>
                    fractions the fractions specifying the gradient distribution                    
                </param>
                <param>
                    colors the gradient colors                    
                </param>
                <param>
                    cycleMethod either NO_CYCLE, REFLECT, or REPEAT                    
                </param>
                <param>
                    colorSpace which colorspace to use for interpolation,
                      either SRGB or LINEAR_RGB                    
                </param>
            </javadoc>
            <method name="LinearGradientPaintContext" type="constructor" line="46">
                <params>
                    <param name="paint" type="LinearGradientPaint"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="deviceBounds" type="Rectangle"/>
                    <param name="userBounds" type="Rectangle2D"/>
                    <param name="t" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                    <param name="start" type="Point2D"/>
                    <param name="end" type="Point2D"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                    <param name="colorSpace" type="ColorSpaceType"/>
                </params>
                <declaration name="startx" type="float" line="48"/>
                <declaration name="starty" type="float" line="49"/>
                <declaration name="endx" type="float" line="50"/>
                <declaration name="endy" type="float" line="51"/>
                <declaration name="dx" type="float" line="52"/>
                <declaration name="dy" type="float" line="53"/>
                <declaration name="dSq" type="float" line="54"/>
                <declaration name="constX" type="float" line="55"/>
                <declaration name="constY" type="float" line="56"/>
            </method>
            <javadoc line="61">
                Return a Raster containing the colors generated for the graphics
                  operation.  This is where the area is filled with colors distributed
                  linearly.                
                <param>
                    x,y,w,h the area in device space for which colors are
                      generated.                    
                </param>
            </javadoc>
            <method name="fillRaster" type="void" line="68">
                <params>
                    <param name="pixels" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="g" type="float" line="69"/>
                <declaration name="rowLimit" type="int" line="70"/>
                <declaration name="initConst" type="float" line="71"/>
                <scope line="72">
                    <scope line="74"/>
                </scope>
            </method>
        </class>
    </source>