<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.EventObject"/>
        <import package="java.awt.event"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.LightweightPeer"/>
        <import package="java.lang.reflect.Field"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="AWTEvent" line="13">
            <extends class="EventObject"/>
            <javadoc line="13">
                The root event class for all AWT events.
                  This class and its subclasses supercede the original
                  java.awt.Event class.
                  Subclasses of this root AWTEvent class defined outside of the
                  java.awt.event package should define event ID values greater than
                  the value defined by RESERVED_ID_MAX.
                  &lt;p&gt;
                  The event masks defined in this class are needed by Component subclasses
                  which are using Component.enableEvents() to select for event types not
                  selected by registered listeners. If a listener is registered on a
                  component, the appropriate event mask is already set internally by the
                  component.
                  &lt;p&gt;
                  The masks are also used to specify to which types of events an
                  AWTEventListener should listen. The masks are bitwise-ORed together
                  and passed to Toolkit.addAWTEventListener.                
                <see>
                    Component#enableEvents                    
                </see>
                <see>
                    Toolkit#addAWTEventListener                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.AdjustmentEvent                    
                </see>
                <see>
                    java.awt.event.ComponentEvent                    
                </see>
                <see>
                    java.awt.event.ContainerEvent                    
                </see>
                <see>
                    java.awt.event.FocusEvent                    
                </see>
                <see>
                    java.awt.event.InputMethodEvent                    
                </see>
                <see>
                    java.awt.event.InvocationEvent                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.HierarchyEvent                    
                </see>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseWheelEvent                    
                </see>
                <see>
                    java.awt.event.PaintEvent                    
                </see>
                <see>
                    java.awt.event.TextEvent                    
                </see>
                <see>
                    java.awt.event.WindowEvent                    
                </see>
                <author>
                    Carl Quinn                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="52"/>
            <declaration name="bdata" type="byte" line="53"/>
            <declaration name="id" type="int" line="54"/>
            <javadoc line="54">
                The event&apos;s id.                
                <serial>
                                        
                </serial>
                <see>
                    #getID()                    
                </see>
                <see>
                    #AWTEvent                    
                </see>
            </javadoc>
            <declaration name="consumed" type="boolean" line="61"/>
            <javadoc line="61">
                Controls whether or not the event is sent back down to the peer once the
                  source has processed it - false means it&apos;s sent to the peer; true means
                  it&apos;s not. Semantic events always have a &apos;true&apos; value since they were
                  generated by the peer in response to a low-level event.                
                <serial>
                                        
                </serial>
                <see>
                    #consume                    
                </see>
                <see>
                    #isConsumed                    
                </see>
            </javadoc>
            <declaration name="acc" type="AccessControlContext" line="71"/>
            <method name="getAccessControlContext" type="AccessControlContext" line="72">
                <scope line="73"/>
            </method>
            <declaration name="focusManagerIsDispatching" type="boolean" line="78"/>
            <declaration name="isPosted" type="boolean" line="79"/>
            <declaration name="isSystemGenerated" type="boolean" line="80"/>
            <javadoc line="80">
                Indicates whether this AWTEvent was generated by the system as
                  opposed to by user code.                
            </javadoc>
            <declaration name="COMPONENT_EVENT_MASK" type="long" line="85"/>
            <javadoc line="85">
                The event mask for selecting component events.                
            </javadoc>
            <declaration name="CONTAINER_EVENT_MASK" type="long" line="89"/>
            <javadoc line="89">
                The event mask for selecting container events.                
            </javadoc>
            <declaration name="FOCUS_EVENT_MASK" type="long" line="93"/>
            <javadoc line="93">
                The event mask for selecting focus events.                
            </javadoc>
            <declaration name="KEY_EVENT_MASK" type="long" line="97"/>
            <javadoc line="97">
                The event mask for selecting key events.                
            </javadoc>
            <declaration name="MOUSE_EVENT_MASK" type="long" line="101"/>
            <javadoc line="101">
                The event mask for selecting mouse events.                
            </javadoc>
            <declaration name="MOUSE_MOTION_EVENT_MASK" type="long" line="105"/>
            <javadoc line="105">
                The event mask for selecting mouse motion events.                
            </javadoc>
            <declaration name="WINDOW_EVENT_MASK" type="long" line="109"/>
            <javadoc line="109">
                The event mask for selecting window events.                
            </javadoc>
            <declaration name="ACTION_EVENT_MASK" type="long" line="113"/>
            <javadoc line="113">
                The event mask for selecting action events.                
            </javadoc>
            <declaration name="ADJUSTMENT_EVENT_MASK" type="long" line="117"/>
            <javadoc line="117">
                The event mask for selecting adjustment events.                
            </javadoc>
            <declaration name="ITEM_EVENT_MASK" type="long" line="121"/>
            <javadoc line="121">
                The event mask for selecting item events.                
            </javadoc>
            <declaration name="TEXT_EVENT_MASK" type="long" line="125"/>
            <javadoc line="125">
                The event mask for selecting text events.                
            </javadoc>
            <declaration name="INPUT_METHOD_EVENT_MASK" type="long" line="129"/>
            <javadoc line="129">
                The event mask for selecting input method events.                
            </javadoc>
            <declaration name="INPUT_METHODS_ENABLED_MASK" type="long" line="133"/>
            <javadoc line="133">
                The pseudo event mask for enabling input methods.
                  We&apos;re using one bit in the eventMask so we don&apos;t need
                  a separate field inputMethodsEnabled.                
            </javadoc>
            <declaration name="PAINT_EVENT_MASK" type="long" line="139"/>
            <javadoc line="139">
                The event mask for selecting paint events.                
            </javadoc>
            <declaration name="INVOCATION_EVENT_MASK" type="long" line="143"/>
            <javadoc line="143">
                The event mask for selecting invocation events.                
            </javadoc>
            <declaration name="HIERARCHY_EVENT_MASK" type="long" line="147"/>
            <javadoc line="147">
                The event mask for selecting hierarchy events.                
            </javadoc>
            <declaration name="HIERARCHY_BOUNDS_EVENT_MASK" type="long" line="151"/>
            <javadoc line="151">
                The event mask for selecting hierarchy bounds events.                
            </javadoc>
            <declaration name="MOUSE_WHEEL_EVENT_MASK" type="long" line="155"/>
            <javadoc line="155">
                The event mask for selecting mouse wheel events.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="WINDOW_STATE_EVENT_MASK" type="long" line="160"/>
            <javadoc line="160">
                The event mask for selecting window state events.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="WINDOW_FOCUS_EVENT_MASK" type="long" line="165"/>
            <javadoc line="165">
                The event mask for selecting window focus events.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="RESERVED_ID_MAX" type="int" line="170"/>
            <javadoc line="170">
                The maximum value for reserved AWT event IDs. Programs defining
                  their own event IDs should use IDs greater than this value.                
            </javadoc>
            <declaration name="inputEvent_CanAccessSystemClipboard_Field" type="Field" line="175"/>
            <declaration name="serialVersionUID" type="long" line="176"/>
            <scope line="177">
                <scope line="179"/>
                <anonymous_class line="182">
                    <method name="setPosted" type="void" line="183">
                        <params>
                            <param name="ev" type="AWTEvent"/>
                        </params>
                    </method>
                    <method name="setSystemGenerated" type="void" line="186">
                        <params>
                            <param name="ev" type="AWTEvent"/>
                        </params>
                    </method>
                    <method name="isSystemGenerated" type="boolean" line="189">
                        <params>
                            <param name="ev" type="AWTEvent"/>
                        </params>
                    </method>
                    <method name="getAccessControlContext" type="AccessControlContext" line="192">
                        <params>
                            <param name="ev" type="AWTEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
            <method name="get_InputEvent_CanAccessSystemClipboard" type="Field" line="198">
                <scope line="199">
                    <anonymous_class line="200">
                        <method name="run" type="Object" line="201">
                            <declaration name="field" type="Field" line="202"/>
                            <scope line="203"/>
                            <scope line="208">
                                <scope line="209"/>
                            </scope>
                            <scope line="213">
                                <scope line="214"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="initIDs" type="void" line="225"/>
            <javadoc line="225">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <javadoc line="230">
                Constructs an AWTEvent object from the parameters of a 1.0-style event.                
                <param>
                    event the old-style event                    
                </param>
            </javadoc>
            <method name="AWTEvent" type="constructor" line="234">
                <params>
                    <param name="event" type="Event"/>
                </params>
            </method>
            <javadoc line="237">
                Constructs an AWTEvent object with the specified source object and type.                
                <param>
                    source the object where the event originated                    
                </param>
                <param>
                    id the event type                    
                </param>
            </javadoc>
            <method name="AWTEvent" type="constructor" line="242">
                <params>
                    <param name="source" type="Object"/>
                    <param name="id" type="int"/>
                </params>
            </method>
            <javadoc line="255">
                Retargets an event to a new source. This method is typically used to
                  retarget an event to a lightweight child Component of the original
                  heavyweight source.
                  &lt;p&gt;
                  This method is intended to be used only by event targeting subsystems,
                  such as client-defined KeyboardFocusManagers. It is not for general
                  client use.                
                <param>
                    newSource the new Object to which the event should be dispatched                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setSource" type="void" line="266">
                <params>
                    <param name="newSource" type="Object"/>
                </params>
                <scope line="267"/>
                <declaration name="comp" type="Component" line="270"/>
                <scope line="271">
                    <scope line="273"/>
                </scope>
                <scope line="277">
                    <scope line="279">
                        <declaration name="peer" type="ComponentPeer" line="280"/>
                        <scope line="281"/>
                    </scope>
                </scope>
            </method>
            <method name="nativeSetSource" type="void" line="287"/>
            <javadoc line="288">
                Returns the event type.                
            </javadoc>
            <method name="getID" type="int" line="291"/>
            <javadoc line="294">
                Returns a String representation of this object.                
            </javadoc>
            <method name="toString" type="String" line="297">
                <declaration name="srcName" type="String" line="298"/>
                <scope line="299"/>
                <scope line="302"/>
            </method>
            <javadoc line="307">
                Returns a string representing the state of this &lt;code&gt;Event&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this event                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="315"/>
            <javadoc line="318">
                Consumes this event, if this event can be consumed. Only low-level,
                  system events can be consumed                
            </javadoc>
            <method name="consume" type="void" line="322"/>
            <javadoc line="340">
                Returns whether this event has been consumed.                
            </javadoc>
            <method name="isConsumed" type="boolean" line="343"/>
            <javadoc line="346">
                Converts a new event to an old one (used for compatibility).
                  If the new event cannot be converted (because no old equivalent
                  exists) then this returns null.
                  Note: this method is here instead of in each individual new
                  event class in java.awt.event because we don&apos;t want to make
                  it public and it needs to be called from java.awt.                
            </javadoc>
            <method name="convertToOld" type="Event" line="354">
                <declaration name="src" type="Object" line="355"/>
                <declaration name="newid" type="int" line="356"/>
                <declaration name="ke" type="KeyEvent" line="360"/>
                <scope line="361"/>
                <declaration name="keyCode" type="int" line="364"/>
                <scope line="365"/>
                <declaration name="me" type="MouseEvent" line="375"/>
                <declaration name="olde" type="Event" line="376"/>
                <scope line="388">
                    <declaration name="p" type="Point" line="389"/>
                </scope>
                <declaration name="ae" type="ActionEvent" line="394"/>
                <declaration name="cmd" type="String" line="395"/>
                <scope line="396"/>
                <scope line="399"/>
                <scope line="402"/>
                <declaration name="ie" type="ItemEvent" line="407"/>
                <declaration name="arg" type="Object" line="408"/>
                <scope line="409"/>
                <scope line="413">
                    <scope line="415"/>
                    <scope line="418"/>
                </scope>
                <declaration name="aje" type="AdjustmentEvent" line="424"/>
                <scope line="439"/>
                <scope line="442"/>
            </method>
            <javadoc line="454">
                Copies all private data from this event into that.
                  Space is allocated for the copied data that will be
                  freed when the that is finalized. Upon completion,
                  this event is not changed.                
            </javadoc>
            <method name="copyPrivateDataInto" type="void" line="460">
                <params>
                    <param name="that" type="AWTEvent"/>
                </params>
                <scope line="462">
                    <declaration name="field" type="Field" line="463"/>
                    <scope line="464">
                        <scope line="465">
                            <declaration name="b" type="boolean" line="466"/>
                        </scope>
                        <scope line="469">
                            <scope line="470"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="dispatched" type="void" line="478">
                <scope line="479">
                    <declaration name="field" type="Field" line="480"/>
                    <scope line="481">
                        <scope line="482"/>
                        <scope line="485">
                            <scope line="486"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>