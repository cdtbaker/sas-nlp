<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.image.BufferStrategy"/>
        <import package="java.awt.peer.CanvasPeer"/>
        <import package="javax.accessibility"/>
        <class name="Canvas" line="5">
            <extends class="Component"/>
            <implements interface="Accessible"/>
            <javadoc line="5">
                A &lt;code&gt;Canvas&lt;/code&gt; component represents a blank rectangular
                  area of the screen onto which the application can draw or from
                  which the application can trap input events from the user.
                  &lt;p&gt;
                  An application must subclass the &lt;code&gt;Canvas&lt;/code&gt; class in
                  order to get useful functionality such as creating a custom
                  component. The &lt;code&gt;paint&lt;/code&gt; method must be overridden
                  in order to perform custom graphics on the canvas.                
                <author>
                    Sami Shaio                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="base" type="String" line="18"/>
            <declaration name="nameCounter" type="int" line="19"/>
            <declaration name="serialVersionUID" type="long" line="20"/>
            <javadoc line="21">
                Constructs a new Canvas.                
            </javadoc>
            <method name="Canvas" type="constructor" line="24"/>
            <javadoc line="26">
                Constructs a new Canvas given a GraphicsConfiguration object.                
                <param>
                    config a reference to a GraphicsConfiguration object.                    
                </param>
                <see>
                    GraphicsConfiguration                    
                </see>
            </javadoc>
            <method name="Canvas" type="constructor" line="31">
                <params>
                    <param name="config" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="setGraphicsConfiguration" type="void" line="35">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="36">
                    <declaration name="peer" type="CanvasPeer" line="37"/>
                    <scope line="38"/>
                </scope>
            </method>
            <javadoc line="44">
                Construct a name for this component.  Called by getName() when the
                  name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="48">
                <scope line="49"/>
            </method>
            <javadoc line="53">
                Creates the peer of the canvas.  This peer allows you to change the
                  user interface of the canvas without changing its functionality.                
                <see>
                    java.awt.Toolkit#createCanvas(java.awt.Canvas)                    
                </see>
                <see>
                    java.awt.Component#getToolkit()                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="59">
                <scope line="60"/>
            </method>
            <javadoc line="65">
                Paints this canvas.
                  &lt;p&gt;
                  Most applications that subclass &lt;code&gt;Canvas&lt;/code&gt; should
                  override this method in order to perform some useful operation
                  (typically, custom painting of the canvas).
                  The default operation is simply to clear the canvas.
                  Applications that override this method need not call
                  super.paint(g).                
                <param>
                    g   the specified Graphics context                    
                </param>
                <see>
                    #update(Graphics)                    
                </see>
                <see>
                    Component#paint(Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="78">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="81">
                Updates this canvas.
                  &lt;p&gt;
                  This method is called in response to a call to &lt;code&gt;repaint&lt;/code&gt;.
                  The canvas is first cleared by filling it with the background
                  color, and then completely redrawn by calling this canvas&apos;s
                  &lt;code&gt;paint&lt;/code&gt; method.
                  Note: applications that override this method should either call
                  super.update(g) or incorporate the functionality described
                  above into their own code.                
                <param>
                    g the specified Graphics context                    
                </param>
                <see>
                    #paint(Graphics)                    
                </see>
                <see>
                    Component#update(Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="95">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="postsOldMouseEvents" type="boolean" line="99"/>
            <javadoc line="102">
                Creates a new strategy for multi-buffering on this component.
                  Multi-buffering is useful for rendering performance.  This method
                  attempts to create the best strategy available with the number of
                  buffers supplied.  It will always create a &lt;code&gt;BufferStrategy&lt;/code&gt;
                  with that number of buffers.
                  A page-flipping strategy is attempted first, then a blitting strategy
                  using accelerated buffers.  Finally, an unaccelerated blitting
                  strategy is used.
                  &lt;p&gt;
                  Each time this method is called,
                  the existing buffer strategy for this component is discarded.                
                <param>
                    numBuffers number of buffers to create, including the front buffer                    
                </param>
                <exception>
                    IllegalArgumentException if numBuffers is less than 1.                    
                </exception>
                <exception>
                    IllegalStateException if the component is not displayable                    
                </exception>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    #getBufferStrategy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createBufferStrategy" type="void" line="121">
                <params>
                    <param name="numBuffers" type="int"/>
                </params>
            </method>
            <javadoc line="124">
                Creates a new strategy for multi-buffering on this component with the
                  required buffer capabilities.  This is useful, for example, if only
                  accelerated memory or page flipping is desired (as specified by the
                  buffer capabilities).
                  &lt;p&gt;
                  Each time this method
                  is called, the existing buffer strategy for this component is discarded.                
                <param>
                    numBuffers number of buffers to create                    
                </param>
                <param>
                    caps the required capabilities for creating the buffer strategy;
                      cannot be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <exception>
                    AWTException if the capabilities supplied could not be
                      supported or met; this may happen, for example, if there is not enough
                      accelerated memory currently available, or if page flipping is specified
                      but not possible.                    
                </exception>
                <exception>
                    IllegalArgumentException if numBuffers is less than 1, or if
                      caps is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    #getBufferStrategy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createBufferStrategy" type="void" line="144">
                <params>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
            </method>
            <javadoc line="147">
                Returns the &lt;code&gt;BufferStrategy&lt;/code&gt; used by this component.  This
                  method will return null if a &lt;code&gt;BufferStrategy&lt;/code&gt; has not yet
                  been created or has been disposed.                
                <return>
                    the buffer strategy used by this component                    
                </return>
                <see>
                    #createBufferStrategy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBufferStrategy" type="BufferStrategy" line="155"/>
            <javadoc line="158">
                Gets the AccessibleContext associated with this Canvas.
                  For canvases, the AccessibleContext takes the form of an
                  AccessibleAWTCanvas.
                  A new AccessibleAWTCanvas instance is created if necessary.                
                <return>
                    an AccessibleAWTCanvas that serves as the
                      AccessibleContext of this Canvas                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="167">
                <scope line="168"/>
            </method>
            <class name="AccessibleAWTCanvas" line="173">
                <extends class="AccessibleAWTComponent"/>
                <javadoc line="173">
                    This class implements accessibility support for the
                      &lt;code&gt;Canvas&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to canvas user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="180"/>
                <javadoc line="181">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="187"/>
            </class>
        </class>
    </source>