<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ImageFilter"/>
        <import package="java.awt.image.FilteredImageSource"/>
        <import package="java.awt.image.AreaAveragingScaleFilter"/>
        <import package="java.awt.image.ReplicateScaleFilter"/>
        <import package="sun.awt.image.SurfaceManager"/>
        <class name="Image" line="9">
            <javadoc line="9">
                The abstract class &lt;code&gt;Image&lt;/code&gt; is the superclass of all
                  classes that represent graphical images. The image must be
                  obtained in a platform-specific manner.                
                <author>
                    Sami Shaio                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="defaultImageCaps" type="ImageCapabilities" line="18"/>
            <javadoc line="18">
                convenience object; we can use this single static object for
                  all images that do not create their own image caps; it holds the
                  default (unaccelerated) properties.                
            </javadoc>
            <declaration name="accelerationPriority" type="float" line="24"/>
            <javadoc line="24">
                Priority for accelerating this image.  Subclasses are free to
                  set different default priorities and applications are free to
                  set the priority for specific images via the
                  &lt;code&gt;setAccelerationPriority(float)&lt;/code&gt; method.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getWidth" type="int" line="32"/>
            <javadoc line="32">
                Determines the width of the image. If the width is not yet known,
                  this method returns &lt;code&gt;-1&lt;/code&gt; and the specified
                  &lt;code&gt;ImageObserver&lt;/code&gt; object is notified later.                
                <param>
                    observer   an object waiting for the image to be loaded.                    
                </param>
                <return>
                    the width of this image, or <code>-1</code>
                      if the width is not yet known.                    
                </return>
                <see>
                    java.awt.Image#getHeight                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
            </javadoc>
            <method name="getHeight" type="int" line="43"/>
            <javadoc line="43">
                Determines the height of the image. If the height is not yet known,
                  this method returns &lt;code&gt;-1&lt;/code&gt; and the specified
                  &lt;code&gt;ImageObserver&lt;/code&gt; object is notified later.                
                <param>
                    observer   an object waiting for the image to be loaded.                    
                </param>
                <return>
                    the height of this image, or <code>-1</code>
                      if the height is not yet known.                    
                </return>
                <see>
                    java.awt.Image#getWidth                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
            </javadoc>
            <method name="getSource" type="ImageProducer" line="54"/>
            <javadoc line="54">
                Gets the object that produces the pixels for the image.
                  This method is called by the image filtering classes and by
                  methods that perform image conversion and scaling.                
                <return>
                    the image producer that produces the pixels
                      for this image.                    
                </return>
                <see>
                    java.awt.image.ImageProducer                    
                </see>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="63"/>
            <javadoc line="63">
                Creates a graphics context for drawing to an off-screen image.
                  This method can only be called for off-screen images.                
                <return>
                    a graphics context to draw to the off-screen image.                    
                </return>
                <exception>
                    UnsupportedOperationException if called for a
                      non-off-screen image.                    
                </exception>
                <see>
                    java.awt.Graphics                    
                </see>
                <see>
                    java.awt.Component#createImage(int,int)                    
                </see>
            </javadoc>
            <method name="getProperty" type="Object" line="73"/>
            <javadoc line="73">
                Gets a property of this image by name.
                  &lt;p&gt;
                  Individual property names are defined by the various image
                  formats. If a property is not defined for a particular image, this
                  method returns the &lt;code&gt;UndefinedProperty&lt;/code&gt; object.
                  &lt;p&gt;
                  If the properties for this image are not yet known, this method
                  returns &lt;code&gt;null&lt;/code&gt;, and the &lt;code&gt;ImageObserver&lt;/code&gt;
                  object is notified later.
                  &lt;p&gt;
                  The property name &lt;code&gt;&quot;comment&quot;&lt;/code&gt; should be used to store
                  an optional comment which can be presented to the application as a
                  description of the image, its source, or its author.                
                <param>
                    name   a property name.                    
                </param>
                <param>
                    observer   an object waiting for this image to be loaded.                    
                </param>
                <return>
                    the value of the named property.                    
                </return>
                <throws>
                    <code>NullPointerException</code> if the property name is null.                    
                </throws>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.Image#UndefinedProperty                    
                </see>
            </javadoc>
            <declaration name="UndefinedProperty" type="Object" line="95"/>
            <javadoc line="95">
                The &lt;code&gt;UndefinedProperty&lt;/code&gt; object should be returned whenever a
                  property which was not defined for a particular image is fetched.                
            </javadoc>
            <javadoc line="100">
                Creates a scaled version of this image.
                  A new &lt;code&gt;Image&lt;/code&gt; object is returned which will render
                  the image at the specified &lt;code&gt;width&lt;/code&gt; and
                  &lt;code&gt;height&lt;/code&gt; by default.  The new &lt;code&gt;Image&lt;/code&gt; object
                  may be loaded asynchronously even if the original source image
                  has already been loaded completely.
                  &lt;p&gt;
                  If either &lt;code&gt;width&lt;/code&gt;
                  or &lt;code&gt;height&lt;/code&gt; is a negative number then a value is
                  substituted to maintain the aspect ratio of the original image
                  dimensions. If both &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;
                  are negative, then the original image dimensions are used.                
                <param>
                    width the width to which to scale the image.                    
                </param>
                <param>
                    height the height to which to scale the image.                    
                </param>
                <param>
                    hints flags to indicate the type of algorithm to use
                      for image resampling.                    
                </param>
                <return>
                    a scaled version of the image.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>width</code>
                      or <code>height</code> is zero.                    
                </exception>
                <see>
                    java.awt.Image#SCALE_DEFAULT                    
                </see>
                <see>
                    java.awt.Image#SCALE_FAST                    
                </see>
                <see>
                    java.awt.Image#SCALE_SMOOTH                    
                </see>
                <see>
                    java.awt.Image#SCALE_REPLICATE                    
                </see>
                <see>
                    java.awt.Image#SCALE_AREA_AVERAGING                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getScaledInstance" type="Image" line="127">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="hints" type="int"/>
                </params>
                <declaration name="filter" type="ImageFilter" line="128"/>
                <scope line="129"/>
                <scope line="132"/>
                <declaration name="prod" type="ImageProducer" line="135"/>
            </method>
            <declaration name="SCALE_DEFAULT" type="int" line="139"/>
            <javadoc line="139">
                Use the default image-scaling algorithm.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="SCALE_FAST" type="int" line="144"/>
            <javadoc line="144">
                Choose an image-scaling algorithm that gives higher priority
                  to scaling speed than smoothness of the scaled image.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="SCALE_SMOOTH" type="int" line="150"/>
            <javadoc line="150">
                Choose an image-scaling algorithm that gives higher priority
                  to image smoothness than scaling speed.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="SCALE_REPLICATE" type="int" line="156"/>
            <javadoc line="156">
                Use the image scaling algorithm embodied in the
                  &lt;code&gt;ReplicateScaleFilter&lt;/code&gt; class.
                  The &lt;code&gt;Image&lt;/code&gt; object is free to substitute a different filter
                  that performs the same algorithm yet integrates more efficiently
                  into the imaging infrastructure supplied by the toolkit.                
                <see>
                    java.awt.image.ReplicateScaleFilter                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="SCALE_AREA_AVERAGING" type="int" line="166"/>
            <javadoc line="166">
                Use the Area Averaging image scaling algorithm.  The
                  image object is free to substitute a different filter that
                  performs the same algorithm yet integrates more efficiently
                  into the image infrastructure supplied by the toolkit.                
                <see>
                    java.awt.image.AreaAveragingScaleFilter                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="175">
                Flushes all reconstructable resources being used by this Image object.
                  This includes any pixel data that is being cached for rendering to
                  the screen as well as any system resources that are being used
                  to store data or pixels for the image if they can be recreated.
                  The image is reset to a state similar to when it was first created
                  so that if it is again rendered, the image data will have to be
                  recreated or fetched again from its source.
                  &lt;p&gt;
                  Examples of how this method affects specific types of Image object:
                  &lt;ul&gt;
                  &lt;li&gt;
                  BufferedImage objects leave the primary Raster which stores their
                  pixels untouched, but flush any information cached about those
                  pixels such as copies uploaded to the display hardware for
                  accelerated blits.
                  &lt;li&gt;
                  Image objects created by the Component methods which take a
                  width and height leave their primary buffer of pixels untouched,
                  but have all cached information released much like is done for
                  BufferedImage objects.
                  &lt;li&gt;
                  VolatileImage objects release all of their pixel resources
                  including their primary copy which is typically stored on
                  the display hardware where resources are scarce.
                  These objects can later be restored using their{@link java.awt.image.VolatileImage#validate validate}method.
                  &lt;li&gt;
                  Image objects created by the Toolkit and Component classes which are
                  loaded from files, URLs or produced by an {@link ImageProducer}are unloaded and all local resources are released.
                  These objects can later be reloaded from their original source
                  as needed when they are rendered, just as when they were first
                  created.
                  &lt;/ul&gt;                
            </javadoc>
            <method name="flush" type="void" line="209">
                <scope line="210"/>
            </method>
            <javadoc line="214">
                Returns an ImageCapabilities object which can be
                  inquired as to the capabilities of this
                  Image on the specified GraphicsConfiguration.
                  This allows programmers to find
                  out more runtime information on the specific Image
                  object that they have created.  For example, the user
                  might create a BufferedImage but the system may have
                  no video memory left for creating an image of that
                  size on the given GraphicsConfiguration, so although the object
                  may be acceleratable in general, it
                  does not have that capability on this GraphicsConfiguration.                
                <param>
                    gc a <code>GraphicsConfiguration</code> object.  A value of null
                      for this parameter will result in getting the image capabilities
                      for the default <code>GraphicsConfiguration</code>.                    
                </param>
                <return>
                    an <code>ImageCapabilities</code> object that contains
                      the capabilities of this <code>Image</code> on the specified
                      GraphicsConfiguration.                    
                </return>
                <see>
                    java.awt.image.VolatileImage#getCapabilities()VolatileImage.getCapabilities()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getCapabilities" type="ImageCapabilities" line="235">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="236"/>
            </method>
            <javadoc line="241">
                Sets a hint for this image about how important acceleration is.
                  This priority hint is used to compare to the priorities of other
                  Image objects when determining how to use scarce acceleration
                  resources such as video memory.  When and if it is possible to
                  accelerate this Image, if there are not enough resources available
                  to provide that acceleration but enough can be freed up by
                  de-accelerating some other image of lower priority, then that other
                  Image may be de-accelerated in deference to this one.  Images
                  that have the same priority take up resources on a first-come,
                  first-served basis.                
                <param>
                    priority a value between 0 and 1, inclusive, where higher
                      values indicate more importance for acceleration.  A value of 0
                      means that this Image should never be accelerated.  Other values
                      are used simply to determine acceleration priority relative to other
                      Images.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>priority</code> is less
                      than zero or greater than 1.                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setAccelerationPriority" type="void" line="261">
                <params>
                    <param name="priority" type="float"/>
                </params>
                <scope line="262"/>
                <scope line="266"/>
            </method>
            <javadoc line="270">
                Returns the current value of the acceleration priority hint.                
                <see>
                    #setAccelerationPriority(float priority) setAccelerationPriority                    
                </see>
                <return>
                    value between 0 and 1, inclusive, which represents the current
                      priority value                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAccelerationPriority" type="float" line="277"/>
            <declaration name="surfaceManager" type="SurfaceManager" line="280"/>
            <scope line="281">
                <anonymous_class line="282">
                    <method name="getSurfaceManager" type="SurfaceManager" line="283">
                        <params>
                            <param name="img" type="Image"/>
                        </params>
                    </method>
                    <method name="setSurfaceManager" type="void" line="286">
                        <params>
                            <param name="img" type="Image"/>
                            <param name="mgr" type="SurfaceManager"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
        </class>
    </source>