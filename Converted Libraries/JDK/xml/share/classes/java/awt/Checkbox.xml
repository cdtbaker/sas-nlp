<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.CheckboxPeer"/>
        <import package="java.awt.event"/>
        <import package="java.util.EventListener"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <class name="Checkbox" line="9">
            <extends class="Component"/>
            <implements interface="ItemSelectable"/>
            <implements interface="Accessible"/>
            <javadoc line="9">
                A check box is a graphical component that can be in either an
                  &quot;on&quot; (&lt;code&gt;true&lt;/code&gt;) or &quot;off&quot; (&lt;code&gt;false&lt;/code&gt;) state.
                  Clicking on a check box changes its state from
                  &quot;on&quot; to &quot;off,&quot; or from &quot;off&quot; to &quot;on.&quot;
                  &lt;p&gt;
                  The following code example creates a set of check boxes in
                  a grid layout:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  setLayout(new GridLayout(3, 1));
                  add(new Checkbox(&quot;one&quot;, null, true));
                  add(new Checkbox(&quot;two&quot;));
                  add(new Checkbox(&quot;three&quot;));
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  This image depicts the check boxes and grid layout
                  created by this code example:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/Checkbox-1.gif&quot; alt=&quot;The following context describes the graphic.&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  The button labeled &lt;code&gt;one&lt;/code&gt; is in the &quot;on&quot; state, and the
                  other two are in the &quot;off&quot; state. In this example, which uses the
                  &lt;code&gt;GridLayout&lt;/code&gt; class, the states of the three check
                  boxes are set independently.
                  &lt;p&gt;
                  Alternatively, several check boxes can be grouped together under
                  the control of a single object, using the
                  &lt;code&gt;CheckboxGroup&lt;/code&gt; class.
                  In a check box group, at most one button can be in the &quot;on&quot;
                  state at any given time. Clicking on a check box to turn it on
                  forces any other check box in the same group that is on
                  into the &quot;off&quot; state.                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    java.awt.GridLayout                    
                </see>
                <see>
                    java.awt.CheckboxGroup                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <scope line="49">
                <scope line="51"/>
            </scope>
            <declaration name="label" type="String" line="55"/>
            <javadoc line="55">
                The label of the Checkbox.
                  This field can be null.                
                <serial>
                                        
                </serial>
                <see>
                    #getLabel()                    
                </see>
                <see>
                    #setLabel(String)                    
                </see>
            </javadoc>
            <declaration name="state" type="boolean" line="63"/>
            <javadoc line="63">
                The state of the &lt;code&gt;Checkbox&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getState()                    
                </see>
                <see>
                    #setState(boolean)                    
                </see>
            </javadoc>
            <declaration name="group" type="CheckboxGroup" line="70"/>
            <javadoc line="70">
                The check box group.
                  This field can be null indicating that the checkbox
                  is not a group checkbox.                
                <serial>
                                        
                </serial>
                <see>
                    #getCheckboxGroup()                    
                </see>
                <see>
                    #setCheckboxGroup(CheckboxGroup)                    
                </see>
            </javadoc>
            <declaration name="itemListener" type="ItemListener" line="79"/>
            <declaration name="base" type="String" line="80"/>
            <declaration name="nameCounter" type="int" line="81"/>
            <declaration name="serialVersionUID" type="long" line="82"/>
            <javadoc line="83">
                Helper function for setState and CheckboxGroup.setSelectedCheckbox
                  Should remain package-private.                
            </javadoc>
            <method name="setStateInternal" type="void" line="87">
                <params>
                    <param name="state" type="boolean"/>
                </params>
                <declaration name="peer" type="CheckboxPeer" line="89"/>
                <scope line="90"/>
            </method>
            <javadoc line="94">
                Creates a check box with an empty string for its label.
                  The state of this check box is set to &quot;off,&quot; and it is not
                  part of any check box group.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Checkbox" type="constructor" line="102"/>
            <javadoc line="105">
                Creates a check box with the specified label.  The state
                  of this check box is set to &quot;off,&quot; and it is not part of
                  any check box group.                
                <param>
                    label   a string label for this check box,
                      or &lt;code&gt;null&lt;/code&gt; for no label.                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt;
                      returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Checkbox" type="constructor" line="116">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <javadoc line="119">
                Creates a check box with the specified label
                  and sets the specified state.
                  This check box is not part of any check box group.                
                <param>
                    label   a string label for this check box,
                      or &lt;code&gt;null&lt;/code&gt; for no label                    
                </param>
                <param>
                    state    the initial state of this check box                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt;
                      returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Checkbox" type="constructor" line="131">
                <params>
                    <param name="label" type="String"/>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <javadoc line="134">
                Constructs a Checkbox with the specified label, set to the
                  specified state, and in the specified check box group.                
                <param>
                    label   a string label for this check box,
                      or &lt;code&gt;null&lt;/code&gt; for no label.                    
                </param>
                <param>
                    state   the initial state of this check box.                    
                </param>
                <param>
                    group   a check box group for this check box,
                      or &lt;code&gt;null&lt;/code&gt; for no group.                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt;
                      returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="Checkbox" type="constructor" line="148">
                <params>
                    <param name="label" type="String"/>
                    <param name="state" type="boolean"/>
                    <param name="group" type="CheckboxGroup"/>
                </params>
                <scope line="153"/>
            </method>
            <javadoc line="157">
                Creates a check box with the specified label, in the specified
                  check box group, and set to the specified state.                
                <param>
                    label   a string label for this check box,
                      or &lt;code&gt;null&lt;/code&gt; for no label.                    
                </param>
                <param>
                    group   a check box group for this check box,
                      or &lt;code&gt;null&lt;/code&gt; for no group.                    
                </param>
                <param>
                    state   the initial state of this check box.                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt;
                      returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="Checkbox" type="constructor" line="171">
                <params>
                    <param name="label" type="String"/>
                    <param name="group" type="CheckboxGroup"/>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <javadoc line="174">
                Constructs a name for this component.  Called by
                  &lt;code&gt;getName&lt;/code&gt; when the name is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a name for this component                    
                </return>
            </javadoc>
            <method name="constructComponentName" type="String" line="179">
                <scope line="180"/>
            </method>
            <javadoc line="184">
                Creates the peer of the Checkbox. The peer allows you to change the
                  look of the Checkbox without changing its functionality.                
                <see>
                    java.awt.Toolkit#createCheckbox(java.awt.Checkbox)                    
                </see>
                <see>
                    java.awt.Component#getToolkit()                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="190">
                <scope line="191"/>
            </method>
            <javadoc line="196">
                Gets the label of this check box.                
                <return>
                    the label of this check box, or &lt;code&gt;null&lt;/code&gt;
                      if this check box has no label.                    
                </return>
                <see>
                    #setLabel(String)                    
                </see>
            </javadoc>
            <method name="getLabel" type="String" line="202"/>
            <javadoc line="205">
                Sets this check box&apos;s label to be the string argument.                
                <param>
                    label   a string to set as the new label, or
                      &lt;code&gt;null&lt;/code&gt; for no label.                    
                </param>
                <see>
                    #getLabel                    
                </see>
            </javadoc>
            <method name="setLabel" type="void" line="211">
                <params>
                    <param name="label" type="String"/>
                </params>
                <declaration name="testvalid" type="boolean" line="212"/>
                <scope line="213">
                    <scope line="214">
                        <declaration name="peer" type="CheckboxPeer" line="216"/>
                        <scope line="217"/>
                    </scope>
                </scope>
                <scope line="223"/>
            </method>
            <javadoc line="227">
                Determines whether this check box is in the &quot;on&quot; or &quot;off&quot; state.
                  The boolean value &lt;code&gt;true&lt;/code&gt; indicates the &quot;on&quot; state,
                  and &lt;code&gt;false&lt;/code&gt; indicates the &quot;off&quot; state.                
                <return>
                    the state of this check box, as a boolean value                    
                </return>
                <see>
                    #setState                    
                </see>
            </javadoc>
            <method name="getState" type="boolean" line="234"/>
            <javadoc line="237">
                Sets the state of this check box to the specified state.
                  The boolean value &lt;code&gt;true&lt;/code&gt; indicates the &quot;on&quot; state,
                  and &lt;code&gt;false&lt;/code&gt; indicates the &quot;off&quot; state.
                  &lt;p&gt;Note that this method should be primarily used to
                  initialize the state of the checkbox.  Programmatically
                  setting the state of the checkbox will &lt;i&gt;not&lt;/i&gt; trigger
                  an &lt;code&gt;ItemEvent&lt;/code&gt;.  The only way to trigger an
                  &lt;code&gt;ItemEvent&lt;/code&gt; is by user interaction.                
                <param>
                    state   the boolean state of the check box                    
                </param>
                <see>
                    #getState                    
                </see>
            </javadoc>
            <method name="setState" type="void" line="249">
                <params>
                    <param name="state" type="boolean"/>
                </params>
                <declaration name="group" type="CheckboxGroup" line="250"/>
                <scope line="251">
                    <scope line="252"/>
                    <scope line="255"/>
                </scope>
            </method>
            <javadoc line="261">
                Returns an array (length 1) containing the checkbox
                  label or null if the checkbox is not selected.                
                <see>
                    ItemSelectable                    
                </see>
            </javadoc>
            <method name="getSelectedObjects" type="Object[]" line="266">
                <scope line="267">
                    <declaration name="items" type="Object[]" line="268"/>
                </scope>
            </method>
            <javadoc line="274">
                Determines this check box&apos;s group.                
                <return>
                    this check box&apos;s group, or &lt;code&gt;null&lt;/code&gt;
                      if the check box is not part of a check box group.                    
                </return>
                <see>
                    #setCheckboxGroup(CheckboxGroup)                    
                </see>
            </javadoc>
            <method name="getCheckboxGroup" type="CheckboxGroup" line="280"/>
            <javadoc line="283">
                Sets this check box&apos;s group to the specified check box group.
                  If this check box is already in a different check box group,
                  it is first taken out of that group.
                  &lt;p&gt;
                  If the state of this check box is &lt;code&gt;true&lt;/code&gt; and the new
                  group already has a check box selected, this check box&apos;s state
                  is changed to &lt;code&gt;false&lt;/code&gt;.  If the state of this check
                  box is &lt;code&gt;true&lt;/code&gt; and the new group has no check box
                  selected, this check box becomes the selected checkbox for
                  the new group and its state is &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    g   the new check box group, or &lt;code&gt;null&lt;/code&gt;
                      to remove this check box from any check box group                    
                </param>
                <see>
                    #getCheckboxGroup                    
                </see>
            </javadoc>
            <method name="setCheckboxGroup" type="void" line="298">
                <params>
                    <param name="g" type="CheckboxGroup"/>
                </params>
                <declaration name="oldGroup" type="CheckboxGroup" line="299"/>
                <declaration name="oldState" type="boolean" line="300"/>
                <scope line="301"/>
                <scope line="304">
                    <declaration name="peer" type="CheckboxPeer" line="308"/>
                    <scope line="309"/>
                    <scope line="312">
                        <scope line="313"/>
                        <scope line="316"/>
                    </scope>
                </scope>
                <scope line="321"/>
            </method>
            <javadoc line="325">
                Adds the specified item listener to receive item events from
                  this check box.  Item events are sent to listeners in response
                  to user input, but not in response to calls to setState().
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l    the item listener                    
                </param>
                <see>
                    #removeItemListener                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <see>
                    #setState                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addItemListener" type="void" line="340">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
                <scope line="341"/>
            </method>
            <javadoc line="347">
                Removes the specified item listener so that the item listener
                  no longer receives item events from this check box.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l    the item listener                    
                </param>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeItemListener" type="void" line="360">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
                <scope line="361"/>
            </method>
            <javadoc line="366">
                Returns an array of all the item listeners
                  registered on this checkbox.                
                <return>
                    all of this checkbox&apos;s &lt;code&gt;ItemListener&lt;/code&gt;s
                      or an empty array if no item
                      listeners are currently registered                    
                </return>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #removeItemListener                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getItemListeners" type="ItemListener[]" line="378"/>
            <javadoc line="381">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;Checkbox&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;Checkbox&lt;/code&gt; &lt;code&gt;c&lt;/code&gt;
                  for its item listeners with the following code:
                  &lt;pre&gt;ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this checkbox,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getItemListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="409">
                <params>
                    <param name="listenerType" type="Class&lt;T&gt;"/>
                </params>
                <declaration name="l" type="EventListener" line="410"/>
                <scope line="411"/>
                <scope line="414"/>
            </method>
            <method name="eventEnabled" type="boolean" line="419">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="420">
                    <scope line="421"/>
                </scope>
            </method>
            <javadoc line="428">
                Processes events on this check box.
                  If the event is an instance of &lt;code&gt;ItemEvent&lt;/code&gt;,
                  this method invokes the &lt;code&gt;processItemEvent&lt;/code&gt; method.
                  Otherwise, it calls its superclass&apos;s &lt;code&gt;processEvent&lt;/code&gt; method.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    #processItemEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="441">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="442"/>
            </method>
            <javadoc line="448">
                Processes item events occurring on this check box by
                  dispatching them to any registered
                  &lt;code&gt;ItemListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless item events are
                  enabled for this component. Item events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;ItemListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addItemListener&lt;/code&gt;.
                  &lt;li&gt;Item events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the item event                    
                </param>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processItemEvent" type="void" line="471">
                <params>
                    <param name="e" type="ItemEvent"/>
                </params>
                <declaration name="listener" type="ItemListener" line="472"/>
                <scope line="473"/>
            </method>
            <javadoc line="477">
                Returns a string representing the state of this &lt;code&gt;Checkbox&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this check box                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="485">
                <declaration name="str" type="String" line="486"/>
                <declaration name="label" type="String" line="487"/>
                <scope line="488"/>
            </method>
            <declaration name="checkboxSerializedDataVersion" type="int" line="493"/>
            <javadoc line="494">
                Writes default serializable fields to stream.  Writes
                  a list of serializable &lt;code&gt;ItemListeners&lt;/code&gt;
                  as optional data.  The non-serializable
                  &lt;code&gt;ItemListeners&lt;/code&gt; are detected and
                  no attempt is made to serialize them.                
                <param>
                    s the &lt;code&gt;ObjectOutputStream&lt;/code&gt; to write                    
                </param>
                <serialData>
                    &lt;code&gt;null&lt;/code&gt; terminated sequence of 0
                      or more pairs; the pair consists of a &lt;code&gt;String&lt;/code&gt;
                      and an &lt;code&gt;Object&lt;/code&gt;; the &lt;code&gt;String&lt;/code&gt; indicates
                      the type of object and is one of the following:
                      &lt;code&gt;itemListenerK&lt;/code&gt; indicating an
                      &lt;code&gt;ItemListener&lt;/code&gt; object                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    java.awt.Component#itemListenerK                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="511">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="516">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and if it
                  isn&apos;t &lt;code&gt;null&lt;/code&gt; adds a listener to receive
                  item events fired by the &lt;code&gt;Checkbox&lt;/code&gt;.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the &lt;code&gt;ObjectInputStream&lt;/code&gt; to read                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <serial>
                                        
                </serial>
                <see>
                    #removeItemListener(ItemListener)                    
                </see>
                <see>
                    #addItemListener(ItemListener)                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="531">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="keyOrNull" type="Object" line="534"/>
                <scope line="535">
                    <declaration name="key" type="String" line="536"/>
                </scope>
            </method>
            <method name="initIDs" type="void" line="541"/>
            <javadoc line="541">
                Initialize JNI field and method ids                
            </javadoc>
            <javadoc line="545">
                Gets the AccessibleContext associated with this Checkbox.
                  For checkboxes, the AccessibleContext takes the form of an
                  AccessibleAWTCheckbox.
                  A new AccessibleAWTCheckbox is created if necessary.                
                <return>
                    an AccessibleAWTCheckbox that serves as the
                      AccessibleContext of this Checkbox                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="554">
                <scope line="555"/>
            </method>
            <class name="AccessibleAWTCheckbox" line="560">
                <extends class="AccessibleAWTComponent"/>
                <implements interface="ItemListener"/>
                <implements interface="AccessibleAction"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="560">
                    This class implements accessibility support for the
                      &lt;code&gt;Checkbox&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to checkbox user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="567"/>
                <method name="AccessibleAWTCheckbox" type="constructor" line="568"/>
                <javadoc line="572">
                    Fire accessible property change events when the state of the
                      toggle button changes.                    
                </javadoc>
                <method name="itemStateChanged" type="void" line="576">
                    <params>
                        <param name="e" type="ItemEvent"/>
                    </params>
                    <declaration name="cb" type="Checkbox" line="577"/>
                    <scope line="578">
                        <scope line="579"/>
                        <scope line="582"/>
                    </scope>
                </method>
                <javadoc line="587">
                    Get the AccessibleAction associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleAction interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleAction" type="AccessibleAction" line="594"/>
                <javadoc line="597">
                    Get the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleValue interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="604"/>
                <javadoc line="607">
                    Returns the number of Actions available in this object.
                      If there is more than one, the first one is the &quot;default&quot;
                      action.                    
                    <return>
                        the number of Actions in this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="613"/>
                <javadoc line="616">
                    Return a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="620">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="623">
                    Perform the specified Action on the object                    
                    <param>
                        i zero-based index of actions                        
                    </param>
                    <return>
                        true if the the action was performed; else false.                        
                    </return>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="628">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="631">
                    Get the value of this object as a Number.  If the value has not been
                      set, the return value will be null.                    
                    <return>
                        value of the object                        
                    </return>
                    <see>
                        #setCurrentAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="637"/>
                <javadoc line="640">
                    Set the value of this object as a Number.                    
                    <return>
                        True if the value was set; else False                        
                    </return>
                    <see>
                        #getCurrentAccessibleValue                        
                    </see>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="645">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                </method>
                <javadoc line="648">
                    Get the minimum value of this object as a Number.                    
                    <return>
                        Minimum value of the object; null if this object does not
                          have a minimum value                        
                    </return>
                    <see>
                        #getMaximumAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="654"/>
                <javadoc line="657">
                    Get the maximum value of this object as a Number.                    
                    <return>
                        Maximum value of the object; null if this object does not
                          have a maximum value                        
                    </return>
                    <see>
                        #getMinimumAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="663"/>
                <javadoc line="666">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of
                          the object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="672"/>
                <javadoc line="675">
                    Get the state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="681">
                    <declaration name="states" type="AccessibleStateSet" line="682"/>
                    <scope line="683"/>
                </method>
            </class>
        </class>
    </source>