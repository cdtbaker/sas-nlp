<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.CheckboxMenuItemPeer"/>
        <import package="java.awt.event"/>
        <import package="java.util.EventListener"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <class name="CheckboxMenuItem" line="36">
            <extends class="MenuItem"/>
            <comment line="87">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="319">
                REMIND: remove when filtering is done at lower level                
            </comment>
            <comment line="386">
                Post an ItemEvent and toggle state.                
            </comment>
            <comment line="412">
                Serialization support.                
            </comment>
            <comment line="415">
                Serial Data Version
                 @serial                
            </comment>
            <comment line="449">
                Reads the &lt;code&gt;ObjectInputStream&lt;code&gt; and if it
                 isn&apos;t &lt;code&gt;null&lt;code&gt; adds a listener to receive
                 item events fired by the &lt;code&gt;Checkbox&lt;code&gt; menu item.
                 Unrecognized keys or values will be ignored.
                
                 @param s the &lt;code&gt;ObjectInputStream&lt;code&gt; to read
                 @serial
                 @see removeActionListener()
                 @see addActionListener()
                 @see #writeObject                
            </comment>
            <comment line="484">
                ///////////////                
            </comment>
            <comment line="485">
                Accessibility support                
            </comment>
            <comment line="486">
                //////////////                
            </comment>
            <comment line="632">
                class AccessibleAWTMenuItem                
            </comment>
            <implements interface="ItemSelectable"/>
            <implements interface="Accessible"/>
            <javadoc line="36">
                This class represents a check box that can be included in a menu.
                  Selecting the check box in the menu changes its state from
                  &quot;on&quot; to &quot;off&quot; or from &quot;off&quot; to &quot;on.&quot;
                  &lt;p&gt;
                  The following picture depicts a menu which contains an instance
                  of &lt;code&gt;CheckBoxMenuItem&lt;/code&gt;:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/MenuBar-1.gif&quot;
                  alt=&quot;Menu labeled Examples, containing items Basic, Simple, Check, and More Examples. The Check item is a CheckBoxMenuItem instance, in the off state.&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  The item labeled &lt;code&gt;Check&lt;/code&gt; shows a check box menu item
                  in its &quot;off&quot; state.
                  &lt;p&gt;
                  When a check box menu item is selected, AWT sends an item event to
                  the item. Since the event is an instance of &lt;code&gt;ItemEvent&lt;/code&gt;,
                  the &lt;code&gt;processEvent&lt;/code&gt; method examines the event and passes
                  it along to &lt;code&gt;processItemEvent&lt;/code&gt;. The latter method redirects
                  the event to any &lt;code&gt;ItemListener&lt;/code&gt; objects that have
                  registered an interest in item events generated by this menu item.                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <scope line="65">
                <scope line="68"/>
            </scope>
            <declaration name="state" type="boolean" line="73"/>
            <javadoc line="73">
                The state of a checkbox menu item                
                <serial>
                                        
                </serial>
                <see>
                    #getState()                    
                </see>
                <see>
                    #setState(boolean)                    
                </see>
            </javadoc>
            <declaration name="itemListener" type="ItemListener" line="81"/>
            <declaration name="base" type="String" line="83"/>
            <declaration name="nameCounter" type="int" line="84"/>
            <declaration name="serialVersionUID" type="long" line="89"/>
            <javadoc line="91">
                Create a check box menu item with an empty label.
                  The item&apos;s state is initially set to &quot;off.&quot;                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="CheckboxMenuItem" type="constructor" line="99"/>
            <javadoc line="103">
                Create a check box menu item with the specified label.
                  The item&apos;s state is initially set to &quot;off.&quot;                
                <param>
                    label   a string label for the check box menu item,
                      or <code>null</code> for an unlabeled menu item.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="CheckboxMenuItem" type="constructor" line="113">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <javadoc line="117">
                Create a check box menu item with the specified label and state.                
                <param>
                    label   a string label for the check box menu item,
                      or <code>null</code> for an unlabeled menu item.                    
                </param>
                <param>
                    state   the initial state of the menu item, where
                      <code>true</code> indicates "on" and
                      <code>false</code> indicates "off."                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="CheckboxMenuItem" type="constructor" line="130">
                <params>
                    <param name="label" type="String"/>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <javadoc line="135">
                Construct a name for this MenuComponent.  Called by getName() when
                  the name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="139">
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Creates the peer of the checkbox item.  This peer allows us to
                  change the look of the checkbox item without changing its
                  functionality.
                  Most applications do not call this method directly.                
                <see>
                    java.awt.Toolkit#createCheckboxMenuItem(java.awt.CheckboxMenuItem)                    
                </see>
                <see>
                    java.awt.Component#getToolkit()                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="153">
                <scope line="154"/>
            </method>
            <javadoc line="161">
                Determines whether the state of this check box menu item
                  is &quot;on&quot; or &quot;off.&quot;                
                <return>
                    the state of this check box menu item, where
                      <code>true</code> indicates "on" and
                      <code>false</code> indicates "off"                    
                </return>
                <see>
                    #setState                    
                </see>
            </javadoc>
            <method name="getState" type="boolean" line="170"/>
            <javadoc line="174">
                Sets this check box menu item to the specifed state.
                  The boolean value &lt;code&gt;true&lt;/code&gt; indicates &quot;on&quot; while
                  &lt;code&gt;false&lt;/code&gt; indicates &quot;off.&quot;
                  &lt;p&gt;Note that this method should be primarily used to
                  initialize the state of the check box menu item.
                  Programmatically setting the state of the check box
                  menu item will &lt;i&gt;not&lt;/i&gt; trigger
                  an &lt;code&gt;ItemEvent&lt;/code&gt;.  The only way to trigger an
                  &lt;code&gt;ItemEvent&lt;/code&gt; is by user interaction.                
                <param>
                    b   <code>true</code> if the check box
                      menu item is on, otherwise <code>false</code>                    
                </param>
                <see>
                    #getState                    
                </see>
            </javadoc>
            <method name="setState" type="void" line="190">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="peer" type="CheckboxMenuItemPeer" line="192"/>
                <scope line="193"/>
            </method>
            <javadoc line="198">
                Returns the an array (length 1) containing the checkbox menu item
                  label or null if the checkbox is not selected.                
                <see>
                    ItemSelectable                    
                </see>
            </javadoc>
            <method name="getSelectedObjects" type="Object[]" line="203">
                <scope line="204">
                    <declaration name="items" type="Object[]" line="205"/>
                </scope>
            </method>
            <javadoc line="212">
                Adds the specified item listener to receive item events from
                  this check box menu item.  Item events are sent in response to user
                  actions, but not in response to calls to setState().
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the item listener                    
                </param>
                <see>
                    #removeItemListener                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <see>
                    #setState                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addItemListener" type="void" line="228">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
                <scope line="229"/>
            </method>
            <javadoc line="236">
                Removes the specified item listener so that it no longer receives
                  item events from this check box menu item.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the item listener                    
                </param>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeItemListener" type="void" line="250">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
                <scope line="251"/>
            </method>
            <javadoc line="257">
                Returns an array of all the item listeners
                  registered on this checkbox menuitem.                
                <return>
                    all of this checkbox menuitem's <code>ItemListener</code>s
                      or an empty array if no item
                      listeners are currently registered                    
                </return>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #removeItemListener                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getItemListeners" type="ItemListener[]" line="271"/>
            <javadoc line="275">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;CheckboxMenuItem&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;CheckboxMenuItem&lt;/code&gt; &lt;code&gt;c&lt;/code&gt;
                  for its item listeners with the following code:
                  &lt;pre&gt;ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this checkbox menuitem,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getItemListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="308">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
                <declaration name="l" type="EventListener" line="309"/>
                <scope line="310"/>
                <scope line="312"/>
            </method>
            <method name="eventEnabled" type="boolean" line="319">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="320">
                    <scope line="322"/>
                </scope>
            </method>
            <javadoc line="330">
                Processes events on this check box menu item.
                  If the event is an instance of &lt;code&gt;ItemEvent&lt;/code&gt;,
                  this method invokes the &lt;code&gt;processItemEvent&lt;/code&gt; method.
                  If the event is not an item event,
                  it invokes &lt;code&gt;processEvent&lt;/code&gt; on the superclass.
                  &lt;p&gt;
                  Check box menu items currently support only item events.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    #processItemEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="347">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="348"/>
            </method>
            <javadoc line="355">
                Processes item events occurring on this check box menu item by
                  dispatching them to any registered &lt;code&gt;ItemListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless item events are
                  enabled for this menu item. Item events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;ItemListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addItemListener&lt;/code&gt;.
                  &lt;li&gt;Item events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the item event                    
                </param>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    java.awt.MenuItem#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processItemEvent" type="void" line="378">
                <params>
                    <param name="e" type="ItemEvent"/>
                </params>
                <declaration name="listener" type="ItemListener" line="379"/>
                <scope line="380"/>
            </method>
            <method name="doMenuEvent" type="void" line="388">
                <params>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="397">
                Returns a string representing the state of this
                  &lt;code&gt;CheckBoxMenuItem&lt;/code&gt;. This
                  method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this check box menu item                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="407"/>
            <declaration name="checkboxMenuItemSerializedDataVersion" type="int" line="418"/>
            <javadoc line="420">
                Writes default serializable fields to stream.  Writes
                  a list of serializable &lt;code&gt;ItemListeners&lt;/code&gt;
                  as optional data.  The non-serializable
                  &lt;code&gt;ItemListeners&lt;/code&gt; are detected and
                  no attempt is made to serialize them.                
                <param>
                    s the <code>ObjectOutputStream</code> to write                    
                </param>
                <serialData>
                    <code>null</code> terminated sequence of
                      0 or more pairs; the pair consists of a <code>String</code>
                      and an <code>Object</code>; the <code>String</code> indicates
                      the type of object and is one of the following:
                      <code>itemListenerK</code> indicating an
                      <code>ItemListener</code> object                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    java.awt.Component#itemListenerK                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="441">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="462">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="472">
                    skip value for unrecognized key                    
                </comment>
                <declaration name="keyOrNull" type="Object" line="465"/>
                <scope line="466">
                    <declaration name="key" type="String" line="467"/>
                </scope>
            </method>
            <method name="initIDs" type="void" line="477"/>
            <javadoc line="477">
                Initialize JNI field and method IDs                
            </javadoc>
            <javadoc line="487">
                Gets the AccessibleContext associated with this CheckboxMenuItem.
                  For checkbox menu items, the AccessibleContext takes the
                  form of an AccessibleAWTCheckboxMenuItem.
                  A new AccessibleAWTCheckboxMenuItem is created if necessary.                
                <return>
                    an AccessibleAWTCheckboxMenuItem that serves as the
                      AccessibleContext of this CheckboxMenuItem                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="497">
                <scope line="498"/>
            </method>
            <class name="AccessibleAWTCheckboxMenuItem" line="504">
                <extends class="AccessibleAWTMenuItem"/>
                <comment line="520">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <implements interface="AccessibleAction"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="504">
                    Inner class of CheckboxMenuItem used to provide default support for
                      accessibility.  This class is not meant to be used directly by
                      application developers, but is instead meant only to be
                      subclassed by menu component developers.
                      &lt;p&gt;
                      This class implements accessibility support for the
                      &lt;code&gt;CheckboxMenuItem&lt;/code&gt; class.  It provides an implementation
                      of the Java Accessibility API appropriate to checkbox menu item
                      user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="522"/>
                <javadoc line="524">
                    Get the AccessibleAction associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleAction interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleAction" type="AccessibleAction" line="532"/>
                <javadoc line="536">
                    Get the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleValue interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="544"/>
                <javadoc line="548">
                    Returns the number of Actions available in this object.
                      If there is more than one, the first one is the &quot;default&quot;
                      action.                    
                    <return>
                        the number of Actions in this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="555">
                    <comment line="556">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="559">
                    Return a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="564">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="565">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="568">
                    Perform the specified Action on the object                    
                    <param>
                        i zero-based index of actions                        
                    </param>
                    <return>
                        true if the action was performed; otherwise false.                        
                    </return>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="574">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="575">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="578">
                    Get the value of this object as a Number.  If the value has not been
                      set, the return value will be null.                    
                    <return>
                        value of the object                        
                    </return>
                    <see>
                        #setCurrentAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="585">
                    <comment line="586">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="589">
                    Set the value of this object as a Number.                    
                    <return>
                        true if the value was set; otherwise false                        
                    </return>
                    <see>
                        #getCurrentAccessibleValue                        
                    </see>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="595">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <comment line="596">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="599">
                    Get the minimum value of this object as a Number.                    
                    <return>
                        Minimum value of the object; null if this object does not
                          have a minimum value                        
                    </return>
                    <see>
                        #getMaximumAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="606">
                    <comment line="607">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="610">
                    Get the maximum value of this object as a Number.                    
                    <return>
                        Maximum value of the object; null if this object does not
                          have a maximum value                        
                    </return>
                    <see>
                        #getMinimumAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="617">
                    <comment line="618">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="621">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="627"/>
            </class>
        </class>
    </source>