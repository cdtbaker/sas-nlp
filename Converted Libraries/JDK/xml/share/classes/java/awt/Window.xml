<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event"/>
        <import package="java.awt.geom.Path2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.im.InputContext"/>
        <import package="java.awt.image.BufferStrategy"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.WindowPeer"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.OptionalDataException"/>
        <import package="java.io.Serializable"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.EventListener"/>
        <import package="java.util.Locale"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="javax.accessibility"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.CausedFocusEvent"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.util.IdentityArrayList"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="Window" line="38">
            <extends class="Container"/>
            <implements interface="Accessible"/>
            <javadoc line="38">
                A &lt;code&gt;Window&lt;/code&gt; object is a top-level window with no borders and no
                  menubar.
                  The default layout for a window is &lt;code&gt;BorderLayout&lt;/code&gt;.
                  &lt;p&gt;
                  A window must have either a frame, dialog, or another window defined as its
                  owner when it&apos;s constructed.
                  &lt;p&gt;
                  In a multi-screen environment, you can create a &lt;code&gt;Window&lt;/code&gt;
                  on a different screen device by constructing the &lt;code&gt;Window&lt;/code&gt;
                  with {@link #Window(Window,GraphicsConfiguration)}.  The
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; object is one of the
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects of the target screen device.
                  &lt;p&gt;
                  In a virtual device multi-screen environment in which the desktop
                  area could span multiple physical screen devices, the bounds of all
                  configurations are relative to the virtual device coordinate system.
                  The origin of the virtual-coordinate system is at the upper left-hand
                  corner of the primary physical screen.  Depending on the location of
                  the primary screen in the virtual device, negative coordinates are
                  possible, as shown in the following figure.
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/MultiScreen.gif&quot;
                  alt=&quot;Diagram shows virtual device containing 4 physical screens. Primary physical screen shows coords (0,0), other screen shows (-80,-100).&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  In such an environment, when calling &lt;code&gt;setLocation&lt;/code&gt;,
                  you must pass a virtual coordinate to this method.  Similarly,
                  calling &lt;code&gt;getLocationOnScreen&lt;/code&gt; on a &lt;code&gt;Window&lt;/code&gt; returns
                  virtual device coordinates.  Call the &lt;code&gt;getBounds&lt;/code&gt; method
                  of a &lt;code&gt;GraphicsConfiguration&lt;/code&gt; to find its origin in the virtual
                  coordinate system.
                  &lt;p&gt;
                  The following code sets the location of a &lt;code&gt;Window&lt;/code&gt;
                  at (10, 10) relative to the origin of the physical screen
                  of the corresponding &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.  If the
                  bounds of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is not taken
                  into account, the &lt;code&gt;Window&lt;/code&gt; location would be set
                  at (10, 10) relative to the virtual-coordinate system and would appear
                  on the primary physical screen, which might be different from the
                  physical screen of the specified &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.
                  &lt;pre&gt;
                  Window w = new Window(Window owner, GraphicsConfiguration gc);
                  Rectangle bounds = gc.getBounds();
                  w.setLocation(10 + bounds.x, 10 + bounds.y);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Note: the location and size of top-level windows (including
                  &lt;code&gt;Window&lt;/code&gt;s, &lt;code&gt;Frame&lt;/code&gt;s, and &lt;code&gt;Dialog&lt;/code&gt;s)
                  are under the control of the desktop&apos;s window management system.
                  Calls to &lt;code&gt;setLocation&lt;/code&gt;, &lt;code&gt;setSize&lt;/code&gt;, and
                  &lt;code&gt;setBounds&lt;/code&gt; are requests (not directives) which are
                  forwarded to the window management system.  Every effort will be
                  made to honor such requests.  However, in some cases the window
                  management system may ignore such requests, or modify the requested
                  geometry in order to place and size the &lt;code&gt;Window&lt;/code&gt; in a way
                  that more closely matches the desktop settings.
                  &lt;p&gt;
                  Due to the asynchronous nature of native event handling, the results
                  returned by &lt;code&gt;getBounds&lt;/code&gt;, &lt;code&gt;getLocation&lt;/code&gt;,
                  &lt;code&gt;getLocationOnScreen&lt;/code&gt;, and &lt;code&gt;getSize&lt;/code&gt; might not
                  reflect the actual geometry of the Window on screen until the last
                  request has been processed.  During the processing of subsequent
                  requests these values might change accordingly while the window
                  management system fulfills the requests.
                  &lt;p&gt;
                  An application may set the size and location of an invisible{@code Window} arbitrarily, but the window management system may
                  subsequently change its size and/or location when the{@code Window} is made visible. One or more {@code ComponentEvent}s
                  will be generated to indicate the new geometry.
                  &lt;p&gt;
                  Windows are capable of generating the following WindowEvents:
                  WindowOpened, WindowClosed, WindowGainedFocus, WindowLostFocus.                
                <author>
                    Sami Shaio                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    WindowEvent                    
                </see>
                <see>
                    #addWindowListener                    
                </see>
                <see>
                    java.awt.BorderLayout                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="Type" type="enum" line="118"/>
            <javadoc line="118">
                Enumeration of available &lt;i&gt;window types&lt;/i&gt;.
                  A window type defines the generic visual appearance and behavior of a
                  top-level window. For example, the type may affect the kind of
                  decorations of a decorated {@code Frame} or {@code Dialog} instance.
                  &lt;p&gt;
                  Some platforms may not fully support a certain window type. Depending on
                  the level of support, some properties of the window type may be
                  disobeyed.                
                <see>
                    #getType                    
                </see>
                <see>
                    #setType                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <scope line="131"/>
            <declaration name="warningString" type="String" line="149"/>
            <javadoc line="149">
                This represents the warning message that is
                  to be displayed in a non secure window. ie :
                  a window that has a security manager installed for
                  which calling SecurityManager.checkTopLevelWindow()
                  is false.  This message can be displayed anywhere in
                  the window.                
                <serial>
                                        
                </serial>
                <see>
                    #getWarningString                    
                </see>
            </javadoc>
            <declaration name="icons" type="java.util.List&amp;lt;Image&amp;gt;" line="160"/>
            <javadoc line="160">
                {@code icons} is the graphical way we can
                  represent the frames and dialogs.{@code Window} can&apos;t display icon but it&apos;s
                  being inherited by owned {@code Dialog}s.                
                <serial>
                                        
                </serial>
                <see>
                    #getIconImages                    
                </see>
                <see>
                    #setIconImages(List&lt;? extends Image&gt;)                    
                </see>
            </javadoc>
            <declaration name="temporaryLostComponent" type="Component" line="169"/>
            <javadoc line="169">
                Holds the reference to the component which last had focus in this window
                  before it lost focus.                
            </javadoc>
            <declaration name="systemSyncLWRequests" type="boolean" line="174"/>
            <declaration name="syncLWRequests" type="boolean" line="175"/>
            <declaration name="beforeFirstShow" type="boolean" line="176"/>
            <declaration name="OPENED" type="int" line="177"/>
            <declaration name="state" type="int" line="178"/>
            <javadoc line="178">
                An Integer value representing the Window State.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
                <see>
                    #show                    
                </see>
            </javadoc>
            <declaration name="alwaysOnTop" type="boolean" line="185"/>
            <javadoc line="185">
                A boolean value representing Window always-on-top state                
                <since>
                    1.5                    
                </since>
                <serial>
                                        
                </serial>
                <see>
                    #setAlwaysOnTop                    
                </see>
                <see>
                    #isAlwaysOnTop                    
                </see>
            </javadoc>
            <declaration name="allWindows" type="IdentityArrayList&amp;lt;Window&amp;gt;" line="193"/>
            <javadoc line="193">
                Contains all the windows that have a peer object associated,
                  i. e. between addNotify() and removeNotify() calls. The list
                  of all Window instances can be obtained from AppContext object.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ownedWindowList" type="Vector&amp;lt;WeakReference&amp;lt;Window&amp;gt;&amp;gt;" line="200"/>
            <javadoc line="200">
                A vector containing all the windows this
                  window currently owns.                
                <since>
                    1.2                    
                </since>
                <see>
                    #getOwnedWindows                    
                </see>
            </javadoc>
            <declaration name="weakThis" type="WeakReference&amp;lt;Window&amp;gt;" line="207"/>
            <declaration name="showWithParent" type="boolean" line="208"/>
            <declaration name="modalBlocker" type="Dialog" line="209"/>
            <javadoc line="209">
                Contains the modal dialog that blocks this window, or null
                  if the window is unblocked.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="modalExclusionType" type="Dialog.ModalExclusionType" line="215"/>
            <javadoc line="215">
                @serial                
                <see>
                    java.awt.Dialog.ModalExclusionType                    
                </see>
                <see>
                    #getModalExclusionType                    
                </see>
                <see>
                    #setModalExclusionType                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="windowListener" type="WindowListener" line="223"/>
            <declaration name="windowStateListener" type="WindowStateListener" line="224"/>
            <declaration name="windowFocusListener" type="WindowFocusListener" line="225"/>
            <declaration name="inputContext" type="InputContext" line="226"/>
            <declaration name="inputContextLock" type="Object" line="227"/>
            <declaration name="focusMgr" type="FocusManager" line="228"/>
            <javadoc line="228">
                Unused. Maintained for serialization backward-compatibility.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="focusableWindowState" type="boolean" line="234"/>
            <javadoc line="234">
                Indicates whether this Window can become the focused Window.                
                <serial>
                                        
                </serial>
                <see>
                    #getFocusableWindowState                    
                </see>
                <see>
                    #setFocusableWindowState                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="autoRequestFocus" type="boolean" line="242"/>
            <javadoc line="242">
                Indicates whether this window should receive focus on
                  subsequently being shown (with a call to {@code setVisible(true)}), or
                  being moved to the front (with a call to {@code toFront()}).                
                <serial>
                                        
                </serial>
                <see>
                    #setAutoRequestFocus                    
                </see>
                <see>
                    #isAutoRequestFocus                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="isInShow" type="boolean" line="252"/>
            <declaration name="opacity" type="float" line="253"/>
            <declaration name="shape" type="Shape" line="254"/>
            <declaration name="base" type="String" line="255"/>
            <declaration name="nameCounter" type="int" line="256"/>
            <declaration name="serialVersionUID" type="long" line="257"/>
            <declaration name="log" type="PlatformLogger" line="258"/>
            <declaration name="locationByPlatformProp" type="boolean" line="259"/>
            <declaration name="isTrayIconWindow" type="boolean" line="260"/>
            <declaration name="securityWarningWidth" type="int" line="261"/>
            <javadoc line="261">
                These fields are initialized in the native peer code
                  or via AWTAccessor&apos;s WindowAccessor.                
            </javadoc>
            <declaration name="securityWarningHeight" type="int" line="266"/>
            <declaration name="securityWarningPointX" type="double" line="267"/>
            <javadoc line="267">
                These fields represent the desired location for the security
                  warning if this window is untrusted.
                  See com.sun.awt.SecurityWarning for more details.                
            </javadoc>
            <declaration name="securityWarningPointY" type="double" line="273"/>
            <declaration name="securityWarningAlignmentX" type="float" line="274"/>
            <declaration name="securityWarningAlignmentY" type="float" line="275"/>
            <scope line="276">
                <scope line="278"/>
                <declaration name="s" type="String" line="281"/>
            </scope>
            <method name="initIDs" type="void" line="286"/>
            <javadoc line="286">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <javadoc line="291">
                Constructs a new, initially invisible window in default size with the
                  specified &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.
                  &lt;p&gt;
                  If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkTopLevelWindow&lt;/code&gt;
                  method with &lt;code&gt;this&lt;/code&gt;
                  as its argument to determine whether or not the window
                  must be displayed with a warning banner.                
                <param>
                    gc the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; of the target screen
                      device. If &lt;code&gt;gc&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the system default
                      &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is assumed                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;gc&lt;/code&gt;
                      is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.lang.SecurityManager#checkTopLevelWindow                    
                </see>
            </javadoc>
            <method name="Window" type="constructor" line="310">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <declaration name="anchor" type="Object" line="313"/>
            <class name="WindowDisposerRecord" line="314">
                <implements interface="sun.java2d.DisposerRecord"/>
                <declaration name="owner" type="WeakReference&amp;lt;Window&amp;gt;" line="315"/>
                <declaration name="weakThis" type="WeakReference" line="316"/>
                <declaration name="context" type="WeakReference&amp;lt;AppContext&amp;gt;" line="317"/>
                <method name="WindowDisposerRecord" type="constructor" line="318">
                    <params>
                        <param name="context" type="AppContext"/>
                        <param name="victim" type="Window"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="323">
                    <declaration name="parent" type="Window" line="324"/>
                    <scope line="325"/>
                    <declaration name="ac" type="AppContext" line="328"/>
                    <scope line="329"/>
                </method>
            </class>
            <method name="initGC" type="GraphicsConfiguration" line="334">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="336"/>
            </method>
            <method name="init" type="void" line="342">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="351"/>
                <declaration name="screenBounds" type="Rectangle" line="355"/>
                <declaration name="screenInsets" type="Insets" line="356"/>
                <declaration name="x" type="int" line="357"/>
                <declaration name="y" type="int" line="358"/>
                <scope line="359"/>
            </method>
            <javadoc line="366">
                Constructs a new, initially invisible window in the default size.
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkTopLevelWindow&lt;/code&gt;
                  method is called with &lt;code&gt;this&lt;/code&gt;
                  as its argument
                  to see if it&apos;s ok to display the window without a warning banner.
                  If the default implementation of &lt;code&gt;checkTopLevelWindow&lt;/code&gt;
                  is used (that is, that method is not overriden), then this results in
                  a call to the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  with an &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt;
                  permission. It that method raises a SecurityException,
                  &lt;code&gt;checkTopLevelWindow&lt;/code&gt; returns false, otherwise it
                  returns true. If it returns false, a warning banner is created.                
                <exception>
                    HeadlessException when
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.lang.SecurityManager#checkTopLevelWindow                    
                </see>
            </javadoc>
            <method name="Window" type="constructor" line="385"/>
            <javadoc line="389">
                Constructs a new, initially invisible window with the specified
                  &lt;code&gt;Frame&lt;/code&gt; as its owner. The window will not be focusable
                  unless its owner is showing on the screen.
                  &lt;p&gt;
                  If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkTopLevelWindow&lt;/code&gt;
                  method with &lt;code&gt;this&lt;/code&gt;
                  as its argument to determine whether or not the window
                  must be displayed with a warning banner.                
                <param>
                    owner the &lt;code&gt;Frame&lt;/code&gt; to act as owner or &lt;code&gt;null&lt;/code&gt;
                      if this window has no owner                    
                </param>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;owner&lt;/code&gt;&apos;s
                      &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.lang.SecurityManager#checkTopLevelWindow                    
                </see>
                <see>
                    #isShowing                    
                </see>
            </javadoc>
            <method name="Window" type="constructor" line="409">
                <params>
                    <param name="owner" type="Frame"/>
                </params>
            </method>
            <javadoc line="413">
                Constructs a new, initially invisible window with the specified
                  &lt;code&gt;Window&lt;/code&gt; as its owner. This window will not be focusable
                  unless its nearest owning &lt;code&gt;Frame&lt;/code&gt; or &lt;code&gt;Dialog&lt;/code&gt;
                  is showing on the screen.
                  &lt;p&gt;
                  If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkTopLevelWindow&lt;/code&gt;
                  method with &lt;code&gt;this&lt;/code&gt;
                  as its argument to determine whether or not the window
                  must be displayed with a warning banner.                
                <param>
                    owner the &lt;code&gt;Window&lt;/code&gt; to act as owner or
                      &lt;code&gt;null&lt;/code&gt; if this window has no owner                    
                </param>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;owner&lt;/code&gt;&apos;s
                      &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.lang.SecurityManager#checkTopLevelWindow                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Window" type="constructor" line="436">
                <params>
                    <param name="owner" type="Window"/>
                </params>
            </method>
            <javadoc line="440">
                Constructs a new, initially invisible window with the specified owner
                  &lt;code&gt;Window&lt;/code&gt; and a &lt;code&gt;GraphicsConfiguration&lt;/code&gt;
                  of a screen device. The Window will not be focusable unless
                  its nearest owning &lt;code&gt;Frame&lt;/code&gt; or &lt;code&gt;Dialog&lt;/code&gt;
                  is showing on the screen.
                  &lt;p&gt;
                  If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkTopLevelWindow&lt;/code&gt;
                  method with &lt;code&gt;this&lt;/code&gt;
                  as its argument to determine whether or not the window
                  must be displayed with a warning banner.                
                <param>
                    owner the window to act as owner or &lt;code&gt;null&lt;/code&gt;
                      if this window has no owner                    
                </param>
                <param>
                    gc the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; of the target
                      screen device; if &lt;code&gt;gc&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                      the system default &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is assumed                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;gc&lt;/code&gt;
                      is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.lang.SecurityManager#checkTopLevelWindow                    
                </see>
                <see>
                    GraphicsConfiguration#getBounds                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="Window" type="constructor" line="468">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="ownedInit" type="void" line="472">
                <params>
                    <param name="owner" type="Window"/>
                </params>
                <scope line="474"/>
            </method>
            <javadoc line="479">
                Construct a name for this component.  Called by getName() when the
                  name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="483">
                <scope line="484"/>
            </method>
            <javadoc line="488">
                Returns the sequence of images to be displayed as the icon for this window.
                  &lt;p&gt;
                  This method returns a copy of the internally stored list, so all operations
                  on the returned object will not affect the window&apos;s behavior.                
                <return>
                    the copy of icon images&apos; list for this window, or
                      empty list if this window doesn&apos;t have icon images.                    
                </return>
                <see>
                    #setIconImages                    
                </see>
                <see>
                    #setIconImage(Image)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getIconImages" type="java.util.List&lt;Image&gt;" line="499">
                <declaration name="icons" type="java.util.List&amp;lt;Image&amp;gt;" line="500"/>
                <scope line="501"/>
            </method>
            <javadoc line="506">
                Sets the sequence of images to be displayed as the icon
                  for this window. Subsequent calls to {@code getIconImages} will
                  always return a copy of the {@code icons} list.
                  &lt;p&gt;
                  Depending on the platform capabilities one or several images
                  of different dimensions will be used as the window&apos;s icon.
                  &lt;p&gt;
                  The {@code icons} list is scanned for the images of most
                  appropriate dimensions from the beginning. If the list contains
                  several images of the same size, the first will be used.
                  &lt;p&gt;
                  Ownerless windows with no icon specified use platfrom-default icon.
                  The icon of an owned window may be inherited from the owner
                  unless explicitly overridden.
                  Setting the icon to {@code null} or empty list restores
                  the default behavior.
                  &lt;p&gt;
                  Note : Native windowing systems may use different images of differing
                  dimensions to represent a window, depending on the context (e.g.
                  window decoration, window list, taskbar, etc.). They could also use
                  just a single image for all contexts or no image at all.                
                <param>
                    icons the list of icon images to be displayed.                    
                </param>
                <see>
                    #getIconImages()                    
                </see>
                <see>
                    #setIconImage(Image)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setIconImages" type="void" line="533">
                <params>
                    <param name="icons" type="java.util.List&lt;? extends Image&gt;"/>
                </params>
                <declaration name="peer" type="WindowPeer" line="535"/>
                <scope line="536"/>
            </method>
            <javadoc line="541">
                Sets the image to be displayed as the icon for this window.
                  &lt;p&gt;
                  This method can be used instead of {@link #setIconImages setIconImages()}to specify a single image as a window&apos;s icon.
                  &lt;p&gt;
                  The following statement:
                  &lt;pre&gt;
                  setIconImage(image);
                  &lt;/pre&gt;
                  is equivalent to:
                  &lt;pre&gt;
                  ArrayList&amp;lt;Image&amp;gt; imageList = new ArrayList&amp;lt;Image&amp;gt;();
                  imageList.add(image);
                  setIconImages(imageList);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Note : Native windowing systems may use different images of differing
                  dimensions to represent a window, depending on the context (e.g.
                  window decoration, window list, taskbar, etc.). They could also use
                  just a single image for all contexts or no image at all.                
                <param>
                    image the icon image to be displayed.                    
                </param>
                <see>
                    #setIconImages                    
                </see>
                <see>
                    #getIconImages()                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setIconImage" type="void" line="566">
                <params>
                    <param name="image" type="Image"/>
                </params>
                <declaration name="imageList" type="ArrayList&amp;lt;Image&amp;gt;" line="567"/>
                <scope line="568"/>
            </method>
            <javadoc line="573">
                Makes this Window displayable by creating the connection to its
                  native screen resource.
                  This method is called internally by the toolkit and should
                  not be called directly by programs.                
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    Container#removeNotify                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="addNotify" type="void" line="582">
                <scope line="583">
                    <declaration name="parent" type="Container" line="584"/>
                    <scope line="585"/>
                    <scope line="588"/>
                    <scope line="591"/>
                </scope>
            </method>
            <javadoc line="597">
                {@inheritDoc}                
            </javadoc>
            <method name="removeNotify" type="void" line="600">
                <scope line="601">
                    <scope line="602"/>
                </scope>
            </method>
            <javadoc line="608">
                Causes this Window to be sized to fit the preferred size
                  and layouts of its subcomponents. The resulting width and
                  height of the window are automatically enlarged if either
                  of dimensions is less than the minimum size as specified
                  by the previous call to the {@code setMinimumSize} method.
                  &lt;p&gt;
                  If the window and/or its owner are not displayable yet,
                  both of them are made displayable before calculating
                  the preferred size. The Window is validated after its
                  size is being calculated.                
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    #setMinimumSize                    
                </see>
            </javadoc>
            <method name="pack" type="void" line="622">
                <declaration name="parent" type="Container" line="623"/>
                <scope line="624"/>
                <scope line="627"/>
                <declaration name="newSize" type="Dimension" line="630"/>
                <scope line="631"/>
                <scope line="634"/>
            </method>
            <javadoc line="639">
                Sets the minimum size of this window to a constant
                  value.  Subsequent calls to {@code getMinimumSize}will always return this value. If current window&apos;s
                  size is less than {@code minimumSize} the size of the
                  window is automatically enlarged to honor the minimum size.
                  &lt;p&gt;
                  If the {@code setSize} or {@code setBounds} methods
                  are called afterwards with a width or height less than
                  that was specified by the {@code setMinimumSize} method
                  the window is automatically enlarged to meet
                  the {@code minimumSize} value. The {@code minimumSize}value also affects the behaviour of the {@code pack} method.
                  &lt;p&gt;
                  The default behavior is restored by setting the minimum size
                  parameter to the {@code null} value.
                  &lt;p&gt;
                  Resizing operation may be restricted if the user tries
                  to resize window below the {@code minimumSize} value.
                  This behaviour is platform-dependent.                
                <param>
                    minimumSize the new minimum size of this window                    
                </param>
                <see>
                    Component#setMinimumSize                    
                </see>
                <see>
                    #getMinimumSize                    
                </see>
                <see>
                    #isMinimumSizeSet                    
                </see>
                <see>
                    #setSize(Dimension)                    
                </see>
                <see>
                    #pack                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setMinimumSize" type="void" line="665">
                <params>
                    <param name="minimumSize" type="Dimension"/>
                </params>
                <scope line="666">
                    <declaration name="size" type="Dimension" line="668"/>
                    <scope line="669">
                        <scope line="670">
                            <declaration name="nw" type="int" line="671"/>
                            <declaration name="nh" type="int" line="672"/>
                        </scope>
                    </scope>
                    <scope line="676"/>
                </scope>
            </method>
            <javadoc line="681">
                {@inheritDoc}&lt;p&gt;
                  The {@code d.width} and {@code d.height} values
                  are automatically enlarged if either is less than
                  the minimum size as specified by previous call to{@code setMinimumSize}.
                  &lt;p&gt;
                  The method changes the geometry-related data. Therefore,
                  the native windowing system may ignore such requests, or it may modify
                  the requested data, so that the {@code Window} object is placed and sized
                  in a way that corresponds closely to the desktop settings.                
                <see>
                    #getSize                    
                </see>
                <see>
                    #setBounds                    
                </see>
                <see>
                    #setMinimumSize                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSize" type="void" line="696">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="699">
                {@inheritDoc}&lt;p&gt;
                  The {@code width} and {@code height} values
                  are automatically enlarged if either is less than
                  the minimum size as specified by previous call to{@code setMinimumSize}.
                  &lt;p&gt;
                  The method changes the geometry-related data. Therefore,
                  the native windowing system may ignore such requests, or it may modify
                  the requested data, so that the {@code Window} object is placed and sized
                  in a way that corresponds closely to the desktop settings.                
                <see>
                    #getSize                    
                </see>
                <see>
                    #setBounds                    
                </see>
                <see>
                    #setMinimumSize                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSize" type="void" line="714">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="717">
                {@inheritDoc}&lt;p&gt;
                  The method changes the geometry-related data. Therefore,
                  the native windowing system may ignore such requests, or it may modify
                  the requested data, so that the {@code Window} object is placed and sized
                  in a way that corresponds closely to the desktop settings.                
            </javadoc>
            <method name="setLocation" type="void" line="724">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="727">
                {@inheritDoc}&lt;p&gt;
                  The method changes the geometry-related data. Therefore,
                  the native windowing system may ignore such requests, or it may modify
                  the requested data, so that the {@code Window} object is placed and sized
                  in a way that corresponds closely to the desktop settings.                
            </javadoc>
            <method name="setLocation" type="void" line="734">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="737">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setBounds(int, int, int, int)&lt;/code&gt;.                
            </javadoc>
            <method name="reshape" type="void" line="741">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="742">
                    <declaration name="minSize" type="Dimension" line="743"/>
                    <scope line="744"/>
                    <scope line="747"/>
                </scope>
            </method>
            <method name="setClientSize" type="void" line="753">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="754"/>
            </method>
            <declaration name="beforeFirstWindowShown" type="AtomicBoolean" line="759"/>
            <method name="closeSplashScreen" type="void" line="760">
                <scope line="761"/>
                <scope line="764"/>
            </method>
            <javadoc line="769">
                Shows or hides this {@code Window} depending on the value of parameter{@code b}.
                  &lt;p&gt;
                  If the method shows the window then the window is also made
                  focused under the following conditions:
                  &lt;ul&gt;
                  &lt;li&gt; The {@code Window} meets the requirements outlined in the{@link #isFocusableWindow} method.
                  &lt;li&gt; The {@code Window}&apos;s {@code autoRequestFocus} property is of the {@code true} value.
                  &lt;li&gt; Native windowing system allows the {@code Window} to get focused.
                  &lt;/ul&gt;
                  There is an exception for the second condition (the value of the{@code autoRequestFocus} property). The property is not taken into account if the
                  window is a modal dialog, which blocks the currently focused window.
                  &lt;p&gt;
                  Developers must never assume that the window is the focused or active window
                  until it receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event.                
                <param>
                    b  if {@code true}, makes the {@code Window} visible,
                      otherwise hides the {@code Window}.
                      If the {@code Window} and/or its owner
                      are not yet displayable, both are made displayable.  The{@code Window} will be validated prior to being made visible.
                      If the {@code Window} is already visible, this will bring the{@code Window} to the front.&lt;p&gt;
                      If {@code false}, hides this {@code Window}, its subcomponents, and all
                      of its owned children.
                      The {@code Window} and its subcomponents can be made visible again
                      with a call to {@code #setVisible(true)}.                    
                </param>
                <see>
                    java.awt.Component#isDisplayable                    
                </see>
                <see>
                    java.awt.Component#setVisible                    
                </see>
                <see>
                    java.awt.Window#toFront                    
                </see>
                <see>
                    java.awt.Window#dispose                    
                </see>
                <see>
                    java.awt.Window#setAutoRequestFocus                    
                </see>
                <see>
                    java.awt.Window#isFocusableWindow                    
                </see>
            </javadoc>
            <method name="setVisible" type="void" line="800">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="803">
                Makes the Window visible. If the Window and/or its owner
                  are not yet displayable, both are made displayable.  The
                  Window will be validated prior to being made visible.
                  If the Window is already visible, this will bring the Window
                  to the front.                
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    #toFront                    
                </see>
                <deprecated>
                    As of JDK version 1.5, replaced by{@link #setVisible(boolean)}.                    
                </deprecated>
            </javadoc>
            <method name="show" type="void" line="813">
                <scope line="814"/>
                <scope line="819"/>
                <scope line="822">
                    <scope line="828">
                        <declaration name="child" type="Window" line="829"/>
                        <scope line="830"/>
                    </scope>
                    <scope line="835"/>
                    <scope line="838"/>
                    <scope line="841"/>
                </scope>
                <scope line="846"/>
            </method>
            <method name="updateChildFocusableWindowState" type="void" line="851">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="852"/>
                <scope line="855">
                    <declaration name="child" type="Window" line="856"/>
                    <scope line="857"/>
                </scope>
            </method>
            <method name="postWindowEvent" type="void" line="862">
                <params>
                    <param name="id" type="int"/>
                </params>
                <scope line="863">
                    <declaration name="e" type="WindowEvent" line="864"/>
                </scope>
            </method>
            <javadoc line="868">
                Hide this Window, its subcomponents, and all of its owned children.
                  The Window and its subcomponents can be made visible again
                  with a call to {@code show}.
                  &lt;/p&gt;                
                <see>
                    #show                    
                </see>
                <see>
                    #dispose                    
                </see>
                <deprecated>
                    As of JDK version 1.5, replaced by{@link #setVisible(boolean)}.                    
                </deprecated>
            </javadoc>
            <method name="hide" type="void" line="877">
                <scope line="878">
                    <scope line="879">
                        <declaration name="child" type="Window" line="880"/>
                        <scope line="881"/>
                    </scope>
                </scope>
                <scope line="887"/>
            </method>
            <method name="clearMostRecentFocusOwnerOnHide" type="void" line="892"/>
            <javadoc line="894">
                Releases all of the native screen resources used by this
                  &lt;code&gt;Window&lt;/code&gt;, its subcomponents, and all of its owned
                  children. That is, the resources for these &lt;code&gt;Component&lt;/code&gt;s
                  will be destroyed, any memory they consume will be returned to the
                  OS, and they will be marked as undisplayable.
                  &lt;p&gt;
                  The &lt;code&gt;Window&lt;/code&gt; and its subcomponents can be made displayable
                  again by rebuilding the native resources with a subsequent call to
                  &lt;code&gt;pack&lt;/code&gt; or &lt;code&gt;show&lt;/code&gt;. The states of the recreated
                  &lt;code&gt;Window&lt;/code&gt; and its subcomponents will be identical to the
                  states of these objects at the point where the &lt;code&gt;Window&lt;/code&gt;
                  was disposed (not accounting for additional modifications between
                  those actions).
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: When the last displayable window
                  within the Java virtual machine (VM) is disposed of, the VM may
                  terminate.  See &lt;a href=&quot;doc-files/AWTThreadIssues.html#Autoshutdown&quot;&gt;
                  AWT Threading Issues&lt;/a&gt; for more information.                
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    #pack                    
                </see>
                <see>
                    #show                    
                </see>
            </javadoc>
            <method name="dispose" type="void" line="917"/>
            <method name="disposeImpl" type="void" line="920">
                <scope line="922"/>
            </method>
            <method name="doDispose" type="void" line="926">
                <class name="DisposeAction" line="927">
                    <implements interface="Runnable"/>
                    <method name="run" type="void" line="928">
                        <declaration name="gd" type="GraphicsDevice" line="929"/>
                        <scope line="930"/>
                        <declaration name="ownedWindowArray" type="Object[]" line="933"/>
                        <scope line="934"/>
                        <scope line="938">
                            <declaration name="child" type="Window" line="939"/>
                            <scope line="940"/>
                        </scope>
                        <scope line="947">
                            <scope line="948"/>
                        </scope>
                    </method>
                </class>
                <declaration name="action" type="DisposeAction" line="956"/>
                <scope line="957"/>
                <scope line="960">
                    <scope line="961"/>
                    <scope line="964"/>
                    <scope line="968"/>
                </scope>
            </method>
            <method name="adjustListeningChildrenOnParent" type="void" line="975">
                <params>
                    <param name="mask" type="long"/>
                    <param name="num" type="int"/>
                </params>
            </method>
            <method name="adjustDecendantsOnParent" type="void" line="977">
                <params>
                    <param name="num" type="int"/>
                </params>
            </method>
            <javadoc line="979">
                If this Window is visible, brings this Window to the front and may make
                  it the focused Window.
                  &lt;p&gt;
                  Places this Window at the top of the stacking order and shows it in
                  front of any other Windows in this VM. No action will take place if this
                  Window is not visible. Some platforms do not allow Windows which own
                  other Windows to appear on top of those owned Windows. Some platforms
                  may not permit this VM to place its Windows above windows of native
                  applications, or Windows of other VMs. This permission may depend on
                  whether a Window in this VM is already focused. Every attempt will be
                  made to move this Window as high as possible in the stacking order;
                  however, developers should not assume that this method will move this
                  Window above all other windows in every situation.
                  &lt;p&gt;
                  Developers must never assume that this Window is the focused or active
                  Window until this Window receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED
                  event. On platforms where the top-most window is the focused window, this
                  method will &lt;b&gt;probably&lt;/b&gt; focus this Window (if it is not already focused)
                  under the following conditions:
                  &lt;ul&gt;
                  &lt;li&gt; The window meets the requirements outlined in the{@link #isFocusableWindow} method.
                  &lt;li&gt; The window&apos;s property {@code autoRequestFocus} is of the{@code true} value.
                  &lt;li&gt; Native windowing system allows the window to get focused.
                  &lt;/ul&gt;
                  On platforms where the stacking order does not typically affect the focused
                  window, this method will &lt;b&gt;probably&lt;/b&gt; leave the focused and active
                  Windows unchanged.
                  &lt;p&gt;
                  If this method causes this Window to be focused, and this Window is a
                  Frame or a Dialog, it will also become activated. If this Window is
                  focused, but it is not a Frame or a Dialog, then the first Frame or
                  Dialog that is an owner of this Window will be activated.
                  &lt;p&gt;
                  If this window is blocked by modal dialog, then the blocking dialog
                  is brought to the front and remains above the blocked window.                
                <see>
                    #toBack                    
                </see>
                <see>
                    #setAutoRequestFocus                    
                </see>
                <see>
                    #isFocusableWindow                    
                </see>
            </javadoc>
            <method name="toFront" type="void" line="1019"/>
            <method name="toFront_NoClientCode" type="void" line="1022">
                <scope line="1023">
                    <declaration name="peer" type="WindowPeer" line="1024"/>
                    <scope line="1025"/>
                    <scope line="1028"/>
                </scope>
            </method>
            <javadoc line="1033">
                If this Window is visible, sends this Window to the back and may cause
                  it to lose focus or activation if it is the focused or active Window.
                  &lt;p&gt;
                  Places this Window at the bottom of the stacking order and shows it
                  behind any other Windows in this VM. No action will take place is this
                  Window is not visible. Some platforms do not allow Windows which are
                  owned by other Windows to appear below their owners. Every attempt will
                  be made to move this Window as low as possible in the stacking order;
                  however, developers should not assume that this method will move this
                  Window below all other windows in every situation.
                  &lt;p&gt;
                  Because of variations in native windowing systems, no guarantees about
                  changes to the focused and active Windows can be made. Developers must
                  never assume that this Window is no longer the focused or active Window
                  until this Window receives a WINDOW_LOST_FOCUS or WINDOW_DEACTIVATED
                  event. On platforms where the top-most window is the focused window,
                  this method will &lt;b&gt;probably&lt;/b&gt; cause this Window to lose focus. In
                  that case, the next highest, focusable Window in this VM will receive
                  focus. On platforms where the stacking order does not typically affect
                  the focused window, this method will &lt;b&gt;probably&lt;/b&gt; leave the focused
                  and active Windows unchanged.                
                <see>
                    #toFront                    
                </see>
            </javadoc>
            <method name="toBack" type="void" line="1057"/>
            <method name="toBack_NoClientCode" type="void" line="1060">
                <scope line="1061">
                    <scope line="1062"/>
                    <scope line="1065"/>
                </scope>
                <scope line="1068">
                    <declaration name="peer" type="WindowPeer" line="1069"/>
                    <scope line="1070"/>
                </scope>
            </method>
            <javadoc line="1075">
                Returns the toolkit of this frame.                
                <return>
                    the toolkit of this window.                    
                </return>
                <see>
                    Toolkit                    
                </see>
                <see>
                    Toolkit#getDefaultToolkit                    
                </see>
                <see>
                    Component#getToolkit                    
                </see>
            </javadoc>
            <method name="getToolkit" type="Toolkit" line="1082"/>
            <javadoc line="1085">
                Gets the warning string that is displayed with this window.
                  If this window is insecure, the warning string is displayed
                  somewhere in the visible area of the window. A window is
                  insecure if there is a security manager, and the security
                  manager&apos;s &lt;code&gt;checkTopLevelWindow&lt;/code&gt; method returns
                  &lt;code&gt;false&lt;/code&gt; when this window is passed to it as an
                  argument.
                  &lt;p&gt;
                  If the window is secure, then &lt;code&gt;getWarningString&lt;/code&gt;
                  returns &lt;code&gt;null&lt;/code&gt;. If the window is insecure, this
                  method checks for the system property
                  &lt;code&gt;awt.appletWarning&lt;/code&gt;
                  and returns the string value of that property.                
                <return>
                    the warning string for this window.                    
                </return>
                <see>
                    java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="getWarningString" type="String" line="1102"/>
            <method name="setWarningString" type="void" line="1105">
                <declaration name="sm" type="SecurityManager" line="1107"/>
                <scope line="1108">
                    <scope line="1109"/>
                </scope>
            </method>
            <javadoc line="1114">
                Gets the &lt;code&gt;Locale&lt;/code&gt; object that is associated
                  with this window, if the locale has been set.
                  If no locale has been set, then the default locale
                  is returned.                
                <return>
                    the locale that is set for this window.                    
                </return>
                <see>
                    java.util.Locale                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getLocale" type="Locale" line="1123">
                <scope line="1124"/>
            </method>
            <javadoc line="1129">
                Gets the input context for this window. A window always has an input context,
                  which is shared by subcomponents unless they create and set their own.                
                <see>
                    Component#getInputContext                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getInputContext" type="InputContext" line="1135">
                <scope line="1136">
                    <scope line="1137"/>
                </scope>
            </method>
            <javadoc line="1143">
                Set the cursor image to a specified cursor.
                  &lt;p&gt;
                  The method may have no visual effect if the Java platform
                  implementation and/or the native system do not support
                  changing the mouse cursor shape.                
                <param>
                    cursor One of the constants defined
                      by the &lt;code&gt;Cursor&lt;/code&gt; class. If this parameter is null
                      then the cursor for this window will be set to the type
                      Cursor.DEFAULT_CURSOR.                    
                </param>
                <see>
                    Component#getCursor                    
                </see>
                <see>
                    Cursor                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setCursor" type="void" line="1157">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
                <scope line="1158"/>
            </method>
            <javadoc line="1163">
                Returns the owner of this window.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getOwner" type="Window" line="1167"/>
            <method name="getOwner_NoClientCode" type="Window" line="1170"/>
            <javadoc line="1173">
                Return an array containing all the windows this
                  window currently owns.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getOwnedWindows" type="Window[]" line="1178"/>
            <method name="getOwnedWindows_NoClientCode" type="Window[]" line="1181">
                <declaration name="realCopy" type="Window" line="1182"/>
                <scope line="1183">
                    <declaration name="fullSize" type="int" line="1184"/>
                    <declaration name="realSize" type="int" line="1185"/>
                    <declaration name="fullCopy" type="Window" line="1186"/>
                    <scope line="1187">
                        <scope line="1189"/>
                    </scope>
                    <scope line="1193"/>
                    <scope line="1196"/>
                </scope>
            </method>
            <method name="isModalBlocked" type="boolean" line="1202"/>
            <method name="setModalBlocked" type="void" line="1205">
                <params>
                    <param name="blocker" type="Dialog"/>
                    <param name="blocked" type="boolean"/>
                    <param name="peerCall" type="boolean"/>
                </params>
                <scope line="1207">
                    <declaration name="peer" type="WindowPeer" line="1208"/>
                    <scope line="1209"/>
                </scope>
            </method>
            <method name="getModalBlocker" type="Dialog" line="1214"/>
            <method name="getAllWindows" type="IdentityArrayList&lt;Window&gt;" line="1217">
                <scope line="1218">
                    <declaration name="v" type="IdentityArrayList&amp;lt;Window&amp;gt;" line="1219"/>
                </scope>
            </method>
            <method name="getAllUnblockedWindows" type="IdentityArrayList&lt;Window&gt;" line="1224">
                <scope line="1225">
                    <declaration name="unblocked" type="IdentityArrayList&amp;lt;Window&amp;gt;" line="1226"/>
                    <scope line="1227">
                        <declaration name="w" type="Window" line="1228"/>
                        <scope line="1229"/>
                    </scope>
                </scope>
            </method>
            <method name="getWindows" type="Window[]" line="1236">
                <params>
                    <param name="appContext" type="AppContext"/>
                </params>
                <scope line="1237">
                    <declaration name="realCopy" type="Window" line="1238"/>
                    <declaration name="windowList" type="Vector&amp;lt;WeakReference&amp;lt;Window&amp;gt;&amp;gt;" line="1239"/>
                    <scope line="1240">
                        <declaration name="fullSize" type="int" line="1241"/>
                        <declaration name="realSize" type="int" line="1242"/>
                        <declaration name="fullCopy" type="Window" line="1243"/>
                        <scope line="1244">
                            <declaration name="w" type="Window" line="1245"/>
                            <scope line="1246"/>
                        </scope>
                        <scope line="1250"/>
                        <scope line="1253"/>
                    </scope>
                    <scope line="1257"/>
                </scope>
            </method>
            <javadoc line="1263">
                Returns an array of all {@code Window}s, both owned and ownerless,
                  created by this application.
                  If called from an applet, the array includes only the {@code Window}s
                  accessible by that applet.
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; this method may return system created windows, such
                  as a print dialog. Applications should not assume the existence of
                  these dialogs, nor should an application assume anything about these
                  dialogs such as component positions, &lt;code&gt;LayoutManager&lt;/code&gt;s
                  or serialization.                
                <see>
                    Frame#getFrames                    
                </see>
                <see>
                    Window#getOwnerlessWindows                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getWindows" type="Window[]" line="1278"/>
            <javadoc line="1281">
                Returns an array of all {@code Window}s created by this application
                  that have no owner. They include {@code Frame}s and ownerless{@code Dialog}s and {@code Window}s.
                  If called from an applet, the array includes only the {@code Window}s
                  accessible by that applet.
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; this method may return system created windows, such
                  as a print dialog. Applications should not assume the existence of
                  these dialogs, nor should an application assume anything about these
                  dialogs such as component positions, &lt;code&gt;LayoutManager&lt;/code&gt;s
                  or serialization.                
                <see>
                    Frame#getFrames                    
                </see>
                <see>
                    Window#getWindows()                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getOwnerlessWindows" type="Window[]" line="1296">
                <declaration name="allWindows" type="Window[]" line="1297"/>
                <declaration name="ownerlessCount" type="int" line="1298"/>
                <scope line="1299">
                    <scope line="1300"/>
                </scope>
                <declaration name="ownerless" type="Window[]" line="1304"/>
                <declaration name="c" type="int" line="1305"/>
                <scope line="1306">
                    <scope line="1307"/>
                </scope>
            </method>
            <method name="getDocumentRoot" type="Window" line="1313">
                <scope line="1314">
                    <declaration name="w" type="Window" line="1315"/>
                    <scope line="1316"/>
                </scope>
            </method>
            <javadoc line="1322">
                Specifies the modal exclusion type for this window. If a window is modal
                  excluded, it is not blocked by some modal dialogs. See {@link java.awt.Dialog.ModalExclusionType Dialog.ModalExclusionType} for
                  possible modal exclusion types.
                  &lt;p&gt;
                  If the given type is not supported, &lt;code&gt;NO_EXCLUDE&lt;/code&gt; is used.
                  &lt;p&gt;
                  Note: changing the modal exclusion type for a visible window may have no
                  effect until it is hidden and then shown again.                
                <param>
                    exclusionType the modal exclusion type for this window; a &lt;code&gt;null&lt;/code&gt;
                      value is equivivalent to {@link Dialog.ModalExclusionType#NO_EXCLUDENO_EXCLUDE}                    
                </param>
                <throws>
                    SecurityException if the calling thread does not have permission
                      to set the modal exclusion property to the window with the given
                      &lt;code&gt;exclusionType&lt;/code&gt;                    
                </throws>
                <see>
                    java.awt.Dialog.ModalExclusionType                    
                </see>
                <see>
                    java.awt.Window#getModalExclusionType                    
                </see>
                <see>
                    java.awt.Toolkit#isModalExclusionTypeSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setModalExclusionType" type="void" line="1341">
                <params>
                    <param name="exclusionType" type="Dialog.ModalExclusionType"/>
                </params>
                <scope line="1342"/>
                <scope line="1345"/>
                <scope line="1348"/>
                <scope line="1351">
                    <declaration name="sm" type="SecurityManager" line="1352"/>
                    <scope line="1353"/>
                </scope>
            </method>
            <javadoc line="1359">
                Returns the modal exclusion type of this window.                
                <return>
                    the modal exclusion type of this window                    
                </return>
                <see>
                    java.awt.Dialog.ModalExclusionType                    
                </see>
                <see>
                    java.awt.Window#setModalExclusionType                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getModalExclusionType" type="Dialog.ModalExclusionType" line="1366"/>
            <method name="isModalExcluded" type="boolean" line="1369">
                <params>
                    <param name="exclusionType" type="Dialog.ModalExclusionType"/>
                </params>
                <scope line="1370"/>
                <declaration name="owner" type="Window" line="1373"/>
            </method>
            <method name="updateChildrenBlocking" type="void" line="1376">
                <declaration name="childHierarchy" type="Vector&amp;lt;Window&amp;gt;" line="1377"/>
                <declaration name="ownedWindows" type="Window[]" line="1378"/>
                <scope line="1379"/>
                <declaration name="k" type="int" line="1382"/>
                <scope line="1383">
                    <declaration name="w" type="Window" line="1384"/>
                    <scope line="1385">
                        <scope line="1386">
                            <declaration name="blocker" type="Dialog" line="1387"/>
                        </scope>
                        <declaration name="wOwned" type="Window[]" line="1391"/>
                        <scope line="1392"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1399">
                Adds the specified window listener to receive window events from
                  this window.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the window listener                    
                </param>
                <see>
                    #removeWindowListener                    
                </see>
                <see>
                    #getWindowListeners                    
                </see>
            </javadoc>
            <method name="addWindowListener" type="void" line="1409">
                <params>
                    <param name="l" type="WindowListener"/>
                </params>
                <scope line="1410"/>
            </method>
            <javadoc line="1416">
                Adds the specified window state listener to receive window
                  events from this window.  If &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the window state listener                    
                </param>
                <see>
                    #removeWindowStateListener                    
                </see>
                <see>
                    #getWindowStateListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addWindowStateListener" type="void" line="1427">
                <params>
                    <param name="l" type="WindowStateListener"/>
                </params>
                <scope line="1428"/>
            </method>
            <javadoc line="1434">
                Adds the specified window focus listener to receive window events
                  from this window.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the window focus listener                    
                </param>
                <see>
                    #removeWindowFocusListener                    
                </see>
                <see>
                    #getWindowFocusListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addWindowFocusListener" type="void" line="1445">
                <params>
                    <param name="l" type="WindowFocusListener"/>
                </params>
                <scope line="1446"/>
            </method>
            <javadoc line="1452">
                Removes the specified window listener so that it no longer
                  receives window events from this window.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the window listener                    
                </param>
                <see>
                    #addWindowListener                    
                </see>
                <see>
                    #getWindowListeners                    
                </see>
            </javadoc>
            <method name="removeWindowListener" type="void" line="1462">
                <params>
                    <param name="l" type="WindowListener"/>
                </params>
                <scope line="1463"/>
            </method>
            <javadoc line="1468">
                Removes the specified window state listener so that it no
                  longer receives window events from this window.  If
                  &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no exception is thrown and
                  no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the window state listener                    
                </param>
                <see>
                    #addWindowStateListener                    
                </see>
                <see>
                    #getWindowStateListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="removeWindowStateListener" type="void" line="1480">
                <params>
                    <param name="l" type="WindowStateListener"/>
                </params>
                <scope line="1481"/>
            </method>
            <javadoc line="1486">
                Removes the specified window focus listener so that it no longer
                  receives window events from this window.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the window focus listener                    
                </param>
                <see>
                    #addWindowFocusListener                    
                </see>
                <see>
                    #getWindowFocusListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="removeWindowFocusListener" type="void" line="1497">
                <params>
                    <param name="l" type="WindowFocusListener"/>
                </params>
                <scope line="1498"/>
            </method>
            <javadoc line="1503">
                Returns an array of all the window listeners
                  registered on this window.                
                <return>
                    all of this window&apos;s &lt;code&gt;WindowListener&lt;/code&gt;s
                      or an empty array if no window
                      listeners are currently registered                    
                </return>
                <see>
                    #addWindowListener                    
                </see>
                <see>
                    #removeWindowListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getWindowListeners" type="WindowListener[]" line="1513"/>
            <javadoc line="1516">
                Returns an array of all the window focus listeners
                  registered on this window.                
                <return>
                    all of this window&apos;s &lt;code&gt;WindowFocusListener&lt;/code&gt;s
                      or an empty array if no window focus
                      listeners are currently registered                    
                </return>
                <see>
                    #addWindowFocusListener                    
                </see>
                <see>
                    #removeWindowFocusListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getWindowFocusListeners" type="WindowFocusListener[]" line="1526"/>
            <javadoc line="1529">
                Returns an array of all the window state listeners
                  registered on this window.                
                <return>
                    all of this window&apos;s &lt;code&gt;WindowStateListener&lt;/code&gt;s
                      or an empty array if no window state
                      listeners are currently registered                    
                </return>
                <see>
                    #addWindowStateListener                    
                </see>
                <see>
                    #removeWindowStateListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getWindowStateListeners" type="WindowStateListener[]" line="1539"/>
            <javadoc line="1542">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;Window&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;Window&lt;/code&gt; &lt;code&gt;w&lt;/code&gt;
                  for its window listeners with the following code:
                  &lt;pre&gt;WindowListener[] wls = (WindowListener[])(w.getListeners(WindowListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this window,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <exception>
                    NullPointerException if {@code listenerType} is {@code null}                    
                </exception>
                <see>
                    #getWindowListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="1571">
                <params>
                    <param name="listenerType" type="Class&lt;T&gt;"/>
                </params>
                <declaration name="l" type="EventListener" line="1572"/>
                <scope line="1573"/>
                <scope line="1576"/>
                <scope line="1579"/>
                <scope line="1582"/>
            </method>
            <method name="eventEnabled" type="boolean" line="1587">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="1596"/>
                <scope line="1602"/>
                <scope line="1607"/>
            </method>
            <javadoc line="1616">
                Processes events on this window. If the event is an
                  &lt;code&gt;WindowEvent&lt;/code&gt;, it invokes the
                  &lt;code&gt;processWindowEvent&lt;/code&gt; method, else it invokes its
                  superclass&apos;s &lt;code&gt;processEvent&lt;/code&gt;.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
            </javadoc>
            <method name="processEvent" type="void" line="1626">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="1627"/>
            </method>
            <javadoc line="1651">
                Processes window events occurring on this window by
                  dispatching them to any registered WindowListener objects.
                  NOTE: This method will not be called unless window events
                  are enabled for this component; this happens when one of the
                  following occurs:
                  &lt;ul&gt;
                  &lt;li&gt;A WindowListener object is registered via
                  &lt;code&gt;addWindowListener&lt;/code&gt;
                  &lt;li&gt;Window events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the window event                    
                </param>
                <see>
                    Component#enableEvents                    
                </see>
            </javadoc>
            <method name="processWindowEvent" type="void" line="1668">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <declaration name="listener" type="WindowListener" line="1669"/>
                <scope line="1670"/>
            </method>
            <javadoc line="1698">
                Processes window focus event occuring on this window by
                  dispatching them to any registered WindowFocusListener objects.
                  NOTE: this method will not be called unless window focus events
                  are enabled for this window. This happens when one of the
                  following occurs:
                  &lt;ul&gt;
                  &lt;li&gt;a WindowFocusListener is registered via
                  &lt;code&gt;addWindowFocusListener&lt;/code&gt;
                  &lt;li&gt;Window focus events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the window focus event                    
                </param>
                <see>
                    Component#enableEvents                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="processWindowFocusEvent" type="void" line="1716">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <declaration name="listener" type="WindowFocusListener" line="1717"/>
                <scope line="1718"/>
            </method>
            <javadoc line="1731">
                Processes window state event occuring on this window by
                  dispatching them to any registered &lt;code&gt;WindowStateListener&lt;/code&gt;
                  objects.
                  NOTE: this method will not be called unless window state events
                  are enabled for this window.  This happens when one of the
                  following occurs:
                  &lt;ul&gt;
                  &lt;li&gt;a &lt;code&gt;WindowStateListener&lt;/code&gt; is registered via
                  &lt;code&gt;addWindowStateListener&lt;/code&gt;
                  &lt;li&gt;window state events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the window state event                    
                </param>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="processWindowStateEvent" type="void" line="1750">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <declaration name="listener" type="WindowStateListener" line="1751"/>
                <scope line="1752"/>
            </method>
            <javadoc line="1762">
                Implements a debugging hook -- checks to see if
                  the user has typed &lt;i&gt;control-shift-F1&lt;/i&gt;.  If so,
                  the list of child windows is dumped to &lt;code&gt;System.out&lt;/code&gt;.                
                <param>
                    e  the keyboard event                    
                </param>
            </javadoc>
            <method name="preProcessKeyEvent" type="void" line="1768">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <scope line="1769"/>
            </method>
            <method name="postProcessKeyEvent" type="void" line="1773">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
            </method>
            <javadoc line="1775">
                Sets whether this window should always be above other windows.  If
                  there are multiple always-on-top windows, their relative order is
                  unspecified and platform dependent.
                  &lt;p&gt;
                  If some other window is already always-on-top then the
                  relative order between these windows is unspecified (depends on
                  platform).  No window can be brought to be over the always-on-top
                  window except maybe another always-on-top window.
                  &lt;p&gt;
                  All windows owned by an always-on-top window inherit this state and
                  automatically become always-on-top.  If a window ceases to be
                  always-on-top, the windows that it owns will no longer be
                  always-on-top.  When an always-on-top window is sent {@link #toBacktoBack}, its always-on-top state is set to &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt; When this method is called on a window with a value of
                  &lt;code&gt;true&lt;/code&gt;, and the window is visible and the platform
                  supports always-on-top for this window, the window is immediately
                  brought forward, &quot;sticking&quot; it in the top-most position. If the
                  window isn`t currently visible, this method sets the always-on-top
                  state to &lt;code&gt;true&lt;/code&gt; but does not bring the window forward.
                  When the window is later shown, it will be always-on-top.
                  &lt;p&gt; When this method is called on a window with a value of
                  &lt;code&gt;false&lt;/code&gt; the always-on-top state is set to normal. The
                  window remains in the top-most position but it`s z-order can be
                  changed as for any other window.  Calling this method with a value
                  of &lt;code&gt;false&lt;/code&gt; on a window that has a normal state has no
                  effect.  Setting the always-on-top state to false has no effect on
                  the relative z-order of the windows if there are no other
                  always-on-top windows.
                  &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: some platforms might not support always-on-top
                  windows.  To detect if always-on-top windows are supported by the
                  current platform, use {@link Toolkit#isAlwaysOnTopSupported()} and{@link Window#isAlwaysOnTopSupported()}.  If always-on-top mode
                  isn&apos;t supported by the toolkit or for this window, calling this
                  method has no effect.
                  &lt;p&gt;
                  If a SecurityManager is installed, the calling thread must be
                  granted the AWTPermission &quot;setWindowAlwaysOnTop&quot; in
                  order to set the value of this property. If this
                  permission is not granted, this method will throw a
                  SecurityException, and the current value of the property will
                  be left unchanged.                
                <param>
                    alwaysOnTop true if the window should always be above other
                      windows                    
                </param>
                <throws>
                    SecurityException if the calling thread does not have
                      permission to set the value of always-on-top property                    
                </throws>
                <see>
                    #isAlwaysOnTop                    
                </see>
                <see>
                    #toFront                    
                </see>
                <see>
                    #toBack                    
                </see>
                <see>
                    AWTPermission                    
                </see>
                <see>
                    #isAlwaysOnTopSupported                    
                </see>
                <see>
                    Toolkit#isAlwaysOnTopSupported                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setAlwaysOnTop" type="void" line="1828">
                <params>
                    <param name="alwaysOnTop" type="boolean"/>
                </params>
                <declaration name="security" type="SecurityManager" line="1829"/>
                <scope line="1830"/>
                <declaration name="oldAlwaysOnTop" type="boolean" line="1833"/>
                <scope line="1834"/>
                <scope line="1838">
                    <scope line="1839">
                        <declaration name="peer" type="WindowPeer" line="1840"/>
                        <scope line="1841">
                            <scope line="1842"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1850">
                Returns whether the always-on-top mode is supported for this
                  window. Some platforms may not support always-on-top windows, some
                  may support only some kinds of top-level windows; for example,
                  a platform may not support always-on-top modal dialogs.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;, if the always-on-top mode is
                      supported by the toolkit and for this window,
                      &lt;code&gt;false&lt;/code&gt;, if always-on-top mode is not supported
                      for this window or toolkit doesn&apos;t support always-on-top windows.                    
                </return>
                <see>
                    #setAlwaysOnTop(boolean)                    
                </see>
                <see>
                    Toolkit#isAlwaysOnTopSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isAlwaysOnTopSupported" type="boolean" line="1863"/>
            <javadoc line="1866">
                Returns whether this window is an always-on-top window.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;, if the window is in always-on-top state,
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <see>
                    #setAlwaysOnTop                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isAlwaysOnTop" type="boolean" line="1873"/>
            <javadoc line="1876">
                Returns the child Component of this Window that has focus if this Window
                  is focused; returns null otherwise.                
                <return>
                    the child Component with focus, or null if this Window is not
                      focused                    
                </return>
                <see>
                    #getMostRecentFocusOwner                    
                </see>
                <see>
                    #isFocused                    
                </see>
            </javadoc>
            <method name="getFocusOwner" type="Component" line="1884"/>
            <javadoc line="1887">
                Returns the child Component of this Window that will receive the focus
                  when this Window is focused. If this Window is currently focused, this
                  method returns the same Component as &lt;code&gt;getFocusOwner()&lt;/code&gt;. If
                  this Window is not focused, then the child Component that most recently
                  requested focus will be returned. If no child Component has ever
                  requested focus, and this is a focusable Window, then this Window&apos;s
                  initial focusable Component is returned. If no child Component has ever
                  requested focus, and this is a non-focusable Window, null is returned.                
                <return>
                    the child Component that will receive focus when this Window is
                      focused                    
                </return>
                <see>
                    #getFocusOwner                    
                </see>
                <see>
                    #isFocused                    
                </see>
                <see>
                    #isFocusableWindow                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMostRecentFocusOwner" type="Component" line="1903">
                <scope line="1904"/>
                <scope line="1907">
                    <declaration name="mostRecent" type="Component" line="1908"/>
                    <scope line="1909"/>
                    <scope line="1912"/>
                </scope>
            </method>
            <javadoc line="1917">
                Returns whether this Window is active. Only a Frame or a Dialog may be
                  active. The native windowing system may denote the active Window or its
                  children with special decorations, such as a highlighted title bar. The
                  active Window is always either the focused Window, or the first Frame or
                  Dialog that is an owner of the focused Window.                
                <return>
                    whether this is the active Window.                    
                </return>
                <see>
                    #isFocused                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isActive" type="boolean" line="1927"/>
            <javadoc line="1930">
                Returns whether this Window is focused. If there exists a focus owner,
                  the focused Window is the Window that is, or contains, that focus owner.
                  If there is no focus owner, then no Window is focused.
                  &lt;p&gt;
                  If the focused Window is a Frame or a Dialog it is also the active
                  Window. Otherwise, the active Window is the first Frame or Dialog that
                  is an owner of the focused Window.                
                <return>
                    whether this is the focused Window.                    
                </return>
                <see>
                    #isActive                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFocused" type="boolean" line="1942"/>
            <javadoc line="1945">
                Gets a focus traversal key for this Window. (See &lt;code&gt;
                  setFocusTraversalKeys&lt;/code&gt; for a full description of each key.)
                  &lt;p&gt;
                  If the traversal key has not been explicitly set for this Window,
                  then this Window&apos;s parent&apos;s traversal key is returned. If the
                  traversal key has not been explicitly set for any of this Window&apos;s
                  ancestors, then the current KeyboardFocusManager&apos;s default traversal key
                  is returned.                
                <param>
                    id one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or
                      KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS                    
                </param>
                <return>
                    the AWTKeyStroke for the specified key                    
                </return>
                <see>
                    Container#setFocusTraversalKeys                    
                </see>
                <see>
                    KeyboardFocusManager#FORWARD_TRAVERSAL_KEYS                    
                </see>
                <see>
                    KeyboardFocusManager#BACKWARD_TRAVERSAL_KEYS                    
                </see>
                <see>
                    KeyboardFocusManager#UP_CYCLE_TRAVERSAL_KEYS                    
                </see>
                <see>
                    KeyboardFocusManager#DOWN_CYCLE_TRAVERSAL_KEYS                    
                </see>
                <throws>
                    IllegalArgumentException if id is not one of
                      KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
                      KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or
                      KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFocusTraversalKeys" type="Set&lt;AWTKeyStroke&gt;" line="1971">
                <params>
                    <param name="id" type="int"/>
                </params>
                <scope line="1972"/>
                <declaration name="keystrokes" type="Set" line="1975"/>
                <scope line="1976"/>
                <scope line="1979"/>
            </method>
            <javadoc line="1983">
                Does nothing because Windows must always be roots of a focus traversal
                  cycle. The passed-in value is ignored.                
                <param>
                    focusCycleRoot this value is ignored                    
                </param>
                <see>
                    #isFocusCycleRoot                    
                </see>
                <see>
                    Container#setFocusTraversalPolicy                    
                </see>
                <see>
                    Container#getFocusTraversalPolicy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFocusCycleRoot" type="void" line="1992">
                <params>
                    <param name="focusCycleRoot" type="boolean"/>
                </params>
            </method>
            <javadoc line="1994">
                Always returns &lt;code&gt;true&lt;/code&gt; because all Windows must be roots of a
                  focus traversal cycle.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;                    
                </return>
                <see>
                    #setFocusCycleRoot                    
                </see>
                <see>
                    Container#setFocusTraversalPolicy                    
                </see>
                <see>
                    Container#getFocusTraversalPolicy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFocusCycleRoot" type="boolean" line="2003"/>
            <javadoc line="2006">
                Always returns &lt;code&gt;null&lt;/code&gt; because Windows have no ancestors; they
                  represent the top of the Component hierarchy.                
                <return>
                    &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    Container#isFocusCycleRoot()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFocusCycleRootAncestor" type="Container" line="2013"/>
            <javadoc line="2016">
                Returns whether this Window can become the focused Window, that is,
                  whether this Window or any of its subcomponents can become the focus
                  owner. For a Frame or Dialog to be focusable, its focusable Window state
                  must be set to &lt;code&gt;true&lt;/code&gt;. For a Window which is not a Frame or
                  Dialog to be focusable, its focusable Window state must be set to
                  &lt;code&gt;true&lt;/code&gt;, its nearest owning Frame or Dialog must be
                  showing on the screen, and it must contain at least one Component in
                  its focus traversal cycle. If any of these conditions is not met, then
                  neither this Window nor any of its subcomponents can become the focus
                  owner.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this Window can be the focused Window;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <see>
                    #getFocusableWindowState                    
                </see>
                <see>
                    #setFocusableWindowState                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <see>
                    Component#isFocusable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFocusableWindow" type="boolean" line="2035">
                <scope line="2036"/>
                <scope line="2039"/>
                <scope line="2042"/>
                <scope line="2045">
                    <scope line="2046"/>
                </scope>
            </method>
            <javadoc line="2052">
                Returns whether this Window can become the focused Window if it meets
                  the other requirements outlined in &lt;code&gt;isFocusableWindow&lt;/code&gt;. If
                  this method returns &lt;code&gt;false&lt;/code&gt;, then
                  &lt;code&gt;isFocusableWindow&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; as well.
                  If this method returns &lt;code&gt;true&lt;/code&gt;, then
                  &lt;code&gt;isFocusableWindow&lt;/code&gt; may return &lt;code&gt;true&lt;/code&gt; or
                  &lt;code&gt;false&lt;/code&gt; depending upon the other requirements which must be
                  met in order for a Window to be focusable.
                  &lt;p&gt;
                  By default, all Windows have a focusable Window state of
                  &lt;code&gt;true&lt;/code&gt;.                
                <return>
                    whether this Window can be the focused Window                    
                </return>
                <see>
                    #isFocusableWindow                    
                </see>
                <see>
                    #setFocusableWindowState                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <see>
                    Component#setFocusable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFocusableWindowState" type="boolean" line="2071"/>
            <javadoc line="2074">
                Sets whether this Window can become the focused Window if it meets
                  the other requirements outlined in &lt;code&gt;isFocusableWindow&lt;/code&gt;. If
                  this Window&apos;s focusable Window state is set to &lt;code&gt;false&lt;/code&gt;, then
                  &lt;code&gt;isFocusableWindow&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;. If this
                  Window&apos;s focusable Window state is set to &lt;code&gt;true&lt;/code&gt;, then
                  &lt;code&gt;isFocusableWindow&lt;/code&gt; may return &lt;code&gt;true&lt;/code&gt; or
                  &lt;code&gt;false&lt;/code&gt; depending upon the other requirements which must be
                  met in order for a Window to be focusable.
                  &lt;p&gt;
                  Setting a Window&apos;s focusability state to &lt;code&gt;false&lt;/code&gt; is the
                  standard mechanism for an application to identify to the AWT a Window
                  which will be used as a floating palette or toolbar, and thus should be
                  a non-focusable Window.
                  Setting the focusability state on a visible &lt;code&gt;Window&lt;/code&gt;
                  can have a delayed effect on some platforms &amp;#151; the actual
                  change may happen only when the &lt;code&gt;Window&lt;/code&gt; becomes
                  hidden and then visible again.  To ensure consistent behavior
                  across platforms, set the &lt;code&gt;Window&lt;/code&gt;&apos;s focusable state
                  when the &lt;code&gt;Window&lt;/code&gt; is invisible and then show it.                
                <param>
                    focusableWindowState whether this Window can be the focused
                      Window                    
                </param>
                <see>
                    #isFocusableWindow                    
                </see>
                <see>
                    #getFocusableWindowState                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <see>
                    Component#setFocusable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFocusableWindowState" type="void" line="2102">
                <params>
                    <param name="focusableWindowState" type="boolean"/>
                </params>
                <declaration name="oldFocusableWindowState" type="boolean" line="2103"/>
                <scope line="2104"/>
                <declaration name="peer" type="WindowPeer" line="2108"/>
                <scope line="2109"/>
                <scope line="2113">
                    <scope line="2114">
                        <declaration name="toFocus" type="Component" line="2115"/>
                        <scope line="2116"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2123">
                Sets whether this window should receive focus on
                  subsequently being shown (with a call to {@link #setVisible setVisible(true)}),
                  or being moved to the front (with a call to {@link #toFront}).
                  &lt;p&gt;
                  Note that {@link #setVisible setVisible(true)} may be called indirectly
                  (e.g. when showing an owner of the window makes the window to be shown).{@link #toFront} may also be called indirectly (e.g. when{@link #setVisible setVisible(true)} is called on already visible window).
                  In all such cases this property takes effect as well.
                  &lt;p&gt;
                  The value of the property is not inherited by owned windows.                
                <param>
                    autoRequestFocus whether this window should be focused on
                      subsequently being shown or being moved to the front                    
                </param>
                <see>
                    #isAutoRequestFocus                    
                </see>
                <see>
                    #isFocusableWindow                    
                </see>
                <see>
                    #setVisible                    
                </see>
                <see>
                    #toFront                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setAutoRequestFocus" type="void" line="2141">
                <params>
                    <param name="autoRequestFocus" type="boolean"/>
                </params>
            </method>
            <javadoc line="2144">
                Returns whether this window should receive focus on subsequently being shown
                  (with a call to {@link #setVisible setVisible(true)}), or being moved to the front
                  (with a call to {@link #toFront}).
                  &lt;p&gt;
                  By default, the window has {@code autoRequestFocus} value of {@code true}.                
                <return>
                    {@code autoRequestFocus} value                    
                </return>
                <see>
                    #setAutoRequestFocus                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isAutoRequestFocus" type="boolean" line="2154"/>
            <javadoc line="2157">
                Adds a PropertyChangeListener to the listener list. The listener is
                  registered for all bound properties of this class, including the
                  following:
                  &lt;ul&gt;
                  &lt;li&gt;this Window&apos;s font (&quot;font&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s background color (&quot;background&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s foreground color (&quot;foreground&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s focusability (&quot;focusable&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s focus traversal keys enabled state
                  (&quot;focusTraversalKeysEnabled&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s Set of FORWARD_TRAVERSAL_KEYS
                  (&quot;forwardFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s Set of BACKWARD_TRAVERSAL_KEYS
                  (&quot;backwardFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s Set of UP_CYCLE_TRAVERSAL_KEYS
                  (&quot;upCycleFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s Set of DOWN_CYCLE_TRAVERSAL_KEYS
                  (&quot;downCycleFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s focus traversal policy (&quot;focusTraversalPolicy&quot;)
                  &lt;/li&gt;
                  &lt;li&gt;this Window&apos;s focusable Window state (&quot;focusableWindowState&quot;)
                  &lt;/li&gt;
                  &lt;li&gt;this Window&apos;s always-on-top state(&quot;alwaysOnTop&quot;)&lt;/li&gt;
                  &lt;/ul&gt;
                  Note that if this Window is inheriting a bound property, then no
                  event will be fired in response to a change in the inherited property.
                  &lt;p&gt;
                  If listener is null, no exception is thrown and no action is performed.                
                <param>
                    listener  the PropertyChangeListener to be added                    
                </param>
                <see>
                    Component#removePropertyChangeListener                    
                </see>
                <see>
                    #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="2190">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="2193">
                Adds a PropertyChangeListener to the listener list for a specific
                  property. The specified property may be user-defined, or one of the
                  following:
                  &lt;ul&gt;
                  &lt;li&gt;this Window&apos;s font (&quot;font&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s background color (&quot;background&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s foreground color (&quot;foreground&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s focusability (&quot;focusable&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s focus traversal keys enabled state
                  (&quot;focusTraversalKeysEnabled&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s Set of FORWARD_TRAVERSAL_KEYS
                  (&quot;forwardFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s Set of BACKWARD_TRAVERSAL_KEYS
                  (&quot;backwardFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s Set of UP_CYCLE_TRAVERSAL_KEYS
                  (&quot;upCycleFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s Set of DOWN_CYCLE_TRAVERSAL_KEYS
                  (&quot;downCycleFocusTraversalKeys&quot;)&lt;/li&gt;
                  &lt;li&gt;this Window&apos;s focus traversal policy (&quot;focusTraversalPolicy&quot;)
                  &lt;/li&gt;
                  &lt;li&gt;this Window&apos;s focusable Window state (&quot;focusableWindowState&quot;)
                  &lt;/li&gt;
                  &lt;li&gt;this Window&apos;s always-on-top state(&quot;alwaysOnTop&quot;)&lt;/li&gt;
                  &lt;/ul&gt;
                  Note that if this Window is inheriting a bound property, then no
                  event will be fired in response to a change in the inherited property.
                  &lt;p&gt;
                  If listener is null, no exception is thrown and no action is performed.                
                <param>
                    propertyName one of the property names listed above                    
                </param>
                <param>
                    listener the PropertyChangeListener to be added                    
                </param>
                <see>
                    #addPropertyChangeListener(java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    Component#removePropertyChangeListener                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="2227">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="2230">
                Indicates if this container is a validate root.
                  &lt;p&gt;{@code Window} objects are the validate roots, and, therefore, they
                  override this method to return {@code true}.                
                <return>
                    {@code true}                    
                </return>
                <since>
                    1.7                    
                </since>
                <see>
                    java.awt.Container#isValidateRoot                    
                </see>
            </javadoc>
            <method name="isValidateRoot" type="boolean" line="2238"/>
            <javadoc line="2241">
                Dispatches an event to this window or one of its sub components.                
                <param>
                    e the event                    
                </param>
            </javadoc>
            <method name="dispatchEventImpl" type="void" line="2245">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="2246"/>
            </method>
            <javadoc line="2252">
                @deprecated As of JDK version 1.1
                  replaced by &lt;code&gt;dispatchEvent(AWTEvent)&lt;/code&gt;.                
            </javadoc>
            <method name="postEvent" type="boolean" line="2256">
                <params>
                    <param name="e" type="Event"/>
                </params>
                <scope line="2257"/>
            </method>
            <javadoc line="2263">
                Checks if this Window is showing on screen.                
                <see>
                    Component#setVisible                    
                </see>
            </javadoc>
            <method name="isShowing" type="boolean" line="2267"/>
            <javadoc line="2270">
                @deprecated As of J2SE 1.4, replaced by{@link Component#applyComponentOrientation Component.applyComponentOrientation}.                
            </javadoc>
            <method name="applyResourceBundle" type="void" line="2273">
                <params>
                    <param name="rb" type="ResourceBundle"/>
                </params>
            </method>
            <javadoc line="2276">
                @deprecated As of J2SE 1.4, replaced by{@link Component#applyComponentOrientation Component.applyComponentOrientation}.                
            </javadoc>
            <method name="applyResourceBundle" type="void" line="2279">
                <params>
                    <param name="rbName" type="String"/>
                </params>
            </method>
            <method name="addOwnedWindow" type="void" line="2282">
                <params>
                    <param name="weakWindow" type="WeakReference"/>
                </params>
                <scope line="2283">
                    <scope line="2284">
                        <scope line="2285"/>
                    </scope>
                </scope>
            </method>
            <method name="removeOwnedWindow" type="void" line="2291">
                <params>
                    <param name="weakWindow" type="WeakReference"/>
                </params>
                <scope line="2292"/>
            </method>
            <method name="connectOwnedWindow" type="void" line="2296">
                <params>
                    <param name="child" type="Window"/>
                </params>
            </method>
            <method name="addToWindowList" type="void" line="2300">
                <scope line="2301">
                    <declaration name="windowList" type="Vector&amp;lt;WeakReference&amp;lt;Window&amp;gt;&amp;gt;" line="2302"/>
                    <scope line="2303"/>
                </scope>
            </method>
            <method name="removeFromWindowList" type="void" line="2310">
                <params>
                    <param name="context" type="AppContext"/>
                    <param name="weakThis" type="WeakReference"/>
                </params>
                <scope line="2311">
                    <declaration name="windowList" type="Vector&amp;lt;WeakReference&amp;lt;Window&amp;gt;&amp;gt;" line="2312"/>
                    <scope line="2313"/>
                </scope>
            </method>
            <method name="removeFromWindowList" type="void" line="2318"/>
            <declaration name="type" type="Type" line="2321"/>
            <javadoc line="2321">
                Window type.
                  Synchronization: ObjectLock                
            </javadoc>
            <javadoc line="2326">
                Sets the type of the window.
                  This method can only be called while the window is not displayable.                
                <throws>
                    IllegalComponentStateException if the window
                      is displayable.                    
                </throws>
                <throws>
                    IllegalArgumentException if the type is {@code null}                    
                </throws>
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setType" type="void" line="2336">
                <params>
                    <param name="type" type="Type"/>
                </params>
                <scope line="2337"/>
                <scope line="2340">
                    <scope line="2341"/>
                    <scope line="2344"/>
                </scope>
            </method>
            <javadoc line="2349">
                Returns the type of the window.                
                <see>
                    #setType                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getType" type="Type" line="2354">
                <scope line="2355"/>
            </method>
            <declaration name="windowSerializedDataVersion" type="int" line="2359"/>
            <javadoc line="2359">
                The window serialized data version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="2364">
                Writes default serializable fields to stream.  Writes
                  a list of serializable &lt;code&gt;WindowListener&lt;/code&gt;s and
                  &lt;code&gt;WindowFocusListener&lt;/code&gt;s as optional data.
                  Writes a list of child windows as optional data.
                  Writes a list of icon images as optional data                
                <param>
                    s the &lt;code&gt;ObjectOutputStream&lt;/code&gt; to write                    
                </param>
                <serialData>
                    &lt;code&gt;null&lt;/code&gt; terminated sequence of
                      0 or more pairs; the pair consists of a &lt;code&gt;String&lt;/code&gt;
                      and and &lt;code&gt;Object&lt;/code&gt;; the &lt;code&gt;String&lt;/code&gt;
                      indicates the type of object and is one of the following:
                      &lt;code&gt;windowListenerK&lt;/code&gt; indicating a
                      &lt;code&gt;WindowListener&lt;/code&gt; object;
                      &lt;code&gt;windowFocusWindowK&lt;/code&gt; indicating a
                      &lt;code&gt;WindowFocusListener&lt;/code&gt; object;
                      &lt;code&gt;ownedWindowK&lt;/code&gt; indicating a child
                      &lt;code&gt;Window&lt;/code&gt; object                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(java.io.ObjectOutputStream,java.lang.String,java.util.EventListener)                    
                </see>
                <see>
                    Component#windowListenerK                    
                </see>
                <see>
                    Component#windowFocusListenerK                    
                </see>
                <see>
                    Component#ownedWindowK                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="2387">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="2388"/>
                <scope line="2399">
                    <scope line="2400">
                        <declaration name="child" type="Window" line="2401"/>
                        <scope line="2402"/>
                    </scope>
                </scope>
                <scope line="2409">
                    <scope line="2410">
                        <scope line="2411"/>
                    </scope>
                </scope>
            </method>
            <method name="initDeserializedWindow" type="void" line="2418"/>
            <method name="deserializeResources" type="void" line="2428">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="2430">
                    <scope line="2431">
                        <scope line="2432"/>
                    </scope>
                </scope>
                <declaration name="keyOrNull" type="Object" line="2438"/>
                <scope line="2439">
                    <declaration name="key" type="String" line="2440"/>
                    <scope line="2441"/>
                    <scope line="2444"/>
                    <scope line="2447"/>
                </scope>
                <scope line="2452">
                    <scope line="2453">
                        <declaration name="key" type="String" line="2454"/>
                    </scope>
                    <declaration name="obj" type="Object" line="2458"/>
                    <scope line="2460">
                        <scope line="2461"/>
                    </scope>
                </scope>
                <scope line="2467"/>
            </method>
            <javadoc line="2470">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and an optional
                  list of listeners to receive various events fired by
                  the component; also reads a list of
                  (possibly &lt;code&gt;null&lt;/code&gt;) child windows.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the &lt;code&gt;ObjectInputStream&lt;/code&gt; to read                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #writeObject                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="2483">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="f" type="ObjectInputStream.GetField" line="2486"/>
                <declaration name="et" type="Dialog.ModalExclusionType" line="2493"/>
                <declaration name="aot" type="boolean" line="2495"/>
                <scope line="2496"/>
            </method>
            <javadoc line="2509">
                Gets the AccessibleContext associated with this Window.
                  For windows, the AccessibleContext takes the form of an
                  AccessibleAWTWindow.
                  A new AccessibleAWTWindow instance is created if necessary.                
                <return>
                    an AccessibleAWTWindow that serves as the
                      AccessibleContext of this Window                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="2518">
                <scope line="2519"/>
            </method>
            <class name="AccessibleAWTWindow" line="2524">
                <extends class="AccessibleAWTContainer"/>
                <javadoc line="2524">
                    This class implements accessibility support for the
                      &lt;code&gt;Window&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to window user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="2531"/>
                <javadoc line="2532">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="2538"/>
                <javadoc line="2541">
                    Get the state of this object.                    
                    <return>
                        an instance of AccessibleStateSet containing the current
                          state set of the object                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="2547">
                    <declaration name="states" type="AccessibleStateSet" line="2548"/>
                    <scope line="2549"/>
                </method>
            </class>
            <method name="setGraphicsConfiguration" type="void" line="2555">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="2556"/>
                <scope line="2559">
                    <scope line="2561"/>
                </scope>
            </method>
            <javadoc line="2566">
                Sets the location of the window relative to the specified
                  component according to the following scenarios.
                  &lt;p&gt;
                  The target screen mentioned below is a screen to which
                  the window should be placed after the setLocationRelativeTo
                  method is called.
                  &lt;ul&gt;
                  &lt;li&gt;If the component is {@code null}, or the {@codeGraphicsConfiguration} associated with this component is{@code null}, the window is placed in the center of the
                  screen. The center point can be obtained with the {@link GraphicsEnvironment#getCenterPointGraphicsEnvironment} method.
                  &lt;li&gt;If the component is not {@code null}, but it is not
                  currently showing, the window is placed in the center of
                  the target screen defined by the {@codeGraphicsConfiguration} associated with this component.
                  &lt;li&gt;If the component is not {@code null} and is shown on
                  the screen, then the window is located in such a way that
                  the center of the window coincides with the center of the
                  component.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If the screens configuration does not allow the window to
                  be moved from one screen to another, then the window is
                  only placed at the location determined according to the
                  above conditions and its {@code GraphicsConfiguration} is
                  not changed.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: If the lower edge of the window is out of the screen,
                  then the window is placed to the side of the &lt;code&gt;Component&lt;/code&gt;
                  that is closest to the center of the screen. So if the
                  component is on the right part of the screen, the window
                  is placed to its left, and vice versa.
                  &lt;p&gt;
                  If after the window location has been calculated, the upper,
                  left, or right edge of the window is out of the screen,
                  then the window is located in such a way that the upper,
                  left, or right edge of the window coincides with the
                  corresponding edge of the screen. If both left and right
                  edges of the window are out of the screen, the window is
                  placed at the left side of the screen. The similar placement
                  will occur if both top and bottom edges are out of the screen.
                  In that case, the window is placed at the top side of the screen.
                  &lt;p&gt;
                  The method changes the geometry-related data. Therefore,
                  the native windowing system may ignore such requests, or it may modify
                  the requested data, so that the {@code Window} object is placed and sized
                  in a way that corresponds closely to the desktop settings.                
                <param>
                    c  the component in relation to which the window&apos;s location
                      is determined                    
                </param>
                <see>
                    java.awt.GraphicsEnvironment#getCenterPoint                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setLocationRelativeTo" type="void" line="2616">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="dx" type="int" line="2617"/>
                <declaration name="gc" type="GraphicsConfiguration" line="2618"/>
                <declaration name="gcBounds" type="Rectangle" line="2619"/>
                <declaration name="windowSize" type="Dimension" line="2620"/>
                <declaration name="componentWindow" type="Window" line="2621"/>
                <scope line="2622">
                    <declaration name="ge" type="GraphicsEnvironment" line="2623"/>
                    <declaration name="centerPoint" type="Point" line="2626"/>
                </scope>
                <scope line="2630"/>
                <scope line="2636">
                    <declaration name="compSize" type="Dimension" line="2639"/>
                    <declaration name="compLocation" type="Point" line="2640"/>
                    <scope line="2643">
                        <scope line="2645"/>
                        <scope line="2648"/>
                    </scope>
                </scope>
                <scope line="2653"/>
                <scope line="2656"/>
                <scope line="2659"/>
                <scope line="2662"/>
            </method>
            <javadoc line="2667">
                Overridden from Component.  Top-level Windows should not propagate a
                  MouseWheelEvent beyond themselves into their owning Windows.                
            </javadoc>
            <method name="deliverMouseWheelToAncestor" type="void" line="2671">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
            </method>
            <javadoc line="2673">
                Overridden from Component.  Top-level Windows don&apos;t dispatch to ancestors                
            </javadoc>
            <method name="dispatchMouseWheelToAncestor" type="boolean" line="2676">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
            </method>
            <javadoc line="2679">
                Creates a new strategy for multi-buffering on this component.
                  Multi-buffering is useful for rendering performance.  This method
                  attempts to create the best strategy available with the number of
                  buffers supplied.  It will always create a &lt;code&gt;BufferStrategy&lt;/code&gt;
                  with that number of buffers.
                  A page-flipping strategy is attempted first, then a blitting strategy
                  using accelerated buffers.  Finally, an unaccelerated blitting
                  strategy is used.
                  &lt;p&gt;
                  Each time this method is called,
                  the existing buffer strategy for this component is discarded.                
                <param>
                    numBuffers number of buffers to create                    
                </param>
                <exception>
                    IllegalArgumentException if numBuffers is less than 1.                    
                </exception>
                <exception>
                    IllegalStateException if the component is not displayable                    
                </exception>
                <see>
                    #isDisplayable                    
                </see>
                <see>
                    #getBufferStrategy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createBufferStrategy" type="void" line="2698">
                <params>
                    <param name="numBuffers" type="int"/>
                </params>
            </method>
            <javadoc line="2701">
                Creates a new strategy for multi-buffering on this component with the
                  required buffer capabilities.  This is useful, for example, if only
                  accelerated memory or page flipping is desired (as specified by the
                  buffer capabilities).
                  &lt;p&gt;
                  Each time this method
                  is called, the existing buffer strategy for this component is discarded.                
                <param>
                    numBuffers number of buffers to create, including the front buffer                    
                </param>
                <param>
                    caps the required capabilities for creating the buffer strategy;
                      cannot be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <exception>
                    AWTException if the capabilities supplied could not be
                      supported or met; this may happen, for example, if there is not enough
                      accelerated memory currently available, or if page flipping is specified
                      but not possible.                    
                </exception>
                <exception>
                    IllegalArgumentException if numBuffers is less than 1, or if
                      caps is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    #getBufferStrategy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createBufferStrategy" type="void" line="2721">
                <params>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
            </method>
            <javadoc line="2724">
                Returns the &lt;code&gt;BufferStrategy&lt;/code&gt; used by this component.  This
                  method will return null if a &lt;code&gt;BufferStrategy&lt;/code&gt; has not yet
                  been created or has been disposed.                
                <return>
                    the buffer strategy used by this component                    
                </return>
                <see>
                    #createBufferStrategy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBufferStrategy" type="BufferStrategy" line="2732"/>
            <method name="getTemporaryLostComponent" type="Component" line="2735"/>
            <method name="setTemporaryLostComponent" type="Component" line="2738">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <declaration name="previousComp" type="Component" line="2739"/>
                <scope line="2740"/>
                <scope line="2743"/>
            </method>
            <javadoc line="2748">
                Checks whether this window can contain focus owner.
                  Verifies that it is focusable and as container it can container focus owner.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="canContainFocusOwner" type="boolean" line="2753">
                <params>
                    <param name="focusOwnerCandidate" type="Component"/>
                </params>
            </method>
            <declaration name="locationByPlatform" type="boolean" line="2756"/>
            <javadoc line="2757">
                Sets whether this Window should appear at the default location for the
                  native windowing system or at the current location (returned by
                  &lt;code&gt;getLocation&lt;/code&gt;) the next time the Window is made visible.
                  This behavior resembles a native window shown without programmatically
                  setting its location.  Most windowing systems cascade windows if their
                  locations are not explicitly set. The actual location is determined once the
                  window is shown on the screen.
                  &lt;p&gt;
                  This behavior can also be enabled by setting the System Property
                  &quot;java.awt.Window.locationByPlatform&quot; to &quot;true&quot;, though calls to this method
                  take precedence.
                  &lt;p&gt;
                  Calls to &lt;code&gt;setVisible&lt;/code&gt;, &lt;code&gt;setLocation&lt;/code&gt; and
                  &lt;code&gt;setBounds&lt;/code&gt; after calling &lt;code&gt;setLocationByPlatform&lt;/code&gt; clear
                  this property of the Window.
                  &lt;p&gt;
                  For example, after the following code is executed:
                  &lt;pre&gt;&lt;blockquote&gt;
                  setLocationByPlatform(true);
                  setVisible(true);
                  boolean flag = isLocationByPlatform();
                  &lt;/blockquote&gt;&lt;/pre&gt;
                  The window will be shown at platform&apos;s default location and
                  &lt;code&gt;flag&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt;
                  In the following sample:
                  &lt;pre&gt;&lt;blockquote&gt;
                  setLocationByPlatform(true);
                  setLocation(10, 10);
                  boolean flag = isLocationByPlatform();
                  setVisible(true);
                  &lt;/blockquote&gt;&lt;/pre&gt;
                  The window will be shown at (10, 10) and &lt;code&gt;flag&lt;/code&gt; will be
                  &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    locationByPlatform &lt;code&gt;true&lt;/code&gt; if this Window should appear
                      at the default location, &lt;code&gt;false&lt;/code&gt; if at the current location                    
                </param>
                <throws>
                    &lt;code&gt;IllegalComponentStateException&lt;/code&gt; if the window
                      is showing on screen and locationByPlatform is &lt;code&gt;true&lt;/code&gt;.                    
                </throws>
                <see>
                    #setLocation                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <see>
                    #setVisible                    
                </see>
                <see>
                    #isLocationByPlatform                    
                </see>
                <see>
                    java.lang.System#getProperty(String)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setLocationByPlatform" type="void" line="2803">
                <params>
                    <param name="locationByPlatform" type="boolean"/>
                </params>
                <scope line="2804">
                    <scope line="2805"/>
                </scope>
            </method>
            <javadoc line="2811">
                Returns &lt;code&gt;true&lt;/code&gt; if this Window will appear at the default location
                  for the native windowing system the next time this Window is made visible.
                  This method always returns &lt;code&gt;false&lt;/code&gt; if the Window is showing on the
                  screen.                
                <return>
                    whether this Window will appear at the default location                    
                </return>
                <see>
                    #setLocationByPlatform                    
                </see>
                <see>
                    #isShowing                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isLocationByPlatform" type="boolean" line="2821">
                <scope line="2822"/>
            </method>
            <javadoc line="2826">
                {@inheritDoc}&lt;p&gt;
                  The {@code width} or {@code height} values
                  are automatically enlarged if either is less than
                  the minimum size as specified by previous call to{@code setMinimumSize}.
                  &lt;p&gt;
                  The method changes the geometry-related data. Therefore,
                  the native windowing system may ignore such requests, or it may modify
                  the requested data, so that the {@code Window} object is placed and sized
                  in a way that corresponds closely to the desktop settings.                
                <see>
                    #getBounds                    
                </see>
                <see>
                    #setLocation(int,int)                    
                </see>
                <see>
                    #setLocation(Point)                    
                </see>
                <see>
                    #setSize(int,int)                    
                </see>
                <see>
                    #setSize(Dimension)                    
                </see>
                <see>
                    #setMinimumSize                    
                </see>
                <see>
                    #setLocationByPlatform                    
                </see>
                <see>
                    #isLocationByPlatform                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBounds" type="void" line="2846">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="2847">
                    <scope line="2848"/>
                </scope>
            </method>
            <javadoc line="2854">
                {@inheritDoc}&lt;p&gt;
                  The {@code r.width} or {@code r.height} values
                  will be automatically enlarged if either is less than
                  the minimum size as specified by previous call to{@code setMinimumSize}.
                  &lt;p&gt;
                  The method changes the geometry-related data. Therefore,
                  the native windowing system may ignore such requests, or it may modify
                  the requested data, so that the {@code Window} object is placed and sized
                  in a way that corresponds closely to the desktop settings.                
                <see>
                    #getBounds                    
                </see>
                <see>
                    #setLocation(int,int)                    
                </see>
                <see>
                    #setLocation(Point)                    
                </see>
                <see>
                    #setSize(int,int)                    
                </see>
                <see>
                    #setSize(Dimension)                    
                </see>
                <see>
                    #setMinimumSize                    
                </see>
                <see>
                    #setLocationByPlatform                    
                </see>
                <see>
                    #isLocationByPlatform                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBounds" type="void" line="2874">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="2877">
                Determines whether this component will be displayed on the screen.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the component and all of its ancestors
                      until a toplevel window are visible, &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="isRecursivelyVisible" type="boolean" line="2882"/>
            <javadoc line="2885">
                Returns the opacity of the window.                
                <return>
                    the opacity of the window                    
                </return>
                <see>
                    Window#setOpacity(float)                    
                </see>
                <see>
                    GraphicsDevice.WindowTranslucency                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getOpacity" type="float" line="2892">
                <scope line="2893"/>
            </method>
            <javadoc line="2897">
                Sets the opacity of the window.
                  &lt;p&gt;
                  The opacity value is in the range [0..1]. Note that setting the opacity
                  level of 0 may or may not disable the mouse event handling on this
                  window. This is a platform-dependent behavior.
                  &lt;p&gt;
                  The following conditions must be met in order to set the opacity value
                  less than {@code 1.0f}:
                  &lt;ul&gt;
                  &lt;li&gt;The {@link GraphicsDevice.WindowTranslucency#TRANSLUCENT TRANSLUCENT}translucency must be supported by the underlying system
                  &lt;li&gt;The window must be undecorated (see {@link Frame#setUndecorated}and {@link Dialog#setUndecorated})
                  &lt;li&gt;The window must not be in full-screen mode (see {@link GraphicsDevice#setFullScreenWindow(Window)})
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If the requested opacity value is less than {@code 1.0f}, and any of the
                  above conditions are not met, the window opacity will not change,
                  and the {@code IllegalComponentStateException} will be thrown.
                  &lt;p&gt;
                  The translucency levels of individual pixels may also be effected by the
                  alpha component of their color (see {@link Window#setBackground(Color)}) and the
                  current shape of this window (see {@link #setShape(Shape)}).                
                <param>
                    opacity the opacity level to set to the window                    
                </param>
                <throws>
                    IllegalArgumentException if the opacity is out of the range
                      [0..1]                    
                </throws>
                <throws>
                    IllegalComponentStateException if the window is decorated and
                      the opacity is less than {@code 1.0f}                    
                </throws>
                <throws>
                    IllegalComponentStateException if the window is in full screen
                      mode, and the opacity is less than {@code 1.0f}                    
                </throws>
                <throws>
                    UnsupportedOperationException if the {@codeGraphicsDevice.WindowTranslucency#TRANSLUCENT TRANSLUCENT}translucency is not supported and the opacity is less than{@code 1.0f}                    
                </throws>
                <see>
                    Window#getOpacity                    
                </see>
                <see>
                    Window#setBackground(Color)                    
                </see>
                <see>
                    Window#setShape(Shape)                    
                </see>
                <see>
                    Frame#isUndecorated                    
                </see>
                <see>
                    Dialog#isUndecorated                    
                </see>
                <see>
                    GraphicsDevice.WindowTranslucency                    
                </see>
                <see>
                    GraphicsDevice#isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setOpacity" type="void" line="2936">
                <params>
                    <param name="opacity" type="float"/>
                </params>
                <scope line="2937">
                    <scope line="2938"/>
                    <scope line="2941">
                        <declaration name="gc" type="GraphicsConfiguration" line="2942"/>
                        <declaration name="gd" type="GraphicsDevice" line="2943"/>
                        <scope line="2944"/>
                        <scope line="2947"/>
                    </scope>
                    <declaration name="peer" type="WindowPeer" line="2952"/>
                    <scope line="2953"/>
                </scope>
            </method>
            <javadoc line="2958">
                Returns the shape of the window.
                  The value returned by this method may not be the same as
                  previously set with {@code setShape(shape)}, but it is guaranteed
                  to represent the same shape.                
                <return>
                    the shape of the window or {@code null} if no
                      shape is specified for the window                    
                </return>
                <see>
                    Window#setShape(Shape)                    
                </see>
                <see>
                    GraphicsDevice.WindowTranslucency                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getShape" type="Shape" line="2969">
                <scope line="2970"/>
            </method>
            <javadoc line="2974">
                Sets the shape of the window.
                  &lt;p&gt;
                  Setting a shape cuts off some parts of the window. Only the parts that
                  belong to the given {@link Shape} remain visible and clickable. If
                  the shape argument is {@code null}, this method restores the default
                  shape, making the window rectangular on most platforms.
                  &lt;p&gt;
                  The following conditions must be met to set a non-null shape:
                  &lt;ul&gt;
                  &lt;li&gt;The {@link GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSPARENTPERPIXEL_TRANSPARENT} translucency must be supported by the
                  underlying system
                  &lt;li&gt;The window must be undecorated (see {@link Frame#setUndecorated}and {@link Dialog#setUndecorated})
                  &lt;li&gt;The window must not be in full-screen mode (see {@link GraphicsDevice#setFullScreenWindow(Window)})
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If the requested shape is not {@code null}, and any of the above
                  conditions are not met, the shape of this window will not change,
                  and either the {@code UnsupportedOperationException} or {@codeIllegalComponentStateException} will be thrown.
                  &lt;p&gt;
                  The tranlucency levels of individual pixels may also be effected by the
                  alpha component of their color (see {@link Window#setBackground(Color)}) and the
                  opacity value (see {@link #setOpacity(float)}). See {@link GraphicsDevice.WindowTranslucency} for more details.                
                <param>
                    shape the shape to set to the window                    
                </param>
                <throws>
                    IllegalComponentStateException if the shape is not {@codenull} and the window is decorated                    
                </throws>
                <throws>
                    IllegalComponentStateException if the shape is not {@codenull} and the window is in full-screen mode                    
                </throws>
                <throws>
                    UnsupportedOperationException if the shape is not {@codenull} and {@link GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSPARENTPERPIXEL_TRANSPARENT} translucency is not supported                    
                </throws>
                <see>
                    Window#getShape()                    
                </see>
                <see>
                    Window#setBackground(Color)                    
                </see>
                <see>
                    Window#setOpacity(float)                    
                </see>
                <see>
                    Frame#isUndecorated                    
                </see>
                <see>
                    Dialog#isUndecorated                    
                </see>
                <see>
                    GraphicsDevice.WindowTranslucency                    
                </see>
                <see>
                    GraphicsDevice#isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setShape" type="void" line="3010">
                <params>
                    <param name="shape" type="Shape"/>
                </params>
                <scope line="3011">
                    <scope line="3012">
                        <declaration name="gc" type="GraphicsConfiguration" line="3013"/>
                        <declaration name="gd" type="GraphicsDevice" line="3014"/>
                        <scope line="3015"/>
                        <scope line="3018"/>
                    </scope>
                    <declaration name="peer" type="WindowPeer" line="3023"/>
                    <scope line="3024"/>
                </scope>
            </method>
            <javadoc line="3029">
                Gets the background color of this window.
                  &lt;p&gt;
                  Note that the alpha component of the returned color indicates whether
                  the window is in the non-opaque (per-pixel translucent) mode.                
                <return>
                    this component&apos;s background color                    
                </return>
                <see>
                    Window#setBackground(Color)                    
                </see>
                <see>
                    Window#isOpaque                    
                </see>
                <see>
                    GraphicsDevice.WindowTranslucency                    
                </see>
            </javadoc>
            <method name="getBackground" type="Color" line="3039"/>
            <javadoc line="3042">
                Sets the background color of this window.
                  &lt;p&gt;
                  If the windowing system supports the {@link GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENT PERPIXEL_TRANSLUCENT}tranclucency, the alpha component of the given background color
                  may effect the mode of operation for this window: it indicates whether
                  this window must be opaque (alpha equals {@code 1.0f}) or per-pixel translucent
                  (alpha is less than {@code 1.0f}). If the given background color is{@code null}, the window is considered completely opaque.
                  &lt;p&gt;
                  All the following conditions must be met to enable the per-pixel
                  transparency mode for this window:
                  &lt;ul&gt;
                  &lt;li&gt;The {@link GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENTPERPIXEL_TRANSLUCENT} translucency must be supported by the graphics
                  device where this window is located
                  &lt;li&gt;The window must be undecorated (see {@link Frame#setUndecorated}and {@link Dialog#setUndecorated})
                  &lt;li&gt;The window must not be in full-screen mode (see {@link GraphicsDevice#setFullScreenWindow(Window)})
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If the alpha component of the requested background color is less than{@code 1.0f}, and any of the above conditions are not met, the background
                  color of this window will not change, the alpha component of the given
                  background color will not affect the mode of operation for this window,
                  and either the {@code UnsupportedOperationException} or {@codeIllegalComponentStateException} will be thrown.
                  &lt;p&gt;
                  When the window is per-pixel translucent, the drawing sub-system
                  respects the alpha value of each individual pixel. If a pixel gets
                  painted with the alpha color component equal to zero, it becomes
                  visually transparent. If the alpha of the pixel is equal to 1.0f, the
                  pixel is fully opaque. Interim values of the alpha color component make
                  the pixel semi-transparent. In this mode, the background of the window
                  gets painted with the alpha value of the given background color. If the
                  alpha value of the argument of this method is equal to {@code 0}, the
                  background is not painted at all.
                  &lt;p&gt;
                  The actual level of translucency of a given pixel also depends on window
                  opacity (see {@link #setOpacity(float)}), as well as the current shape of
                  this window (see {@link #setShape(Shape)}).
                  &lt;p&gt;
                  Note that painting a pixel with the alpha value of {@code 0} may or may
                  not disable the mouse event handling on this pixel. This is a
                  platform-dependent behavior. To make sure the mouse events do not get
                  dispatched to a particular pixel, the pixel must be excluded from the
                  shape of the window.
                  &lt;p&gt;
                  Enabling the per-pixel translucency mode may change the graphics
                  configuration of this window due to the native platform requirements.                
                <param>
                    bgColor the color to become this window&apos;s background color.                    
                </param>
                <throws>
                    IllegalComponentStateException if the alpha value of the given
                      background color is less than {@code 1.0f} and the window is decorated                    
                </throws>
                <throws>
                    IllegalComponentStateException if the alpha value of the given
                      background color is less than {@code 1.0f} and the window is in
                      full-screen mode                    
                </throws>
                <throws>
                    UnsupportedOperationException if the alpha value of the given
                      background color is less than {@code 1.0f} and {@link GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENTPERPIXEL_TRANSLUCENT} translucency is not supported                    
                </throws>
                <see>
                    Window#getBackground                    
                </see>
                <see>
                    Window#isOpaque                    
                </see>
                <see>
                    Window#setOpacity(float)                    
                </see>
                <see>
                    Window#setShape(Shape)                    
                </see>
                <see>
                    Frame#isUndecorated                    
                </see>
                <see>
                    Dialog#isUndecorated                    
                </see>
                <see>
                    GraphicsDevice.WindowTranslucency                    
                </see>
                <see>
                    GraphicsDevice#isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency)                    
                </see>
                <see>
                    GraphicsConfiguration#isTranslucencyCapable()                    
                </see>
            </javadoc>
            <method name="setBackground" type="void" line="3104">
                <params>
                    <param name="bgColor" type="Color"/>
                </params>
                <declaration name="oldBg" type="Color" line="3105"/>
                <scope line="3107"/>
                <declaration name="oldAlpha" type="int" line="3110"/>
                <declaration name="alpha" type="int" line="3111"/>
                <scope line="3112">
                    <declaration name="gc" type="GraphicsConfiguration" line="3113"/>
                    <declaration name="gd" type="GraphicsDevice" line="3114"/>
                    <scope line="3115"/>
                    <scope line="3118">
                        <declaration name="capableGC" type="GraphicsConfiguration" line="3119"/>
                        <scope line="3120"/>
                    </scope>
                </scope>
                <scope line="3127"/>
                <declaration name="peer" type="WindowPeer" line="3130"/>
                <scope line="3131"/>
            </method>
            <javadoc line="3135">
                Indicates if the window is currently opaque.
                  &lt;p&gt;
                  The method returns {@code false} if the background color of the window
                  is not {@code null} and the alpha component of the color is less than{@code 1.0f}. The method returns {@code true} otherwise.                
                <return>
                    {@code true} if the window is opaque, {@code false} otherwise                    
                </return>
                <see>
                    Window#getBackground                    
                </see>
                <see>
                    Window#setBackground(Color)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isOpaque" type="boolean" line="3145">
                <declaration name="bg" type="Color" line="3146"/>
            </method>
            <method name="updateWindow" type="void" line="3149">
                <scope line="3150">
                    <declaration name="peer" type="WindowPeer" line="3151"/>
                    <scope line="3152"/>
                </scope>
            </method>
            <javadoc line="3157">
                {@inheritDoc}                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="paint" type="void" line="3161">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="3162">
                    <declaration name="gg" type="Graphics" line="3163"/>
                    <scope line="3164">
                        <scope line="3165"/>
                    </scope>
                    <scope line="3171"/>
                </scope>
            </method>
            <method name="setLayersOpaque" type="void" line="3177">
                <params>
                    <param name="component" type="Component"/>
                    <param name="isOpaque" type="boolean"/>
                </params>
                <scope line="3178">
                    <declaration name="rpc" type="javax.swing.RootPaneContainer" line="3179"/>
                    <declaration name="root" type="javax.swing.JRootPane" line="3180"/>
                    <declaration name="lp" type="javax.swing.JLayeredPane" line="3181"/>
                    <declaration name="c" type="Container" line="3182"/>
                    <declaration name="content" type="javax.swing.JComponent" line="3183"/>
                    <scope line="3186">
                        <declaration name="numChildren" type="int" line="3188"/>
                        <scope line="3189">
                            <declaration name="child" type="Component" line="3190"/>
                            <scope line="3191"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getContainer" type="Container" line="3198"/>
            <javadoc line="3201">
                Applies the shape to the component                
                <param>
                    shape Shape to be applied to the component                    
                </param>
            </javadoc>
            <method name="applyCompoundShape" type="void" line="3205">
                <params>
                    <param name="shape" type="Region"/>
                </params>
            </method>
            <method name="applyCurrentShape" type="void" line="3207"/>
            <method name="mixOnReshaping" type="void" line="3209"/>
            <method name="getLocationOnWindow" type="Point" line="3211"/>
            <javadoc line="3214">
                Limit the given double value with the given range.                
            </javadoc>
            <method name="limit" type="double" line="3217">
                <params>
                    <param name="value" type="double"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
            </method>
            <javadoc line="3222">
                Calculate the position of the security warning.
                  This method gets the window location/size as reported by the native
                  system since the locally cached values may represent outdated data.
                  The method is used from the native code, or via AWTAccessor.
                  NOTE: this method is invoked on the toolkit thread, and therefore is not
                  supposed to become public/user-overridable.                
            </javadoc>
            <method name="calculateSecurityWarningPosition" type="Point2D" line="3230">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <declaration name="wx" type="double" line="3231"/>
                <declaration name="wy" type="double" line="3232"/>
                <declaration name="graphicsConfig" type="GraphicsConfiguration" line="3235"/>
                <declaration name="screenBounds" type="Rectangle" line="3236"/>
                <declaration name="screenInsets" type="Insets" line="3237"/>
            </method>
            <scope line="3242">
                <anonymous_class line="3243">
                    <method name="getOpacity" type="float" line="3244">
                        <params>
                            <param name="window" type="Window"/>
                        </params>
                    </method>
                    <method name="setOpacity" type="void" line="3247">
                        <params>
                            <param name="window" type="Window"/>
                            <param name="opacity" type="float"/>
                        </params>
                    </method>
                    <method name="getShape" type="Shape" line="3250">
                        <params>
                            <param name="window" type="Window"/>
                        </params>
                    </method>
                    <method name="setShape" type="void" line="3253">
                        <params>
                            <param name="window" type="Window"/>
                            <param name="shape" type="Shape"/>
                        </params>
                    </method>
                    <method name="setOpaque" type="void" line="3256">
                        <params>
                            <param name="window" type="Window"/>
                            <param name="opaque" type="boolean"/>
                        </params>
                        <declaration name="bg" type="Color" line="3257"/>
                        <scope line="3258"/>
                    </method>
                    <method name="updateWindow" type="void" line="3263">
                        <params>
                            <param name="window" type="Window"/>
                        </params>
                    </method>
                    <method name="getSecurityWarningSize" type="Dimension" line="3266">
                        <params>
                            <param name="window" type="Window"/>
                        </params>
                    </method>
                    <method name="setSecurityWarningSize" type="void" line="3269">
                        <params>
                            <param name="window" type="Window"/>
                            <param name="width" type="int"/>
                            <param name="height" type="int"/>
                        </params>
                    </method>
                    <method name="setSecurityWarningPosition" type="void" line="3273">
                        <params>
                            <param name="window" type="Window"/>
                            <param name="point" type="Point2D"/>
                            <param name="alignmentX" type="float"/>
                            <param name="alignmentY" type="float"/>
                        </params>
                        <scope line="3278">
                            <declaration name="peer" type="WindowPeer" line="3279"/>
                            <scope line="3280"/>
                        </scope>
                    </method>
                    <method name="calculateSecurityWarningPosition" type="Point2D" line="3285">
                        <params>
                            <param name="window" type="Window"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                    <method name="setLWRequestStatus" type="void" line="3288">
                        <params>
                            <param name="changed" type="Window"/>
                            <param name="status" type="boolean"/>
                        </params>
                    </method>
                    <method name="isAutoRequestFocus" type="boolean" line="3291">
                        <params>
                            <param name="w" type="Window"/>
                        </params>
                    </method>
                    <method name="isTrayIconWindow" type="boolean" line="3294">
                        <params>
                            <param name="w" type="Window"/>
                        </params>
                    </method>
                    <method name="setTrayIconWindow" type="void" line="3297">
                        <params>
                            <param name="w" type="Window"/>
                            <param name="isTrayIconWindow" type="boolean"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
            <method name="updateZOrder" type="void" line="3303"/>
        </class>
        <class name="FocusManager" line="3306">
            <implements interface="java.io.Serializable"/>
            <javadoc line="3306">
                This class is no longer used, but is maintained for Serialization
                  backward-compatibility.                
            </javadoc>
            <declaration name="focusRoot" type="Container" line="3311"/>
            <declaration name="focusOwner" type="Component" line="3312"/>
            <declaration name="serialVersionUID" type="long" line="3313"/>
        </class>
    </source>