<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.DialogPeer"/>
        <import package="java.awt.event"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="javax.accessibility"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.PeerEvent"/>
        <import package="sun.awt.util.IdentityArrayList"/>
        <import package="sun.awt.util.IdentityLinkedList"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="Dialog" line="17">
            <extends class="Window"/>
            <javadoc line="17">
                A Dialog is a top-level window with a title and a border
                  that is typically used to take some form of input from the user.
                  The size of the dialog includes any area designated for the
                  border.  The dimensions of the border area can be obtained
                  using the &lt;code&gt;getInsets&lt;/code&gt; method, however, since
                  these dimensions are platform-dependent, a valid insets
                  value cannot be obtained until the dialog is made displayable
                  by either calling &lt;code&gt;pack&lt;/code&gt; or &lt;code&gt;show&lt;/code&gt;.
                  Since the border area is included in the overall size of the
                  dialog, the border effectively obscures a portion of the dialog,
                  constraining the area available for rendering and/or displaying
                  subcomponents to the rectangle which has an upper-left corner
                  location of &lt;code&gt;(insets.left, insets.top)&lt;/code&gt;, and has a size of
                  &lt;code&gt;width - (insets.left + insets.right)&lt;/code&gt; by
                  &lt;code&gt;height - (insets.top + insets.bottom)&lt;/code&gt;.
                  &lt;p&gt;
                  The default layout for a dialog is &lt;code&gt;BorderLayout&lt;/code&gt;.
                  &lt;p&gt;
                  A dialog may have its native decorations (i.e. Frame &amp; Titlebar) turned off
                  with &lt;code&gt;setUndecorated&lt;/code&gt;.  This can only be done while the dialog
                  is not {@link Component#isDisplayable() displayable}.
                  &lt;p&gt;
                  A dialog may have another window as its owner when it&apos;s constructed.  When
                  the owner window of a visible dialog is minimized, the dialog will
                  automatically be hidden from the user. When the owner window is subsequently
                  restored, the dialog is made visible to the user again.
                  &lt;p&gt;
                  In a multi-screen environment, you can create a &lt;code&gt;Dialog&lt;/code&gt;
                  on a different screen device than its owner.  See {@link java.awt.Frame} for
                  more information.
                  &lt;p&gt;
                  A dialog can be either modeless (the default) or modal.  A modal
                  dialog is one which blocks input to some other top-level windows
                  in the application, except for any windows created with the dialog
                  as their owner. See &lt;a href=&quot;doc-files/Modality.html&quot;&gt;AWT Modality&lt;/a&gt;
                  specification for details.
                  &lt;p&gt;
                  Dialogs are capable of generating the following
                  &lt;code&gt;WindowEvents&lt;/code&gt;:
                  &lt;code&gt;WindowOpened&lt;/code&gt;, &lt;code&gt;WindowClosing&lt;/code&gt;,
                  &lt;code&gt;WindowClosed&lt;/code&gt;, &lt;code&gt;WindowActivated&lt;/code&gt;,
                  &lt;code&gt;WindowDeactivated&lt;/code&gt;, &lt;code&gt;WindowGainedFocus&lt;/code&gt;,
                  &lt;code&gt;WindowLostFocus&lt;/code&gt;.                
                <see>
                    WindowEvent                    
                </see>
                <see>
                    Window#addWindowListener                    
                </see>
                <author>
                    Sami Shaio                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <scope line="68">
                <scope line="70"/>
            </scope>
            <declaration name="resizable" type="boolean" line="74"/>
            <javadoc line="74">
                A dialog&apos;s resizable property. Will be true
                  if the Dialog is to be resizable, otherwise
                  it will be false.                
                <serial>
                                        
                </serial>
                <see>
                    #setResizable(boolean)                    
                </see>
            </javadoc>
            <declaration name="undecorated" type="boolean" line="82"/>
            <javadoc line="82">
                This field indicates whether the dialog is undecorated.
                  This property can only be changed while the dialog is not displayable.
                  &lt;code&gt;undecorated&lt;/code&gt; will be true if the dialog is
                  undecorated, otherwise it will be false.                
                <serial>
                                        
                </serial>
                <see>
                    #setUndecorated(boolean)                    
                </see>
                <see>
                    #isUndecorated()                    
                </see>
                <see>
                    Component#isDisplayable()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="ModalityType" type="enum" line="94"/>
            <javadoc line="94">
                Modal dialogs block all input to some top-level windows.
                  Whether a particular window is blocked depends on dialog&apos;s type
                  of modality; this is called the &quot;scope of blocking&quot;. The
                  &lt;code&gt;ModalityType&lt;/code&gt; enum specifies modal types and their
                  associated scopes.                
                <see>
                    Dialog#getModalityType                    
                </see>
                <see>
                    Dialog#setModalityType                    
                </see>
                <see>
                    Toolkit#isModalityTypeSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="105"/>
            <declaration name="DEFAULT_MODALITY_TYPE" type="ModalityType" line="139"/>
            <javadoc line="139">
                Default modality type for modal dialogs. The default modality type is
                  &lt;code&gt;APPLICATION_MODAL&lt;/code&gt;. Calling the oldstyle &lt;code&gt;setModal(true)&lt;/code&gt;
                  is equal to &lt;code&gt;setModalityType(DEFAULT_MODALITY_TYPE)&lt;/code&gt;.                
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="modal" type="boolean" line="148"/>
            <javadoc line="148">
                True if this dialog is modal, false is the dialog is modeless.
                  A modal dialog blocks user input to some application top-level
                  windows. This field is kept only for backwards compatibility. Use the{@link Dialog.ModalityType ModalityType} enum instead.                
                <serial>
                                        
                </serial>
                <see>
                    #isModal                    
                </see>
                <see>
                    #setModal                    
                </see>
                <see>
                    #getModalityType                    
                </see>
                <see>
                    #setModalityType                    
                </see>
                <see>
                    ModalityType                    
                </see>
                <see>
                    ModalityType#MODELESS                    
                </see>
                <see>
                    #DEFAULT_MODALITY_TYPE                    
                </see>
            </javadoc>
            <declaration name="modalityType" type="ModalityType" line="162"/>
            <javadoc line="162">
                Modality type of this dialog. If the dialog&apos;s modality type is not{@link Dialog.ModalityType#MODELESS ModalityType.MODELESS}, it blocks all
                  user input to some application top-level windows.                
                <serial>
                                        
                </serial>
                <see>
                    ModalityType                    
                </see>
                <see>
                    #getModalityType                    
                </see>
                <see>
                    #setModalityType                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ModalExclusionType" type="enum" line="172"/>
            <javadoc line="172">
                Any top-level window can be marked not to be blocked by modal
                  dialogs. This is called &quot;modal exclusion&quot;. This enum specifies
                  the possible modal exclusion types.                
                <see>
                    Window#getModalExclusionType                    
                </see>
                <see>
                    Window#setModalExclusionType                    
                </see>
                <see>
                    Toolkit#isModalExclusionTypeSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="181"/>
            <declaration name="modalDialogs" type="IdentityArrayList&lt;Dialog&gt;" line="201"/>
            <javadoc line="189">
                &lt;code&gt;TOOLKIT_EXCLUDE&lt;/code&gt; indicates that a top-level window
                  won&apos;t be blocked by  application-modal or toolkit-modal dialogs. Also,
                  it isn&apos;t blocked by document-modal dialogs from outside of its
                  child hierarchy.
                  The &quot;toolkitModality&quot; &lt;code&gt;AWTPermission&lt;/code&gt; must be granted
                  for this exclusion. If an exclusion property is being changed to
                  &lt;code&gt;TOOLKIT_EXCLUDE&lt;/code&gt; and this permission is not granted, a
                  &lt;code&gt;SecurityEcxeption&lt;/code&gt; will be thrown, and the exclusion
                  property will be left unchanged.                
            </javadoc>
            <declaration name="blockedWindows" type="IdentityArrayList&lt;Window&gt;" line="202"/>
            <declaration name="title" type="String" line="203"/>
            <javadoc line="203">
                Specifies the title of the Dialog.
                  This field can be null.                
                <serial>
                                        
                </serial>
                <see>
                    #getTitle()                    
                </see>
                <see>
                    #setTitle(String)                    
                </see>
            </javadoc>
            <declaration name="modalFilter" type="ModalEventFilter" line="211"/>
            <declaration name="secondaryLoop" type="SecondaryLoop" line="212"/>
            <declaration name="isInHide" type="boolean" line="213"/>
            <declaration name="isInDispose" type="boolean" line="214"/>
            <declaration name="base" type="String" line="215"/>
            <declaration name="nameCounter" type="int" line="216"/>
            <declaration name="serialVersionUID" type="long" line="217"/>
            <javadoc line="218">
                Constructs an initially invisible, modeless &lt;code&gt;Dialog&lt;/code&gt; with
                  the specified owner &lt;code&gt;Frame&lt;/code&gt; and an empty title.                
                <param>
                    owner the owner of the dialog or <code>null</code> if
                      this dialog has no owner                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    Component#setSize                    
                </see>
                <see>
                    Component#setVisible                    
                </see>
            </javadoc>
            <method name="Dialog" type="constructor" line="231">
                <params>
                    <param name="owner" type="Frame"/>
                </params>
            </method>
            <javadoc line="234">
                Constructs an initially invisible &lt;code&gt;Dialog&lt;/code&gt; with the specified
                  owner &lt;code&gt;Frame&lt;/code&gt; and modality and an empty title.                
                <param>
                    owner the owner of the dialog or <code>null</code> if
                      this dialog has no owner                    
                </param>
                <param>
                    modal specifes whether dialog blocks user input to other top-level
                      windows when shown. If <code>false</code>, the dialog is <code>MODELESS</code>;
                      if <code>true</code>, the modality type property is set to
                      <code>DEFAULT_MODALITY_TYPE</code>                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Dialog" type="constructor" line="254">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="modal" type="boolean"/>
                </params>
            </method>
            <javadoc line="257">
                Constructs an initially invisible, modeless &lt;code&gt;Dialog&lt;/code&gt; with
                  the specified owner &lt;code&gt;Frame&lt;/code&gt; and title.                
                <param>
                    owner the owner of the dialog or <code>null</code> if
                      this dialog has no owner                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this dialog
                      has no title                    
                </param>
                <exception>
                    IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    Component#setSize                    
                </see>
                <see>
                    Component#setVisible                    
                </see>
            </javadoc>
            <method name="Dialog" type="constructor" line="272">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="275">
                Constructs an initially invisible &lt;code&gt;Dialog&lt;/code&gt; with the
                  specified owner &lt;code&gt;Frame&lt;/code&gt;, title and modality.                
                <param>
                    owner the owner of the dialog or <code>null</code> if
                      this dialog has no owner                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this dialog
                      has no title                    
                </param>
                <param>
                    modal specifes whether dialog blocks user input to other top-level
                      windows when shown. If <code>false</code>, the dialog is <code>MODELESS</code>;
                      if <code>true</code>, the modality type property is set to
                      <code>DEFAULT_MODALITY_TYPE</code>                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    Component#setSize                    
                </see>
                <see>
                    Component#setVisible                    
                </see>
            </javadoc>
            <method name="Dialog" type="constructor" line="299">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                </params>
            </method>
            <javadoc line="302">
                Constructs an initially invisible &lt;code&gt;Dialog&lt;/code&gt; with the specified owner
                  &lt;code&gt;Frame&lt;/code&gt;, title, modality, and &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <param>
                    owner the owner of the dialog or <code>null</code> if this dialog
                      has no owner                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this dialog
                      has no title                    
                </param>
                <param>
                    modal specifes whether dialog blocks user input to other top-level
                      windows when shown. If <code>false</code>, the dialog is <code>MODELESS</code>;
                      if <code>true</code>, the modality type property is set to
                      <code>DEFAULT_MODALITY_TYPE</code>                    
                </param>
                <param>
                    gc the <code>GraphicsConfiguration</code> of the target screen device;
                      if <code>null</code>, the default system <code>GraphicsConfiguration</code>
                      is assumed                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if <code>gc</code>
                      is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    Component#setSize                    
                </see>
                <see>
                    Component#setVisible                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="330">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="333">
                Constructs an initially invisible, modeless &lt;code&gt;Dialog&lt;/code&gt; with
                  the specified owner &lt;code&gt;Dialog&lt;/code&gt; and an empty title.                
                <param>
                    owner the owner of the dialog or <code>null</code> if this
                      dialog has no owner                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="345">
                <params>
                    <param name="owner" type="Dialog"/>
                </params>
            </method>
            <javadoc line="348">
                Constructs an initially invisible, modeless &lt;code&gt;Dialog&lt;/code&gt;
                  with the specified owner &lt;code&gt;Dialog&lt;/code&gt; and title.                
                <param>
                    owner the owner of the dialog or <code>null</code> if this
                      has no owner                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this dialog
                      has no title                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="362">
                <params>
                    <param name="owner" type="Dialog"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="365">
                Constructs an initially invisible &lt;code&gt;Dialog&lt;/code&gt; with the
                  specified owner &lt;code&gt;Dialog&lt;/code&gt;, title, and modality.                
                <param>
                    owner the owner of the dialog or <code>null</code> if this
                      dialog has no owner                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this
                      dialog has no title                    
                </param>
                <param>
                    modal specifes whether dialog blocks user input to other top-level
                      windows when shown. If <code>false</code>, the dialog is <code>MODELESS</code>;
                      if <code>true</code>, the modality type property is set to
                      <code>DEFAULT_MODALITY_TYPE</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="388">
                <params>
                    <param name="owner" type="Dialog"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                </params>
            </method>
            <javadoc line="391">
                Constructs an initially invisible &lt;code&gt;Dialog&lt;/code&gt; with the
                  specified owner &lt;code&gt;Dialog&lt;/code&gt;, title, modality and
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <param>
                    owner the owner of the dialog or <code>null</code> if this
                      dialog has no owner                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this
                      dialog has no title                    
                </param>
                <param>
                    modal specifes whether dialog blocks user input to other top-level
                      windows when shown. If <code>false</code>, the dialog is <code>MODELESS</code>;
                      if <code>true</code>, the modality type property is set to
                      <code>DEFAULT_MODALITY_TYPE</code>                    
                </param>
                <param>
                    gc the <code>GraphicsConfiguration</code> of the target screen device;
                      if <code>null</code>, the default system <code>GraphicsConfiguration</code>
                      is assumed                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if <code>gc</code>
                      is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    Component#setSize                    
                </see>
                <see>
                    Component#setVisible                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="420">
                <params>
                    <param name="owner" type="Dialog"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="423">
                Constructs an initially invisible, modeless &lt;code&gt;Dialog&lt;/code&gt; with the
                  specified owner &lt;code&gt;Window&lt;/code&gt; and an empty title.                
                <param>
                    owner the owner of the dialog. The owner must be an instance of{@link java.awt.Dialog Dialog}, {@link java.awt.Frame Frame}, any
                      of their descendents or <code>null</code>                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>
                      is not an instance of {@link java.awt.Dialog Dialog} or {@link java.awt.Frame Frame}                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="437">
                <params>
                    <param name="owner" type="Window"/>
                </params>
            </method>
            <javadoc line="440">
                Constructs an initially invisible, modeless &lt;code&gt;Dialog&lt;/code&gt; with
                  the specified owner &lt;code&gt;Window&lt;/code&gt; and title.                
                <param>
                    owner the owner of the dialog. The owner must be an instance of{@link java.awt.Dialog Dialog}, {@link java.awt.Frame Frame}, any
                      of their descendents or <code>null</code>                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this dialog
                      has no title                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>
                      is not an instance of {@link java.awt.Dialog Dialog} or {@link java.awt.Frame Frame}                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="456">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="459">
                Constructs an initially invisible &lt;code&gt;Dialog&lt;/code&gt; with the
                  specified owner &lt;code&gt;Window&lt;/code&gt; and modality and an empty title.                
                <param>
                    owner the owner of the dialog. The owner must be an instance of{@link java.awt.Dialog Dialog}, {@link java.awt.Frame Frame}, any
                      of their descendents or <code>null</code>                    
                </param>
                <param>
                    modalityType specifies whether dialog blocks input to other
                      windows when shown. <code>null</code> value and unsupported modality
                      types are equivalent to <code>MODELESS</code>                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>
                      is not an instance of {@link java.awt.Dialog Dialog} or {@link java.awt.Frame Frame}                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <exception>
                    SecurityException if the calling thread does not have permission
                      to create modal dialogs with the given <code>modalityType</code>                    
                </exception>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.awt.Toolkit#isModalityTypeSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="482">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="modalityType" type="ModalityType"/>
                </params>
            </method>
            <javadoc line="485">
                Constructs an initially invisible &lt;code&gt;Dialog&lt;/code&gt; with the
                  specified owner &lt;code&gt;Window&lt;/code&gt;, title and modality.                
                <param>
                    owner the owner of the dialog. The owner must be an instance of{@link java.awt.Dialog Dialog}, {@link java.awt.Frame Frame}, any
                      of their descendents or <code>null</code>                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this dialog
                      has no title                    
                </param>
                <param>
                    modalityType specifies whether dialog blocks input to other
                      windows when shown. <code>null</code> value and unsupported modality
                      types are equivalent to <code>MODELESS</code>                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>
                      is not an instance of {@link java.awt.Dialog Dialog} or {@link java.awt.Frame Frame}                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>'s
                      <code>GraphicsConfiguration</code> is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <exception>
                    SecurityException if the calling thread does not have permission
                      to create modal dialogs with the given <code>modalityType</code>                    
                </exception>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.awt.Toolkit#isModalityTypeSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="510">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="title" type="String"/>
                    <param name="modalityType" type="ModalityType"/>
                </params>
                <scope line="512"/>
            </method>
            <javadoc line="519">
                Constructs an initially invisible &lt;code&gt;Dialog&lt;/code&gt; with the
                  specified owner &lt;code&gt;Window&lt;/code&gt;, title, modality and
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <param>
                    owner the owner of the dialog. The owner must be an instance of{@link java.awt.Dialog Dialog}, {@link java.awt.Frame Frame}, any
                      of their descendents or <code>null</code>                    
                </param>
                <param>
                    title the title of the dialog or <code>null</code> if this dialog
                      has no title                    
                </param>
                <param>
                    modalityType specifies whether dialog blocks input to other
                      windows when shown. <code>null</code> value and unsupported modality
                      types are equivalent to <code>MODELESS</code>                    
                </param>
                <param>
                    gc the <code>GraphicsConfiguration</code> of the target screen device;
                      if <code>null</code>, the default system <code>GraphicsConfiguration</code>
                      is assumed                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>owner</code>
                      is not an instance of {@link java.awt.Dialog Dialog} or {@link java.awt.Frame Frame}                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if <code>gc</code>
                      is not from a screen device                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <exception>
                    SecurityException if the calling thread does not have permission
                      to create modal dialogs with the given <code>modalityType</code>                    
                </exception>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.awt.Toolkit#isModalityTypeSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="Dialog" type="constructor" line="548">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="title" type="String"/>
                    <param name="modalityType" type="ModalityType"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="550"/>
            </method>
            <javadoc line="557">
                Construct a name for this component.  Called by getName() when the
                  name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="561">
                <scope line="562"/>
            </method>
            <javadoc line="566">
                Makes this Dialog displayable by connecting it to
                  a native screen resource.  Making a dialog displayable will
                  cause any of its children to be made displayable.
                  This method is called internally by the toolkit and should
                  not be called directly by programs.                
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    #removeNotify                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="575">
                <scope line="576">
                    <scope line="577"/>
                    <scope line="580"/>
                </scope>
            </method>
            <javadoc line="586">
                Indicates whether the dialog is modal.
                  &lt;p&gt;
                  This method is obsolete and is kept for backwards compatiblity only.
                  Use {@link #getModalityType getModalityType()} instead.                
                <return>
                    <code>true</code> if this dialog window is modal;
                      <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#getModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
            </javadoc>
            <method name="isModal" type="boolean" line="599"/>
            <method name="isModal_NoClientCode" type="boolean" line="602"/>
            <javadoc line="605">
                Specifies whether this dialog should be modal.
                  &lt;p&gt;
                  This method is obsolete and is kept for backwards compatibility only.
                  Use {@link #setModalityType setModalityType()} instead.
                  &lt;p&gt;
                  Note: changing modality of the visible dialog may have no effect
                  until it is hidden and then shown again.                
                <param>
                    modal specifies whether dialog blocks input to other windows
                      when shown; calling to <code>setModal(true)</code> is equivalent to
                      <code>setModalityType(Dialog.DEFAULT_MODALITY_TYPE)</code>, and
                      calling to <code>setModal(false)</code> is equvivalent to
                      <code>setModalityType(Dialog.ModalityType.MODELESS)</code>                    
                </param>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#isModal                    
                </see>
                <see>
                    java.awt.Dialog#getModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setModal" type="void" line="625">
                <params>
                    <param name="modal" type="boolean"/>
                </params>
            </method>
            <javadoc line="629">
                Returns the modality type of this dialog.                
                <return>
                    modality type of this dialog                    
                </return>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getModalityType" type="ModalityType" line="635"/>
            <javadoc line="638">
                Sets the modality type for this dialog. See {@link java.awt.Dialog.ModalityType ModalityType} for possible modality types.
                  &lt;p&gt;
                  If the given modality type is not supported, &lt;code&gt;MODELESS&lt;/code&gt;
                  is used. You may want to call &lt;code&gt;getModalityType()&lt;/code&gt; after calling
                  this method to ensure that the modality type has been set.
                  &lt;p&gt;
                  Note: changing modality of the visible dialog may have no effect
                  until it is hidden and then shown again.                
                <param>
                    type specifies whether dialog blocks input to other
                      windows when shown. <code>null</code> value and unsupported modality
                      types are equivalent to <code>MODELESS</code>                    
                </param>
                <exception>
                    SecurityException if the calling thread does not have permission
                      to create modal dialogs with the given <code>modalityType</code>                    
                </exception>
                <see>
                    java.awt.Dialog#getModalityType                    
                </see>
                <see>
                    java.awt.Toolkit#isModalityTypeSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setModalityType" type="void" line="656">
                <params>
                    <param name="type" type="ModalityType"/>
                </params>
                <scope line="657"/>
                <scope line="660"/>
                <scope line="663"/>
                <scope line="666">
                    <declaration name="sm" type="SecurityManager" line="667"/>
                    <scope line="668"/>
                </scope>
            </method>
            <javadoc line="675">
                Gets the title of the dialog. The title is displayed in the
                  dialog&apos;s border.                
                <return>
                    the title of this dialog window. The title may be
                      <code>null</code>.                    
                </return>
                <see>
                    java.awt.Dialog#setTitle                    
                </see>
            </javadoc>
            <method name="getTitle" type="String" line="682"/>
            <javadoc line="685">
                Sets the title of the Dialog.                
                <param>
                    title the title displayed in the dialog's border;
                      a null value results in an empty title                    
                </param>
                <see>
                    #getTitle                    
                </see>
            </javadoc>
            <method name="setTitle" type="void" line="691">
                <params>
                    <param name="title" type="String"/>
                </params>
                <declaration name="oldTitle" type="String" line="692"/>
                <scope line="693">
                    <declaration name="peer" type="DialogPeer" line="695"/>
                    <scope line="696"/>
                </scope>
            </method>
            <javadoc line="702">
                @return true if we actually showed, false if we just called toFront()                
            </javadoc>
            <method name="conditionalShow" type="boolean" line="705">
                <params>
                    <param name="toFocus" type="Component"/>
                    <param name="time" type="AtomicLong"/>
                </params>
                <declaration name="retval" type="boolean" line="706"/>
                <scope line="708">
                    <scope line="709"/>
                    <scope line="713"/>
                    <scope line="717">
                        <scope line="719"/>
                        <scope line="722"/>
                        <scope line="726"/>
                        <scope line="732"/>
                        <scope line="736">
                            <declaration name="child" type="Window" line="737"/>
                            <scope line="738"/>
                        </scope>
                        <scope line="745">
                            <declaration name="e" type="ComponentEvent" line="746"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="751"/>
            </method>
            <javadoc line="757">
                Shows or hides this {@code Dialog} depending on the value of parameter{@code b}.                
                <param>
                    b if {@code true}, makes the {@code Dialog} visible,
                      otherwise hides the {@code Dialog}.
                      If the dialog and/or its owner
                      are not yet displayable, both are made displayable.  The
                      dialog will be validated prior to being made visible.
                      If {@code false}, hides the {@code Dialog} and then causes {@code setVisible(true)}to return if it is currently blocked.
                      <p>
                      <b>Notes for modal dialogs</b>.
                      <ul>
                      <li>{@code setVisible(true)}:  If the dialog is not already
                      visible, this call will not return until the dialog is
                      hidden by calling {@code setVisible(false)} or{@code dispose}.
                      <li>{@code setVisible(false)}:  Hides the dialog and then
                      returns on {@code setVisible(true)} if it is currently blocked.
                      <li>It is OK to call this method from the event dispatching
                      thread because the toolkit ensures that other events are
                      not blocked while this method is blocked.
                      </ul>                    
                </param>
                <see>
                    java.awt.Window#setVisible                    
                </see>
                <see>
                    java.awt.Window#dispose                    
                </see>
                <see>
                    java.awt.Component#isDisplayable                    
                </see>
                <see>
                    java.awt.Component#validate                    
                </see>
                <see>
                    java.awt.Dialog#isModal                    
                </see>
            </javadoc>
            <method name="setVisible" type="void" line="783">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="786">
                Makes the {@code Dialog} visible. If the dialog and/or its owner
                  are not yet displayable, both are made displayable.  The
                  dialog will be validated prior to being made visible.
                  If the dialog is already visible, this will bring the dialog
                  to the front.
                  &lt;p&gt;
                  If the dialog is modal and is not already visible, this call
                  will not return until the dialog is hidden by calling hide or
                  dispose. It is permissible to show modal dialogs from the event
                  dispatching thread because the toolkit will ensure that another
                  event pump runs while the one which invoked this method is blocked.                
                <see>
                    Component#hide                    
                </see>
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    Component#validate                    
                </see>
                <see>
                    #isModal                    
                </see>
                <see>
                    Window#setVisible(boolean)                    
                </see>
                <deprecated>
                    As of JDK version 1.5, replaced by{@link #setVisible(boolean) setVisible(boolean)}.                    
                </deprecated>
            </javadoc>
            <method name="show" type="void" line="805">
                <scope line="807"/>
                <scope line="810">
                    <declaration name="showAppContext" type="AppContext" line="811"/>
                    <declaration name="time" type="AtomicLong" line="812"/>
                    <declaration name="predictedFocusOwner" type="Component" line="813"/>
                    <scope line="814">
                        <scope line="816">
                            <anonymous_class line="818">
                                <method name="evaluate" type="boolean" line="819"/>
                            </anonymous_class>
                            <declaration name="cond" type="Conditional" line="818"/>
                            <scope line="824">
                                <declaration name="it" type="Iterator" line="825"/>
                                <scope line="826">
                                    <declaration name="appContext" type="AppContext" line="827"/>
                                    <scope line="828"/>
                                    <declaration name="eventQueue" type="EventQueue" line="831"/>
                                    <anonymous_class line="832">
                                        <method name="run" type="void" line="833"/>
                                    </anonymous_class>
                                    <declaration name="createEDT" type="Runnable" line="832"/>
                                    <declaration name="edt" type="EventDispatchThread" line="838"/>
                                </scope>
                            </scope>
                            <scope line="843">
                                <declaration name="eventQueue" type="EventQueue" line="844"/>
                                <scope line="846"/>
                            </scope>
                            <scope line="850"/>
                            <scope line="853">
                                <declaration name="it" type="Iterator" line="854"/>
                                <scope line="855">
                                    <declaration name="appContext" type="AppContext" line="856"/>
                                    <scope line="857"/>
                                    <declaration name="eventQueue" type="EventQueue" line="860"/>
                                    <declaration name="edt" type="EventDispatchThread" line="861"/>
                                </scope>
                            </scope>
                            <scope line="865"/>
                        </scope>
                    </scope>
                    <scope line="871">
                        <scope line="872"/>
                    </scope>
                </scope>
            </method>
            <method name="modalityPushed" type="void" line="878">
                <declaration name="tk" type="Toolkit" line="879"/>
                <scope line="880">
                    <declaration name="stk" type="SunToolkit" line="881"/>
                </scope>
            </method>
            <method name="modalityPopped" type="void" line="885">
                <declaration name="tk" type="Toolkit" line="886"/>
                <scope line="887">
                    <declaration name="stk" type="SunToolkit" line="888"/>
                </scope>
            </method>
            <method name="interruptBlocking" type="void" line="892">
                <scope line="893"/>
                <scope line="896"/>
            </method>
            <method name="hideAndDisposePreHandler" type="void" line="902">
                <scope line="904">
                    <scope line="905">
                        <scope line="907"/>
                    </scope>
                </scope>
            </method>
            <method name="hideAndDisposeHandler" type="void" line="914">
                <scope line="915"/>
            </method>
            <javadoc line="921">
                Hides the Dialog and then causes {@code show} to return if it is currently
                  blocked.                
                <see>
                    Window#show                    
                </see>
                <see>
                    Window#dispose                    
                </see>
                <see>
                    Window#setVisible(boolean)                    
                </see>
                <deprecated>
                    As of JDK version 1.5, replaced by{@link #setVisible(boolean) setVisible(boolean)}.                    
                </deprecated>
            </javadoc>
            <method name="hide" type="void" line="929">
                <scope line="932"/>
            </method>
            <javadoc line="936">
                Disposes the Dialog and then causes show() to return if it is currently
                  blocked.                
            </javadoc>
            <method name="doDispose" type="void" line="940"/>
            <javadoc line="946">
                {@inheritDoc}&lt;p&gt;
                  If this dialog is modal and blocks some windows, then all of them are
                  also sent to the back to keep them below the blocking dialog.                
                <see>
                    java.awt.Window#toBack                    
                </see>
            </javadoc>
            <method name="toBack" type="void" line="952">
                <scope line="954">
                    <scope line="955">
                        <scope line="956"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="962">
                Indicates whether this dialog is resizable by the user.
                  By default, all dialogs are initially resizable.                
                <return>
                    <code>true</code> if the user can resize the dialog;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.awt.Dialog#setResizable                    
                </see>
            </javadoc>
            <method name="isResizable" type="boolean" line="969"/>
            <javadoc line="972">
                Sets whether this dialog is resizable by the user.                
                <param>
                    resizable <code>true</code> if the user can
                      resize this dialog; <code>false</code> otherwise.                    
                </param>
                <see>
                    java.awt.Dialog#isResizable                    
                </see>
            </javadoc>
            <method name="setResizable" type="void" line="978">
                <params>
                    <param name="resizable" type="boolean"/>
                </params>
                <declaration name="testvalid" type="boolean" line="979"/>
                <scope line="980">
                    <declaration name="peer" type="DialogPeer" line="982"/>
                    <scope line="983"/>
                </scope>
                <scope line="988"/>
            </method>
            <javadoc line="992">
                Disables or enables decorations for this dialog.
                  &lt;p&gt;
                  This method can only be called while the dialog is not displayable. To
                  make this dialog decorated, it must be opaque and have the default shape,
                  otherwise the {@code IllegalComponentStateException} will be thrown.
                  Refer to {@link Window#setShape}, {@link Window#setOpacity} and {@link Window#setBackground} for details                
                <param>
                    undecorated {@code true} if no dialog decorations are to be
                      enabled; {@code false} if dialog decorations are to be enabled                    
                </param>
                <throws>
                    IllegalComponentStateException if the dialog is displayable                    
                </throws>
                <throws>
                    IllegalComponentStateException if {@code undecorated} is{@code false}, and this dialog does not have the default shape                    
                </throws>
                <throws>
                    IllegalComponentStateException if {@code undecorated} is{@code false}, and this dialog opacity is less than {@code 1.0f}                    
                </throws>
                <throws>
                    IllegalComponentStateException if {@code undecorated} is{@code false}, and the alpha value of this dialog background
                      color is less than {@code 1.0f}                    
                </throws>
                <see>
                    #isUndecorated                    
                </see>
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    Window#getShape                    
                </see>
                <see>
                    Window#getOpacity                    
                </see>
                <see>
                    Window#getBackground                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setUndecorated" type="void" line="1013">
                <params>
                    <param name="undecorated" type="boolean"/>
                </params>
                <scope line="1014">
                    <scope line="1015"/>
                    <scope line="1018">
                        <scope line="1019"/>
                        <scope line="1022"/>
                        <declaration name="bg" type="Color" line="1025"/>
                        <scope line="1026"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1033">
                Indicates whether this dialog is undecorated.
                  By default, all dialogs are initially decorated.                
                <return>
                    <code>true</code> if dialog is undecorated;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.awt.Dialog#setUndecorated                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isUndecorated" type="boolean" line="1041"/>
            <javadoc line="1044">
                {@inheritDoc}                
            </javadoc>
            <method name="setOpacity" type="void" line="1047">
                <params>
                    <param name="opacity" type="float"/>
                </params>
                <scope line="1048">
                    <scope line="1049"/>
                </scope>
            </method>
            <javadoc line="1055">
                {@inheritDoc}                
            </javadoc>
            <method name="setShape" type="void" line="1058">
                <params>
                    <param name="shape" type="Shape"/>
                </params>
                <scope line="1059">
                    <scope line="1060"/>
                </scope>
            </method>
            <javadoc line="1066">
                {@inheritDoc}                
            </javadoc>
            <method name="setBackground" type="void" line="1069">
                <params>
                    <param name="bgColor" type="Color"/>
                </params>
                <scope line="1070">
                    <scope line="1071"/>
                </scope>
            </method>
            <javadoc line="1077">
                Returns a string representing the state of this dialog. This
                  method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this dialog window.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1085">
                <declaration name="str" type="String" line="1086"/>
                <scope line="1087"/>
            </method>
            <method name="initIDs" type="void" line="1092"/>
            <javadoc line="1092">
                Initialize JNI field and method IDs                
            </javadoc>
            <method name="modalShow" type="void" line="1096">
                <declaration name="blockers" type="IdentityArrayList&lt;Dialog&gt;" line="1097"/>
                <scope line="1098">
                    <scope line="1099">
                        <declaration name="w" type="Window" line="1100"/>
                        <scope line="1101"/>
                        <scope line="1104"/>
                    </scope>
                </scope>
                <scope line="1109">
                    <declaration name="blocker" type="Dialog" line="1110"/>
                    <scope line="1111">
                        <declaration name="blockerBlocker" type="Dialog" line="1112"/>
                        <scope line="1113"/>
                    </scope>
                </scope>
                <scope line="1118"/>
                <declaration name="blockersHierarchies" type="IdentityArrayList&lt;Window&gt;" line="1121"/>
                <declaration name="k" type="int" line="1122"/>
                <scope line="1123">
                    <declaration name="w" type="Window" line="1124"/>
                    <declaration name="ownedWindows" type="Window[]" line="1125"/>
                    <scope line="1126"/>
                </scope>
                <declaration name="toBlock" type="java.util.List&lt;Window&gt;" line="1131"/>
                <declaration name="unblockedWindows" type="IdentityArrayList&lt;Window&gt;" line="1132"/>
                <scope line="1133">
                    <scope line="1134">
                        <scope line="1135">
                            <declaration name="wd" type="Dialog" line="1136"/>
                            <scope line="1137"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1145"/>
            </method>
            <method name="modalHide" type="void" line="1149">
                <declaration name="save" type="IdentityArrayList&lt;Window&gt;" line="1150"/>
                <declaration name="blockedWindowsCount" type="int" line="1151"/>
                <scope line="1152">
                    <declaration name="w" type="Window" line="1153"/>
                </scope>
                <scope line="1157">
                    <declaration name="w" type="Window" line="1158"/>
                    <scope line="1159">
                        <declaration name="d" type="Dialog" line="1160"/>
                    </scope>
                    <scope line="1163"/>
                </scope>
            </method>
            <method name="shouldBlock" type="boolean" line="1168">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="1169"/>
                <scope line="1172"/>
                <declaration name="blockerToCheck" type="Window" line="1175"/>
                <scope line="1176">
                    <declaration name="c" type="Component" line="1177"/>
                    <scope line="1178"/>
                    <scope line="1181"/>
                </scope>
                <scope line="1190">
                    <declaration name="c" type="Component" line="1191"/>
                    <scope line="1192"/>
                </scope>
                <scope line="1197"/>
            </method>
            <method name="blockWindow" type="void" line="1207">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="1208"/>
            </method>
            <method name="blockWindows" type="void" line="1213">
                <params>
                    <param name="toBlock" type="java.util.List<Window>"/>
                </params>
                <declaration name="dpeer" type="DialogPeer" line="1214"/>
                <scope line="1215"/>
                <declaration name="it" type="Iterator&lt;Window&gt;" line="1218"/>
                <scope line="1219">
                    <declaration name="w" type="Window" line="1220"/>
                    <scope line="1221"/>
                    <scope line="1224"/>
                </scope>
            </method>
            <method name="unblockWindow" type="void" line="1231">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="1232"/>
            </method>
            <method name="checkShouldBeBlocked" type="void" line="1237">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="1238">
                    <scope line="1239">
                        <declaration name="modalDialog" type="Dialog" line="1240"/>
                        <scope line="1241"/>
                    </scope>
                </scope>
            </method>
            <method name="readObject" type="void" line="1248">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="1251"/>
            </method>
            <javadoc line="1256">
                Gets the AccessibleContext associated with this Dialog.
                  For dialogs, the AccessibleContext takes the form of an
                  AccessibleAWTDialog.
                  A new AccessibleAWTDialog instance is created if necessary.                
                <return>
                    an AccessibleAWTDialog that serves as the
                      AccessibleContext of this Dialog                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1265">
                <scope line="1266"/>
            </method>
            <class name="AccessibleAWTDialog" line="1271">
                <extends class="AccessibleAWTWindow"/>
                <javadoc line="1271">
                    This class implements accessibility support for the
                      &lt;code&gt;Dialog&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to dialog user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1278"/>
                <javadoc line="1279">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1285"/>
                <javadoc line="1288">
                    Get the state of this object.                    
                    <return>
                        an instance of AccessibleStateSet containing the current
                          state set of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1294">
                    <declaration name="states" type="AccessibleStateSet" line="1295"/>
                    <scope line="1296"/>
                    <scope line="1299"/>
                    <scope line="1302"/>
                </method>
            </class>
        </class>
    </source>