<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.spec">
        <import package="java.math.BigInteger"/>
        <class name="RSAMultiPrimePrivateCrtKeySpec" line="30">
            <extends class="RSAPrivateKeySpec"/>
            <javadoc line="30">
                This class specifies an RSA multi-prime private key, as defined in the
                  PKCS#1 v2.1, using the Chinese Remainder Theorem (CRT) information
                  values for efficiency.                
                <author>
                    Valerie Peng                    
                </author>
                <see>
                    java.security.Key                    
                </see>
                <see>
                    java.security.KeyFactory                    
                </see>
                <see>
                    KeySpec                    
                </see>
                <see>
                    PKCS8EncodedKeySpec                    
                </see>
                <see>
                    RSAPrivateKeySpec                    
                </see>
                <see>
                    RSAPublicKeySpec                    
                </see>
                <see>
                    RSAOtherPrimeInfo                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="publicExponent" type="BigInteger" line="51"/>
            <declaration name="primeP" type="BigInteger" line="52"/>
            <declaration name="primeQ" type="BigInteger" line="53"/>
            <declaration name="primeExponentP" type="BigInteger" line="54"/>
            <declaration name="primeExponentQ" type="BigInteger" line="55"/>
            <declaration name="crtCoefficient" type="BigInteger" line="56"/>
            <declaration name="otherPrimeInfo" type="RSAOtherPrimeInfo" line="57"/>
            <javadoc line="59">
                Creates a new &lt;code&gt;RSAMultiPrimePrivateCrtKeySpec&lt;/code&gt;
                  given the modulus, publicExponent, privateExponent,
                  primeP, primeQ, primeExponentP, primeExponentQ,
                  crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.
                  &lt;p&gt;Note that the contents of &lt;code&gt;otherPrimeInfo&lt;/code&gt;
                  are copied to protect against subsequent modification when
                  constructing this object.                
                <param>
                    modulus the modulus n.                    
                </param>
                <param>
                    publicExponent the public exponent e.                    
                </param>
                <param>
                    privateExponent the private exponent d.                    
                </param>
                <param>
                    primeP the prime factor p of n.                    
                </param>
                <param>
                    primeQ the prime factor q of n.                    
                </param>
                <param>
                    primeExponentP this is d mod (p-1).                    
                </param>
                <param>
                    primeExponentQ this is d mod (q-1).                    
                </param>
                <param>
                    crtCoefficient the Chinese Remainder Theorem
                      coefficient q-1 mod p.                    
                </param>
                <param>
                    otherPrimeInfo triplets of the rest of primes, null can be
                      specified if there are only two prime factors (p and q).                    
                </param>
                <exception>
                    NullPointerException if any of the parameters, i.e.
                      <code>modulus</code>,
                      <code>publicExponent</code>, <code>privateExponent</code>,
                      <code>primeP</code>, <code>primeQ</code>,
                      <code>primeExponentP</code>, <code>primeExponentQ</code>,
                      <code>crtCoefficient</code>, is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if an empty, i.e. 0-length,
                      <code>otherPrimeInfo</code> is specified.                    
                </exception>
            </javadoc>
            <method name="RSAMultiPrimePrivateCrtKeySpec" type="constructor" line="97">
                <params>
                    <param name="modulus" type="BigInteger"/>
                    <param name="publicExponent" type="BigInteger"/>
                    <param name="privateExponent" type="BigInteger"/>
                    <param name="primeP" type="BigInteger"/>
                    <param name="primeQ" type="BigInteger"/>
                    <param name="primeExponentP" type="BigInteger"/>
                    <param name="primeExponentQ" type="BigInteger"/>
                    <param name="crtCoefficient" type="BigInteger"/>
                    <param name="otherPrimeInfo" type="RSAOtherPrimeInfo[]"/>
                </params>
                <scope line="99"/>
                <scope line="103"/>
                <scope line="107"/>
                <scope line="111"/>
                <scope line="115"/>
                <scope line="119"/>
                <scope line="123"/>
                <scope line="127"/>
                <scope line="137"/>
                <scope line="139"/>
                <scope line="142"/>
            </method>
            <javadoc line="147">
                Returns the public exponent.                
                <return>
                    the public exponent.                    
                </return>
            </javadoc>
            <method name="getPublicExponent" type="BigInteger" line="152"/>
            <javadoc line="156">
                Returns the primeP.                
                <return>
                    the primeP.                    
                </return>
            </javadoc>
            <method name="getPrimeP" type="BigInteger" line="161"/>
            <javadoc line="165">
                Returns the primeQ.                
                <return>
                    the primeQ.                    
                </return>
            </javadoc>
            <method name="getPrimeQ" type="BigInteger" line="170"/>
            <javadoc line="174">
                Returns the primeExponentP.                
                <return>
                    the primeExponentP.                    
                </return>
            </javadoc>
            <method name="getPrimeExponentP" type="BigInteger" line="179"/>
            <javadoc line="183">
                Returns the primeExponentQ.                
                <return>
                    the primeExponentQ.                    
                </return>
            </javadoc>
            <method name="getPrimeExponentQ" type="BigInteger" line="188"/>
            <javadoc line="192">
                Returns the crtCoefficient.                
                <return>
                    the crtCoefficient.                    
                </return>
            </javadoc>
            <method name="getCrtCoefficient" type="BigInteger" line="197"/>
            <javadoc line="201">
                Returns a copy of the otherPrimeInfo or null if there are
                  only two prime factors (p and q).                
                <return>
                    the otherPrimeInfo. Returns a new array each
                      time this method is called.                    
                </return>
            </javadoc>
            <method name="getOtherPrimeInfo" type="RSAOtherPrimeInfo[]" line="208"/>
        </class>
    </source>