<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.spec">
        <import package="java.math.BigInteger"/>
        <import package="java.util.Arrays"/>
        <class name="EllipticCurve" line="4">
            <javadoc line="4">
                This immutable class holds the necessary values needed to represent
                  an elliptic curve.                
                <see>
                    ECField                    
                </see>
                <see>
                    ECFieldFp                    
                </see>
                <see>
                    ECFieldF2m                    
                </see>
                <author>
                    Valerie Peng                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="field" type="ECField" line="14"/>
            <declaration name="a" type="BigInteger" line="15"/>
            <declaration name="b" type="BigInteger" line="16"/>
            <declaration name="seed" type="byte[]" line="17"/>
            <method name="checkValidity" type="void" line="18">
                <params>
                    <param name="field" type="ECField"/>
                    <param name="c" type="BigInteger"/>
                    <param name="cName" type="String"/>
                </params>
                <scope line="19">
                    <declaration name="p" type="BigInteger" line="20"/>
                    <scope line="21"/>
                    <scope line="24"/>
                </scope>
                <scope line="28">
                    <declaration name="m" type="int" line="29"/>
                    <scope line="30"/>
                </scope>
            </method>
            <javadoc line="35">
                Creates an elliptic curve with the specified elliptic field
                  &lt;code&gt;field&lt;/code&gt; and the coefficients &lt;code&gt;a&lt;/code&gt; and
                  &lt;code&gt;b&lt;/code&gt;.                
                <param>
                    field the finite field that this elliptic curve is over.                    
                </param>
                <param>
                    a the first coefficient of this elliptic curve.                    
                </param>
                <param>
                    b the second coefficient of this elliptic curve.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;field&lt;/code&gt;,
                      &lt;code&gt;a&lt;/code&gt;, or &lt;code&gt;b&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;a&lt;/code&gt;
                      or &lt;code&gt;b&lt;/code&gt; is not null and not in &lt;code&gt;field&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="EllipticCurve" type="constructor" line="47">
                <params>
                    <param name="field" type="ECField"/>
                    <param name="a" type="BigInteger"/>
                    <param name="b" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="50">
                Creates an elliptic curve with the specified elliptic field
                  &lt;code&gt;field&lt;/code&gt;, the coefficients &lt;code&gt;a&lt;/code&gt; and
                  &lt;code&gt;b&lt;/code&gt;, and the &lt;code&gt;seed&lt;/code&gt; used for curve generation.                
                <param>
                    field the finite field that this elliptic curve is over.                    
                </param>
                <param>
                    a the first coefficient of this elliptic curve.                    
                </param>
                <param>
                    b the second coefficient of this elliptic curve.                    
                </param>
                <param>
                    seed the bytes used during curve generation for later
                      validation. Contents of this array are copied to protect against
                      subsequent modification.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;field&lt;/code&gt;,
                      &lt;code&gt;a&lt;/code&gt;, or &lt;code&gt;b&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;a&lt;/code&gt;
                      or &lt;code&gt;b&lt;/code&gt; is not null and not in &lt;code&gt;field&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="EllipticCurve" type="constructor" line="65">
                <params>
                    <param name="field" type="ECField"/>
                    <param name="a" type="BigInteger"/>
                    <param name="b" type="BigInteger"/>
                    <param name="seed" type="byte[]"/>
                </params>
                <scope line="66"/>
                <scope line="69"/>
                <scope line="72"/>
                <scope line="80"/>
                <scope line="83"/>
            </method>
            <javadoc line="87">
                Returns the finite field &lt;code&gt;field&lt;/code&gt; that this
                  elliptic curve is over.                
                <return>
                    the field &lt;code&gt;field&lt;/code&gt; that this curve
                      is over.                    
                </return>
            </javadoc>
            <method name="getField" type="ECField" line="93"/>
            <javadoc line="96">
                Returns the first coefficient &lt;code&gt;a&lt;/code&gt; of the
                  elliptic curve.                
                <return>
                    the first coefficient &lt;code&gt;a&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getA" type="BigInteger" line="101"/>
            <javadoc line="104">
                Returns the second coefficient &lt;code&gt;b&lt;/code&gt; of the
                  elliptic curve.                
                <return>
                    the second coefficient &lt;code&gt;b&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getB" type="BigInteger" line="109"/>
            <javadoc line="112">
                Returns the seeding bytes &lt;code&gt;seed&lt;/code&gt; used
                  during curve generation. May be null if not specified.                
                <return>
                    the seeding bytes &lt;code&gt;seed&lt;/code&gt;. A new
                      array is returned each time this method is called.                    
                </return>
            </javadoc>
            <method name="getSeed" type="byte[]" line="118"/>
            <javadoc line="122">
                Compares this elliptic curve for equality with the
                  specified object.                
                <param>
                    obj the object to be compared.                    
                </param>
                <return>
                    true if &lt;code&gt;obj&lt;/code&gt; is an instance of
                      EllipticCurve and the field, A, and B match, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="129">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="131">
                    <declaration name="curve" type="EllipticCurve" line="132"/>
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="139">
                Returns a hash code value for this elliptic curve.                
                <return>
                    a hash code value computed from the hash codes of the field, A,
                      and B, as follows:
                      &lt;code&gt;
                      (field.hashCode() &lt;&lt; 6) + (a.hashCode() &lt;&lt; 4) + (b.hashCode() &lt;&lt; 2)
                      &lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="147"/>
        </class>
    </source>