<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.spec">
        <import package="java.math.BigInteger"/>
        <class name="RSAPrivateCrtKeySpec" line="30">
            <extends class="RSAPrivateKeySpec"/>
            <javadoc line="30">
                This class specifies an RSA private key, as defined in the PKCS#1
                  standard, using the Chinese Remainder Theorem (CRT) information values for
                  efficiency.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    java.security.Key                    
                </see>
                <see>
                    java.security.KeyFactory                    
                </see>
                <see>
                    KeySpec                    
                </see>
                <see>
                    PKCS8EncodedKeySpec                    
                </see>
                <see>
                    RSAPrivateKeySpec                    
                </see>
                <see>
                    RSAPublicKeySpec                    
                </see>
            </javadoc>
            <declaration name="publicExponent" type="BigInteger" line="48"/>
            <declaration name="primeP" type="BigInteger" line="49"/>
            <declaration name="primeQ" type="BigInteger" line="50"/>
            <declaration name="primeExponentP" type="BigInteger" line="51"/>
            <declaration name="primeExponentQ" type="BigInteger" line="52"/>
            <declaration name="crtCoefficient" type="BigInteger" line="53"/>
            <javadoc line="57">
                Creates a new &lt;code&gt;RSAPrivateCrtKeySpec&lt;/code&gt;
                  given the modulus, publicExponent, privateExponent,
                  primeP, primeQ, primeExponentP, primeExponentQ, and
                  crtCoefficient as defined in PKCS#1.                
                <param>
                    modulus the modulus n                    
                </param>
                <param>
                    publicExponent the public exponent e                    
                </param>
                <param>
                    privateExponent the private exponent d                    
                </param>
                <param>
                    primeP the prime factor p of n                    
                </param>
                <param>
                    primeQ the prime factor q of n                    
                </param>
                <param>
                    primeExponentP this is d mod (p-1)                    
                </param>
                <param>
                    primeExponentQ this is d mod (q-1)                    
                </param>
                <param>
                    crtCoefficient the Chinese Remainder Theorem
                      coefficient q-1 mod p                    
                </param>
            </javadoc>
            <method name="RSAPrivateCrtKeySpec" type="constructor" line="80">
                <params>
                    <param name="modulus" type="BigInteger"/>
                    <param name="publicExponent" type="BigInteger"/>
                    <param name="privateExponent" type="BigInteger"/>
                    <param name="primeP" type="BigInteger"/>
                    <param name="primeQ" type="BigInteger"/>
                    <param name="primeExponentP" type="BigInteger"/>
                    <param name="primeExponentQ" type="BigInteger"/>
                    <param name="crtCoefficient" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="90">
                Returns the public exponent.                
                <return>
                    the public exponent                    
                </return>
            </javadoc>
            <method name="getPublicExponent" type="BigInteger" line="95"/>
            <javadoc line="99">
                Returns the primeP.                
                <return>
                    the primeP                    
                </return>
            </javadoc>
            <method name="getPrimeP" type="BigInteger" line="104"/>
            <javadoc line="108">
                Returns the primeQ.                
                <return>
                    the primeQ                    
                </return>
            </javadoc>
            <method name="getPrimeQ" type="BigInteger" line="113"/>
            <javadoc line="117">
                Returns the primeExponentP.                
                <return>
                    the primeExponentP                    
                </return>
            </javadoc>
            <method name="getPrimeExponentP" type="BigInteger" line="122"/>
            <javadoc line="126">
                Returns the primeExponentQ.                
                <return>
                    the primeExponentQ                    
                </return>
            </javadoc>
            <method name="getPrimeExponentQ" type="BigInteger" line="131"/>
            <javadoc line="135">
                Returns the crtCoefficient.                
                <return>
                    the crtCoefficient                    
                </return>
            </javadoc>
            <method name="getCrtCoefficient" type="BigInteger" line="140"/>
        </class>
    </source>