<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <interface name="DomainCombiner">
            <javadoc line="28">
                A &lt;code&gt;DomainCombiner&lt;/code&gt; provides a means to dynamically
                  update the ProtectionDomains associated with the current
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt; A &lt;code&gt;DomainCombiner&lt;/code&gt; is passed as a parameter to the
                  appropriate constructor for &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  The newly constructed context is then passed to the
                  &lt;code&gt;AccessController.doPrivileged(..., context)&lt;/code&gt; method
                  to bind the provided context (and associated &lt;code&gt;DomainCombiner&lt;/code&gt;)
                  with the current execution Thread.  Subsequent calls to
                  &lt;code&gt;AccessController.getContext&lt;/code&gt; or
                  &lt;code&gt;AccessController.checkPermission&lt;/code&gt;
                  cause the &lt;code&gt;DomainCombiner.combine&lt;/code&gt; to get invoked.
                  &lt;p&gt; The combine method takes two arguments.  The first argument represents
                  an array of ProtectionDomains from the current execution Thread,
                  since the most recent call to &lt;code&gt;AccessController.doPrivileged&lt;/code&gt;.
                  If no call to doPrivileged was made, then the first argument will contain
                  all the ProtectionDomains from the current execution Thread.
                  The second argument represents an array of inherited ProtectionDomains,
                  which may be &lt;code&gt;null&lt;/code&gt;.  ProtectionDomains may be inherited
                  from a parent Thread, or from a privileged context.  If no call to
                  doPrivileged was made, then the second argument will contain the
                  ProtectionDomains inherited from the parent Thread.  If one or more calls
                  to doPrivileged were made, and the most recent call was to
                  doPrivileged(action, context), then the second argument will contain the
                  ProtectionDomains from the privileged context.  If the most recent call
                  was to doPrivileged(action), then there is no privileged context,
                  and the second argument will be &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; The &lt;code&gt;combine&lt;/code&gt; method investigates the two input arrays
                  of ProtectionDomains and returns a single array containing the updated
                  ProtectionDomains.  In the simplest case, the &lt;code&gt;combine&lt;/code&gt;
                  method merges the two stacks into one.  In more complex cases,
                  the &lt;code&gt;combine&lt;/code&gt; method returns a modified
                  stack of ProtectionDomains.  The modification may have added new
                  ProtectionDomains, removed certain ProtectionDomains, or simply
                  updated existing ProtectionDomains.  Re-ordering and other optimizations
                  to the ProtectionDomains are also permitted.  Typically the
                  &lt;code&gt;combine&lt;/code&gt; method bases its updates on the information
                  encapsulated in the &lt;code&gt;DomainCombiner&lt;/code&gt;.
                  &lt;p&gt; After the &lt;code&gt;AccessController.getContext&lt;/code&gt; method
                  receives the combined stack of ProtectionDomains back from
                  the &lt;code&gt;DomainCombiner&lt;/code&gt;, it returns a new
                  AccessControlContext that has both the combined ProtectionDomains
                  as well as the &lt;code&gt;DomainCombiner&lt;/code&gt;.                
                <see>
                    AccessController                    
                </see>
                <see>
                    AccessControlContext                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="combine" type="ProtectionDomain[]" line="83"/>
            <javadoc line="83">
                Modify or update the provided ProtectionDomains.
                  ProtectionDomains may be added to or removed from the given
                  ProtectionDomains.  The ProtectionDomains may be re-ordered.
                  Individual ProtectionDomains may be modified (with a new
                  set of Permissions, for example).
                  &lt;p&gt;                
                <param>
                    currentDomains the ProtectionDomains associated with the
                      current execution Thread, up to the most recent
                      privileged &lt;code&gt;ProtectionDomain&lt;/code&gt;.
                      The ProtectionDomains are are listed in order of execution,
                      with the most recently executing &lt;code&gt;ProtectionDomain&lt;/code&gt;
                      residing at the beginning of the array. This parameter may
                      be &lt;code&gt;null&lt;/code&gt; if the current execution Thread
                      has no associated ProtectionDomains.&lt;p&gt;                    
                </param>
                <param>
                    assignedDomains an array of inherited ProtectionDomains.
                      ProtectionDomains may be inherited from a parent Thread,
                      or from a privileged &lt;code&gt;AccessControlContext&lt;/code&gt;.
                      This parameter may be &lt;code&gt;null&lt;/code&gt;
                      if there are no inherited ProtectionDomains.                    
                </param>
                <return>
                    a new array consisting of the updated ProtectionDomains,
                      or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
        </interface>
    </source>