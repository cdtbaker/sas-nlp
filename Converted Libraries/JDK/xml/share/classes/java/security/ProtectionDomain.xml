<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.misc.JavaSecurityProtectionDomainAccess"/>
        <import package="sun.misc.JavaSecurityProtectionDomainAccess.ProtectionDomainCache"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.misc.JavaSecurityAccess"/>
        <import package="sun.misc.SharedSecrets"/>
        <class name="ProtectionDomain" line="42">
            <comment line="95">
                                
            </comment>
            <comment line="98">
                                
            </comment>
            <comment line="101">
                                
            </comment>
            <comment line="104">
                                
            </comment>
            <comment line="107">
                                
            </comment>
            <comment line="110">
                the PermissionCollection is static (pre 1.4 constructor)                
            </comment>
            <comment line="114">
                An object used as a key when the ProtectionDomain is stored in a Map.                
            </comment>
            <javadoc line="42">
                &lt;p&gt;
                  This ProtectionDomain class encapsulates the characteristics of a domain,
                  which encloses a set of classes whose instances are granted a set
                  of permissions when being executed on behalf of a given set of Principals.
                  &lt;p&gt;
                  A static set of permissions can be bound to a ProtectionDomain when it is
                  constructed; such permissions are granted to the domain regardless of the
                  Policy in force. However, to support dynamic security policies, a
                  ProtectionDomain can also be constructed such that it is dynamically
                  mapped to a set of permissions by the current Policy whenever a permission
                  is checked.
                  &lt;p&gt;                
                <author>
                    Li Gong                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
                <author>
                    Gary Ellison                    
                </author>
            </javadoc>
            <scope line="64">
                <anonymous_class line="67">
                    <method name="doIntersectionPrivilege" type="T" line="72">
                        <params>
                            <param name="action" type="PrivilegedAction<T>"/>
                            <param name="stack" type="AccessControlContext"/>
                            <param name="context" type="AccessControlContext"/>
                        </params>
                        <scope line="73"/>
                    </method>
                    <method name="doIntersectionPrivilege" type="T" line="86">
                        <params>
                            <param name="action" type="PrivilegedAction<T>"/>
                            <param name="context" type="AccessControlContext"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
            <declaration name="codesource" type="CodeSource" line="95"/>
            <declaration name="classloader" type="ClassLoader" line="98"/>
            <declaration name="principals" type="Principal[]" line="101"/>
            <declaration name="permissions" type="PermissionCollection" line="104"/>
            <declaration name="hasAllPerm" type="boolean" line="107"/>
            <declaration name="staticPermissions" type="boolean" line="111"/>
            <declaration name="key" type="Key" line="116"/>
            <declaration name="debug" type="Debug" line="118"/>
            <javadoc line="120">
                Creates a new ProtectionDomain with the given CodeSource and
                  Permissions. If the permissions object is not null, then
                  &lt;code&gt;setReadOnly())&lt;/code&gt; will be called on the passed in
                  Permissions object. The only permissions granted to this domain
                  are the ones specified; the current Policy will not be consulted.                
                <param>
                    codesource the codesource associated with this domain                    
                </param>
                <param>
                    permissions the permissions granted to this domain                    
                </param>
            </javadoc>
            <method name="ProtectionDomain" type="constructor" line="131">
                <params>
                    <param name="codesource" type="CodeSource"/>
                    <param name="permissions" type="PermissionCollection"/>
                </params>
                <scope line="133">
                    <scope line="137"/>
                </scope>
            </method>
            <javadoc line="146">
                Creates a new ProtectionDomain qualified by the given CodeSource,
                  Permissions, ClassLoader and array of Principals. If the
                  permissions object is not null, then &lt;code&gt;setReadOnly()&lt;/code&gt;
                  will be called on the passed in Permissions object.
                  The permissions granted to this domain are dynamic; they include
                  both the static permissions passed to this constructor, and any
                  permissions granted to this domain by the current Policy at the
                  time a permission is checked.
                  &lt;p&gt;
                  This constructor is typically used by{@link SecureClassLoader ClassLoaders}and {@link DomainCombiner DomainCombiners} which delegate to
                  &lt;code&gt;Policy&lt;/code&gt; to actively associate the permissions granted to
                  this domain. This constructor affords the
                  Policy provider the opportunity to augment the supplied
                  PermissionCollection to reflect policy changes.
                  &lt;p&gt;                
                <param>
                    codesource the CodeSource associated with this domain                    
                </param>
                <param>
                    permissions the permissions granted to this domain                    
                </param>
                <param>
                    classloader the ClassLoader associated with this domain                    
                </param>
                <param>
                    principals the array of Principals associated with this
                      domain. The contents of the array are copied to protect against
                      subsequent modification.                    
                </param>
                <see>
                    Policy#refresh                    
                </see>
                <see>
                    Policy#getPermissions(ProtectionDomain)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="ProtectionDomain" type="constructor" line="178">
                <params>
                    <param name="codesource" type="CodeSource"/>
                    <param name="permissions" type="PermissionCollection"/>
                    <param name="classloader" type="ClassLoader"/>
                    <param name="principals" type="Principal[]"/>
                </params>
                <scope line="180">
                    <scope line="184"/>
                </scope>
            </method>
            <javadoc line="194">
                Returns the CodeSource of this domain.                
                <return>
                    the CodeSource of this domain which may be null.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCodeSource" type="CodeSource" line="199"/>
            <javadoc line="204">
                Returns the ClassLoader of this domain.                
                <return>
                    the ClassLoader of this domain which may be null.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="210"/>
            <javadoc line="215">
                Returns an array of principals for this domain.                
                <return>
                    a non-null array of principals for this domain.
                      Returns a new array each time this method is called.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPrincipals" type="Principal[]" line="222"/>
            <javadoc line="226">
                Returns the static permissions granted to this domain.                
                <return>
                    the static set of permissions for this domain which may be null.                    
                </return>
                <see>
                    Policy#refresh                    
                </see>
                <see>
                    Policy#getPermissions(ProtectionDomain)                    
                </see>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="233"/>
            <javadoc line="237">
                Check and see if this ProtectionDomain implies the permissions
                  expressed in the Permission object.
                  &lt;p&gt;
                  The set of permissions evaluated is a function of whether the
                  ProtectionDomain was constructed with a static set of permissions
                  or it was bound to a dynamically mapped set of permissions.
                  &lt;p&gt;
                  If the ProtectionDomain was constructed to a{@link #ProtectionDomain(CodeSource,PermissionCollection)statically bound} PermissionCollection then the permission will
                  only be checked against the PermissionCollection supplied at
                  construction.
                  &lt;p&gt;
                  However, if the ProtectionDomain was constructed with
                  the constructor variant which supports{@link #ProtectionDomain(CodeSource,PermissionCollection,ClassLoader,java.security.Principal[]) dynamically binding}permissions, then the permission will be checked against the
                  combination of the PermissionCollection supplied at construction and
                  the current Policy binding.
                  &lt;p&gt;                
                <param>
                    permission the Permission object to check.                    
                </param>
                <return>
                    true if "permission" is implicit to this ProtectionDomain.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="264">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="267">
                    internal permission collection already has AllPermission -                    
                </comment>
                <comment line="268">
                    no need to go to policy                    
                </comment>
                <scope line="266"/>
            </method>
            <javadoc line="281">
                Convert a ProtectionDomain to a String.                
            </javadoc>
            <method name="toString" type="String" line="284">
                <comment line="301">
                    Check if policy is set; we don&apos;t want to load                    
                </comment>
                <comment line="302">
                    the policy prematurely here                    
                </comment>
                <declaration name="pals" type="String" line="285"/>
                <scope line="286">
                    <declaration name="palBuf" type="StringBuilder" line="287"/>
                    <scope line="289"/>
                </scope>
                <declaration name="pc" type="PermissionCollection" line="303"/>
            </method>
            <javadoc line="314">
                Return true (merge policy permissions) in the following cases:
                  . SecurityManager is null
                  . SecurityManager is not null,
                  debug is not null,
                  SecurityManager impelmentation is in bootclasspath,
                  Policy implementation is in bootclasspath
                  (the bootclasspath restrictions avoid recursion)
                  . SecurityManager is not null,
                  debug is null,
                  caller has Policy.getPolicy permission                
            </javadoc>
            <method name="seeAllp" type="boolean" line="329">
                <comment line="346">
                    fall thru and return false                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="330"/>
                <scope line="332"/>
                <scope line="334">
                    <scope line="335">
                        <scope line="338"/>
                    </scope>
                    <scope line="341">
                        <scope line="342"/>
                        <scope line="345"/>
                    </scope>
                </scope>
            </method>
            <method name="mergePermissions" type="PermissionCollection" line="354">
                <comment line="374">
                                        
                </comment>
                <comment line="375">
                    Build a vector of domain permissions for subsequent merge                    
                </comment>
                <comment line="385">
                                        
                </comment>
                <comment line="386">
                    Build a vector of Policy permissions for subsequent merge                    
                </comment>
                <comment line="398">
                                        
                </comment>
                <comment line="399">
                    Weed out the duplicates from the policy. Unless a refresh                    
                </comment>
                <comment line="400">
                    has occured since the pd was consed this should result in                    
                </comment>
                <comment line="401">
                    an empty vector.                    
                </comment>
                <comment line="403">
                    domain vs policy                    
                </comment>
                <comment line="412">
                    The equals() method on some permissions                    
                </comment>
                <comment line="413">
                    have some side effects so this manual                    
                </comment>
                <comment line="414">
                    comparison is sufficient.                    
                </comment>
                <comment line="427">
                    the order of adding to merged perms and permissions                    
                </comment>
                <comment line="428">
                    needs to preserve the bugfix 4301064                    
                </comment>
                <anonymous_class line="360">
                    <method name="run" type="PermissionCollection" line="361">
                        <declaration name="p" type="Policy" line="362"/>
                    </method>
                </anonymous_class>
                <declaration name="perms" type="PermissionCollection" line="358"/>
                <declaration name="mergedPerms" type="Permissions" line="367"/>
                <declaration name="swag" type="int" line="368"/>
                <declaration name="vcap" type="int" line="369"/>
                <declaration name="e" type="Enumeration&lt;Permission&gt;" line="370"/>
                <declaration name="pdVector" type="List&lt;Permission&gt;" line="371"/>
                <declaration name="plVector" type="List&lt;Permission&gt;" line="372"/>
                <scope line="376">
                    <scope line="377">
                        <scope line="379"/>
                    </scope>
                </scope>
                <scope line="387">
                    <scope line="388">
                        <scope line="390"/>
                    </scope>
                </scope>
                <scope line="397">
                    <scope line="402">
                        <scope line="404">
                            <declaration name="pdp" type="Permission" line="405"/>
                            <declaration name="pdpClass" type="Class" line="406"/>
                            <declaration name="pdpActions" type="String" line="407"/>
                            <declaration name="pdpName" type="String" line="408"/>
                            <scope line="409">
                                <declaration name="pp" type="Permission" line="410"/>
                                <scope line="411">
                                    <scope line="416"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="426">
                    <scope line="430"/>
                </scope>
                <scope line="434">
                    <scope line="435"/>
                </scope>
            </method>
            <class name="Key" line="443">
                <javadoc line="443">
                    Used for storing ProtectionDomains as keys in a Map.                    
                </javadoc>
            </class>
            <scope line="448">
                <anonymous_class line="450">
                    <method name="getProtectionDomainCache" type="ProtectionDomainCache" line="451">
                        <anonymous_class line="452">
                            <declaration name="map" type="Map&lt;Key,PermissionCollection&gt;" line="453"/>
                            <method name="put" type="void" line="457">
                                <params>
                                    <param name="pd" type="ProtectionDomain"/>
                                    <param name="pc" type="PermissionCollection"/>
                                </params>
                            </method>
                            <method name="get" type="PermissionCollection" line="460">
                                <params>
                                    <param name="pd" type="ProtectionDomain"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </scope>
        </class>
    </source>