<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.misc.JavaSecurityProtectionDomainAccess"/>
        <import package="sun.misc.JavaSecurityProtectionDomainAccess.ProtectionDomainCache"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.misc.JavaSecurityAccess"/>
        <import package="sun.misc.SharedSecrets"/>
        <class name="ProtectionDomain" line="15">
            <javadoc line="15">
                &lt;p&gt;
                  This ProtectionDomain class encapsulates the characteristics of a domain,
                  which encloses a set of classes whose instances are granted a set
                  of permissions when being executed on behalf of a given set of Principals.
                  &lt;p&gt;
                  A static set of permissions can be bound to a ProtectionDomain when it is
                  constructed; such permissions are granted to the domain regardless of the
                  Policy in force. However, to support dynamic security policies, a
                  ProtectionDomain can also be constructed such that it is dynamically
                  mapped to a set of permissions by the current Policy whenever a permission
                  is checked.
                  &lt;p&gt;                
                <author>
                    Li Gong                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
                <author>
                    Gary Ellison                    
                </author>
            </javadoc>
            <scope line="33">
                <anonymous_class line="34">
                    <method name="doIntersectionPrivilege" type="T" line="35">
                        <params>
                            <param name="action" type="PrivilegedAction&lt;T&gt;"/>
                            <param name="stack" type="AccessControlContext"/>
                            <param name="context" type="AccessControlContext"/>
                        </params>
                        <scope line="36"/>
                    </method>
                    <method name="doIntersectionPrivilege" type="T" line="41">
                        <params>
                            <param name="action" type="PrivilegedAction&lt;T&gt;"/>
                            <param name="context" type="AccessControlContext"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
            <declaration name="codesource" type="CodeSource" line="47"/>
            <declaration name="classloader" type="ClassLoader" line="48"/>
            <declaration name="principals" type="Principal[]" line="49"/>
            <declaration name="permissions" type="PermissionCollection" line="50"/>
            <declaration name="hasAllPerm" type="boolean" line="51"/>
            <declaration name="staticPermissions" type="boolean" line="52"/>
            <declaration name="key" type="Key" line="53"/>
            <declaration name="debug" type="Debug" line="54"/>
            <javadoc line="55">
                Creates a new ProtectionDomain with the given CodeSource and
                  Permissions. If the permissions object is not null, then
                  &lt;code&gt;setReadOnly())&lt;/code&gt; will be called on the passed in
                  Permissions object. The only permissions granted to this domain
                  are the ones specified; the current Policy will not be consulted.                
                <param>
                    codesource the codesource associated with this domain                    
                </param>
                <param>
                    permissions the permissions granted to this domain                    
                </param>
            </javadoc>
            <method name="ProtectionDomain" type="constructor" line="64">
                <params>
                    <param name="codesource" type="CodeSource"/>
                    <param name="permissions" type="PermissionCollection"/>
                </params>
                <scope line="66">
                    <scope line="69"/>
                </scope>
            </method>
            <javadoc line="77">
                Creates a new ProtectionDomain qualified by the given CodeSource,
                  Permissions, ClassLoader and array of Principals. If the
                  permissions object is not null, then &lt;code&gt;setReadOnly()&lt;/code&gt;
                  will be called on the passed in Permissions object.
                  The permissions granted to this domain are dynamic; they include
                  both the static permissions passed to this constructor, and any
                  permissions granted to this domain by the current Policy at the
                  time a permission is checked.
                  &lt;p&gt;
                  This constructor is typically used by{@link SecureClassLoader ClassLoaders}and {@link DomainCombiner DomainCombiners} which delegate to
                  &lt;code&gt;Policy&lt;/code&gt; to actively associate the permissions granted to
                  this domain. This constructor affords the
                  Policy provider the opportunity to augment the supplied
                  PermissionCollection to reflect policy changes.
                  &lt;p&gt;                
                <param>
                    codesource the CodeSource associated with this domain                    
                </param>
                <param>
                    permissions the permissions granted to this domain                    
                </param>
                <param>
                    classloader the ClassLoader associated with this domain                    
                </param>
                <param>
                    principals the array of Principals associated with this
                      domain. The contents of the array are copied to protect against
                      subsequent modification.                    
                </param>
                <see>
                    Policy#refresh                    
                </see>
                <see>
                    Policy#getPermissions(ProtectionDomain)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="ProtectionDomain" type="constructor" line="103">
                <params>
                    <param name="codesource" type="CodeSource"/>
                    <param name="permissions" type="PermissionCollection"/>
                    <param name="classloader" type="ClassLoader"/>
                    <param name="principals" type="Principal[]"/>
                </params>
                <scope line="105">
                    <scope line="108"/>
                </scope>
            </method>
            <javadoc line="116">
                Returns the CodeSource of this domain.                
                <return>
                    the CodeSource of this domain which may be null.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCodeSource" type="CodeSource" line="121"/>
            <javadoc line="124">
                Returns the ClassLoader of this domain.                
                <return>
                    the ClassLoader of this domain which may be null.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="129"/>
            <javadoc line="132">
                Returns an array of principals for this domain.                
                <return>
                    a non-null array of principals for this domain.
                      Returns a new array each time this method is called.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPrincipals" type="Principal[]" line="138"/>
            <javadoc line="141">
                Returns the static permissions granted to this domain.                
                <return>
                    the static set of permissions for this domain which may be null.                    
                </return>
                <see>
                    Policy#refresh                    
                </see>
                <see>
                    Policy#getPermissions(ProtectionDomain)                    
                </see>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="147"/>
            <javadoc line="150">
                Check and see if this ProtectionDomain implies the permissions
                  expressed in the Permission object.
                  &lt;p&gt;
                  The set of permissions evaluated is a function of whether the
                  ProtectionDomain was constructed with a static set of permissions
                  or it was bound to a dynamically mapped set of permissions.
                  &lt;p&gt;
                  If the ProtectionDomain was constructed to a{@link #ProtectionDomain(CodeSource,PermissionCollection)statically bound} PermissionCollection then the permission will
                  only be checked against the PermissionCollection supplied at
                  construction.
                  &lt;p&gt;
                  However, if the ProtectionDomain was constructed with
                  the constructor variant which supports{@link #ProtectionDomain(CodeSource,PermissionCollection,ClassLoader,java.security.Principal[]) dynamically binding}permissions, then the permission will be checked against the
                  combination of the PermissionCollection supplied at construction and
                  the current Policy binding.
                  &lt;p&gt;                
                <param>
                    permission the Permission object to check.                    
                </param>
                <return>
                    true if &quot;permission&quot; is implicit to this ProtectionDomain.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="170">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="171"/>
            </method>
            <javadoc line="178">
                Convert a ProtectionDomain to a String.                
            </javadoc>
            <method name="toString" type="String" line="181">
                <declaration name="pals" type="String" line="182"/>
                <scope line="183">
                    <declaration name="palBuf" type="StringBuilder" line="184"/>
                    <scope line="185"/>
                </scope>
                <declaration name="pc" type="PermissionCollection" line="192"/>
            </method>
            <javadoc line="195">
                Return true (merge policy permissions) in the following cases:
                  . SecurityManager is null
                  . SecurityManager is not null,
                  debug is not null,
                  SecurityManager impelmentation is in bootclasspath,
                  Policy implementation is in bootclasspath
                  (the bootclasspath restrictions avoid recursion)
                  . SecurityManager is not null,
                  debug is null,
                  caller has Policy.getPolicy permission                
            </javadoc>
            <method name="seeAllp" type="boolean" line="207">
                <declaration name="sm" type="SecurityManager" line="208"/>
                <scope line="209"/>
                <scope line="212">
                    <scope line="213">
                        <scope line="214"/>
                    </scope>
                    <scope line="218">
                        <scope line="219"/>
                        <scope line="223"/>
                    </scope>
                </scope>
            </method>
            <method name="mergePermissions" type="PermissionCollection" line="229">
                <anonymous_class line="231">
                    <method name="run" type="PermissionCollection" line="232">
                        <declaration name="p" type="Policy" line="233"/>
                    </method>
                </anonymous_class>
                <declaration name="perms" type="PermissionCollection" line="231"/>
                <declaration name="mergedPerms" type="Permissions" line="238"/>
                <declaration name="swag" type="int" line="239"/>
                <declaration name="vcap" type="int" line="240"/>
                <declaration name="e" type="Enumeration&amp;lt;Permission&amp;gt;" line="241"/>
                <declaration name="pdVector" type="List&amp;lt;Permission&amp;gt;" line="242"/>
                <declaration name="plVector" type="List&amp;lt;Permission&amp;gt;" line="243"/>
                <scope line="244">
                    <scope line="245">
                        <scope line="247"/>
                    </scope>
                </scope>
                <scope line="252">
                    <scope line="253">
                        <scope line="255"/>
                    </scope>
                </scope>
                <scope line="261">
                    <scope line="262">
                        <scope line="264">
                            <declaration name="pdp" type="Permission" line="265"/>
                            <declaration name="pdpClass" type="Class" line="266"/>
                            <declaration name="pdpActions" type="String" line="267"/>
                            <declaration name="pdpName" type="String" line="268"/>
                            <scope line="269">
                                <declaration name="pp" type="Permission" line="270"/>
                                <scope line="271">
                                    <scope line="272"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="281">
                    <scope line="282"/>
                </scope>
                <scope line="286">
                    <scope line="287"/>
                </scope>
            </method>
            <class name="Key" line="293">
                <javadoc line="293">
                    Used for storing ProtectionDomains as keys in a Map.                    
                </javadoc>
            </class>
            <scope line="298">
                <anonymous_class line="299">
                    <method name="getProtectionDomainCache" type="ProtectionDomainCache" line="300">
                        <anonymous_class line="301">
                            <declaration name="map" type="Map&amp;lt;Key,PermissionCollection&amp;gt;" line="302"/>
                            <method name="put" type="void" line="303">
                                <params>
                                    <param name="pd" type="ProtectionDomain"/>
                                    <param name="pc" type="PermissionCollection"/>
                                </params>
                            </method>
                            <method name="get" type="PermissionCollection" line="306">
                                <params>
                                    <param name="pd" type="ProtectionDomain"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </scope>
        </class>
    </source>