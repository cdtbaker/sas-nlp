<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.io"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.security.Provider.Service"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.CipherSpi"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.NoSuchPaddingException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="Signature" line="49">
            <extends class="SignatureSpi"/>
            <comment line="125">
                The algorithm for this signature object.
                 This value is used to map an OID to the particular algorithm.
                 The mapping is done in AlgorithmObject.algOID(String algorithm)                
            </comment>
            <comment line="132">
                The provider                
            </comment>
            <comment line="171">
                name of the special signature alg                
            </comment>
            <comment line="174">
                name of the equivalent cipher alg                
            </comment>
            <comment line="177">
                all the services we need to lookup for compatibility with Cipher                
            </comment>
            <comment line="404">
                return an implementation for NONEwithRSA, which is a special case                
            </comment>
            <comment line="405">
                because of the Cipher.RSA/ECB/PKCS1Padding compatibility wrapper                
            </comment>
            <comment line="889">
                The following class allows providers to extend from SignatureSpi
                 rather than from Signature. It represents a Signature with an
                 encapsulated, provider-supplied SPI object (of type SignatureSpi).
                 If the provider implementation is an instance of SignatureSpi, the
                 getInstance() methods above return an instance of this class, with
                 the SPI object encapsulated.
                
                 Note: All SPI methods from the original Signature class have been
                 moved up the hierarchy into a new class (SignatureSpi), which has
                 been interposed in the hierarchy between the API (Signature)
                 and its original parent (Object).                
            </comment>
            <comment line="1206">
                adapter for RSA/ECB/PKCS1Padding ciphers                
            </comment>
            <javadoc line="49">
                The Signature class is used to provide applications the functionality
                  of a digital signature algorithm. Digital signatures are used for
                  authentication and integrity assurance of digital data.
                  &lt;p&gt; The signature algorithm can be, among others, the NIST standard
                  DSA, using DSA and SHA-1. The DSA algorithm using the
                  SHA-1 message digest algorithm can be specified as &lt;tt&gt;SHA1withDSA&lt;/tt&gt;.
                  In the case of RSA, there are multiple choices for the message digest
                  algorithm, so the signing algorithm could be specified as, for example,
                  &lt;tt&gt;MD2withRSA&lt;/tt&gt;, &lt;tt&gt;MD5withRSA&lt;/tt&gt;, or &lt;tt&gt;SHA1withRSA&lt;/tt&gt;.
                  The algorithm name must be specified, as there is no default.
                  &lt;p&gt; A Signature object can be used to generate and verify digital
                  signatures.
                  &lt;p&gt; There are three phases to the use of a Signature object for
                  either signing data or verifying a signature:&lt;ol&gt;
                  &lt;li&gt;Initialization, with either
                  &lt;ul&gt;
                  &lt;li&gt;a public key, which initializes the signature for
                  verification (see {@link #initVerify(PublicKey) initVerify}), or
                  &lt;li&gt;a private key (and optionally a Secure Random Number Generator),
                  which initializes the signature for signing
                  (see {@link #initSign(PrivateKey)}and {@link #initSign(PrivateKey,SecureRandom)}).
                  &lt;/ul&gt;&lt;p&gt;
                  &lt;li&gt;Updating&lt;p&gt;
                  &lt;p&gt;Depending on the type of initialization, this will update the
                  bytes to be signed or verified. See the{@link #update(byte) update} methods.&lt;p&gt;
                  &lt;li&gt;Signing or Verifying a signature on all updated bytes. See the{@link #sign() sign} methods and the {@link #verify(byte[]) verify}method.
                  &lt;/ol&gt;
                  &lt;p&gt;Note that this class is abstract and extends from
                  &lt;code&gt;SignatureSpi&lt;/code&gt; for historical reasons.
                  Application developers should only take notice of the methods defined in
                  this &lt;code&gt;Signature&lt;/code&gt; class; all the methods in
                  the superclass are intended for cryptographic service providers who wish to
                  supply their own implementations of digital signature algorithms.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;Signature&lt;/code&gt; algorithms:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;SHA1withDSA&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;SHA1withRSA&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;SHA256withRSA&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Signature&quot;&gt;
                  Signature section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Benjamin Renaud                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="121"/>
            <declaration name="algorithm" type="String" line="129"/>
            <declaration name="provider" type="Provider" line="132"/>
            <declaration name="UNINITIALIZED" type="int" line="134"/>
            <javadoc line="134">
                Possible {@link #state} value, signifying that
                  this signature object has not yet been initialized.                
            </javadoc>
            <declaration name="SIGN" type="int" line="140"/>
            <javadoc line="140">
                Possible {@link #state} value, signifying that
                  this signature object has been initialized for signing.                
            </javadoc>
            <declaration name="VERIFY" type="int" line="146"/>
            <javadoc line="146">
                Possible {@link #state} value, signifying that
                  this signature object has been initialized for verification.                
            </javadoc>
            <declaration name="state" type="int" line="152"/>
            <javadoc line="152">
                Current state of this signature object.                
            </javadoc>
            <javadoc line="157">
                Creates a Signature object for the specified algorithm.                
                <param>
                    algorithm the standard string name of the algorithm.
                      See the Signature section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#Signature">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
            </javadoc>
            <method name="Signature" type="constructor" line="166">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <declaration name="RSA_SIGNATURE" type="String" line="171"/>
            <declaration name="RSA_CIPHER" type="String" line="174"/>
            <declaration name="rsaIds" type="List&lt;ServiceId&gt;" line="177"/>
            <javadoc line="187">
                Returns a Signature object that implements the specified signature
                  algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new Signature object encapsulating the
                  SignatureSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the algorithm requested.
                      See the Signature section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#Signature">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new Signature object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      Signature implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="Signature" line="215">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="227">
                    try services until we find an Spi or a working Signature subclass                    
                </comment>
                <comment line="234">
                    must be a subclass of Signature, disable dynamic selection                    
                </comment>
                <declaration name="list" type="List&lt;Service&gt;" line="216"/>
                <scope line="217"/>
                <scope line="219"/>
                <declaration name="t" type="Iterator&lt;Service&gt;" line="222"/>
                <scope line="223"/>
                <declaration name="failure" type="NoSuchAlgorithmException" line="228"/>
                <scope line="229">
                    <declaration name="s" type="Service" line="230"/>
                    <scope line="231"/>
                    <scope line="233">
                        <scope line="235">
                            <declaration name="instance" type="Instance" line="236"/>
                        </scope>
                        <scope line="239"/>
                    </scope>
                </scope>
            </method>
            <method name="getInstance" type="Signature" line="247">
                <params>
                    <param name="instance" type="Instance"/>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="sig" type="Signature" line="248"/>
                <scope line="249"/>
                <scope line="251">
                    <declaration name="spi" type="SignatureSpi" line="252"/>
                </scope>
            </method>
            <declaration name="signatureInfo" type="Map&lt;String,Boolean&gt;" line="259"/>
            <scope line="261">
                <declaration name="TRUE" type="Boolean" line="263"/>
            </scope>
            <method name="isSpi" type="boolean" line="277">
                <params>
                    <param name="s" type="Service"/>
                </params>
                <comment line="279">
                    must be a CipherSpi, which we can wrap with the CipherAdapter                    
                </comment>
                <comment line="287">
                    Signature extends SignatureSpi                    
                </comment>
                <comment line="288">
                    so it is a &quot;real&quot; Spi if it is an                    
                </comment>
                <comment line="289">
                    instance of SignatureSpi but not Signature                    
                </comment>
                <comment line="300">
                    something is wrong, assume not an SPI                    
                </comment>
                <scope line="278"/>
                <declaration name="className" type="String" line="282"/>
                <declaration name="result" type="Boolean" line="283"/>
                <scope line="284">
                    <scope line="285">
                        <declaration name="instance" type="Object" line="286"/>
                        <declaration name="r" type="boolean" line="290"/>
                        <scope line="292"/>
                    </scope>
                    <scope line="299"/>
                </scope>
            </method>
            <javadoc line="307">
                Returns a Signature object that implements the specified signature
                  algorithm.
                  &lt;p&gt; A new Signature object encapsulating the
                  SignatureSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the name of the algorithm requested.
                      See the Signature section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#Signature">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new Signature object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a SignatureSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="Signature" line="342">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <comment line="344">
                    exception compatibility with existing code                    
                </comment>
                <scope line="343">
                    <scope line="345"/>
                    <declaration name="p" type="Provider" line="348"/>
                    <scope line="349"/>
                </scope>
                <declaration name="instance" type="Instance" line="355"/>
            </method>
            <javadoc line="360">
                Returns a Signature object that implements the specified
                  signature algorithm.
                  &lt;p&gt; A new Signature object encapsulating the
                  SignatureSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the name of the algorithm requested.
                      See the Signature section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#Signature">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new Signature object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a SignatureSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider is null.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="Signature" line="390">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <comment line="392">
                    exception compatibility with existing code                    
                </comment>
                <scope line="391">
                    <scope line="393"/>
                </scope>
                <declaration name="instance" type="Instance" line="398"/>
            </method>
            <method name="getInstanceRSA" type="Signature" line="406">
                <params>
                    <param name="p" type="Provider"/>
                </params>
                <comment line="407">
                    try Signature first                    
                </comment>
                <comment line="413">
                    check Cipher                    
                </comment>
                <comment line="418">
                    throw Signature style exception message to avoid confusion,                    
                </comment>
                <comment line="419">
                    but append Cipher exception as cause                    
                </comment>
                <declaration name="s" type="Service" line="408"/>
                <scope line="409">
                    <declaration name="instance" type="Instance" line="410"/>
                </scope>
                <scope line="414">
                    <declaration name="c" type="Cipher" line="415"/>
                </scope>
                <scope line="417"/>
            </method>
            <javadoc line="425">
                Returns the provider of this signature object.                
                <return>
                    the provider of this signature object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="430"/>
            <method name="chooseFirstProvider" type="void" line="435">
                <comment line="436">
                    empty, overridden in Delegate                    
                </comment>
            </method>
            <javadoc line="439">
                Initializes this object for verification. If this method is called
                  again with a different argument, it negates the effect
                  of this call.                
                <param>
                    publicKey the public key of the identity whose signature is
                      going to be verified.                    
                </param>
                <exception>
                    InvalidKeyException if the key is invalid.                    
                </exception>
            </javadoc>
            <method name="initVerify" type="void" line="450">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
            </method>
            <javadoc line="455">
                Initializes this object for verification, using the public key from
                  the given certificate.
                  &lt;p&gt;If the certificate is of type X.509 and has a &lt;i&gt;key usage&lt;/i&gt;
                  extension field marked as critical, and the value of the &lt;i&gt;key usage&lt;/i&gt;
                  extension field implies that the public key in
                  the certificate and its corresponding private key are not
                  supposed to be used for digital signatures, an
                  &lt;code&gt;InvalidKeyException&lt;/code&gt; is thrown.                
                <param>
                    certificate the certificate of the identity whose signature is
                      going to be verified.                    
                </param>
                <exception>
                    InvalidKeyException  if the public key in the certificate
                      is not encoded properly or does not include required  parameter
                      information or cannot be used for digital signature purposes.                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="initVerify" type="void" line="474">
                <params>
                    <param name="certificate" type="Certificate"/>
                </params>
                <comment line="475">
                    If the certificate is of type X509Certificate,                    
                </comment>
                <comment line="476">
                    we should check whether it has a Key Usage                    
                </comment>
                <comment line="477">
                    extension marked as critical.                    
                </comment>
                <comment line="479">
                    Check whether the cert has a key usage extension                    
                </comment>
                <comment line="480">
                    marked as a critical extension.                    
                </comment>
                <comment line="481">
                    The OID for KeyUsage extension is 2.5.29.15.                    
                </comment>
                <comment line="488">
                    keyUsageInfo[0] is for digitalSignature.                    
                </comment>
                <scope line="478">
                    <declaration name="cert" type="X509Certificate" line="482"/>
                    <declaration name="critSet" type="Set&lt;String&gt;" line="483"/>
                    <scope line="486">
                        <declaration name="keyUsageInfo" type="boolean[]" line="487"/>
                    </scope>
                </scope>
                <declaration name="publicKey" type="PublicKey" line="494"/>
            </method>
            <javadoc line="499">
                Initialize this object for signing. If this method is called
                  again with a different argument, it negates the effect
                  of this call.                
                <param>
                    privateKey the private key of the identity whose signature
                      is going to be generated.                    
                </param>
                <exception>
                    InvalidKeyException if the key is invalid.                    
                </exception>
            </javadoc>
            <method name="initSign" type="void" line="510">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
            </method>
            <javadoc line="515">
                Initialize this object for signing. If this method is called
                  again with a different argument, it negates the effect
                  of this call.                
                <param>
                    privateKey the private key of the identity whose signature
                      is going to be generated.                    
                </param>
                <param>
                    random the source of randomness for this signature.                    
                </param>
                <exception>
                    InvalidKeyException if the key is invalid.                    
                </exception>
            </javadoc>
            <method name="initSign" type="void" line="528">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="533">
                Returns the signature bytes of all the data updated.
                  The format of the signature depends on the underlying
                  signature scheme.
                  &lt;p&gt;A call to this method resets this signature object to the state
                  it was in when previously initialized for signing via a
                  call to &lt;code&gt;initSign(PrivateKey)&lt;/code&gt;. That is, the object is
                  reset and available to generate another signature from the same
                  signer, if desired, via new calls to &lt;code&gt;update&lt;/code&gt; and
                  &lt;code&gt;sign&lt;/code&gt;.                
                <return>
                    the signature bytes of the signing operation's result.                    
                </return>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly or if this signature algorithm is unable to
                      process the input data provided.                    
                </exception>
            </javadoc>
            <method name="sign" type="byte[]" line="551">
                <scope line="552"/>
            </method>
            <javadoc line="559">
                Finishes the signature operation and stores the resulting signature
                  bytes in the provided buffer &lt;code&gt;outbuf&lt;/code&gt;, starting at
                  &lt;code&gt;offset&lt;/code&gt;.
                  The format of the signature depends on the underlying
                  signature scheme.
                  &lt;p&gt;This signature object is reset to its initial state (the state it
                  was in after a call to one of the &lt;code&gt;initSign&lt;/code&gt; methods) and
                  can be reused to generate further signatures with the same private key.                
                <param>
                    outbuf buffer for the signature result.                    
                </param>
                <param>
                    offset offset into <code>outbuf</code> where the signature is
                      stored.                    
                </param>
                <param>
                    len number of bytes within <code>outbuf</code> allotted for the
                      signature.                    
                </param>
                <return>
                    the number of bytes placed into <code>outbuf</code>.                    
                </return>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly, if this signature algorithm is unable to
                      process the input data provided, or if <code>len</code> is less
                      than the actual signature length.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="sign" type="int" line="588">
                <params>
                    <param name="outbuf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="589"/>
                <scope line="592"/>
                <scope line="596"/>
            </method>
            <javadoc line="603">
                Verifies the passed-in signature.
                  &lt;p&gt;A call to this method resets this signature object to the state
                  it was in when previously initialized for verification via a
                  call to &lt;code&gt;initVerify(PublicKey)&lt;/code&gt;. That is, the object is
                  reset and available to verify another signature from the identity
                  whose public key was specified in the call to &lt;code&gt;initVerify&lt;/code&gt;.                
                <param>
                    signature the signature bytes to be verified.                    
                </param>
                <return>
                    true if the signature was verified, false if not.                    
                </return>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly, the passed-in signature is improperly
                      encoded or of the wrong type, if this signature algorithm is unable to
                      process the input data provided, etc.                    
                </exception>
            </javadoc>
            <method name="verify" type="boolean" line="621">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
                <scope line="622"/>
            </method>
            <javadoc line="629">
                Verifies the passed-in signature in the specified array
                  of bytes, starting at the specified offset.
                  &lt;p&gt;A call to this method resets this signature object to the state
                  it was in when previously initialized for verification via a
                  call to &lt;code&gt;initVerify(PublicKey)&lt;/code&gt;. That is, the object is
                  reset and available to verify another signature from the identity
                  whose public key was specified in the call to &lt;code&gt;initVerify&lt;/code&gt;.                
                <param>
                    signature the signature bytes to be verified.                    
                </param>
                <param>
                    offset the offset to start from in the array of bytes.                    
                </param>
                <param>
                    length the number of bytes to use, starting at offset.                    
                </param>
                <return>
                    true if the signature was verified, false if not.                    
                </return>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly, the passed-in signature is improperly
                      encoded or of the wrong type, if this signature algorithm is unable to
                      process the input data provided, etc.                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>signature</code>
                      byte array is null, or the <code>offset</code> or <code>length</code>
                      is less than 0, or the sum of the <code>offset</code> and
                      <code>length</code> is greater than the length of the
                      <code>signature</code> byte array.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="verify" type="boolean" line="658">
                <params>
                    <param name="signature" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="659">
                    <scope line="661"/>
                </scope>
            </method>
            <javadoc line="671">
                Updates the data to be signed or verified by a byte.                
                <param>
                    b the byte to use for the update.                    
                </param>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="679">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <scope line="680"/>
                <scope line="682"/>
            </method>
            <javadoc line="688">
                Updates the data to be signed or verified, using the specified
                  array of bytes.                
                <param>
                    data the byte array to use for the update.                    
                </param>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="697">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="701">
                Updates the data to be signed or verified, using the specified
                  array of bytes, starting at the specified offset.                
                <param>
                    data the array of bytes.                    
                </param>
                <param>
                    off the offset to start from in the array of bytes.                    
                </param>
                <param>
                    len the number of bytes to use, starting at offset.                    
                </param>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="713">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="714"/>
                <scope line="716"/>
            </method>
            <javadoc line="722">
                Updates the data to be signed or verified using the specified
                  ByteBuffer. Processes the &lt;code&gt;data.remaining()&lt;/code&gt; bytes
                  starting at at &lt;code&gt;data.position()&lt;/code&gt;.
                  Upon return, the buffer&apos;s position will be equal to its limit;
                  its limit will not have changed.                
                <param>
                    data the ByteBuffer                    
                </param>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="update" type="void" line="735">
                <params>
                    <param name="data" type="ByteBuffer"/>
                </params>
                <scope line="736"/>
                <scope line="740"/>
            </method>
            <javadoc line="746">
                Returns the name of the algorithm for this signature object.                
                <return>
                    the name of the algorithm for this signature object.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="751"/>
            <javadoc line="755">
                Returns a string representation of this signature object,
                  providing information that includes the state of the object
                  and the name of the algorithm used.                
                <return>
                    a string representation of this signature object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="762">
                <declaration name="initState" type="String" line="763"/>
            </method>
            <javadoc line="778">
                Sets the specified algorithm parameter to the specified value.
                  This method supplies a general-purpose mechanism through
                  which it is possible to set the various parameters of this object.
                  A parameter may be any settable parameter for the algorithm, such as
                  a parameter size, or a source of random bits for signature generation
                  (if appropriate), or an indication of whether or not to perform
                  a specific but optional computation. A uniform algorithm-specific
                  naming scheme for each parameter is desirable but left unspecified
                  at this time.                
                <param>
                    param the string identifier of the parameter.                    
                </param>
                <param>
                    value the parameter value.                    
                </param>
                <exception>
                    InvalidParameterException if <code>param</code> is an
                      invalid parameter for this signature algorithm engine,
                      the parameter is already set
                      and cannot be set again, a security exception occurs, and so on.                    
                </exception>
                <see>
                    #getParameter                    
                </see>
                <deprecated>
                    Use{@link #setParameter(java.security.spec.AlgorithmParameterSpec)setParameter}.                    
                </deprecated>
            </javadoc>
            <method name="setParameter" type="void" line="805">
                <params>
                    <param name="param" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="809">
                Initializes this signature engine with the specified parameter set.                
                <param>
                    params the parameters                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this signature engine                    
                </exception>
                <see>
                    #getParameters                    
                </see>
            </javadoc>
            <method name="setParameter" type="void" line="820">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="824">
                Returns the parameters used with this signature object.
                  &lt;p&gt;The returned parameters may be the same that were used to initialize
                  this signature, or may contain a combination of default and randomly
                  generated parameter values used by the underlying signature
                  implementation if this signature requires algorithm parameters but
                  was not initialized with any.                
                <return>
                    the parameters used with this signature, or null if this
                      signature does not use any parameters.                    
                </return>
                <see>
                    #setParameter(AlgorithmParameterSpec)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParameters" type="AlgorithmParameters" line="839"/>
            <javadoc line="843">
                Gets the value of the specified algorithm parameter. This method
                  supplies a general-purpose mechanism through which it is possible to
                  get the various parameters of this object. A parameter may be any
                  settable parameter for the algorithm, such as a parameter size, or
                  a source of random bits for signature generation (if appropriate),
                  or an indication of whether or not to perform a specific but optional
                  computation. A uniform algorithm-specific naming scheme for each
                  parameter is desirable but left unspecified at this time.                
                <param>
                    param the string name of the parameter.                    
                </param>
                <return>
                    the object that represents the parameter value, or null if
                      there is none.                    
                </return>
                <exception>
                    InvalidParameterException if <code>param</code> is an invalid
                      parameter for this engine, or another exception occurs while
                      trying to get this parameter.                    
                </exception>
                <see>
                    #setParameter(String,Object)                    
                </see>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getParameter" type="Object" line="868">
                <params>
                    <param name="param" type="String"/>
                </params>
            </method>
            <javadoc line="872">
                Returns a clone if the implementation is cloneable.                
                <return>
                    a clone if the implementation is cloneable.                    
                </return>
                <exception>
                    CloneNotSupportedException if this is called
                      on an implementation that does not support <code>Cloneable</code>.                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="880">
                <scope line="881"/>
                <scope line="883"/>
            </method>
            <class name="Delegate" line="902">
                <extends class="Signature"/>
                <comment line="905">
                    The provider implementation (delegate)                    
                </comment>
                <comment line="906">
                    filled in once the provider is selected                    
                </comment>
                <comment line="909">
                    lock for mutex during provider selection                    
                </comment>
                <comment line="912">
                    next service to try in provider selection                    
                </comment>
                <comment line="913">
                    null once provider is selected                    
                </comment>
                <comment line="916">
                    remaining services to try in provider selection                    
                </comment>
                <comment line="917">
                    null once provider is selected                    
                </comment>
                <comment line="920">
                    constructor                    
                </comment>
                <comment line="927">
                    used with delayed provider selection                    
                </comment>
                <comment line="980">
                    max number of debug warnings to print from chooseFirstProvider()                    
                </comment>
                <declaration name="sigSpi" type="SignatureSpi" line="906"/>
                <declaration name="lock" type="Object" line="909"/>
                <declaration name="firstService" type="Service" line="913"/>
                <declaration name="serviceIterator" type="Iterator&lt;Service&gt;" line="917"/>
                <method name="Delegate" type="constructor" line="920">
                    <params>
                        <param name="sigSpi" type="SignatureSpi"/>
                        <param name="algorithm" type="String"/>
                    </params>
                    <comment line="923">
                        no lock needed                        
                    </comment>
                </method>
                <method name="Delegate" type="constructor" line="928">
                    <params>
                        <param name="service" type="Service"/>
                        <param name="iterator" type="Iterator<Service>"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
                <javadoc line="935">
                    Returns a clone if the delegate is cloneable.                    
                    <return>
                        a clone if the delegate is cloneable.                        
                    </return>
                    <exception>
                        CloneNotSupportedException if this is called on a
                          delegate that does not support <code>Cloneable</code>.                        
                    </exception>
                </javadoc>
                <method name="clone" type="Object" line="943">
                    <comment line="947">
                        Because &apos;algorithm&apos; and &apos;provider&apos; are private                        
                    </comment>
                    <comment line="948">
                        members of our supertype, we must perform a cast to                        
                    </comment>
                    <comment line="949">
                        access them.                        
                    </comment>
                    <scope line="945">
                        <declaration name="sigSpiClone" type="SignatureSpi" line="946"/>
                        <declaration name="that" type="Signature" line="950"/>
                    </scope>
                    <scope line="954"/>
                </method>
                <method name="newInstance" type="SignatureSpi" line="960">
                    <params>
                        <param name="s" type="Service"/>
                    </params>
                    <comment line="962">
                        must be NONEwithRSA                        
                    </comment>
                    <scope line="961">
                        <scope line="963">
                            <declaration name="c" type="Cipher" line="964"/>
                        </scope>
                        <scope line="966"/>
                    </scope>
                    <scope line="969">
                        <declaration name="o" type="Object" line="970"/>
                        <scope line="971"/>
                    </scope>
                </method>
                <declaration name="warnCount" type="int" line="980"/>
                <javadoc line="982">
                    Choose the Spi from the first provider available. Used if
                      delayed provider selection is not possible because initSign()/
                      initVerify() is not the first method called.                    
                </javadoc>
                <method name="chooseFirstProvider" type="void" line="987">
                    <comment line="1022">
                        not needed any more                        
                    </comment>
                    <scope line="988"/>
                    <scope line="991">
                        <scope line="992"/>
                        <scope line="995">
                            <declaration name="w" type="int" line="996"/>
                            <scope line="997">
                                <scope line="1000"/>
                            </scope>
                        </scope>
                        <declaration name="lastException" type="Exception" line="1007"/>
                        <scope line="1008">
                            <declaration name="s" type="Service" line="1009"/>
                            <scope line="1010"/>
                            <scope line="1013"/>
                            <scope line="1016"/>
                            <scope line="1019"/>
                            <scope line="1026"/>
                        </scope>
                        <declaration name="e" type="ProviderException" line="1030"/>
                        <scope line="1032"/>
                    </scope>
                </method>
                <method name="chooseProvider" type="void" line="1040">
                    <params>
                        <param name="type" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                    <comment line="1055">
                        if provider says it does not support this key, ignore it                        
                    </comment>
                    <comment line="1059">
                        if instance is not a SignatureSpi, ignore it                        
                    </comment>
                    <comment line="1072">
                        NoSuchAlgorithmException from newInstance()                        
                    </comment>
                    <comment line="1073">
                        InvalidKeyException from init()                        
                    </comment>
                    <comment line="1074">
                        RuntimeException (ProviderException) from init()                        
                    </comment>
                    <comment line="1080">
                        no working provider found, fail                        
                    </comment>
                    <scope line="1041">
                        <scope line="1042"/>
                        <declaration name="lastException" type="Exception" line="1046"/>
                        <scope line="1047">
                            <declaration name="s" type="Service" line="1048"/>
                            <scope line="1049"/>
                            <scope line="1052"/>
                            <scope line="1056"/>
                            <scope line="1060"/>
                            <scope line="1063">
                                <declaration name="spi" type="SignatureSpi" line="1064"/>
                            </scope>
                            <scope line="1071">
                                <scope line="1075"/>
                            </scope>
                        </scope>
                        <scope line="1081"/>
                        <scope line="1084"/>
                        <declaration name="k" type="String" line="1087"/>
                    </scope>
                </method>
                <declaration name="I_PUB" type="int" line="1094"/>
                <declaration name="I_PRIV" type="int" line="1095"/>
                <declaration name="I_PRIV_SR" type="int" line="1096"/>
                <method name="init" type="void" line="1099">
                    <params>
                        <param name="spi" type="SignatureSpi"/>
                        <param name="type" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineInitVerify" type="void" line="1116">
                    <params>
                        <param name="publicKey" type="PublicKey"/>
                    </params>
                    <scope line="1117"/>
                    <scope line="1119"/>
                </method>
                <method name="engineInitSign" type="void" line="1125">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                    </params>
                    <scope line="1126"/>
                    <scope line="1128"/>
                </method>
                <method name="engineInitSign" type="void" line="1134">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="sr" type="SecureRandom"/>
                    </params>
                    <scope line="1135"/>
                    <scope line="1137"/>
                </method>
                <method name="engineUpdate" type="void" line="1142">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="1148">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="1153">
                    <params>
                        <param name="data" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="engineSign" type="byte[]" line="1158"/>
                <method name="engineSign" type="int" line="1164">
                    <params>
                        <param name="outbuf" type="byte[]"/>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineVerify" type="boolean" line="1170">
                    <params>
                        <param name="sigBytes" type="byte[]"/>
                    </params>
                </method>
                <method name="engineVerify" type="boolean" line="1176">
                    <params>
                        <param name="sigBytes" type="byte[]"/>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="engineSetParameter" type="void" line="1182">
                    <params>
                        <param name="param" type="String"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="engineSetParameter" type="void" line="1188">
                    <params>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="engineGetParameter" type="Object" line="1194">
                    <params>
                        <param name="param" type="String"/>
                    </params>
                </method>
                <method name="engineGetParameters" type="AlgorithmParameters" line="1199"/>
            </class>
            <class name="CipherAdapter" line="1206">
                <extends class="SignatureSpi"/>
                <comment line="905">
                    The provider implementation (delegate)                    
                </comment>
                <comment line="906">
                    filled in once the provider is selected                    
                </comment>
                <comment line="909">
                    lock for mutex during provider selection                    
                </comment>
                <comment line="912">
                    next service to try in provider selection                    
                </comment>
                <comment line="913">
                    null once provider is selected                    
                </comment>
                <comment line="916">
                    remaining services to try in provider selection                    
                </comment>
                <comment line="917">
                    null once provider is selected                    
                </comment>
                <comment line="920">
                    constructor                    
                </comment>
                <comment line="927">
                    used with delayed provider selection                    
                </comment>
                <comment line="980">
                    max number of debug warnings to print from chooseFirstProvider()                    
                </comment>
                <declaration name="cipher" type="Cipher" line="1208"/>
                <declaration name="data" type="ByteArrayOutputStream" line="1210"/>
                <method name="CipherAdapter" type="constructor" line="1212">
                    <params>
                        <param name="cipher" type="Cipher"/>
                    </params>
                </method>
                <method name="engineInitVerify" type="void" line="1217">
                    <params>
                        <param name="publicKey" type="PublicKey"/>
                    </params>
                    <scope line="1219"/>
                    <scope line="1221"/>
                </method>
                <method name="engineInitSign" type="void" line="1227">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                    </params>
                </method>
                <method name="engineInitSign" type="void" line="1233">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="1238">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="1243">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="1244"/>
                    <declaration name="out" type="byte[]" line="1248"/>
                    <scope line="1249"/>
                </method>
                <method name="engineSign" type="byte[]" line="1255">
                    <scope line="1256"/>
                    <scope line="1258"/>
                    <scope line="1260"/>
                </method>
                <method name="engineVerify" type="boolean" line="1266">
                    <params>
                        <param name="sigBytes" type="byte[]"/>
                    </params>
                    <comment line="1273">
                        e.g. wrong public key used                        
                    </comment>
                    <comment line="1274">
                        return false rather than throwing exception                        
                    </comment>
                    <scope line="1267">
                        <declaration name="out" type="byte[]" line="1268"/>
                        <declaration name="dataBytes" type="byte[]" line="1269"/>
                    </scope>
                    <scope line="1272"/>
                    <scope line="1276"/>
                </method>
                <method name="engineSetParameter" type="void" line="1282">
                    <params>
                        <param name="param" type="String"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="engineGetParameter" type="Object" line="1287">
                    <params>
                        <param name="param" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>