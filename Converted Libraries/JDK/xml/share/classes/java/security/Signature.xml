<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.io"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.security.Provider.Service"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.CipherSpi"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.NoSuchPaddingException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="Signature" line="18">
            <extends class="SignatureSpi"/>
            <javadoc line="18">
                The Signature class is used to provide applications the functionality
                  of a digital signature algorithm. Digital signatures are used for
                  authentication and integrity assurance of digital data.
                  &lt;p&gt; The signature algorithm can be, among others, the NIST standard
                  DSA, using DSA and SHA-1. The DSA algorithm using the
                  SHA-1 message digest algorithm can be specified as &lt;tt&gt;SHA1withDSA&lt;/tt&gt;.
                  In the case of RSA, there are multiple choices for the message digest
                  algorithm, so the signing algorithm could be specified as, for example,
                  &lt;tt&gt;MD2withRSA&lt;/tt&gt;, &lt;tt&gt;MD5withRSA&lt;/tt&gt;, or &lt;tt&gt;SHA1withRSA&lt;/tt&gt;.
                  The algorithm name must be specified, as there is no default.
                  &lt;p&gt; A Signature object can be used to generate and verify digital
                  signatures.
                  &lt;p&gt; There are three phases to the use of a Signature object for
                  either signing data or verifying a signature:&lt;ol&gt;
                  &lt;li&gt;Initialization, with either
                  &lt;ul&gt;
                  &lt;li&gt;a public key, which initializes the signature for
                  verification (see {@link #initVerify(PublicKey) initVerify}), or
                  &lt;li&gt;a private key (and optionally a Secure Random Number Generator),
                  which initializes the signature for signing
                  (see {@link #initSign(PrivateKey)}and {@link #initSign(PrivateKey,SecureRandom)}).
                  &lt;/ul&gt;&lt;p&gt;
                  &lt;li&gt;Updating&lt;p&gt;
                  &lt;p&gt;Depending on the type of initialization, this will update the
                  bytes to be signed or verified. See the{@link #update(byte) update} methods.&lt;p&gt;
                  &lt;li&gt;Signing or Verifying a signature on all updated bytes. See the{@link #sign() sign} methods and the {@link #verify(byte[]) verify}method.
                  &lt;/ol&gt;
                  &lt;p&gt;Note that this class is abstract and extends from
                  &lt;code&gt;SignatureSpi&lt;/code&gt; for historical reasons.
                  Application developers should only take notice of the methods defined in
                  this &lt;code&gt;Signature&lt;/code&gt; class; all the methods in
                  the superclass are intended for cryptographic service providers who wish to
                  supply their own implementations of digital signature algorithms.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;Signature&lt;/code&gt; algorithms:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;SHA1withDSA&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;SHA1withRSA&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;SHA256withRSA&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Signature&quot;&gt;
                  Signature section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Benjamin Renaud                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="68"/>
            <declaration name="algorithm" type="String" line="69"/>
            <declaration name="provider" type="Provider" line="70"/>
            <declaration name="UNINITIALIZED" type="int" line="71"/>
            <javadoc line="71">
                Possible {@link #state} value, signifying that
                  this signature object has not yet been initialized.                
            </javadoc>
            <declaration name="SIGN" type="int" line="76"/>
            <javadoc line="76">
                Possible {@link #state} value, signifying that
                  this signature object has been initialized for signing.                
            </javadoc>
            <declaration name="VERIFY" type="int" line="81"/>
            <javadoc line="81">
                Possible {@link #state} value, signifying that
                  this signature object has been initialized for verification.                
            </javadoc>
            <declaration name="state" type="int" line="86"/>
            <javadoc line="86">
                Current state of this signature object.                
            </javadoc>
            <javadoc line="90">
                Creates a Signature object for the specified algorithm.                
                <param>
                    algorithm the standard string name of the algorithm.
                      See the Signature section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Signature&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
            </javadoc>
            <method name="Signature" type="constructor" line="98">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <declaration name="RSA_SIGNATURE" type="String" line="101"/>
            <declaration name="RSA_CIPHER" type="String" line="102"/>
            <declaration name="rsaIds" type="List&amp;lt;ServiceId&amp;gt;" line="103"/>
            <javadoc line="104">
                Returns a Signature object that implements the specified signature
                  algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new Signature object encapsulating the
                  SignatureSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the algorithm requested.
                      See the Signature section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Signature&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new Signature object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      Signature implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="Signature" line="125">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="list" type="List&amp;lt;Service&amp;gt;" line="126"/>
                <scope line="127"/>
                <scope line="130"/>
                <declaration name="t" type="Iterator&amp;lt;Service&amp;gt;" line="133"/>
                <scope line="134"/>
                <declaration name="failure" type="NoSuchAlgorithmException" line="137"/>
                <scope line="138">
                    <declaration name="s" type="Service" line="139"/>
                    <scope line="140"/>
                    <scope line="143">
                        <scope line="144">
                            <declaration name="instance" type="Instance" line="145"/>
                        </scope>
                        <scope line="148"/>
                    </scope>
                </scope>
            </method>
            <method name="getInstance" type="Signature" line="156">
                <params>
                    <param name="instance" type="Instance"/>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="sig" type="Signature" line="157"/>
                <scope line="158"/>
                <scope line="161">
                    <declaration name="spi" type="SignatureSpi" line="162"/>
                </scope>
            </method>
            <declaration name="signatureInfo" type="Map&amp;lt;String,Boolean&amp;gt;" line="168"/>
            <scope line="169">
                <declaration name="TRUE" type="Boolean" line="171"/>
            </scope>
            <method name="isSpi" type="boolean" line="183">
                <params>
                    <param name="s" type="Service"/>
                </params>
                <scope line="184"/>
                <declaration name="className" type="String" line="187"/>
                <declaration name="result" type="Boolean" line="188"/>
                <scope line="189">
                    <scope line="190">
                        <declaration name="instance" type="Object" line="191"/>
                        <declaration name="r" type="boolean" line="192"/>
                        <scope line="193"/>
                    </scope>
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="206">
                Returns a Signature object that implements the specified signature
                  algorithm.
                  &lt;p&gt; A new Signature object encapsulating the
                  SignatureSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the name of the algorithm requested.
                      See the Signature section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Signature&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new Signature object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a SignatureSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="Signature" line="231">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="232">
                    <scope line="233"/>
                    <declaration name="p" type="Provider" line="236"/>
                    <scope line="237"/>
                </scope>
                <declaration name="instance" type="Instance" line="242"/>
            </method>
            <javadoc line="245">
                Returns a Signature object that implements the specified
                  signature algorithm.
                  &lt;p&gt; A new Signature object encapsulating the
                  SignatureSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the name of the algorithm requested.
                      See the Signature section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Signature&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new Signature object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a SignatureSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider is null.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="Signature" line="266">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="267">
                    <scope line="268"/>
                </scope>
                <declaration name="instance" type="Instance" line="273"/>
            </method>
            <method name="getInstanceRSA" type="Signature" line="276">
                <params>
                    <param name="p" type="Provider"/>
                </params>
                <declaration name="s" type="Service" line="277"/>
                <scope line="278">
                    <declaration name="instance" type="Instance" line="279"/>
                </scope>
                <scope line="282">
                    <declaration name="c" type="Cipher" line="283"/>
                </scope>
                <scope line="286"/>
            </method>
            <javadoc line="290">
                Returns the provider of this signature object.                
                <return>
                    the provider of this signature object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="294"/>
            <method name="chooseFirstProvider" type="void" line="298"/>
            <javadoc line="300">
                Initializes this object for verification. If this method is called
                  again with a different argument, it negates the effect
                  of this call.                
                <param>
                    publicKey the public key of the identity whose signature is
                      going to be verified.                    
                </param>
                <exception>
                    InvalidKeyException if the key is invalid.                    
                </exception>
            </javadoc>
            <method name="initVerify" type="void" line="308">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
            </method>
            <javadoc line="312">
                Initializes this object for verification, using the public key from
                  the given certificate.
                  &lt;p&gt;If the certificate is of type X.509 and has a &lt;i&gt;key usage&lt;/i&gt;
                  extension field marked as critical, and the value of the &lt;i&gt;key usage&lt;/i&gt;
                  extension field implies that the public key in
                  the certificate and its corresponding private key are not
                  supposed to be used for digital signatures, an
                  &lt;code&gt;InvalidKeyException&lt;/code&gt; is thrown.                
                <param>
                    certificate the certificate of the identity whose signature is
                      going to be verified.                    
                </param>
                <exception>
                    InvalidKeyException  if the public key in the certificate
                      is not encoded properly or does not include required  parameter
                      information or cannot be used for digital signature purposes.                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="initVerify" type="void" line="328">
                <params>
                    <param name="certificate" type="Certificate"/>
                </params>
                <scope line="329">
                    <declaration name="cert" type="X509Certificate" line="330"/>
                    <declaration name="critSet" type="Set&amp;lt;String&amp;gt;" line="331"/>
                    <scope line="332">
                        <declaration name="keyUsageInfo" type="boolean[]" line="333"/>
                    </scope>
                </scope>
                <declaration name="publicKey" type="PublicKey" line="337"/>
            </method>
            <javadoc line="341">
                Initialize this object for signing. If this method is called
                  again with a different argument, it negates the effect
                  of this call.                
                <param>
                    privateKey the private key of the identity whose signature
                      is going to be generated.                    
                </param>
                <exception>
                    InvalidKeyException if the key is invalid.                    
                </exception>
            </javadoc>
            <method name="initSign" type="void" line="349">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
            </method>
            <javadoc line="353">
                Initialize this object for signing. If this method is called
                  again with a different argument, it negates the effect
                  of this call.                
                <param>
                    privateKey the private key of the identity whose signature
                      is going to be generated.                    
                </param>
                <param>
                    random the source of randomness for this signature.                    
                </param>
                <exception>
                    InvalidKeyException if the key is invalid.                    
                </exception>
            </javadoc>
            <method name="initSign" type="void" line="362">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="366">
                Returns the signature bytes of all the data updated.
                  The format of the signature depends on the underlying
                  signature scheme.
                  &lt;p&gt;A call to this method resets this signature object to the state
                  it was in when previously initialized for signing via a
                  call to &lt;code&gt;initSign(PrivateKey)&lt;/code&gt;. That is, the object is
                  reset and available to generate another signature from the same
                  signer, if desired, via new calls to &lt;code&gt;update&lt;/code&gt; and
                  &lt;code&gt;sign&lt;/code&gt;.                
                <return>
                    the signature bytes of the signing operation&apos;s result.                    
                </return>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly or if this signature algorithm is unable to
                      process the input data provided.                    
                </exception>
            </javadoc>
            <method name="sign" type="byte[]" line="381">
                <scope line="382"/>
            </method>
            <javadoc line="387">
                Finishes the signature operation and stores the resulting signature
                  bytes in the provided buffer &lt;code&gt;outbuf&lt;/code&gt;, starting at
                  &lt;code&gt;offset&lt;/code&gt;.
                  The format of the signature depends on the underlying
                  signature scheme.
                  &lt;p&gt;This signature object is reset to its initial state (the state it
                  was in after a call to one of the &lt;code&gt;initSign&lt;/code&gt; methods) and
                  can be reused to generate further signatures with the same private key.                
                <param>
                    outbuf buffer for the signature result.                    
                </param>
                <param>
                    offset offset into &lt;code&gt;outbuf&lt;/code&gt; where the signature is
                      stored.                    
                </param>
                <param>
                    len number of bytes within &lt;code&gt;outbuf&lt;/code&gt; allotted for the
                      signature.                    
                </param>
                <return>
                    the number of bytes placed into &lt;code&gt;outbuf&lt;/code&gt;.                    
                </return>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly, if this signature algorithm is unable to
                      process the input data provided, or if &lt;code&gt;len&lt;/code&gt; is less
                      than the actual signature length.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="sign" type="int" line="408">
                <params>
                    <param name="outbuf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="409"/>
                <scope line="412"/>
                <scope line="415"/>
            </method>
            <javadoc line="420">
                Verifies the passed-in signature.
                  &lt;p&gt;A call to this method resets this signature object to the state
                  it was in when previously initialized for verification via a
                  call to &lt;code&gt;initVerify(PublicKey)&lt;/code&gt;. That is, the object is
                  reset and available to verify another signature from the identity
                  whose public key was specified in the call to &lt;code&gt;initVerify&lt;/code&gt;.                
                <param>
                    signature the signature bytes to be verified.                    
                </param>
                <return>
                    true if the signature was verified, false if not.                    
                </return>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly, the passed-in signature is improperly
                      encoded or of the wrong type, if this signature algorithm is unable to
                      process the input data provided, etc.                    
                </exception>
            </javadoc>
            <method name="verify" type="boolean" line="434">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
                <scope line="435"/>
            </method>
            <javadoc line="440">
                Verifies the passed-in signature in the specified array
                  of bytes, starting at the specified offset.
                  &lt;p&gt;A call to this method resets this signature object to the state
                  it was in when previously initialized for verification via a
                  call to &lt;code&gt;initVerify(PublicKey)&lt;/code&gt;. That is, the object is
                  reset and available to verify another signature from the identity
                  whose public key was specified in the call to &lt;code&gt;initVerify&lt;/code&gt;.                
                <param>
                    signature the signature bytes to be verified.                    
                </param>
                <param>
                    offset the offset to start from in the array of bytes.                    
                </param>
                <param>
                    length the number of bytes to use, starting at offset.                    
                </param>
                <return>
                    true if the signature was verified, false if not.                    
                </return>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly, the passed-in signature is improperly
                      encoded or of the wrong type, if this signature algorithm is unable to
                      process the input data provided, etc.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;signature&lt;/code&gt;
                      byte array is null, or the &lt;code&gt;offset&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt;
                      is less than 0, or the sum of the &lt;code&gt;offset&lt;/code&gt; and
                      &lt;code&gt;length&lt;/code&gt; is greater than the length of the
                      &lt;code&gt;signature&lt;/code&gt; byte array.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="verify" type="boolean" line="463">
                <params>
                    <param name="signature" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="464">
                    <scope line="465"/>
                </scope>
            </method>
            <javadoc line="472">
                Updates the data to be signed or verified by a byte.                
                <param>
                    b the byte to use for the update.                    
                </param>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="478">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <scope line="479"/>
                <scope line="482"/>
            </method>
            <javadoc line="486">
                Updates the data to be signed or verified, using the specified
                  array of bytes.                
                <param>
                    data the byte array to use for the update.                    
                </param>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="493">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="496">
                Updates the data to be signed or verified, using the specified
                  array of bytes, starting at the specified offset.                
                <param>
                    data the array of bytes.                    
                </param>
                <param>
                    off the offset to start from in the array of bytes.                    
                </param>
                <param>
                    len the number of bytes to use, starting at offset.                    
                </param>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="505">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="506"/>
                <scope line="509"/>
            </method>
            <javadoc line="513">
                Updates the data to be signed or verified using the specified
                  ByteBuffer. Processes the &lt;code&gt;data.remaining()&lt;/code&gt; bytes
                  starting at at &lt;code&gt;data.position()&lt;/code&gt;.
                  Upon return, the buffer&apos;s position will be equal to its limit;
                  its limit will not have changed.                
                <param>
                    data the ByteBuffer                    
                </param>
                <exception>
                    SignatureException if this signature object is not
                      initialized properly.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="update" type="void" line="524">
                <params>
                    <param name="data" type="ByteBuffer"/>
                </params>
                <scope line="525"/>
                <scope line="528"/>
            </method>
            <javadoc line="533">
                Returns the name of the algorithm for this signature object.                
                <return>
                    the name of the algorithm for this signature object.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="537"/>
            <javadoc line="540">
                Returns a string representation of this signature object,
                  providing information that includes the state of the object
                  and the name of the algorithm used.                
                <return>
                    a string representation of this signature object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="546">
                <declaration name="initState" type="String" line="547"/>
            </method>
            <javadoc line="561">
                Sets the specified algorithm parameter to the specified value.
                  This method supplies a general-purpose mechanism through
                  which it is possible to set the various parameters of this object.
                  A parameter may be any settable parameter for the algorithm, such as
                  a parameter size, or a source of random bits for signature generation
                  (if appropriate), or an indication of whether or not to perform
                  a specific but optional computation. A uniform algorithm-specific
                  naming scheme for each parameter is desirable but left unspecified
                  at this time.                
                <param>
                    param the string identifier of the parameter.                    
                </param>
                <param>
                    value the parameter value.                    
                </param>
                <exception>
                    InvalidParameterException if &lt;code&gt;param&lt;/code&gt; is an
                      invalid parameter for this signature algorithm engine,
                      the parameter is already set
                      and cannot be set again, a security exception occurs, and so on.                    
                </exception>
                <see>
                    #getParameter                    
                </see>
                <deprecated>
                    Use{@link #setParameter(java.security.spec.AlgorithmParameterSpec)setParameter}.                    
                </deprecated>
            </javadoc>
            <method name="setParameter" type="void" line="580">
                <params>
                    <param name="param" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="583">
                Initializes this signature engine with the specified parameter set.                
                <param>
                    params the parameters                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this signature engine                    
                </exception>
                <see>
                    #getParameters                    
                </see>
            </javadoc>
            <method name="setParameter" type="void" line="590">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="593">
                Returns the parameters used with this signature object.
                  &lt;p&gt;The returned parameters may be the same that were used to initialize
                  this signature, or may contain a combination of default and randomly
                  generated parameter values used by the underlying signature
                  implementation if this signature requires algorithm parameters but
                  was not initialized with any.                
                <return>
                    the parameters used with this signature, or null if this
                      signature does not use any parameters.                    
                </return>
                <see>
                    #setParameter(AlgorithmParameterSpec)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParameters" type="AlgorithmParameters" line="605"/>
            <javadoc line="608">
                Gets the value of the specified algorithm parameter. This method
                  supplies a general-purpose mechanism through which it is possible to
                  get the various parameters of this object. A parameter may be any
                  settable parameter for the algorithm, such as a parameter size, or
                  a source of random bits for signature generation (if appropriate),
                  or an indication of whether or not to perform a specific but optional
                  computation. A uniform algorithm-specific naming scheme for each
                  parameter is desirable but left unspecified at this time.                
                <param>
                    param the string name of the parameter.                    
                </param>
                <return>
                    the object that represents the parameter value, or null if
                      there is none.                    
                </return>
                <exception>
                    InvalidParameterException if &lt;code&gt;param&lt;/code&gt; is an invalid
                      parameter for this engine, or another exception occurs while
                      trying to get this parameter.                    
                </exception>
                <see>
                    #setParameter(String,Object)                    
                </see>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getParameter" type="Object" line="626">
                <params>
                    <param name="param" type="String"/>
                </params>
            </method>
            <javadoc line="629">
                Returns a clone if the implementation is cloneable.                
                <return>
                    a clone if the implementation is cloneable.                    
                </return>
                <exception>
                    CloneNotSupportedException if this is called
                      on an implementation that does not support &lt;code&gt;Cloneable&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="635">
                <scope line="636"/>
                <scope line="639"/>
            </method>
            <class name="Delegate" line="643">
                <extends class="Signature"/>
                <declaration name="sigSpi" type="SignatureSpi" line="644"/>
                <declaration name="lock" type="Object" line="645"/>
                <declaration name="firstService" type="Service" line="646"/>
                <declaration name="serviceIterator" type="Iterator&amp;lt;Service&amp;gt;" line="647"/>
                <method name="Delegate" type="constructor" line="648">
                    <params>
                        <param name="sigSpi" type="SignatureSpi"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
                <method name="Delegate" type="constructor" line="653">
                    <params>
                        <param name="service" type="Service"/>
                        <param name="iterator" type="Iterator&lt;Service&gt;"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
                <javadoc line="659">
                    Returns a clone if the delegate is cloneable.                    
                    <return>
                        a clone if the delegate is cloneable.                        
                    </return>
                    <exception>
                        CloneNotSupportedException if this is called on a
                          delegate that does not support &lt;code&gt;Cloneable&lt;/code&gt;.                        
                    </exception>
                </javadoc>
                <method name="clone" type="Object" line="665">
                    <scope line="667">
                        <declaration name="sigSpiClone" type="SignatureSpi" line="668"/>
                        <declaration name="that" type="Signature" line="669"/>
                    </scope>
                    <scope line="673"/>
                </method>
                <method name="newInstance" type="SignatureSpi" line="677">
                    <params>
                        <param name="s" type="Service"/>
                    </params>
                    <scope line="678">
                        <scope line="679">
                            <declaration name="c" type="Cipher" line="680"/>
                        </scope>
                        <scope line="683"/>
                    </scope>
                    <scope line="687">
                        <declaration name="o" type="Object" line="688"/>
                        <scope line="689"/>
                    </scope>
                </method>
                <declaration name="warnCount" type="int" line="695"/>
                <javadoc line="696">
                    Choose the Spi from the first provider available. Used if
                      delayed provider selection is not possible because initSign()/
                      initVerify() is not the first method called.                    
                </javadoc>
                <method name="chooseFirstProvider" type="void" line="701">
                    <scope line="702"/>
                    <scope line="705">
                        <scope line="706"/>
                        <scope line="709">
                            <declaration name="w" type="int" line="710"/>
                            <scope line="711">
                                <scope line="713"/>
                            </scope>
                        </scope>
                        <declaration name="lastException" type="Exception" line="719"/>
                        <scope line="720">
                            <declaration name="s" type="Service" line="721"/>
                            <scope line="722"/>
                            <scope line="726"/>
                            <scope line="729"/>
                            <scope line="732"/>
                            <scope line="739"/>
                        </scope>
                        <declaration name="e" type="ProviderException" line="743"/>
                        <scope line="744"/>
                    </scope>
                </method>
                <method name="chooseProvider" type="void" line="750">
                    <params>
                        <param name="type" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                    <scope line="751">
                        <scope line="752"/>
                        <declaration name="lastException" type="Exception" line="756"/>
                        <scope line="757">
                            <declaration name="s" type="Service" line="758"/>
                            <scope line="759"/>
                            <scope line="763"/>
                            <scope line="766"/>
                            <scope line="769"/>
                            <scope line="772">
                                <declaration name="spi" type="SignatureSpi" line="773"/>
                            </scope>
                            <scope line="781">
                                <scope line="782"/>
                            </scope>
                        </scope>
                        <scope line="787"/>
                        <scope line="790"/>
                        <declaration name="k" type="String" line="793"/>
                    </scope>
                </method>
                <declaration name="I_PUB" type="int" line="797"/>
                <declaration name="I_PRIV" type="int" line="798"/>
                <declaration name="I_PRIV_SR" type="int" line="799"/>
                <method name="init" type="void" line="800">
                    <params>
                        <param name="spi" type="SignatureSpi"/>
                        <param name="type" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineInitVerify" type="void" line="815">
                    <params>
                        <param name="publicKey" type="PublicKey"/>
                    </params>
                    <scope line="816"/>
                    <scope line="819"/>
                </method>
                <method name="engineInitSign" type="void" line="823">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                    </params>
                    <scope line="824"/>
                    <scope line="827"/>
                </method>
                <method name="engineInitSign" type="void" line="831">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="sr" type="SecureRandom"/>
                    </params>
                    <scope line="832"/>
                    <scope line="835"/>
                </method>
                <method name="engineUpdate" type="void" line="839">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="843">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="847">
                    <params>
                        <param name="data" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="engineSign" type="byte[]" line="851"/>
                <method name="engineSign" type="int" line="855">
                    <params>
                        <param name="outbuf" type="byte[]"/>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineVerify" type="boolean" line="859">
                    <params>
                        <param name="sigBytes" type="byte[]"/>
                    </params>
                </method>
                <method name="engineVerify" type="boolean" line="863">
                    <params>
                        <param name="sigBytes" type="byte[]"/>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="engineSetParameter" type="void" line="867">
                    <params>
                        <param name="param" type="String"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="engineSetParameter" type="void" line="871">
                    <params>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="engineGetParameter" type="Object" line="875">
                    <params>
                        <param name="param" type="String"/>
                    </params>
                </method>
                <method name="engineGetParameters" type="AlgorithmParameters" line="879"/>
            </class>
            <class name="CipherAdapter" line="884">
                <extends class="SignatureSpi"/>
                <declaration name="cipher" type="Cipher" line="885"/>
                <declaration name="data" type="ByteArrayOutputStream" line="886"/>
                <method name="CipherAdapter" type="constructor" line="887">
                    <params>
                        <param name="cipher" type="Cipher"/>
                    </params>
                </method>
                <method name="engineInitVerify" type="void" line="890">
                    <params>
                        <param name="publicKey" type="PublicKey"/>
                    </params>
                    <scope line="892"/>
                    <scope line="895"/>
                </method>
                <method name="engineInitSign" type="void" line="899">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                    </params>
                </method>
                <method name="engineInitSign" type="void" line="903">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="907">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="910">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="911"/>
                    <declaration name="out" type="byte[]" line="915"/>
                    <scope line="916"/>
                </method>
                <method name="engineSign" type="byte[]" line="920">
                    <scope line="921"/>
                    <scope line="924"/>
                    <scope line="927"/>
                </method>
                <method name="engineVerify" type="boolean" line="931">
                    <params>
                        <param name="sigBytes" type="byte[]"/>
                    </params>
                    <scope line="932">
                        <declaration name="out" type="byte[]" line="933"/>
                        <declaration name="dataBytes" type="byte[]" line="934"/>
                    </scope>
                    <scope line="938"/>
                    <scope line="941"/>
                </method>
                <method name="engineSetParameter" type="void" line="945">
                    <params>
                        <param name="param" type="String"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="engineGetParameter" type="Object" line="948">
                    <params>
                        <param name="param" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>