<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.util.Locale.ENGLISH"/>
        <import package="java.lang.ref"/>
        <import package="java.lang.reflect"/>
        <import package="java.security.cert.CertStoreParameters"/>
        <import package="javax.security.auth.login.Configuration"/>
        <class name="Provider" line="9">
            <extends class="Properties"/>
            <javadoc line="9">
                This class represents a &quot;provider&quot; for the
                  Java Security API, where a provider implements some or all parts of
                  Java Security. Services that a provider may implement include:
                  &lt;ul&gt;
                  &lt;li&gt;Algorithms (such as DSA, RSA, MD5 or SHA-1).
                  &lt;li&gt;Key generation, conversion, and management facilities (such as for
                  algorithm-specific keys).
                  &lt;/ul&gt;
                  &lt;p&gt;Each provider has a name and a version number, and is configured
                  in each runtime it is installed in.
                  &lt;p&gt;See &lt;a href =
                  &quot;../../../technotes/guides/security/crypto/CryptoSpec.html#Provider&quot;&gt;The Provider Class&lt;/a&gt;
                  in the &quot;Java Cryptography Architecture API Specification &amp;amp; Reference&quot;
                  for information about how a particular type of provider, the
                  cryptographic service provider, works and is installed. However,
                  please note that a provider can be used to implement any security
                  service in Java that uses a pluggable architecture with a choice
                  of implementations that fit underneath.
                  &lt;p&gt;Some provider implementations may encounter unrecoverable internal
                  errors during their operation, for example a failure to communicate with a
                  security token. A {@link ProviderException} should be used to indicate
                  such errors.
                  &lt;p&gt;The service type &lt;code&gt;Provider&lt;/code&gt; is reserved for use by the
                  security framework. Services of this type cannot be added, removed,
                  or modified by applications.
                  The following attributes are automatically placed in each Provider object:
                  &lt;table cellspacing=4&gt;
                  &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;Provider.id name&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;String.valueOf(provider.getName())&lt;/code&gt;&lt;/td&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;Provider.id version&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;String.valueOf(provider.getVersion())&lt;/code&gt;&lt;/td&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;Provider.id info&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;String.valueOf(provider.getInfo())&lt;/code&gt;&lt;/td&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;Provider.id className&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;provider.getClass().getName()&lt;/code&gt;&lt;/td&gt;
                  &lt;/table&gt;                
                <author>
                    Benjamin Renaud                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <declaration name="debug" type="sun.security.util.Debug" line="52"/>
            <declaration name="name" type="String" line="53"/>
            <javadoc line="53">
                The provider name.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="info" type="String" line="58"/>
            <javadoc line="58">
                A description of the provider and its services.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="version" type="double" line="63"/>
            <javadoc line="63">
                The provider version number.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="entrySet" type="Set&lt;Map.Entry&lt;Object,Object&gt;&gt;" line="68"/>
            <declaration name="entrySetCallCount" type="int" line="69"/>
            <declaration name="initialized" type="boolean" line="70"/>
            <javadoc line="71">
                Constructs a provider with the specified name, version number,
                  and information.                
                <param>
                    name the provider name.                    
                </param>
                <param>
                    version the provider version number.                    
                </param>
                <param>
                    info a description of the provider and its services.                    
                </param>
            </javadoc>
            <method name="Provider" type="constructor" line="78">
                <params>
                    <param name="name" type="String"/>
                    <param name="version" type="double"/>
                    <param name="info" type="String"/>
                </params>
            </method>
            <javadoc line="85">
                Returns the name of this provider.                
                <return>
                    the name of this provider.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="89"/>
            <javadoc line="92">
                Returns the version number for this provider.                
                <return>
                    the version number for this provider.                    
                </return>
            </javadoc>
            <method name="getVersion" type="double" line="96"/>
            <javadoc line="99">
                Returns a human-readable description of the provider and its
                  services.  This may return an HTML page, with relevant links.                
                <return>
                    a description of the provider and its services.                    
                </return>
            </javadoc>
            <method name="getInfo" type="String" line="104"/>
            <javadoc line="107">
                Returns a string with the name and the version number
                  of this provider.                
                <return>
                    the string with the name and the version number
                      for this provider.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="113"/>
            <javadoc line="116">
                Clears this provider so that it no longer contains the properties
                  used to look up facilities implemented by the provider.
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt; method is called with the string
                  &lt;code&gt;&quot;clearProviderProperties.&quot;+name&lt;/code&gt; (where &lt;code&gt;name&lt;/code&gt;
                  is the provider name) to see if it&apos;s ok to clear this provider.
                  If the default implementation of &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  is used (that is, that method is not overriden), then this results in
                  a call to the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  with a &lt;code&gt;SecurityPermission(&quot;clearProviderProperties.&quot;+name)&lt;/code&gt;
                  permission.                
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> method
                      denies access to clear this provider                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="clear" type="void" line="132">
                <scope line="134"/>
            </method>
            <javadoc line="139">
                Reads a property list (key and element pairs) from the input stream.                
                <param>
                    inStream   the input stream.                    
                </param>
                <exception>
                    IOException  if an error occurred when reading from the
                      input stream.                    
                </exception>
                <see>
                    java.util.Properties#load                    
                </see>
            </javadoc>
            <method name="load" type="void" line="146">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
                <scope line="148"/>
                <declaration name="tempProperties" type="Properties" line="151"/>
            </method>
            <javadoc line="155">
                Copies all of the mappings from the specified Map to this provider.
                  These mappings will replace any properties that this provider had
                  for any of the keys currently in the specified Map.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="putAll" type="void" line="161">
                <params>
                    <param name="t" type="Map<?,?>"/>
                </params>
                <scope line="163"/>
            </method>
            <javadoc line="168">
                Returns an unmodifiable Set view of the property entries contained
                  in this Provider.                
                <see>
                    java.util.Map.Entry                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="entrySet" type="Set<Map.Entry<Object,Object>>" line="174">
                <scope line="176"/>
            </method>
            <javadoc line="183">
                Returns an unmodifiable Set view of the property keys contained in
                  this provider.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="keySet" type="Set<Object>" line="188"/>
            <javadoc line="192">
                Returns an unmodifiable Collection view of the property values
                  contained in this provider.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="values" type="Collection<Object>" line="197"/>
            <javadoc line="201">
                Sets the &lt;code&gt;key&lt;/code&gt; property to have the specified
                  &lt;code&gt;value&lt;/code&gt;.
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt; method is called with the string
                  &lt;code&gt;&quot;putProviderProperty.&quot;+name&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is the
                  provider name, to see if it&apos;s ok to set this provider&apos;s property values.
                  If the default implementation of &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  is used (that is, that method is not overriden), then this results in
                  a call to the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  with a &lt;code&gt;SecurityPermission(&quot;putProviderProperty.&quot;+name)&lt;/code&gt;
                  permission.                
                <param>
                    key the property key.                    
                </param>
                <param>
                    value the property value.                    
                </param>
                <return>
                    the previous value of the specified property
                      (<code>key</code>), or null if it did not have one.                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> method
                      denies access to set property values.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="put" type="Object" line="221">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="223"/>
            </method>
            <javadoc line="228">
                Removes the &lt;code&gt;key&lt;/code&gt; property (and its corresponding
                  &lt;code&gt;value&lt;/code&gt;).
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt; method is called with the string
                  &lt;code&gt;&quot;removeProviderProperty.&quot;+name&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is
                  the provider name, to see if it&apos;s ok to remove this provider&apos;s
                  properties. If the default implementation of
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt; is used (that is, that method is not
                  overriden), then this results in a call to the security manager&apos;s
                  &lt;code&gt;checkPermission&lt;/code&gt; method with a
                  &lt;code&gt;SecurityPermission(&quot;removeProviderProperty.&quot;+name)&lt;/code&gt;
                  permission.                
                <param>
                    key the key for the property to be removed.                    
                </param>
                <return>
                    the value to which the key had been mapped,
                      or null if the key did not have a mapping.                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> method
                      denies access to remove this provider's properties.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="remove" type="Object" line="248">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="250"/>
            </method>
            <method name="get" type="Object" line="255">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="keys" type="Enumeration<Object>" line="259"/>
            <method name="elements" type="Enumeration<Object>" line="263"/>
            <method name="getProperty" type="String" line="267">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="checkInitialized" type="void" line="271">
                <scope line="272"/>
            </method>
            <method name="check" type="void" line="276">
                <params>
                    <param name="directive" type="String"/>
                </params>
                <declaration name="security" type="SecurityManager" line="278"/>
                <scope line="279"/>
            </method>
            <declaration name="legacyChanged" type="boolean" line="283"/>
            <declaration name="servicesChanged" type="boolean" line="284"/>
            <declaration name="legacyStrings" type="Map&lt;String,String&gt;" line="285"/>
            <declaration name="serviceMap" type="Map&lt;ServiceKey,Service&gt;" line="286"/>
            <declaration name="legacyMap" type="Map&lt;ServiceKey,Service&gt;" line="287"/>
            <declaration name="serviceSet" type="Set&lt;Service&gt;" line="288"/>
            <method name="putId" type="void" line="289"/>
            <method name="readObject" type="void" line="295">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="copy" type="Map&lt;Object,Object&gt;" line="296"/>
                <scope line="297"/>
            </method>
            <javadoc line="306">
                Copies all of the mappings from the specified Map to this provider.
                  Internal method to be called AFTER the security check has been
                  performed.                
            </javadoc>
            <method name="implPutAll" type="void" line="311">
                <params>
                    <param name="t" type="Map"/>
                </params>
                <scope line="312"/>
            </method>
            <method name="implRemove" type="Object" line="316">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="317">
                    <declaration name="keyString" type="String" line="318"/>
                    <scope line="319"/>
                    <scope line="323"/>
                </scope>
            </method>
            <method name="implPut" type="Object" line="330">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="331">
                    <declaration name="keyString" type="String" line="332"/>
                    <scope line="333"/>
                    <scope line="337"/>
                </scope>
            </method>
            <method name="implClear" type="void" line="344">
                <scope line="345"/>
                <scope line="348"/>
                <scope line="351"/>
            </method>
            <class name="ServiceKey" line="360">
                <declaration name="type" type="String" line="361"/>
                <declaration name="algorithm" type="String" line="362"/>
                <declaration name="originalAlgorithm" type="String" line="363"/>
                <method name="ServiceKey" type="constructor" line="364">
                    <params>
                        <param name="type" type="String"/>
                        <param name="algorithm" type="String"/>
                        <param name="intern" type="boolean"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="370"/>
                <method name="equals" type="boolean" line="373">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="374"/>
                    <scope line="377"/>
                    <declaration name="other" type="ServiceKey" line="380"/>
                </method>
                <method name="matches" type="boolean" line="383">
                    <params>
                        <param name="type" type="String"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
            </class>
            <javadoc line="387">
                Ensure all the legacy String properties are fully parsed into
                  service objects.                
            </javadoc>
            <method name="ensureLegacyParsed" type="void" line="391">
                <scope line="392"/>
                <scope line="396"/>
                <scope line="399"/>
                <scope line="402"/>
            </method>
            <javadoc line="408">
                Remove all invalid services from the Map. Invalid services can only
                  occur if the legacy properties are inconsistent or incomplete.                
            </javadoc>
            <method name="removeInvalidServices" type="void" line="412">
                <params>
                    <param name="map" type="Map<ServiceKey,Service>"/>
                </params>
                <scope line="413">
                    <declaration name="entry" type="Map.Entry" line="414"/>
                    <declaration name="s" type="Service" line="415"/>
                    <scope line="416"/>
                </scope>
            </method>
            <method name="getTypeAndAlgorithm" type="String[]" line="421">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="i" type="int" line="422"/>
                <scope line="423">
                    <scope line="424"/>
                </scope>
                <declaration name="type" type="String" line="429"/>
                <declaration name="alg" type="String" line="430"/>
            </method>
            <declaration name="ALIAS_PREFIX" type="String" line="433"/>
            <declaration name="ALIAS_PREFIX_LOWER" type="String" line="434"/>
            <declaration name="ALIAS_LENGTH" type="int" line="435"/>
            <method name="parseLegacyPut" type="void" line="436">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="437">
                    <declaration name="stdAlg" type="String" line="438"/>
                    <declaration name="aliasKey" type="String" line="439"/>
                    <declaration name="typeAndAlg" type="String[]" line="440"/>
                    <scope line="441"/>
                    <declaration name="type" type="String" line="444"/>
                    <declaration name="aliasAlg" type="String" line="445"/>
                    <declaration name="key" type="ServiceKey" line="446"/>
                    <declaration name="s" type="Service" line="447"/>
                    <scope line="448"/>
                </scope>
                <scope line="457">
                    <declaration name="typeAndAlg" type="String[]" line="458"/>
                    <scope line="459"/>
                    <declaration name="i" type="int" line="462"/>
                    <scope line="463">
                        <declaration name="type" type="String" line="464"/>
                        <declaration name="stdAlg" type="String" line="465"/>
                        <declaration name="className" type="String" line="466"/>
                        <declaration name="key" type="ServiceKey" line="467"/>
                        <declaration name="s" type="Service" line="468"/>
                        <scope line="469"/>
                    </scope>
                    <scope line="477">
                        <declaration name="attributeValue" type="String" line="478"/>
                        <declaration name="type" type="String" line="479"/>
                        <declaration name="attributeString" type="String" line="480"/>
                        <declaration name="stdAlg" type="String" line="481"/>
                        <declaration name="attributeName" type="String" line="482"/>
                        <scope line="483"/>
                        <declaration name="key" type="ServiceKey" line="487"/>
                        <declaration name="s" type="Service" line="488"/>
                        <scope line="489"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="499">
                Get the service describing this Provider&apos;s implementation of the
                  specified type of this algorithm or alias. If no such
                  implementation exists, this method returns null. If there are two
                  matching services, one added to this provider using{@link #putService putService()} and one added via {@link #put put()},
                  the service added via {@link #putService putService()} is returned.                
                <param>
                    type the type of {@link Service service} requested
                      (for example, <code>MessageDigest</code>)                    
                </param>
                <param>
                    algorithm the case insensitive algorithm name (or alternate
                      alias) of the service requested (for example, <code>SHA-1</code>)                    
                </param>
                <return>
                    the service describing this Provider's matching service
                      or null if no such service exists                    
                </return>
                <throws>
                    NullPointerException if type or algorithm is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getService" type="Service" line="514">
                <params>
                    <param name="type" type="String"/>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="key" type="ServiceKey" line="516"/>
                <scope line="517"/>
                <scope line="521">
                    <declaration name="service" type="Service" line="522"/>
                    <scope line="523"/>
                </scope>
            </method>
            <declaration name="previousKey" type="ServiceKey" line="530"/>
            <javadoc line="531">
                Get an unmodifiable Set of all services supported by
                  this Provider.                
                <return>
                    an unmodifiable Set of all services supported by
                      this Provider                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getServices" type="Set<Service>" line="538">
                <scope line="540"/>
                <scope line="543">
                    <declaration name="set" type="Set&lt;Service&gt;" line="545"/>
                    <scope line="546"/>
                    <scope line="549"/>
                </scope>
            </method>
            <javadoc line="557">
                Add a service. If a service of the same type with the same algorithm
                  name exists and it was added using {@link #putService putService()},
                  it is replaced by the new service.
                  This method also places information about this service
                  in the provider&apos;s Hashtable values in the format described in the
                  &lt;a href=&quot;../../../technotes/guides/security/crypto/CryptoSpec.html&quot;&gt;
                  Java Cryptography Architecture API Specification &amp;amp; Reference &lt;/a&gt;.
                  &lt;p&gt;Also, if there is a security manager, its
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt; method is called with the string
                  &lt;code&gt;&quot;putProviderProperty.&quot;+name&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is
                  the provider name, to see if it&apos;s ok to set this provider&apos;s property
                  values. If the default implementation of &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  is used (that is, that method is not overriden), then this results in
                  a call to the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method with
                  a &lt;code&gt;SecurityPermission(&quot;putProviderProperty.&quot;+name)&lt;/code&gt;
                  permission.                
                <param>
                    s the Service to add                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> method denies
                      access to set property values.                    
                </throws>
                <throws>
                    NullPointerException if s is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="putService" type="void" line="580">
                <params>
                    <param name="s" type="Service"/>
                </params>
                <scope line="582"/>
                <scope line="585"/>
                <scope line="588"/>
                <scope line="591"/>
                <declaration name="type" type="String" line="595"/>
                <declaration name="algorithm" type="String" line="596"/>
                <declaration name="key" type="ServiceKey" line="597"/>
                <scope line="600"/>
            </method>
            <javadoc line="605">
                Put the string properties for this Service in this Provider&apos;s
                  Hashtable.                
            </javadoc>
            <method name="putPropertyStrings" type="void" line="609">
                <params>
                    <param name="s" type="Service"/>
                </params>
                <declaration name="type" type="String" line="610"/>
                <declaration name="algorithm" type="String" line="611"/>
                <scope line="613"/>
                <scope line="616">
                    <declaration name="key" type="String" line="617"/>
                </scope>
            </method>
            <javadoc line="621">
                Remove the string properties for this Service from this Provider&apos;s
                  Hashtable.                
            </javadoc>
            <method name="removePropertyStrings" type="void" line="625">
                <params>
                    <param name="s" type="Service"/>
                </params>
                <declaration name="type" type="String" line="626"/>
                <declaration name="algorithm" type="String" line="627"/>
                <scope line="629"/>
                <scope line="632">
                    <declaration name="key" type="String" line="633"/>
                </scope>
            </method>
            <javadoc line="637">
                Remove a service previously added using{@link #putService putService()}. The specified service is removed from
                  this provider. It will no longer be returned by{@link #getService getService()} and its information will be removed
                  from this provider&apos;s Hashtable.
                  &lt;p&gt;Also, if there is a security manager, its
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt; method is called with the string
                  &lt;code&gt;&quot;removeProviderProperty.&quot;+name&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is
                  the provider name, to see if it&apos;s ok to remove this provider&apos;s
                  properties. If the default implementation of
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt; is used (that is, that method is not
                  overriden), then this results in a call to the security manager&apos;s
                  &lt;code&gt;checkPermission&lt;/code&gt; method with a
                  &lt;code&gt;SecurityPermission(&quot;removeProviderProperty.&quot;+name)&lt;/code&gt;
                  permission.                
                <param>
                    s the Service to be removed                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> method denies
                      access to remove this provider's properties.                    
                </throws>
                <throws>
                    NullPointerException if s is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="removeService" type="void" line="657">
                <params>
                    <param name="s" type="Service"/>
                </params>
                <scope line="659"/>
                <scope line="662"/>
            </method>
            <method name="implRemoveService" type="void" line="667">
                <params>
                    <param name="s" type="Service"/>
                </params>
                <scope line="668"/>
                <declaration name="type" type="String" line="671"/>
                <declaration name="algorithm" type="String" line="672"/>
                <declaration name="key" type="ServiceKey" line="673"/>
                <declaration name="oldService" type="Service" line="674"/>
                <scope line="675"/>
                <scope line="680"/>
            </method>
            <class name="UString" line="685">
                <declaration name="string" type="String" line="686"/>
                <declaration name="lowerString" type="String" line="687"/>
                <method name="UString" type="constructor" line="688">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="692"/>
                <method name="equals" type="boolean" line="695">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="696"/>
                    <scope line="699"/>
                    <declaration name="other" type="UString" line="702"/>
                </method>
                <method name="toString" type="String" line="705"/>
            </class>
            <class name="EngineDescription" line="709">
                <declaration name="name" type="String" line="710"/>
                <declaration name="supportsParameter" type="boolean" line="711"/>
                <declaration name="constructorParameterClassName" type="String" line="712"/>
                <declaration name="constructorParameterClass" type="Class" line="713"/>
                <method name="EngineDescription" type="constructor" line="714">
                    <params>
                        <param name="name" type="String"/>
                        <param name="sp" type="boolean"/>
                        <param name="paramName" type="String"/>
                    </params>
                </method>
                <method name="getConstructorParameterClass" type="Class" line="719">
                    <declaration name="clazz" type="Class" line="720"/>
                    <scope line="721"/>
                </method>
            </class>
            <declaration name="knownEngines" type="Map&lt;String,EngineDescription&gt;" line="728"/>
            <method name="addEngine" type="void" line="729">
                <params>
                    <param name="name" type="String"/>
                    <param name="sp" type="boolean"/>
                    <param name="paramName" type="String"/>
                </params>
                <declaration name="ed" type="EngineDescription" line="730"/>
            </method>
            <scope line="734"/>
            <method name="getEngineName" type="String" line="767">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="e" type="EngineDescription" line="768"/>
                <scope line="769"/>
            </method>
            <class name="Service" line="774">
                <javadoc line="774">
                    The description of a security service. It encapsulates the properties
                      of a service and contains a factory method to obtain new implementation
                      instances of this service.
                      &lt;p&gt;Each service has a provider that offers the service, a type,
                      an algorithm name, and the name of the class that implements the
                      service. Optionally, it also includes a list of alternate algorithm
                      names for this service (aliases) and attributes, which are a map of
                      (name, value) String pairs.
                      &lt;p&gt;This class defines the methods {@link #supportsParametersupportsParameter()} and {@link #newInstance newInstance()}which are used by the Java security framework when it searches for
                      suitable services and instantes them. The valid arguments to those
                      methods depend on the type of service. For the service types defined
                      within Java SE, see the
                      &lt;a href=&quot;../../../technotes/guides/security/crypto/CryptoSpec.html&quot;&gt;
                      Java Cryptography Architecture API Specification &amp;amp; Reference &lt;/a&gt;
                      for the valid values.
                      Note that components outside of Java SE can define additional types of
                      services and their behavior.
                      &lt;p&gt;Instances of this class are immutable.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="type" type="String" line="796"/>
                <declaration name="provider" type="Provider" line="797"/>
                <declaration name="aliases" type="List&lt;String&gt;" line="798"/>
                <declaration name="attributes" type="Map&lt;UString,String&gt;" line="799"/>
                <declaration name="classRef" type="Reference&lt;Class&gt;" line="800"/>
                <declaration name="hasKeyAttributes" type="Boolean" line="801"/>
                <declaration name="supportedFormats" type="String[]" line="802"/>
                <declaration name="supportedClasses" type="Class[]" line="803"/>
                <declaration name="registered" type="boolean" line="804"/>
                <declaration name="CLASS0" type="Class[]" line="805"/>
                <method name="Service" type="constructor" line="806">
                    <params>
                        <param name="provider" type="Provider"/>
                    </params>
                </method>
                <method name="isValid" type="boolean" line="811"/>
                <method name="addAlias" type="void" line="814">
                    <params>
                        <param name="alias" type="String"/>
                    </params>
                    <scope line="815"/>
                </method>
                <method name="addAttribute" type="void" line="820">
                    <params>
                        <param name="type" type="String"/>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="821"/>
                </method>
                <javadoc line="826">
                    Construct a new service.                    
                    <param>
                        provider the provider that offers this service                        
                    </param>
                    <param>
                        type the type of this service                        
                    </param>
                    <param>
                        algorithm the algorithm name                        
                    </param>
                    <param>
                        className the name of the class implementing this service                        
                    </param>
                    <param>
                        aliases List of aliases or null if algorithm has no aliases                        
                    </param>
                    <param>
                        attributes Map of attributes or null if this implementation
                          has no attributes                        
                    </param>
                    <throws>
                        NullPointerException if provider, type, algorithm, or
                          className is null                        
                    </throws>
                </javadoc>
                <method name="Service" type="constructor" line="838">
                    <params>
                        <param name="provider" type="Provider"/>
                        <param name="type" type="String"/>
                        <param name="algorithm" type="String"/>
                        <param name="className" type="String"/>
                        <param name="aliases" type="List<String>"/>
                        <param name="attributes" type="Map<String,String>"/>
                    </params>
                    <scope line="839"/>
                    <scope line="846"/>
                    <scope line="849"/>
                    <scope line="852"/>
                    <scope line="855">
                        <scope line="857"/>
                    </scope>
                </method>
                <javadoc line="862">
                    Get the type of this service. For example, &lt;code&gt;MessageDigest&lt;/code&gt;.                    
                    <return>
                        the type of this service                        
                    </return>
                </javadoc>
                <method name="getType" type="String" line="866"/>
                <javadoc line="869">
                    Return the name of the algorithm of this service. For example,
                      &lt;code&gt;SHA-1&lt;/code&gt;.                    
                    <return>
                        the algorithm of this service                        
                    </return>
                </javadoc>
                <method name="getAlgorithm" type="String" line="874"/>
                <javadoc line="877">
                    Return the Provider of this service.                    
                    <return>
                        the Provider of this service                        
                    </return>
                </javadoc>
                <method name="getProvider" type="Provider" line="881"/>
                <javadoc line="884">
                    Return the name of the class implementing this service.                    
                    <return>
                        the name of the class implementing this service                        
                    </return>
                </javadoc>
                <method name="getClassName" type="String" line="888"/>
                <method name="getAliases" type="List<String>" line="891"/>
                <javadoc line="894">
                    Return the value of the specified attribute or null if this
                      attribute is not set for this Service.                    
                    <param>
                        name the name of the requested attribute                        
                    </param>
                    <return>
                        the value of the specified attribute or null if the
                          attribute is not present                        
                    </return>
                    <throws>
                        NullPointerException if name is null                        
                    </throws>
                </javadoc>
                <method name="getAttribute" type="String" line="902">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="903"/>
                </method>
                <javadoc line="908">
                    Return a new instance of the implementation described by this
                      service. The security provider framework uses this method to
                      construct implementations. Applications will typically not need
                      to call it.
                      &lt;p&gt;The default implementation uses reflection to invoke the
                      standard constructor for this type of service.
                      Security providers can override this method to implement
                      instantiation in a different way.
                      For details and the values of constructorParameter that are
                      valid for the various types of services see the
                      &lt;a href=&quot;../../../technotes/guides/security/crypto/CryptoSpec.html&quot;&gt;
                      Java Cryptography Architecture API Specification &amp;amp;
                      Reference&lt;/a&gt;.                    
                    <param>
                        constructorParameter the value to pass to the constructor,
                          or null if this type of service does not use a constructorParameter.                        
                    </param>
                    <return>
                        a new implementation of this service                        
                    </return>
                    <throws>
                        InvalidParameterException if the value of
                          constructorParameter is invalid for this type of service.                        
                    </throws>
                    <throws>
                        NoSuchAlgorithmException if instantation failed for
                          any other reason.                        
                    </throws>
                </javadoc>
                <method name="newInstance" type="Object" line="930">
                    <params>
                        <param name="constructorParameter" type="Object"/>
                    </params>
                    <scope line="931">
                        <scope line="932"/>
                    </scope>
                    <scope line="937">
                        <declaration name="cap" type="EngineDescription" line="938"/>
                        <scope line="939"/>
                        <scope line="942">
                            <scope line="943"/>
                            <declaration name="clazz" type="Class" line="946"/>
                        </scope>
                        <scope line="949">
                            <declaration name="paramClass" type="Class" line="950"/>
                            <scope line="951">
                                <declaration name="argClass" type="Class" line="952"/>
                                <scope line="953"/>
                            </scope>
                            <declaration name="clazz" type="Class" line="957"/>
                            <declaration name="cons" type="Constructor" line="958"/>
                        </scope>
                    </scope>
                    <scope line="962"/>
                    <scope line="965"/>
                    <scope line="968"/>
                </method>
                <method name="getImplClass" type="Class" line="972">
                    <scope line="973">
                        <declaration name="ref" type="Reference&lt;Class&gt;" line="974"/>
                        <declaration name="clazz" type="Class" line="975"/>
                        <scope line="976">
                            <declaration name="cl" type="ClassLoader" line="977"/>
                            <scope line="978"/>
                            <scope line="981"/>
                        </scope>
                    </scope>
                    <scope line="988"/>
                </method>
                <javadoc line="992">
                    Generic code path for unknown engine types. Call the
                      no-args constructor if constructorParameter is null, otherwise
                      use the first matching constructor.                    
                </javadoc>
                <method name="newInstanceGeneric" type="Object" line="997">
                    <params>
                        <param name="constructorParameter" type="Object"/>
                    </params>
                    <declaration name="clazz" type="Class" line="998"/>
                    <scope line="999">
                        <declaration name="o" type="Object" line="1000"/>
                    </scope>
                    <declaration name="argClass" type="Class" line="1003"/>
                    <declaration name="cons" type="Constructor[]" line="1004"/>
                    <scope line="1005">
                        <declaration name="con" type="Constructor" line="1006"/>
                        <declaration name="paramTypes" type="Class[]" line="1007"/>
                        <scope line="1008"/>
                        <scope line="1011"/>
                        <declaration name="o" type="Object" line="1014"/>
                    </scope>
                </method>
                <javadoc line="1019">
                    Test whether this Service can use the specified parameter.
                      Returns false if this service cannot use the parameter. Returns
                      true if this service can use the parameter, if a fast test is
                      infeasible, or if the status is unknown.
                      &lt;p&gt;The security provider framework uses this method with
                      some types of services to quickly exclude non-matching
                      implementations for consideration.
                      Applications will typically not need to call it.
                      &lt;p&gt;For details and the values of parameter that are valid for the
                      various types of services see the top of this class and the
                      &lt;a href=&quot;../../../technotes/guides/security/crypto/CryptoSpec.html&quot;&gt;
                      Java Cryptography Architecture API Specification &amp;amp;
                      Reference&lt;/a&gt;.
                      Security providers can override it to implement their own test.                    
                    <param>
                        parameter the parameter to test                        
                    </param>
                    <return>
                        false if this this service cannot use the specified
                          parameter; true if it can possibly use the parameter                        
                    </return>
                    <throws>
                        InvalidParameterException if the value of parameter is
                          invalid for this type of service or if this method cannot be
                          used with this type of service                        
                    </throws>
                </javadoc>
                <method name="supportsParameter" type="boolean" line="1041">
                    <params>
                        <param name="parameter" type="Object"/>
                    </params>
                    <declaration name="cap" type="EngineDescription" line="1042"/>
                    <scope line="1043"/>
                    <scope line="1046"/>
                    <scope line="1049"/>
                    <scope line="1052"/>
                    <scope line="1055"/>
                    <declaration name="key" type="Key" line="1058"/>
                    <scope line="1059"/>
                    <scope line="1062"/>
                </method>
                <javadoc line="1067">
                    Return whether this service has its Supported properties for
                      keys defined. Parses the attributes if not yet initialized.                    
                </javadoc>
                <method name="hasKeyAttributes" type="boolean" line="1071">
                    <declaration name="b" type="Boolean" line="1072"/>
                    <scope line="1073">
                        <scope line="1074">
                            <declaration name="s" type="String" line="1075"/>
                            <scope line="1077"/>
                            <scope line="1081">
                                <declaration name="classNames" type="String[]" line="1082"/>
                                <declaration name="classList" type="List&lt;Class&gt;" line="1083"/>
                                <scope line="1084">
                                    <declaration name="clazz" type="Class" line="1085"/>
                                    <scope line="1086"/>
                                </scope>
                            </scope>
                            <declaration name="bool" type="boolean" line="1092"/>
                        </scope>
                    </scope>
                </method>
                <method name="getKeyClass" type="Class" line="1099">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="1100"/>
                    <scope line="1103"/>
                    <scope line="1105">
                        <declaration name="cl" type="ClassLoader" line="1106"/>
                        <scope line="1107"/>
                    </scope>
                    <scope line="1111"/>
                </method>
                <method name="supportsKeyFormat" type="boolean" line="1115">
                    <params>
                        <param name="key" type="Key"/>
                    </params>
                    <scope line="1116"/>
                    <declaration name="format" type="String" line="1119"/>
                    <scope line="1120"/>
                    <scope line="1123">
                        <scope line="1124"/>
                    </scope>
                </method>
                <method name="supportsKeyClass" type="boolean" line="1130">
                    <params>
                        <param name="key" type="Key"/>
                    </params>
                    <scope line="1131"/>
                    <declaration name="keyClass" type="Class" line="1134"/>
                    <scope line="1135">
                        <scope line="1136"/>
                    </scope>
                </method>
                <javadoc line="1142">
                    Return a String representation of this service.                    
                    <return>
                        a String representation of this service.                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="1146">
                    <declaration name="aString" type="String" line="1147"/>
                    <declaration name="attrs" type="String" line="1148"/>
                </method>
            </class>
        </class>
    </source>