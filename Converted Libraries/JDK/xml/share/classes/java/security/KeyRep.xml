<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.io"/>
        <import package="java.security.spec.PKCS8EncodedKeySpec"/>
        <import package="java.security.spec.X509EncodedKeySpec"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <class name="KeyRep" line="8">
            <implements interface="Serializable"/>
            <javadoc line="8">
                Standardized representation for serialized Key objects.
                  &lt;p&gt;
                  Note that a serialized Key may contain sensitive information
                  which should not be exposed in untrusted environments.  See the
                  &lt;a href=&quot;../../../platform/serialization/spec/security.html&quot;&gt;
                  Security Appendix&lt;/a&gt;
                  of the Serialization Specification for more information.                
                <see>
                    Key                    
                </see>
                <see>
                    KeyFactory                    
                </see>
                <see>
                    javax.crypto.spec.SecretKeySpec                    
                </see>
                <see>
                    java.security.spec.X509EncodedKeySpec                    
                </see>
                <see>
                    java.security.spec.PKCS8EncodedKeySpec                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <declaration name="Type" type="enum" line="25"/>
            <javadoc line="25">
                Key type.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <scope line="29"/>
            <declaration name="PKCS8" type="String" line="39"/>
            <javadoc line="35">
                Type for private keys.                
            </javadoc>
            <declaration name="X509" type="String" line="40"/>
            <declaration name="RAW" type="String" line="41"/>
            <declaration name="type" type="Type" line="42"/>
            <javadoc line="42">
                Either one of Type.SECRET, Type.PUBLIC, or Type.PRIVATE                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="algorithm" type="String" line="47"/>
            <javadoc line="47">
                The Key algorithm                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="format" type="String" line="52"/>
            <javadoc line="52">
                The Key encoding format                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="encoded" type="byte[]" line="57"/>
            <javadoc line="57">
                The encoded Key bytes                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="62">
                Construct the alternate Key class.
                  &lt;p&gt;                
                <param>
                    type either one of Type.SECRET, Type.PUBLIC, or Type.PRIVATE                    
                </param>
                <param>
                    algorithm the algorithm returned from
                      <code>Key.getAlgorithm()</code>                    
                </param>
                <param>
                    format the encoding format returned from
                      <code>Key.getFormat()</code>                    
                </param>
                <param>
                    encoded the encoded bytes returned from
                      <code>Key.getEncoded()</code>                    
                </param>
                <exception>
                    NullPointerExceptionif type is <code>null</code>,
                      if algorithm is <code>null</code>,
                      if format is <code>null</code>,
                      or if encoded is <code>null</code>                    
                </exception>
            </javadoc>
            <method name="KeyRep" type="constructor" line="77">
                <params>
                    <param name="type" type="Type"/>
                    <param name="algorithm" type="String"/>
                    <param name="format" type="String"/>
                    <param name="encoded" type="byte[]"/>
                </params>
                <scope line="78"/>
            </method>
            <javadoc line="86">
                Resolve the Key object.
                  &lt;p&gt; This method supports three Type/format combinations:
                  &lt;ul&gt;
                  &lt;li&gt; Type.SECRET/&quot;RAW&quot; - returns a SecretKeySpec object
                  constructed using encoded key bytes and algorithm
                  &lt;li&gt; Type.PUBLIC/&quot;X.509&quot; - gets a KeyFactory instance for
                  the key algorithm, constructs an X509EncodedKeySpec with the
                  encoded key bytes, and generates a public key from the spec
                  &lt;li&gt; Type.PRIVATE/&quot;PKCS#8&quot; - gets a KeyFactory instance for
                  the key algorithm, constructs a PKCS8EncodedKeySpec with the
                  encoded key bytes, and generates a private key from the spec
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <return>
                    the resolved Key object                    
                </return>
                <exception>
                    ObjectStreamException if the Type/format
                      combination is unrecognized, if the algorithm, key format, or
                      encoded key bytes are unrecognized/invalid, of if the
                      resolution of the key fails for any reason                    
                </exception>
            </javadoc>
            <method name="readResolve" type="Object" line="106">
                <scope line="107">
                    <scope line="108"/>
                    <scope line="111">
                        <declaration name="f" type="KeyFactory" line="112"/>
                    </scope>
                    <scope line="115">
                        <declaration name="f" type="KeyFactory" line="116"/>
                    </scope>
                    <scope line="119"/>
                </scope>
                <scope line="123"/>
                <scope line="126">
                    <declaration name="nse" type="NotSerializableException" line="127"/>
                </scope>
            </method>
        </class>
    </source>