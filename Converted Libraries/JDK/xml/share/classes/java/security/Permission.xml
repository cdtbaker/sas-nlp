<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <class name="Permission" line="28">
            <implements interface="Guard"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="28">
                Abstract class for representing access to a system resource.
                  All permissions have a name (whose interpretation depends on the subclass),
                  as well as abstract functions for defining the semantics of the
                  particular Permission subclass.
                  &lt;p&gt;Most Permission objects also include an &quot;actions&quot; list that tells the actions
                  that are permitted for the object.  For example,
                  for a &lt;code&gt;java.io.FilePermission&lt;/code&gt; object, the permission name is
                  the pathname of a file (or directory), and the actions list
                  (such as &quot;read, write&quot;) specifies which actions are granted for the
                  specified file (or for files in the specified directory).
                  The actions list is optional for Permission objects, such as
                  &lt;code&gt;java.lang.RuntimePermission&lt;/code&gt;,
                  that don&apos;t need such a list; you either have the named permission (such
                  as &quot;system.exit&quot;) or you don&apos;t.
                  &lt;p&gt;An important method that must be implemented by each subclass is
                  the &lt;code&gt;implies&lt;/code&gt; method to compare Permissions. Basically,
                  &quot;permission p1 implies permission p2&quot; means that
                  if one is granted permission p1, one is naturally granted permission p2.
                  Thus, this is not an equality test, but rather more of a
                  subset test.
                  &lt;P&gt; Permission objects are similar to String objects in that they
                  are immutable once they have been created. Subclasses should not
                  provide methods that can change the state of a permission
                  once it has been created.                
                <see>
                    Permissions                    
                </see>
                <see>
                    PermissionCollection                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="67"/>
            <declaration name="name" type="String" line="69"/>
            <javadoc line="71">
                Constructs a permission with the specified name.                
                <param>
                    name name of the Permission object being created.                    
                </param>
            </javadoc>
            <method name="Permission" type="constructor" line="78">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="82">
                Implements the guard interface for a permission. The
                  &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; method is called,
                  passing this permission object as the permission to check.
                  Returns silently if access is granted. Otherwise, throws
                  a SecurityException.                
                <param>
                    object the object being guarded (currently ignored).                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      <code>checkPermission</code> method doesn't allow access.                    
                </throws>
                <see>
                    Guard                    
                </see>
                <see>
                    GuardedObject                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
            </javadoc>
            <method name="checkGuard" type="void" line="100">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="101"/>
            </method>
            <method name="implies" type="boolean" line="105"/>
            <javadoc line="105">
                Checks if the specified permission&apos;s actions are &quot;implied by&quot;
                  this object&apos;s actions.
                  &lt;P&gt;
                  This must be implemented by subclasses of Permission, as they are the
                  only ones that can impose semantics on a Permission object.
                  &lt;p&gt;The &lt;code&gt;implies&lt;/code&gt; method is used by the AccessController to determine
                  whether or not a requested permission is implied by another permission that
                  is known to be valid in the current execution context.                
                <param>
                    permission the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="124"/>
            <javadoc line="124">
                Checks two Permission objects for equality.
                  &lt;P&gt;
                  Do not use the &lt;code&gt;equals&lt;/code&gt; method for making access control
                  decisions; use the &lt;code&gt;implies&lt;/code&gt; method.                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if both Permission objects are equivalent.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="137"/>
            <javadoc line="137">
                Returns the hash code value for this Permission object.
                  &lt;P&gt;
                  The required &lt;code&gt;hashCode&lt;/code&gt; behavior for Permission Objects is
                  the following: &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Whenever it is invoked on the same Permission object more than
                  once during an execution of a Java application, the
                  &lt;code&gt;hashCode&lt;/code&gt; method
                  must consistently return the same integer. This integer need not
                  remain consistent from one execution of an application to another
                  execution of the same application. &lt;p&gt;
                  &lt;li&gt;If two Permission objects are equal according to the
                  &lt;code&gt;equals&lt;/code&gt;
                  method, then calling the &lt;code&gt;hashCode&lt;/code&gt; method on each of the
                  two Permission objects must produce the same integer result.
                  &lt;/ul&gt;                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <javadoc line="160">
                Returns the name of this Permission.
                  For example, in the case of a &lt;code&gt;java.io.FilePermission&lt;/code&gt;,
                  the name will be a pathname.                
                <return>
                    the name of this Permission.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="169"/>
            <method name="getActions" type="String" line="173"/>
            <javadoc line="173">
                Returns the actions as a String. This is abstract
                  so subclasses can defer creating a String representation until
                  one is needed. Subclasses should always return actions in what they
                  consider to be their
                  canonical form. For example, two FilePermission objects created via
                  the following:
                  &lt;pre&gt;
                  perm1 = new FilePermission(p1,&quot;read,write&quot;);
                  perm2 = new FilePermission(p2,&quot;write,read&quot;);
                  &lt;/pre&gt;
                  both return
                  &quot;read,write&quot; when the &lt;code&gt;getActions&lt;/code&gt; method is invoked.                
                <return>
                    the actions of this Permission.                    
                </return>
            </javadoc>
            <javadoc line="195">
                Returns an empty PermissionCollection for a given Permission object, or null if
                  one is not defined. Subclasses of class Permission should
                  override this if they need to store their permissions in a particular
                  PermissionCollection object in order to provide the correct semantics
                  when the &lt;code&gt;PermissionCollection.implies&lt;/code&gt; method is called.
                  If null is returned,
                  then the caller of this method is free to store permissions of this
                  type in any PermissionCollection they choose (one that uses a Hashtable,
                  one that uses a Vector, etc).                
                <return>
                    a new PermissionCollection object for this type of Permission, or
                      null if one is not defined.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="210"/>
            <javadoc line="214">
                Returns a string describing this Permission.  The convention is to
                  specify the class name, the permission name, and the actions in
                  the following format: &apos;(&quot;ClassName&quot; &quot;name&quot; &quot;actions&quot;)&apos;, or
                  &apos;(&quot;ClassName&quot; &quot;name&quot;)&apos; if actions list is null or empty.                
                <return>
                    information about this Permission.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="222">
                <comment line="224">
                    OPTIONAL                    
                </comment>
                <declaration name="actions" type="String" line="223"/>
                <scope line="224"/>
                <scope line="226"/>
            </method>
        </class>
    </source>