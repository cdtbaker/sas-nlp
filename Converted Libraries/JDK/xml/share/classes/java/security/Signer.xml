<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.io"/>
        <class name="Signer" line="30">
            <extends class="Identity"/>
            <javadoc line="30">
                This class is used to represent an Identity that can also digitally
                  sign data.
                  &lt;p&gt;The management of a signer&apos;s private keys is an important and
                  sensitive issue that should be handled by subclasses as appropriate
                  to their intended use.                
                <see>
                    Identity                    
                </see>
                <author>
                    Benjamin Renaud                    
                </author>
                <deprecated>
                    This class is no longer used. Its functionality has been
                      replaced by &lt;code&gt;java.security.KeyStore&lt;/code&gt;, the
                      &lt;code&gt;java.security.cert&lt;/code&gt; package, and
                      &lt;code&gt;java.security.Principal&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="50"/>
            <declaration name="privateKey" type="PrivateKey" line="52"/>
            <javadoc line="52">
                The signer&apos;s private key.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="59">
                Creates a signer. This constructor should only be used for
                  serialization.                
            </javadoc>
            <method name="Signer" type="constructor" line="63"/>
            <javadoc line="68">
                Creates a signer with the specified identity name.                
                <param>
                    name the identity name.                    
                </param>
            </javadoc>
            <method name="Signer" type="constructor" line="73">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="77">
                Creates a signer with the specified identity name and scope.                
                <param>
                    name the identity name.                    
                </param>
                <param>
                    scope the scope of the identity.                    
                </param>
                <exception>
                    KeyManagementException if there is already an identity
                      with the same name in the scope.                    
                </exception>
            </javadoc>
            <method name="Signer" type="constructor" line="88">
                <params>
                    <param name="name" type="String"/>
                    <param name="scope" type="IdentityScope"/>
                </params>
            </method>
            <javadoc line="92">
                Returns this signer&apos;s private key.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with &lt;code&gt;&quot;getSignerPrivateKey&quot;&lt;/code&gt;
                  as its argument to see if it&apos;s ok to return the private key.                
                <return>
                    this signer&apos;s private key, or null if the private key has
                      not yet been set.                    
                </return>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkSecurityAccess&lt;/code&gt; method doesn&apos;t allow
                      returning the private key.                    
                </exception>
                <see>
                    SecurityManager#checkSecurityAccess                    
                </see>
            </javadoc>
            <method name="getPrivateKey" type="PrivateKey" line="108"/>
            <javadoc line="113">
                Sets the key pair (public key and private key) for this signer.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with &lt;code&gt;&quot;setSignerKeyPair&quot;&lt;/code&gt;
                  as its argument to see if it&apos;s ok to set the key pair.                
                <param>
                    pair an initialized key pair.                    
                </param>
                <exception>
                    InvalidParameterException if the key pair is not
                      properly initialized.                    
                </exception>
                <exception>
                    KeyException if the key pair cannot be set for any
                      other reason.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkSecurityAccess&lt;/code&gt; method doesn&apos;t allow
                      setting the key pair.                    
                </exception>
                <see>
                    SecurityManager#checkSecurityAccess                    
                </see>
            </javadoc>
            <method name="setKeyPair" type="void" line="133">
                <params>
                    <param name="pair" type="KeyPair"/>
                </params>
                <declaration name="pub" type="PublicKey" line="135"/>
                <declaration name="priv" type="PrivateKey" line="136"/>
                <scope line="138"/>
                <scope line="141">
                    <anonymous_class line="143">
                        <method name="run" type="Void" line="144"/>
                    </anonymous_class>
                </scope>
                <scope line="149"/>
            </method>
            <method name="printKeys" type="String" line="155">
                <declaration name="keys" type="String" line="156"/>
                <declaration name="publicKey" type="PublicKey" line="157"/>
                <scope line="158"/>
                <scope line="161"/>
            </method>
            <javadoc line="167">
                Returns a string of information about the signer.                
                <return>
                    a string of information about the signer.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="172"/>
            <method name="check" type="void" line="176">
                <params>
                    <param name="directive" type="String"/>
                </params>
                <declaration name="security" type="SecurityManager" line="177"/>
                <scope line="178"/>
            </method>
        </class>
    </source>