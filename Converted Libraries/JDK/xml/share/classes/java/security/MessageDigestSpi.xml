<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="MessageDigestSpi" line="4">
            <javadoc line="4">
                This class defines the &lt;i&gt;Service Provider Interface&lt;/i&gt; (&lt;b&gt;SPI&lt;/b&gt;)
                  for the &lt;code&gt;MessageDigest&lt;/code&gt; class, which provides the functionality
                  of a message digest algorithm, such as MD5 or SHA. Message digests are
                  secure one-way hash functions that take arbitrary-sized data and output a
                  fixed-length hash value.
                  &lt;p&gt; All the abstract methods in this class must be implemented by a
                  cryptographic service provider who wishes to supply the implementation
                  of a particular message digest algorithm.
                  &lt;p&gt; Implementations are free to implement the Cloneable interface.                
                <author>
                    Benjamin Renaud                    
                </author>
                <see>
                    MessageDigest                    
                </see>
            </javadoc>
            <declaration name="tempArray" type="byte[]" line="18"/>
            <javadoc line="19">
                Returns the digest length in bytes.
                  &lt;p&gt;This concrete method has been added to this previously-defined
                  abstract class. (For backwards compatibility, it cannot be abstract.)
                  &lt;p&gt;The default behavior is to return 0.
                  &lt;p&gt;This method may be overridden by a provider to return the digest
                  length.                
                <return>
                    the digest length in bytes.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="engineGetDigestLength" type="int" line="29"/>
            <method name="engineUpdate" type="void" line="32"/>
            <javadoc line="32">
                Updates the digest using the specified byte.                
                <param>
                    input the byte to use for the update.                    
                </param>
            </javadoc>
            <method name="engineUpdate" type="void" line="37"/>
            <javadoc line="37">
                Updates the digest using the specified array of bytes,
                  starting at the specified offset.                
                <param>
                    input the array of bytes to use for the update.                    
                </param>
                <param>
                    offset the offset to start from in the array of bytes.                    
                </param>
                <param>
                    len the number of bytes to use, starting at
                      &lt;code&gt;offset&lt;/code&gt;.                    
                </param>
            </javadoc>
            <javadoc line="46">
                Update the digest using the specified ByteBuffer. The digest is
                  updated using the &lt;code&gt;input.remaining()&lt;/code&gt; bytes starting
                  at &lt;code&gt;input.position()&lt;/code&gt;.
                  Upon return, the buffer&apos;s position will be equal to its limit;
                  its limit will not have changed.                
                <param>
                    input the ByteBuffer                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineUpdate" type="void" line="55">
                <params>
                    <param name="input" type="ByteBuffer"/>
                </params>
                <scope line="56"/>
                <scope line="59">
                    <declaration name="b" type="byte[]" line="60"/>
                    <declaration name="ofs" type="int" line="61"/>
                    <declaration name="pos" type="int" line="62"/>
                    <declaration name="lim" type="int" line="63"/>
                </scope>
                <scope line="67">
                    <declaration name="len" type="int" line="68"/>
                    <declaration name="n" type="int" line="69"/>
                    <scope line="70"/>
                    <scope line="73">
                        <declaration name="chunk" type="int" line="74"/>
                    </scope>
                </scope>
            </method>
            <method name="engineDigest" type="byte[]" line="81"/>
            <javadoc line="81">
                Completes the hash computation by performing final
                  operations such as padding. Once &lt;code&gt;engineDigest&lt;/code&gt; has
                  been called, the engine should be reset (see{@link #engineReset() engineReset}).
                  Resetting is the responsibility of the
                  engine implementor.                
                <return>
                    the array of bytes for the resulting hash value.                    
                </return>
            </javadoc>
            <javadoc line="90">
                Completes the hash computation by performing final
                  operations such as padding. Once &lt;code&gt;engineDigest&lt;/code&gt; has
                  been called, the engine should be reset (see{@link #engineReset() engineReset}).
                  Resetting is the responsibility of the
                  engine implementor.
                  This method should be abstract, but we leave it concrete for
                  binary compatibility.  Knowledgeable providers should override this
                  method.                
                <param>
                    buf the output buffer in which to store the digest                    
                </param>
                <param>
                    offset offset to start from in the output buffer                    
                </param>
                <param>
                    len number of bytes within buf allotted for the digest.
                      Both this default implementation and the SUN provider do not
                      return partial digests.  The presence of this parameter is solely
                      for consistency in our API&apos;s.  If the value of this parameter is less
                      than the actual digest length, the method will throw a DigestException.
                      This parameter is ignored if its value is greater than or equal to
                      the actual digest length.                    
                </param>
                <return>
                    the length of the digest stored in the output buffer.                    
                </return>
                <exception>
                    DigestException if an error occurs.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="engineDigest" type="int" line="112">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="digest" type="byte[]" line="113"/>
            </method>
            <method name="engineReset" type="void" line="119"/>
            <javadoc line="119">
                Resets the digest for further use.                
            </javadoc>
            <javadoc line="123">
                Returns a clone if the implementation is cloneable.                
                <return>
                    a clone if the implementation is cloneable.                    
                </return>
                <exception>
                    CloneNotSupportedException if this is called on an
                      implementation that does not support &lt;code&gt;Cloneable&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="129">
                <scope line="130"/>
                <scope line="133"/>
            </method>
        </class>
    </source>