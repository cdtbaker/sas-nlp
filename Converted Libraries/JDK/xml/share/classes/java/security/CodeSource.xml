<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.net.URL"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Hashtable"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.security.cert"/>
        <class name="CodeSource" line="38">
            <comment line="60">
                The code signers.                
            </comment>
            <comment line="65">
                The code signers. Certificate chains are concatenated.                
            </comment>
            <comment line="70">
                cached SocketPermission used for matchLocation                
            </comment>
            <comment line="73">
                for generating cert paths                
            </comment>
            <comment line="588">
                Convert an array of certificates to an array of code signers.
                 The array of certificates is a concatenation of certificate chains
                 where the initial certificate in each chain is the end-entity cert.
                
                 @return An array of code signers or null if none are generated.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="38">
                &lt;p&gt;This class extends the concept of a codebase to
                  encapsulate not only the location (URL) but also the certificate chains
                  that were used to verify signed code originating from that location.                
                <author>
                    Li Gong                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="50"/>
            <declaration name="location" type="URL" line="52"/>
            <javadoc line="52">
                The code location.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="signers" type="CodeSigner[]" line="62"/>
            <declaration name="certs" type="java.security.cert.Certificate" line="67"/>
            <declaration name="sp" type="SocketPermission" line="70"/>
            <declaration name="factory" type="CertificateFactory" line="73"/>
            <javadoc line="75">
                Constructs a CodeSource and associates it with the specified
                  location and set of certificates.                
                <param>
                    url the location (URL).                    
                </param>
                <param>
                    certs the certificate(s). It may be null. The contents of the
                      array are copied to protect against subsequent modification.                    
                </param>
            </javadoc>
            <method name="CodeSource" type="constructor" line="84">
                <params>
                    <param name="url" type="URL"/>
                    <param name="certs" type="java.security.cert.Certificate"/>
                </params>
                <comment line="88">
                    Copy the supplied certs                    
                </comment>
                <scope line="88"/>
            </method>
            <javadoc line="93">
                Constructs a CodeSource and associates it with the specified
                  location and set of code signers.                
                <param>
                    url the location (URL).                    
                </param>
                <param>
                    signers the code signers. It may be null. The contents of the
                      array are copied to protect against subsequent modification.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="CodeSource" type="constructor" line="103">
                <params>
                    <param name="url" type="URL"/>
                    <param name="signers" type="CodeSigner[]"/>
                </params>
                <comment line="107">
                    Copy the supplied signers                    
                </comment>
                <scope line="107"/>
            </method>
            <javadoc line="112">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="118"/>
            <javadoc line="125">
                Tests for equality between the specified object and this
                  object. Two CodeSource objects are considered equal if their
                  locations are of identical value and if their signer certificate
                  chains are of identical value. It is not required that
                  the certificate chains be in the same order.                
                <param>
                    obj the object to test for equality with this object.                    
                </param>
                <return>
                    true if the objects are considered equal, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="136">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="141">
                    objects types must be equal                    
                </comment>
                <comment line="147">
                    URLs must match                    
                </comment>
                <comment line="149">
                    if location is null, then cs.location must be null as well                    
                </comment>
                <comment line="152">
                    if location is not null, then it must equal cs.location                    
                </comment>
                <comment line="156">
                    certs must match                    
                </comment>
                <declaration name="cs" type="CodeSource" line="144"/>
                <scope line="147"/>
                <scope line="150"/>
            </method>
            <javadoc line="159">
                Returns the location associated with this CodeSource.                
                <return>
                    the location (URL).                    
                </return>
            </javadoc>
            <method name="getLocation" type="URL" line="164">
                <comment line="166">
                    since URL is practically immutable, returning itself is not                    
                </comment>
            </method>
            <javadoc line="170">
                Returns the certificates associated with this CodeSource.
                  &lt;p&gt;
                  If this CodeSource object was created using the{@link #CodeSource(URL url,CodeSigner[] signers)}constructor then its certificate chains are extracted and used to
                  create an array of Certificate objects. Each signer certificate is
                  followed by its supporting certificate chain (which may be empty).
                  Each signer certificate and its supporting certificate chain is ordered
                  bottom-to-top (i.e., with the signer certificate first and the (root)
                  certificate authority last).                
                <return>
                    A copy of the certificates array, or null if there is none.                    
                </return>
            </javadoc>
            <method name="getCertificates" type="java.security.cert.Certificate[]" line="184">
                <comment line="190">
                    Convert the code signers to certs                    
                </comment>
                <scope line="185"/>
                <scope line="188">
                    <declaration name="certChains" type="ArrayList&lt;java.security.cert.Certificate&gt;" line="190"/>
                    <scope line="192"/>
                </scope>
                <scope line="200"/>
            </method>
            <javadoc line="205">
                Returns the code signers associated with this CodeSource.
                  &lt;p&gt;
                  If this CodeSource object was created using the{@link #CodeSource(URL url,Certificate[] certs)}constructor then its certificate chains are extracted and used to
                  create an array of CodeSigner objects. Note that only X.509 certificates
                  are examined - all other certificate types are ignored.                
                <return>
                    A copy of the code signer array, or null if there is none.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getCodeSigners" type="CodeSigner[]" line="218">
                <comment line="224">
                    Convert the certs to code signers                    
                </comment>
                <scope line="219"/>
                <scope line="222"/>
                <scope line="227"/>
            </method>
            <javadoc line="232">
                Returns true if this CodeSource object &quot;implies&quot; the specified CodeSource.
                  &lt;P&gt;
                  More specifically, this method makes the following checks, in order.
                  If any fail, it returns false. If they all succeed, it returns true.&lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt; &lt;i&gt;codesource&lt;/i&gt; must not be null.
                  &lt;li&gt; If this object&apos;s certificates are not null, then all
                  of this object&apos;s certificates must be present in &lt;i&gt;codesource&lt;/i&gt;&apos;s
                  certificates.
                  &lt;li&gt; If this object&apos;s location (getLocation()) is not null, then the
                  following checks are made against this object&apos;s location and
                  &lt;i&gt;codesource&lt;/i&gt;&apos;s:&lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;  &lt;i&gt;codesource&lt;/i&gt;&apos;s location must not be null.
                  &lt;li&gt;  If this object&apos;s location
                  equals &lt;i&gt;codesource&lt;/i&gt;&apos;s location, then return true.
                  &lt;li&gt;  This object&apos;s protocol (getLocation().getProtocol()) must be
                  equal to &lt;i&gt;codesource&lt;/i&gt;&apos;s protocol.
                  &lt;li&gt;  If this object&apos;s host (getLocation().getHost()) is not null,
                  then the SocketPermission
                  constructed with this object&apos;s host must imply the
                  SocketPermission constructed with &lt;i&gt;codesource&lt;/i&gt;&apos;s host.
                  &lt;li&gt;  If this object&apos;s port (getLocation().getPort()) is not
                  equal to -1 (that is, if a port is specified), it must equal
                  &lt;i&gt;codesource&lt;/i&gt;&apos;s port.
                  &lt;li&gt;  If this object&apos;s file (getLocation().getFile()) doesn&apos;t equal
                  &lt;i&gt;codesource&lt;/i&gt;&apos;s file, then the following checks are made:
                  If this object&apos;s file ends with &quot;/-&quot;,
                  then &lt;i&gt;codesource&lt;/i&gt;&apos;s file must start with this object&apos;s
                  file (exclusive the trailing &quot;-&quot;).
                  If this object&apos;s file ends with a &quot;/&quot;,
                  then &lt;i&gt;codesource&lt;/i&gt;&apos;s file must start with this object&apos;s
                  file and must not have any further &quot;/&quot; separators.
                  If this object&apos;s file doesn&apos;t end with a &quot;/&quot;,
                  then &lt;i&gt;codesource&lt;/i&gt;&apos;s file must match this object&apos;s
                  file with a &apos;/&apos; appended.
                  &lt;li&gt;  If this object&apos;s reference (getLocation().getRef()) is
                  not null, it must equal &lt;i&gt;codesource&lt;/i&gt;&apos;s reference.
                  &lt;/ol&gt;
                  &lt;/ol&gt;
                  &lt;p&gt;
                  For example, the codesource objects with the following locations
                  and null certificates all imply
                  the codesource with the location &quot;http://java.sun.com/classes/foo.jar&quot;
                  and null certificates:
                  &lt;pre&gt;
                  http:
                  http://.sun.com/classes/
                  http://java.sun.com/classes/-
                  http://java.sun.com/classes/foo.jar
                  &lt;/pre&gt;
                  Note that if this CodeSource has a null location and a null
                  certificate chain, then it implies every other CodeSource.                
                <param>
                    codesource CodeSource to compare against.                    
                </param>
                <return>
                    true if the specified codesource is implied by this codesource,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="302">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
            </method>
            <javadoc line="309">
                Returns true if all the certs in this
                  CodeSource are also in &lt;i&gt;that&lt;/i&gt;.                
                <param>
                    that the CodeSource to check against.                    
                </param>
                <param>
                    strict If true then a strict equality match is performed.
                      Otherwise a subset match is performed.                    
                </param>
            </javadoc>
            <method name="matchCerts" type="boolean" line="318">
                <params>
                    <param name="that" type="CodeSource"/>
                    <param name="strict" type="boolean"/>
                </params>
                <comment line="322">
                    match any key                    
                </comment>
                <comment line="329">
                    both have signers                    
                </comment>
                <comment line="346">
                    both have certs                    
                </comment>
                <declaration name="match" type="boolean" line="319"/>
                <scope line="322">
                    <scope line="323"/>
                    <scope line="325"/>
                </scope>
                <scope line="329">
                    <scope line="330"/>
                    <scope line="333">
                        <scope line="335">
                            <scope line="336"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="346">
                    <scope line="347"/>
                    <scope line="350">
                        <scope line="352">
                            <scope line="353"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="367">
                Returns true if two CodeSource&apos;s have the &quot;same&quot; location.                
                <param>
                    that CodeSource to compare against                    
                </param>
            </javadoc>
            <method name="matchLocation" type="boolean" line="373">
                <params>
                    <param name="that" type="CodeSource"/>
                </params>
                <comment line="394">
                    ok                    
                </comment>
                <comment line="417">
                    Matches the directory and (recursively) all files
                     and subdirectories contained in that directory.
                     For example, &quot;/a/b/-&quot; implies anything that starts with
                     &quot;/a/b/&quot;                    
                </comment>
                <comment line="426">
                    Matches the directory and all the files contained in that
                     directory.
                     For example, &quot;/a/b/*&quot; implies anything that starts with
                     &quot;/a/b/&quot; but has no further slashes                    
                </comment>
                <comment line="439">
                    Exact matches only.
                     For example, &quot;/a/b&quot; and &quot;/a/b/&quot; both imply &quot;/a/b/&quot;                    
                </comment>
                <scope line="374"/>
                <declaration name="thisHost" type="String" line="387"/>
                <declaration name="thatHost" type="String" line="388"/>
                <scope line="390">
                    <scope line="392"/>
                    <scope line="394">
                        <scope line="395"/>
                        <scope line="398"/>
                        <scope line="401"/>
                        <scope line="404"/>
                    </scope>
                </scope>
                <scope line="410"/>
                <scope line="415">
                    <declaration name="thisPath" type="String" line="420"/>
                </scope>
                <scope line="424">
                    <declaration name="last" type="int" line="429"/>
                    <declaration name="thisPath" type="String" line="432"/>
                    <declaration name="thatPath" type="String" line="434"/>
                </scope>
                <scope line="437">
                    <scope line="441"/>
                </scope>
            </method>
            <javadoc line="452">
                Returns a string describing this CodeSource, telling its
                  URL and certificates.                
                <return>
                    information about this CodeSource.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="458">
                <declaration name="sb" type="StringBuilder" line="459"/>
                <scope line="463">
                    <scope line="464"/>
                </scope>
                <scope line="468">
                    <scope line="469"/>
                </scope>
                <scope line="472"/>
            </method>
            <javadoc line="479">
                Writes this object out to a stream (i.e., serializes it).                
                <serialData>
                    An initial &lt;code&gt;URL&lt;/code&gt; is followed by an
                      &lt;code&gt;int&lt;/code&gt; indicating the number of certificates to follow
                      (a value of &quot;zero&quot; denotes that there are no certificates associated
                      with this object).
                      Each certificate is written out starting with a &lt;code&gt;String&lt;/code&gt;
                      denoting the certificate type, followed by an
                      &lt;code&gt;int&lt;/code&gt; specifying the length of the certificate encoding,
                      followed by the certificate encoding itself which is written out as an
                      array of bytes. Finally, if any code signers are present then the array
                      of code signers is serialized and written out too.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="495">
                <params>
                    <param name="oos" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="497">
                    location                    
                </comment>
                <comment line="499">
                    Serialize the array of certs                    
                </comment>
                <comment line="503">
                    write out the total number of certs                    
                </comment>
                <comment line="505">
                    write out each cert, including its type                    
                </comment>
                <comment line="519">
                    Serialize the array of code signers (if any)                    
                </comment>
                <scope line="499"/>
                <scope line="501">
                    <scope line="505">
                        <declaration name="cert" type="java.security.cert.Certificate" line="506"/>
                        <scope line="507">
                            <declaration name="encoded" type="byte[]" line="509"/>
                        </scope>
                        <scope line="512"/>
                    </scope>
                </scope>
                <scope line="519"/>
            </method>
            <javadoc line="524">
                Restores this object from a stream (i.e., deserializes it).                
            </javadoc>
            <method name="readObject" type="void" line="529">
                <params>
                    <param name="ois" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="534">
                    location                    
                </comment>
                <comment line="536">
                    process any new-style certs in the stream (if present)                    
                </comment>
                <comment line="539">
                    we know of 3 different cert types: X.509, PGP, SDSI, which
                     could all be present in the stream at the same time                    
                </comment>
                <comment line="546">
                    read the certificate type, and instantiate a certificate
                     factory of that type (reuse existing factory if possible)                    
                </comment>
                <comment line="550">
                    reuse certificate factory                    
                </comment>
                <comment line="553">
                    create new certificate factory                    
                </comment>
                <comment line="560">
                    store the certificate factory so we can reuse it later                    
                </comment>
                <comment line="563">
                    parse the certificate                    
                </comment>
                <comment line="580">
                    Deserialize array of code signers (if any)                    
                </comment>
                <comment line="584">
                    no signers present                    
                </comment>
                <declaration name="cf" type="CertificateFactory" line="530"/>
                <declaration name="cfs" type="Hashtable&lt;String,CertificateFactory&gt;" line="531"/>
                <declaration name="size" type="int" line="536"/>
                <scope line="537"/>
                <scope line="544">
                    <declaration name="certType" type="String" line="547"/>
                    <scope line="548"/>
                    <scope line="551">
                        <scope line="553"/>
                        <scope line="555"/>
                    </scope>
                    <declaration name="encoded" type="byte[]" line="563"/>
                    <scope line="564"/>
                    <scope line="566"/>
                    <declaration name="bais" type="ByteArrayInputStream" line="570"/>
                    <scope line="571"/>
                    <scope line="573"/>
                </scope>
                <scope line="580"/>
                <scope line="582"/>
            </method>
            <method name="convertCertArrayToSignerArray" type="CodeSigner[]" line="595">
                <params>
                    <param name="certs" type="java.security.cert.Certificate[]"/>
                </params>
                <comment line="603">
                    Initialize certificate factory                    
                </comment>
                <comment line="608">
                    Iterate through all the certificates                    
                </comment>
                <comment line="614">
                    first cert is an end-entity cert                    
                </comment>
                <comment line="617">
                    Extract chain of certificates
                     (loop while certs are not end-entity certs)                    
                </comment>
                <comment line="637">
                    TODO - may be better to throw an ex. here                    
                </comment>
                <scope line="597"/>
                <scope line="601">
                    <scope line="603"/>
                    <declaration name="i" type="int" line="608"/>
                    <declaration name="signers" type="List&lt;CodeSigner&gt;" line="609"/>
                    <scope line="610">
                        <declaration name="certChain" type="List&lt;java.security.cert.Certificate&gt;" line="611"/>
                        <declaration name="j" type="int" line="614"/>
                        <scope line="620"/>
                        <declaration name="certPath" type="CertPath" line="625"/>
                    </scope>
                    <scope line="629"/>
                    <scope line="631"/>
                </scope>
                <scope line="635"/>
            </method>
        </class>
    </source>