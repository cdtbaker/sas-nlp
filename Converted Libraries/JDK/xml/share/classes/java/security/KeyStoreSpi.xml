<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.security.auth.callback"/>
        <class name="KeyStoreSpi" line="9">
            <javadoc line="9">
                This class defines the &lt;i&gt;Service Provider Interface&lt;/i&gt; (&lt;b&gt;SPI&lt;/b&gt;)
                  for the &lt;code&gt;KeyStore&lt;/code&gt; class.
                  All the abstract methods in this class must be implemented by each
                  cryptographic service provider who wishes to supply the implementation
                  of a keystore for a particular keystore type.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    KeyStore                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="engineGetKey" type="Key" line="20"/>
            <javadoc line="20">
                Returns the key associated with the given alias, using the given
                  password to recover it.  The key must have been associated with
                  the alias by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt; or &lt;code&gt;SecretKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password for recovering the key                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a key-related entry.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g., the given password is wrong).                    
                </exception>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="36"/>
            <javadoc line="36">
                Returns the certificate chain associated with the given alias.
                  The certificate chain must have been associated with the alias
                  by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="48"/>
            <javadoc line="48">
                Returns the certificate associated with the given alias.
                  &lt;p&gt; If the given alias name identifies an entry
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  then the trusted certificate contained in that entry is returned.
                  &lt;p&gt; If the given alias name identifies an entry
                  created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;,
                  then the first element of the certificate chain in that entry
                  (if a chain exists) is returned.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="66"/>
            <javadoc line="66">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="73"/>
            <javadoc line="73">
                Assigns the given key to the given alias, protecting it with the given
                  password.
                  &lt;p&gt;If the given key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the given key cannot be protected, or
                      this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="92"/>
            <javadoc line="92">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="110"/>
            <javadoc line="110">
                Assigns the given certificate to the given alias.
                  &lt;p&gt; If the given alias identifies an existing entry
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  the trusted certificate in the existing entry
                  is overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify an entry containing a trusted certificate,
                      or this operation fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="125"/>
            <javadoc line="125">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineAliases" type="Enumeration<String>" line="131"/>
            <javadoc line="131">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="136"/>
            <javadoc line="136">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="142"/>
            <javadoc line="142">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="147"/>
            <javadoc line="147">
                Returns true if the entry identified by the given alias
                  was created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt; or a &lt;code&gt;SecretKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias for the keystore entry to be checked                    
                </param>
                <return>
                    true if the entry identified by the given alias is a
                      key-related, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="157"/>
            <javadoc line="157">
                Returns true if the entry identified by the given alias
                  was created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;.                
                <param>
                    alias the alias for the keystore entry to be checked                    
                </param>
                <return>
                    true if the entry identified by the given alias contains a
                      trusted certificate, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="167"/>
            <javadoc line="167">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered was
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  then the given certificate is compared to that entry&apos;s certificate.
                  &lt;p&gt; If the entry being considered was
                  created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;,
                  then the given certificate is compared to the first
                  element of that entry&apos;s certificate chain.                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the alias name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineStore" type="void" line="187"/>
            <javadoc line="187">
                Stores this keystore to the given output stream, and protects its
                  integrity with the given password.                
                <param>
                    stream the output stream to which this keystore is written.                    
                </param>
                <param>
                    password the password to generate the keystore integrity check                    
                </param>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
            </javadoc>
            <javadoc line="199">
                Stores this keystore using the given
                  &lt;code&gt;KeyStore.LoadStoreParmeter&lt;/code&gt;.                
                <param>
                    param the <code>KeyStore.LoadStoreParmeter</code>
                      that specifies how to store the keystore,
                      which may be <code>null</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      <code>KeyStore.LoadStoreParmeter</code>
                      input is not recognized                    
                </exception>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineStore" type="void" line="215">
                <params>
                    <param name="param" type="KeyStore.LoadStoreParameter"/>
                </params>
            </method>
            <method name="engineLoad" type="void" line="218"/>
            <javadoc line="218">
                Loads the keystore from the given input stream.
                  &lt;p&gt;A password may be given to unlock the keystore
                  (e.g. the keystore resides on a hardware token device),
                  or to check the integrity of the keystore data.
                  If a password is not given for integrity checking,
                  then integrity checking is not performed.                
                <param>
                    stream the input stream from which the keystore is loaded,
                      or <code>null</code>                    
                </param>
                <param>
                    password the password used to check the integrity of
                      the keystore, the password used to unlock the keystore,
                      or <code>null</code>                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data, if a password is required but not given,
                      or if the given password was incorrect. If the error is due to a
                      wrong password, the {@link Throwable#getCause cause} of the
                      <code>IOException</code> should be an
                      <code>UnrecoverableKeyException</code>                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
            </javadoc>
            <javadoc line="242">
                Loads the keystore using the given
                  &lt;code&gt;KeyStore.LoadStoreParameter&lt;/code&gt;.
                  &lt;p&gt; Note that if this KeyStore has already been loaded, it is
                  reinitialized and loaded again from the given parameter.                
                <param>
                    param the <code>KeyStore.LoadStoreParameter</code>
                      that specifies how to load the keystore,
                      which may be <code>null</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      <code>KeyStore.LoadStoreParameter</code>
                      input is not recognized                    
                </exception>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data. If the error is due to an incorrect
                      <code>ProtectionParameter</code> (e.g. wrong password)
                      the {@link Throwable#getCause cause} of the
                      <code>IOException</code> should be an
                      <code>UnrecoverableKeyException</code>                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineLoad" type="void" line="265">
                <params>
                    <param name="param" type="KeyStore.LoadStoreParameter"/>
                </params>
                <scope line="266"/>
                <scope line="270">
                    <declaration name="protection" type="ProtectionParameter" line="271"/>
                    <declaration name="password" type="char[]" line="272"/>
                    <scope line="273"/>
                    <scope line="276">
                        <declaration name="handler" type="CallbackHandler" line="277"/>
                        <declaration name="callback" type="PasswordCallback" line="278"/>
                        <scope line="279"/>
                        <scope line="282"/>
                        <scope line="287"/>
                    </scope>
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="299">
                Gets a &lt;code&gt;KeyStore.Entry&lt;/code&gt; for the specified alias
                  with the specified protection parameter.                
                <param>
                    alias get the <code>KeyStore.Entry</code> for this alias                    
                </param>
                <param>
                    protParam the <code>ProtectionParameter</code>
                      used to protect the <code>Entry</code>,
                      which may be <code>null</code>                    
                </param>
                <return>
                    the <code>KeyStore.Entry</code> for the specified alias,
                      or <code>null</code> if there is no such entry                    
                </return>
                <exception>
                    KeyStoreException if the operation failed                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      entry cannot be found                    
                </exception>
                <exception>
                    UnrecoverableEntryException if the specified
                      <code>protParam</code> were insufficient or invalid                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the entry is a
                      <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>
                      and the specified <code>protParam</code> does not contain
                      the information needed to recover the key (e.g. wrong password)                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineGetEntry" type="KeyStore.Entry" line="319">
                <params>
                    <param name="alias" type="String"/>
                    <param name="protParam" type="KeyStore.ProtectionParameter"/>
                </params>
                <scope line="320"/>
                <scope line="323">
                    <scope line="324"/>
                    <scope line="327"/>
                </scope>
                <scope line="331">
                    <scope line="332"/>
                    <scope line="335">
                        <declaration name="pp" type="KeyStore.PasswordProtection" line="336"/>
                        <declaration name="password" type="char[]" line="337"/>
                        <declaration name="key" type="Key" line="338"/>
                        <scope line="339">
                            <declaration name="chain" type="Certificate[]" line="340"/>
                        </scope>
                        <scope line="343"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="350">
                Saves a &lt;code&gt;KeyStore.Entry&lt;/code&gt; under the specified alias.
                  The specified protection parameter is used to protect the
                  &lt;code&gt;Entry&lt;/code&gt;.
                  &lt;p&gt; If an entry already exists for the specified alias,
                  it is overridden.                
                <param>
                    alias save the <code>KeyStore.Entry</code> under this alias                    
                </param>
                <param>
                    entry the <code>Entry</code> to save                    
                </param>
                <param>
                    protParam the <code>ProtectionParameter</code>
                      used to protect the <code>Entry</code>,
                      which may be <code>null</code>                    
                </param>
                <exception>
                    KeyStoreException if this operation fails                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineSetEntry" type="void" line="364">
                <params>
                    <param name="alias" type="String"/>
                    <param name="entry" type="KeyStore.Entry"/>
                    <param name="protParam" type="KeyStore.ProtectionParameter"/>
                </params>
                <scope line="365"/>
                <declaration name="pProtect" type="KeyStore.PasswordProtection" line="368"/>
                <scope line="369"/>
                <scope line="372">
                    <scope line="373"/>
                    <scope line="376">
                        <declaration name="tce" type="KeyStore.TrustedCertificateEntry" line="377"/>
                    </scope>
                </scope>
                <scope line="382">
                    <scope line="383"/>
                    <scope line="386"/>
                </scope>
                <scope line="391">
                    <scope line="392"/>
                    <scope line="395"/>
                </scope>
            </method>
            <javadoc line="402">
                Determines if the keystore &lt;code&gt;Entry&lt;/code&gt; for the specified
                  &lt;code&gt;alias&lt;/code&gt; is an instance or subclass of the specified
                  &lt;code&gt;entryClass&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    entryClass the entry class                    
                </param>
                <return>
                    true if the keystore <code>Entry</code> for the specified
                      <code>alias</code> is an instance or subclass of the
                      specified <code>entryClass</code>, false otherwise                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineEntryInstanceOf" type="boolean" line="413">
                <params>
                    <param name="alias" type="String"/>
                    <param name="entryClass" type="Class<? extends KeyStore.Entry>"/>
                </params>
                <scope line="414"/>
                <scope line="417"/>
                <scope line="420"/>
            </method>
        </class>
    </source>