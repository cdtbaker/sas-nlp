<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util"/>
        <import package="java.security.Provider.Service"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="SecureRandom" line="35">
            <extends class="java.util.Random"/>
            <comment line="111">
                The algorithm name of null if unknown.
                
                 @serial
                 @since 1.5                
            </comment>
            <comment line="119">
                Seed Generator                
            </comment>
            <comment line="553">
                Declare serialVersionUID to be compatible with JDK1.1                
            </comment>
            <comment line="556">
                Retain unused values serialized from JDK1.1                
            </comment>
            <javadoc line="35">
                This class provides a cryptographically strong random number
                  generator (RNG).
                  &lt;p&gt;A cryptographically strong random number
                  minimally complies with the statistical random number generator tests
                  specified in &lt;a href=&quot;http://csrc.nist.gov/cryptval/140-2.htm&quot;&gt;
                  &lt;i&gt;FIPS 140-2, Security Requirements for Cryptographic Modules&lt;/i&gt;&lt;/a&gt;,
                  section 4.9.1.
                  Additionally, SecureRandom must produce non-deterministic output.
                  Therefore any seed material passed to a SecureRandom object must be
                  unpredictable, and all SecureRandom output sequences must be
                  cryptographically strong, as described in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc1750.txt&quot;&gt;
                  &lt;i&gt;RFC 1750: Randomness Recommendations for Security&lt;/i&gt;&lt;/a&gt;.
                  &lt;p&gt;A caller obtains a SecureRandom instance via the
                  no-argument constructor or one of the &lt;code&gt;getInstance&lt;/code&gt; methods:
                  &lt;pre&gt;
                  SecureRandom random = new SecureRandom();
                  &lt;/pre&gt;
                  &lt;p&gt; Many SecureRandom implementations are in the form of a pseudo-random
                  number generator (PRNG), which means they use a deterministic algorithm
                  to produce a pseudo-random sequence from a true random seed.
                  Other implementations may produce true random numbers,
                  and yet others may use a combination of both techniques.
                  &lt;p&gt; Typical callers of SecureRandom invoke the following methods
                  to retrieve random bytes:
                  &lt;pre&gt;
                  SecureRandom random = new SecureRandom();
                  byte bytes[] = new byte[20];
                  random.nextBytes(bytes);
                  &lt;/pre&gt;
                  &lt;p&gt; Callers may also invoke the &lt;code&gt;generateSeed&lt;/code&gt; method
                  to generate a given number of seed bytes (to seed other random number
                  generators, for example):
                  &lt;pre&gt;
                  byte seed[] = random.generateSeed(20);
                  &lt;/pre&gt;
                  Note: Depending on the implementation, the &lt;code&gt;generateSeed&lt;/code&gt; and
                  &lt;code&gt;nextBytes&lt;/code&gt; methods may block as entropy is being gathered,
                  for example, if they need to read from /dev/random on various unix-like
                  operating systems.                
                <see>
                    java.security.SecureRandomSpi                    
                </see>
                <see>
                    java.util.Random                    
                </see>
                <author>
                    Benjamin Renaud                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
            </javadoc>
            <declaration name="provider" type="Provider" line="94"/>
            <javadoc line="94">
                The provider.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="secureRandomSpi" type="SecureRandomSpi" line="102"/>
            <javadoc line="102">
                The provider implementation.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="algorithm" type="String" line="116"/>
            <declaration name="seedGenerator" type="SecureRandom" line="119"/>
            <javadoc line="121">
                Constructs a secure random number generator (RNG) implementing the
                  default random number algorithm.
                  &lt;p&gt; This constructor traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new SecureRandom object encapsulating the
                  SecureRandomSpi implementation from the first
                  Provider that supports a SecureRandom (RNG) algorithm is returned.
                  If none of the Providers support a RNG algorithm,
                  then an implementation-specific default is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.
                  &lt;p&gt; See the SecureRandom section in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard RNG algorithm names.
                  &lt;p&gt; The returned SecureRandom object has not been seeded.  To seed the
                  returned object, call the &lt;code&gt;setSeed&lt;/code&gt; method.
                  If &lt;code&gt;setSeed&lt;/code&gt; is not called, the first call to
                  &lt;code&gt;nextBytes&lt;/code&gt; will force the SecureRandom object to seed itself.
                  This self-seeding will not occur if &lt;code&gt;setSeed&lt;/code&gt; was
                  previously called.                
            </javadoc>
            <method name="SecureRandom" type="constructor" line="148">
                <comment line="150">
                    This call to our superclass constructor will result in a call
                     to our own &lt;code&gt;setSeed&lt;code&gt; method, which will return
                     immediately when it is passed zero.                    
                </comment>
            </method>
            <javadoc line="158">
                Constructs a secure random number generator (RNG) implementing the
                  default random number algorithm.
                  The SecureRandom instance is seeded with the specified seed bytes.
                  &lt;p&gt; This constructor traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new SecureRandom object encapsulating the
                  SecureRandomSpi implementation from the first
                  Provider that supports a SecureRandom (RNG) algorithm is returned.
                  If none of the Providers support a RNG algorithm,
                  then an implementation-specific default is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.
                  &lt;p&gt; See the SecureRandom section in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard RNG algorithm names.                
                <param>
                    seed the seed.                    
                </param>
            </javadoc>
            <method name="SecureRandom" type="constructor" line="181">
                <params>
                    <param name="seed" type="byte"/>
                </params>
            </method>
            <method name="getDefaultPRNG" type="void" line="186">
                <params>
                    <param name="setSeed" type="boolean"/>
                    <param name="seed" type="byte[]"/>
                </params>
                <comment line="190">
                    bummer, get the SUN implementation                    
                </comment>
                <comment line="206">
                    never happens, because we made sure the algorithm exists                    
                </comment>
                <comment line="210">
                    JDK 1.1 based implementations subclass SecureRandom instead of
                     SecureRandomSpi. They will also go through this code path because
                     they must call a SecureRandom constructor as it is their superclass.
                     If we are dealing with such an implementation, do not set the
                     algorithm value as it would be inaccurate.                    
                </comment>
                <declaration name="prng" type="String" line="187"/>
                <scope line="188">
                    <scope line="193"/>
                </scope>
                <scope line="196">
                    <scope line="197">
                        <declaration name="random" type="SecureRandom" line="198"/>
                        <scope line="201"/>
                    </scope>
                    <scope line="204"/>
                </scope>
                <scope line="214"/>
            </method>
            <javadoc line="219">
                Creates a SecureRandom object.                
                <param>
                    secureRandomSpi the SecureRandom implementation.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
            </javadoc>
            <method name="SecureRandom" type="constructor" line="226">
                <params>
                    <param name="secureRandomSpi" type="SecureRandomSpi"/>
                    <param name="provider" type="Provider"/>
                </params>
            </method>
            <method name="SecureRandom" type="constructor" line="231">
                <params>
                    <param name="secureRandomSpi" type="SecureRandomSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="238">
                Returns a SecureRandom object that implements the specified
                  Random Number Generator (RNG) algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new SecureRandom object encapsulating the
                  SecureRandomSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.
                  &lt;p&gt; The returned SecureRandom object has not been seeded.  To seed the
                  returned object, call the &lt;code&gt;setSeed&lt;/code&gt; method.
                  If &lt;code&gt;setSeed&lt;/code&gt; is not called, the first call to
                  &lt;code&gt;nextBytes&lt;/code&gt; will force the SecureRandom object to seed itself.
                  This self-seeding will not occur if &lt;code&gt;setSeed&lt;/code&gt; was
                  previously called.                
                <param>
                    algorithm the name of the RNG algorithm.
                      See the SecureRandom section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard RNG algorithm names.                    
                </param>
                <return>
                    the new SecureRandom object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      SecureRandomSpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getInstance" type="SecureRandom" line="275">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="276"/>
            </method>
            <javadoc line="282">
                Returns a SecureRandom object that implements the specified
                  Random Number Generator (RNG) algorithm.
                  &lt;p&gt; A new SecureRandom object encapsulating the
                  SecureRandomSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.
                  &lt;p&gt; The returned SecureRandom object has not been seeded.  To seed the
                  returned object, call the &lt;code&gt;setSeed&lt;/code&gt; method.
                  If &lt;code&gt;setSeed&lt;/code&gt; is not called, the first call to
                  &lt;code&gt;nextBytes&lt;/code&gt; will force the SecureRandom object to seed itself.
                  This self-seeding will not occur if &lt;code&gt;setSeed&lt;/code&gt; was
                  previously called.                
                <param>
                    algorithm the name of the RNG algorithm.
                      See the SecureRandom section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard RNG algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new SecureRandom object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a SecureRandomSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getInstance" type="SecureRandom" line="326">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="327"/>
            </method>
            <javadoc line="333">
                Returns a SecureRandom object that implements the specified
                  Random Number Generator (RNG) algorithm.
                  &lt;p&gt; A new SecureRandom object encapsulating the
                  SecureRandomSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.
                  &lt;p&gt; The returned SecureRandom object has not been seeded.  To seed the
                  returned object, call the &lt;code&gt;setSeed&lt;/code&gt; method.
                  If &lt;code&gt;setSeed&lt;/code&gt; is not called, the first call to
                  &lt;code&gt;nextBytes&lt;/code&gt; will force the SecureRandom object to seed itself.
                  This self-seeding will not occur if &lt;code&gt;setSeed&lt;/code&gt; was
                  previously called.                
                <param>
                    algorithm the name of the RNG algorithm.
                      See the SecureRandom section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard RNG algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new SecureRandom object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a SecureRandomSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified provider is null.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="SecureRandom" line="370">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="371"/>
            </method>
            <javadoc line="377">
                Returns the SecureRandomSpi of this SecureRandom object.                
            </javadoc>
            <method name="getSecureRandomSpi" type="SecureRandomSpi" line="380"/>
            <javadoc line="384">
                Returns the provider of this SecureRandom object.                
                <return>
                    the provider of this SecureRandom object.                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="389"/>
            <javadoc line="393">
                Returns the name of the algorithm implemented by this SecureRandom
                  object.                
                <return>
                    the name of the algorithm or &lt;code&gt;unknown&lt;/code&gt;
                      if the algorithm name cannot be determined.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAlgorithm" type="String" line="401"/>
            <javadoc line="405">
                Reseeds this random object. The given seed supplements, rather than
                  replaces, the existing seed. Thus, repeated calls are guaranteed
                  never to reduce randomness.                
                <param>
                    seed the seed.                    
                </param>
                <see>
                    #getSeed                    
                </see>
            </javadoc>
            <method name="setSeed" type="void" line="414">
                <params>
                    <param name="seed" type="byte[]"/>
                </params>
            </method>
            <javadoc line="418">
                Reseeds this random object, using the eight bytes contained
                  in the given &lt;code&gt;long seed&lt;/code&gt;. The given seed supplements,
                  rather than replaces, the existing seed. Thus, repeated calls
                  are guaranteed never to reduce randomness.
                  &lt;p&gt;This method is defined for compatibility with
                  &lt;code&gt;java.util.Random&lt;/code&gt;.                
                <param>
                    seed the seed.                    
                </param>
                <see>
                    #getSeed                    
                </see>
            </javadoc>
            <method name="setSeed" type="void" line="431">
                <params>
                    <param name="seed" type="long"/>
                </params>
                <comment line="433">
                    Ignore call from super constructor (as well as any other calls
                     unfortunate enough to be passing 0).  It&apos;s critical that we
                     ignore call from superclass constructor, as digest has not
                     yet been initialized at that point.                    
                </comment>
                <scope line="438"/>
            </method>
            <javadoc line="443">
                Generates a user-specified number of random bytes.
                  &lt;p&gt; If a call to &lt;code&gt;setSeed&lt;/code&gt; had not occurred previously,
                  the first call to this method forces this SecureRandom object
                  to seed itself.  This self-seeding will not occur if
                  &lt;code&gt;setSeed&lt;/code&gt; was previously called.                
                <param>
                    bytes the array to be filled in with random bytes.                    
                </param>
            </javadoc>
            <method name="nextBytes" type="void" line="454">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <javadoc line="458">
                Generates an integer containing the user-specified number of
                  pseudo-random bits (right justified, with leading zeros).  This
                  method overrides a &lt;code&gt;java.util.Random&lt;/code&gt; method, and serves
                  to provide a source of random bits to all of the methods inherited
                  from that class (for example, &lt;code&gt;nextInt&lt;/code&gt;,
                  &lt;code&gt;nextLong&lt;/code&gt;, and &lt;code&gt;nextFloat&lt;/code&gt;).                
                <param>
                    numBits number of pseudo-random bits to be generated, where
                      0 &lt;= &lt;code&gt;numBits&lt;/code&gt; &lt;= 32.                    
                </param>
                <return>
                    an &lt;code&gt;int&lt;/code&gt; containing the user-specified number
                      of pseudo-random bits (right justified, with leading zeros).                    
                </return>
            </javadoc>
            <method name="next" type="int" line="472">
                <params>
                    <param name="numBits" type="int"/>
                </params>
                <declaration name="numBytes" type="int" line="473"/>
                <declaration name="b" type="byte" line="474"/>
                <declaration name="next" type="int" line="475"/>
            </method>
            <javadoc line="484">
                Returns the given number of seed bytes, computed using the seed
                  generation algorithm that this class uses to seed itself.  This
                  call may be used to seed other random number generators.
                  &lt;p&gt;This method is only included for backwards compatibility.
                  The caller is encouraged to use one of the alternative
                  &lt;code&gt;getInstance&lt;/code&gt; methods to obtain a SecureRandom object, and
                  then call the &lt;code&gt;generateSeed&lt;/code&gt; method to obtain seed bytes
                  from that object.                
                <param>
                    numBytes the number of seed bytes to generate.                    
                </param>
                <return>
                    the seed bytes.                    
                </return>
                <see>
                    #setSeed                    
                </see>
            </javadoc>
            <method name="getSeed" type="byte[]" line="501">
                <params>
                    <param name="numBytes" type="int"/>
                </params>
            </method>
            <javadoc line="507">
                Returns the given number of seed bytes, computed using the seed
                  generation algorithm that this class uses to seed itself.  This
                  call may be used to seed other random number generators.                
                <param>
                    numBytes the number of seed bytes to generate.                    
                </param>
                <return>
                    the seed bytes.                    
                </return>
            </javadoc>
            <method name="generateSeed" type="byte[]" line="516">
                <params>
                    <param name="numBytes" type="int"/>
                </params>
            </method>
            <javadoc line="520">
                Helper function to convert a long into a byte array (least significant
                  byte first).                
            </javadoc>
            <method name="longToByteArray" type="byte[]" line="524">
                <params>
                    <param name="l" type="long"/>
                </params>
                <declaration name="retVal" type="byte[]" line="525"/>
                <scope line="527"/>
            </method>
            <javadoc line="535">
                Gets a default PRNG algorithm by looking through all registered
                  providers. Returns the first PRNG algorithm of the first provider that
                  has registered a SecureRandom implementation, or null if none of the
                  registered providers supplies a SecureRandom implementation.                
            </javadoc>
            <method name="getPrngAlgorithm" type="String" line="541">
                <scope line="542">
                    <scope line="543">
                        <scope line="544"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="553"/>
            <declaration name="state" type="byte[]" line="556"/>
            <javadoc line="556">
                @serial                
            </javadoc>
            <declaration name="digest" type="MessageDigest" line="560"/>
            <javadoc line="560">
                @serial                
            </javadoc>
            <declaration name="randomBytes" type="byte[]" line="564"/>
            <javadoc line="564">
                @serialWe know that the MessageDigest class does not implement
                  java.io.Serializable.  However, since this field is no longer
                  used, it will always be NULL and won&apos;t affect the serialization
                  of the SecureRandom class itself.                
            </javadoc>
            <declaration name="randomBytesUsed" type="int" line="573"/>
            <javadoc line="573">
                @serial                
            </javadoc>
            <declaration name="counter" type="long" line="577"/>
            <javadoc line="577">
                @serial                
            </javadoc>
        </class>
    </source>