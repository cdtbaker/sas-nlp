<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util"/>
        <import package="java.security.Provider.Service"/>
        <import package="java.security.spec.KeySpec"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="KeyFactory" line="9">
            <javadoc line="9">
                Key factories are used to convert &lt;I&gt;keys&lt;/I&gt; (opaque
                  cryptographic keys of type &lt;code&gt;Key&lt;/code&gt;) into &lt;I&gt;key specifications&lt;/I&gt;
                  (transparent representations of the underlying key material), and vice
                  versa.
                  &lt;P&gt; Key factories are bi-directional. That is, they allow you to build an
                  opaque key object from a given key specification (key material), or to
                  retrieve the underlying key material of a key object in a suitable format.
                  &lt;P&gt; Multiple compatible key specifications may exist for the same key.
                  For example, a DSA public key may be specified using
                  &lt;code&gt;DSAPublicKeySpec&lt;/code&gt; or
                  &lt;code&gt;X509EncodedKeySpec&lt;/code&gt;. A key factory can be used to translate
                  between compatible key specifications.
                  &lt;P&gt; The following is an example of how to use a key factory in order to
                  instantiate a DSA public key from its encoding.
                  Assume Alice has received a digital signature from Bob.
                  Bob also sent her his public key (in encoded format) to verify
                  his signature. Alice then performs the following actions:
                  &lt;pre&gt;
                  X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey);
                  KeyFactory keyFactory = KeyFactory.getInstance(&quot;DSA&quot;);
                  PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec);
                  Signature sig = Signature.getInstance(&quot;DSA&quot;);
                  sig.initVerify(bobPubKey);
                  sig.update(data);
                  sig.verify(signature);
                  &lt;/pre&gt;
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;KeyFactory&lt;/code&gt; algorithms:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;DiffieHellman&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;DSA&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;RSA&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory&quot;&gt;
                  KeyFactory section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    Key                    
                </see>
                <see>
                    PublicKey                    
                </see>
                <see>
                    PrivateKey                    
                </see>
                <see>
                    java.security.spec.KeySpec                    
                </see>
                <see>
                    java.security.spec.DSAPublicKeySpec                    
                </see>
                <see>
                    java.security.spec.X509EncodedKeySpec                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="debug" type="Debug" line="59"/>
            <declaration name="algorithm" type="String" line="60"/>
            <declaration name="provider" type="Provider" line="61"/>
            <declaration name="spi" type="KeyFactorySpi" line="62"/>
            <declaration name="lock" type="Object" line="63"/>
            <declaration name="serviceIterator" type="Iterator&lt;Service&gt;" line="64"/>
            <javadoc line="65">
                Creates a KeyFactory object.                
                <param>
                    keyFacSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    algorithm the name of the algorithm
                      to associate with this <tt>KeyFactory</tt>                    
                </param>
            </javadoc>
            <method name="KeyFactory" type="constructor" line="72">
                <params>
                    <param name="keyFacSpi" type="KeyFactorySpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <method name="KeyFactory" type="constructor" line="77">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="list" type="List&lt;Service&gt;" line="79"/>
                <scope line="81"/>
            </method>
            <javadoc line="85">
                Returns a KeyFactory object that converts
                  public/private keys of the specified algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new KeyFactory object encapsulating the
                  KeyFactorySpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the name of the requested key algorithm.
                      See the KeyFactory section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new KeyFactory object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      KeyFactorySpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyFactory" line="106">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="109">
                Returns a KeyFactory object that converts
                  public/private keys of the specified algorithm.
                  &lt;p&gt; A new KeyFactory object encapsulating the
                  KeyFactorySpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the name of the requested key algorithm.
                      See the KeyFactory section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new KeyFactory object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a KeyFactorySpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyFactory" line="134">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="135"/>
            </method>
            <javadoc line="138">
                Returns a KeyFactory object that converts
                  public/private keys of the specified algorithm.
                  &lt;p&gt; A new KeyFactory object encapsulating the
                  KeyFactorySpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the name of the requested key algorithm.
                      See the KeyFactory section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new KeyFactory object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a KeyFactorySpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified provider is null.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="KeyFactory" line="159">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="160"/>
            </method>
            <javadoc line="163">
                Returns the provider of this key factory object.                
                <return>
                    the provider of this key factory object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="167">
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Gets the name of the algorithm
                  associated with this &lt;tt&gt;KeyFactory&lt;/tt&gt;.                
                <return>
                    the name of the algorithm associated with this
                      <tt>KeyFactory</tt>                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="179"/>
            <javadoc line="182">
                Update the active KeyFactorySpi of this class and return the next
                  implementation for failover. If no more implemenations are
                  available, this method returns null. However, the active spi of
                  this class is never set to null.                
            </javadoc>
            <method name="nextSpi" type="KeyFactorySpi" line="188">
                <params>
                    <param name="oldSpi" type="KeyFactorySpi"/>
                </params>
                <scope line="189">
                    <scope line="190"/>
                    <scope line="193"/>
                    <scope line="196">
                        <declaration name="s" type="Service" line="197"/>
                        <scope line="198">
                            <declaration name="obj" type="Object" line="199"/>
                            <scope line="200"/>
                            <declaration name="spi" type="KeyFactorySpi" line="203"/>
                        </scope>
                        <scope line="208"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="215">
                Generates a public key object from the provided key specification
                  (key material).                
                <param>
                    keySpec the specification (key material) of the public key.                    
                </param>
                <return>
                    the public key.                    
                </return>
                <exception>
                    InvalidKeySpecException if the given key specification
                      is inappropriate for this key factory to produce a public key.                    
                </exception>
            </javadoc>
            <method name="generatePublic" type="PublicKey" line="223">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="224"/>
                <declaration name="failure" type="Exception" line="227"/>
                <declaration name="mySpi" type="KeyFactorySpi" line="228"/>
                <scope line="229">
                    <scope line="230"/>
                    <scope line="233">
                        <scope line="234"/>
                    </scope>
                </scope>
                <scope line="241"/>
                <scope line="244"/>
            </method>
            <javadoc line="249">
                Generates a private key object from the provided key specification
                  (key material).                
                <param>
                    keySpec the specification (key material) of the private key.                    
                </param>
                <return>
                    the private key.                    
                </return>
                <exception>
                    InvalidKeySpecException if the given key specification
                      is inappropriate for this key factory to produce a private key.                    
                </exception>
            </javadoc>
            <method name="generatePrivate" type="PrivateKey" line="257">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="258"/>
                <declaration name="failure" type="Exception" line="261"/>
                <declaration name="mySpi" type="KeyFactorySpi" line="262"/>
                <scope line="263">
                    <scope line="264"/>
                    <scope line="267">
                        <scope line="268"/>
                    </scope>
                </scope>
                <scope line="275"/>
                <scope line="278"/>
            </method>
            <javadoc line="283">
                Returns a specification (key material) of the given key object.
                  &lt;code&gt;keySpec&lt;/code&gt; identifies the specification class in which
                  the key material should be returned. It could, for example, be
                  &lt;code&gt;DSAPublicKeySpec.class&lt;/code&gt;, to indicate that the
                  key material should be returned in an instance of the
                  &lt;code&gt;DSAPublicKeySpec&lt;/code&gt; class.                
                <param>
                    key the key.                    
                </param>
                <param>
                    keySpec the specification class in which
                      the key material should be returned.                    
                </param>
                <return>
                    the underlying key specification (key material) in an instance
                      of the requested specification class.                    
                </return>
                <exception>
                    InvalidKeySpecException if the requested key specification is
                      inappropriate for the given key, or the given key cannot be processed
                      (e.g., the given key has an unrecognized algorithm or format).                    
                </exception>
            </javadoc>
            <method name="getKeySpec" type="T" line="299">
                <params>
                    <param name="key" type="Key"/>
                    <param name="keySpec" type="Class<T>"/>
                </params>
                <scope line="300"/>
                <declaration name="failure" type="Exception" line="303"/>
                <declaration name="mySpi" type="KeyFactorySpi" line="304"/>
                <scope line="305">
                    <scope line="306"/>
                    <scope line="309">
                        <scope line="310"/>
                    </scope>
                </scope>
                <scope line="317"/>
                <scope line="320"/>
            </method>
            <javadoc line="325">
                Translates a key object, whose provider may be unknown or potentially
                  untrusted, into a corresponding key object of this key factory.                
                <param>
                    key the key whose provider is unknown or untrusted.                    
                </param>
                <return>
                    the translated key.                    
                </return>
                <exception>
                    InvalidKeyException if the given key cannot be processed
                      by this key factory.                    
                </exception>
            </javadoc>
            <method name="translateKey" type="Key" line="333">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <scope line="334"/>
                <declaration name="failure" type="Exception" line="337"/>
                <declaration name="mySpi" type="KeyFactorySpi" line="338"/>
                <scope line="339">
                    <scope line="340"/>
                    <scope line="343">
                        <scope line="344"/>
                    </scope>
                </scope>
                <scope line="351"/>
                <scope line="354"/>
            </method>
        </class>
    </source>