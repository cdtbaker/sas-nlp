<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <interface name="Key">
            <implements interface="java.io.Serializable"/>
            <javadoc line="2">
                The Key interface is the top-level interface for all keys. It
                  defines the functionality shared by all key objects. All keys
                  have three characteristics:
                  &lt;UL&gt;
                  &lt;LI&gt;An Algorithm
                  &lt;P&gt;This is the key algorithm for that key. The key algorithm is usually
                  an encryption or asymmetric operation algorithm (such as DSA or
                  RSA), which will work with those algorithms and with related
                  algorithms (such as MD5 with RSA, SHA-1 with RSA, Raw DSA, etc.)
                  The name of the algorithm of a key is obtained using the{@link #getAlgorithm() getAlgorithm} method.&lt;P&gt;
                  &lt;LI&gt;An Encoded Form
                  &lt;P&gt;This is an external encoded form for the key used when a standard
                  representation of the key is needed outside the Java Virtual Machine,
                  as when transmitting the key to some other party. The key
                  is encoded according to a standard format (such as
                  X.509 &lt;code&gt;SubjectPublicKeyInfo&lt;/code&gt; or PKCS#8), and
                  is returned using the {@link #getEncoded() getEncoded} method.
                  Note: The syntax of the ASN.1 type &lt;code&gt;SubjectPublicKeyInfo&lt;/code&gt;
                  is defined as follows:
                  &lt;pre&gt;
                  SubjectPublicKeyInfo ::= SEQUENCE {
                  algorithm AlgorithmIdentifier,
                  subjectPublicKey BIT STRING }
                  AlgorithmIdentifier ::= SEQUENCE {
                  algorithm OBJECT IDENTIFIER,
                  parameters ANY DEFINED BY algorithm OPTIONAL }
                  &lt;/pre&gt;
                  For more information, see
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280:
                  Internet X.509 Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.
                  &lt;P&gt;
                  &lt;LI&gt;A Format
                  &lt;P&gt;This is the name of the format of the encoded key. It is returned
                  by the {@link #getFormat() getFormat} method.&lt;P&gt;
                  &lt;/UL&gt;
                  Keys are generally obtained through key generators, certificates,
                  or various Identity classes used to manage keys.
                  Keys may also be obtained from key specifications (transparent
                  representations of the underlying key material) through the use of a key
                  factory (see {@link KeyFactory}).
                  &lt;p&gt; A Key should use KeyRep as its serialized representation.
                  Note that a serialized Key may contain sensitive information
                  which should not be exposed in untrusted environments.  See the
                  &lt;a href=&quot;../../../platform/serialization/spec/security.html&quot;&gt;
                  Security Appendix&lt;/a&gt;
                  of the Serialization Specification for more information.                
                <see>
                    PublicKey                    
                </see>
                <see>
                    PrivateKey                    
                </see>
                <see>
                    KeyPair                    
                </see>
                <see>
                    KeyPairGenerator                    
                </see>
                <see>
                    KeyFactory                    
                </see>
                <see>
                    KeyRep                    
                </see>
                <see>
                    java.security.spec.KeySpec                    
                </see>
                <see>
                    Identity                    
                </see>
                <see>
                    Signer                    
                </see>
                <author>
                    Benjamin Renaud                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="61"/>
            <javadoc line="61">
                The class fingerprint that is set to indicate
                  serialization compatibility with a previous
                  version of the class.                
            </javadoc>
            <method name="getAlgorithm" type="String" line="67"/>
            <javadoc line="67">
                Returns the standard algorithm name for this key. For
                  example, &quot;DSA&quot; would indicate that this key is a DSA key.
                  See Appendix A in the &lt;a href=
                  &quot;../../../technotes/guides/security/crypto/CryptoSpec.html#AppA&quot;&gt;
                  Java Cryptography Architecture API Specification &amp;amp; Reference &lt;/a&gt;
                  for information about standard algorithm names.                
                <return>
                    the name of the algorithm associated with this key.                    
                </return>
            </javadoc>
            <method name="getFormat" type="String" line="77"/>
            <javadoc line="77">
                Returns the name of the primary encoding format of this key,
                  or null if this key does not support encoding.
                  The primary encoding format is
                  named in terms of the appropriate ASN.1 data format, if an
                  ASN.1 specification for this key exists.
                  For example, the name of the ASN.1 data format for public
                  keys is &lt;I&gt;SubjectPublicKeyInfo&lt;/I&gt;, as
                  defined by the X.509 standard; in this case, the returned format is
                  &lt;code&gt;&quot;X.509&quot;&lt;/code&gt;. Similarly,
                  the name of the ASN.1 data format for private keys is
                  &lt;I&gt;PrivateKeyInfo&lt;/I&gt;,
                  as defined by the PKCS #8 standard; in this case, the returned format is
                  &lt;code&gt;&quot;PKCS#8&quot;&lt;/code&gt;.                
                <return>
                    the primary encoding format of the key.                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="94"/>
            <javadoc line="94">
                Returns the key in its primary encoding format, or null
                  if this key does not support encoding.                
                <return>
                    the encoded key, or null if the key does not support
                      encoding.                    
                </return>
            </javadoc>
        </interface>
    </source>