<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util"/>
        <class name="PermissionCollection" line="30">
            <comment line="100">
                when set, add will throw an exception.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="30">
                Abstract class representing a collection of Permission objects.
                  &lt;p&gt;With a PermissionCollection, you can:
                  &lt;UL&gt;
                  &lt;LI&gt; add a permission to the collection using the &lt;code&gt;add&lt;/code&gt; method.
                  &lt;LI&gt; check to see if a particular permission is implied in the
                  collection, using the &lt;code&gt;implies&lt;/code&gt; method.
                  &lt;LI&gt; enumerate all the permissions, using the &lt;code&gt;elements&lt;/code&gt; method.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;p&gt;When it is desirable to group together a number of Permission objects
                  of the same type, the &lt;code&gt;newPermissionCollection&lt;/code&gt; method on that
                  particular type of Permission object should first be called. The default
                  behavior (from the Permission class) is to simply return null.
                  Subclasses of class Permission override the method if they need to store
                  their permissions in a particular PermissionCollection object in order
                  to provide the correct semantics when the
                  &lt;code&gt;PermissionCollection.implies&lt;/code&gt; method is called.
                  If a non-null value is returned, that PermissionCollection must be used.
                  If null is returned, then the caller of &lt;code&gt;newPermissionCollection&lt;/code&gt;
                  is free to store permissions of the
                  given type in any PermissionCollection they choose
                  (one that uses a Hashtable, one that uses a Vector, etc).
                  &lt;p&gt;The PermissionCollection returned by the
                  &lt;code&gt;Permission.newPermissionCollection&lt;/code&gt;
                  method is a homogeneous collection, which stores only Permission objects
                  for a given Permission type.  A PermissionCollection may also be
                  heterogeneous.  For example, Permissions is a PermissionCollection
                  subclass that represents a collection of PermissionCollections.
                  That is, its members are each a homogeneous PermissionCollection.
                  For example, a Permissions object might have a FilePermissionCollection
                  for all the FilePermission objects, a SocketPermissionCollection for all the
                  SocketPermission objects, and so on. Its &lt;code&gt;add&lt;/code&gt; method adds a
                  permission to the appropriate collection.
                  &lt;p&gt;Whenever a permission is added to a heterogeneous PermissionCollection
                  such as Permissions, and the PermissionCollection doesn&apos;t yet contain a
                  PermissionCollection of the specified permission&apos;s type, the
                  PermissionCollection should call
                  the &lt;code&gt;newPermissionCollection&lt;/code&gt; method on the permission&apos;s class
                  to see if it requires a special PermissionCollection. If
                  &lt;code&gt;newPermissionCollection&lt;/code&gt;
                  returns null, the PermissionCollection
                  is free to store the permission in any type of PermissionCollection it
                  desires (one using a Hashtable, one using a Vector, etc.). For example,
                  the Permissions object uses a default PermissionCollection implementation
                  that stores the permission objects in a Hashtable.
                  &lt;p&gt; Subclass implementations of PermissionCollection should assume
                  that they may be called simultaneously from multiple threads,
                  and therefore should be synchronized properly.  Furthermore,
                  Enumerations returned via the &lt;code&gt;elements&lt;/code&gt; method are
                  not &lt;em&gt;fail-fast&lt;/em&gt;.  Modifications to a collection should not be
                  performed while enumerating over that collection.                
                <see>
                    Permission                    
                </see>
                <see>
                    Permissions                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="97"/>
            <declaration name="readOnly" type="boolean" line="100"/>
            <method name="add" type="void" line="102"/>
            <javadoc line="102">
                Adds a permission object to the current collection of permission objects.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    SecurityException -  if this PermissionCollection object
                      has been marked readonly                    
                </exception>
                <exception>
                    IllegalArgumentException - if this PermissionCollection
                      object is a homogeneous collection and the permission
                      is not of the correct type.                    
                </exception>
            </javadoc>
            <method name="implies" type="boolean" line="115"/>
            <javadoc line="115">
                Checks to see if the specified permission is implied by
                  the collection of Permission objects held in this PermissionCollection.                
                <param>
                    permission the Permission object to compare.                    
                </param>
                <return>
                    true if "permission" is implied by the  permissions in
                      the collection, false if not.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration<Permission>" line="126"/>
            <javadoc line="126">
                Returns an enumeration of all the Permission objects in the collection.                
                <return>
                    an enumeration of all the Permissions.                    
                </return>
            </javadoc>
            <javadoc line="133">
                Marks this PermissionCollection object as &quot;readonly&quot;. After
                  a PermissionCollection object
                  is marked as readonly, no new Permission objects can be added to it
                  using &lt;code&gt;add&lt;/code&gt;.                
            </javadoc>
            <method name="setReadOnly" type="void" line="139"/>
            <javadoc line="143">
                Returns true if this PermissionCollection object is marked as readonly.
                  If it is readonly, no new Permission objects can be added to it
                  using &lt;code&gt;add&lt;/code&gt;.
                  &lt;p&gt;By default, the object is &lt;i&gt;not&lt;/i&gt; readonly. It can be set to
                  readonly by a call to &lt;code&gt;setReadOnly&lt;/code&gt;.                
                <return>
                    true if this PermissionCollection object is marked as readonly,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="154"/>
            <javadoc line="158">
                Returns a string describing this PermissionCollection object,
                  providing information about all the permissions it contains.
                  The format is:
                  &lt;pre&gt;
                  super.toString() (
                  // enumerate all the Permission
                  // objects and call toString() on them,
                  // one per line..
                  )&lt;/pre&gt;
                  &lt;code&gt;super.toString&lt;/code&gt; is a call to the &lt;code&gt;toString&lt;/code&gt;
                  method of this
                  object&apos;s superclass, which is Object. The result is
                  this PermissionCollection&apos;s type name followed by this object&apos;s
                  hashcode, thus enabling clients to differentiate different
                  PermissionCollections object, even if they contain the same permissions.                
                <return>
                    information about this PermissionCollection object,
                      as described above.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="180">
                <comment line="190">
                    ignore                    
                </comment>
                <declaration name="enum_" type="Enumeration&lt;Permission&gt;" line="181"/>
                <declaration name="sb" type="StringBuilder" line="182"/>
                <scope line="184">
                    <scope line="185"/>
                    <scope line="189"/>
                </scope>
            </method>
        </class>
    </source>