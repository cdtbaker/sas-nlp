<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.misc.JavaSecurityAccess"/>
        <import package="sun.misc.SharedSecrets"/>
        <class name="AccessControlContext" line="8">
            <javadoc line="8">
                An AccessControlContext is used to make system resource access decisions
                  based on the context it encapsulates.
                  &lt;p&gt;More specifically, it encapsulates a context and
                  has a single method, &lt;code&gt;checkPermission&lt;/code&gt;,
                  that is equivalent to the &lt;code&gt;checkPermission&lt;/code&gt; method
                  in the AccessController class, with one difference: The AccessControlContext
                  &lt;code&gt;checkPermission&lt;/code&gt; method makes access decisions based on the
                  context it encapsulates,
                  rather than that of the current execution thread.
                  &lt;p&gt;Thus, the purpose of AccessControlContext is for those situations where
                  a security check that should be made within a given context
                  actually needs to be done from within a
                  &lt;i&gt;different&lt;/i&gt; context (for example, from within a worker thread).
                  &lt;p&gt; An AccessControlContext is created by calling the
                  &lt;code&gt;AccessController.getContext&lt;/code&gt; method.
                  The &lt;code&gt;getContext&lt;/code&gt; method takes a &quot;snapshot&quot;
                  of the current calling context, and places
                  it in an AccessControlContext object, which it returns. A sample call is
                  the following:
                  &lt;pre&gt;
                  AccessControlContext acc = AccessController.getContext()
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Code within a different context can subsequently call the
                  &lt;code&gt;checkPermission&lt;/code&gt; method on the
                  previously-saved AccessControlContext object. A sample call is the
                  following:
                  &lt;pre&gt;
                  acc.checkPermission(permission)
                  &lt;/pre&gt;                
                <see>
                    AccessController                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="context" type="ProtectionDomain" line="43"/>
            <declaration name="isPrivileged" type="boolean" line="44"/>
            <declaration name="privilegedContext" type="AccessControlContext" line="45"/>
            <declaration name="combiner" type="DomainCombiner" line="46"/>
            <declaration name="debugInit" type="boolean" line="47"/>
            <declaration name="debug" type="Debug" line="48"/>
            <method name="getDebug" type="Debug" line="49">
                <scope line="51">
                    <scope line="52"/>
                </scope>
            </method>
            <javadoc line="59">
                Create an AccessControlContext with the given array of ProtectionDomains.
                  Context must not be null. Duplicate domains will be removed from the
                  context.                
                <param>
                    context the ProtectionDomains associated with this context.
                      The non-duplicate domains are copied from the array. Subsequent
                      changes to the array will not affect this AccessControlContext.                    
                </param>
                <throws>
                    NullPointerException if <code>context</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="AccessControlContext" type="constructor" line="68">
                <params>
                    <param name="context" type="ProtectionDomain"/>
                </params>
                <scope line="69"/>
                <scope line="72">
                    <scope line="73"/>
                    <scope line="76"/>
                </scope>
                <scope line="80">
                    <declaration name="v" type="List&lt;ProtectionDomain&gt;" line="81"/>
                    <scope line="82"/>
                    <scope line="85"/>
                </scope>
            </method>
            <javadoc line="91">
                Create a new &lt;code&gt;AccessControlContext&lt;/code&gt; with the given
                  &lt;code&gt;AccessControlContext&lt;/code&gt; and &lt;code&gt;DomainCombiner&lt;/code&gt;.
                  This constructor associates the provided
                  &lt;code&gt;DomainCombiner&lt;/code&gt; with the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    acc the <code>AccessControlContext</code> associated
                      with the provided <code>DomainCombiner</code>.                    
                </param>
                <param>
                    combiner the <code>DomainCombiner</code> to be associated
                      with the provided <code>AccessControlContext</code>.                    
                </param>
                <exception>
                    NullPointerException if the provided
                      <code>context</code> is <code>null</code>.                    
                </exception>
                <exception>
                    SecurityException if a security manager is installed and the
                      caller does not have the "createAccessControlContext"{@link SecurityPermission}                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="AccessControlContext" type="constructor" line="108">
                <params>
                    <param name="acc" type="AccessControlContext"/>
                    <param name="combiner" type="DomainCombiner"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="109"/>
                <scope line="110"/>
            </method>
            <javadoc line="116">
                package private for AccessController                
            </javadoc>
            <method name="AccessControlContext" type="constructor" line="119">
                <params>
                    <param name="context" type="ProtectionDomain"/>
                    <param name="combiner" type="DomainCombiner"/>
                </params>
                <scope line="120"/>
            </method>
            <javadoc line="125">
                package private constructor for AccessController.getContext()                
            </javadoc>
            <method name="AccessControlContext" type="constructor" line="128">
                <params>
                    <param name="context" type="ProtectionDomain"/>
                    <param name="isPrivileged" type="boolean"/>
                </params>
            </method>
            <javadoc line="132">
                Constructor for JavaSecurityAccess.doIntersectionPrivilege()                
            </javadoc>
            <method name="AccessControlContext" type="constructor" line="135">
                <params>
                    <param name="context" type="ProtectionDomain[]"/>
                    <param name="privilegedContext" type="AccessControlContext"/>
                </params>
            </method>
            <javadoc line="140">
                Returns this context&apos;s context.                
            </javadoc>
            <method name="getContext" type="ProtectionDomain[]" line="143"/>
            <javadoc line="146">
                Returns true if this context is privileged.                
            </javadoc>
            <method name="isPrivileged" type="boolean" line="149"/>
            <javadoc line="152">
                get the assigned combiner from the privileged or inherited context                
            </javadoc>
            <method name="getAssignedCombiner" type="DomainCombiner" line="155">
                <declaration name="acc" type="AccessControlContext" line="156"/>
                <scope line="157"/>
                <scope line="160"/>
                <scope line="163"/>
            </method>
            <javadoc line="168">
                Get the &lt;code&gt;DomainCombiner&lt;/code&gt; associated with this
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the <code>DomainCombiner</code> associated with this
                      <code>AccessControlContext</code>, or <code>null</code>
                      if there is none.                    
                </return>
                <exception>
                    SecurityException if a security manager is installed and
                      the caller does not have the "getDomainCombiner"{@link SecurityPermission}                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getDomainCombiner" type="DomainCombiner" line="179">
                <declaration name="sm" type="SecurityManager" line="180"/>
                <scope line="181"/>
            </method>
            <javadoc line="186">
                Determines whether the access request indicated by the
                  specified permission should be allowed or denied, based on
                  the security policy currently in effect, and the context in
                  this object. The request is allowed only if every ProtectionDomain
                  in the context implies the permission. Otherwise the request is
                  denied.
                  &lt;p&gt;
                  This method quietly returns if the access request
                  is permitted, or throws a suitable AccessControlException otherwise.                
                <param>
                    perm the requested permission.                    
                </param>
                <exception>
                    AccessControlException if the specified permission
                      is not permitted, based on the current security policy and the
                      context encapsulated by this object.                    
                </exception>
                <exception>
                    NullPointerException if the permission to check for is null.                    
                </exception>
            </javadoc>
            <method name="checkPermission" type="void" line="202">
                <params>
                    <param name="perm" type="Permission"/>
                </params>
                <declaration name="dumpDebug" type="boolean" line="203"/>
                <scope line="204"/>
                <scope line="207">
                    <scope line="209">
                        <scope line="210">
                            <scope line="211"/>
                        </scope>
                    </scope>
                    <scope line="218"/>
                    <scope line="221">
                        <scope line="222"/>
                        <scope line="225">
                            <scope line="226"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="233">
                    <scope line="234">
                        <scope line="235"/>
                        <scope line="238">
                            <scope line="239"/>
                            <declaration name="pd" type="ProtectionDomain" line="243"/>
                            <declaration name="db" type="Debug" line="244"/>
                            <anonymous_class line="245">
                                <method name="run" type="Void" line="246"/>
                            </anonymous_class>
                        </scope>
                    </scope>
                </scope>
                <scope line="256"/>
            </method>
            <javadoc line="261">
                Take the stack-based context (this) and combine it with the
                  privileged or inherited context, if need be.                
            </javadoc>
            <method name="optimize" type="AccessControlContext" line="265">
                <declaration name="acc" type="AccessControlContext" line="266"/>
                <scope line="267"/>
                <scope line="270"/>
                <declaration name="skipStack" type="boolean" line="273"/>
                <declaration name="skipAssigned" type="boolean" line="274"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
                <declaration name="slen" type="int" line="284"/>
                <scope line="285"/>
                <scope line="288"/>
                <declaration name="n" type="int" line="291"/>
                <declaration name="pd" type="ProtectionDomain" line="292"/>
                <scope line="293"/>
                <scope line="296">
                    <declaration name="sd" type="ProtectionDomain" line="297"/>
                    <scope line="298">
                        <scope line="299">
                            <scope line="300"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="307">
                    <scope line="308"/>
                    <scope line="311"/>
                    <declaration name="tmp" type="ProtectionDomain" line="314"/>
                </scope>
            </method>
            <method name="goCombiner" type="AccessControlContext" line="323">
                <params>
                    <param name="current" type="ProtectionDomain[]"/>
                    <param name="assigned" type="AccessControlContext"/>
                </params>
                <scope line="324"/>
                <declaration name="combinedPds" type="ProtectionDomain[]" line="327"/>
            </method>
            <javadoc line="333">
                Checks two AccessControlContext objects for equality.
                  Checks that &lt;i&gt;obj&lt;/i&gt; is
                  an AccessControlContext and has the same set of ProtectionDomains
                  as this context.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if <i>obj</i> is an AccessControlContext, and has the
                      same set of ProtectionDomains as this context, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="343">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="AccessControlContext" line="346"/>
                <scope line="347"/>
            </method>
            <method name="containsAllPDs" type="boolean" line="357">
                <params>
                    <param name="that" type="AccessControlContext"/>
                </params>
                <declaration name="match" type="boolean" line="358"/>
                <declaration name="thisPd" type="ProtectionDomain" line="359"/>
                <scope line="360">
                    <scope line="362">
                        <scope line="363"/>
                    </scope>
                    <scope line="367">
                        <declaration name="thisPdClass" type="Class" line="368"/>
                        <declaration name="thatPd" type="ProtectionDomain" line="369"/>
                        <scope line="370"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="379">
                Returns the hash code value for this context. The hash code
                  is computed by exclusive or-ing the hash code of all the protection
                  domains in the context together.                
                <return>
                    a hash code value for this context.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="385">
                <declaration name="hashCode" type="int" line="386"/>
                <scope line="388"/>
            </method>
        </class>
    </source>