<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.security"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Collections"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="BasicPermission" line="39">
            <extends class="Permission"/>
            <comment line="78">
                does this permission have a wildcard at the end?                
            </comment>
            <comment line="81">
                the name without the wildcard on the end                
            </comment>
            <comment line="84">
                is this permission the old-style exitVM permission (pre JDK 1.6)?                
            </comment>
            <comment line="481">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                
                 @serial the Hashtable is indexed by the BasicPermission name
                
                 private Hashtable permissions;                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="39">
                The BasicPermission class extends the Permission class, and
                  can be used as the base class for permissions that want to
                  follow the same naming convention as BasicPermission.
                  &lt;P&gt;
                  The name for a BasicPermission is the name of the given permission
                  (for example, &quot;exit&quot;,
                  &quot;setFactory&quot;, &quot;print.queueJob&quot;, etc). The naming
                  convention follows the  hierarchical property naming convention.
                  An asterisk may appear by itself, or if immediately preceded by a &quot;.&quot;
                  may appear at the end of the name, to signify a wildcard match.
                  For example, &quot;&quot; and &quot;java.&quot; are valid, while &quot;java&quot;, &quot;ab&quot;,
                  and &quot;java&quot; are not valid.
                  &lt;P&gt;
                  The action string (inherited from Permission) is unused.
                  Thus, BasicPermission is commonly used as the base class for
                  &quot;named&quot; permissions
                  (ones that contain a name but no actions list; you either have the
                  named permission or you don&apos;t.)
                  Subclasses may implement actions on top of BasicPermission,
                  if desired.
                  &lt;p&gt;
                  &lt;P&gt;                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <declaration name="wildcard" type="boolean" line="78"/>
            <declaration name="path" type="String" line="81"/>
            <declaration name="exitVM" type="boolean" line="84"/>
            <javadoc line="86">
                initialize a BasicPermission object. Common to all constructors.                
            </javadoc>
            <method name="init" type="void" line="91">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="104">
                    Is wildcard or ends with &quot;.*&quot;?                    
                </comment>
                <declaration name="len" type="int" line="95"/>
                <scope line="97"/>
                <declaration name="last" type="char" line="101"/>
                <scope line="104">
                    <scope line="106"/>
                    <scope line="108"/>
                </scope>
                <scope line="111">
                    <scope line="112"/>
                    <scope line="116"/>
                </scope>
            </method>
            <javadoc line="122">
                Creates a new BasicPermission with the specified name.
                  Name is the symbolic name of the permission, such as
                  &quot;setFactory&quot;,
                  &quot;print.queueJob&quot;, or &quot;topLevelWindow&quot;, etc.                
                <param>
                    name the name of the BasicPermission.                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is empty.                    
                </throws>
            </javadoc>
            <method name="BasicPermission" type="constructor" line="135">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="141">
                Creates a new BasicPermission object with the specified name.
                  The name is the symbolic name of the BasicPermission, and the
                  actions String is currently unused.                
                <param>
                    name the name of the BasicPermission.                    
                </param>
                <param>
                    actions ignored.                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is empty.                    
                </throws>
            </javadoc>
            <method name="BasicPermission" type="constructor" line="153">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="158">
                Checks if the specified permission is &quot;implied&quot; by
                  this object.
                  &lt;P&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s class is the same as this object&apos;s class, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s name equals or (in the case of wildcards)
                  is implied by this object&apos;s
                  name. For example, &quot;a.b.&quot; implies &quot;a.b.c&quot;.
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the passed permission is equal to or
                      implied by this permission, false otherwise.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="175">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <comment line="184">
                    one wildcard can imply another                    
                </comment>
                <comment line="187">
                    make sure ap.path is longer so a.b.* doesn&apos;t imply a.b                    
                </comment>
                <comment line="193">
                    a non-wildcard can&apos;t imply a wildcard                    
                </comment>
                <declaration name="that" type="BasicPermission" line="179"/>
                <scope line="181">
                    <scope line="182"/>
                    <scope line="185"/>
                </scope>
                <scope line="190">
                    <scope line="191"/>
                    <scope line="195"/>
                </scope>
            </method>
            <javadoc line="201">
                Checks two BasicPermission objects for equality.
                  Checks that &lt;i&gt;obj&lt;/i&gt;&apos;s class is the same as this object&apos;s class
                  and has the same name as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if &lt;i&gt;obj&lt;/i&gt;&apos;s class is the same as this object&apos;s class
                      and has the same name as this BasicPermission object, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="210">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="bp" type="BasicPermission" line="217"/>
            </method>
            <javadoc line="223">
                Returns the hash code value for this object.
                  The hash code used is the hash code of the name, that is,
                  &lt;code&gt;getName().hashCode()&lt;/code&gt;, where &lt;code&gt;getName&lt;/code&gt; is
                  from the Permission superclass.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="231"/>
            <javadoc line="235">
                Returns the canonical string representation of the actions,
                  which currently is the empty string &quot;&quot;, since there are no actions for
                  a BasicPermission.                
                <return>
                    the empty string &quot;&quot;.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="243"/>
            <javadoc line="247">
                Returns a new PermissionCollection object for storing BasicPermission
                  objects.
                  &lt;p&gt;BasicPermission objects must be stored in a manner that allows them
                  to be inserted in any order, but that also enables the
                  PermissionCollection &lt;code&gt;implies&lt;/code&gt; method
                  to be implemented in an efficient (and consistent) manner.                
                <return>
                    a new PermissionCollection object suitable for
                      storing BasicPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="259"/>
            <javadoc line="263">
                readObject is called to restore the state of the BasicPermission from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="269">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="272">
                    init is called to initialize the rest of the values.                    
                </comment>
            </method>
            <javadoc line="275">
                Returns the canonical name of this BasicPermission.
                  All internal invocations of getName should invoke this method, so
                  that the pre-JDK 1.6 &quot;exitVM&quot; and current &quot;exitVM.&quot; permission are
                  equivalent in equals/hashCode methods.                
                <return>
                    the canonical name of this BasicPermission.                    
                </return>
            </javadoc>
            <method name="getCanonicalName" type="String" line="283"/>
        </class>
        <class name="BasicPermissionCollection" line="288">
            <extends class="PermissionCollection"/>
            <comment line="78">
                does this permission have a wildcard at the end?                
            </comment>
            <comment line="81">
                the name without the wildcard on the end                
            </comment>
            <comment line="84">
                is this permission the old-style exitVM permission (pre JDK 1.6)?                
            </comment>
            <comment line="481">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                
                 @serial the Hashtable is indexed by the BasicPermission name
                
                 private Hashtable permissions;                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="288">
                A BasicPermissionCollection stores a collection
                  of BasicPermission permissions. BasicPermission objects
                  must be stored in a manner that allows them to be inserted in any
                  order, but enable the implies function to evaluate the implies
                  method in an efficient (and consistent) manner.
                  A BasicPermissionCollection handles comparing a permission like &quot;a.b.c.d.e&quot;
                  with a Permission such as &quot;a.b.&quot;, or &quot;&quot;.                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionsImpl                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="313"/>
            <declaration name="perms" type="Map&lt;String,Permission&gt;" line="315"/>
            <javadoc line="315">
                Key is name, value is permission. All permission objects in
                  collection must be of the same type.
                  Not serialized; see serialization section at end of class.                
            </javadoc>
            <declaration name="all_allowed" type="boolean" line="322"/>
            <javadoc line="322">
                This is set to &lt;code&gt;true&lt;/code&gt; if this BasicPermissionCollection
                  contains a BasicPermission with &apos;&apos; as its permission name.                
                <see>
                    #serialPersistentFields                    
                </see>
            </javadoc>
            <declaration name="permClass" type="Class" line="330"/>
            <javadoc line="330">
                The class to which all BasicPermissions in this
                  BasicPermissionCollection belongs.                
                <see>
                    #serialPersistentFields                    
                </see>
            </javadoc>
            <javadoc line="338">
                Create an empty BasicPermissionCollection object.                
            </javadoc>
            <method name="BasicPermissionCollection" type="constructor" line="343">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
            </method>
            <javadoc line="349">
                Adds a permission to the BasicPermissions. The key for the hash is
                  permission.path.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    IllegalArgumentException - if the permission is not a
                      BasicPermission, or if
                      the permission is not of the
                      same Class as the other
                      permissions in this collection.                    
                </exception>
                <exception>
                    SecurityException - if this BasicPermissionCollection object
                      has been marked readonly                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="366">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="376">
                    make sure we only add new BasicPermissions of the same class
                     Also check null for compatibility with deserialized form from
                     previous versions.                    
                </comment>
                <comment line="380">
                    adding first permission                    
                </comment>
                <comment line="392">
                    No sync on all_allowed; staleness OK                    
                </comment>
                <declaration name="bp" type="BasicPermission" line="373"/>
                <scope line="378"/>
                <scope line="381"/>
                <scope line="387"/>
                <scope line="392"/>
            </method>
            <javadoc line="398">
                Check and see if this set of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if &quot;permission&quot; is a proper subset of a permission in
                      the set, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="409">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="416">
                    random subclasses of BasicPermission do not imply each other                    
                </comment>
                <comment line="420">
                    short circuit if the &quot;*&quot; Permission was added                    
                </comment>
                <comment line="424">
                    strategy:
                     Check for full match first. Then work our way up the
                     path looking for matches on a.b..*                    
                </comment>
                <comment line="429">
                    System.out.println(&quot;check &quot;+path);                    
                </comment>
                <comment line="438">
                    we have a direct hit!                    
                </comment>
                <comment line="442">
                    work our way up the tree...                    
                </comment>
                <comment line="450">
                    System.out.println(&quot;check &quot;+path);                    
                </comment>
                <comment line="462">
                    we don&apos;t have to check for &quot;*&quot; as it was already checked
                     at the top (all_allowed), so we just return false                    
                </comment>
                <declaration name="bp" type="BasicPermission" line="413"/>
                <declaration name="path" type="String" line="427"/>
                <declaration name="x" type="Permission" line="430"/>
                <scope line="432"/>
                <scope line="436"/>
                <declaration name="last" type="int" line="442"/>
                <scope line="446">
                    <scope line="451"/>
                    <scope line="455"/>
                </scope>
            </method>
            <javadoc line="466">
                Returns an enumeration of all the BasicPermission objects in the
                  container.                
                <return>
                    an enumeration of all the BasicPermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration<Permission>" line="473">
                <comment line="475">
                    Convert Iterator of Map values into an Enumeration                    
                </comment>
                <scope line="475"/>
            </method>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="486"/>
            <javadoc line="486">
                @serialField permissions java.util.Hashtable
                  The BasicPermissions in this BasicPermissionCollection.
                  All BasicPermissions in the collection must belong to the same class.
                  The Hashtable is indexed by the BasicPermission name; the value
                  of the Hashtable entry is the permission.                
                <serialField>
                    all_allowed boolean
                      This is set to &lt;code&gt;true&lt;/code&gt; if this BasicPermissionCollection
                      contains a BasicPermission with &apos;&apos; as its permission name.                    
                </serialField>
                <serialField>
                    permClass java.lang.Class
                      The class to which all BasicPermissions in this
                      BasicPermissionCollection belongs.                    
                </serialField>
            </javadoc>
            <javadoc line="505">
                @serialData Default fields.                
            </javadoc>
            <method name="writeObject" type="void" line="513">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="509">
                    Writes the contents of the perms field out as a Hashtable for
                     serialization compatibility with earlier releases. all_allowed
                     and permClass unchanged.                    
                </comment>
                <comment line="515">
                    Don&apos;t call out.defaultWriteObject()                    
                </comment>
                <comment line="517">
                    Copy perms into a Hashtable                    
                </comment>
                <comment line="525">
                    Write out serializable fields                    
                </comment>
                <declaration name="permissions" type="Hashtable&lt;String,Permission&gt;" line="517"/>
                <scope line="520"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="525"/>
            </method>
            <javadoc line="532">
                readObject is called to restore the state of the
                  BasicPermissionCollection from a stream.                
            </javadoc>
            <method name="readObject" type="void" line="538">
                <params>
                    <param name="in" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="540">
                    Don&apos;t call defaultReadObject()                    
                </comment>
                <comment line="542">
                    Read in serialized fields                    
                </comment>
                <comment line="545">
                    Get permissions                    
                </comment>
                <comment line="551">
                    Get all_allowed                    
                </comment>
                <comment line="554">
                    Get permClass                    
                </comment>
                <comment line="558">
                    set permClass                    
                </comment>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="542"/>
                <declaration name="permissions" type="Hashtable&lt;String,Permission&gt;" line="545"/>
                <scope line="556">
                    <declaration name="e" type="Enumeration&lt;Permission&gt;" line="558"/>
                    <scope line="559">
                        <declaration name="p" type="Permission" line="560"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>