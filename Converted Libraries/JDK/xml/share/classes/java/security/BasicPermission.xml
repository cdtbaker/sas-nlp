<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.security"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Collections"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="BasicPermission" line="12">
            <extends class="Permission"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="12">
                The BasicPermission class extends the Permission class, and
                  can be used as the base class for permissions that want to
                  follow the same naming convention as BasicPermission.
                  &lt;P&gt;
                  The name for a BasicPermission is the name of the given permission
                  (for example, &quot;exit&quot;,
                  &quot;setFactory&quot;, &quot;print.queueJob&quot;, etc). The naming
                  convention follows the  hierarchical property naming convention.
                  An asterisk may appear by itself, or if immediately preceded by a &quot;.&quot;
                  may appear at the end of the name, to signify a wildcard match.
                  For example, &quot;&quot; and &quot;java.&quot; are valid, while &quot;java&quot;, &quot;ab&quot;,
                  and &quot;java&quot; are not valid.
                  &lt;P&gt;
                  The action string (inherited from Permission) is unused.
                  Thus, BasicPermission is commonly used as the base class for
                  &quot;named&quot; permissions
                  (ones that contain a name but no actions list; you either have the
                  named permission or you don&apos;t.)
                  Subclasses may implement actions on top of BasicPermission,
                  if desired.
                  &lt;p&gt;
                  &lt;P&gt;                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <declaration name="wildcard" type="boolean" line="44"/>
            <declaration name="path" type="String" line="45"/>
            <declaration name="exitVM" type="boolean" line="46"/>
            <javadoc line="47">
                initialize a BasicPermission object. Common to all constructors.                
            </javadoc>
            <method name="init" type="void" line="50">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="len" type="int" line="52"/>
                <scope line="53"/>
                <declaration name="last" type="char" line="56"/>
                <scope line="57">
                    <scope line="59"/>
                    <scope line="62"/>
                </scope>
                <scope line="66">
                    <scope line="67"/>
                    <scope line="72"/>
                </scope>
            </method>
            <javadoc line="77">
                Creates a new BasicPermission with the specified name.
                  Name is the symbolic name of the permission, such as
                  &quot;setFactory&quot;,
                  &quot;print.queueJob&quot;, or &quot;topLevelWindow&quot;, etc.                
                <param>
                    name the name of the BasicPermission.                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is empty.                    
                </throws>
            </javadoc>
            <method name="BasicPermission" type="constructor" line="86">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="90">
                Creates a new BasicPermission object with the specified name.
                  The name is the symbolic name of the BasicPermission, and the
                  actions String is currently unused.                
                <param>
                    name the name of the BasicPermission.                    
                </param>
                <param>
                    actions ignored.                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is empty.                    
                </throws>
            </javadoc>
            <method name="BasicPermission" type="constructor" line="99">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="103">
                Checks if the specified permission is &quot;implied&quot; by
                  this object.
                  &lt;P&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s class is the same as this object&apos;s class, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s name equals or (in the case of wildcards)
                  is implied by this object&apos;s
                  name. For example, &quot;a.b.&quot; implies &quot;a.b.c&quot;.
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the passed permission is equal to or
                      implied by this permission, false otherwise.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="118">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="BasicPermission" line="120"/>
                <scope line="121">
                    <scope line="122"/>
                    <scope line="125"/>
                </scope>
                <scope line="129">
                    <scope line="130"/>
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="138">
                Checks two BasicPermission objects for equality.
                  Checks that &lt;i&gt;obj&lt;/i&gt;&apos;s class is the same as this object&apos;s class
                  and has the same name as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if &lt;i&gt;obj&lt;/i&gt;&apos;s class is the same as this object&apos;s class
                      and has the same name as this BasicPermission object, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="147">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="bp" type="BasicPermission" line="150"/>
            </method>
            <javadoc line="153">
                Returns the hash code value for this object.
                  The hash code used is the hash code of the name, that is,
                  &lt;code&gt;getName().hashCode()&lt;/code&gt;, where &lt;code&gt;getName&lt;/code&gt; is
                  from the Permission superclass.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="160"/>
            <javadoc line="163">
                Returns the canonical string representation of the actions,
                  which currently is the empty string &quot;&quot;, since there are no actions for
                  a BasicPermission.                
                <return>
                    the empty string &quot;&quot;.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="169"/>
            <javadoc line="172">
                Returns a new PermissionCollection object for storing BasicPermission
                  objects.
                  &lt;p&gt;BasicPermission objects must be stored in a manner that allows them
                  to be inserted in any order, but that also enables the
                  PermissionCollection &lt;code&gt;implies&lt;/code&gt; method
                  to be implemented in an efficient (and consistent) manner.                
                <return>
                    a new PermissionCollection object suitable for
                      storing BasicPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="182"/>
            <javadoc line="185">
                readObject is called to restore the state of the BasicPermission from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="189">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="193">
                Returns the canonical name of this BasicPermission.
                  All internal invocations of getName should invoke this method, so
                  that the pre-JDK 1.6 &quot;exitVM&quot; and current &quot;exitVM.&quot; permission are
                  equivalent in equals/hashCode methods.                
                <return>
                    the canonical name of this BasicPermission.                    
                </return>
            </javadoc>
            <method name="getCanonicalName" type="String" line="200"/>
        </class>
        <class name="BasicPermissionCollection" line="204">
            <extends class="PermissionCollection"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="204">
                A BasicPermissionCollection stores a collection
                  of BasicPermission permissions. BasicPermission objects
                  must be stored in a manner that allows them to be inserted in any
                  order, but enable the implies function to evaluate the implies
                  method in an efficient (and consistent) manner.
                  A BasicPermissionCollection handles comparing a permission like &quot;a.b.c.d.e&quot;
                  with a Permission such as &quot;a.b.&quot;, or &quot;&quot;.                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionsImpl                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="219"/>
            <declaration name="perms" type="Map&amp;lt;String,Permission&amp;gt;" line="220"/>
            <javadoc line="220">
                Key is name, value is permission. All permission objects in
                  collection must be of the same type.
                  Not serialized; see serialization section at end of class.                
            </javadoc>
            <declaration name="all_allowed" type="boolean" line="226"/>
            <javadoc line="226">
                This is set to &lt;code&gt;true&lt;/code&gt; if this BasicPermissionCollection
                  contains a BasicPermission with &apos;&apos; as its permission name.                
                <see>
                    #serialPersistentFields                    
                </see>
            </javadoc>
            <declaration name="permClass" type="Class" line="232"/>
            <javadoc line="232">
                The class to which all BasicPermissions in this
                  BasicPermissionCollection belongs.                
                <see>
                    #serialPersistentFields                    
                </see>
            </javadoc>
            <javadoc line="238">
                Create an empty BasicPermissionCollection object.                
            </javadoc>
            <method name="BasicPermissionCollection" type="constructor" line="241">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
            </method>
            <javadoc line="246">
                Adds a permission to the BasicPermissions. The key for the hash is
                  permission.path.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    IllegalArgumentException - if the permission is not a
                      BasicPermission, or if
                      the permission is not of the
                      same Class as the other
                      permissions in this collection.                    
                </exception>
                <exception>
                    SecurityException - if this BasicPermissionCollection object
                      has been marked readonly                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="258">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="bp" type="BasicPermission" line="261"/>
                <scope line="262"/>
                <scope line="265"/>
                <scope line="268"/>
                <scope line="271"/>
            </method>
            <javadoc line="275">
                Check and see if this set of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if &quot;permission&quot; is a proper subset of a permission in
                      the set, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="282">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="bp" type="BasicPermission" line="284"/>
                <declaration name="path" type="String" line="287"/>
                <declaration name="x" type="Permission" line="288"/>
                <scope line="289"/>
                <scope line="292"/>
                <declaration name="last" type="int" line="295"/>
                <scope line="297">
                    <scope line="299"/>
                    <scope line="302"/>
                </scope>
            </method>
            <javadoc line="309">
                Returns an enumeration of all the BasicPermission objects in the
                  container.                
                <return>
                    an enumeration of all the BasicPermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration&lt;Permission&gt;" line="314">
                <scope line="315"/>
            </method>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="319"/>
            <javadoc line="319">
                @serialField permissions java.util.Hashtable
                  The BasicPermissions in this BasicPermissionCollection.
                  All BasicPermissions in the collection must belong to the same class.
                  The Hashtable is indexed by the BasicPermission name; the value
                  of the Hashtable entry is the permission.                
                <serialField>
                    all_allowed boolean
                      This is set to &lt;code&gt;true&lt;/code&gt; if this BasicPermissionCollection
                      contains a BasicPermission with &apos;&apos; as its permission name.                    
                </serialField>
                <serialField>
                    permClass java.lang.Class
                      The class to which all BasicPermissions in this
                      BasicPermissionCollection belongs.                    
                </serialField>
            </javadoc>
            <javadoc line="333">
                @serialData Default fields.                
            </javadoc>
            <method name="writeObject" type="void" line="336">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="permissions" type="Hashtable&amp;lt;String,Permission&amp;gt;" line="337"/>
                <scope line="338"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="341"/>
            </method>
            <javadoc line="347">
                readObject is called to restore the state of the
                  BasicPermissionCollection from a stream.                
            </javadoc>
            <method name="readObject" type="void" line="351">
                <params>
                    <param name="in" type="java.io.ObjectInputStream"/>
                </params>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="352"/>
                <declaration name="permissions" type="Hashtable&amp;lt;String,Permission&amp;gt;" line="353"/>
                <scope line="358">
                    <declaration name="e" type="Enumeration&amp;lt;Permission&amp;gt;" line="359"/>
                    <scope line="360">
                        <declaration name="p" type="Permission" line="361"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>