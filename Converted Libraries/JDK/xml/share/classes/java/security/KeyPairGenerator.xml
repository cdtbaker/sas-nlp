<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.Provider.Service"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="KeyPairGenerator" line="7">
            <extends class="KeyPairGeneratorSpi"/>
            <javadoc line="7">
                The KeyPairGenerator class is used to generate pairs of
                  public and private keys. Key pair generators are constructed using the
                  &lt;code&gt;getInstance&lt;/code&gt; factory methods (static methods that
                  return instances of a given class).
                  &lt;p&gt;A Key pair generator for a particular algorithm creates a public/private
                  key pair that can be used with this algorithm. It also associates
                  algorithm-specific parameters with each of the generated keys.
                  &lt;p&gt;There are two ways to generate a key pair: in an algorithm-independent
                  manner, and in an algorithm-specific manner.
                  The only difference between the two is the initialization of the object:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;b&gt;Algorithm-Independent Initialization&lt;/b&gt;
                  &lt;p&gt;All key pair generators share the concepts of a keysize and a
                  source of randomness. The keysize is interpreted differently for different
                  algorithms (e.g., in the case of the &lt;i&gt;DSA&lt;/i&gt; algorithm, the keysize
                  corresponds to the length of the modulus).
                  There is an{@link #initialize(int,java.security.SecureRandom) initialize}method in this KeyPairGenerator class that takes these two universally
                  shared types of arguments. There is also one that takes just a
                  &lt;code&gt;keysize&lt;/code&gt; argument, and uses the &lt;code&gt;SecureRandom&lt;/code&gt;
                  implementation of the highest-priority installed provider as the source
                  of randomness. (If none of the installed providers supply an implementation
                  of &lt;code&gt;SecureRandom&lt;/code&gt;, a system-provided source of randomness is
                  used.)
                  &lt;p&gt;Since no other parameters are specified when you call the above
                  algorithm-independent &lt;code&gt;initialize&lt;/code&gt; methods, it is up to the
                  provider what to do about the algorithm-specific parameters (if any) to be
                  associated with each of the keys.
                  &lt;p&gt;If the algorithm is the &lt;i&gt;DSA&lt;/i&gt; algorithm, and the keysize (modulus
                  size) is 512, 768, or 1024, then the &lt;i&gt;Sun&lt;/i&gt; provider uses a set of
                  precomputed values for the &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, and
                  &lt;code&gt;g&lt;/code&gt; parameters. If the modulus size is not one of the above
                  values, the &lt;i&gt;Sun&lt;/i&gt; provider creates a new set of parameters. Other
                  providers might have precomputed parameter sets for more than just the
                  three modulus sizes mentioned above. Still others might not have a list of
                  precomputed parameters at all and instead always create new parameter sets.
                  &lt;p&gt;
                  &lt;li&gt;&lt;b&gt;Algorithm-Specific Initialization&lt;/b&gt;
                  &lt;p&gt;For situations where a set of algorithm-specific parameters already
                  exists (e.g., so-called &lt;i&gt;community parameters&lt;/i&gt; in DSA), there are two{@link #initialize(java.security.spec.AlgorithmParameterSpec)initialize} methods that have an &lt;code&gt;AlgorithmParameterSpec&lt;/code&gt;
                  argument. One also has a &lt;code&gt;SecureRandom&lt;/code&gt; argument, while the
                  the other uses the &lt;code&gt;SecureRandom&lt;/code&gt;
                  implementation of the highest-priority installed provider as the source
                  of randomness. (If none of the installed providers supply an implementation
                  of &lt;code&gt;SecureRandom&lt;/code&gt;, a system-provided source of randomness is
                  used.)
                  &lt;/ul&gt;
                  &lt;p&gt;In case the client does not explicitly initialize the KeyPairGenerator
                  (via a call to an &lt;code&gt;initialize&lt;/code&gt; method), each provider must
                  supply (and document) a default initialization.
                  For example, the &lt;i&gt;Sun&lt;/i&gt; provider uses a default modulus size (keysize)
                  of 1024 bits.
                  &lt;p&gt;Note that this class is abstract and extends from
                  &lt;code&gt;KeyPairGeneratorSpi&lt;/code&gt; for historical reasons.
                  Application developers should only take notice of the methods defined in
                  this &lt;code&gt;KeyPairGenerator&lt;/code&gt; class; all the methods in
                  the superclass are intended for cryptographic service providers who wish to
                  supply their own implementations of key pair generators.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;KeyPairGenerator&lt;/code&gt; algorithms and keysizes in
                  parentheses:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;DiffieHellman&lt;/tt&gt; (1024)&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;DSA&lt;/tt&gt; (1024)&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;RSA&lt;/tt&gt; (1024, 2048)&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator&quot;&gt;
                  KeyPairGenerator section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Benjamin Renaud                    
                </author>
                <see>
                    java.security.spec.AlgorithmParameterSpec                    
                </see>
            </javadoc>
            <declaration name="algorithm" type="String" line="83"/>
            <declaration name="provider" type="Provider" line="84"/>
            <javadoc line="85">
                Creates a KeyPairGenerator object for the specified algorithm.                
                <param>
                    algorithm the standard string name of the algorithm.
                      See the KeyPairGenerator section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
            </javadoc>
            <method name="KeyPairGenerator" type="constructor" line="93">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="96">
                Returns the standard name of the algorithm for this key pair generator.
                  See the KeyPairGenerator section in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard algorithm names.                
                <return>
                    the standard string name of the algorithm.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="104"/>
            <method name="getInstance" type="KeyPairGenerator" line="107">
                <params>
                    <param name="instance" type="Instance"/>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="kpg" type="KeyPairGenerator" line="108"/>
                <scope line="109"/>
                <scope line="112">
                    <declaration name="spi" type="KeyPairGeneratorSpi" line="113"/>
                </scope>
            </method>
            <javadoc line="119">
                Returns a KeyPairGenerator object that generates public/private
                  key pairs for the specified algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new KeyPairGenerator object encapsulating the
                  KeyPairGeneratorSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard string name of the algorithm.
                      See the KeyPairGenerator section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new KeyPairGenerator object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      KeyPairGeneratorSpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyPairGenerator" line="140">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="list" type="List&lt;Service&gt;" line="141"/>
                <declaration name="t" type="Iterator&lt;Service&gt;" line="142"/>
                <scope line="143"/>
                <declaration name="failure" type="NoSuchAlgorithmException" line="146"/>
                <scope line="147">
                    <declaration name="s" type="Service" line="148"/>
                    <scope line="149">
                        <declaration name="instance" type="Instance" line="150"/>
                        <scope line="151"/>
                        <scope line="154"/>
                    </scope>
                    <scope line="158">
                        <scope line="159"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="167">
                Returns a KeyPairGenerator object that generates public/private
                  key pairs for the specified algorithm.
                  &lt;p&gt; A new KeyPairGenerator object encapsulating the
                  KeyPairGeneratorSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard string name of the algorithm.
                      See the KeyPairGenerator section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the string name of the provider.                    
                </param>
                <return>
                    the new KeyPairGenerator object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a KeyPairGeneratorSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyPairGenerator" line="192">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="193"/>
            </method>
            <javadoc line="196">
                Returns a KeyPairGenerator object that generates public/private
                  key pairs for the specified algorithm.
                  &lt;p&gt; A new KeyPairGenerator object encapsulating the
                  KeyPairGeneratorSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the standard string name of the algorithm.
                      See the KeyPairGenerator section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new KeyPairGenerator object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a KeyPairGeneratorSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified provider is null.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="KeyPairGenerator" line="217">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="218"/>
            </method>
            <javadoc line="221">
                Returns the provider of this key pair generator object.                
                <return>
                    the provider of this key pair generator object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="225"/>
            <method name="disableFailover" type="void" line="229"/>
            <javadoc line="231">
                Initializes the key pair generator for a certain keysize using
                  a default parameter set and the &lt;code&gt;SecureRandom&lt;/code&gt;
                  implementation of the highest-priority installed provider as the source
                  of randomness.
                  (If none of the installed providers supply an implementation of
                  &lt;code&gt;SecureRandom&lt;/code&gt;, a system-provided source of randomness is
                  used.)                
                <param>
                    keysize the keysize. This is an
                      algorithm-specific metric, such as modulus length, specified in
                      number of bits.                    
                </param>
                <exception>
                    InvalidParameterException if the <code>keysize</code> is not
                      supported by this KeyPairGenerator object.                    
                </exception>
            </javadoc>
            <method name="initialize" type="void" line="245">
                <params>
                    <param name="keysize" type="int"/>
                </params>
            </method>
            <javadoc line="248">
                Initializes the key pair generator for a certain keysize with
                  the given source of randomness (and a default parameter set).                
                <param>
                    keysize the keysize. This is an
                      algorithm-specific metric, such as modulus length, specified in
                      number of bits.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidParameterException if the <code>keysize</code> is not
                      supported by this KeyPairGenerator object.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="initialize" type="void" line="259">
                <params>
                    <param name="keysize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="261">
                Initializes the key pair generator using the specified parameter
                  set and the &lt;code&gt;SecureRandom&lt;/code&gt;
                  implementation of the highest-priority installed provider as the source
                  of randomness.
                  (If none of the installed providers supply an implementation of
                  &lt;code&gt;SecureRandom&lt;/code&gt;, a system-provided source of randomness is
                  used.).
                  &lt;p&gt;This concrete method has been added to this previously-defined
                  abstract class.
                  This method calls the KeyPairGeneratorSpi{@link KeyPairGeneratorSpi#initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) initialize} method,
                  passing it &lt;code&gt;params&lt;/code&gt; and a source of randomness (obtained
                  from the highest-priority installed provider or system-provided if none
                  of the installed providers supply one).
                  That &lt;code&gt;initialize&lt;/code&gt; method always throws an
                  UnsupportedOperationException if it is not overridden by the provider.                
                <param>
                    params the parameter set used to generate the keys.                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key pair generator.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="initialize" type="void" line="282">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="285">
                Initializes the key pair generator with the given parameter
                  set and source of randomness.
                  &lt;p&gt;This concrete method has been added to this previously-defined
                  abstract class.
                  This method calls the KeyPairGeneratorSpi {@link KeyPairGeneratorSpi#initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) initialize} method,
                  passing it &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;random&lt;/code&gt;.
                  That &lt;code&gt;initialize&lt;/code&gt;
                  method always throws an
                  UnsupportedOperationException if it is not overridden by the provider.                
                <param>
                    params the parameter set used to generate the keys.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key pair generator.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="initialize" type="void" line="301">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="303">
                Generates a key pair.
                  &lt;p&gt;If this KeyPairGenerator has not been initialized explicitly,
                  provider-specific defaults will be used for the size and other
                  (algorithm-specific) values of the generated keys.
                  &lt;p&gt;This will generate a new key pair every time it is called.
                  &lt;p&gt;This method is functionally equivalent to{@link #generateKeyPair() generateKeyPair}.                
                <return>
                    the generated key pair                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="genKeyPair" type="KeyPair" line="313"/>
            <javadoc line="316">
                Generates a key pair.
                  &lt;p&gt;If this KeyPairGenerator has not been initialized explicitly,
                  provider-specific defaults will be used for the size and other
                  (algorithm-specific) values of the generated keys.
                  &lt;p&gt;This will generate a new key pair every time it is called.
                  &lt;p&gt;This method is functionally equivalent to{@link #genKeyPair() genKeyPair}.                
                <return>
                    the generated key pair                    
                </return>
            </javadoc>
            <method name="generateKeyPair" type="KeyPair" line="325"/>
            <class name="Delegate" line="328">
                <extends class="KeyPairGenerator"/>
                <declaration name="spi" type="KeyPairGeneratorSpi" line="329"/>
                <declaration name="lock" type="Object" line="330"/>
                <declaration name="serviceIterator" type="Iterator&lt;Service&gt;" line="331"/>
                <declaration name="I_NONE" type="int" line="332"/>
                <declaration name="I_SIZE" type="int" line="333"/>
                <declaration name="I_PARAMS" type="int" line="334"/>
                <declaration name="initType" type="int" line="335"/>
                <declaration name="initKeySize" type="int" line="336"/>
                <declaration name="initParams" type="AlgorithmParameterSpec" line="337"/>
                <declaration name="initRandom" type="SecureRandom" line="338"/>
                <method name="Delegate" type="constructor" line="339">
                    <params>
                        <param name="spi" type="KeyPairGeneratorSpi"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
                <method name="Delegate" type="constructor" line="343">
                    <params>
                        <param name="instance" type="Instance"/>
                        <param name="serviceIterator" type="Iterator<Service>"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
                <javadoc line="350">
                    Update the active spi of this class and return the next
                      implementation for failover. If no more implemenations are
                      available, this method returns null. However, the active spi of
                      this class is never set to null.                    
                </javadoc>
                <method name="nextSpi" type="KeyPairGeneratorSpi" line="356">
                    <params>
                        <param name="oldSpi" type="KeyPairGeneratorSpi"/>
                        <param name="reinit" type="boolean"/>
                    </params>
                    <scope line="357">
                        <scope line="358"/>
                        <scope line="361"/>
                        <scope line="364">
                            <declaration name="s" type="Service" line="365"/>
                            <scope line="366">
                                <declaration name="inst" type="Object" line="367"/>
                                <scope line="368"/>
                                <scope line="371"/>
                                <declaration name="spi" type="KeyPairGeneratorSpi" line="374"/>
                                <scope line="375">
                                    <scope line="376"/>
                                    <scope line="379"/>
                                    <scope line="382"/>
                                </scope>
                            </scope>
                            <scope line="390"/>
                        </scope>
                    </scope>
                </method>
                <method name="disableFailover" type="void" line="397"/>
                <method name="initialize" type="void" line="403">
                    <params>
                        <param name="keysize" type="int"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                    <scope line="404"/>
                    <declaration name="failure" type="RuntimeException" line="408"/>
                    <declaration name="mySpi" type="KeyPairGeneratorSpi" line="409"/>
                    <scope line="410">
                        <scope line="411"/>
                        <scope line="419">
                            <scope line="420"/>
                        </scope>
                    </scope>
                </method>
                <method name="initialize" type="void" line="429">
                    <params>
                        <param name="params" type="AlgorithmParameterSpec"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                    <scope line="430"/>
                    <declaration name="failure" type="Exception" line="434"/>
                    <declaration name="mySpi" type="KeyPairGeneratorSpi" line="435"/>
                    <scope line="436">
                        <scope line="437"/>
                        <scope line="445">
                            <scope line="446"/>
                        </scope>
                    </scope>
                    <scope line="453"/>
                </method>
                <method name="generateKeyPair" type="KeyPair" line="458">
                    <scope line="459"/>
                    <declaration name="failure" type="RuntimeException" line="462"/>
                    <declaration name="mySpi" type="KeyPairGeneratorSpi" line="463"/>
                    <scope line="464">
                        <scope line="465"/>
                        <scope line="468">
                            <scope line="469"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>