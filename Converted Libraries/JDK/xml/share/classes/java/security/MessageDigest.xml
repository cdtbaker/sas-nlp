<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util"/>
        <import package="java.lang"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.nio.ByteBuffer"/>
        <class name="MessageDigest" line="38">
            <extends class="MessageDigestSpi"/>
            <comment line="109">
                The state of this digest                
            </comment>
            <comment line="114">
                The provider                
            </comment>
            <comment line="509">
                The following class allows providers to extend from MessageDigestSpi
                 rather than from MessageDigest. It represents a MessageDigest with an
                 encapsulated, provider-supplied SPI object (of type MessageDigestSpi).
                 If the provider implementation is an instance of MessageDigestSpi,
                 the getInstance() methods above return an instance of this class, with
                 the SPI object encapsulated.
                
                 Note: All SPI methods from the original MessageDigest class have been
                 moved up the hierarchy into a new class (MessageDigestSpi), which has
                 been interposed in the hierarchy between the API (MessageDigest)
                 and its original parent (Object).                
            </comment>
            <javadoc line="38">
                This MessageDigest class provides applications the functionality of a
                  message digest algorithm, such as SHA-1 or SHA-256.
                  Message digests are secure one-way hash functions that take arbitrary-sized
                  data and output a fixed-length hash value.
                  &lt;p&gt;A MessageDigest object starts out initialized. The data is
                  processed through it using the {@link #update(byte) update}methods. At any point {@link #reset() reset} can be called
                  to reset the digest. Once all the data to be updated has been
                  updated, one of the {@link #digest() digest} methods should
                  be called to complete the hash computation.
                  &lt;p&gt;The &lt;code&gt;digest&lt;/code&gt; method can be called once for a given number
                  of updates. After &lt;code&gt;digest&lt;/code&gt; has been called, the MessageDigest
                  object is reset to its initialized state.
                  &lt;p&gt;Implementations are free to implement the Cloneable interface.
                  Client applications can test cloneability by attempting cloning
                  and catching the CloneNotSupportedException: &lt;p&gt;
                  &lt;pre&gt;
                  MessageDigest md = MessageDigest.getInstance(&quot;SHA&quot;);
                  try {
                  md.update(toChapter1);
                  MessageDigest tc1 = md.clone();
                  byte[] toChapter1Digest = tc1.digest();
                  md.update(toChapter2);
                  ...etc.
                  } catch (CloneNotSupportedException cnse) {
                  throw new DigestException(&quot;couldn&apos;t make digest of partial content&quot;);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;Note that if a given implementation is not cloneable, it is
                  still possible to compute intermediate digests by instantiating
                  several instances, if the number of digests is known in advance.
                  &lt;p&gt;Note that this class is abstract and extends from
                  &lt;code&gt;MessageDigestSpi&lt;/code&gt; for historical reasons.
                  Application developers should only take notice of the methods defined in
                  this &lt;code&gt;MessageDigest&lt;/code&gt; class; all the methods in
                  the superclass are intended for cryptographic service providers who wish to
                  supply their own implementations of message digest algorithms.
                  &lt;p&gt; Every implementation of the Java platform is required to support
                  the following standard &lt;code&gt;MessageDigest&lt;/code&gt; algorithms:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;MD5&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;SHA-1&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;SHA-256&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest&quot;&gt;
                  MessageDigest section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Benjamin Renaud                    
                </author>
                <see>
                    DigestInputStream                    
                </see>
                <see>
                    DigestOutputStream                    
                </see>
            </javadoc>
            <declaration name="algorithm" type="String" line="106"/>
            <declaration name="INITIAL" type="int" line="109"/>
            <declaration name="IN_PROGRESS" type="int" line="110"/>
            <declaration name="state" type="int" line="111"/>
            <declaration name="provider" type="Provider" line="114"/>
            <javadoc line="116">
                Creates a message digest with the specified algorithm name.                
                <param>
                    algorithm the standard name of the digest algorithm.
                      See the MessageDigest section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
            </javadoc>
            <method name="MessageDigest" type="constructor" line="125">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="129">
                Returns a MessageDigest object that implements the specified digest
                  algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new MessageDigest object encapsulating the
                  MessageDigestSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the name of the algorithm requested.
                      See the MessageDigest section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <return>
                    a Message Digest object that implements the specified algorithm.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      MessageDigestSpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="MessageDigest" line="157">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="158">
                    <declaration name="objs" type="Object[]" line="159"/>
                    <scope line="161">
                        <declaration name="md" type="MessageDigest" line="162"/>
                    </scope>
                    <scope line="165">
                        <declaration name="delegate" type="MessageDigest" line="166"/>
                    </scope>
                </scope>
                <scope line="171"/>
            </method>
            <javadoc line="176">
                Returns a MessageDigest object that implements the specified digest
                  algorithm.
                  &lt;p&gt; A new MessageDigest object encapsulating the
                  MessageDigestSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the name of the algorithm requested.
                      See the MessageDigest section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    a MessageDigest object that implements the specified algorithm.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a MessageDigestSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="MessageDigest" line="212">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="objs" type="Object[]" line="215"/>
                <scope line="216">
                    <declaration name="md" type="MessageDigest" line="217"/>
                </scope>
                <scope line="220">
                    <declaration name="delegate" type="MessageDigest" line="221"/>
                </scope>
            </method>
            <javadoc line="228">
                Returns a MessageDigest object that implements the specified digest
                  algorithm.
                  &lt;p&gt; A new MessageDigest object encapsulating the
                  MessageDigestSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the name of the algorithm requested.
                      See the MessageDigest section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    a MessageDigest object that implements the specified algorithm.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a MessageDigestSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified provider is null.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="MessageDigest" line="260">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="objs" type="Object[]" line="263"/>
                <scope line="264">
                    <declaration name="md" type="MessageDigest" line="265"/>
                </scope>
                <scope line="268">
                    <declaration name="delegate" type="MessageDigest" line="269"/>
                </scope>
            </method>
            <javadoc line="276">
                Returns the provider of this message digest object.                
                <return>
                    the provider of this message digest object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="281"/>
            <javadoc line="285">
                Updates the digest using the specified byte.                
                <param>
                    input the byte with which to update the digest.                    
                </param>
            </javadoc>
            <method name="update" type="void" line="290">
                <params>
                    <param name="input" type="byte"/>
                </params>
            </method>
            <javadoc line="295">
                Updates the digest using the specified array of bytes, starting
                  at the specified offset.                
                <param>
                    input the array of bytes.                    
                </param>
                <param>
                    offset the offset to start from in the array of bytes.                    
                </param>
                <param>
                    len the number of bytes to use, starting at
                      &lt;code&gt;offset&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="update" type="void" line="306">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="307"/>
                <scope line="310"/>
            </method>
            <javadoc line="317">
                Updates the digest using the specified array of bytes.                
                <param>
                    input the array of bytes.                    
                </param>
            </javadoc>
            <method name="update" type="void" line="322">
                <params>
                    <param name="input" type="byte[]"/>
                </params>
            </method>
            <javadoc line="327">
                Update the digest using the specified ByteBuffer. The digest is
                  updated using the &lt;code&gt;input.remaining()&lt;/code&gt; bytes starting
                  at &lt;code&gt;input.position()&lt;/code&gt;.
                  Upon return, the buffer&apos;s position will be equal to its limit;
                  its limit will not have changed.                
                <param>
                    input the ByteBuffer                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="update" type="void" line="337">
                <params>
                    <param name="input" type="ByteBuffer"/>
                </params>
                <scope line="338"/>
            </method>
            <javadoc line="345">
                Completes the hash computation by performing final operations
                  such as padding. The digest is reset after this call is made.                
                <return>
                    the array of bytes for the resulting hash value.                    
                </return>
            </javadoc>
            <method name="digest" type="byte[]" line="351">
                <comment line="353">
                                        
                </comment>
                <declaration name="result" type="byte[]" line="353"/>
            </method>
            <javadoc line="358">
                Completes the hash computation by performing final operations
                  such as padding. The digest is reset after this call is made.                
                <param>
                    buf output buffer for the computed digest                    
                </param>
                <param>
                    offset offset into the output buffer to begin storing the digest                    
                </param>
                <param>
                    len number of bytes within buf allotted for the digest                    
                </param>
                <return>
                    the number of bytes placed into &lt;code&gt;buf&lt;/code&gt;                    
                </return>
                <exception>
                    DigestException if an error occurs.                    
                </exception>
            </javadoc>
            <method name="digest" type="int" line="372">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="373"/>
                <scope line="376"/>
                <declaration name="numBytes" type="int" line="380"/>
            </method>
            <javadoc line="385">
                Performs a final update on the digest using the specified array
                  of bytes, then completes the digest computation. That is, this
                  method first calls {@link #update(byte[]) update(input)},
                  passing the &lt;i&gt;input&lt;/i&gt; array to the &lt;code&gt;update&lt;/code&gt; method,
                  then calls {@link #digest() digest()}.                
                <param>
                    input the input to be updated before the digest is
                      completed.                    
                </param>
                <return>
                    the array of bytes for the resulting hash value.                    
                </return>
            </javadoc>
            <method name="digest" type="byte[]" line="397">
                <params>
                    <param name="input" type="byte[]"/>
                </params>
            </method>
            <javadoc line="402">
                Returns a string representation of this message digest object.                
            </javadoc>
            <method name="toString" type="String" line="405">
                <declaration name="baos" type="ByteArrayOutputStream" line="406"/>
                <declaration name="p" type="PrintStream" line="407"/>
            </method>
            <javadoc line="421">
                Compares two digests for equality. Does a simple byte compare.                
                <param>
                    digesta one of the digests to compare.                    
                </param>
                <param>
                    digestb the other digest to compare.                    
                </param>
                <return>
                    true if the digests are equal, false otherwise.                    
                </return>
            </javadoc>
            <method name="isEqual" type="boolean" line="430">
                <params>
                    <param name="digesta" type="byte[]"/>
                    <param name="digestb" type="byte[]"/>
                </params>
                <comment line="437">
                    time-constant comparison                    
                </comment>
                <scope line="431"/>
                <declaration name="result" type="int" line="435"/>
                <scope line="437"/>
            </method>
            <javadoc line="443">
                Resets the digest for further use.                
            </javadoc>
            <method name="reset" type="void" line="446"/>
            <javadoc line="451">
                Returns a string that identifies the algorithm, independent of
                  implementation details. The name should be a standard
                  Java Security name (such as &quot;SHA&quot;, &quot;MD5&quot;, and so on).
                  See the MessageDigest section in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard algorithm names.                
                <return>
                    the name of the algorithm                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="462"/>
            <javadoc line="466">
                Returns the length of the digest in bytes, or 0 if this operation is
                  not supported by the provider and the implementation is not cloneable.                
                <return>
                    the digest length in bytes, or 0 if this operation is not
                      supported by the provider and the implementation is not cloneable.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getDigestLength" type="int" line="475">
                <declaration name="digestLen" type="int" line="476"/>
                <scope line="477">
                    <scope line="478">
                        <declaration name="md" type="MessageDigest" line="479"/>
                        <declaration name="digest" type="byte[]" line="480"/>
                    </scope>
                    <scope line="482"/>
                </scope>
            </method>
            <javadoc line="489">
                Returns a clone if the implementation is cloneable.                
                <return>
                    a clone if the implementation is cloneable.                    
                </return>
                <exception>
                    CloneNotSupportedException if this is called on an
                      implementation that does not support &lt;code&gt;Cloneable&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="497">
                <scope line="498"/>
                <scope line="500"/>
            </method>
            <class name="Delegate" line="522">
                <extends class="MessageDigest"/>
                <comment line="525">
                    The provider implementation (delegate)                    
                </comment>
                <comment line="528">
                    constructor                    
                </comment>
                <declaration name="digestSpi" type="MessageDigestSpi" line="525"/>
                <method name="Delegate" type="constructor" line="528">
                    <params>
                        <param name="digestSpi" type="MessageDigestSpi"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
                <javadoc line="533">
                    Returns a clone if the delegate is cloneable.                    
                    <return>
                        a clone if the delegate is cloneable.                        
                    </return>
                    <exception>
                        CloneNotSupportedException if this is called on a
                          delegate that does not support &lt;code&gt;Cloneable&lt;/code&gt;.                        
                    </exception>
                </javadoc>
                <method name="clone" type="Object" line="541">
                    <comment line="546">
                        Because &apos;algorithm&apos;, &apos;provider&apos;, and &apos;state&apos; are private
                         members of our supertype, we must perform a cast to
                         access them.                        
                    </comment>
                    <scope line="542">
                        <declaration name="digestSpiClone" type="MessageDigestSpi" line="543"/>
                        <declaration name="that" type="MessageDigest" line="548"/>
                    </scope>
                    <scope line="554"/>
                </method>
                <method name="engineGetDigestLength" type="int" line="559"/>
                <method name="engineUpdate" type="void" line="563">
                    <params>
                        <param name="input" type="byte"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="567">
                    <params>
                        <param name="input" type="byte[]"/>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="571">
                    <params>
                        <param name="input" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="engineDigest" type="byte[]" line="575"/>
                <method name="engineDigest" type="int" line="580">
                    <params>
                        <param name="buf" type="byte[]"/>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineReset" type="void" line="584"/>
            </class>
        </class>
    </source>