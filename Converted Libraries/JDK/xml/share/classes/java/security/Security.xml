<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.lang.reflect"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.io"/>
        <import package="java.net.URL"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.PropertyExpander"/>
        <import package="java.security.Provider.Service"/>
        <import package="sun.security.jca"/>
        <class name="Security" line="40">
            <comment line="50">
                                
            </comment>
            <comment line="54">
                                
            </comment>
            <comment line="57">
                An element in the cache                
            </comment>
            <comment line="191">
                Initialize to default values, if &lt;java.home&gt;libjava.security
                 is not found.                
            </comment>
            <comment line="663">
                Map containing cached Spi Class objects of the specified type                
            </comment>
            <comment line="685">
                Returns an array of objects: the first object in the array is
                 an instance of an implementation of the requested algorithm
                 and type, and the second object in the array identifies the provider
                 of that implementation.
                 The &lt;code&gt;provider&lt;code&gt; argument can be null, in which case all
                 configured providers will be searched in order of preference.                
            </comment>
            <comment line="716">
                Returns an array of objects: the first object in the array is
                 an instance of an implementation of the requested algorithm
                 and type, and the second object in the array identifies the provider
                 of that implementation.
                 The &lt;code&gt;provider&lt;code&gt; argument cannot be null.                
            </comment>
            <comment line="799">
                Implementation detail:  If the property we just set in
                 setProperty() was either &quot;package.access&quot; or
                 &quot;package.definition&quot;, we need to signal to the SecurityManager
                 class that the value has just changed, and that it should
                 invalidate it&apos;s local cache values.
                
                 Rather than create a new API entry for this function,
                 we use reflection to set a private variable.                
            </comment>
            <comment line="860">
                Returns all providers who satisfy the specified
                 criterion.                
            </comment>
            <comment line="899">
                Returns true if the given provider satisfies
                 the selection criterion key:value.                
            </comment>
            <comment line="958">
                Returns true if the attribute is a standard attribute;
                 otherwise, returns false.                
            </comment>
            <comment line="974">
                Returns true if the requested attribute value is supported;
                 otherwise, returns false.                
            </comment>
            <javadoc line="40">
                &lt;p&gt;This class centralizes all security properties and common security
                  methods. One of its primary uses is to manage providers.                
                <author>
                    Benjamin Renaud                    
                </author>
            </javadoc>
            <declaration name="sdebug" type="Debug" line="50"/>
            <declaration name="props" type="Properties" line="54"/>
            <class name="ProviderProperty" line="57">
                <declaration name="className" type="String" line="58"/>
                <declaration name="provider" type="Provider" line="59"/>
            </class>
            <scope line="62">
                <anonymous_class line="67">
                    <method name="run" type="Void" line="68"/>
                </anonymous_class>
            </scope>
            <method name="initialize" type="void" line="75">
                <comment line="80">
                    first load the system properties file                    
                </comment>
                <comment line="81">
                    to determine the value of security.overridePropertiesFile                    
                </comment>
                <comment line="132">
                    now load the user-specified file so its values                    
                </comment>
                <comment line="133">
                    will win if they conflict with the earlier values                    
                </comment>
                <declaration name="loadedProps" type="boolean" line="77"/>
                <declaration name="overrideAll" type="boolean" line="78"/>
                <declaration name="propFile" type="File" line="82"/>
                <scope line="83">
                    <declaration name="is" type="InputStream" line="84"/>
                    <scope line="85">
                        <declaration name="fis" type="FileInputStream" line="86"/>
                        <scope line="91"/>
                    </scope>
                    <scope line="95">
                        <scope line="96"/>
                    </scope>
                    <scope line="101">
                        <scope line="102">
                            <scope line="103"/>
                            <scope line="105">
                                <scope line="106"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="115">
                    <declaration name="extraPropFile" type="String" line="117"/>
                    <scope line="119"/>
                    <scope line="124">
                        <scope line="126"/>
                    </scope>
                    <scope line="134">
                        <declaration name="bis" type="BufferedInputStream" line="135"/>
                        <scope line="136">
                            <declaration name="propURL" type="URL" line="137"/>
                            <scope line="141"/>
                            <scope line="144"/>
                            <scope line="151">
                                <scope line="154"/>
                            </scope>
                        </scope>
                        <scope line="159">
                            <scope line="160"/>
                        </scope>
                        <scope line="166">
                            <scope line="167">
                                <scope line="168"/>
                                <scope line="170">
                                    <scope line="171"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="180">
                    <scope line="182"/>
                </scope>
            </method>
            <method name="initializeStatic" type="void" line="194"/>
            <javadoc line="203">
                Don&apos;t let anyone instantiate this.                
            </javadoc>
            <method name="Security" type="constructor" line="206"/>
            <method name="securityPropFile" type="File" line="209">
                <params>
                    <param name="filename" type="String"/>
                </params>
                <comment line="210">
                    maybe check for a system property which will specify where to                    
                </comment>
                <comment line="211">
                    look. Someday.                    
                </comment>
                <declaration name="sep" type="String" line="212"/>
            </method>
            <javadoc line="217">
                Looks up providers, and returns the property (and its associated
                  provider) mapping the key, if any.
                  The order in which the providers are looked up is the
                  provider-preference order, as specificed in the security
                  properties file.                
            </javadoc>
            <method name="getProviderProperty" type="ProviderProperty" line="224">
                <params>
                    <param name="key" type="String"/>
                </params>
                <comment line="235">
                    Is there a match if we do a case-insensitive property name                    
                </comment>
                <comment line="236">
                    comparison? Let&apos;s try ...                    
                </comment>
                <declaration name="entry" type="ProviderProperty" line="225"/>
                <declaration name="providers" type="List&lt;Provider&gt;" line="227"/>
                <scope line="228">
                    <declaration name="matchKey" type="String" line="230"/>
                    <declaration name="prov" type="Provider" line="231"/>
                    <declaration name="prop" type="String" line="232"/>
                    <scope line="234">
                        <scope line="238">
                            <scope line="240"/>
                        </scope>
                    </scope>
                    <scope line="247">
                        <declaration name="newEntry" type="ProviderProperty" line="248"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="258">
                Returns the property (if any) mapping the key for the given provider.                
            </javadoc>
            <method name="getProviderProperty" type="String" line="261">
                <params>
                    <param name="key" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <comment line="264">
                    Is there a match if we do a case-insensitive property name                    
                </comment>
                <comment line="265">
                    comparison? Let&apos;s try ...                    
                </comment>
                <declaration name="prop" type="String" line="262"/>
                <scope line="263">
                    <scope line="267">
                        <declaration name="matchKey" type="String" line="268"/>
                        <scope line="269"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="278">
                Gets a specified property for an algorithm. The algorithm name
                  should be a standard name. See the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard algorithm names.
                  One possible use is by specialized algorithm parsers, which may map
                  classes to algorithms which they understand (much like Key parsers
                  do).                
                <param>
                    algName the algorithm name.                    
                </param>
                <param>
                    propName the name of the property to get.                    
                </param>
                <return>
                    the value of the specified property.                    
                </return>
                <deprecated>
                    This method used to return the value of a proprietary
                      property in the master file of the "SUN" Cryptographic Service
                      Provider in order to determine how to parse algorithm-specific
                      parameters. Use the new provider-based and algorithm-independent
                      <code>AlgorithmParameters</code> and <code>KeyFactory</code> engine
                      classes (introduced in the J2SE version 1.2 platform) instead.                    
                </deprecated>
            </javadoc>
            <method name="getAlgorithmProperty" type="String" line="304">
                <params>
                    <param name="algName" type="String"/>
                    <param name="propName" type="String"/>
                </params>
                <declaration name="entry" type="ProviderProperty" line="305"/>
                <scope line="307"/>
                <scope line="309"/>
            </method>
            <javadoc line="314">
                Adds a new provider, at a specified position. The position is
                  the preference order in which providers are searched for
                  requested algorithms.  The position is 1-based, that is,
                  1 is most preferred, followed by 2, and so on.
                  &lt;p&gt;If the given provider is installed at the requested position,
                  the provider that used to be at that position, and all providers
                  with a position greater than &lt;code&gt;position&lt;/code&gt;, are shifted up
                  one position (towards the end of the list of installed providers).
                  &lt;p&gt;A provider cannot be added if it is already installed.
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with the string
                  &lt;code&gt;&quot;insertProvider.&quot;+provider.getName()&lt;/code&gt;
                  to see if it&apos;s ok to add a new provider.
                  If the default implementation of &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  is used (i.e., that method is not overriden), then this will result in
                  a call to the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  with a
                  &lt;code&gt;SecurityPermission(&quot;insertProvider.&quot;+provider.getName())&lt;/code&gt;
                  permission.                
                <param>
                    provider the provider to be added.                    
                </param>
                <param>
                    position the preference position that the caller would
                      like for this provider.                    
                </param>
                <return>
                    the actual preference position in which the provider was
                      added, or -1 if the provider was not added because it is
                      already installed.                    
                </return>
                <throws>
                    NullPointerException if provider is null                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> method
                      denies access to add a new provider                    
                </throws>
                <see>
                    #getProvider                    
                </see>
                <see>
                    #removeProvider                    
                </see>
                <see>
                    java.security.SecurityPermission                    
                </see>
            </javadoc>
            <method name="insertProviderAt" type="int" line="359">
                <params>
                    <param name="provider" type="Provider"/>
                    <param name="position" type="int"/>
                </params>
                <declaration name="providerName" type="String" line="360"/>
                <declaration name="list" type="ProviderList" line="362"/>
                <declaration name="newList" type="ProviderList" line="363"/>
                <scope line="364"/>
            </method>
            <javadoc line="371">
                Adds a provider to the next position available.
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with the string
                  &lt;code&gt;&quot;insertProvider.&quot;+provider.getName()&lt;/code&gt;
                  to see if it&apos;s ok to add a new provider.
                  If the default implementation of &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  is used (i.e., that method is not overriden), then this will result in
                  a call to the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  with a
                  &lt;code&gt;SecurityPermission(&quot;insertProvider.&quot;+provider.getName())&lt;/code&gt;
                  permission.                
                <param>
                    provider the provider to be added.                    
                </param>
                <return>
                    the preference position in which the provider was
                      added, or -1 if the provider was not added because it is
                      already installed.                    
                </return>
                <throws>
                    NullPointerException if provider is null                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> method
                      denies access to add a new provider                    
                </throws>
                <see>
                    #getProvider                    
                </see>
                <see>
                    #removeProvider                    
                </see>
                <see>
                    java.security.SecurityPermission                    
                </see>
            </javadoc>
            <method name="addProvider" type="int" line="402">
                <params>
                    <param name="provider" type="Provider"/>
                </params>
                <comment line="403">
                    We can&apos;t assign a position here because the statically
                     registered providers may not have been installed yet.
                     insertProviderAt() will fix that value after it has
                     loaded the static providers.                    
                </comment>
            </method>
            <javadoc line="412">
                Removes the provider with the specified name.
                  &lt;p&gt;When the specified provider is removed, all providers located
                  at a position greater than where the specified provider was are shifted
                  down one position (towards the head of the list of installed
                  providers).
                  &lt;p&gt;This method returns silently if the provider is not installed or
                  if name is null.
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with the string &lt;code&gt;&quot;removeProvider.&quot;+name&lt;/code&gt;
                  to see if it&apos;s ok to remove the provider.
                  If the default implementation of &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  is used (i.e., that method is not overriden), then this will result in
                  a call to the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  with a &lt;code&gt;SecurityPermission(&quot;removeProvider.&quot;+name)&lt;/code&gt;
                  permission.                
                <param>
                    name the name of the provider to remove.                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkSecurityAccess}</code> method
                      denies
                      access to remove the provider                    
                </throws>
                <see>
                    #getProvider                    
                </see>
                <see>
                    #addProvider                    
                </see>
            </javadoc>
            <method name="removeProvider" type="void" line="444">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="list" type="ProviderList" line="446"/>
                <declaration name="newList" type="ProviderList" line="447"/>
            </method>
            <javadoc line="451">
                Returns an array containing all the installed providers. The order of
                  the providers in the array is their preference order.                
                <return>
                    an array of all the installed providers.                    
                </return>
            </javadoc>
            <method name="getProviders" type="Provider[]" line="457"/>
            <javadoc line="461">
                Returns the provider installed with the specified name, if
                  any. Returns null if no provider with the specified name is
                  installed or if name is null.                
                <param>
                    name the name of the provider to get.                    
                </param>
                <return>
                    the provider of the specified name.                    
                </return>
                <see>
                    #removeProvider                    
                </see>
                <see>
                    #addProvider                    
                </see>
            </javadoc>
            <method name="getProvider" type="Provider" line="473">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="477">
                Returns an array containing all installed providers that satisfy the
                  specified selection criterion, or null if no such providers have been
                  installed. The returned providers are ordered
                  according to their &lt;a href=
                  &quot;#insertProviderAt(java.security.Provider, int)&quot;&gt;preference order&lt;/a&gt;.
                  &lt;p&gt; A cryptographic service is always associated with a particular
                  algorithm or type. For example, a digital signature service is
                  always associated with a particular algorithm (e.g., DSA),
                  and a CertificateFactory service is always associated with
                  a particular certificate type (e.g., X.509).
                  &lt;p&gt;The selection criterion must be specified in one of the following two
                  formats:
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;&amp;lt;crypto_service&gt;.&amp;lt;algorithm_or_type&gt;&lt;/i&gt; &lt;p&gt; The
                  cryptographic service name must not contain any dots.
                  &lt;p&gt; A
                  provider satisfies the specified selection criterion iff the provider
                  implements the
                  specified algorithm or type for the specified cryptographic service.
                  &lt;p&gt; For example, &quot;CertificateFactory.X.509&quot;
                  would be satisfied by any provider that supplied
                  a CertificateFactory implementation for X.509 certificates.
                  &lt;li&gt; &lt;i&gt;&amp;lt;crypto_service&gt;.&amp;lt;algorithm_or_type&gt;
                  &amp;lt;attribute_name&gt;:&amp;lt attribute_value&gt;&lt;/i&gt;
                  &lt;p&gt; The cryptographic service name must not contain any dots. There
                  must be one or more space charaters between the
                  &lt;i&gt;&amp;lt;algorithm_or_type&gt;&lt;/i&gt; and the &lt;i&gt;&amp;lt;attribute_name&gt;&lt;/i&gt;.
                  &lt;p&gt; A provider satisfies this selection criterion iff the
                  provider implements the specified algorithm or type for the specified
                  cryptographic service and its implementation meets the
                  constraint expressed by the specified attribute name/value pair.
                  &lt;p&gt; For example, &quot;Signature.SHA1withDSA KeySize:1024&quot; would be
                  satisfied by any provider that implemented
                  the SHA1withDSA signature algorithm with a keysize of 1024 (or larger).
                  &lt;/ul&gt;
                  &lt;p&gt; See the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard cryptographic service names, standard
                  algorithm names and standard attribute names.                
                <param>
                    filter the criterion for selecting
                      providers. The filter is case-insensitive.                    
                </param>
                <return>
                    all the installed providers that satisfy the selection
                      criterion, or null if no such providers have been installed.                    
                </return>
                <throws>
                    InvalidParameterExceptionif the filter is not in the required format                    
                </throws>
                <throws>
                    NullPointerException if filter is null                    
                </throws>
                <see>
                    #getProviders(java.util.Map)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getProviders" type="Provider[]" line="536">
                <params>
                    <param name="filter" type="String"/>
                </params>
                <declaration name="key" type="String" line="537"/>
                <declaration name="value" type="String" line="538"/>
                <declaration name="index" type="int" line="539"/>
                <scope line="541"/>
                <scope line="544"/>
                <declaration name="hashtableFilter" type="Hashtable&lt;String,String&gt;" line="549"/>
            </method>
            <javadoc line="555">
                Returns an array containing all installed providers that satisfy the
                  specified selection criteria, or null if no such providers have been
                  installed. The returned providers are ordered
                  according to their &lt;a href=
                  &quot;#insertProviderAt(java.security.Provider, int)&quot;&gt;preference order&lt;/a&gt;.
                  &lt;p&gt;The selection criteria are represented by a map.
                  Each map entry represents a selection criterion.
                  A provider is selected iff it satisfies all selection
                  criteria. The key for any entry in such a map must be in one of the
                  following two formats:
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;&amp;lt;crypto_service&gt;.&amp;lt;algorithm_or_type&gt;&lt;/i&gt;
                  &lt;p&gt; The cryptographic service name must not contain any dots.
                  &lt;p&gt; The value associated with the key must be an empty string.
                  &lt;p&gt; A provider
                  satisfies this selection criterion iff the provider implements the
                  specified algorithm or type for the specified cryptographic service.
                  &lt;li&gt;  &lt;i&gt;&amp;lt;crypto_service&gt;.&amp;lt;algorithm_or_type&gt; &amp;lt;attribute_name&gt;&lt;/i&gt;
                  &lt;p&gt; The cryptographic service name must not contain any dots. There
                  must be one or more space charaters between the &lt;i&gt;&amp;lt;algorithm_or_type&gt;&lt;/i&gt;
                  and the &lt;i&gt;&amp;lt;attribute_name&gt;&lt;/i&gt;.
                  &lt;p&gt; The value associated with the key must be a non-empty string.
                  A provider satisfies this selection criterion iff the
                  provider implements the specified algorithm or type for the specified
                  cryptographic service and its implementation meets the
                  constraint expressed by the specified attribute name/value pair.
                  &lt;/ul&gt;
                  &lt;p&gt; See the &lt;a href=
                  &quot;../../../technotes/guides/security/StandardNames.html&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard cryptographic service names, standard
                  algorithm names and standard attribute names.                
                <param>
                    filter the criteria for selecting
                      providers. The filter is case-insensitive.                    
                </param>
                <return>
                    all the installed providers that satisfy the selection
                      criteria, or null if no such providers have been installed.                    
                </return>
                <throws>
                    InvalidParameterExceptionif the filter is not in the required format                    
                </throws>
                <throws>
                    NullPointerException if filter is null                    
                </throws>
                <see>
                    #getProviders(java.lang.String)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getProviders" type="Provider[]" line="604">
                <params>
                    <param name="filter" type="Map<String,String>"/>
                </params>
                <comment line="605">
                    Get all installed providers first.                    
                </comment>
                <comment line="606">
                    Then only return those providers who satisfy the selection criteria.                    
                </comment>
                <comment line="611">
                    Returns all installed providers                    
                </comment>
                <comment line="612">
                    if the selection criteria is null.                    
                </comment>
                <comment line="619">
                    For each selection criterion, remove providers                    
                </comment>
                <comment line="620">
                    which don&apos;t satisfy the criterion from the candidate set.                    
                </comment>
                <comment line="633">
                    For each provider in the candidates set, if it                    
                </comment>
                <comment line="634">
                    isn&apos;t in the newCandidate set, we should remove                    
                </comment>
                <comment line="635">
                    it from the candidate set.                    
                </comment>
                <declaration name="allProviders" type="Provider[]" line="607"/>
                <declaration name="keySet" type="Set&lt;String&gt;" line="608"/>
                <declaration name="candidates" type="LinkedHashSet&lt;Provider&gt;" line="609"/>
                <scope line="613"/>
                <declaration name="firstSearch" type="boolean" line="617"/>
                <scope line="621">
                    <declaration name="key" type="String" line="622"/>
                    <declaration name="value" type="String" line="623"/>
                    <declaration name="newCandidates" type="LinkedHashSet&lt;Provider&gt;" line="625"/>
                    <scope line="627"/>
                    <scope line="632">
                        <scope line="637">
                            <declaration name="prov" type="Provider" line="638"/>
                            <scope line="639"/>
                        </scope>
                    </scope>
                    <scope line="643"/>
                </scope>
                <declaration name="candidatesArray" type="Object[]" line="652"/>
                <declaration name="result" type="Provider[]" line="653"/>
                <scope line="655"/>
            </method>
            <declaration name="spiMap" type="Map&lt;String,Class&gt;" line="663"/>
            <javadoc line="665">
                Return the Class object for the given engine type
                  (e.g. &quot;MessageDigest&quot;). Works for Spis in the java.security package
                  only.                
            </javadoc>
            <method name="getSpiClass" type="Class" line="670">
                <params>
                    <param name="type" type="String"/>
                </params>
                <declaration name="clazz" type="Class" line="671"/>
                <scope line="672"/>
                <scope line="675"/>
                <scope line="679"/>
            </method>
            <method name="getImpl" type="Object[]" line="693">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="694"/>
                <scope line="697"/>
            </method>
            <method name="getImpl" type="Object[]" line="705">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="String"/>
                    <param name="provider" type="String"/>
                    <param name="params" type="Object"/>
                </params>
                <scope line="706"/>
                <scope line="709"/>
            </method>
            <method name="getImpl" type="Object[]" line="723">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
            </method>
            <method name="getImpl" type="Object[]" line="730">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="String"/>
                    <param name="provider" type="Provider"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <javadoc line="735">
                Gets a security property value.
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkPermission&lt;/code&gt;  method is called with a
                  &lt;code&gt;java.security.SecurityPermission(&quot;getProperty.&quot;+key)&lt;/code&gt;
                  permission to see if it&apos;s ok to retrieve the specified
                  security property value..                
                <param>
                    key the key of the property being retrieved.                    
                </param>
                <return>
                    the value of the security property corresponding to key.                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkPermission}</code> method
                      denies
                      access to retrieve the specified security property value                    
                </throws>
                <throws>
                    NullPointerException is key is null                    
                </throws>
                <see>
                    #setProperty                    
                </see>
                <see>
                    java.security.SecurityPermission                    
                </see>
            </javadoc>
            <method name="getProperty" type="String" line="758">
                <params>
                    <param name="key" type="String"/>
                </params>
                <comment line="766">
                    could be a class name with trailing ws                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="759"/>
                <scope line="760"/>
                <declaration name="name" type="String" line="764"/>
            </method>
            <javadoc line="770">
                Sets a security property value.
                  &lt;p&gt;First, if there is a security manager, its
                  &lt;code&gt;checkPermission&lt;/code&gt; method is called with a
                  &lt;code&gt;java.security.SecurityPermission(&quot;setProperty.&quot;+key)&lt;/code&gt;
                  permission to see if it&apos;s ok to set the specified
                  security property value.                
                <param>
                    key the name of the property to be set.                    
                </param>
                <param>
                    datum the value of the property to be set.                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>{@link java.lang.SecurityManager#checkPermission}</code> method
                      denies access to set the specified security property value                    
                </throws>
                <throws>
                    NullPointerException if key or datum is null                    
                </throws>
                <see>
                    #getProperty                    
                </see>
                <see>
                    java.security.SecurityPermission                    
                </see>
            </javadoc>
            <method name="setProperty" type="void" line="792">
                <params>
                    <param name="key" type="String"/>
                    <param name="datum" type="String"/>
                </params>
                <comment line="795">
                                        
                </comment>
            </method>
            <method name="invalidateSMCache" type="void" line="808">
                <params>
                    <param name="key" type="String"/>
                </params>
                <comment line="817">
                                        
                </comment>
                <comment line="836">
                    If we couldn&apos;t get the class, it hasn&apos;t
                     been loaded yet.  If there is no such
                     field, we shouldn&apos;t try to set it.  There
                     shouldn&apos;t be a security execption, as we
                     are loaded by boot class loader, and we
                     are inside a doPrivileged() here.
                    
                     NOOP: don&apos;t do anything...                    
                </comment>
                <comment line="847">
                                        
                </comment>
                <comment line="848">
                                        
                </comment>
                <comment line="849">
                                        
                </comment>
                <declaration name="pa" type="boolean" line="810"/>
                <declaration name="pd" type="boolean" line="811"/>
                <scope line="813">
                    <anonymous_class line="814">
                        <method name="run" type="Void" line="815">
                            <comment line="817">
                                                                
                            </comment>
                            <comment line="836">
                                If we couldn&apos;t get the class, it hasn&apos;t
                                 been loaded yet.  If there is no such
                                 field, we shouldn&apos;t try to set it.  There
                                 shouldn&apos;t be a security execption, as we
                                 are loaded by boot class loader, and we
                                 are inside a doPrivileged() here.
                                
                                 NOOP: don&apos;t do anything...                                
                            </comment>
                            <scope line="816">
                                <declaration name="cl" type="Class" line="818"/>
                                <declaration name="f" type="Field" line="820"/>
                                <declaration name="accessible" type="boolean" line="821"/>
                                <scope line="823"/>
                                <scope line="827"/>
                            </scope>
                            <scope line="835"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="check" type="void" line="852">
                <params>
                    <param name="directive" type="String"/>
                </params>
                <declaration name="security" type="SecurityManager" line="853"/>
                <scope line="854"/>
            </method>
            <method name="getAllQualifyingCandidates" type="LinkedHashSet<Provider>" line="866">
                <params>
                    <param name="filterKey" type="String"/>
                    <param name="filterValue" type="String"/>
                    <param name="allProviders" type="Provider[]"/>
                </params>
                <comment line="870">
                    The first component is the service name.                    
                </comment>
                <comment line="871">
                    The second is the algorithm name.                    
                </comment>
                <comment line="872">
                    If the third isn&apos;t null, that is the attrinute name.                    
                </comment>
                <declaration name="filterComponents" type="String[]" line="867"/>
                <declaration name="serviceName" type="String" line="873"/>
                <declaration name="algName" type="String" line="874"/>
                <declaration name="attrName" type="String" line="875"/>
            </method>
            <method name="getProvidersNotUsingCache" type="LinkedHashSet<Provider>" line="886">
                <params>
                    <param name="serviceName" type="String"/>
                    <param name="algName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="filterValue" type="String"/>
                    <param name="allProviders" type="Provider[]"/>
                </params>
                <declaration name="candidates" type="LinkedHashSet&lt;Provider&gt;" line="887"/>
                <scope line="888">
                    <scope line="891"/>
                </scope>
            </method>
            <method name="isCriterionSatisfied" type="boolean" line="906">
                <params>
                    <param name="prov" type="Provider"/>
                    <param name="serviceName" type="String"/>
                    <param name="algName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="filterValue" type="String"/>
                </params>
                <comment line="912">
                    Check whether the provider has a property                    
                </comment>
                <comment line="913">
                    whose key is the same as the given key.                    
                </comment>
                <comment line="917">
                    Check whether we have an alias instead                    
                </comment>
                <comment line="918">
                    of a standard name in the key.                    
                </comment>
                <comment line="934">
                    The provider doesn&apos;t have the given                    
                </comment>
                <comment line="935">
                    key in its property list.                    
                </comment>
                <comment line="940">
                    If the key is in the format of:                    
                </comment>
                <comment line="941">
                    &lt;crypto_service&gt;.&lt;algorithm_or_type&gt;,                    
                </comment>
                <comment line="942">
                    there is no need to check the value.                    
                </comment>
                <comment line="948">
                    If we get here, the key must be in the                    
                </comment>
                <comment line="949">
                    format of &lt;crypto_service&gt;.&lt;algorithm_or_provider&gt; &lt;attribute_name&gt;.                    
                </comment>
                <declaration name="key" type="String" line="907"/>
                <scope line="909"/>
                <declaration name="propValue" type="String" line="914"/>
                <scope line="916">
                    <declaration name="standardName" type="String" line="919"/>
                    <scope line="923">
                        <scope line="926"/>
                    </scope>
                    <scope line="933"/>
                </scope>
                <scope line="944"/>
                <scope line="950"/>
                <scope line="952"/>
            </method>
            <method name="isStandardAttr" type="boolean" line="961">
                <params>
                    <param name="attribute" type="String"/>
                </params>
                <comment line="962">
                    For now, we just have two standard attributes:                    
                </comment>
                <comment line="963">
                    KeySize and ImplementedIn.                    
                </comment>
            </method>
            <method name="isConstraintSatisfied" type="boolean" line="979">
                <params>
                    <param name="attribute" type="String"/>
                    <param name="value" type="String"/>
                    <param name="prop" type="String"/>
                </params>
                <comment line="980">
                    For KeySize, prop is the max key size the                    
                </comment>
                <comment line="981">
                    provider supports for a specific &lt;crypto_service&gt;.&lt;algorithm&gt;.                    
                </comment>
                <comment line="992">
                    For Type, prop is the type of the implementation                    
                </comment>
                <comment line="993">
                    for a specific &lt;crypto service&gt;.&lt;algorithm&gt;.                    
                </comment>
                <scope line="982">
                    <declaration name="requestedSize" type="int" line="983"/>
                    <declaration name="maxSize" type="int" line="984"/>
                    <scope line="985"/>
                    <scope line="987"/>
                </scope>
                <scope line="994"/>
            </method>
            <method name="getFilterComponents" type="String[]" line="1001">
                <params>
                    <param name="filterKey" type="String"/>
                    <param name="filterValue" type="String"/>
                </params>
                <comment line="1005">
                    There must be a dot in the filter, and the dot                    
                </comment>
                <comment line="1006">
                    shouldn&apos;t be at the beginning of this string.                    
                </comment>
                <comment line="1015">
                    The filterValue is an empty string. So the filterKey                    
                </comment>
                <comment line="1016">
                    should be in the format of &lt;crypto_service&gt;.&lt;algorithm_or_type&gt;.                    
                </comment>
                <comment line="1019">
                    There must be a algorithm or type name.                    
                </comment>
                <comment line="1023">
                    The filterValue is a non-empty string. So the filterKey must be                    
                </comment>
                <comment line="1024">
                    in the format of                    
                </comment>
                <comment line="1025">
                    &lt;crypto_service&gt;.&lt;algorithm_or_type&gt; &lt;attribute_name&gt;                    
                </comment>
                <comment line="1029">
                    There is no attribute name in the filter.                    
                </comment>
                <comment line="1034">
                    There is no attribute name in the filter.                    
                </comment>
                <comment line="1039">
                    There must be an algorithm name in the filter.                    
                </comment>
                <declaration name="algIndex" type="int" line="1002"/>
                <scope line="1004"/>
                <declaration name="serviceName" type="String" line="1010"/>
                <declaration name="algName" type="String" line="1011"/>
                <declaration name="attrName" type="String" line="1012"/>
                <scope line="1014">
                    <scope line="1018"/>
                </scope>
                <scope line="1022">
                    <declaration name="attrIndex" type="int" line="1026"/>
                    <scope line="1028"/>
                    <scope line="1031">
                        <scope line="1033"/>
                    </scope>
                    <scope line="1041"/>
                    <scope line="1043"/>
                </scope>
                <declaration name="result" type="String[]" line="1048"/>
            </method>
            <javadoc line="1056">
                Returns a Set of Strings containing the names of all available
                  algorithms or types for the specified Java cryptographic service
                  (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Returns
                  an empty Set if there is no provider that supports the
                  specified service or if serviceName is null. For a complete list
                  of Java cryptographic services, please see the
                  &lt;a href=&quot;../../../technotes/guides/security/crypto/CryptoSpec.html&quot;&gt;Java
                  Cryptography Architecture API Specification &amp;amp; Reference&lt;/a&gt;.
                  Note: the returned set is immutable.                
                <param>
                    serviceName the name of the Java cryptographic
                      service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore).
                      Note: this parameter is case-insensitive.                    
                </param>
                <return>
                    a Set of Strings containing the names of all available
                      algorithms or types for the specified Java cryptographic service
                      or an empty set if no provider supports the specified service.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAlgorithms" type="Set<String>" line="1077">
                <params>
                    <param name="serviceName" type="String"/>
                </params>
                <comment line="1088">
                    Check the keys for each provider.                    
                </comment>
                <comment line="1093">
                    We should skip the currentKey if it contains a                    
                </comment>
                <comment line="1094">
                    whitespace. The reason is: such an entry in the                    
                </comment>
                <comment line="1095">
                    provider property contains attributes for the                    
                </comment>
                <comment line="1096">
                    implementation of an algorithm. We are only interested                    
                </comment>
                <comment line="1097">
                    in entries which lead to the implementation                    
                </comment>
                <comment line="1098">
                    classes.                    
                </comment>
                <scope line="1080"/>
                <declaration name="result" type="HashSet&lt;String&gt;" line="1084"/>
                <declaration name="providers" type="Provider[]" line="1085"/>
                <scope line="1087">
                    <scope line="1090">
                        <declaration name="currentKey" type="String" line="1091"/>
                        <scope line="1092">
                            <scope line="1099"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>