<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.interfaces">
        <import package="java.security"/>
        <interface name="DSAKeyPairGenerator">
            <javadoc line="30">
                An interface to an object capable of generating DSA key pairs.
                  &lt;p&gt;The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number
                  of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a
                  DSAKeyPairGenerator, the default is to generate 1024-bit keys, using
                  precomputed p, q and g parameters and an instance of SecureRandom as
                  the random bit source.
                  &lt;p&gt;Users wishing to indicate DSA-specific parameters, and to generate a key
                  pair suitable for use with the DSA algorithm typically
                  &lt;ol&gt;
                  &lt;li&gt;Get a key pair generator for the DSA algorithm by calling the
                  KeyPairGenerator &lt;code&gt;getInstance&lt;/code&gt; method with &quot;DSA&quot;
                  as its argument.&lt;p&gt;
                  &lt;li&gt;Initialize the generator by casting the result to a DSAKeyPairGenerator
                  and calling one of the
                  &lt;code&gt;initialize&lt;/code&gt; methods from this DSAKeyPairGenerator interface.&lt;p&gt;
                  &lt;li&gt;Generate a key pair by calling the &lt;code&gt;generateKeyPair&lt;/code&gt;
                  method from the KeyPairGenerator class.
                  &lt;/ol&gt;
                  &lt;p&gt;Note: it is not always necessary to do do algorithm-specific
                  initialization for a DSA key pair generator. That is, it is not always
                  necessary to call an &lt;code&gt;initialize&lt;/code&gt; method in this interface.
                  Algorithm-independent initialization using the &lt;code&gt;initialize&lt;/code&gt; method
                  in the KeyPairGenerator
                  interface is all that is needed when you accept defaults for algorithm-specific
                  parameters.                
                <see>
                    java.security.KeyPairGenerator                    
                </see>
            </javadoc>
            <method name="initialize" type="void" line="69"/>
            <javadoc line="69">
                Initializes the key pair generator using the DSA family parameters
                  (p,q and g) and an optional SecureRandom bit source. If a
                  SecureRandom bit source is needed but not supplied, i.e. null, a
                  default SecureRandom instance will be used.                
                <param>
                    params the parameters to use to generate the keys.                    
                </param>
                <param>
                    random the random bit source to use to generate key bits;
                      can be null.                    
                </param>
                <exception>
                    InvalidParameterException if the &lt;code&gt;params&lt;/code&gt;
                      value is invalid or null.                    
                </exception>
            </javadoc>
            <method name="initialize" type="void" line="86"/>
            <javadoc line="86">
                Initializes the key pair generator for a given modulus length
                  (instead of parameters), and an optional SecureRandom bit source.
                  If a SecureRandom bit source is needed but not supplied, i.e.
                  null, a default SecureRandom instance will be used.
                  &lt;p&gt;If &lt;code&gt;genParams&lt;/code&gt; is true, this method generates new
                  p, q and g parameters. If it is false, the method uses precomputed
                  parameters for the modulus length requested. If there are no
                  precomputed parameters for that modulus length, an exception will be
                  thrown. It is guaranteed that there will always be
                  default parameters for modulus lengths of 512 and 1024 bits.                
                <param>
                    modlen the modulus length in bits. Valid values are any
                      multiple of 8 between 512 and 1024, inclusive.                    
                </param>
                <param>
                    random the random bit source to use to generate key bits;
                      can be null.                    
                </param>
                <param>
                    genParams whether or not to generate new parameters for
                      the modulus length requested.                    
                </param>
                <exception>
                    InvalidParameterException if &lt;code&gt;modlen&lt;/code&gt; is not
                      between 512 and 1024, or if &lt;code&gt;genParams&lt;/code&gt; is false and
                      there are no precomputed parameters for the requested modulus
                      length.                    
                </exception>
            </javadoc>
        </interface>
    </source>