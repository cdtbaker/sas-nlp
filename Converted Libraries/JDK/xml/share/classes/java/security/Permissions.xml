<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Collections"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="Permissions" line="44">
            <extends class="PermissionCollection"/>
            <comment line="92">
                optimization. keep track of whether unresolved permissions need to be
                 checked                
            </comment>
            <comment line="96">
                optimization. keep track of the AllPermission collection
                 - package private for ProtectionDomain optimization                
            </comment>
            <comment line="339">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                 private Hashtable perms;                
            </comment>
            <comment line="379">
                Reads in a Hashtable of ClassPermissionCollections and saves them in the
                 permsMap field. Reads in allPermission.                
            </comment>
            <comment line="408">
                all the perms                
            </comment>
            <comment line="410">
                the current set                
            </comment>
            <comment line="418">
                No need to synchronize; caller should sync on object as required                
            </comment>
            <comment line="438">
                No need to synchronize; caller should sync on object as required                
            </comment>
            <comment line="548">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                 private Hashtable perms;                
            </comment>
            <comment line="582">
                Reads in a Hashtable of PermissionPermission and saves them in the
                 permsMap field.                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="44">
                This class represents a heterogeneous collection of Permissions. That is,
                  it contains different types of Permission objects, organized into
                  PermissionCollections. For example, if any
                  &lt;code&gt;java.io.FilePermission&lt;/code&gt; objects are added to an instance of
                  this class, they are all stored in a single
                  PermissionCollection. It is the PermissionCollection returned by a call to
                  the &lt;code&gt;newPermissionCollection&lt;/code&gt; method in the FilePermission class.
                  Similarly, any &lt;code&gt;java.lang.RuntimePermission&lt;/code&gt; objects are
                  stored in the PermissionCollection returned by a call to the
                  &lt;code&gt;newPermissionCollection&lt;/code&gt; method in the
                  RuntimePermission class. Thus, this class represents a collection of
                  PermissionCollections.
                  &lt;p&gt;When the &lt;code&gt;add&lt;/code&gt; method is called to add a Permission, the
                  Permission is stored in the appropriate PermissionCollection. If no such
                  collection exists yet, the Permission object&apos;s class is determined and the
                  &lt;code&gt;newPermissionCollection&lt;/code&gt; method is called on that class to create
                  the PermissionCollection and add it to the Permissions object. If
                  &lt;code&gt;newPermissionCollection&lt;/code&gt; returns null, then a default
                  PermissionCollection that uses a hashtable will be created and used. Each
                  hashtable entry stores a Permission object as both the key and the value.
                  &lt;p&gt; Enumerations returned via the &lt;code&gt;elements&lt;/code&gt; method are
                  not &lt;em&gt;fail-fast&lt;/em&gt;.  Modifications to a collection should not be
                  performed while enumerating over that collection.                
                <see>
                    Permission                    
                </see>
                <see>
                    PermissionCollection                    
                </see>
                <see>
                    AllPermission                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="permsMap" type="Map&lt;Class&lt;?&gt;,PermissionCollection&gt;" line="85"/>
            <javadoc line="85">
                Key is permissions Class, value is PermissionCollection for that class.
                  Not serialized; see serialization section at end of class.                
            </javadoc>
            <declaration name="hasUnresolved" type="boolean" line="93"/>
            <declaration name="allPermission" type="PermissionCollection" line="97"/>
            <javadoc line="99">
                Creates a new Permissions object containing no PermissionCollections.                
            </javadoc>
            <method name="Permissions" type="constructor" line="102"/>
            <javadoc line="107">
                Adds a permission object to the PermissionCollection for the class the
                  permission belongs to. For example, if &lt;i&gt;permission&lt;/i&gt; is a
                  FilePermission, it is added to the FilePermissionCollection stored
                  in this Permissions object.
                  This method creates
                  a new PermissionCollection object (and adds the permission to it)
                  if an appropriate collection does not yet exist. &lt;p&gt;                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    SecurityException if this Permissions object is
                      marked as readonly.                    
                </exception>
                <see>
                    PermissionCollection#isReadOnly()                    
                </see>
            </javadoc>
            <method name="add" type="void" line="125">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="138">
                    No sync; staleness -&gt; optimizations delayed, which is OK                    
                </comment>
                <declaration name="pc" type="PermissionCollection" line="130"/>
                <scope line="132"/>
                <scope line="138"/>
                <scope line="141"/>
            </method>
            <javadoc line="146">
                Checks to see if this object&apos;s PermissionCollection for permissions of
                  the specified permission&apos;s class implies the permissions
                  expressed in the &lt;i&gt;permission&lt;/i&gt; object. Returns true if the
                  combination of permissions in the appropriate PermissionCollection
                  (e.g., a FilePermissionCollection for a FilePermission) together
                  imply the specified permission.
                  &lt;p&gt;For example, suppose there is a FilePermissionCollection in this
                  Permissions object, and it contains one FilePermission that specifies
                  &quot;read&quot; access for  all files in all subdirectories of the &quot;/tmp&quot;
                  directory, and another FilePermission that specifies &quot;write&quot; access
                  for all files in the &quot;/tmp/scratch/foo&quot; directory.
                  Then if the &lt;code&gt;implies&lt;/code&gt; method
                  is called with a permission specifying both &quot;read&quot; and &quot;write&quot; access
                  to files in the &quot;/tmp/scratch/foo&quot; directory, &lt;code&gt;true&lt;/code&gt; is
                  returned.
                  &lt;p&gt;Additionally, if this PermissionCollection contains the
                  AllPermission, this method will always return true.
                  &lt;p&gt;                
                <param>
                    permission the Permission object to check.                    
                </param>
                <return>
                    true if &quot;permission&quot; is implied by the permissions in the
                      PermissionCollection it
                      belongs to, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="174">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="176">
                    No sync; staleness -&gt; skip optimization, which is OK                    
                </comment>
                <comment line="178">
                    AllPermission has already been added                    
                </comment>
                <comment line="186">
                    none found                    
                </comment>
                <scope line="176"/>
                <scope line="178">
                    <scope line="179">
                        <declaration name="pc" type="PermissionCollection" line="180"/>
                        <scope line="182"/>
                        <scope line="184"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="192">
                Returns an enumeration of all the Permission objects in all the
                  PermissionCollections in this Permissions object.                
                <return>
                    an enumeration of all the Permissions.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration<Permission>" line="199">
                <comment line="201">
                    go through each Permissions in the hash table
                     and call their elements() function.                    
                </comment>
                <scope line="203"/>
            </method>
            <javadoc line="208">
                Gets the PermissionCollection in this Permissions object for
                  permissions whose type is the same as that of &lt;i&gt;p&lt;/i&gt;.
                  For example, if &lt;i&gt;p&lt;/i&gt; is a FilePermission,
                  the FilePermissionCollection
                  stored in this Permissions object will be returned.
                  If createEmpty is true,
                  this method creates a new PermissionCollection object for the specified
                  type of permission objects if one does not yet exist.
                  To do so, it first calls the &lt;code&gt;newPermissionCollection&lt;/code&gt; method
                  on &lt;i&gt;p&lt;/i&gt;.  Subclasses of class Permission
                  override that method if they need to store their permissions in a
                  particular PermissionCollection object in order to provide the
                  correct semantics when the &lt;code&gt;PermissionCollection.implies&lt;/code&gt;
                  method is called.
                  If the call returns a PermissionCollection, that collection is stored
                  in this Permissions object. If the call returns null and createEmpty
                  is true, then
                  this method instantiates and stores a default PermissionCollection
                  that uses a hashtable to store its permission objects.
                  createEmpty is ignored when creating empty PermissionCollection
                  for unresolved permissions because of the overhead of determining the
                  PermissionCollection to use.
                  createEmpty should be set to false when this method is invoked from
                  implies() because it incurs the additional overhead of creating and
                  adding an empty PermissionCollection that will just return false.
                  It should be set to true when invoked from add().                
            </javadoc>
            <method name="getPermissionCollection" type="PermissionCollection" line="240">
                <params>
                    <param name="p" type="Permission"/>
                    <param name="createEmpty" type="boolean"/>
                </params>
                <comment line="250">
                    Check for unresolved permissions                    
                </comment>
                <comment line="253">
                    if still null, create a new collection                    
                </comment>
                <comment line="258">
                    still no PermissionCollection?
                     We&apos;ll give them a PermissionsHash.                    
                </comment>
                <declaration name="c" type="Class" line="241"/>
                <declaration name="pc" type="PermissionCollection" line="243"/>
                <scope line="245"/>
                <scope line="247">
                    <scope line="253"/>
                    <scope line="263"/>
                </scope>
            </method>
            <javadoc line="270">
                Resolves any unresolved permissions of type p.                
                <param>
                    p the type of unresolved permission to resolve                    
                </param>
                <return>
                    PermissionCollection containing the unresolved permissions,
                      or null if there were no unresolved permissions of type p.                    
                </return>
            </javadoc>
            <method name="getUnresolvedPermissions" type="PermissionCollection" line="280">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <comment line="282">
                    Called from within synchronized method so permsMap doesn&apos;t need lock                    
                </comment>
                <comment line="287">
                    we have no unresolved permissions if uc is null                    
                </comment>
                <comment line="294">
                    we have no unresolved permissions of this type if unresolvedPerms is null                    
                </comment>
                <declaration name="uc" type="UnresolvedPermissionCollection" line="283"/>
                <declaration name="unresolvedPerms" type="List&lt;UnresolvedPermission&gt;" line="290"/>
                <declaration name="certs" type="java.security.cert.Certificate" line="297"/>
                <declaration name="signers" type="Object" line="299"/>
                <declaration name="n" type="int" line="301"/>
                <scope line="302">
                    <scope line="303">
                        <scope line="304"/>
                    </scope>
                    <scope line="310">
                        <scope line="311"/>
                    </scope>
                </scope>
                <declaration name="pc" type="PermissionCollection" line="317"/>
                <scope line="318">
                    <declaration name="len" type="int" line="319"/>
                    <scope line="320">
                        <declaration name="up" type="UnresolvedPermission" line="321"/>
                        <declaration name="perm" type="Permission" line="322"/>
                        <scope line="323">
                            <scope line="324"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="336"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="342"/>
            <javadoc line="342">
                @serialField perms java.util.Hashtable
                  A table of the Permission classes and PermissionCollections.                
                <serialField>
                    allPermission java.security.PermissionCollection                    
                </serialField>
            </javadoc>
            <javadoc line="352">
                @serialData Default fields.                
            </javadoc>
            <method name="writeObject" type="void" line="360">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="356">
                    Writes the contents of the permsMap field out as a Hashtable for
                     serialization compatibility with earlier releases. allPermission
                     unchanged.                    
                </comment>
                <comment line="362">
                    Don&apos;t call out.defaultWriteObject()                    
                </comment>
                <comment line="364">
                    Copy perms into a Hashtable                    
                </comment>
                <comment line="366">
                    no sync; estimate                    
                </comment>
                <comment line="371">
                    Write out serializable fields                    
                </comment>
                <comment line="374">
                    no sync; staleness OK                    
                </comment>
                <declaration name="perms" type="Hashtable&lt;Class&lt;?&gt;,PermissionCollection&gt;" line="364"/>
                <scope line="366"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="371"/>
            </method>
            <method name="readObject" type="void" line="383">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="385">
                    Don&apos;t call defaultReadObject()                    
                </comment>
                <comment line="387">
                    Read in serialized fields                    
                </comment>
                <comment line="390">
                    Get allPermission                    
                </comment>
                <comment line="393">
                    Get permissions                    
                </comment>
                <comment line="399">
                    Set hasUnresolved                    
                </comment>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="387"/>
                <declaration name="perms" type="Hashtable&lt;Class&lt;?&gt;,PermissionCollection&gt;" line="393"/>
                <declaration name="uc" type="UnresolvedPermissionCollection" line="399"/>
            </method>
        </class>
        <class name="PermissionsEnumerator" line="405">
            <comment line="92">
                optimization. keep track of whether unresolved permissions need to be
                 checked                
            </comment>
            <comment line="96">
                optimization. keep track of the AllPermission collection
                 - package private for ProtectionDomain optimization                
            </comment>
            <comment line="339">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                 private Hashtable perms;                
            </comment>
            <comment line="379">
                Reads in a Hashtable of ClassPermissionCollections and saves them in the
                 permsMap field. Reads in allPermission.                
            </comment>
            <comment line="408">
                all the perms                
            </comment>
            <comment line="410">
                the current set                
            </comment>
            <comment line="418">
                No need to synchronize; caller should sync on object as required                
            </comment>
            <comment line="438">
                No need to synchronize; caller should sync on object as required                
            </comment>
            <comment line="548">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                 private Hashtable perms;                
            </comment>
            <comment line="582">
                Reads in a Hashtable of PermissionPermission and saves them in the
                 permsMap field.                
            </comment>
            <implements interface="Enumeration">
                <type_params>
                    <type_param name="Permission"/>
                </type_params>
            </implements>
            <declaration name="perms" type="Iterator&lt;PermissionCollection&gt;" line="408"/>
            <declaration name="permset" type="Enumeration&lt;Permission&gt;" line="410"/>
            <method name="PermissionsEnumerator" type="constructor" line="412">
                <params>
                    <param name="e" type="Iterator<PermissionCollection>"/>
                </params>
            </method>
            <method name="hasMoreElements" type="boolean" line="418">
                <comment line="420">
                    if we enter with permissionimpl null, we know
                     there are no more left.                    
                </comment>
                <comment line="426">
                    try to see if there are any left in the current one                    
                </comment>
                <comment line="431">
                    get the next one that has something in it...                    
                </comment>
                <comment line="434">
                    if it is null, we are done!                    
                </comment>
            </method>
            <method name="nextElement" type="Permission" line="438">
                <comment line="441">
                    hasMoreElements will update permset to the next permset
                     with something in it...                    
                </comment>
                <scope line="443"/>
                <scope line="445"/>
            </method>
            <method name="getNextEnumWithMore" type="Enumeration<Permission>" line="451">
                <scope line="452">
                    <declaration name="pc" type="PermissionCollection" line="453"/>
                    <declaration name="next" type="Enumeration&lt;Permission&gt;" line="454"/>
                </scope>
            </method>
        </class>
        <class name="PermissionsHash" line="463">
            <extends class="PermissionCollection"/>
            <comment line="92">
                optimization. keep track of whether unresolved permissions need to be
                 checked                
            </comment>
            <comment line="96">
                optimization. keep track of the AllPermission collection
                 - package private for ProtectionDomain optimization                
            </comment>
            <comment line="339">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                 private Hashtable perms;                
            </comment>
            <comment line="379">
                Reads in a Hashtable of ClassPermissionCollections and saves them in the
                 permsMap field. Reads in allPermission.                
            </comment>
            <comment line="408">
                all the perms                
            </comment>
            <comment line="410">
                the current set                
            </comment>
            <comment line="418">
                No need to synchronize; caller should sync on object as required                
            </comment>
            <comment line="438">
                No need to synchronize; caller should sync on object as required                
            </comment>
            <comment line="548">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                 private Hashtable perms;                
            </comment>
            <comment line="582">
                Reads in a Hashtable of PermissionPermission and saves them in the
                 permsMap field.                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="463">
                A PermissionsHash stores a homogeneous set of permissions in a hashtable.                
                <see>
                    Permission                    
                </see>
                <see>
                    Permissions                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="permsMap" type="Map&lt;Permission,Permission&gt;" line="478"/>
            <javadoc line="478">
                Key and value are (same) permissions objects.
                  Not serialized; see serialization section at end of class.                
            </javadoc>
            <javadoc line="484">
                Create an empty PermissionsHash object.                
            </javadoc>
            <method name="PermissionsHash" type="constructor" line="488"/>
            <javadoc line="492">
                Adds a permission to the PermissionsHash.                
                <param>
                    permission the Permission object to add.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="498">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="499"/>
            </method>
            <javadoc line="504">
                Check and see if this set of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    permission the Permission object to compare                    
                </param>
                <return>
                    true if &quot;permission&quot; is a proper subset of a permission in
                      the set, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="514">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="516">
                    attempt a fast lookup and implies. If that fails
                     then enumerate through all the permissions.                    
                </comment>
                <comment line="521">
                    If permission is found, then p.equals(permission)                    
                </comment>
                <scope line="517">
                    <declaration name="p" type="Permission" line="518"/>
                    <scope line="521">
                        <scope line="522"/>
                    </scope>
                    <scope line="527"/>
                </scope>
            </method>
            <javadoc line="533">
                Returns an enumeration of all the Permission objects in the container.                
                <return>
                    an enumeration of all the Permissions.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration<Permission>" line="539">
                <comment line="541">
                    Convert Iterator of Map values into an Enumeration                    
                </comment>
                <scope line="541"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="546"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="550"/>
            <javadoc line="550">
                @serialField perms java.util.Hashtable
                  A table of the Permissions (both key and value are same).                
            </javadoc>
            <javadoc line="558">
                @serialData Default fields.                
            </javadoc>
            <method name="writeObject" type="void" line="565">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="562">
                    Writes the contents of the permsMap field out as a Hashtable for
                     serialization compatibility with earlier releases.                    
                </comment>
                <comment line="567">
                    Don&apos;t call out.defaultWriteObject()                    
                </comment>
                <comment line="569">
                    Copy perms into a Hashtable                    
                </comment>
                <comment line="576">
                    Write out serializable fields                    
                </comment>
                <declaration name="perms" type="Hashtable&lt;Permission,Permission&gt;" line="569"/>
                <scope line="571"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="576"/>
            </method>
            <method name="readObject" type="void" line="586">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="588">
                    Don&apos;t call defaultReadObject()                    
                </comment>
                <comment line="590">
                    Read in serialized fields                    
                </comment>
                <comment line="593">
                    Get permissions                    
                </comment>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="590"/>
                <declaration name="perms" type="Hashtable&lt;Permission,Permission&gt;" line="593"/>
            </method>
        </class>
    </source>