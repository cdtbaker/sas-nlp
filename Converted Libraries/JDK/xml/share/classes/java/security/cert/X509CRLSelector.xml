<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.x509.CRLNumberExtension"/>
        <import package="sun.security.x509.X500Name"/>
        <class name="X509CRLSelector" line="39">
            <implements interface="CRLSelector"/>
            <javadoc line="39">
                A &lt;code&gt;CRLSelector&lt;/code&gt; that selects &lt;code&gt;X509CRLs&lt;/code&gt; that
                  match all specified criteria. This class is particularly useful when
                  selecting CRLs from a &lt;code&gt;CertStore&lt;/code&gt; to check revocation status
                  of a particular certificate.
                  &lt;p&gt;
                  When first constructed, an &lt;code&gt;X509CRLSelector&lt;/code&gt; has no criteria
                  enabled and each of the &lt;code&gt;get&lt;/code&gt; methods return a default
                  value (&lt;code&gt;null&lt;/code&gt;). Therefore, the {@link #match match} method
                  would return &lt;code&gt;true&lt;/code&gt; for any &lt;code&gt;X509CRL&lt;/code&gt;. Typically,
                  several criteria are enabled (by calling {@link #setIssuers setIssuers}or {@link #setDateAndTime setDateAndTime}, for instance) and then the
                  &lt;code&gt;X509CRLSelector&lt;/code&gt; is passed to{@link CertStore#getCRLs CertStore.getCRLs} or some similar
                  method.
                  &lt;p&gt;
                  Please refer to &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280:
                  Internet X.509 Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;
                  for definitions of the X.509 CRL fields and extensions mentioned below.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  Unless otherwise specified, the methods defined in this class are not
                  thread-safe. Multiple threads that need to access a single
                  object concurrently should synchronize amongst themselves and
                  provide the necessary locking. Multiple threads each manipulating
                  separate objects need not synchronize.                
                <see>
                    CRLSelector                    
                </see>
                <see>
                    X509CRL                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Steve Hanna                    
                </author>
            </javadoc>
            <scope line="75"/>
            <declaration name="debug" type="Debug" line="79"/>
            <declaration name="issuerNames" type="HashSet&lt;Object&gt;" line="80"/>
            <declaration name="issuerX500Principals" type="HashSet&lt;X500Principal&gt;" line="81"/>
            <declaration name="minCRL" type="BigInteger" line="82"/>
            <declaration name="maxCRL" type="BigInteger" line="83"/>
            <declaration name="dateAndTime" type="Date" line="84"/>
            <declaration name="certChecking" type="X509Certificate" line="85"/>
            <declaration name="skew" type="long" line="86"/>
            <javadoc line="88">
                Creates an &lt;code&gt;X509CRLSelector&lt;/code&gt;. Initially, no criteria are set
                  so any &lt;code&gt;X509CRL&lt;/code&gt; will match.                
            </javadoc>
            <method name="X509CRLSelector" type="constructor" line="92"/>
            <javadoc line="94">
                Sets the issuerNames criterion. The issuer distinguished name in the
                  &lt;code&gt;X509CRL&lt;/code&gt; must match at least one of the specified
                  distinguished names. If &lt;code&gt;null&lt;/code&gt;, any issuer distinguished name
                  will do.
                  &lt;p&gt;
                  This method allows the caller to specify, with a single method call,
                  the complete set of issuer names which &lt;code&gt;X509CRLs&lt;/code&gt; may contain.
                  The specified value replaces the previous value for the issuerNames
                  criterion.
                  &lt;p&gt;
                  The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a
                  &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;X500Principal&lt;/code&gt;s.
                  &lt;p&gt;
                  Note that the &lt;code&gt;names&lt;/code&gt; parameter can contain duplicate
                  distinguished names, but they may be removed from the
                  &lt;code&gt;Collection&lt;/code&gt; of names returned by the{@link #getIssuers getIssuers} method.
                  &lt;p&gt;
                  Note that a copy is performed on the &lt;code&gt;Collection&lt;/code&gt; to
                  protect against subsequent modifications.                
                <param>
                    issuers a <code>Collection</code> of X500Principals
                      (or <code>null</code>)                    
                </param>
                <see>
                    #getIssuers                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setIssuers" type="void" line="121">
                <params>
                    <param name="issuers" type="Collection<X500Principal>"/>
                </params>
                <comment line="127">
                    clone                    
                </comment>
                <scope line="122"/>
                <scope line="125">
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="135">
                &lt;strong&gt;Note:&lt;/strong&gt; use {@linkplain #setIssuers(Collection)} instead
                  or only specify the byte array form of distinguished names when using
                  this method. See {@link #addIssuerName(String)} for more information.
                  &lt;p&gt;
                  Sets the issuerNames criterion. The issuer distinguished name in the
                  &lt;code&gt;X509CRL&lt;/code&gt; must match at least one of the specified
                  distinguished names. If &lt;code&gt;null&lt;/code&gt;, any issuer distinguished name
                  will do.
                  &lt;p&gt;
                  This method allows the caller to specify, with a single method call,
                  the complete set of issuer names which &lt;code&gt;X509CRLs&lt;/code&gt; may contain.
                  The specified value replaces the previous value for the issuerNames
                  criterion.
                  &lt;p&gt;
                  The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a
                  &lt;code&gt;Collection&lt;/code&gt; of names. Each name is a &lt;code&gt;String&lt;/code&gt;
                  or a byte array representing a distinguished name (in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt; or
                  ASN.1 DER encoded form, respectively). If &lt;code&gt;null&lt;/code&gt; is supplied
                  as the value for this argument, no issuerNames check will be performed.
                  &lt;p&gt;
                  Note that the &lt;code&gt;names&lt;/code&gt; parameter can contain duplicate
                  distinguished names, but they may be removed from the
                  &lt;code&gt;Collection&lt;/code&gt; of names returned by the{@link #getIssuerNames getIssuerNames} method.
                  &lt;p&gt;
                  If a name is specified as a byte array, it should contain a single DER
                  encoded distinguished name, as defined in X.501. The ASN.1 notation for
                  this structure is as follows.
                  &lt;pre&gt;&lt;code&gt;
                  Name ::= CHOICE {
                  RDNSequence }
                  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
                  RelativeDistinguishedName ::=
                  SET SIZE (1 .. MAX) OF AttributeTypeAndValue
                  AttributeTypeAndValue ::= SEQUENCE {
                  type     AttributeType,
                  value    AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
                  ....
                  DirectoryString ::= CHOICE {
                  teletexString           TeletexString (SIZE (1..MAX)),
                  printableString         PrintableString (SIZE (1..MAX)),
                  universalString         UniversalString (SIZE (1..MAX)),
                  utf8String              UTF8String (SIZE (1.. MAX)),
                  bmpString               BMPString (SIZE (1..MAX)) }
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  Note that a deep copy is performed on the &lt;code&gt;Collection&lt;/code&gt; to
                  protect against subsequent modifications.                
                <param>
                    names a <code>Collection</code> of names (or <code>null</code>)                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
                <see>
                    #getIssuerNames                    
                </see>
            </javadoc>
            <method name="setIssuerNames" type="void" line="197">
                <params>
                    <param name="names" type="Collection<?>"/>
                </params>
                <comment line="204">
                    Ensure that we either set both of these or neither                    
                </comment>
                <scope line="198"/>
                <scope line="201">
                    <declaration name="tempNames" type="HashSet&lt;Object&gt;" line="202"/>
                </scope>
            </method>
            <javadoc line="209">
                Adds a name to the issuerNames criterion. The issuer distinguished
                  name in the &lt;code&gt;X509CRL&lt;/code&gt; must match at least one of the specified
                  distinguished names.
                  &lt;p&gt;
                  This method allows the caller to add a name to the set of issuer names
                  which &lt;code&gt;X509CRLs&lt;/code&gt; may contain. The specified name is added to
                  any previous value for the issuerNames criterion.
                  If the specified name is a duplicate, it may be ignored.                
                <param>
                    issuer the issuer as X500Principal                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="addIssuer" type="void" line="222">
                <params>
                    <param name="issuer" type="X500Principal"/>
                </params>
            </method>
            <javadoc line="226">
                &lt;strong&gt;Denigrated&lt;/strong&gt;, use{@linkplain #addIssuer(X500Principal)} or{@linkplain #addIssuerName(byte[])} instead. This method should not be
                  relied on as it can fail to match some CRLs because of a loss of
                  encoding information in the RFC 2253 String form of some distinguished
                  names.
                  &lt;p&gt;
                  Adds a name to the issuerNames criterion. The issuer distinguished
                  name in the &lt;code&gt;X509CRL&lt;/code&gt; must match at least one of the specified
                  distinguished names.
                  &lt;p&gt;
                  This method allows the caller to add a name to the set of issuer names
                  which &lt;code&gt;X509CRLs&lt;/code&gt; may contain. The specified name is added to
                  any previous value for the issuerNames criterion.
                  If the specified name is a duplicate, it may be ignored.                
                <param>
                    name the name in RFC 2253 form                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="addIssuerName" type="void" line="246">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="250">
                Adds a name to the issuerNames criterion. The issuer distinguished
                  name in the &lt;code&gt;X509CRL&lt;/code&gt; must match at least one of the specified
                  distinguished names.
                  &lt;p&gt;
                  This method allows the caller to add a name to the set of issuer names
                  which &lt;code&gt;X509CRLs&lt;/code&gt; may contain. The specified name is added to
                  any previous value for the issuerNames criterion. If the specified name
                  is a duplicate, it may be ignored.
                  If a name is specified as a byte array, it should contain a single DER
                  encoded distinguished name, as defined in X.501. The ASN.1 notation for
                  this structure is as follows.
                  &lt;p&gt;
                  The name is provided as a byte array. This byte array should contain
                  a single DER encoded distinguished name, as defined in X.501. The ASN.1
                  notation for this structure appears in the documentation for{@link #setIssuerNames setIssuerNames(Collection names)}.
                  &lt;p&gt;
                  Note that the byte array supplied here is cloned to protect against
                  subsequent modifications.                
                <param>
                    name a byte array containing the name in ASN.1 DER encoded form                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="addIssuerName" type="void" line="274">
                <params>
                    <param name="name" type="byte[]"/>
                </params>
                <comment line="276">
                    clone because byte arrays are modifiable                    
                </comment>
            </method>
            <javadoc line="279">
                A private method that adds a name (String or byte array) to the
                  issuerNames criterion. The issuer distinguished
                  name in the &lt;code&gt;X509CRL&lt;/code&gt; must match at least one of the specified
                  distinguished names.                
                <param>
                    name the name in string or byte array form                    
                </param>
                <param>
                    principal the name in X500Principal form                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="addIssuerNameInternal" type="void" line="289">
                <params>
                    <param name="name" type="Object"/>
                    <param name="principal" type="X500Principal"/>
                </params>
                <scope line="290"/>
                <scope line="293"/>
            </method>
            <javadoc line="300">
                Clone and check an argument of the form passed to
                  setIssuerNames. Throw an IOException if the argument is malformed.                
                <param>
                    names a <code>Collection</code> of names. Each entry is a
                      String or a byte array (the name, in string or ASN.1
                      DER encoded form, respectively). <code>null</code> is
                      not an acceptable value.                    
                </param>
                <return>
                    a deep copy of the specified <code>Collection</code>                    
                </return>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="cloneAndCheckIssuerNames" type="HashSet<Object>" line="313">
                <params>
                    <param name="names" type="Collection<?>"/>
                </params>
                <declaration name="namesCopy" type="HashSet&lt;Object&gt;" line="314"/>
                <declaration name="i" type="Iterator&lt;?&gt;" line="315"/>
                <scope line="316">
                    <declaration name="nameObject" type="Object" line="317"/>
                </scope>
            </method>
            <javadoc line="329">
                Clone an argument of the form passed to setIssuerNames.
                  Throw a RuntimeException if the argument is malformed.
                  &lt;p&gt;
                  This method wraps cloneAndCheckIssuerNames, changing any IOException
                  into a RuntimeException. This method should be used when the object being
                  cloned has already been checked, so there should never be any exceptions.                
                <param>
                    names a <code>Collection</code> of names. Each entry is a
                      String or a byte array (the name, in string or ASN.1
                      DER encoded form, respectively). <code>null</code> is
                      not an acceptable value.                    
                </param>
                <return>
                    a deep copy of the specified <code>Collection</code>                    
                </return>
                <throws>
                    RuntimeException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="cloneIssuerNames" type="HashSet<Object>" line="344">
                <params>
                    <param name="names" type="Collection<Object>"/>
                </params>
                <scope line="345"/>
                <scope line="347"/>
            </method>
            <javadoc line="352">
                Parse an argument of the form passed to setIssuerNames,
                  returning a Collection of issuerX500Principals.
                  Throw an IOException if the argument is malformed.                
                <param>
                    names a <code>Collection</code> of names. Each entry is a
                      String or a byte array (the name, in string or ASN.1
                      DER encoded form, respectively). <Code>Null</Code> is
                      not an acceptable value.                    
                </param>
                <return>
                    a HashSet of issuerX500Principals                    
                </return>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="parseIssuerNames" type="HashSet<X500Principal>" line="365">
                <params>
                    <param name="names" type="Collection<Object>"/>
                </params>
                <declaration name="x500Principals" type="HashSet&lt;X500Principal&gt;" line="366"/>
                <scope line="367">
                    <declaration name="nameObject" type="Object" line="368"/>
                    <scope line="369"/>
                    <scope line="371">
                        <scope line="372"/>
                        <scope line="374"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="382">
                Sets the minCRLNumber criterion. The &lt;code&gt;X509CRL&lt;/code&gt; must have a
                  CRL number extension whose value is greater than or equal to the
                  specified value. If &lt;code&gt;null&lt;/code&gt;, no minCRLNumber check will be
                  done.                
                <param>
                    minCRL the minimum CRL number accepted (or <code>null</code>)                    
                </param>
            </javadoc>
            <method name="setMinCRLNumber" type="void" line="390">
                <params>
                    <param name="minCRL" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="394">
                Sets the maxCRLNumber criterion. The &lt;code&gt;X509CRL&lt;/code&gt; must have a
                  CRL number extension whose value is less than or equal to the
                  specified value. If &lt;code&gt;null&lt;/code&gt;, no maxCRLNumber check will be
                  done.                
                <param>
                    maxCRL the maximum CRL number accepted (or <code>null</code>)                    
                </param>
            </javadoc>
            <method name="setMaxCRLNumber" type="void" line="402">
                <params>
                    <param name="maxCRL" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="406">
                Sets the dateAndTime criterion. The specified date must be
                  equal to or later than the value of the thisUpdate component
                  of the &lt;code&gt;X509CRL&lt;/code&gt; and earlier than the value of the
                  nextUpdate component. There is no match if the &lt;code&gt;X509CRL&lt;/code&gt;
                  does not contain a nextUpdate component.
                  If &lt;code&gt;null&lt;/code&gt;, no dateAndTime check will be done.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Date&lt;/code&gt; supplied here is cloned to protect
                  against subsequent modifications.                
                <param>
                    dateAndTime the <code>Date</code> to match against
                      (or <code>null</code>)                    
                </param>
                <see>
                    #getDateAndTime                    
                </see>
            </javadoc>
            <method name="setDateAndTime" type="void" line="421">
                <params>
                    <param name="dateAndTime" type="Date"/>
                </params>
            </method>
            <javadoc line="429">
                Sets the dateAndTime criterion and allows for the specified clock skew
                  (in milliseconds) when checking against the validity period of the CRL.                
            </javadoc>
            <method name="setDateAndTime" type="void" line="433">
                <params>
                    <param name="dateAndTime" type="Date"/>
                    <param name="skew" type="long"/>
                </params>
            </method>
            <javadoc line="439">
                Sets the certificate being checked. This is not a criterion. Rather,
                  it is optional information that may help a &lt;code&gt;CertStore&lt;/code&gt;
                  find CRLs that would be relevant when checking revocation for the
                  specified certificate. If &lt;code&gt;null&lt;/code&gt; is specified, then no
                  such optional information is provided.                
                <param>
                    cert the <code>X509Certificate</code> being checked
                      (or <code>null</code>)                    
                </param>
                <see>
                    #getCertificateChecking                    
                </see>
            </javadoc>
            <method name="setCertificateChecking" type="void" line="450">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
            </method>
            <javadoc line="454">
                Returns the issuerNames criterion. The issuer distinguished
                  name in the &lt;code&gt;X509CRL&lt;/code&gt; must match at least one of the specified
                  distinguished names. If the value returned is &lt;code&gt;null&lt;/code&gt;, any
                  issuer distinguished name will do.
                  &lt;p&gt;
                  If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a
                  unmodifiable &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;X500Principal&lt;/code&gt;s.                
                <return>
                    an unmodifiable <code>Collection</code> of names
                      (or <code>null</code>)                    
                </return>
                <see>
                    #setIssuers                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getIssuers" type="Collection<X500Principal>" line="468">
                <scope line="469"/>
            </method>
            <javadoc line="475">
                Returns a copy of the issuerNames criterion. The issuer distinguished
                  name in the &lt;code&gt;X509CRL&lt;/code&gt; must match at least one of the specified
                  distinguished names. If the value returned is &lt;code&gt;null&lt;/code&gt;, any
                  issuer distinguished name will do.
                  &lt;p&gt;
                  If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a
                  &lt;code&gt;Collection&lt;/code&gt; of names. Each name is a &lt;code&gt;String&lt;/code&gt;
                  or a byte array representing a distinguished name (in RFC 2253 or
                  ASN.1 DER encoded form, respectively).  Note that the
                  &lt;code&gt;Collection&lt;/code&gt; returned may contain duplicate names.
                  &lt;p&gt;
                  If a name is specified as a byte array, it should contain a single DER
                  encoded distinguished name, as defined in X.501. The ASN.1 notation for
                  this structure is given in the documentation for{@link #setIssuerNames setIssuerNames(Collection names)}.
                  &lt;p&gt;
                  Note that a deep copy is performed on the &lt;code&gt;Collection&lt;/code&gt; to
                  protect against subsequent modifications.                
                <return>
                    a <code>Collection</code> of names (or <code>null</code>)                    
                </return>
                <see>
                    #setIssuerNames                    
                </see>
            </javadoc>
            <method name="getIssuerNames" type="Collection<Object>" line="498">
                <scope line="499"/>
            </method>
            <javadoc line="505">
                Returns the minCRLNumber criterion. The &lt;code&gt;X509CRL&lt;/code&gt; must have a
                  CRL number extension whose value is greater than or equal to the
                  specified value. If &lt;code&gt;null&lt;/code&gt;, no minCRLNumber check will be done.                
                <return>
                    the minimum CRL number accepted (or <code>null</code>)                    
                </return>
            </javadoc>
            <method name="getMinCRL" type="BigInteger" line="512"/>
            <javadoc line="516">
                Returns the maxCRLNumber criterion. The &lt;code&gt;X509CRL&lt;/code&gt; must have a
                  CRL number extension whose value is less than or equal to the
                  specified value. If &lt;code&gt;null&lt;/code&gt;, no maxCRLNumber check will be
                  done.                
                <return>
                    the maximum CRL number accepted (or <code>null</code>)                    
                </return>
            </javadoc>
            <method name="getMaxCRL" type="BigInteger" line="524"/>
            <javadoc line="528">
                Returns the dateAndTime criterion. The specified date must be
                  equal to or later than the value of the thisUpdate component
                  of the &lt;code&gt;X509CRL&lt;/code&gt; and earlier than the value of the
                  nextUpdate component. There is no match if the
                  &lt;code&gt;X509CRL&lt;/code&gt; does not contain a nextUpdate component.
                  If &lt;code&gt;null&lt;/code&gt;, no dateAndTime check will be done.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Date&lt;/code&gt; returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    the <code>Date</code> to match against (or <code>null</code>)                    
                </return>
                <see>
                    #setDateAndTime                    
                </see>
            </javadoc>
            <method name="getDateAndTime" type="Date" line="542"/>
            <javadoc line="548">
                Returns the certificate being checked. This is not a criterion. Rather,
                  it is optional information that may help a &lt;code&gt;CertStore&lt;/code&gt;
                  find CRLs that would be relevant when checking revocation for the
                  specified certificate. If the value returned is &lt;code&gt;null&lt;/code&gt;, then
                  no such optional information is provided.                
                <return>
                    the certificate being checked (or <code>null</code>)                    
                </return>
                <see>
                    #setCertificateChecking                    
                </see>
            </javadoc>
            <method name="getCertificateChecking" type="X509Certificate" line="558"/>
            <javadoc line="562">
                Returns a printable representation of the &lt;code&gt;X509CRLSelector&lt;/code&gt;.                
                <return>
                    a <code>String</code> describing the contents of the
                      <code>X509CRLSelector</code>.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="568">
                <declaration name="sb" type="StringBuffer" line="569"/>
                <scope line="571">
                    <declaration name="i" type="Iterator&lt;Object&gt;" line="573"/>
                </scope>
            </method>
            <javadoc line="589">
                Decides whether a &lt;code&gt;CRL&lt;/code&gt; should be selected.                
                <param>
                    crl the <code>CRL</code> to be checked                    
                </param>
                <return>
                    <code>true</code> if the <code>CRL</code> should be selected,
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="match" type="boolean" line="596">
                <params>
                    <param name="crl" type="CRL"/>
                </params>
                <comment line="603">
                                        
                </comment>
                <comment line="623">
                                        
                </comment>
                <comment line="645">
                                        
                </comment>
                <comment line="655">
                                        
                </comment>
                <comment line="667">
                                        
                </comment>
                <scope line="597"/>
                <declaration name="xcrl" type="X509CRL" line="600"/>
                <scope line="603">
                    <declaration name="issuer" type="X500Principal" line="604"/>
                    <declaration name="i" type="Iterator&lt;X500Principal&gt;" line="605"/>
                    <declaration name="found" type="boolean" line="606"/>
                    <scope line="607">
                        <scope line="608"/>
                    </scope>
                    <scope line="612">
                        <scope line="613"/>
                    </scope>
                </scope>
                <scope line="621">
                    <declaration name="crlNumExtVal" type="byte[]" line="623"/>
                    <scope line="624">
                        <scope line="625"/>
                    </scope>
                    <declaration name="crlNum" type="BigInteger" line="629"/>
                    <scope line="630">
                        <declaration name="in" type="DerInputStream" line="631"/>
                        <declaration name="encoded" type="byte[]" line="632"/>
                        <declaration name="crlNumExt" type="CRLNumberExtension" line="633"/>
                    </scope>
                    <scope line="636">
                        <scope line="637"/>
                    </scope>
                    <scope line="645">
                        <scope line="646">
                            <scope line="647"/>
                        </scope>
                    </scope>
                    <scope line="655">
                        <scope line="656">
                            <scope line="657"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="667">
                    <declaration name="crlThisUpdate" type="Date" line="668"/>
                    <declaration name="nextUpdate" type="Date" line="669"/>
                    <scope line="670">
                        <scope line="671"/>
                    </scope>
                    <declaration name="nowPlusSkew" type="Date" line="676"/>
                    <declaration name="nowMinusSkew" type="Date" line="677"/>
                    <scope line="678"/>
                    <scope line="683">
                        <scope line="684"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="694">
                Returns a copy of this object.                
                <return>
                    the copy                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="699">
                <comment line="711">
                                        
                </comment>
                <scope line="700">
                    <declaration name="copy" type="X509CRLSelector" line="701"/>
                    <scope line="702"/>
                </scope>
                <scope line="709"/>
            </method>
        </class>
    </source>