<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.io.IOException"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.util.DerValue"/>
        <class name="PolicyQualifierInfo" line="5">
            <javadoc line="5">
                An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo
                  structure.
                  &lt;p&gt;The ASN.1 definition is as follows:
                  &lt;p&gt;&lt;pre&gt;
                  PolicyQualifierInfo ::= SEQUENCE {
                  policyQualifierId       PolicyQualifierId,
                  qualifier               ANY DEFINED BY policyQualifierId }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  A certificate policies extension, if present in an X.509 version 3
                  certificate, contains a sequence of one or more policy information terms,
                  each of which consists of an object identifier (OID) and optional
                  qualifiers. In an end-entity certificate, these policy information terms
                  indicate the policy under which the certificate has been issued and the
                  purposes for which the certificate may be used. In a CA certificate, these
                  policy information terms limit the set of policies for certification paths
                  which include this certificate.
                  &lt;p&gt;
                  A &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects are returned
                  by the {@link PolicyNode#getPolicyQualifiers PolicyNode.getPolicyQualifiers}method. This allows applications with specific policy requirements to
                  process and validate each policy qualifier. Applications that need to
                  process policy qualifiers should explicitly set the
                  &lt;code&gt;policyQualifiersRejected&lt;/code&gt; flag to false (by calling the{@link PKIXParameters#setPolicyQualifiersRejectedPKIXParameters} method) before validating
                  a certification path.
                  &lt;p&gt;Note that the PKIX certification path validation algorithm specifies
                  that any policy qualifier in a certificate policies extension that is
                  marked critical must be processed and validated. Otherwise the
                  certification path must be rejected. If the
                  &lt;code&gt;policyQualifiersRejected&lt;/code&gt; flag is set to false, it is up to
                  the application to validate all policy qualifiers in this manner in order
                  to be PKIX compliant.
                  &lt;p&gt;&lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;All &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects must be immutable and
                  thread-safe. That is, multiple threads may concurrently invoke the
                  methods defined in this class on a single &lt;code&gt;PolicyQualifierInfo&lt;/code&gt;
                  object (or more than one) with no ill effects. Requiring
                  &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects to be immutable and thread-safe
                  allows them to be passed around to various pieces of code without
                  worrying about coordinating access.                
                <author>
                    seth proctor                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="mEncoded" type="byte[]" line="50"/>
            <declaration name="mId" type="String" line="51"/>
            <declaration name="mData" type="byte[]" line="52"/>
            <declaration name="pqiString" type="String" line="53"/>
            <javadoc line="54">
                Creates an instance of &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; from the
                  encoded bytes. The encoded byte array is copied on construction.                
                <param>
                    encoded a byte array containing the qualifier in DER encoding                    
                </param>
                <exception>
                    IOException thrown if the byte array does not represent a
                      valid and parsable policy qualifier                    
                </exception>
            </javadoc>
            <method name="PolicyQualifierInfo" type="constructor" line="61">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
                <declaration name="val" type="DerValue" line="63"/>
                <declaration name="tmp" type="byte[]" line="66"/>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <javadoc line="75">
                Returns the &lt;code&gt;policyQualifierId&lt;/code&gt; field of this
                  &lt;code&gt;PolicyQualifierInfo&lt;/code&gt;. The &lt;code&gt;policyQualifierId&lt;/code&gt;
                  is an Object Identifier (OID) represented by a set of nonnegative
                  integers separated by periods.                
                <return>
                    the OID (never &lt;code&gt;null&lt;/code&gt;)                    
                </return>
            </javadoc>
            <method name="getPolicyQualifierId" type="String" line="82"/>
            <javadoc line="85">
                Returns the ASN.1 DER encoded form of this
                  &lt;code&gt;PolicyQualifierInfo&lt;/code&gt;.                
                <return>
                    the ASN.1 DER encoded bytes (never &lt;code&gt;null&lt;/code&gt;).
                      Note that a copy is returned, so the data is cloned each time
                      this method is called.                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="92"/>
            <javadoc line="95">
                Returns the ASN.1 DER encoded form of the &lt;code&gt;qualifier&lt;/code&gt;
                  field of this &lt;code&gt;PolicyQualifierInfo&lt;/code&gt;.                
                <return>
                    the ASN.1 DER encoded bytes of the &lt;code&gt;qualifier&lt;/code&gt;
                      field. Note that a copy is returned, so the data is cloned each
                      time this method is called.                    
                </return>
            </javadoc>
            <method name="getPolicyQualifier" type="byte[]" line="102"/>
            <javadoc line="105">
                Return a printable representation of this
                  &lt;code&gt;PolicyQualifierInfo&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; describing the contents of this
                      &lt;code&gt;PolicyQualifierInfo&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="111">
                <declaration name="enc" type="HexDumpEncoder" line="113"/>
                <declaration name="sb" type="StringBuffer" line="114"/>
            </method>
        </class>
    </source>