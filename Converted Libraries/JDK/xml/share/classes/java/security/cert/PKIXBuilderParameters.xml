<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.security.KeyStore"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.InvalidParameterException"/>
        <import package="java.util.Set"/>
        <class name="PKIXBuilderParameters" line="7">
            <extends class="PKIXParameters"/>
            <javadoc line="7">
                Parameters used as input for the PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt;
                  algorithm.
                  &lt;p&gt;
                  A PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; uses these parameters to {@link CertPathBuilder#build build} a &lt;code&gt;CertPath&lt;/code&gt; which has been
                  validated according to the PKIX certification path validation algorithm.
                  &lt;p&gt;To instantiate a &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; object, an
                  application must specify one or more &lt;i&gt;most-trusted CAs&lt;/i&gt; as defined by
                  the PKIX certification path validation algorithm. The most-trusted CA
                  can be specified using one of two constructors. An application
                  can call {@link #PKIXBuilderParameters(Set,CertSelector)PKIXBuilderParameters(Set, CertSelector)}, specifying a
                  &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;TrustAnchor&lt;/code&gt; objects, each of which
                  identifies a most-trusted CA. Alternatively, an application can call{@link #PKIXBuilderParameters(KeyStore,CertSelector)PKIXBuilderParameters(KeyStore, CertSelector)}, specifying a
                  &lt;code&gt;KeyStore&lt;/code&gt; instance containing trusted certificate entries, each
                  of which will be considered as a most-trusted CA.
                  &lt;p&gt;In addition, an application must specify constraints on the target
                  certificate that the &lt;code&gt;CertPathBuilder&lt;/code&gt; will attempt
                  to build a path to. The constraints are specified as a
                  &lt;code&gt;CertSelector&lt;/code&gt; object. These constraints should provide the
                  &lt;code&gt;CertPathBuilder&lt;/code&gt; with enough search criteria to find the target
                  certificate. Minimal criteria for an &lt;code&gt;X509Certificate&lt;/code&gt; usually
                  include the subject name and/or one or more subject alternative names.
                  If enough criteria is not specified, the &lt;code&gt;CertPathBuilder&lt;/code&gt;
                  may throw a &lt;code&gt;CertPathBuilderException&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  Unless otherwise specified, the methods defined in this class are not
                  thread-safe. Multiple threads that need to access a single
                  object concurrently should synchronize amongst themselves and
                  provide the necessary locking. Multiple threads each manipulating
                  separate objects need not synchronize.                
                <see>
                    CertPathBuilder                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
            </javadoc>
            <declaration name="maxPathLength" type="int" line="44"/>
            <javadoc line="45">
                Creates an instance of &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; with
                  the specified &lt;code&gt;Set&lt;/code&gt; of most-trusted CAs.
                  Each element of the set is a {@link TrustAnchor TrustAnchor}.
                  &lt;p&gt;Note that the &lt;code&gt;Set&lt;/code&gt; is copied to protect against
                  subsequent modifications.                
                <param>
                    trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s                    
                </param>
                <param>
                    targetConstraints a <code>CertSelector</code> specifying the
                      constraints on the target certificate                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if <code>trustAnchors</code>
                      is empty <code>(trustAnchors.isEmpty() == true)</code>                    
                </throws>
                <throws>
                    NullPointerException if <code>trustAnchors</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    ClassCastException if any of the elements of
                      <code>trustAnchors</code> are not of type
                      <code>java.security.cert.TrustAnchor</code>                    
                </throws>
            </javadoc>
            <method name="PKIXBuilderParameters" type="constructor" line="62">
                <params>
                    <param name="trustAnchors" type="Set<TrustAnchor>"/>
                    <param name="targetConstraints" type="CertSelector"/>
                </params>
            </method>
            <javadoc line="66">
                Creates an instance of &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; that
                  populates the set of most-trusted CAs from the trusted
                  certificate entries contained in the specified &lt;code&gt;KeyStore&lt;/code&gt;.
                  Only keystore entries that contain trusted &lt;code&gt;X509Certificate&lt;/code&gt;s
                  are considered; all other certificate types are ignored.                
                <param>
                    keystore a <code>KeyStore</code> from which the set of
                      most-trusted CAs will be populated                    
                </param>
                <param>
                    targetConstraints a <code>CertSelector</code> specifying the
                      constraints on the target certificate                    
                </param>
                <throws>
                    KeyStoreException if <code>keystore</code> has not been
                      initialized                    
                </throws>
                <throws>
                    InvalidAlgorithmParameterException if <code>keystore</code> does
                      not contain at least one trusted certificate entry                    
                </throws>
                <throws>
                    NullPointerException if <code>keystore</code> is
                      <code>null</code>                    
                </throws>
            </javadoc>
            <method name="PKIXBuilderParameters" type="constructor" line="83">
                <params>
                    <param name="keystore" type="KeyStore"/>
                    <param name="targetConstraints" type="CertSelector"/>
                </params>
            </method>
            <javadoc line="87">
                Sets the value of the maximum number of non-self-issued intermediate
                  certificates that may exist in a certification path. A certificate
                  is self-issued if the DNs that appear in the subject and issuer
                  fields are identical and are not empty. Note that the last certificate
                  in a certification path is not an intermediate certificate, and is not
                  included in this limit. Usually the last certificate is an end entity
                  certificate, but it can be a CA certificate. A PKIX
                  &lt;code&gt;CertPathBuilder&lt;/code&gt; instance must not build
                  paths longer than the length specified.
                  &lt;p&gt; A value of 0 implies that the path can only contain
                  a single certificate. A value of -1 implies that the
                  path length is unconstrained (i.e. there is no maximum).
                  The default maximum path length, if not specified, is 5.
                  Setting a value less than -1 will cause an exception to be thrown.
                  &lt;p&gt; If any of the CA certificates contain the
                  &lt;code&gt;BasicConstraintsExtension&lt;/code&gt;, the value of the
                  &lt;code&gt;pathLenConstraint&lt;/code&gt; field of the extension overrides
                  the maximum path length parameter whenever the result is a
                  certification path of smaller length.                
                <param>
                    maxPathLength the maximum number of non-self-issued intermediate
                      certificates that may exist in a certification path                    
                </param>
                <throws>
                    InvalidParameterException if <code>maxPathLength</code> is set
                      to a value less than -1                    
                </throws>
                <see>
                    #getMaxPathLength                    
                </see>
            </javadoc>
            <method name="setMaxPathLength" type="void" line="113">
                <params>
                    <param name="maxPathLength" type="int"/>
                </params>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                Returns the value of the maximum number of intermediate non-self-issued
                  certificates that may exist in a certification path. See
                  the {@link #setMaxPathLength} method for more details.                
                <return>
                    the maximum number of non-self-issued intermediate certificates
                      that may exist in a certification path, or -1 if there is no limit                    
                </return>
                <see>
                    #setMaxPathLength                    
                </see>
            </javadoc>
            <method name="getMaxPathLength" type="int" line="127"/>
            <javadoc line="130">
                Returns a formatted string describing the parameters.                
                <return>
                    a formatted string describing the parameters                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="134">
                <declaration name="sb" type="StringBuffer" line="135"/>
            </method>
        </class>
    </source>