<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.io.IOException"/>
        <import package="java.security.PublicKey"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.x509.NameConstraintsExtension"/>
        <import package="sun.security.x509.X500Name"/>
        <class name="TrustAnchor" line="7">
            <javadoc line="7">
                A trust anchor or most-trusted Certification Authority (CA).
                  &lt;p&gt;
                  This class represents a &quot;most-trusted CA&quot;, which is used as a trust anchor
                  for validating X.509 certification paths. A most-trusted CA includes the
                  public key of the CA, the CA&apos;s name, and any constraints upon the set of
                  paths which may be validated using this key. These parameters can be
                  specified in the form of a trusted &lt;code&gt;X509Certificate&lt;/code&gt; or as
                  individual parameters.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  &lt;p&gt;All &lt;code&gt;TrustAnchor&lt;/code&gt; objects must be immutable and
                  thread-safe. That is, multiple threads may concurrently invoke the
                  methods defined in this class on a single &lt;code&gt;TrustAnchor&lt;/code&gt;
                  object (or more than one) with no ill effects. Requiring
                  &lt;code&gt;TrustAnchor&lt;/code&gt; objects to be immutable and thread-safe
                  allows them to be passed around to various pieces of code without
                  worrying about coordinating access. This stipulation applies to all
                  public fields and methods of this class and any added or overridden
                  by subclasses.                
                <see>
                    PKIXParameters#PKIXParameters(Set)                    
                </see>
                <see>
                    PKIXBuilderParameters#PKIXBuilderParameters(Set,CertSelector)                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
            </javadoc>
            <declaration name="pubKey" type="PublicKey" line="34"/>
            <declaration name="caName" type="String" line="35"/>
            <declaration name="caPrincipal" type="X500Principal" line="36"/>
            <declaration name="trustedCert" type="X509Certificate" line="37"/>
            <declaration name="ncBytes" type="byte[]" line="38"/>
            <declaration name="nc" type="NameConstraintsExtension" line="39"/>
            <javadoc line="40">
                Creates an instance of &lt;code&gt;TrustAnchor&lt;/code&gt; with the specified
                  &lt;code&gt;X509Certificate&lt;/code&gt; and optional name constraints, which
                  are intended to be used as additional constraints when validating
                  an X.509 certification path.
                  &lt;p&gt;
                  The name constraints are specified as a byte array. This byte array
                  should contain the DER encoded form of the name constraints, as they
                  would appear in the NameConstraints structure defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280&quot;&gt;RFC 3280&lt;/a&gt;
                  and X.509. The ASN.1 definition of this structure appears below.
                  &lt;pre&gt;&lt;code&gt;
                  NameConstraints ::= SEQUENCE {
                  permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
                  excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
                  GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
                  GeneralSubtree ::= SEQUENCE {
                  base                    GeneralName,
                  minimum         [0]     BaseDistance DEFAULT 0,
                  maximum         [1]     BaseDistance OPTIONAL }
                  BaseDistance ::= INTEGER (0..MAX)
                  GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  Note that the name constraints byte array supplied is cloned to protect
                  against subsequent modifications.                
                <param>
                    trustedCert a trusted &lt;code&gt;X509Certificate&lt;/code&gt;                    
                </param>
                <param>
                    nameConstraints a byte array containing the ASN.1 DER encoding of
                      a NameConstraints extension to be used for checking name constraints.
                      Only the value of the extension is included, not the OID or criticality
                      flag. Specify &lt;code&gt;null&lt;/code&gt; to omit the parameter.                    
                </param>
                <throws>
                    IllegalArgumentException if the name constraints cannot be
                      decoded                    
                </throws>
                <throws>
                    NullPointerException if the specified
                      &lt;code&gt;X509Certificate&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="TrustAnchor" type="constructor" line="85">
                <params>
                    <param name="trustedCert" type="X509Certificate"/>
                    <param name="nameConstraints" type="byte[]"/>
                </params>
            </method>
            <javadoc line="93">
                Creates an instance of &lt;code&gt;TrustAnchor&lt;/code&gt; where the
                  most-trusted CA is specified as an X500Principal and public key.
                  Name constraints are an optional parameter, and are intended to be used
                  as additional constraints when validating an X.509 certification path.
                  &lt;p&gt;
                  The name constraints are specified as a byte array. This byte array
                  contains the DER encoded form of the name constraints, as they
                  would appear in the NameConstraints structure defined in RFC 3280
                  and X.509. The ASN.1 notation for this structure is supplied in the
                  documentation for{@link #TrustAnchor(X509Certificate,byte[])TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
                  &lt;p&gt;
                  Note that the name constraints byte array supplied here is cloned to
                  protect against subsequent modifications.                
                <param>
                    caPrincipal the name of the most-trusted CA as X500Principal                    
                </param>
                <param>
                    pubKey the public key of the most-trusted CA                    
                </param>
                <param>
                    nameConstraints a byte array containing the ASN.1 DER encoding of
                      a NameConstraints extension to be used for checking name constraints.
                      Only the value of the extension is included, not the OID or criticality
                      flag. Specify &lt;code&gt;null&lt;/code&gt; to omit the parameter.                    
                </param>
                <throws>
                    NullPointerException if the specified &lt;code&gt;caPrincipal&lt;/code&gt; or
                      &lt;code&gt;pubKey&lt;/code&gt; parameter is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="TrustAnchor" type="constructor" line="117">
                <params>
                    <param name="caPrincipal" type="X500Principal"/>
                    <param name="pubKey" type="PublicKey"/>
                    <param name="nameConstraints" type="byte[]"/>
                </params>
                <scope line="118"/>
            </method>
            <javadoc line="127">
                Creates an instance of &lt;code&gt;TrustAnchor&lt;/code&gt; where the
                  most-trusted CA is specified as a distinguished name and public key.
                  Name constraints are an optional parameter, and are intended to be used
                  as additional constraints when validating an X.509 certification path.
                  &lt;p&gt;
                  The name constraints are specified as a byte array. This byte array
                  contains the DER encoded form of the name constraints, as they
                  would appear in the NameConstraints structure defined in RFC 3280
                  and X.509. The ASN.1 notation for this structure is supplied in the
                  documentation for{@link #TrustAnchor(X509Certificate,byte[])TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
                  &lt;p&gt;
                  Note that the name constraints byte array supplied here is cloned to
                  protect against subsequent modifications.                
                <param>
                    caName the X.500 distinguished name of the most-trusted CA in
                      &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;
                      &lt;code&gt;String&lt;/code&gt; format                    
                </param>
                <param>
                    pubKey the public key of the most-trusted CA                    
                </param>
                <param>
                    nameConstraints a byte array containing the ASN.1 DER encoding of
                      a NameConstraints extension to be used for checking name constraints.
                      Only the value of the extension is included, not the OID or criticality
                      flag. Specify &lt;code&gt;null&lt;/code&gt; to omit the parameter.                    
                </param>
                <throws>
                    IllegalArgumentException if the specified &lt;code&gt;
                      caName&lt;/code&gt; parameter is empty &lt;code&gt;(caName.length() == 0)&lt;/code&gt;
                      or incorrectly formatted or the name constraints cannot be decoded                    
                </throws>
                <throws>
                    NullPointerException if the specified &lt;code&gt;caName&lt;/code&gt; or
                      &lt;code&gt;pubKey&lt;/code&gt; parameter is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="TrustAnchor" type="constructor" line="155">
                <params>
                    <param name="caName" type="String"/>
                    <param name="pubKey" type="PublicKey"/>
                    <param name="nameConstraints" type="byte[]"/>
                </params>
            </method>
            <javadoc line="165">
                Returns the most-trusted CA certificate.                
                <return>
                    a trusted &lt;code&gt;X509Certificate&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;
                      if the trust anchor was not specified as a trusted certificate                    
                </return>
            </javadoc>
            <method name="getTrustedCert" type="X509Certificate" line="170"/>
            <javadoc line="173">
                Returns the name of the most-trusted CA as an X500Principal.                
                <return>
                    the X.500 distinguished name of the most-trusted CA, or
                      &lt;code&gt;null&lt;/code&gt; if the trust anchor was not specified as a trusted
                      public key and name or X500Principal pair                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getCA" type="X500Principal" line="180"/>
            <javadoc line="183">
                Returns the name of the most-trusted CA in RFC 2253 &lt;code&gt;String&lt;/code&gt;
                  format.                
                <return>
                    the X.500 distinguished name of the most-trusted CA, or
                      &lt;code&gt;null&lt;/code&gt; if the trust anchor was not specified as a trusted
                      public key and name or X500Principal pair                    
                </return>
            </javadoc>
            <method name="getCAName" type="String" line="190"/>
            <javadoc line="193">
                Returns the public key of the most-trusted CA.                
                <return>
                    the public key of the most-trusted CA, or &lt;code&gt;null&lt;/code&gt;
                      if the trust anchor was not specified as a trusted public key and name
                      or X500Principal pair                    
                </return>
            </javadoc>
            <method name="getCAPublicKey" type="PublicKey" line="199"/>
            <javadoc line="202">
                Decode the name constraints and clone them if not null.                
            </javadoc>
            <method name="setNameConstraints" type="void" line="205">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <scope line="206"/>
                <scope line="210">
                    <scope line="212"/>
                    <scope line="215">
                        <declaration name="iae" type="IllegalArgumentException" line="216"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="222">
                Returns the name constraints parameter. The specified name constraints
                  are associated with this trust anchor and are intended to be used
                  as additional constraints when validating an X.509 certification path.
                  &lt;p&gt;
                  The name constraints are returned as a byte array. This byte array
                  contains the DER encoded form of the name constraints, as they
                  would appear in the NameConstraints structure defined in RFC 3280
                  and X.509. The ASN.1 notation for this structure is supplied in the
                  documentation for{@link #TrustAnchor(X509Certificate,byte[])TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
                  &lt;p&gt;
                  Note that the byte array returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    a byte array containing the ASN.1 DER encoding of
                      a NameConstraints extension used for checking name constraints,
                      or &lt;code&gt;null&lt;/code&gt; if not set.                    
                </return>
            </javadoc>
            <method name="getNameConstraints" type="byte[]" line="239"/>
            <javadoc line="242">
                Returns a formatted string describing the &lt;code&gt;TrustAnchor&lt;/code&gt;.                
                <return>
                    a formatted string describing the &lt;code&gt;TrustAnchor&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="246">
                <declaration name="sb" type="StringBuffer" line="247"/>
                <scope line="249"/>
                <scope line="253"/>
            </method>
        </class>
    </source>