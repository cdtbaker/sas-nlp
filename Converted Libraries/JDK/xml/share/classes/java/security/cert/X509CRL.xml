<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.SignatureException"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PublicKey"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Date"/>
        <import package="java.util.Set"/>
        <import package="java.util.Arrays"/>
        <import package="sun.security.x509.X509CRLImpl"/>
        <class name="X509CRL" line="43">
            <extends class="CRL"/>
            <implements interface="X509Extension"/>
            <javadoc line="43">
                &lt;p&gt;
                  Abstract class for an X.509 Certificate Revocation List (CRL).
                  A CRL is a time-stamped list identifying revoked certificates.
                  It is signed by a Certificate Authority (CA) and made freely
                  available in a public repository.
                  &lt;p&gt;Each revoked certificate is
                  identified in a CRL by its certificate serial number. When a
                  certificate-using system uses a certificate (e.g., for verifying a
                  remote user&apos;s digital signature), that system not only checks the
                  certificate signature and validity but also acquires a suitably-
                  recent CRL and checks that the certificate serial number is not on
                  that CRL.  The meaning of &quot;suitably-recent&quot; may vary with local
                  policy, but it usually means the most recently-issued CRL.  A CA
                  issues a new CRL on a regular periodic basis (e.g., hourly, daily, or
                  weekly).  Entries are added to CRLs as revocations occur, and an
                  entry may be removed when the certificate expiration date is reached.
                  &lt;p&gt;
                  The X.509 v2 CRL format is described below in ASN.1:
                  &lt;pre&gt;
                  CertificateList  ::=  SEQUENCE  {
                  tbsCertList          TBSCertList,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signature            BIT STRING  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  More information can be found in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280: Internet X.509
                  Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.
                  &lt;p&gt;
                  The ASN.1 definition of &lt;code&gt;tbsCertList&lt;/code&gt; is:
                  &lt;pre&gt;
                  TBSCertList  ::=  SEQUENCE  {
                  version                 Version OPTIONAL,
                  -- if present, must be v2
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  thisUpdate              ChoiceOfTime,
                  nextUpdate              ChoiceOfTime OPTIONAL,
                  revokedCertificates     SEQUENCE OF SEQUENCE  {
                  userCertificate         CertificateSerialNumber,
                  revocationDate          ChoiceOfTime,
                  crlEntryExtensions      Extensions OPTIONAL
                  -- if present, must be v2
                  }  OPTIONAL,
                  crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                  -- if present, must be v2
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  CRLs are instantiated using a certificate factory. The following is an
                  example of how to instantiate an X.509 CRL:
                  &lt;pre&gt;&lt;code&gt;
                  InputStream inStream = null;
                  try {
                  inStream = new FileInputStream(&quot;fileName-of-crl&quot;);
                  CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);
                  X509CRL crl = (X509CRL)cf.generateCRL(inStream);
                  } finally {
                  if (inStream != null) {
                  inStream.close();
                  }
                  }
                  &lt;/code&gt;&lt;/pre&gt;                
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    CRL                    
                </see>
                <see>
                    CertificateFactory                    
                </see>
                <see>
                    X509Extension                    
                </see>
            </javadoc>
            <declaration name="issuerPrincipal" type="X500Principal" line="119"/>
            <javadoc line="121">
                Constructor for X.509 CRLs.                
            </javadoc>
            <method name="X509CRL" type="constructor" line="124"/>
            <javadoc line="128">
                Compares this CRL for equality with the given
                  object. If the &lt;code&gt;other&lt;/code&gt; object is an
                  &lt;code&gt;instanceof&lt;/code&gt; &lt;code&gt;X509CRL&lt;/code&gt;, then
                  its encoded form is retrieved and compared with the
                  encoded form of this CRL.                
                <param>
                    other the object to test for equality with this CRL.                    
                </param>
                <return>
                    true iff the encoded forms of the two CRLs
                      match, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="140">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="141"/>
                <scope line="144"/>
                <scope line="147">
                    <declaration name="thisCRL" type="byte[]" line="148"/>
                    <declaration name="otherCRL" type="byte[]" line="149"/>
                </scope>
                <scope line="152"/>
            </method>
            <javadoc line="157">
                Returns a hashcode value for this CRL from its
                  encoded form.                
                <return>
                    the hashcode value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="163">
                <declaration name="retval" type="int" line="164"/>
                <scope line="165">
                    <declaration name="crlData" type="byte[]" line="166"/>
                    <scope line="167"/>
                </scope>
                <scope line="171"/>
            </method>
            <method name="getEncoded" type="byte[]" line="176"/>
            <javadoc line="176">
                Returns the ASN.1 DER-encoded form of this CRL.                
                <return>
                    the encoded form of this certificate                    
                </return>
                <exception>
                    CRLException if an encoding error occurs.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="185"/>
            <javadoc line="185">
                Verifies that this CRL was signed using the
                  private key that corresponds to the given public key.                
                <param>
                    key the PublicKey used to carry out the verification.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException if there's no default provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CRLException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="203"/>
            <javadoc line="203">
                Verifies that this CRL was signed using the
                  private key that corresponds to the given public key.
                  This method uses the signature verification engine
                  supplied by the given provider.                
                <param>
                    key the PublicKey used to carry out the verification.                    
                </param>
                <param>
                    sigProvider the name of the signature provider.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException on incorrect provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CRLException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="getVersion" type="int" line="224"/>
            <javadoc line="224">
                Gets the &lt;code&gt;version&lt;/code&gt; (version number) value from the CRL.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  version    Version OPTIONAL,
                  -- if present, must be v2&lt;p&gt;
                  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
                  -- v3 does not apply to CRLs but appears for consistency
                  -- with definition of Version for certs
                  &lt;/pre&gt;                
                <return>
                    the version number, i.e. 1 or 2.                    
                </return>
            </javadoc>
            <method name="getIssuerDN" type="Principal" line="239"/>
            <javadoc line="239">
                &lt;strong&gt;Denigrated&lt;/strong&gt;, replaced by {@linkplain #getIssuerX500Principal()}. This method returns the &lt;code&gt;issuer&lt;/code&gt;
                  as an implementation specific Principal object, which should not be
                  relied upon by portable code.
                  &lt;p&gt;
                  Gets the &lt;code&gt;issuer&lt;/code&gt; (issuer distinguished name) value from
                  the CRL. The issuer name identifies the entity that signed (and
                  issued) the CRL.
                  &lt;p&gt;The issuer name field contains an
                  X.500 distinguished name (DN).
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  issuer    Name
                  Name ::= CHOICE { RDNSequence }
                  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
                  RelativeDistinguishedName ::=
                  SET OF AttributeValueAssertion
                  AttributeValueAssertion ::= SEQUENCE {
                  AttributeType,
                  AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY
                  &lt;/pre&gt;
                  The &lt;code&gt;Name&lt;/code&gt; describes a hierarchical name composed of
                  attributes,
                  such as country name, and corresponding values, such as US.
                  The type of the &lt;code&gt;AttributeValue&lt;/code&gt; component is determined by
                  the &lt;code&gt;AttributeType&lt;/code&gt;; in general it will be a
                  &lt;code&gt;directoryString&lt;/code&gt;. A &lt;code&gt;directoryString&lt;/code&gt; is usually
                  one of &lt;code&gt;PrintableString&lt;/code&gt;,
                  &lt;code&gt;TeletexString&lt;/code&gt; or &lt;code&gt;UniversalString&lt;/code&gt;.                
                <return>
                    a Principal whose name is the issuer distinguished name.                    
                </return>
            </javadoc>
            <javadoc line="280">
                Returns the issuer (issuer distinguished name) value from the
                  CRL as an &lt;code&gt;X500Principal&lt;/code&gt;.
                  &lt;p&gt;
                  It is recommended that subclasses override this method.                
                <return>
                    an <code>X500Principal</code> representing the issuer
                      distinguished name                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getIssuerX500Principal" type="X500Principal" line="290">
                <scope line="291"/>
            </method>
            <method name="getThisUpdate" type="Date" line="297"/>
            <javadoc line="297">
                Gets the &lt;code&gt;thisUpdate&lt;/code&gt; date from the CRL.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  thisUpdate   ChoiceOfTime
                  ChoiceOfTime ::= CHOICE {
                  utcTime        UTCTime,
                  generalTime    GeneralizedTime }
                  &lt;/pre&gt;                
                <return>
                    the <code>thisUpdate</code> date from the CRL.                    
                </return>
            </javadoc>
            <method name="getNextUpdate" type="Date" line="311"/>
            <javadoc line="311">
                Gets the &lt;code&gt;nextUpdate&lt;/code&gt; date from the CRL.                
                <return>
                    the <code>nextUpdate</code> date from the CRL, or null if
                      not present.                    
                </return>
            </javadoc>
            <method name="getRevokedCertificate" type="X509CRLEntry" line="319"/>
            <javadoc line="319">
                Gets the CRL entry, if any, with the given certificate serialNumber.                
                <param>
                    serialNumber the serial number of the certificate for which a CRL entry
                      is to be looked up                    
                </param>
                <return>
                    the entry with the given serial number, or null if no such entry
                      exists in this CRL.                    
                </return>
                <see>
                    X509CRLEntry                    
                </see>
            </javadoc>
            <javadoc line="331">
                Get the CRL entry, if any, for the given certificate.
                  &lt;p&gt;This method can be used to lookup CRL entries in indirect CRLs,
                  that means CRLs that contain entries from issuers other than the CRL
                  issuer. The default implementation will only return entries for
                  certificates issued by the CRL issuer. Subclasses that wish to
                  support indirect CRLs should override this method.                
                <param>
                    certificate the certificate for which a CRL entry is to be looked
                      up                    
                </param>
                <return>
                    the entry for the given certificate, or null if no such entry
                      exists in this CRL.                    
                </return>
                <exception>
                    NullPointerException if certificate is null                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getRevokedCertificate" type="X509CRLEntry" line="348">
                <params>
                    <param name="certificate" type="X509Certificate"/>
                </params>
                <declaration name="certIssuer" type="X500Principal" line="349"/>
                <declaration name="crlIssuer" type="X500Principal" line="350"/>
                <scope line="351"/>
            </method>
            <method name="getRevokedCertificates" type="Set<? extends X509CRLEntry>" line="357"/>
            <javadoc line="357">
                Gets all the entries from this CRL.
                  This returns a Set of X509CRLEntry objects.                
                <return>
                    all the entries or null if there are none present.                    
                </return>
                <see>
                    X509CRLEntry                    
                </see>
            </javadoc>
            <method name="getTBSCertList" type="byte[]" line="366"/>
            <javadoc line="366">
                Gets the DER-encoded CRL information, the
                  &lt;code&gt;tbsCertList&lt;/code&gt; from this CRL.
                  This can be used to verify the signature independently.                
                <return>
                    the DER-encoded CRL information.                    
                </return>
                <exception>
                    CRLException if an encoding error occurs.                    
                </exception>
            </javadoc>
            <method name="getSignature" type="byte[]" line="376"/>
            <javadoc line="376">
                Gets the &lt;code&gt;signature&lt;/code&gt; value (the raw signature bits) from
                  the CRL.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  signature     BIT STRING
                  &lt;/pre&gt;                
                <return>
                    the signature.                    
                </return>
            </javadoc>
            <method name="getSigAlgName" type="String" line="388"/>
            <javadoc line="388">
                Gets the signature algorithm name for the CRL
                  signature algorithm. An example is the string &quot;SHA256withRSA&quot;.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  signatureAlgorithm   AlgorithmIdentifier&lt;p&gt;
                  AlgorithmIdentifier  ::=  SEQUENCE  {
                  algorithm               OBJECT IDENTIFIER,
                  parameters              ANY DEFINED BY algorithm OPTIONAL  }
                  -- contains a value of the type
                  -- registered for use with the
                  -- algorithm object identifier value
                  &lt;/pre&gt;
                  &lt;p&gt;The algorithm name is determined from the &lt;code&gt;algorithm&lt;/code&gt;
                  OID string.                
                <return>
                    the signature algorithm name.                    
                </return>
            </javadoc>
            <method name="getSigAlgOID" type="String" line="409"/>
            <javadoc line="409">
                Gets the signature algorithm OID string from the CRL.
                  An OID is represented by a set of nonnegative whole numbers separated
                  by periods.
                  For example, the string &quot;1.2.840.10040.4.3&quot; identifies the SHA-1
                  with DSA signature algorithm defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3279.txt&quot;&gt;RFC 3279: Algorithms and
                  Identifiers for the Internet X.509 Public Key Infrastructure Certificate
                  and CRL Profile&lt;/a&gt;.
                  &lt;p&gt;See {@link #getSigAlgName() getSigAlgName} for
                  relevant ASN.1 definitions.                
                <return>
                    the signature algorithm OID string.                    
                </return>
            </javadoc>
            <method name="getSigAlgParams" type="byte[]" line="426"/>
            <javadoc line="426">
                Gets the DER-encoded signature algorithm parameters from this
                  CRL&apos;s signature algorithm. In most cases, the signature
                  algorithm parameters are null; the parameters are usually
                  supplied with the public key.
                  If access to individual parameter values is needed then use{@link java.security.AlgorithmParameters AlgorithmParameters}and instantiate with the name returned by{@link #getSigAlgName() getSigAlgName}.
                  &lt;p&gt;See {@link #getSigAlgName() getSigAlgName} for
                  relevant ASN.1 definitions.                
                <return>
                    the DER-encoded signature algorithm parameters, or
                      null if no parameters are present.                    
                </return>
            </javadoc>
        </class>
    </source>