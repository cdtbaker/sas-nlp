<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Date"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <class name="PKIXParameters" line="40">
            <implements interface="CertPathParameters"/>
            <javadoc line="40">
                Parameters used as input for the PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;
                  algorithm.
                  &lt;p&gt;
                  A PKIX &lt;code&gt;CertPathValidator&lt;/code&gt; uses these parameters to
                  validate a &lt;code&gt;CertPath&lt;/code&gt; according to the PKIX certification path
                  validation algorithm.
                  &lt;p&gt;To instantiate a &lt;code&gt;PKIXParameters&lt;/code&gt; object, an
                  application must specify one or more &lt;i&gt;most-trusted CAs&lt;/i&gt; as defined by
                  the PKIX certification path validation algorithm. The most-trusted CAs
                  can be specified using one of two constructors. An application
                  can call {@link #PKIXParameters(Set) PKIXParameters(Set)},
                  specifying a &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;TrustAnchor&lt;/code&gt; objects, each
                  of which identify a most-trusted CA. Alternatively, an application can call{@link #PKIXParameters(KeyStore) PKIXParameters(KeyStore)}, specifying a
                  &lt;code&gt;KeyStore&lt;/code&gt; instance containing trusted certificate entries, each
                  of which will be considered as a most-trusted CA.
                  &lt;p&gt;
                  Once a &lt;code&gt;PKIXParameters&lt;/code&gt; object has been created, other parameters
                  can be specified (by calling {@link #setInitialPolicies setInitialPolicies}or {@link #setDate setDate}, for instance) and then the
                  &lt;code&gt;PKIXParameters&lt;/code&gt; is passed along with the &lt;code&gt;CertPath&lt;/code&gt;
                  to be validated to {@link CertPathValidator#validateCertPathValidator.validate}.
                  &lt;p&gt;
                  Any parameter that is not set (or is set to &lt;code&gt;null&lt;/code&gt;) will
                  be set to the default value for that parameter. The default value for the
                  &lt;code&gt;date&lt;/code&gt; parameter is &lt;code&gt;null&lt;/code&gt;, which indicates
                  the current time when the path is validated. The default for the
                  remaining parameters is the least constrained.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  Unless otherwise specified, the methods defined in this class are not
                  thread-safe. Multiple threads that need to access a single
                  object concurrently should synchronize amongst themselves and
                  provide the necessary locking. Multiple threads each manipulating
                  separate objects need not synchronize.                
                <see>
                    CertPathValidator                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="unmodTrustAnchors" type="Set&lt;TrustAnchor&gt;" line="88"/>
            <declaration name="date" type="Date" line="89"/>
            <declaration name="certPathCheckers" type="List&lt;PKIXCertPathChecker&gt;" line="90"/>
            <declaration name="sigProvider" type="String" line="91"/>
            <declaration name="revocationEnabled" type="boolean" line="92"/>
            <declaration name="unmodInitialPolicies" type="Set&lt;String&gt;" line="93"/>
            <declaration name="explicitPolicyRequired" type="boolean" line="94"/>
            <declaration name="policyMappingInhibited" type="boolean" line="95"/>
            <declaration name="anyPolicyInhibited" type="boolean" line="96"/>
            <declaration name="policyQualifiersRejected" type="boolean" line="97"/>
            <declaration name="certStores" type="List&lt;CertStore&gt;" line="98"/>
            <declaration name="certSelector" type="CertSelector" line="99"/>
            <javadoc line="101">
                Creates an instance of &lt;code&gt;PKIXParameters&lt;/code&gt; with the specified
                  &lt;code&gt;Set&lt;/code&gt; of most-trusted CAs. Each element of the
                  set is a {@link TrustAnchor TrustAnchor}.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Set&lt;/code&gt; is copied to protect against
                  subsequent modifications.                
                <param>
                    trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if the specified
                      <code>Set</code> is empty <code>(trustAnchors.isEmpty() == true)</code>                    
                </throws>
                <throws>
                    NullPointerException if the specified <code>Set</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    ClassCastException if any of the elements in the <code>Set</code>
                      are not of type <code>java.security.cert.TrustAnchor</code>                    
                </throws>
            </javadoc>
            <method name="PKIXParameters" type="constructor" line="119">
                <params>
                    <param name="trustAnchors" type="Set<TrustAnchor>"/>
                </params>
            </method>
            <javadoc line="127">
                Creates an instance of &lt;code&gt;PKIXParameters&lt;/code&gt; that
                  populates the set of most-trusted CAs from the trusted
                  certificate entries contained in the specified &lt;code&gt;KeyStore&lt;/code&gt;.
                  Only keystore entries that contain trusted &lt;code&gt;X509Certificates&lt;/code&gt;
                  are considered; all other certificate types are ignored.                
                <param>
                    keystore a <code>KeyStore</code> from which the set of
                      most-trusted CAs will be populated                    
                </param>
                <throws>
                    KeyStoreException if the keystore has not been initialized                    
                </throws>
                <throws>
                    InvalidAlgorithmParameterException if the keystore does
                      not contain at least one trusted certificate entry                    
                </throws>
                <throws>
                    NullPointerException if the keystore is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="PKIXParameters" type="constructor" line="143">
                <params>
                    <param name="keystore" type="KeyStore"/>
                </params>
                <declaration name="hashSet" type="Set&lt;TrustAnchor&gt;" line="147"/>
                <declaration name="aliases" type="Enumeration&lt;String&gt;" line="148"/>
                <scope line="149">
                    <declaration name="alias" type="String" line="150"/>
                    <scope line="151">
                        <declaration name="cert" type="Certificate" line="152"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="163">
                Returns an immutable &lt;code&gt;Set&lt;/code&gt; of the most-trusted
                  CAs.                
                <return>
                    an immutable <code>Set</code> of <code>TrustAnchor</code>s
                      (never <code>null</code>)                    
                </return>
                <see>
                    #setTrustAnchors                    
                </see>
            </javadoc>
            <method name="getTrustAnchors" type="Set<TrustAnchor>" line="172"/>
            <javadoc line="176">
                Sets the &lt;code&gt;Set&lt;/code&gt; of most-trusted CAs.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Set&lt;/code&gt; is copied to protect against
                  subsequent modifications.                
                <param>
                    trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if the specified
                      <code>Set</code> is empty <code>(trustAnchors.isEmpty() == true)</code>                    
                </throws>
                <throws>
                    NullPointerException if the specified <code>Set</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    ClassCastException if any of the elements in the set
                      are not of type <code>java.security.cert.TrustAnchor</code>                    
                </throws>
                <see>
                    #getTrustAnchors                    
                </see>
            </javadoc>
            <method name="setTrustAnchors" type="void" line="194">
                <params>
                    <param name="trustAnchors" type="Set<TrustAnchor>"/>
                </params>
                <scope line="195"/>
                <scope line="199"/>
                <scope line="203">
                    <scope line="204"/>
                </scope>
            </method>
            <javadoc line="213">
                Returns an immutable &lt;code&gt;Set&lt;/code&gt; of initial
                  policy identifiers (OID strings), indicating that any one of these
                  policies would be acceptable to the certificate user for the purposes of
                  certification path processing. The default return value is an empty
                  &lt;code&gt;Set&lt;/code&gt;, which is interpreted as meaning that any policy would
                  be acceptable.                
                <return>
                    an immutable <code>Set</code> of initial policy OIDs in
                      <code>String</code> format, or an empty <code>Set</code> (implying any
                      policy is acceptable). Never returns <code>null</code>.                    
                </return>
                <see>
                    #setInitialPolicies                    
                </see>
            </javadoc>
            <method name="getInitialPolicies" type="Set<String>" line="227"/>
            <javadoc line="231">
                Sets the &lt;code&gt;Set&lt;/code&gt; of initial policy identifiers
                  (OID strings), indicating that any one of these
                  policies would be acceptable to the certificate user for the purposes of
                  certification path processing. By default, any policy is acceptable
                  (i.e. all policies), so a user that wants to allow any policy as
                  acceptable does not need to call this method, or can call it
                  with an empty &lt;code&gt;Set&lt;/code&gt; (or &lt;code&gt;null&lt;/code&gt;).
                  &lt;p&gt;
                  Note that the &lt;code&gt;Set&lt;/code&gt; is copied to protect against
                  subsequent modifications.                
                <param>
                    initialPolicies a <code>Set</code> of initial policy
                      OIDs in <code>String</code> format (or <code>null</code>)                    
                </param>
                <throws>
                    ClassCastException if any of the elements in the set are
                      not of type <code>String</code>                    
                </throws>
                <see>
                    #getInitialPolicies                    
                </see>
            </javadoc>
            <method name="setInitialPolicies" type="void" line="250">
                <params>
                    <param name="initialPolicies" type="Set<String>"/>
                </params>
                <scope line="251">
                    <scope line="253"/>
                </scope>
            </method>
            <javadoc line="264">
                Sets the list of &lt;code&gt;CertStore&lt;/code&gt;s to be used in finding
                  certificates and CRLs. May be &lt;code&gt;null&lt;/code&gt;, in which case
                  no &lt;code&gt;CertStore&lt;/code&gt;s will be used. The first
                  &lt;code&gt;CertStore&lt;/code&gt;s in the list may be preferred to those that
                  appear later.
                  &lt;p&gt;
                  Note that the &lt;code&gt;List&lt;/code&gt; is copied to protect against
                  subsequent modifications.                
                <param>
                    stores a <code>List</code> of <code>CertStore</code>s (or
                      <code>null</code>)                    
                </param>
                <throws>
                    ClassCastException if any of the elements in the list are
                      not of type <code>java.security.cert.CertStore</code>                    
                </throws>
                <see>
                    #getCertStores                    
                </see>
            </javadoc>
            <method name="setCertStores" type="void" line="281">
                <params>
                    <param name="stores" type="List<CertStore>"/>
                </params>
                <scope line="282"/>
                <scope line="284">
                    <scope line="285">
                        <scope line="286"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="295">
                Adds a &lt;code&gt;CertStore&lt;/code&gt; to the end of the list of
                  &lt;code&gt;CertStore&lt;/code&gt;s used in finding certificates and CRLs.                
                <param>
                    store the <code>CertStore</code> to add. If <code>null</code>,
                      the store is ignored (not added to list).                    
                </param>
            </javadoc>
            <method name="addCertStore" type="void" line="302">
                <params>
                    <param name="store" type="CertStore"/>
                </params>
                <scope line="303"/>
            </method>
            <javadoc line="308">
                Returns an immutable &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;CertStore&lt;/code&gt;s that
                  are used to find certificates and CRLs.                
                <return>
                    an immutable <code>List</code> of <code>CertStore</code>s
                      (may be empty, but never <code>null</code>)                    
                </return>
                <see>
                    #setCertStores                    
                </see>
            </javadoc>
            <method name="getCertStores" type="List<CertStore>" line="317"/>
            <javadoc line="322">
                Sets the RevocationEnabled flag. If this flag is true, the default
                  revocation checking mechanism of the underlying PKIX service provider
                  will be used. If this flag is false, the default revocation checking
                  mechanism will be disabled (not used).
                  &lt;p&gt;
                  When a &lt;code&gt;PKIXParameters&lt;/code&gt; object is created, this flag is set
                  to true. This setting reflects the most common strategy for checking
                  revocation, since each service provider must support revocation
                  checking to be PKIX compliant. Sophisticated applications should set
                  this flag to false when it is not practical to use a PKIX service
                  provider&apos;s default revocation checking mechanism or when an alternative
                  revocation checking mechanism is to be substituted (by also calling the{@link #addCertPathChecker addCertPathChecker} or {@link #setCertPathCheckers setCertPathCheckers} methods).                
                <param>
                    val the new value of the RevocationEnabled flag                    
                </param>
            </javadoc>
            <method name="setRevocationEnabled" type="void" line="340">
                <params>
                    <param name="val" type="boolean"/>
                </params>
            </method>
            <javadoc line="344">
                Checks the RevocationEnabled flag. If this flag is true, the default
                  revocation checking mechanism of the underlying PKIX service provider
                  will be used. If this flag is false, the default revocation checking
                  mechanism will be disabled (not used). See the {@link #setRevocationEnabled setRevocationEnabled} method for more details on
                  setting the value of this flag.                
                <return>
                    the current value of the RevocationEnabled flag                    
                </return>
            </javadoc>
            <method name="isRevocationEnabled" type="boolean" line="354"/>
            <javadoc line="358">
                Sets the ExplicitPolicyRequired flag. If this flag is true, an
                  acceptable policy needs to be explicitly identified in every certificate.
                  By default, the ExplicitPolicyRequired flag is false.                
                <param>
                    val <code>true</code> if explicit policy is to be required,
                      <code>false</code> otherwise                    
                </param>
            </javadoc>
            <method name="setExplicitPolicyRequired" type="void" line="366">
                <params>
                    <param name="val" type="boolean"/>
                </params>
            </method>
            <javadoc line="370">
                Checks if explicit policy is required. If this flag is true, an
                  acceptable policy needs to be explicitly identified in every certificate.
                  By default, the ExplicitPolicyRequired flag is false.                
                <return>
                    <code>true</code> if explicit policy is required,
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isExplicitPolicyRequired" type="boolean" line="378"/>
            <javadoc line="382">
                Sets the PolicyMappingInhibited flag. If this flag is true, policy
                  mapping is inhibited. By default, policy mapping is not inhibited (the
                  flag is false).                
                <param>
                    val <code>true</code> if policy mapping is to be inhibited,
                      <code>false</code> otherwise                    
                </param>
            </javadoc>
            <method name="setPolicyMappingInhibited" type="void" line="390">
                <params>
                    <param name="val" type="boolean"/>
                </params>
            </method>
            <javadoc line="394">
                Checks if policy mapping is inhibited. If this flag is true, policy
                  mapping is inhibited. By default, policy mapping is not inhibited (the
                  flag is false).                
                <return>
                    true if policy mapping is inhibited, false otherwise                    
                </return>
            </javadoc>
            <method name="isPolicyMappingInhibited" type="boolean" line="401"/>
            <javadoc line="405">
                Sets state to determine if the any policy OID should be processed
                  if it is included in a certificate. By default, the any policy OID
                  is not inhibited ({@link #isAnyPolicyInhibited isAnyPolicyInhibited()}returns &lt;code&gt;false&lt;/code&gt;).                
                <param>
                    val <code>true</code> if the any policy OID is to be
                      inhibited, <code>false</code> otherwise                    
                </param>
            </javadoc>
            <method name="setAnyPolicyInhibited" type="void" line="414">
                <params>
                    <param name="val" type="boolean"/>
                </params>
            </method>
            <javadoc line="418">
                Checks whether the any policy OID should be processed if it
                  is included in a certificate.                
                <return>
                    <code>true</code> if the any policy OID is inhibited,
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isAnyPolicyInhibited" type="boolean" line="425"/>
            <javadoc line="429">
                Sets the PolicyQualifiersRejected flag. If this flag is true,
                  certificates that include policy qualifiers in a certificate
                  policies extension that is marked critical are rejected.
                  If the flag is false, certificates are not rejected on this basis.
                  &lt;p&gt; When a &lt;code&gt;PKIXParameters&lt;/code&gt; object is created, this flag is
                  set to true. This setting reflects the most common (and simplest)
                  strategy for processing policy qualifiers. Applications that want to use
                  a more sophisticated policy must set this flag to false.
                  &lt;p&gt;
                  Note that the PKIX certification path validation algorithm specifies
                  that any policy qualifier in a certificate policies extension that is
                  marked critical must be processed and validated. Otherwise the
                  certification path must be rejected. If the policyQualifiersRejected flag
                  is set to false, it is up to the application to validate all policy
                  qualifiers in this manner in order to be PKIX compliant.                
                <param>
                    qualifiersRejected the new value of the PolicyQualifiersRejected
                      flag                    
                </param>
                <see>
                    #getPolicyQualifiersRejected                    
                </see>
                <see>
                    PolicyQualifierInfo                    
                </see>
            </javadoc>
            <method name="setPolicyQualifiersRejected" type="void" line="452">
                <params>
                    <param name="qualifiersRejected" type="boolean"/>
                </params>
            </method>
            <javadoc line="456">
                Gets the PolicyQualifiersRejected flag. If this flag is true,
                  certificates that include policy qualifiers in a certificate policies
                  extension that is marked critical are rejected.
                  If the flag is false, certificates are not rejected on this basis.
                  &lt;p&gt; When a &lt;code&gt;PKIXParameters&lt;/code&gt; object is created, this flag is
                  set to true. This setting reflects the most common (and simplest)
                  strategy for processing policy qualifiers. Applications that want to use
                  a more sophisticated policy must set this flag to false.                
                <return>
                    the current value of the PolicyQualifiersRejected flag                    
                </return>
                <see>
                    #setPolicyQualifiersRejected                    
                </see>
            </javadoc>
            <method name="getPolicyQualifiersRejected" type="boolean" line="470"/>
            <javadoc line="474">
                Returns the time for which the validity of the certification path
                  should be determined. If &lt;code&gt;null&lt;/code&gt;, the current time is used.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Date&lt;/code&gt; returned is copied to protect against
                  subsequent modifications.                
                <return>
                    the <code>Date</code>, or <code>null</code> if not set                    
                </return>
                <see>
                    #setDate                    
                </see>
            </javadoc>
            <method name="getDate" type="Date" line="484"/>
            <javadoc line="491">
                Sets the time for which the validity of the certification path
                  should be determined. If &lt;code&gt;null&lt;/code&gt;, the current time is used.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Date&lt;/code&gt; supplied here is copied to protect
                  against subsequent modifications.                
                <param>
                    date the <code>Date</code>, or <code>null</code> for the
                      current time                    
                </param>
                <see>
                    #getDate                    
                </see>
            </javadoc>
            <method name="setDate" type="void" line="502">
                <params>
                    <param name="date" type="Date"/>
                </params>
            </method>
            <javadoc line="509">
                Sets a &lt;code&gt;List&lt;/code&gt; of additional certification path checkers. If
                  the specified &lt;code&gt;List&lt;/code&gt; contains an object that is not a
                  &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;, it is ignored.
                  &lt;p&gt;
                  Each &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; specified implements
                  additional checks on a certificate. Typically, these are checks to
                  process and verify private extensions contained in certificates.
                  Each &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; should be instantiated with any
                  initialization parameters needed to execute the check.
                  &lt;p&gt;
                  This method allows sophisticated applications to extend a PKIX
                  &lt;code&gt;CertPathValidator&lt;/code&gt; or &lt;code&gt;CertPathBuilder&lt;/code&gt;.
                  Each of the specified &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s will be called,
                  in turn, by a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt; or
                  &lt;code&gt;CertPathBuilder&lt;/code&gt; for each certificate processed or
                  validated.
                  &lt;p&gt;
                  Regardless of whether these additional &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s
                  are set, a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt; or
                  &lt;code&gt;CertPathBuilder&lt;/code&gt; must perform all of the required PKIX
                  checks on each certificate. The one exception to this rule is if the
                  RevocationEnabled flag is set to false (see the {@link #setRevocationEnabled setRevocationEnabled} method).
                  &lt;p&gt;
                  Note that the &lt;code&gt;List&lt;/code&gt; supplied here is copied and each
                  &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; in the list is cloned to protect
                  against subsequent modifications.                
                <param>
                    checkers a <code>List</code> of <code>PKIXCertPathChecker</code>s.
                      May be <code>null</code>, in which case no additional checkers will be
                      used.                    
                </param>
                <throws>
                    ClassCastException if any of the elements in the list
                      are not of type <code>java.security.cert.PKIXCertPathChecker</code>                    
                </throws>
                <see>
                    #getCertPathCheckers                    
                </see>
            </javadoc>
            <method name="setCertPathCheckers" type="void" line="545">
                <params>
                    <param name="checkers" type="List<PKIXCertPathChecker>"/>
                </params>
                <scope line="546">
                    <declaration name="tmpList" type="List&lt;PKIXCertPathChecker&gt;" line="547"/>
                    <scope line="549"/>
                </scope>
                <scope line="553"/>
            </method>
            <javadoc line="558">
                Returns the &lt;code&gt;List&lt;/code&gt; of certification path checkers.
                  The returned &lt;code&gt;List&lt;/code&gt; is immutable, and each
                  &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; in the &lt;code&gt;List&lt;/code&gt; is cloned
                  to protect against subsequent modifications.                
                <return>
                    an immutable <code>List</code> of
                      <code>PKIXCertPathChecker</code>s (may be empty, but not
                      <code>null</code>)                    
                </return>
                <see>
                    #setCertPathCheckers                    
                </see>
            </javadoc>
            <method name="getCertPathCheckers" type="List<PKIXCertPathChecker>" line="569">
                <declaration name="tmpList" type="List&lt;PKIXCertPathChecker&gt;" line="570"/>
                <scope line="571"/>
            </method>
            <javadoc line="577">
                Adds a &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; to the list of certification
                  path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}method for more details.
                  &lt;p&gt;
                  Note that the &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; is cloned to protect
                  against subsequent modifications.                
                <param>
                    checker a <code>PKIXCertPathChecker</code> to add to the list of
                      checks. If <code>null</code>, the checker is ignored (not added to list).                    
                </param>
            </javadoc>
            <method name="addCertPathChecker" type="void" line="588">
                <params>
                    <param name="checker" type="PKIXCertPathChecker"/>
                </params>
                <scope line="589"/>
            </method>
            <javadoc line="594">
                Returns the signature provider&apos;s name, or &lt;code&gt;null&lt;/code&gt;
                  if not set.                
                <return>
                    the signature provider's name (or <code>null</code>)                    
                </return>
                <see>
                    #setSigProvider                    
                </see>
            </javadoc>
            <method name="getSigProvider" type="String" line="601"/>
            <javadoc line="605">
                Sets the signature provider&apos;s name. The specified provider will be
                  preferred when creating {@link java.security.Signature Signature}objects. If &lt;code&gt;null&lt;/code&gt; or not set, the first provider found
                  supporting the algorithm will be used.                
                <param>
                    sigProvider the signature provider's name (or <code>null</code>)                    
                </param>
                <see>
                    #getSigProvider                    
                </see>
            </javadoc>
            <method name="setSigProvider" type="void" line="614">
                <params>
                    <param name="sigProvider" type="String"/>
                </params>
            </method>
            <javadoc line="618">
                Returns the required constraints on the target certificate.
                  The constraints are returned as an instance of &lt;code&gt;CertSelector&lt;/code&gt;.
                  If &lt;code&gt;null&lt;/code&gt;, no constraints are defined.
                  &lt;p&gt;Note that the &lt;code&gt;CertSelector&lt;/code&gt; returned is cloned
                  to protect against subsequent modifications.                
                <return>
                    a <code>CertSelector</code> specifying the constraints
                      on the target certificate (or <code>null</code>)                    
                </return>
                <see>
                    #setTargetCertConstraints                    
                </see>
            </javadoc>
            <method name="getTargetCertConstraints" type="CertSelector" line="630">
                <scope line="631"/>
                <scope line="633"/>
            </method>
            <javadoc line="638">
                Sets the required constraints on the target certificate.
                  The constraints are specified as an instance of
                  &lt;code&gt;CertSelector&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, no constraints are
                  defined.
                  &lt;p&gt;Note that the &lt;code&gt;CertSelector&lt;/code&gt; specified is cloned
                  to protect against subsequent modifications.                
                <param>
                    selector a <code>CertSelector</code> specifying the constraints
                      on the target certificate (or <code>null</code>)                    
                </param>
                <see>
                    #getTargetCertConstraints                    
                </see>
            </javadoc>
            <method name="setTargetCertConstraints" type="void" line="651">
                <params>
                    <param name="selector" type="CertSelector"/>
                </params>
            </method>
            <javadoc line="658">
                Makes a copy of this &lt;code&gt;PKIXParameters&lt;/code&gt; object. Changes
                  to the copy will not affect the original and vice versa.                
                <return>
                    a copy of this <code>PKIXParameters</code> object                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="664">
                <comment line="668">
                    must clone these because addCertStore, et al. modify them                    
                </comment>
                <comment line="681">
                    other class fields are immutable to public, don&apos;t bother                    
                </comment>
                <comment line="682">
                    to clone the read-only fields.                    
                </comment>
                <comment line="685">
                                        
                </comment>
                <scope line="665">
                    <declaration name="copy" type="PKIXParameters" line="666"/>
                    <scope line="669"/>
                    <scope line="672">
                        <scope line="675"/>
                    </scope>
                </scope>
                <scope line="684"/>
            </method>
            <javadoc line="690">
                Returns a formatted string describing the parameters.                
                <return>
                    a formatted string describing the parameters.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="695">
                <comment line="699">
                                        
                </comment>
                <comment line="705">
                                        
                </comment>
                <comment line="715">
                                        
                </comment>
                <comment line="724">
                                        
                </comment>
                <comment line="727">
                                        
                </comment>
                <declaration name="sb" type="StringBuffer" line="696"/>
                <scope line="700"/>
                <scope line="706">
                    <scope line="707"/>
                    <scope line="709"/>
                </scope>
            </method>
        </class>
    </source>