<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <interface name="PolicyNode">
            <javadoc line="4">
                An immutable valid policy tree node as defined by the PKIX certification
                  path validation algorithm.
                  &lt;p&gt;One of the outputs of the PKIX certification path validation
                  algorithm is a valid policy tree, which includes the policies that
                  were determined to be valid, how this determination was reached,
                  and any policy qualifiers encountered. This tree is of depth
                  &lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is the length of the certification
                  path that has been validated.
                  &lt;p&gt;Most applications will not need to examine the valid policy tree.
                  They can achieve their policy processing goals by setting the
                  policy-related parameters in &lt;code&gt;PKIXParameters&lt;/code&gt;. However,
                  the valid policy tree is available for more sophisticated applications,
                  especially those that process policy qualifiers.
                  &lt;p&gt;{@link PKIXCertPathValidatorResult#getPolicyTree()PKIXCertPathValidatorResult.getPolicyTree} returns the root node of the
                  valid policy tree. The tree can be traversed using the{@link #getChildren getChildren} and {@link #getParent getParent} methods.
                  Data about a particular node can be retrieved using other methods of
                  &lt;code&gt;PolicyNode&lt;/code&gt;.
                  &lt;p&gt;&lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;All &lt;code&gt;PolicyNode&lt;/code&gt; objects must be immutable and
                  thread-safe. Multiple threads may concurrently invoke the methods defined
                  in this class on a single &lt;code&gt;PolicyNode&lt;/code&gt; object (or more than one)
                  with no ill effects. This stipulation applies to all public fields and
                  methods of this class and any added or overridden by subclasses.                
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
            </javadoc>
            <method name="getParent" type="PolicyNode" line="32"/>
            <javadoc line="32">
                Returns the parent of this node, or &lt;code&gt;null&lt;/code&gt; if this is the
                  root node.                
                <return>
                    the parent of this node, or &lt;code&gt;null&lt;/code&gt; if this is the
                      root node                    
                </return>
            </javadoc>
            <method name="getChildren" type="Iterator&lt;? extends PolicyNode&gt;" line="39"/>
            <javadoc line="39">
                Returns an iterator over the children of this node. Any attempts to
                  modify the children of this node through the
                  &lt;code&gt;Iterator&lt;/code&gt;&apos;s remove method must throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <return>
                    an iterator over the children of this node                    
                </return>
            </javadoc>
            <method name="getDepth" type="int" line="47"/>
            <javadoc line="47">
                Returns the depth of this node in the valid policy tree.                
                <return>
                    the depth of this node (0 for the root node, 1 for its
                      children, and so on)                    
                </return>
            </javadoc>
            <method name="getValidPolicy" type="String" line="53"/>
            <javadoc line="53">
                Returns the valid policy represented by this node.                
                <return>
                    the &lt;code&gt;String&lt;/code&gt; OID of the valid policy
                      represented by this node. For the root node, this method always returns
                      the special anyPolicy OID: &quot;2.5.29.32.0&quot;.                    
                </return>
            </javadoc>
            <method name="getPolicyQualifiers" type="Set&lt;? extends PolicyQualifierInfo&gt;" line="60"/>
            <javadoc line="60">
                Returns the set of policy qualifiers associated with the
                  valid policy represented by this node.                
                <return>
                    an immutable &lt;code&gt;Set&lt;/code&gt; of
                      &lt;code&gt;PolicyQualifierInfo&lt;/code&gt;s. For the root node, this
                      is always an empty &lt;code&gt;Set&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getExpectedPolicies" type="Set&lt;String&gt;" line="68"/>
            <javadoc line="68">
                Returns the set of expected policies that would satisfy this
                  node&apos;s valid policy in the next certificate to be processed.                
                <return>
                    an immutable &lt;code&gt;Set&lt;/code&gt; of expected policy
                      &lt;code&gt;String&lt;/code&gt; OIDs. For the root node, this method
                      always returns a &lt;code&gt;Set&lt;/code&gt; with one element, the
                      special anyPolicy OID: &quot;2.5.29.32.0&quot;.                    
                </return>
            </javadoc>
            <method name="isCritical" type="boolean" line="77"/>
            <javadoc line="77">
                Returns the criticality indicator of the certificate policy extension
                  in the most recently processed certificate.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if extension marked critical,
                      &lt;code&gt;false&lt;/code&gt; otherwise. For the root node, &lt;code&gt;false&lt;/code&gt;
                      is always returned.                    
                </return>
            </javadoc>
        </interface>
    </source>