<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.math.BigInteger"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PublicKey"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Date"/>
        <import package="java.util.List"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <class name="X509Certificate" line="38">
            <extends class="Certificate"/>
            <implements interface="X509Extension"/>
            <javadoc line="38">
                &lt;p&gt;
                  Abstract class for X.509 certificates. This provides a standard
                  way to access all the attributes of an X.509 certificate.
                  &lt;p&gt;
                  In June of 1996, the basic X.509 v3 format was completed by
                  ISO/IEC and ANSI X9, which is described below in ASN.1:
                  &lt;pre&gt;
                  Certificate  ::=  SEQUENCE  {
                  tbsCertificate       TBSCertificate,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signature            BIT STRING  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  These certificates are widely used to support authentication and
                  other functionality in Internet security systems. Common applications
                  include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),
                  code signing for trusted software distribution, and Secure Electronic
                  Transactions (SET).
                  &lt;p&gt;
                  These certificates are managed and vouched for by &lt;em&gt;Certificate
                  Authorities&lt;/em&gt; (CAs). CAs are services which create certificates by
                  placing data in the X.509 standard format and then digitally signing
                  that data. CAs act as trusted third parties, making introductions
                  between principals who have no direct knowledge of each other.
                  CA certificates are either signed by themselves, or by some other
                  CA such as a &quot;root&quot; CA.
                  &lt;p&gt;
                  More information can be found in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280: Internet X.509
                  Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.
                  &lt;p&gt;
                  The ASN.1 definition of &lt;code&gt;tbsCertificate&lt;/code&gt; is:
                  &lt;pre&gt;
                  TBSCertificate  ::=  SEQUENCE  {
                  version         [0]  EXPLICIT Version DEFAULT v1,
                  serialNumber         CertificateSerialNumber,
                  signature            AlgorithmIdentifier,
                  issuer               Name,
                  validity             Validity,
                  subject              Name,
                  subjectPublicKeyInfo SubjectPublicKeyInfo,
                  issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
                  -- If present, version must be v2 or v3
                  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
                  -- If present, version must be v2 or v3
                  extensions      [3]  EXPLICIT Extensions OPTIONAL
                  -- If present, version must be v3
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Certificates are instantiated using a certificate factory. The following is
                  an example of how to instantiate an X.509 certificate:
                  &lt;pre&gt;
                  InputStream inStream = null;
                  try {
                  inStream = new FileInputStream(&quot;fileName-of-cert&quot;);
                  CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);
                  X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream);
                  } finally {
                  if (inStream != null) {
                  inStream.close();
                  }
                  }
                  &lt;/pre&gt;                
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    Certificate                    
                </see>
                <see>
                    CertificateFactory                    
                </see>
                <see>
                    X509Extension                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="115"/>
            <declaration name="subjectX500Principal" type="X500Principal" line="117"/>
            <javadoc line="119">
                Constructor for X.509 certificates.                
            </javadoc>
            <method name="X509Certificate" type="constructor" line="122"/>
            <method name="checkValidity" type="void" line="126"/>
            <javadoc line="126">
                Checks that the certificate is currently valid. It is if
                  the current date and time are within the validity period given in the
                  certificate.
                  &lt;p&gt;
                  The validity period consists of two date/time values:
                  the first and last dates (and times) on which the certificate
                  is valid. It is defined in
                  ASN.1 as:
                  &lt;pre&gt;
                  validity             Validity&lt;p&gt;
                  Validity ::= SEQUENCE {
                  notBefore      CertificateValidityDate,
                  notAfter       CertificateValidityDate }&lt;p&gt;
                  CertificateValidityDate ::= CHOICE {
                  utcTime        UTCTime,
                  generalTime    GeneralizedTime }
                  &lt;/pre&gt;                
                <exception>
                    CertificateExpiredException if the certificate has expired.                    
                </exception>
                <exception>
                    CertificateNotYetValidException if the certificate is not
                      yet valid.                    
                </exception>
            </javadoc>
            <method name="checkValidity" type="void" line="152"/>
            <javadoc line="152">
                Checks that the given date is within the certificate&apos;s
                  validity period. In other words, this determines whether the
                  certificate would be valid at the given date/time.                
                <param>
                    date the Date to check against to see if this certificate
                      is valid at that date/time.                    
                </param>
                <exception>
                    CertificateExpiredException if the certificate has expired
                      with respect to the <code>date</code> supplied.                    
                </exception>
                <exception>
                    CertificateNotYetValidException if the certificate is not
                      yet valid with respect to the <code>date</code> supplied.                    
                </exception>
                <see>
                    #checkValidity()                    
                </see>
            </javadoc>
            <method name="getVersion" type="int" line="170"/>
            <javadoc line="170">
                Gets the &lt;code&gt;version&lt;/code&gt; (version number) value from the
                  certificate.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  version  [0] EXPLICIT Version DEFAULT v1&lt;p&gt;
                  Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
                  &lt;/pre&gt;                
                <return>
                    the version number, i.e. 1, 2 or 3.                    
                </return>
            </javadoc>
            <method name="getSerialNumber" type="BigInteger" line="182"/>
            <javadoc line="182">
                Gets the &lt;code&gt;serialNumber&lt;/code&gt; value from the certificate.
                  The serial number is an integer assigned by the certification
                  authority to each certificate. It must be unique for each
                  certificate issued by a given CA (i.e., the issuer name and
                  serial number identify a unique certificate).
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  serialNumber     CertificateSerialNumber&lt;p&gt;
                  CertificateSerialNumber  ::=  INTEGER
                  &lt;/pre&gt;                
                <return>
                    the serial number.                    
                </return>
            </javadoc>
            <method name="getIssuerDN" type="Principal" line="199"/>
            <javadoc line="199">
                &lt;strong&gt;Denigrated&lt;/strong&gt;, replaced by {@linkplain #getIssuerX500Principal()}. This method returns the &lt;code&gt;issuer&lt;/code&gt;
                  as an implementation specific Principal object, which should not be
                  relied upon by portable code.
                  &lt;p&gt;
                  Gets the &lt;code&gt;issuer&lt;/code&gt; (issuer distinguished name) value from
                  the certificate. The issuer name identifies the entity that signed (and
                  issued) the certificate.
                  &lt;p&gt;The issuer name field contains an
                  X.500 distinguished name (DN).
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  issuer    Name&lt;p&gt;
                  Name ::= CHOICE { RDNSequence }
                  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
                  RelativeDistinguishedName ::=
                  SET OF AttributeValueAssertion
                  AttributeValueAssertion ::= SEQUENCE {
                  AttributeType,
                  AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY
                  &lt;/pre&gt;
                  The &lt;code&gt;Name&lt;/code&gt; describes a hierarchical name composed of
                  attributes,
                  such as country name, and corresponding values, such as US.
                  The type of the &lt;code&gt;AttributeValue&lt;/code&gt; component is determined by
                  the &lt;code&gt;AttributeType&lt;/code&gt;; in general it will be a
                  &lt;code&gt;directoryString&lt;/code&gt;. A &lt;code&gt;directoryString&lt;/code&gt; is usually
                  one of &lt;code&gt;PrintableString&lt;/code&gt;,
                  &lt;code&gt;TeletexString&lt;/code&gt; or &lt;code&gt;UniversalString&lt;/code&gt;.                
                <return>
                    a Principal whose name is the issuer distinguished name.                    
                </return>
            </javadoc>
            <javadoc line="240">
                Returns the issuer (issuer distinguished name) value from the
                  certificate as an &lt;code&gt;X500Principal&lt;/code&gt;.
                  &lt;p&gt;
                  It is recommended that subclasses override this method.                
                <return>
                    an <code>X500Principal</code> representing the issuer
                      distinguished name                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getIssuerX500Principal" type="X500Principal" line="250">
                <scope line="251"/>
            </method>
            <method name="getSubjectDN" type="Principal" line="257"/>
            <javadoc line="257">
                &lt;strong&gt;Denigrated&lt;/strong&gt;, replaced by {@linkplain #getSubjectX500Principal()}. This method returns the &lt;code&gt;subject&lt;/code&gt;
                  as an implementation specific Principal object, which should not be
                  relied upon by portable code.
                  &lt;p&gt;
                  Gets the &lt;code&gt;subject&lt;/code&gt; (subject distinguished name) value
                  from the certificate.  If the &lt;code&gt;subject&lt;/code&gt; value is empty,
                  then the &lt;code&gt;getName()&lt;/code&gt; method of the returned
                  &lt;code&gt;Principal&lt;/code&gt; object returns an empty string (&quot;&quot;).
                  &lt;p&gt; The ASN.1 definition for this is:
                  &lt;pre&gt;
                  subject    Name
                  &lt;/pre&gt;
                  &lt;p&gt;See {@link #getIssuerDN() getIssuerDN} for &lt;code&gt;Name&lt;/code&gt;
                  and other relevant definitions.                
                <return>
                    a Principal whose name is the subject name.                    
                </return>
            </javadoc>
            <javadoc line="281">
                Returns the subject (subject distinguished name) value from the
                  certificate as an &lt;code&gt;X500Principal&lt;/code&gt;.  If the subject value
                  is empty, then the &lt;code&gt;getName()&lt;/code&gt; method of the returned
                  &lt;code&gt;X500Principal&lt;/code&gt; object returns an empty string (&quot;&quot;).
                  &lt;p&gt;
                  It is recommended that subclasses override this method.                
                <return>
                    an <code>X500Principal</code> representing the subject
                      distinguished name                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSubjectX500Principal" type="X500Principal" line="293">
                <scope line="294"/>
            </method>
            <method name="getNotBefore" type="Date" line="300"/>
            <javadoc line="300">
                Gets the &lt;code&gt;notBefore&lt;/code&gt; date from the validity period of
                  the certificate.
                  The relevant ASN.1 definitions are:
                  &lt;pre&gt;
                  validity             Validity&lt;p&gt;
                  Validity ::= SEQUENCE {
                  notBefore      CertificateValidityDate,
                  notAfter       CertificateValidityDate }&lt;p&gt;
                  CertificateValidityDate ::= CHOICE {
                  utcTime        UTCTime,
                  generalTime    GeneralizedTime }
                  &lt;/pre&gt;                
                <return>
                    the start date of the validity period.                    
                </return>
                <see>
                    #checkValidity                    
                </see>
            </javadoc>
            <method name="getNotAfter" type="Date" line="320"/>
            <javadoc line="320">
                Gets the &lt;code&gt;notAfter&lt;/code&gt; date from the validity period of
                  the certificate. See {@link #getNotBefore() getNotBefore}for relevant ASN.1 definitions.                
                <return>
                    the end date of the validity period.                    
                </return>
                <see>
                    #checkValidity                    
                </see>
            </javadoc>
            <method name="getTBSCertificate" type="byte[]" line="330"/>
            <javadoc line="330">
                Gets the DER-encoded certificate information, the
                  &lt;code&gt;tbsCertificate&lt;/code&gt; from this certificate.
                  This can be used to verify the signature independently.                
                <return>
                    the DER-encoded certificate information.                    
                </return>
                <exception>
                    CertificateEncodingException if an encoding error occurs.                    
                </exception>
            </javadoc>
            <method name="getSignature" type="byte[]" line="341"/>
            <javadoc line="341">
                Gets the &lt;code&gt;signature&lt;/code&gt; value (the raw signature bits) from
                  the certificate.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  signature     BIT STRING
                  &lt;/pre&gt;                
                <return>
                    the signature.                    
                </return>
            </javadoc>
            <method name="getSigAlgName" type="String" line="353"/>
            <javadoc line="353">
                Gets the signature algorithm name for the certificate
                  signature algorithm. An example is the string &quot;SHA256withRSA&quot;.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  signatureAlgorithm   AlgorithmIdentifier&lt;p&gt;
                  AlgorithmIdentifier  ::=  SEQUENCE  {
                  algorithm               OBJECT IDENTIFIER,
                  parameters              ANY DEFINED BY algorithm OPTIONAL  }
                  -- contains a value of the type
                  -- registered for use with the
                  -- algorithm object identifier value
                  &lt;/pre&gt;
                  &lt;p&gt;The algorithm name is determined from the &lt;code&gt;algorithm&lt;/code&gt;
                  OID string.                
                <return>
                    the signature algorithm name.                    
                </return>
            </javadoc>
            <method name="getSigAlgOID" type="String" line="374"/>
            <javadoc line="374">
                Gets the signature algorithm OID string from the certificate.
                  An OID is represented by a set of nonnegative whole numbers separated
                  by periods.
                  For example, the string &quot;1.2.840.10040.4.3&quot; identifies the SHA-1
                  with DSA signature algorithm defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3279.txt&quot;&gt;RFC 3279: Algorithms and
                  Identifiers for the Internet X.509 Public Key Infrastructure Certificate
                  and CRL Profile&lt;/a&gt;.
                  &lt;p&gt;See {@link #getSigAlgName() getSigAlgName} for
                  relevant ASN.1 definitions.                
                <return>
                    the signature algorithm OID string.                    
                </return>
            </javadoc>
            <method name="getSigAlgParams" type="byte[]" line="391"/>
            <javadoc line="391">
                Gets the DER-encoded signature algorithm parameters from this
                  certificate&apos;s signature algorithm. In most cases, the signature
                  algorithm parameters are null; the parameters are usually
                  supplied with the certificate&apos;s public key.
                  If access to individual parameter values is needed then use{@link java.security.AlgorithmParameters AlgorithmParameters}and instantiate with the name returned by{@link #getSigAlgName() getSigAlgName}.
                  &lt;p&gt;See {@link #getSigAlgName() getSigAlgName} for
                  relevant ASN.1 definitions.                
                <return>
                    the DER-encoded signature algorithm parameters, or
                      null if no parameters are present.                    
                </return>
            </javadoc>
            <method name="getIssuerUniqueID" type="boolean[]" line="409"/>
            <javadoc line="409">
                Gets the &lt;code&gt;issuerUniqueID&lt;/code&gt; value from the certificate.
                  The issuer unique identifier is present in the certificate
                  to handle the possibility of reuse of issuer names over time.
                  RFC 3280 recommends that names not be reused and that
                  conforming certificates not make use of unique identifiers.
                  Applications conforming to that profile should be capable of
                  parsing unique identifiers and making comparisons.
                  &lt;p&gt;The ASN.1 definition for this is:
                  &lt;pre&gt;
                  issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL&lt;p&gt;
                  UniqueIdentifier  ::=  BIT STRING
                  &lt;/pre&gt;                
                <return>
                    the issuer unique identifier or null if it is not
                      present in the certificate.                    
                </return>
            </javadoc>
            <method name="getSubjectUniqueID" type="boolean[]" line="429"/>
            <javadoc line="429">
                Gets the &lt;code&gt;subjectUniqueID&lt;/code&gt; value from the certificate.
                  &lt;p&gt;The ASN.1 definition for this is:
                  &lt;pre&gt;
                  subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL&lt;p&gt;
                  UniqueIdentifier  ::=  BIT STRING
                  &lt;/pre&gt;                
                <return>
                    the subject unique identifier or null if it is not
                      present in the certificate.                    
                </return>
            </javadoc>
            <method name="getKeyUsage" type="boolean[]" line="443"/>
            <javadoc line="443">
                Gets a boolean array representing bits of
                  the &lt;code&gt;KeyUsage&lt;/code&gt; extension, (OID = 2.5.29.15).
                  The key usage extension defines the purpose (e.g., encipherment,
                  signature, certificate signing) of the key contained in the
                  certificate.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  KeyUsage ::= BIT STRING {
                  digitalSignature        (0),
                  nonRepudiation          (1),
                  keyEncipherment         (2),
                  dataEncipherment        (3),
                  keyAgreement            (4),
                  keyCertSign             (5),
                  cRLSign                 (6),
                  encipherOnly            (7),
                  decipherOnly            (8) }
                  &lt;/pre&gt;
                  RFC 3280 recommends that when used, this be marked
                  as a critical extension.                
                <return>
                    the KeyUsage extension of this certificate, represented as
                      an array of booleans. The order of KeyUsage values in the array is
                      the same as in the above ASN.1 definition. The array will contain a
                      value for each KeyUsage defined above. If the KeyUsage list encoded
                      in the certificate is longer than the above list, it will not be
                      truncated. Returns null if this certificate does not
                      contain a KeyUsage extension.                    
                </return>
            </javadoc>
            <javadoc line="475">
                Gets an unmodifiable list of Strings representing the OBJECT
                  IDENTIFIERs of the &lt;code&gt;ExtKeyUsageSyntax&lt;/code&gt; field of the
                  extended key usage extension, (OID = 2.5.29.37).  It indicates
                  one or more purposes for which the certified public key may be
                  used, in addition to or in place of the basic purposes
                  indicated in the key usage extension field.  The ASN.1
                  definition for this is:
                  &lt;pre&gt;
                  ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId&lt;p&gt;
                  KeyPurposeId ::= OBJECT IDENTIFIER&lt;p&gt;
                  &lt;/pre&gt;
                  Key purposes may be defined by any organization with a
                  need. Object identifiers used to identify key purposes shall be
                  assigned in accordance with IANA or ITU-T Rec. X.660 |
                  ISO/IEC/ITU 9834-1.
                  &lt;p&gt;
                  This method was added to version 1.4 of the Java 2 Platform Standard
                  Edition. In order to maintain backwards compatibility with existing
                  service providers, this method is not &lt;code&gt;abstract&lt;/code&gt;
                  and it provides a default implementation. Subclasses
                  should override this method with a correct implementation.                
                <return>
                    the ExtendedKeyUsage extension of this certificate,
                      as an unmodifiable list of object identifiers represented
                      as Strings. Returns null if this certificate does not
                      contain an ExtendedKeyUsage extension.                    
                </return>
                <throws>
                    CertificateParsingException if the extension cannot be decoded                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getExtendedKeyUsage" type="List<String>" line="507"/>
            <method name="getBasicConstraints" type="int" line="511"/>
            <javadoc line="511">
                Gets the certificate constraints path length from the
                  critical &lt;code&gt;BasicConstraints&lt;/code&gt; extension, (OID = 2.5.29.19).
                  &lt;p&gt;
                  The basic constraints extension identifies whether the subject
                  of the certificate is a Certificate Authority (CA) and
                  how deep a certification path may exist through that CA. The
                  &lt;code&gt;pathLenConstraint&lt;/code&gt; field (see below) is meaningful
                  only if &lt;code&gt;cA&lt;/code&gt; is set to TRUE. In this case, it gives the
                  maximum number of CA certificates that may follow this certificate in a
                  certification path. A value of zero indicates that only an end-entity
                  certificate may follow in the path.
                  &lt;p&gt;
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  BasicConstraints ::= SEQUENCE {
                  cA                  BOOLEAN DEFAULT FALSE,
                  pathLenConstraint   INTEGER (0..MAX) OPTIONAL }
                  &lt;/pre&gt;                
                <return>
                    the value of <code>pathLenConstraint</code> if the
                      BasicConstraints extension is present in the certificate and the
                      subject of the certificate is a CA, otherwise -1.
                      If the subject of the certificate is a CA and
                      <code>pathLenConstraint</code> does not appear,
                      <code>Integer.MAX_VALUE</code> is returned to indicate that there is no
                      limit to the allowed length of the certification path.                    
                </return>
            </javadoc>
            <javadoc line="541">
                Gets an immutable collection of subject alternative names from the
                  &lt;code&gt;SubjectAltName&lt;/code&gt; extension, (OID = 2.5.29.17).
                  &lt;p&gt;
                  The ASN.1 definition of the &lt;code&gt;SubjectAltName&lt;/code&gt; extension is:
                  &lt;pre&gt;
                  SubjectAltName ::= GeneralNames
                  GeneralNames :: = SEQUENCE SIZE (1..MAX) OF GeneralName
                  GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
                  &lt;/pre&gt;
                  &lt;p&gt;
                  If this certificate does not contain a &lt;code&gt;SubjectAltName&lt;/code&gt;
                  extension, &lt;code&gt;null&lt;/code&gt; is returned. Otherwise, a
                  &lt;code&gt;Collection&lt;/code&gt; is returned with an entry representing each
                  &lt;code&gt;GeneralName&lt;/code&gt; included in the extension. Each entry is a
                  &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt;
                  (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt;
                  or a byte array (the name, in string or ASN.1 DER encoded form,
                  respectively).
                  &lt;p&gt;
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc822.txt&quot;&gt;RFC 822&lt;/a&gt;, DNS, and URI
                  names are returned as &lt;code&gt;String&lt;/code&gt;s,
                  using the well-established string formats for those types (subject to
                  the restrictions included in RFC 3280). IPv4 address names are
                  returned using dotted quad notation. IPv6 address names are returned
                  in the form &quot;a1:a2:...:a8&quot;, where a1-a8 are hexadecimal values
                  representing the eight 16-bit pieces of the address. OID names are
                  returned as &lt;code&gt;String&lt;/code&gt;s represented as a series of nonnegative
                  integers separated by periods. And directory names (distinguished names)
                  are returned in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;
                  RFC 2253&lt;/a&gt; string format. No standard string format is
                  defined for otherNames, X.400 names, EDI party names, or any
                  other type of names. They are returned as byte arrays
                  containing the ASN.1 DER encoded form of the name.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Collection&lt;/code&gt; returned may contain more
                  than one name of the same type. Also, note that the returned
                  &lt;code&gt;Collection&lt;/code&gt; is immutable and any entries containing byte
                  arrays are cloned to protect against subsequent modifications.
                  &lt;p&gt;
                  This method was added to version 1.4 of the Java 2 Platform Standard
                  Edition. In order to maintain backwards compatibility with existing
                  service providers, this method is not &lt;code&gt;abstract&lt;/code&gt;
                  and it provides a default implementation. Subclasses
                  should override this method with a correct implementation.                
                <return>
                    an immutable <code>Collection</code> of subject alternative
                      names (or <code>null</code>)                    
                </return>
                <throws>
                    CertificateParsingException if the extension cannot be decoded                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSubjectAlternativeNames" type="Collection<List<?>>" line="604"/>
            <javadoc line="608">
                Gets an immutable collection of issuer alternative names from the
                  &lt;code&gt;IssuerAltName&lt;/code&gt; extension, (OID = 2.5.29.18).
                  &lt;p&gt;
                  The ASN.1 definition of the &lt;code&gt;IssuerAltName&lt;/code&gt; extension is:
                  &lt;pre&gt;
                  IssuerAltName ::= GeneralNames
                  &lt;/pre&gt;
                  The ASN.1 definition of &lt;code&gt;GeneralNames&lt;/code&gt; is defined
                  in {@link #getSubjectAlternativeNames getSubjectAlternativeNames}.
                  &lt;p&gt;
                  If this certificate does not contain an &lt;code&gt;IssuerAltName&lt;/code&gt;
                  extension, &lt;code&gt;null&lt;/code&gt; is returned. Otherwise, a
                  &lt;code&gt;Collection&lt;/code&gt; is returned with an entry representing each
                  &lt;code&gt;GeneralName&lt;/code&gt; included in the extension. Each entry is a
                  &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt;
                  (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt;
                  or a byte array (the name, in string or ASN.1 DER encoded form,
                  respectively). For more details about the formats used for each
                  name type, see the &lt;code&gt;getSubjectAlternativeNames&lt;/code&gt; method.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Collection&lt;/code&gt; returned may contain more
                  than one name of the same type. Also, note that the returned
                  &lt;code&gt;Collection&lt;/code&gt; is immutable and any entries containing byte
                  arrays are cloned to protect against subsequent modifications.
                  &lt;p&gt;
                  This method was added to version 1.4 of the Java 2 Platform Standard
                  Edition. In order to maintain backwards compatibility with existing
                  service providers, this method is not &lt;code&gt;abstract&lt;/code&gt;
                  and it provides a default implementation. Subclasses
                  should override this method with a correct implementation.                
                <return>
                    an immutable <code>Collection</code> of issuer alternative
                      names (or <code>null</code>)                    
                </return>
                <throws>
                    CertificateParsingException if the extension cannot be decoded                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getIssuerAlternativeNames" type="Collection<List<?>>" line="646"/>
        </class>
    </source>