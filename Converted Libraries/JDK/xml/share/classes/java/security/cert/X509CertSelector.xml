<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.PublicKey"/>
        <import package="java.util"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.security.x509"/>
        <class name="X509CertSelector" line="13">
            <implements interface="CertSelector"/>
            <javadoc line="13">
                A &lt;code&gt;CertSelector&lt;/code&gt; that selects &lt;code&gt;X509Certificates&lt;/code&gt; that
                  match all specified criteria. This class is particularly useful when
                  selecting certificates from a &lt;code&gt;CertStore&lt;/code&gt; to build a
                  PKIX-compliant certification path.
                  &lt;p&gt;
                  When first constructed, an &lt;code&gt;X509CertSelector&lt;/code&gt; has no criteria
                  enabled and each of the &lt;code&gt;get&lt;/code&gt; methods return a default value
                  (&lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; for the {@link #getBasicConstraintsgetBasicConstraints} method). Therefore, the {@link #match match}method would return &lt;code&gt;true&lt;/code&gt; for any &lt;code&gt;X509Certificate&lt;/code&gt;.
                  Typically, several criteria are enabled (by calling{@link #setIssuer setIssuer} or{@link #setKeyUsage setKeyUsage}, for instance) and then the
                  &lt;code&gt;X509CertSelector&lt;/code&gt; is passed to{@link CertStore#getCertificates CertStore.getCertificates} or some similar
                  method.
                  &lt;p&gt;
                  Several criteria can be enabled (by calling {@link #setIssuer setIssuer}and {@link #setSerialNumber setSerialNumber},
                  for example) such that the &lt;code&gt;match&lt;/code&gt; method
                  usually uniquely matches a single &lt;code&gt;X509Certificate&lt;/code&gt;. We say
                  usually, since it is possible for two issuing CAs to have the same
                  distinguished name and each issue a certificate with the same serial
                  number. Other unique combinations include the issuer, subject,
                  subjectKeyIdentifier and/or the subjectPublicKey criteria.
                  &lt;p&gt;
                  Please refer to &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280:
                  Internet X.509 Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt; for
                  definitions of the X.509 certificate extensions mentioned below.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  Unless otherwise specified, the methods defined in this class are not
                  thread-safe. Multiple threads that need to access a single
                  object concurrently should synchronize amongst themselves and
                  provide the necessary locking. Multiple threads each manipulating
                  separate objects need not synchronize.                
                <see>
                    CertSelector                    
                </see>
                <see>
                    X509Certificate                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Steve Hanna                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="51"/>
            <declaration name="ANY_EXTENDED_KEY_USAGE" type="ObjectIdentifier" line="52"/>
            <scope line="53"/>
            <declaration name="serialNumber" type="BigInteger" line="56"/>
            <declaration name="issuer" type="X500Principal" line="57"/>
            <declaration name="subject" type="X500Principal" line="58"/>
            <declaration name="subjectKeyID" type="byte[]" line="59"/>
            <declaration name="authorityKeyID" type="byte[]" line="60"/>
            <declaration name="certificateValid" type="Date" line="61"/>
            <declaration name="privateKeyValid" type="Date" line="62"/>
            <declaration name="subjectPublicKeyAlgID" type="ObjectIdentifier" line="63"/>
            <declaration name="subjectPublicKey" type="PublicKey" line="64"/>
            <declaration name="subjectPublicKeyBytes" type="byte[]" line="65"/>
            <declaration name="keyUsage" type="boolean[]" line="66"/>
            <declaration name="keyPurposeSet" type="Set&lt;String&gt;" line="67"/>
            <declaration name="keyPurposeOIDSet" type="Set&lt;ObjectIdentifier&gt;" line="68"/>
            <declaration name="subjectAlternativeNames" type="Set&lt;List&lt;?&gt;&gt;" line="69"/>
            <declaration name="subjectAlternativeGeneralNames" type="Set&lt;GeneralNameInterface&gt;" line="70"/>
            <declaration name="policy" type="CertificatePolicySet" line="71"/>
            <declaration name="policySet" type="Set&lt;String&gt;" line="72"/>
            <declaration name="pathToNames" type="Set&lt;List&lt;?&gt;&gt;" line="73"/>
            <declaration name="pathToGeneralNames" type="Set&lt;GeneralNameInterface&gt;" line="74"/>
            <declaration name="nc" type="NameConstraintsExtension" line="75"/>
            <declaration name="ncBytes" type="byte[]" line="76"/>
            <declaration name="basicConstraints" type="int" line="77"/>
            <declaration name="x509Cert" type="X509Certificate" line="78"/>
            <declaration name="matchAllSubjectAltNames" type="boolean" line="79"/>
            <declaration name="FALSE" type="Boolean" line="80"/>
            <declaration name="PRIVATE_KEY_USAGE_ID" type="int" line="81"/>
            <declaration name="SUBJECT_ALT_NAME_ID" type="int" line="82"/>
            <declaration name="NAME_CONSTRAINTS_ID" type="int" line="83"/>
            <declaration name="CERT_POLICIES_ID" type="int" line="84"/>
            <declaration name="EXTENDED_KEY_USAGE_ID" type="int" line="85"/>
            <declaration name="NUM_OF_EXTENSIONS" type="int" line="86"/>
            <declaration name="EXTENSION_OIDS" type="String[]" line="87"/>
            <scope line="88"/>
            <declaration name="NAME_ANY" type="int" line="95"/>
            <declaration name="NAME_RFC822" type="int" line="96"/>
            <declaration name="NAME_DNS" type="int" line="97"/>
            <declaration name="NAME_X400" type="int" line="98"/>
            <declaration name="NAME_DIRECTORY" type="int" line="99"/>
            <declaration name="NAME_EDI" type="int" line="100"/>
            <declaration name="NAME_URI" type="int" line="101"/>
            <declaration name="NAME_IP" type="int" line="102"/>
            <declaration name="NAME_OID" type="int" line="103"/>
            <javadoc line="104">
                Creates an &lt;code&gt;X509CertSelector&lt;/code&gt;. Initially, no criteria are set
                  so any &lt;code&gt;X509Certificate&lt;/code&gt; will match.                
            </javadoc>
            <method name="X509CertSelector" type="constructor" line="108"/>
            <javadoc line="110">
                Sets the certificateEquals criterion. The specified
                  &lt;code&gt;X509Certificate&lt;/code&gt; must be equal to the
                  &lt;code&gt;X509Certificate&lt;/code&gt; passed to the &lt;code&gt;match&lt;/code&gt; method.
                  If &lt;code&gt;null&lt;/code&gt;, then this check is not applied.
                  &lt;p&gt;This method is particularly useful when it is necessary to
                  match a single certificate. Although other criteria can be specified
                  in conjunction with the certificateEquals criterion, it is usually not
                  practical or necessary.                
                <param>
                    cert the <code>X509Certificate</code> to match (or
                      <code>null</code>)                    
                </param>
                <see>
                    #getCertificate                    
                </see>
            </javadoc>
            <method name="setCertificate" type="void" line="123">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
            </method>
            <javadoc line="126">
                Sets the serialNumber criterion. The specified serial number
                  must match the certificate serial number in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, any certificate
                  serial number will do.                
                <param>
                    serial the certificate serial number to match
                      (or <code>null</code>)                    
                </param>
                <see>
                    #getSerialNumber                    
                </see>
            </javadoc>
            <method name="setSerialNumber" type="void" line="135">
                <params>
                    <param name="serial" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="138">
                Sets the issuer criterion. The specified distinguished name
                  must match the issuer distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, any issuer
                  distinguished name will do.                
                <param>
                    issuer a distinguished name as X500Principal
                      (or <code>null</code>)                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setIssuer" type="void" line="147">
                <params>
                    <param name="issuer" type="X500Principal"/>
                </params>
            </method>
            <javadoc line="150">
                &lt;strong&gt;Denigrated&lt;/strong&gt;, use {@linkplain #setIssuer(X500Principal)}or {@linkplain #setIssuer(byte[])} instead. This method should not be
                  relied on as it can fail to match some certificates because of a loss of
                  encoding information in the
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt; String form
                  of some distinguished names.
                  &lt;p&gt;
                  Sets the issuer criterion. The specified distinguished name
                  must match the issuer distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, any issuer
                  distinguished name will do.
                  &lt;p&gt;
                  If &lt;code&gt;issuerDN&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it should contain a
                  distinguished name, in RFC 2253 format.                
                <param>
                    issuerDN a distinguished name in RFC 2253 format
                      (or <code>null</code>)                    
                </param>
                <throws>
                    IOException if a parsing error occurs (incorrect form for DN)                    
                </throws>
            </javadoc>
            <method name="setIssuer" type="void" line="168">
                <params>
                    <param name="issuerDN" type="String"/>
                </params>
                <scope line="169"/>
                <scope line="172"/>
            </method>
            <javadoc line="176">
                Sets the issuer criterion. The specified distinguished name
                  must match the issuer distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt; is specified,
                  the issuer criterion is disabled and any issuer distinguished name will
                  do.
                  &lt;p&gt;
                  If &lt;code&gt;issuerDN&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it should contain a
                  single DER encoded distinguished name, as defined in X.501. The ASN.1
                  notation for this structure is as follows.
                  &lt;pre&gt;&lt;code&gt;
                  Name ::= CHOICE {
                  RDNSequence }
                  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
                  RelativeDistinguishedName ::=
                  SET SIZE (1 .. MAX) OF AttributeTypeAndValue
                  AttributeTypeAndValue ::= SEQUENCE {
                  type     AttributeType,
                  value    AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
                  ....
                  DirectoryString ::= CHOICE {
                  teletexString           TeletexString (SIZE (1..MAX)),
                  printableString         PrintableString (SIZE (1..MAX)),
                  universalString         UniversalString (SIZE (1..MAX)),
                  utf8String              UTF8String (SIZE (1.. MAX)),
                  bmpString               BMPString (SIZE (1..MAX)) }
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  Note that the byte array specified here is cloned to protect against
                  subsequent modifications.                
                <param>
                    issuerDN a byte array containing the distinguished name
                      in ASN.1 DER encoded form (or <code>null</code>)                    
                </param>
                <throws>
                    IOException if an encoding error occurs (incorrect form for DN)                    
                </throws>
            </javadoc>
            <method name="setIssuer" type="void" line="212">
                <params>
                    <param name="issuerDN" type="byte[]"/>
                </params>
                <scope line="213"/>
                <scope line="216"/>
            </method>
            <javadoc line="220">
                Sets the subject criterion. The specified distinguished name
                  must match the subject distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, any subject
                  distinguished name will do.                
                <param>
                    subject a distinguished name as X500Principal
                      (or <code>null</code>)                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setSubject" type="void" line="229">
                <params>
                    <param name="subject" type="X500Principal"/>
                </params>
            </method>
            <javadoc line="232">
                &lt;strong&gt;Denigrated&lt;/strong&gt;, use {@linkplain #setSubject(X500Principal)}or {@linkplain #setSubject(byte[])} instead. This method should not be
                  relied on as it can fail to match some certificates because of a loss of
                  encoding information in the RFC 2253 String form of some distinguished
                  names.
                  &lt;p&gt;
                  Sets the subject criterion. The specified distinguished name
                  must match the subject distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, any subject
                  distinguished name will do.
                  &lt;p&gt;
                  If &lt;code&gt;subjectDN&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it should contain a
                  distinguished name, in RFC 2253 format.                
                <param>
                    subjectDN a distinguished name in RFC 2253 format
                      (or <code>null</code>)                    
                </param>
                <throws>
                    IOException if a parsing error occurs (incorrect form for DN)                    
                </throws>
            </javadoc>
            <method name="setSubject" type="void" line="249">
                <params>
                    <param name="subjectDN" type="String"/>
                </params>
                <scope line="250"/>
                <scope line="253"/>
            </method>
            <javadoc line="257">
                Sets the subject criterion. The specified distinguished name
                  must match the subject distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, any subject
                  distinguished name will do.
                  &lt;p&gt;
                  If &lt;code&gt;subjectDN&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it should contain a
                  single DER encoded distinguished name, as defined in X.501. For the ASN.1
                  notation for this structure, see{@link #setIssuer(byte[] issuerDN) setIssuer(byte [] issuerDN)}.                
                <param>
                    subjectDN a byte array containing the distinguished name in
                      ASN.1 DER format (or <code>null</code>)                    
                </param>
                <throws>
                    IOException if an encoding error occurs (incorrect form for DN)                    
                </throws>
            </javadoc>
            <method name="setSubject" type="void" line="270">
                <params>
                    <param name="subjectDN" type="byte[]"/>
                </params>
                <scope line="271"/>
                <scope line="274"/>
            </method>
            <javadoc line="278">
                Sets the subjectKeyIdentifier criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain a SubjectKeyIdentifier
                  extension for which the contents of the extension
                  matches the specified criterion value.
                  If the criterion value is &lt;code&gt;null&lt;/code&gt;, no
                  subjectKeyIdentifier check will be done.
                  &lt;p&gt;
                  If &lt;code&gt;subjectKeyID&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it
                  should contain a single DER encoded value corresponding to the contents
                  of the extension value (not including the object identifier,
                  criticality setting, and encapsulating OCTET STRING)
                  for a SubjectKeyIdentifier extension.
                  The ASN.1 notation for this structure follows.
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  SubjectKeyIdentifier ::= KeyIdentifier
                  KeyIdentifier ::= OCTET STRING
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  Since the format of subject key identifiers is not mandated by
                  any standard, subject key identifiers are not parsed by the
                  &lt;code&gt;X509CertSelector&lt;/code&gt;. Instead, the values are compared using
                  a byte-by-byte comparison.
                  &lt;p&gt;
                  Note that the byte array supplied here is cloned to protect against
                  subsequent modifications.                
                <param>
                    subjectKeyID the subject key identifier (or <code>null</code>)                    
                </param>
                <see>
                    #getSubjectKeyIdentifier                    
                </see>
            </javadoc>
            <method name="setSubjectKeyIdentifier" type="void" line="308">
                <params>
                    <param name="subjectKeyID" type="byte[]"/>
                </params>
                <scope line="309"/>
                <scope line="312"/>
            </method>
            <javadoc line="316">
                Sets the authorityKeyIdentifier criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain an
                  AuthorityKeyIdentifier extension for which the contents of the
                  extension value matches the specified criterion value.
                  If the criterion value is &lt;code&gt;null&lt;/code&gt;, no
                  authorityKeyIdentifier check will be done.
                  &lt;p&gt;
                  If &lt;code&gt;authorityKeyID&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it
                  should contain a single DER encoded value corresponding to the contents
                  of the extension value (not including the object identifier,
                  criticality setting, and encapsulating OCTET STRING)
                  for an AuthorityKeyIdentifier extension.
                  The ASN.1 notation for this structure follows.
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  AuthorityKeyIdentifier ::= SEQUENCE {
                  keyIdentifier             [0] KeyIdentifier           OPTIONAL,
                  authorityCertIssuer       [1] GeneralNames            OPTIONAL,
                  authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }
                  KeyIdentifier ::= OCTET STRING
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  Authority key identifiers are not parsed by the
                  &lt;code&gt;X509CertSelector&lt;/code&gt;.  Instead, the values are
                  compared using a byte-by-byte comparison.
                  &lt;p&gt;
                  When the &lt;code&gt;keyIdentifier&lt;/code&gt; field of
                  &lt;code&gt;AuthorityKeyIdentifier&lt;/code&gt; is populated, the value is
                  usually taken from the &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; extension
                  in the issuer&apos;s certificate.  Note, however, that the result of
                  &lt;code&gt;X509Certificate.getExtensionValue(&amp;lt;SubjectKeyIdentifier Object
                  Identifier&amp;gt;)&lt;/code&gt; on the issuer&apos;s certificate may NOT be used
                  directly as the input to &lt;code&gt;setAuthorityKeyIdentifier&lt;/code&gt;.
                  This is because the SubjectKeyIdentifier contains
                  only a KeyIdentifier OCTET STRING, and not a SEQUENCE of
                  KeyIdentifier, GeneralNames, and CertificateSerialNumber.
                  In order to use the extension value of the issuer certificate&apos;s
                  &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt;
                  extension, it will be necessary to extract the value of the embedded
                  &lt;code&gt;KeyIdentifier&lt;/code&gt; OCTET STRING, then DER encode this OCTET
                  STRING inside a SEQUENCE.
                  For more details on SubjectKeyIdentifier, see{@link #setSubjectKeyIdentifier(byte[] subjectKeyID)}.
                  &lt;p&gt;
                  Note also that the byte array supplied here is cloned to protect against
                  subsequent modifications.                
                <param>
                    authorityKeyID the authority key identifier
                      (or <code>null</code>)                    
                </param>
                <see>
                    #getAuthorityKeyIdentifier                    
                </see>
            </javadoc>
            <method name="setAuthorityKeyIdentifier" type="void" line="366">
                <params>
                    <param name="authorityKeyID" type="byte[]"/>
                </params>
                <scope line="367"/>
                <scope line="370"/>
            </method>
            <javadoc line="374">
                Sets the certificateValid criterion. The specified date must fall
                  within the certificate validity period for the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, no certificateValid
                  check will be done.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Date&lt;/code&gt; supplied here is cloned to protect
                  against subsequent modifications.                
                <param>
                    certValid the <code>Date</code> to check (or <code>null</code>)                    
                </param>
                <see>
                    #getCertificateValid                    
                </see>
            </javadoc>
            <method name="setCertificateValid" type="void" line="385">
                <params>
                    <param name="certValid" type="Date"/>
                </params>
                <scope line="386"/>
                <scope line="389"/>
            </method>
            <javadoc line="393">
                Sets the privateKeyValid criterion. The specified date must fall
                  within the private key validity period for the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, no privateKeyValid
                  check will be done.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Date&lt;/code&gt; supplied here is cloned to protect
                  against subsequent modifications.                
                <param>
                    privateKeyValid the <code>Date</code> to check (or
                      <code>null</code>)                    
                </param>
                <see>
                    #getPrivateKeyValid                    
                </see>
            </javadoc>
            <method name="setPrivateKeyValid" type="void" line="405">
                <params>
                    <param name="privateKeyValid" type="Date"/>
                </params>
                <scope line="406"/>
                <scope line="409"/>
            </method>
            <javadoc line="413">
                Sets the subjectPublicKeyAlgID criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain a subject public key
                  with the specified algorithm. If &lt;code&gt;null&lt;/code&gt;, no
                  subjectPublicKeyAlgID check will be done.                
                <param>
                    oid The object identifier (OID) of the algorithm to check
                      for (or <code>null</code>). An OID is represented by a
                      set of nonnegative integers separated by periods.                    
                </param>
                <throws>
                    IOException if the OID is invalid, such as
                      the first component being not 0, 1 or 2 or the second component
                      being greater than 39.                    
                </throws>
                <see>
                    #getSubjectPublicKeyAlgID                    
                </see>
            </javadoc>
            <method name="setSubjectPublicKeyAlgID" type="void" line="426">
                <params>
                    <param name="oid" type="String"/>
                </params>
                <scope line="427"/>
                <scope line="430"/>
            </method>
            <javadoc line="434">
                Sets the subjectPublicKey criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain the specified subject public
                  key. If &lt;code&gt;null&lt;/code&gt;, no subjectPublicKey check will be done.                
                <param>
                    key the subject public key to check for (or <code>null</code>)                    
                </param>
                <see>
                    #getSubjectPublicKey                    
                </see>
            </javadoc>
            <method name="setSubjectPublicKey" type="void" line="441">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <scope line="442"/>
                <scope line="446"/>
            </method>
            <javadoc line="451">
                Sets the subjectPublicKey criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must contain the specified subject public key. If &lt;code&gt;null&lt;/code&gt;,
                  no subjectPublicKey check will be done.
                  &lt;p&gt;
                  Because this method allows the public key to be specified as a byte
                  array, it may be used for unknown key types.
                  &lt;p&gt;
                  If &lt;code&gt;key&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it should contain a
                  single DER encoded SubjectPublicKeyInfo structure, as defined in X.509.
                  The ASN.1 notation for this structure is as follows.
                  &lt;pre&gt;&lt;code&gt;
                  SubjectPublicKeyInfo  ::=  SEQUENCE  {
                  algorithm            AlgorithmIdentifier,
                  subjectPublicKey     BIT STRING  }
                  AlgorithmIdentifier  ::=  SEQUENCE  {
                  algorithm               OBJECT IDENTIFIER,
                  parameters              ANY DEFINED BY algorithm OPTIONAL  }
                  -- contains a value of the type
                  -- registered for use with the
                  -- algorithm object identifier value
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  Note that the byte array supplied here is cloned to protect against
                  subsequent modifications.                
                <param>
                    key a byte array containing the subject public key in ASN.1 DER
                      form (or <code>null</code>)                    
                </param>
                <throws>
                    IOException if an encoding error occurs (incorrect form for
                      subject public key)                    
                </throws>
                <see>
                    #getSubjectPublicKey                    
                </see>
            </javadoc>
            <method name="setSubjectPublicKey" type="void" line="482">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
                <scope line="483"/>
                <scope line="487"/>
            </method>
            <javadoc line="492">
                Sets the keyUsage criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must allow the specified keyUsage values. If &lt;code&gt;null&lt;/code&gt;, no
                  keyUsage check will be done. Note that an &lt;code&gt;X509Certificate&lt;/code&gt;
                  that has no keyUsage extension implicitly allows all keyUsage values.
                  &lt;p&gt;
                  Note that the boolean array supplied here is cloned to protect against
                  subsequent modifications.                
                <param>
                    keyUsage a boolean array in the same format as the boolean
                      array returned by{@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}.
                      Or <code>null</code>.                    
                </param>
                <see>
                    #getKeyUsage                    
                </see>
            </javadoc>
            <method name="setKeyUsage" type="void" line="505">
                <params>
                    <param name="keyUsage" type="boolean[]"/>
                </params>
                <scope line="506"/>
                <scope line="509"/>
            </method>
            <javadoc line="513">
                Sets the extendedKeyUsage criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must allow the specified key purposes in its extended key usage
                  extension. If &lt;code&gt;keyPurposeSet&lt;/code&gt; is empty or &lt;code&gt;null&lt;/code&gt;,
                  no extendedKeyUsage check will be done. Note that an
                  &lt;code&gt;X509Certificate&lt;/code&gt; that has no extendedKeyUsage extension
                  implicitly allows all key purposes.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Set&lt;/code&gt; is cloned to protect against
                  subsequent modifications.                
                <param>
                    keyPurposeSet a <code>Set</code> of key purpose OIDs in string
                      format (or <code>null</code>). Each OID is represented by a set of
                      nonnegative integers separated by periods.                    
                </param>
                <throws>
                    IOException if the OID is invalid, such as
                      the first component being not 0, 1 or 2 or the second component
                      being greater than 39.                    
                </throws>
                <see>
                    #getExtendedKeyUsage                    
                </see>
            </javadoc>
            <method name="setExtendedKeyUsage" type="void" line="531">
                <params>
                    <param name="keyPurposeSet" type="Set<String>"/>
                </params>
                <scope line="532"/>
                <scope line="536">
                    <scope line="539"/>
                </scope>
            </method>
            <javadoc line="544">
                Enables/disables matching all of the subjectAlternativeNames
                  specified in the {@link #setSubjectAlternativeNamessetSubjectAlternativeNames} or {@link #addSubjectAlternativeNameaddSubjectAlternativeName} methods. If enabled,
                  the &lt;code&gt;X509Certificate&lt;/code&gt; must contain all of the
                  specified subject alternative names. If disabled, the
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain at least one of the
                  specified subject alternative names.
                  &lt;p&gt;The matchAllNames flag is &lt;code&gt;true&lt;/code&gt; by default.                
                <param>
                    matchAllNames if <code>true</code>, the flag is enabled;
                      if <code>false</code>, the flag is disabled.                    
                </param>
                <see>
                    #getMatchAllSubjectAltNames                    
                </see>
            </javadoc>
            <method name="setMatchAllSubjectAltNames" type="void" line="556">
                <params>
                    <param name="matchAllNames" type="boolean"/>
                </params>
            </method>
            <javadoc line="559">
                Sets the subjectAlternativeNames criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain all or at least one of the
                  specified subjectAlternativeNames, depending on the value of
                  the matchAllNames flag (see {@link #setMatchAllSubjectAltNamessetMatchAllSubjectAltNames}).
                  &lt;p&gt;
                  This method allows the caller to specify, with a single method call,
                  the complete set of subject alternative names for the
                  subjectAlternativeNames criterion. The specified value replaces
                  the previous value for the subjectAlternativeNames criterion.
                  &lt;p&gt;
                  The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a
                  &lt;code&gt;Collection&lt;/code&gt; with one
                  entry for each name to be included in the subject alternative name
                  criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an
                  &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second
                  entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in
                  string or ASN.1 DER encoded form, respectively).
                  There can be multiple names of the same type. If &lt;code&gt;null&lt;/code&gt;
                  is supplied as the value for this argument, no
                  subjectAlternativeNames check will be performed.
                  &lt;p&gt;
                  Each subject alternative name in the &lt;code&gt;Collection&lt;/code&gt;
                  may be specified either as a &lt;code&gt;String&lt;/code&gt; or as an ASN.1 encoded
                  byte array. For more details about the formats used, see{@link #addSubjectAlternativeName(int type,String name)addSubjectAlternativeName(int type, String name)} and{@link #addSubjectAlternativeName(int type,byte[] name)addSubjectAlternativeName(int type, byte [] name)}.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, specify the byte
                  array form instead of the String form. See the note in{@link #addSubjectAlternativeName(int,String)} for more information.
                  &lt;p&gt;
                  Note that the &lt;code&gt;names&lt;/code&gt; parameter can contain duplicate
                  names (same name and name type), but they may be removed from the
                  &lt;code&gt;Collection&lt;/code&gt; of names returned by the{@link #getSubjectAlternativeNames getSubjectAlternativeNames} method.
                  &lt;p&gt;
                  Note that a deep copy is performed on the &lt;code&gt;Collection&lt;/code&gt; to
                  protect against subsequent modifications.                
                <param>
                    names a <code>Collection</code> of names (or <code>null</code>)                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
                <see>
                    #getSubjectAlternativeNames                    
                </see>
            </javadoc>
            <method name="setSubjectAlternativeNames" type="void" line="598">
                <params>
                    <param name="names" type="Collection<List<?>>"/>
                </params>
                <scope line="599"/>
                <scope line="603">
                    <scope line="604"/>
                    <declaration name="tempNames" type="Set&lt;List&lt;?&gt;&gt;" line="609"/>
                </scope>
            </method>
            <javadoc line="614">
                Adds a name to the subjectAlternativeNames criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain all or at least one
                  of the specified subjectAlternativeNames, depending on the value of
                  the matchAllNames flag (see {@link #setMatchAllSubjectAltNamessetMatchAllSubjectAltNames}).
                  &lt;p&gt;
                  This method allows the caller to add a name to the set of subject
                  alternative names.
                  The specified name is added to any previous value for the
                  subjectAlternativeNames criterion. If the specified name is a
                  duplicate, it may be ignored.
                  &lt;p&gt;
                  The name is provided in string format.
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc822.txt&quot;&gt;RFC 822&lt;/a&gt;, DNS, and URI
                  names use the well-established string formats for those types (subject to
                  the restrictions included in RFC 3280). IPv4 address names are
                  supplied using dotted quad notation. OID address names are represented
                  as a series of nonnegative integers separated by periods. And
                  directory names (distinguished names) are supplied in RFC 2253 format.
                  No standard string format is defined for otherNames, X.400 names,
                  EDI party names, IPv6 address names, or any other type of names. They
                  should be specified using the{@link #addSubjectAlternativeName(int type,byte[] name)addSubjectAlternativeName(int type, byte [] name)}method.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, use{@linkplain #addSubjectAlternativeName(int,byte[])} instead.
                  This method should not be relied on as it can fail to match some
                  certificates because of a loss of encoding information in the RFC 2253
                  String form of some distinguished names.                
                <param>
                    type the name type (0-8, as specified in
                      RFC 3280, section 4.2.1.7)                    
                </param>
                <param>
                    name the name in string form (not <code>null</code>)                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="addSubjectAlternativeName" type="void" line="646">
                <params>
                    <param name="type" type="int"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="649">
                Adds a name to the subjectAlternativeNames criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain all or at least one
                  of the specified subjectAlternativeNames, depending on the value of
                  the matchAllNames flag (see {@link #setMatchAllSubjectAltNamessetMatchAllSubjectAltNames}).
                  &lt;p&gt;
                  This method allows the caller to add a name to the set of subject
                  alternative names.
                  The specified name is added to any previous value for the
                  subjectAlternativeNames criterion. If the specified name is a
                  duplicate, it may be ignored.
                  &lt;p&gt;
                  The name is provided as a byte array. This byte array should contain
                  the DER encoded name, as it would appear in the GeneralName structure
                  defined in RFC 3280 and X.509. The encoded byte array should only contain
                  the encoded value of the name, and should not include the tag associated
                  with the name in the GeneralName structure. The ASN.1 definition of this
                  structure appears below.
                  &lt;pre&gt;&lt;code&gt;
                  GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  Note that the byte array supplied here is cloned to protect against
                  subsequent modifications.                
                <param>
                    type the name type (0-8, as listed above)                    
                </param>
                <param>
                    name a byte array containing the name in ASN.1 DER encoded form                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="addSubjectAlternativeName" type="void" line="686">
                <params>
                    <param name="type" type="int"/>
                    <param name="name" type="byte[]"/>
                </params>
            </method>
            <javadoc line="689">
                A private method that adds a name (String or byte array) to the
                  subjectAlternativeNames criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must contain the specified subjectAlternativeName.                
                <param>
                    type the name type (0-8, as specified in
                      RFC 3280, section 4.2.1.7)                    
                </param>
                <param>
                    name the name in string or byte array form                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="addSubjectAlternativeNameInternal" type="void" line="698">
                <params>
                    <param name="type" type="int"/>
                    <param name="name" type="Object"/>
                </params>
                <declaration name="tempName" type="GeneralNameInterface" line="699"/>
                <scope line="700"/>
                <scope line="703"/>
                <declaration name="list" type="List&lt;Object&gt;" line="706"/>
            </method>
            <javadoc line="712">
                Parse an argument of the form passed to setSubjectAlternativeNames,
                  returning a &lt;code&gt;Collection&lt;/code&gt; of
                  &lt;code&gt;GeneralNameInterface&lt;/code&gt;s.
                  Throw an IllegalArgumentException or a ClassCastException
                  if the argument is malformed.                
                <param>
                    names a Collection with one entry per name.
                      Each entry is a <code>List</code> whose first entry
                      is an Integer (the name type, 0-8) and whose second
                      entry is a String or a byte array (the name, in
                      string or ASN.1 DER encoded form, respectively).
                      There can be multiple names of the same type. Null is
                      not an acceptable value.                    
                </param>
                <return>
                    a Set of <code>GeneralNameInterface</code>s                    
                </return>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="parseNames" type="Set<GeneralNameInterface>" line="728">
                <params>
                    <param name="names" type="Collection<List<?>>"/>
                </params>
                <declaration name="genNames" type="Set&lt;GeneralNameInterface&gt;" line="729"/>
                <scope line="730">
                    <scope line="731"/>
                    <declaration name="o" type="Object" line="734"/>
                    <scope line="735"/>
                    <declaration name="nameType" type="int" line="738"/>
                </scope>
            </method>
            <javadoc line="744">
                Compare for equality two objects of the form passed to
                  setSubjectAlternativeNames (or X509CRLSelector.setIssuerNames).
                  Throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; or a
                  &lt;code&gt;ClassCastException&lt;/code&gt; if one of the objects is malformed.                
                <param>
                    object1 a Collection containing the first object to compare                    
                </param>
                <param>
                    object2 a Collection containing the second object to compare                    
                </param>
                <return>
                    true if the objects are equal, false otherwise                    
                </return>
            </javadoc>
            <method name="equalNames" type="boolean" line="753">
                <params>
                    <param name="object1" type="Collection"/>
                    <param name="object2" type="Collection"/>
                </params>
                <scope line="754"/>
            </method>
            <javadoc line="759">
                Make a &lt;code&gt;GeneralNameInterface&lt;/code&gt; out of a name type (0-8) and an
                  Object that may be a byte array holding the ASN.1 DER encoded
                  name or a String form of the name.  Except for X.509
                  Distinguished Names, the String form of the name must not be the
                  result from calling toString on an existing GeneralNameInterface
                  implementing class.  The output of toString is not compatible
                  with the String constructors for names other than Distinguished
                  Names.                
                <param>
                    type name type (0-8)                    
                </param>
                <param>
                    name name as ASN.1 Der-encoded byte array or String                    
                </param>
                <return>
                    a GeneralNameInterface name                    
                </return>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="makeGeneralNameInterface" type="GeneralNameInterface" line="773">
                <params>
                    <param name="type" type="int"/>
                    <param name="name" type="Object"/>
                </params>
                <declaration name="result" type="GeneralNameInterface" line="774"/>
                <scope line="775"/>
                <scope line="778">
                    <scope line="779"/>
                    <scope line="804"/>
                </scope>
                <scope line="808">
                    <declaration name="val" type="DerValue" line="809"/>
                    <scope line="810"/>
                    <scope line="844"/>
                </scope>
                <scope line="848">
                    <scope line="849"/>
                </scope>
            </method>
            <javadoc line="856">
                Sets the name constraints criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must have subject and subject alternative names that
                  meet the specified name constraints.
                  &lt;p&gt;
                  The name constraints are specified as a byte array. This byte array
                  should contain the DER encoded form of the name constraints, as they
                  would appear in the NameConstraints structure defined in RFC 3280
                  and X.509. The ASN.1 definition of this structure appears below.
                  &lt;pre&gt;&lt;code&gt;
                  NameConstraints ::= SEQUENCE {
                  permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
                  excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
                  GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
                  GeneralSubtree ::= SEQUENCE {
                  base                    GeneralName,
                  minimum         [0]     BaseDistance DEFAULT 0,
                  maximum         [1]     BaseDistance OPTIONAL }
                  BaseDistance ::= INTEGER (0..MAX)
                  GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  Note that the byte array supplied here is cloned to protect against
                  subsequent modifications.                
                <param>
                    bytes a byte array containing the ASN.1 DER encoding of
                      a NameConstraints extension to be used for checking
                      name constraints. Only the value of the extension is
                      included, not the OID or criticality flag. Can be
                      <code>null</code>,
                      in which case no name constraints check will be performed.                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
                <see>
                    #getNameConstraints                    
                </see>
            </javadoc>
            <method name="setNameConstraints" type="void" line="898">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <scope line="899"/>
                <scope line="903"/>
            </method>
            <javadoc line="908">
                Sets the basic constraints constraint. If the value is greater than or
                  equal to zero, &lt;code&gt;X509Certificates&lt;/code&gt; must include a
                  basicConstraints extension with
                  a pathLen of at least this value. If the value is -2, only end-entity
                  certificates are accepted. If the value is -1, no check is done.
                  &lt;p&gt;
                  This constraint is useful when building a certification path forward
                  (from the target toward the trust anchor. If a partial path has been
                  built, any candidate certificate must have a maxPathLen value greater
                  than or equal to the number of certificates in the partial path.                
                <param>
                    minMaxPathLen the value for the basic constraints constraint                    
                </param>
                <throws>
                    IllegalArgumentException if the value is less than -2                    
                </throws>
                <see>
                    #getBasicConstraints                    
                </see>
            </javadoc>
            <method name="setBasicConstraints" type="void" line="923">
                <params>
                    <param name="minMaxPathLen" type="int"/>
                </params>
                <scope line="924"/>
            </method>
            <javadoc line="929">
                Sets the policy constraint. The &lt;code&gt;X509Certificate&lt;/code&gt; must
                  include at least one of the specified policies in its certificate
                  policies extension. If &lt;code&gt;certPolicySet&lt;/code&gt; is empty, then the
                  &lt;code&gt;X509Certificate&lt;/code&gt; must include at least some specified policy
                  in its certificate policies extension. If &lt;code&gt;certPolicySet&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no policy check will be performed.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Set&lt;/code&gt; is cloned to protect against
                  subsequent modifications.                
                <param>
                    certPolicySet a <code>Set</code> of certificate policy OIDs in
                      string format (or <code>null</code>). Each OID is
                      represented by a set of nonnegative integers
                      separated by periods.                    
                </param>
                <throws>
                    IOException if a parsing error occurs on the OID such as
                      the first component is not 0, 1 or 2 or the second component is
                      greater than 39.                    
                </throws>
                <see>
                    #getPolicy                    
                </see>
            </javadoc>
            <method name="setPolicy" type="void" line="948">
                <params>
                    <param name="certPolicySet" type="Set<String>"/>
                </params>
                <scope line="949"/>
                <scope line="953">
                    <declaration name="tempSet" type="Set&lt;String&gt;" line="954"/>
                    <declaration name="i" type="Iterator&lt;String&gt;" line="955"/>
                    <declaration name="polIdVector" type="Vector&lt;CertificatePolicyId&gt;" line="956"/>
                    <scope line="957">
                        <declaration name="o" type="Object" line="958"/>
                        <scope line="959"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="968">
                Sets the pathToNames criterion. The &lt;code&gt;X509Certificate&lt;/code&gt; must
                  not include name constraints that would prohibit building a
                  path to the specified names.
                  &lt;p&gt;
                  This method allows the caller to specify, with a single method call,
                  the complete set of names which the &lt;code&gt;X509Certificates&lt;/code&gt;&apos;s
                  name constraints must permit. The specified value replaces
                  the previous value for the pathToNames criterion.
                  &lt;p&gt;
                  This constraint is useful when building a certification path forward
                  (from the target toward the trust anchor. If a partial path has been
                  built, any candidate certificate must not include name constraints that
                  would prohibit building a path to any of the names in the partial path.
                  &lt;p&gt;
                  The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a
                  &lt;code&gt;Collection&lt;/code&gt; with one
                  entry for each name to be included in the pathToNames
                  criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an
                  &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second
                  entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in
                  string or ASN.1 DER encoded form, respectively).
                  There can be multiple names of the same type. If &lt;code&gt;null&lt;/code&gt;
                  is supplied as the value for this argument, no
                  pathToNames check will be performed.
                  &lt;p&gt;
                  Each name in the &lt;code&gt;Collection&lt;/code&gt;
                  may be specified either as a &lt;code&gt;String&lt;/code&gt; or as an ASN.1 encoded
                  byte array. For more details about the formats used, see{@link #addPathToName(int type,String name)addPathToName(int type, String name)} and{@link #addPathToName(int type,byte[] name)addPathToName(int type, byte [] name)}.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, specify the byte
                  array form instead of the String form. See the note in{@link #addPathToName(int,String)} for more information.
                  &lt;p&gt;
                  Note that the &lt;code&gt;names&lt;/code&gt; parameter can contain duplicate
                  names (same name and name type), but they may be removed from the
                  &lt;code&gt;Collection&lt;/code&gt; of names returned by the{@link #getPathToNames getPathToNames} method.
                  &lt;p&gt;
                  Note that a deep copy is performed on the &lt;code&gt;Collection&lt;/code&gt; to
                  protect against subsequent modifications.                
                <param>
                    names a <code>Collection</code> with one entry per name
                      (or <code>null</code>)                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
                <see>
                    #getPathToNames                    
                </see>
            </javadoc>
            <method name="setPathToNames" type="void" line="1012">
                <params>
                    <param name="names" type="Collection<List<?>>"/>
                </params>
                <scope line="1013"/>
                <scope line="1017">
                    <declaration name="tempNames" type="Set&lt;List&lt;?&gt;&gt;" line="1018"/>
                </scope>
            </method>
            <method name="setPathToNamesInternal" type="void" line="1023">
                <params>
                    <param name="names" type="Set<GeneralNameInterface>"/>
                </params>
            </method>
            <javadoc line="1027">
                Adds a name to the pathToNames criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must not include name constraints that would prohibit building a
                  path to the specified name.
                  &lt;p&gt;
                  This method allows the caller to add a name to the set of names which
                  the &lt;code&gt;X509Certificates&lt;/code&gt;&apos;s name constraints must permit.
                  The specified name is added to any previous value for the
                  pathToNames criterion.  If the name is a duplicate, it may be ignored.
                  &lt;p&gt;
                  The name is provided in string format. RFC 822, DNS, and URI names
                  use the well-established string formats for those types (subject to
                  the restrictions included in RFC 3280). IPv4 address names are
                  supplied using dotted quad notation. OID address names are represented
                  as a series of nonnegative integers separated by periods. And
                  directory names (distinguished names) are supplied in RFC 2253 format.
                  No standard string format is defined for otherNames, X.400 names,
                  EDI party names, IPv6 address names, or any other type of names. They
                  should be specified using the{@link #addPathToName(int type,byte[] name)addPathToName(int type, byte [] name)} method.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, use{@linkplain #addPathToName(int,byte[])} instead.
                  This method should not be relied on as it can fail to match some
                  certificates because of a loss of encoding information in the RFC 2253
                  String form of some distinguished names.                
                <param>
                    type the name type (0-8, as specified in
                      RFC 3280, section 4.2.1.7)                    
                </param>
                <param>
                    name the name in string form                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="addPathToName" type="void" line="1056">
                <params>
                    <param name="type" type="int"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1059">
                Adds a name to the pathToNames criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must not include name constraints that would prohibit building a
                  path to the specified name.
                  &lt;p&gt;
                  This method allows the caller to add a name to the set of names which
                  the &lt;code&gt;X509Certificates&lt;/code&gt;&apos;s name constraints must permit.
                  The specified name is added to any previous value for the
                  pathToNames criterion. If the name is a duplicate, it may be ignored.
                  &lt;p&gt;
                  The name is provided as a byte array. This byte array should contain
                  the DER encoded name, as it would appear in the GeneralName structure
                  defined in RFC 3280 and X.509. The ASN.1 definition of this structure
                  appears in the documentation for{@link #addSubjectAlternativeName(int type,byte[] name)addSubjectAlternativeName(int type, byte [] name)}.
                  &lt;p&gt;
                  Note that the byte array supplied here is cloned to protect against
                  subsequent modifications.                
                <param>
                    type the name type (0-8, as specified in
                      RFC 3280, section 4.2.1.7)                    
                </param>
                <param>
                    name a byte array containing the name in ASN.1 DER encoded form                    
                </param>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="addPathToName" type="void" line="1081">
                <params>
                    <param name="type" type="int"/>
                    <param name="name" type="byte[]"/>
                </params>
            </method>
            <javadoc line="1084">
                A private method that adds a name (String or byte array) to the
                  pathToNames criterion. The &lt;code&gt;X509Certificate&lt;/code&gt; must contain
                  the specified pathToName.                
                <param>
                    type the name type (0-8, as specified in
                      RFC 3280, section 4.2.1.7)                    
                </param>
                <param>
                    name the name in string or byte array form                    
                </param>
                <throws>
                    IOException if an encoding error occurs (incorrect form for DN)                    
                </throws>
            </javadoc>
            <method name="addPathToNameInternal" type="void" line="1093">
                <params>
                    <param name="type" type="int"/>
                    <param name="name" type="Object"/>
                </params>
                <declaration name="tempName" type="GeneralNameInterface" line="1094"/>
                <scope line="1095"/>
                <declaration name="list" type="List&lt;Object&gt;" line="1099"/>
            </method>
            <javadoc line="1105">
                Returns the certificateEquals criterion. The specified
                  &lt;code&gt;X509Certificate&lt;/code&gt; must be equal to the
                  &lt;code&gt;X509Certificate&lt;/code&gt; passed to the &lt;code&gt;match&lt;/code&gt; method.
                  If &lt;code&gt;null&lt;/code&gt;, this check is not applied.                
                <return>
                    the <code>X509Certificate</code> to match (or <code>null</code>)                    
                </return>
                <see>
                    #setCertificate                    
                </see>
            </javadoc>
            <method name="getCertificate" type="X509Certificate" line="1113"/>
            <javadoc line="1116">
                Returns the serialNumber criterion. The specified serial number
                  must match the certificate serial number in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, any certificate
                  serial number will do.                
                <return>
                    the certificate serial number to match
                      (or <code>null</code>)                    
                </return>
                <see>
                    #setSerialNumber                    
                </see>
            </javadoc>
            <method name="getSerialNumber" type="BigInteger" line="1125"/>
            <javadoc line="1128">
                Returns the issuer criterion as an &lt;code&gt;X500Principal&lt;/code&gt;. This
                  distinguished name must match the issuer distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, the issuer criterion
                  is disabled and any issuer distinguished name will do.                
                <return>
                    the required issuer distinguished name as X500Principal
                      (or <code>null</code>)                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getIssuer" type="X500Principal" line="1137"/>
            <javadoc line="1140">
                &lt;strong&gt;Denigrated&lt;/strong&gt;, use {@linkplain #getIssuer()} or{@linkplain #getIssuerAsBytes()} instead. This method should not be
                  relied on as it can fail to match some certificates because of a loss of
                  encoding information in the RFC 2253 String form of some distinguished
                  names.
                  &lt;p&gt;
                  Returns the issuer criterion as a &lt;code&gt;String&lt;/code&gt;. This
                  distinguished name must match the issuer distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, the issuer criterion
                  is disabled and any issuer distinguished name will do.
                  &lt;p&gt;
                  If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a
                  distinguished name, in RFC 2253 format.                
                <return>
                    the required issuer distinguished name in RFC 2253 format
                      (or <code>null</code>)                    
                </return>
            </javadoc>
            <method name="getIssuerAsString" type="String" line="1156"/>
            <javadoc line="1159">
                Returns the issuer criterion as a byte array. This distinguished name
                  must match the issuer distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, the issuer criterion
                  is disabled and any issuer distinguished name will do.
                  &lt;p&gt;
                  If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a byte
                  array containing a single DER encoded distinguished name, as defined in
                  X.501. The ASN.1 notation for this structure is supplied in the
                  documentation for{@link #setIssuer(byte[] issuerDN) setIssuer(byte [] issuerDN)}.
                  &lt;p&gt;
                  Note that the byte array returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    a byte array containing the required issuer distinguished name
                      in ASN.1 DER format (or <code>null</code>)                    
                </return>
                <throws>
                    IOException if an encoding error occurs                    
                </throws>
            </javadoc>
            <method name="getIssuerAsBytes" type="byte[]" line="1176"/>
            <javadoc line="1179">
                Returns the subject criterion as an &lt;code&gt;X500Principal&lt;/code&gt;. This
                  distinguished name must match the subject distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, the subject criterion
                  is disabled and any subject distinguished name will do.                
                <return>
                    the required subject distinguished name as X500Principal
                      (or <code>null</code>)                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSubject" type="X500Principal" line="1188"/>
            <javadoc line="1191">
                &lt;strong&gt;Denigrated&lt;/strong&gt;, use {@linkplain #getSubject()} or{@linkplain #getSubjectAsBytes()} instead. This method should not be
                  relied on as it can fail to match some certificates because of a loss of
                  encoding information in the RFC 2253 String form of some distinguished
                  names.
                  &lt;p&gt;
                  Returns the subject criterion as a &lt;code&gt;String&lt;/code&gt;. This
                  distinguished name must match the subject distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, the subject criterion
                  is disabled and any subject distinguished name will do.
                  &lt;p&gt;
                  If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a
                  distinguished name, in RFC 2253 format.                
                <return>
                    the required subject distinguished name in RFC 2253 format
                      (or <code>null</code>)                    
                </return>
            </javadoc>
            <method name="getSubjectAsString" type="String" line="1207"/>
            <javadoc line="1210">
                Returns the subject criterion as a byte array. This distinguished name
                  must match the subject distinguished name in the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, the subject criterion
                  is disabled and any subject distinguished name will do.
                  &lt;p&gt;
                  If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a byte
                  array containing a single DER encoded distinguished name, as defined in
                  X.501. The ASN.1 notation for this structure is supplied in the
                  documentation for{@link #setSubject(byte[] subjectDN) setSubject(byte [] subjectDN)}.
                  &lt;p&gt;
                  Note that the byte array returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    a byte array containing the required subject distinguished name
                      in ASN.1 DER format (or <code>null</code>)                    
                </return>
                <throws>
                    IOException if an encoding error occurs                    
                </throws>
            </javadoc>
            <method name="getSubjectAsBytes" type="byte[]" line="1227"/>
            <javadoc line="1230">
                Returns the subjectKeyIdentifier criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain a SubjectKeyIdentifier
                  extension with the specified value. If &lt;code&gt;null&lt;/code&gt;, no
                  subjectKeyIdentifier check will be done.
                  &lt;p&gt;
                  Note that the byte array returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    the key identifier (or <code>null</code>)                    
                </return>
                <see>
                    #setSubjectKeyIdentifier                    
                </see>
            </javadoc>
            <method name="getSubjectKeyIdentifier" type="byte[]" line="1241">
                <scope line="1242"/>
            </method>
            <javadoc line="1247">
                Returns the authorityKeyIdentifier criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain a AuthorityKeyIdentifier
                  extension with the specified value. If &lt;code&gt;null&lt;/code&gt;, no
                  authorityKeyIdentifier check will be done.
                  &lt;p&gt;
                  Note that the byte array returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    the key identifier (or <code>null</code>)                    
                </return>
                <see>
                    #setAuthorityKeyIdentifier                    
                </see>
            </javadoc>
            <method name="getAuthorityKeyIdentifier" type="byte[]" line="1258">
                <scope line="1259"/>
            </method>
            <javadoc line="1264">
                Returns the certificateValid criterion. The specified date must fall
                  within the certificate validity period for the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, no certificateValid
                  check will be done.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Date&lt;/code&gt; returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    the <code>Date</code> to check (or <code>null</code>)                    
                </return>
                <see>
                    #setCertificateValid                    
                </see>
            </javadoc>
            <method name="getCertificateValid" type="Date" line="1275">
                <scope line="1276"/>
            </method>
            <javadoc line="1281">
                Returns the privateKeyValid criterion. The specified date must fall
                  within the private key validity period for the
                  &lt;code&gt;X509Certificate&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, no privateKeyValid
                  check will be done.
                  &lt;p&gt;
                  Note that the &lt;code&gt;Date&lt;/code&gt; returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    the <code>Date</code> to check (or <code>null</code>)                    
                </return>
                <see>
                    #setPrivateKeyValid                    
                </see>
            </javadoc>
            <method name="getPrivateKeyValid" type="Date" line="1292">
                <scope line="1293"/>
            </method>
            <javadoc line="1298">
                Returns the subjectPublicKeyAlgID criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain a subject public key
                  with the specified algorithm. If &lt;code&gt;null&lt;/code&gt;, no
                  subjectPublicKeyAlgID check will be done.                
                <return>
                    the object identifier (OID) of the signature algorithm to check
                      for (or <code>null</code>). An OID is represented by a set of
                      nonnegative integers separated by periods.                    
                </return>
                <see>
                    #setSubjectPublicKeyAlgID                    
                </see>
            </javadoc>
            <method name="getSubjectPublicKeyAlgID" type="String" line="1308">
                <scope line="1309"/>
            </method>
            <javadoc line="1314">
                Returns the subjectPublicKey criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain the specified subject
                  public key. If &lt;code&gt;null&lt;/code&gt;, no subjectPublicKey check will be done.                
                <return>
                    the subject public key to check for (or <code>null</code>)                    
                </return>
                <see>
                    #setSubjectPublicKey                    
                </see>
            </javadoc>
            <method name="getSubjectPublicKey" type="PublicKey" line="1321"/>
            <javadoc line="1324">
                Returns the keyUsage criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must allow the specified keyUsage values. If null, no keyUsage
                  check will be done.
                  &lt;p&gt;
                  Note that the boolean array returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    a boolean array in the same format as the boolean
                      array returned by{@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}.
                      Or <code>null</code>.                    
                </return>
                <see>
                    #setKeyUsage                    
                </see>
            </javadoc>
            <method name="getKeyUsage" type="boolean[]" line="1336">
                <scope line="1337"/>
            </method>
            <javadoc line="1342">
                Returns the extendedKeyUsage criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must allow the specified key purposes in its extended key usage
                  extension. If the &lt;code&gt;keyPurposeSet&lt;/code&gt; returned is empty or
                  &lt;code&gt;null&lt;/code&gt;, no extendedKeyUsage check will be done. Note that an
                  &lt;code&gt;X509Certificate&lt;/code&gt; that has no extendedKeyUsage extension
                  implicitly allows all key purposes.                
                <return>
                    an immutable <code>Set</code> of key purpose OIDs in string
                      format (or <code>null</code>)                    
                </return>
                <see>
                    #setExtendedKeyUsage                    
                </see>
            </javadoc>
            <method name="getExtendedKeyUsage" type="Set<String>" line="1353"/>
            <javadoc line="1356">
                Indicates if the &lt;code&gt;X509Certificate&lt;/code&gt; must contain all
                  or at least one of the subjectAlternativeNames
                  specified in the {@link #setSubjectAlternativeNamessetSubjectAlternativeNames} or {@link #addSubjectAlternativeNameaddSubjectAlternativeName} methods. If &lt;code&gt;true&lt;/code&gt;,
                  the &lt;code&gt;X509Certificate&lt;/code&gt; must contain all of the
                  specified subject alternative names. If &lt;code&gt;false&lt;/code&gt;, the
                  &lt;code&gt;X509Certificate&lt;/code&gt; must contain at least one of the
                  specified subject alternative names.                
                <return>
                    <code>true</code> if the flag is enabled;
                      <code>false</code> if the flag is disabled. The flag is
                      <code>true</code> by default.                    
                </return>
                <see>
                    #setMatchAllSubjectAltNames                    
                </see>
            </javadoc>
            <method name="getMatchAllSubjectAltNames" type="boolean" line="1369"/>
            <javadoc line="1372">
                Returns a copy of the subjectAlternativeNames criterion.
                  The &lt;code&gt;X509Certificate&lt;/code&gt; must contain all or at least one
                  of the specified subjectAlternativeNames, depending on the value
                  of the matchAllNames flag (see {@link #getMatchAllSubjectAltNamesgetMatchAllSubjectAltNames}). If the value returned is
                  &lt;code&gt;null&lt;/code&gt;, no subjectAlternativeNames check will be performed.
                  &lt;p&gt;
                  If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a
                  &lt;code&gt;Collection&lt;/code&gt; with
                  one entry for each name to be included in the subject alternative name
                  criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an
                  &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second
                  entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in
                  string or ASN.1 DER encoded form, respectively).
                  There can be multiple names of the same type.  Note that the
                  &lt;code&gt;Collection&lt;/code&gt; returned may contain duplicate names (same name
                  and name type).
                  &lt;p&gt;
                  Each subject alternative name in the &lt;code&gt;Collection&lt;/code&gt;
                  may be specified either as a &lt;code&gt;String&lt;/code&gt; or as an ASN.1 encoded
                  byte array. For more details about the formats used, see{@link #addSubjectAlternativeName(int type,String name)addSubjectAlternativeName(int type, String name)} and{@link #addSubjectAlternativeName(int type,byte[] name)addSubjectAlternativeName(int type, byte [] name)}.
                  &lt;p&gt;
                  Note that a deep copy is performed on the &lt;code&gt;Collection&lt;/code&gt; to
                  protect against subsequent modifications.                
                <return>
                    a <code>Collection</code> of names (or <code>null</code>)                    
                </return>
                <see>
                    #setSubjectAlternativeNames                    
                </see>
            </javadoc>
            <method name="getSubjectAlternativeNames" type="Collection<List<?>>" line="1399">
                <scope line="1400"/>
            </method>
            <javadoc line="1405">
                Clone an object of the form passed to
                  setSubjectAlternativeNames and setPathToNames.
                  Throw a &lt;code&gt;RuntimeException&lt;/code&gt; if the argument is malformed.
                  &lt;p&gt;
                  This method wraps cloneAndCheckNames, changing any
                  &lt;code&gt;IOException&lt;/code&gt; into a &lt;code&gt;RuntimeException&lt;/code&gt;. This
                  method should be used when the object being
                  cloned has already been checked, so there should never be any exceptions.                
                <param>
                    names a <code>Collection</code> with one entry per name.
                      Each entry is a <code>List</code> whose first entry
                      is an Integer (the name type, 0-8) and whose second
                      entry is a String or a byte array (the name, in
                      string or ASN.1 DER encoded form, respectively).
                      There can be multiple names of the same type. Null
                      is not an acceptable value.                    
                </param>
                <return>
                    a deep copy of the specified <code>Collection</code>                    
                </return>
                <throws>
                    RuntimeException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="cloneNames" type="Set<List<?>>" line="1424">
                <params>
                    <param name="names" type="Collection<List<?>>"/>
                </params>
                <scope line="1425"/>
                <scope line="1428"/>
            </method>
            <javadoc line="1432">
                Clone and check an argument of the form passed to
                  setSubjectAlternativeNames and setPathToNames.
                  Throw an &lt;code&gt;IOException&lt;/code&gt; if the argument is malformed.                
                <param>
                    names a <code>Collection</code> with one entry per name.
                      Each entry is a <code>List</code> whose first entry
                      is an Integer (the name type, 0-8) and whose second
                      entry is a String or a byte array (the name, in
                      string or ASN.1 DER encoded form, respectively).
                      There can be multiple names of the same type.
                      <code>null</code> is not an acceptable value.                    
                </param>
                <return>
                    a deep copy of the specified <code>Collection</code>                    
                </return>
                <throws>
                    IOException if a parsing error occurs                    
                </throws>
            </javadoc>
            <method name="cloneAndCheckNames" type="Set<List<?>>" line="1446">
                <params>
                    <param name="names" type="Collection<List<?>>"/>
                </params>
                <declaration name="namesCopy" type="Set&lt;List&lt;?&gt;&gt;" line="1447"/>
                <declaration name="i" type="Iterator&lt;List&lt;?&gt;&gt;" line="1448"/>
                <scope line="1449">
                    <declaration name="o" type="Object" line="1450"/>
                    <scope line="1451"/>
                </scope>
                <scope line="1457">
                    <declaration name="nameList" type="List&lt;Object&gt;" line="1458"/>
                    <scope line="1459"/>
                    <declaration name="o" type="Object" line="1462"/>
                    <scope line="1463"/>
                    <declaration name="nameType" type="int" line="1466"/>
                    <scope line="1467"/>
                    <declaration name="nameObject" type="Object" line="1470"/>
                    <scope line="1471">
                        <scope line="1472"/>
                    </scope>
                    <scope line="1477"/>
                </scope>
            </method>
            <javadoc line="1483">
                Returns the name constraints criterion. The &lt;code&gt;X509Certificate&lt;/code&gt;
                  must have subject and subject alternative names that
                  meet the specified name constraints.
                  &lt;p&gt;
                  The name constraints are returned as a byte array. This byte array
                  contains the DER encoded form of the name constraints, as they
                  would appear in the NameConstraints structure defined in RFC 3280
                  and X.509. The ASN.1 notation for this structure is supplied in the
                  documentation for{@link #setNameConstraints(byte[] bytes) setNameConstraints(byte [] bytes)}.
                  &lt;p&gt;
                  Note that the byte array returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    a byte array containing the ASN.1 DER encoding of
                      a NameConstraints extension used for checking name constraints.
                      <code>null</code> if no name constraints check will be performed.                    
                </return>
                <see>
                    #setNameConstraints                    
                </see>
            </javadoc>
            <method name="getNameConstraints" type="byte[]" line="1501">
                <scope line="1502"/>
                <scope line="1505"/>
            </method>
            <javadoc line="1509">
                Returns the basic constraints constraint. If the value is greater than
                  or equal to zero, the &lt;code&gt;X509Certificates&lt;/code&gt; must include a
                  basicConstraints extension with a pathLen of at least this value.
                  If the value is -2, only end-entity certificates are accepted. If
                  the value is -1, no basicConstraints check is done.                
                <return>
                    the value for the basic constraints constraint                    
                </return>
                <see>
                    #setBasicConstraints                    
                </see>
            </javadoc>
            <method name="getBasicConstraints" type="int" line="1518"/>
            <javadoc line="1521">
                Returns the policy criterion. The &lt;code&gt;X509Certificate&lt;/code&gt; must
                  include at least one of the specified policies in its certificate policies
                  extension. If the &lt;code&gt;Set&lt;/code&gt; returned is empty, then the
                  &lt;code&gt;X509Certificate&lt;/code&gt; must include at least some specified policy
                  in its certificate policies extension. If the &lt;code&gt;Set&lt;/code&gt; returned is
                  &lt;code&gt;null&lt;/code&gt;, no policy check will be performed.                
                <return>
                    an immutable <code>Set</code> of certificate policy OIDs in
                      string format (or <code>null</code>)                    
                </return>
                <see>
                    #setPolicy                    
                </see>
            </javadoc>
            <method name="getPolicy" type="Set<String>" line="1532"/>
            <javadoc line="1535">
                Returns a copy of the pathToNames criterion. The
                  &lt;code&gt;X509Certificate&lt;/code&gt; must not include name constraints that would
                  prohibit building a path to the specified names. If the value
                  returned is &lt;code&gt;null&lt;/code&gt;, no pathToNames check will be performed.
                  &lt;p&gt;
                  If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a
                  &lt;code&gt;Collection&lt;/code&gt; with one
                  entry for each name to be included in the pathToNames
                  criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an
                  &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second
                  entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in
                  string or ASN.1 DER encoded form, respectively).
                  There can be multiple names of the same type. Note that the
                  &lt;code&gt;Collection&lt;/code&gt; returned may contain duplicate names (same
                  name and name type).
                  &lt;p&gt;
                  Each name in the &lt;code&gt;Collection&lt;/code&gt;
                  may be specified either as a &lt;code&gt;String&lt;/code&gt; or as an ASN.1 encoded
                  byte array. For more details about the formats used, see{@link #addPathToName(int type,String name)addPathToName(int type, String name)} and{@link #addPathToName(int type,byte[] name)addPathToName(int type, byte [] name)}.
                  &lt;p&gt;
                  Note that a deep copy is performed on the &lt;code&gt;Collection&lt;/code&gt; to
                  protect against subsequent modifications.                
                <return>
                    a <code>Collection</code> of names (or <code>null</code>)                    
                </return>
                <see>
                    #setPathToNames                    
                </see>
            </javadoc>
            <method name="getPathToNames" type="Collection<List<?>>" line="1561">
                <scope line="1562"/>
            </method>
            <javadoc line="1567">
                Return a printable representation of the &lt;code&gt;CertSelector&lt;/code&gt;.                
                <return>
                    a <code>String</code> describing the contents of the
                      <code>CertSelector</code>                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1572">
                <declaration name="sb" type="StringBuffer" line="1573"/>
                <scope line="1575"/>
                <scope line="1578"/>
                <scope line="1581"/>
                <scope line="1584"/>
                <scope line="1588">
                    <declaration name="i" type="Iterator&lt;List&lt;?&gt;&gt;" line="1590"/>
                    <scope line="1591">
                        <declaration name="list" type="List&lt;?&gt;" line="1592"/>
                    </scope>
                </scope>
                <scope line="1596">
                    <declaration name="enc" type="HexDumpEncoder" line="1597"/>
                </scope>
                <scope line="1600">
                    <declaration name="enc" type="HexDumpEncoder" line="1601"/>
                </scope>
                <scope line="1604"/>
                <scope line="1607"/>
                <scope line="1610"/>
                <scope line="1613"/>
                <scope line="1616"/>
                <scope line="1619"/>
                <scope line="1622"/>
                <scope line="1625">
                    <declaration name="i" type="Iterator&lt;GeneralNameInterface&gt;" line="1627"/>
                    <scope line="1628"/>
                </scope>
            </method>
            <javadoc line="1635">
                Returns a printable representation of the KeyUsage.                
            </javadoc>
            <method name="keyUsageToString" type="String" line="1638">
                <params>
                    <param name="k" type="boolean[]"/>
                </params>
                <declaration name="s" type="String" line="1639"/>
                <scope line="1640">
                    <scope line="1641"/>
                    <scope line="1644"/>
                    <scope line="1647"/>
                    <scope line="1650"/>
                    <scope line="1653"/>
                    <scope line="1656"/>
                    <scope line="1659"/>
                    <scope line="1662"/>
                    <scope line="1665"/>
                </scope>
                <scope line="1669"/>
            </method>
            <javadoc line="1674">
                Returns an Extension object given any X509Certificate and extension oid.
                  Throw an &lt;code&gt;IOException&lt;/code&gt; if the extension byte value is
                  malformed.                
                <param>
                    cert a <code>X509Certificate</code>                    
                </param>
                <param>
                    extId an <code>integer</code> which specifies the extension index.
                      Currently, the supported extensions are as follows:
                      index 0 - PrivateKeyUsageExtension
                      index 1 - SubjectAlternativeNameExtension
                      index 2 - NameConstraintsExtension
                      index 3 - CertificatePoliciesExtension
                      index 4 - ExtendedKeyUsageExtension                    
                </param>
                <return>
                    an <code>Extension</code> object whose real type is as specified
                      by the extension oid.                    
                </return>
                <throws>
                    IOException if cannot construct the <code>Extension</code>
                      object with the extension encoding retrieved from the passed in
                      <code>X509Certificate</code>.                    
                </throws>
            </javadoc>
            <method name="getExtensionObject" type="Extension" line="1692">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="extId" type="int"/>
                </params>
                <scope line="1693">
                    <declaration name="impl" type="X509CertImpl" line="1694"/>
                </scope>
                <declaration name="rawExtVal" type="byte[]" line="1710"/>
                <scope line="1711"/>
                <declaration name="in" type="DerInputStream" line="1714"/>
                <declaration name="encoded" type="byte[]" line="1715"/>
                <scope line="1718"/>
                <scope line="1721"/>
            </method>
            <javadoc line="1736">
                Decides whether a &lt;code&gt;Certificate&lt;/code&gt; should be selected.                
                <param>
                    cert the <code>Certificate</code> to be checked                    
                </param>
                <return>
                    <code>true</code> if the <code>Certificate</code> should be
                      selected, <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="match" type="boolean" line="1742">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="1743"/>
                <declaration name="xcert" type="X509Certificate" line="1746"/>
                <scope line="1747"/>
                <scope line="1750">
                    <scope line="1751">
                        <scope line="1752"/>
                    </scope>
                </scope>
                <scope line="1758">
                    <scope line="1759">
                        <scope line="1760"/>
                    </scope>
                </scope>
                <scope line="1766">
                    <scope line="1767">
                        <scope line="1768"/>
                    </scope>
                </scope>
                <scope line="1774">
                    <scope line="1775">
                        <scope line="1776"/>
                    </scope>
                </scope>
                <scope line="1782">
                    <scope line="1783"/>
                    <scope line="1786">
                        <scope line="1787"/>
                    </scope>
                </scope>
                <scope line="1793">
                    <declaration name="certKey" type="byte[]" line="1794"/>
                    <scope line="1795">
                        <scope line="1796"/>
                    </scope>
                </scope>
                <declaration name="result" type="boolean" line="1802"/>
                <scope line="1803"/>
            </method>
            <method name="matchSubjectKeyID" type="boolean" line="1808">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="1809"/>
                <scope line="1812">
                    <declaration name="extVal" type="byte[]" line="1813"/>
                    <scope line="1814">
                        <scope line="1815"/>
                    </scope>
                    <declaration name="in" type="DerInputStream" line="1820"/>
                    <declaration name="certSubjectKeyID" type="byte[]" line="1821"/>
                    <scope line="1822">
                        <scope line="1823"/>
                    </scope>
                </scope>
                <scope line="1829">
                    <scope line="1830"/>
                </scope>
            </method>
            <method name="matchAuthorityKeyID" type="boolean" line="1837">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="1838"/>
                <scope line="1841">
                    <declaration name="extVal" type="byte[]" line="1842"/>
                    <scope line="1843">
                        <scope line="1844"/>
                    </scope>
                    <declaration name="in" type="DerInputStream" line="1849"/>
                    <declaration name="certAuthKeyID" type="byte[]" line="1850"/>
                    <scope line="1851">
                        <scope line="1852"/>
                    </scope>
                </scope>
                <scope line="1858">
                    <scope line="1859"/>
                </scope>
            </method>
            <method name="matchPrivateKeyValid" type="boolean" line="1866">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="1867"/>
                <declaration name="ext" type="PrivateKeyUsageExtension" line="1870"/>
                <scope line="1871">
                    <scope line="1873"/>
                </scope>
                <scope line="1877">
                    <scope line="1878">
                        <declaration name="time" type="String" line="1879"/>
                        <scope line="1880">
                            <declaration name="notAfter" type="Date" line="1881"/>
                        </scope>
                        <scope line="1884"/>
                    </scope>
                </scope>
                <scope line="1891">
                    <scope line="1892">
                        <declaration name="time" type="String" line="1893"/>
                        <scope line="1894">
                            <declaration name="notBefore" type="Date" line="1895"/>
                        </scope>
                        <scope line="1898"/>
                    </scope>
                </scope>
                <scope line="1905">
                    <scope line="1906"/>
                </scope>
                <scope line="1912">
                    <scope line="1913"/>
                </scope>
            </method>
            <method name="matchSubjectPublicKeyAlgID" type="boolean" line="1921">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="1922"/>
                <scope line="1925">
                    <declaration name="encodedKey" type="byte[]" line="1926"/>
                    <declaration name="val" type="DerValue" line="1927"/>
                    <scope line="1928"/>
                    <declaration name="algID" type="AlgorithmId" line="1931"/>
                    <scope line="1932"/>
                    <scope line="1935">
                        <scope line="1936"/>
                    </scope>
                </scope>
                <scope line="1942">
                    <scope line="1943"/>
                </scope>
            </method>
            <method name="matchKeyUsage" type="boolean" line="1950">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="1951"/>
                <declaration name="certKeyUsage" type="boolean[]" line="1954"/>
                <scope line="1955">
                    <scope line="1956">
                        <scope line="1957">
                            <scope line="1958"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="matchExtendedKeyUsage" type="boolean" line="1967">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="1968"/>
                <scope line="1971">
                    <declaration name="ext" type="ExtendedKeyUsageExtension" line="1972"/>
                    <scope line="1973">
                        <declaration name="certKeyPurposeVector" type="Vector&lt;ObjectIdentifier&gt;" line="1974"/>
                        <scope line="1975">
                            <scope line="1976"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1983">
                    <scope line="1984"/>
                </scope>
            </method>
            <method name="matchSubjectAlternativeNames" type="boolean" line="1991">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="1992"/>
                <scope line="1995">
                    <declaration name="sanExt" type="SubjectAlternativeNameExtension" line="1996"/>
                    <scope line="1997">
                        <scope line="1998"/>
                    </scope>
                    <declaration name="certNames" type="GeneralNames" line="2003"/>
                    <declaration name="i" type="Iterator&lt;GeneralNameInterface&gt;" line="2004"/>
                    <scope line="2005">
                        <declaration name="matchName" type="GeneralNameInterface" line="2006"/>
                        <declaration name="found" type="boolean" line="2007"/>
                        <scope line="2008">
                            <declaration name="certName" type="GeneralNameInterface" line="2009"/>
                        </scope>
                        <scope line="2012">
                            <scope line="2013"/>
                        </scope>
                        <scope line="2018"/>
                    </scope>
                </scope>
                <scope line="2023"/>
            </method>
            <method name="matchNameConstraints" type="boolean" line="2029">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="2030"/>
                <scope line="2033">
                    <scope line="2034">
                        <scope line="2035"/>
                    </scope>
                </scope>
                <scope line="2041">
                    <scope line="2042"/>
                </scope>
            </method>
            <method name="matchPolicy" type="boolean" line="2049">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="2050"/>
                <scope line="2053">
                    <declaration name="ext" type="CertificatePoliciesExtension" line="2054"/>
                    <scope line="2055">
                        <scope line="2056"/>
                    </scope>
                    <declaration name="policies" type="List&lt;PolicyInformation&gt;" line="2061"/>
                    <declaration name="policyIDs" type="List&lt;CertificatePolicyId&gt;" line="2062"/>
                    <scope line="2063"/>
                    <scope line="2066">
                        <declaration name="foundOne" type="boolean" line="2067"/>
                        <scope line="2068">
                            <scope line="2069">
                                <scope line="2070"/>
                            </scope>
                        </scope>
                        <scope line="2076">
                            <scope line="2077">
                                <scope line="2078"/>
                            </scope>
                            <scope line="2083">
                                <scope line="2084"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2092">
                    <scope line="2093"/>
                </scope>
            </method>
            <method name="matchPathToNames" type="boolean" line="2100">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="2101"/>
                <scope line="2104">
                    <declaration name="ext" type="NameConstraintsExtension" line="2105"/>
                    <scope line="2106"/>
                    <scope line="2109">
                        <declaration name="i" type="Iterator&lt;GeneralNameInterface&gt;" line="2111"/>
                        <scope line="2112"/>
                    </scope>
                    <declaration name="permitted" type="GeneralSubtrees" line="2116"/>
                    <declaration name="excluded" type="GeneralSubtrees" line="2117"/>
                    <scope line="2118">
                        <scope line="2119"/>
                    </scope>
                    <scope line="2123">
                        <scope line="2124"/>
                    </scope>
                </scope>
                <scope line="2129">
                    <scope line="2130"/>
                </scope>
            </method>
            <method name="matchExcluded" type="boolean" line="2137">
                <params>
                    <param name="excluded" type="GeneralSubtrees"/>
                </params>
                <scope line="2138">
                    <declaration name="tree" type="GeneralSubtree" line="2139"/>
                    <declaration name="excludedName" type="GeneralNameInterface" line="2140"/>
                    <declaration name="i" type="Iterator&lt;GeneralNameInterface&gt;" line="2141"/>
                    <scope line="2142">
                        <declaration name="pathToName" type="GeneralNameInterface" line="2143"/>
                        <scope line="2144">
                            <scope line="2148"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="matchPermitted" type="boolean" line="2160">
                <params>
                    <param name="permitted" type="GeneralSubtrees"/>
                </params>
                <declaration name="i" type="Iterator&lt;GeneralNameInterface&gt;" line="2161"/>
                <scope line="2162">
                    <declaration name="pathToName" type="GeneralNameInterface" line="2163"/>
                    <declaration name="t" type="Iterator&lt;GeneralSubtree&gt;" line="2164"/>
                    <declaration name="permittedNameFound" type="boolean" line="2165"/>
                    <declaration name="nameTypeFound" type="boolean" line="2166"/>
                    <declaration name="names" type="String" line="2167"/>
                    <scope line="2168">
                        <declaration name="tree" type="GeneralSubtree" line="2169"/>
                        <declaration name="permittedName" type="GeneralNameInterface" line="2170"/>
                        <scope line="2171"/>
                    </scope>
                    <scope line="2183"/>
                </scope>
            </method>
            <method name="matchBasicConstraints" type="boolean" line="2190">
                <params>
                    <param name="xcert" type="X509Certificate"/>
                </params>
                <scope line="2191"/>
                <declaration name="maxPathLen" type="int" line="2194"/>
                <scope line="2195">
                    <scope line="2196">
                        <scope line="2197"/>
                    </scope>
                </scope>
                <scope line="2203">
                    <scope line="2204">
                        <scope line="2205"/>
                    </scope>
                </scope>
            </method>
            <method name="cloneSet" type="Set<?>" line="2213">
                <params>
                    <param name="set" type="Set<?>"/>
                </params>
                <scope line="2214">
                    <declaration name="clone" type="Object" line="2215"/>
                </scope>
                <scope line="2218"/>
            </method>
            <javadoc line="2222">
                Returns a copy of this object.                
                <return>
                    the copy                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="2226">
                <scope line="2227">
                    <declaration name="copy" type="X509CertSelector" line="2228"/>
                    <scope line="2229"/>
                    <scope line="2233"/>
                </scope>
                <scope line="2239"/>
            </method>
        </class>
    </source>