<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.security.GeneralSecurityException"/>
        <class name="CertPathValidatorException" line="6">
            <extends class="GeneralSecurityException"/>
            <javadoc line="6">
                An exception indicating one of a variety of problems encountered when
                  validating a certification path.
                  &lt;p&gt;
                  A &lt;code&gt;CertPathValidatorException&lt;/code&gt; provides support for wrapping
                  exceptions. The {@link #getCause getCause} method returns the throwable,
                  if any, that caused this exception to be thrown.
                  &lt;p&gt;
                  A &lt;code&gt;CertPathValidatorException&lt;/code&gt; may also include the
                  certification path that was being validated when the exception was thrown,
                  the index of the certificate in the certification path that caused the
                  exception to be thrown, and the reason that caused the failure. Use the{@link #getCertPath getCertPath}, {@link #getIndex getIndex}, and{@link #getReason getReason} methods to retrieve this information.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  Unless otherwise specified, the methods defined in this class are not
                  thread-safe. Multiple threads that need to access a single
                  object concurrently should synchronize amongst themselves and
                  provide the necessary locking. Multiple threads each manipulating
                  separate objects need not synchronize.                
                <see>
                    CertPathValidator                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="31"/>
            <declaration name="index" type="int" line="32"/>
            <javadoc line="32">
                @serial the index of the certificate in the certification path
                  that caused the exception to be thrown                
            </javadoc>
            <declaration name="certPath" type="CertPath" line="37"/>
            <javadoc line="37">
                @serial the &lt;code&gt;CertPath&lt;/code&gt; that was being validated when
                  the exception was thrown                
            </javadoc>
            <declaration name="reason" type="Reason" line="42"/>
            <javadoc line="42">
                @serial the reason the validation failed                
            </javadoc>
            <javadoc line="46">
                Creates a &lt;code&gt;CertPathValidatorException&lt;/code&gt; with
                  no detail message.                
            </javadoc>
            <method name="CertPathValidatorException" type="constructor" line="50"/>
            <javadoc line="53">
                Creates a &lt;code&gt;CertPathValidatorException&lt;/code&gt; with the given
                  detail message. A detail message is a &lt;code&gt;String&lt;/code&gt; that
                  describes this particular exception.                
                <param>
                    msg the detail message                    
                </param>
            </javadoc>
            <method name="CertPathValidatorException" type="constructor" line="59">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <javadoc line="62">
                Creates a &lt;code&gt;CertPathValidatorException&lt;/code&gt; that wraps the
                  specified throwable. This allows any exception to be converted into a
                  &lt;code&gt;CertPathValidatorException&lt;/code&gt;, while retaining information
                  about the wrapped exception, which may be useful for debugging. The
                  detail message is set to (&lt;code&gt;cause==null ? null : cause.toString()
                  &lt;/code&gt;) (which typically contains the class and detail message of
                  cause).                
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause getCause()} method). (A &lt;code&gt;null&lt;/code&gt; value is
                      permitted, and indicates that the cause is nonexistent or unknown.)                    
                </param>
            </javadoc>
            <method name="CertPathValidatorException" type="constructor" line="73">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="76">
                Creates a &lt;code&gt;CertPathValidatorException&lt;/code&gt; with the specified
                  detail message and cause.                
                <param>
                    msg the detail message                    
                </param>
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause getCause()} method). (A &lt;code&gt;null&lt;/code&gt; value is
                      permitted, and indicates that the cause is nonexistent or unknown.)                    
                </param>
            </javadoc>
            <method name="CertPathValidatorException" type="constructor" line="83">
                <params>
                    <param name="msg" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="86">
                Creates a &lt;code&gt;CertPathValidatorException&lt;/code&gt; with the specified
                  detail message, cause, certification path, and index.                
                <param>
                    msg the detail message (or &lt;code&gt;null&lt;/code&gt; if none)                    
                </param>
                <param>
                    cause the cause (or &lt;code&gt;null&lt;/code&gt; if none)                    
                </param>
                <param>
                    certPath the certification path that was in the process of
                      being validated when the error was encountered                    
                </param>
                <param>
                    index the index of the certificate in the certification path
                      that caused the error (or -1 if not applicable). Note that
                      the list of certificates in a &lt;code&gt;CertPath&lt;/code&gt; is zero based.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      &lt;code&gt;(index &lt; -1 || (certPath != null &amp;&amp; index &gt;=
                      certPath.getCertificates().size())&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;certPath&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; is not -1                    
                </throws>
            </javadoc>
            <method name="CertPathValidatorException" type="constructor" line="102">
                <params>
                    <param name="msg" type="String"/>
                    <param name="cause" type="Throwable"/>
                    <param name="certPath" type="CertPath"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="105">
                Creates a &lt;code&gt;CertPathValidatorException&lt;/code&gt; with the specified
                  detail message, cause, certification path, index, and reason.                
                <param>
                    msg the detail message (or &lt;code&gt;null&lt;/code&gt; if none)                    
                </param>
                <param>
                    cause the cause (or &lt;code&gt;null&lt;/code&gt; if none)                    
                </param>
                <param>
                    certPath the certification path that was in the process of
                      being validated when the error was encountered                    
                </param>
                <param>
                    index the index of the certificate in the certification path
                      that caused the error (or -1 if not applicable). Note that
                      the list of certificates in a &lt;code&gt;CertPath&lt;/code&gt; is zero based.                    
                </param>
                <param>
                    reason the reason the validation failed                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      &lt;code&gt;(index &lt; -1 || (certPath != null &amp;&amp; index &gt;=
                      certPath.getCertificates().size())&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;certPath&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; is not -1                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;reason&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="CertPathValidatorException" type="constructor" line="124">
                <params>
                    <param name="msg" type="String"/>
                    <param name="cause" type="Throwable"/>
                    <param name="certPath" type="CertPath"/>
                    <param name="index" type="int"/>
                    <param name="reason" type="Reason"/>
                </params>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="132"/>
            </method>
            <javadoc line="139">
                Returns the certification path that was being validated when
                  the exception was thrown.                
                <return>
                    the &lt;code&gt;CertPath&lt;/code&gt; that was being validated when
                      the exception was thrown (or &lt;code&gt;null&lt;/code&gt; if not specified)                    
                </return>
            </javadoc>
            <method name="getCertPath" type="CertPath" line="145"/>
            <javadoc line="148">
                Returns the index of the certificate in the certification path
                  that caused the exception to be thrown. Note that the list of
                  certificates in a &lt;code&gt;CertPath&lt;/code&gt; is zero based. If no
                  index has been set, -1 is returned.                
                <return>
                    the index that has been set, or -1 if none has been set                    
                </return>
            </javadoc>
            <method name="getIndex" type="int" line="155"/>
            <javadoc line="158">
                Returns the reason that the validation failed. The reason is
                  associated with the index of the certificate returned by{@link #getIndex}.                
                <return>
                    the reason that the validation failed, or
                      &lt;code&gt;BasicReason.UNSPECIFIED&lt;/code&gt; if a reason has not been
                      specified                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getReason" type="Reason" line="166"/>
            <method name="readObject" type="void" line="169">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <scope line="171"/>
                <scope line="174"/>
                <scope line="177"/>
            </method>
            <interface name="Reason">
                <implements interface="java.io.Serializable"/>
                <javadoc line="181">
                    The reason the validation algorithm failed.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
            </interface>
            <declaration name="BasicReason" type="enum" line="187"/>
            <javadoc line="187">
                The BasicReason enumerates the potential reasons that a certification
                  path of any type may be invalid.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <scope line="192"/>
        </class>
    </source>