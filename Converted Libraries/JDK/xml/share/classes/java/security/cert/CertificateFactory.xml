<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.io.InputStream"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.security.Provider"/>
        <import package="java.security.Security"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="CertificateFactory" line="42">
            <comment line="129">
                The certificate type                
            </comment>
            <comment line="132">
                The provider                
            </comment>
            <comment line="135">
                The provider implementation                
            </comment>
            <javadoc line="42">
                This class defines the functionality of a certificate factory, which is
                  used to generate certificate, certification path (&lt;code&gt;CertPath&lt;/code&gt;)
                  and certificate revocation list (CRL) objects from their encodings.
                  &lt;p&gt;For encodings consisting of multiple certificates, use
                  &lt;code&gt;generateCertificates&lt;/code&gt; when you want to
                  parse a collection of possibly unrelated certificates. Otherwise,
                  use &lt;code&gt;generateCertPath&lt;/code&gt; when you want to generate
                  a &lt;code&gt;CertPath&lt;/code&gt; (a certificate chain) and subsequently
                  validate it with a &lt;code&gt;CertPathValidator&lt;/code&gt;.
                  &lt;p&gt;A certificate factory for X.509 must return certificates that are an
                  instance of &lt;code&gt;java.security.cert.X509Certificate&lt;/code&gt;, and CRLs
                  that are an instance of &lt;code&gt;java.security.cert.X509CRL&lt;/code&gt;.
                  &lt;p&gt;The following example reads a file with Base64 encoded certificates,
                  which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and
                  bounded at the end by -----END CERTIFICATE-----. We convert the
                  &lt;code&gt;FileInputStream&lt;/code&gt; (which does not support &lt;code&gt;mark&lt;/code&gt;
                  and &lt;code&gt;reset&lt;/code&gt;) to a &lt;code&gt;BufferedInputStream&lt;/code&gt; (which
                  supports those methods), so that each call to
                  &lt;code&gt;generateCertificate&lt;/code&gt; consumes only one certificate, and the
                  read position of the input stream is positioned to the next certificate in
                  the file:&lt;p&gt;
                  &lt;pre&gt;
                  FileInputStream fis = new FileInputStream(filename);
                  BufferedInputStream bis = new BufferedInputStream(fis);
                  CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);
                  while (bis.available() &gt; 0) {
                  Certificate cert = cf.generateCertificate(bis);
                  System.out.println(cert.toString());
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;The following example parses a PKCS#7-formatted certificate reply stored
                  in a file and extracts all the certificates from it:&lt;p&gt;
                  &lt;pre&gt;
                  FileInputStream fis = new FileInputStream(filename);
                  CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);
                  Collection c = cf.generateCertificates(fis);
                  Iterator i = c.iterator();
                  while (i.hasNext()) {
                  Certificate cert = (Certificate)i.next();
                  System.out.println(cert);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;CertificateFactory&lt;/code&gt; type:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;X.509&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  and the following standard &lt;code&gt;CertPath&lt;/code&gt; encodings:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;PKCS7&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;PkiPath&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  The type and encodings are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory&quot;&gt;
                  CertificateFactory section&lt;/a&gt; and the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings&quot;&gt;
                  CertPath Encodings section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other types or encodings are supported.                
                <author>
                    Hemma Prafullchandra                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
                <see>
                    Certificate                    
                </see>
                <see>
                    X509Certificate                    
                </see>
                <see>
                    CertPath                    
                </see>
                <see>
                    CRL                    
                </see>
                <see>
                    X509CRL                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="type" type="String" line="129"/>
            <declaration name="provider" type="Provider" line="132"/>
            <declaration name="certFacSpi" type="CertificateFactorySpi" line="135"/>
            <javadoc line="137">
                Creates a CertificateFactory object of the given type, and encapsulates
                  the given provider implementation (SPI object) in it.                
                <param>
                    certFacSpi the provider implementation.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <param>
                    type the certificate type.                    
                </param>
            </javadoc>
            <method name="CertificateFactory" type="constructor" line="147">
                <params>
                    <param name="certFacSpi" type="CertificateFactorySpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="153">
                Returns a certificate factory object that implements the
                  specified certificate type.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new CertificateFactory object encapsulating the
                  CertificateFactorySpi implementation from the first
                  Provider that supports the specified type is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    type the name of the requested certificate type.
                      See the CertificateFactory section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard certificate types.                    
                </param>
                <return>
                    a certificate factory object for the specified type.                    
                </return>
                <exception>
                    CertificateException if no Provider supports a
                      CertificateFactorySpi implementation for the
                      specified type.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="CertificateFactory" line="181">
                <params>
                    <param name="type" type="String"/>
                </params>
                <scope line="182">
                    <declaration name="instance" type="Instance" line="183"/>
                </scope>
                <scope line="187"/>
            </method>
            <javadoc line="192">
                Returns a certificate factory object for the specified
                  certificate type.
                  &lt;p&gt; A new CertificateFactory object encapsulating the
                  CertificateFactorySpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    type the certificate type.
                      See the CertificateFactory section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard certificate types.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    a certificate factory object for the specified type.                    
                </return>
                <exception>
                    CertificateException if a CertificateFactorySpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="CertificateFactory" line="228">
                <params>
                    <param name="type" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="229">
                    <declaration name="instance" type="Instance" line="230"/>
                </scope>
                <scope line="234"/>
            </method>
            <javadoc line="239">
                Returns a certificate factory object for the specified
                  certificate type.
                  &lt;p&gt; A new CertificateFactory object encapsulating the
                  CertificateFactorySpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    type the certificate type.
                      See the CertificateFactory section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard certificate types.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    a certificate factory object for the specified type.                    
                </return>
                <exception>
                    CertificateException if a CertificateFactorySpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt; is
                      null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="CertificateFactory" line="269">
                <params>
                    <param name="type" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="270">
                    <declaration name="instance" type="Instance" line="271"/>
                </scope>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Returns the provider of this certificate factory.                
                <return>
                    the provider of this certificate factory.                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="285"/>
            <javadoc line="289">
                Returns the name of the certificate type associated with this
                  certificate factory.                
                <return>
                    the name of the certificate type associated with this
                      certificate factory.                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="296"/>
            <javadoc line="300">
                Generates a certificate object and initializes it with
                  the data read from the input stream &lt;code&gt;inStream&lt;/code&gt;.
                  &lt;p&gt;In order to take advantage of the specialized certificate format
                  supported by this certificate factory,
                  the returned certificate object can be typecast to the corresponding
                  certificate class. For example, if this certificate
                  factory implements X.509 certificates, the returned certificate object
                  can be typecast to the &lt;code&gt;X509Certificate&lt;/code&gt; class.
                  &lt;p&gt;In the case of a certificate factory for X.509 certificates, the
                  certificate provided in &lt;code&gt;inStream&lt;/code&gt; must be DER-encoded and
                  may be supplied in binary or printable (Base64) encoding. If the
                  certificate is provided in Base64 encoding, it must be bounded at
                  the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at
                  the end by -----END CERTIFICATE-----.
                  &lt;p&gt;Note that if the given input stream does not support{@link java.io.InputStream#mark(int) mark} and{@link java.io.InputStream#reset() reset}, this method will
                  consume the entire input stream. Otherwise, each call to this
                  method consumes one certificate and the read position of the
                  input stream is positioned to the next available byte after
                  the inherent end-of-certificate marker. If the data in the input stream
                  does not contain an inherent end-of-certificate marker (other
                  than EOF) and there is trailing data after the certificate is parsed, a
                  &lt;code&gt;CertificateException&lt;/code&gt; is thrown.                
                <param>
                    inStream an input stream with the certificate data.                    
                </param>
                <return>
                    a certificate object initialized with the data
                      from the input stream.                    
                </return>
                <exception>
                    CertificateException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="generateCertificate" type="Certificate" line="338">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="342">
                Returns an iteration of the &lt;code&gt;CertPath&lt;/code&gt; encodings supported
                  by this certificate factory, with the default encoding first. See
                  the CertPath Encodings section in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard encoding names and their formats.
                  &lt;p&gt;
                  Attempts to modify the returned &lt;code&gt;Iterator&lt;/code&gt; via its
                  &lt;code&gt;remove&lt;/code&gt; method result in an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; over the names of the supported
                      &lt;code&gt;CertPath&lt;/code&gt; encodings (as &lt;code&gt;String&lt;/code&gt;s)                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCertPathEncodings" type="Iterator<String>" line="358"/>
            <javadoc line="362">
                Generates a &lt;code&gt;CertPath&lt;/code&gt; object and initializes it with
                  the data read from the &lt;code&gt;InputStream&lt;/code&gt; inStream. The data
                  is assumed to be in the default encoding. The name of the default
                  encoding is the first element of the &lt;code&gt;Iterator&lt;/code&gt; returned by
                  the {@link #getCertPathEncodings getCertPathEncodings} method.                
                <param>
                    inStream an &lt;code&gt;InputStream&lt;/code&gt; containing the data                    
                </param>
                <return>
                    a &lt;code&gt;CertPath&lt;/code&gt; initialized with the data from the
                      &lt;code&gt;InputStream&lt;/code&gt;                    
                </return>
                <exception>
                    CertificateException if an exception occurs while decoding                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="generateCertPath" type="CertPath" line="377">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="381">
                Generates a &lt;code&gt;CertPath&lt;/code&gt; object and initializes it with
                  the data read from the &lt;code&gt;InputStream&lt;/code&gt; inStream. The data
                  is assumed to be in the specified encoding. See
                  the CertPath Encodings section in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for information about standard encoding names and their formats.                
                <param>
                    inStream an &lt;code&gt;InputStream&lt;/code&gt; containing the data                    
                </param>
                <param>
                    encoding the encoding used for the data                    
                </param>
                <return>
                    a &lt;code&gt;CertPath&lt;/code&gt; initialized with the data from the
                      &lt;code&gt;InputStream&lt;/code&gt;                    
                </return>
                <exception>
                    CertificateException if an exception occurs while decoding or
                      the encoding requested is not supported                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="generateCertPath" type="CertPath" line="400">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="encoding" type="String"/>
                </params>
            </method>
            <javadoc line="404">
                Generates a &lt;code&gt;CertPath&lt;/code&gt; object and initializes it with
                  a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s.
                  &lt;p&gt;
                  The certificates supplied must be of a type supported by the
                  &lt;code&gt;CertificateFactory&lt;/code&gt;. They will be copied out of the supplied
                  &lt;code&gt;List&lt;/code&gt; object.                
                <param>
                    certificates a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s                    
                </param>
                <return>
                    a &lt;code&gt;CertPath&lt;/code&gt; initialized with the supplied list of
                      certificates                    
                </return>
                <exception>
                    CertificateException if an exception occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="generateCertPath" type="CertPath" line="421">
                <params>
                    <param name="certificates" type="List<? extends Certificate>"/>
                </params>
            </method>
            <javadoc line="425">
                Returns a (possibly empty) collection view of the certificates read
                  from the given input stream &lt;code&gt;inStream&lt;/code&gt;.
                  &lt;p&gt;In order to take advantage of the specialized certificate format
                  supported by this certificate factory, each element in
                  the returned collection view can be typecast to the corresponding
                  certificate class. For example, if this certificate
                  factory implements X.509 certificates, the elements in the returned
                  collection can be typecast to the &lt;code&gt;X509Certificate&lt;/code&gt; class.
                  &lt;p&gt;In the case of a certificate factory for X.509 certificates,
                  &lt;code&gt;inStream&lt;/code&gt; may contain a sequence of DER-encoded certificates
                  in the formats described for{@link #generateCertificate(java.io.InputStream) generateCertificate}.
                  In addition, &lt;code&gt;inStream&lt;/code&gt; may contain a PKCS#7 certificate
                  chain. This is a PKCS#7 &lt;i&gt;SignedData&lt;/i&gt; object, with the only
                  significant field being &lt;i&gt;certificates&lt;/i&gt;. In particular, the
                  signature and the contents are ignored. This format allows multiple
                  certificates to be downloaded at once. If no certificates are present,
                  an empty collection is returned.
                  &lt;p&gt;Note that if the given input stream does not support{@link java.io.InputStream#mark(int) mark} and{@link java.io.InputStream#reset() reset}, this method will
                  consume the entire input stream.                
                <param>
                    inStream the input stream with the certificates.                    
                </param>
                <return>
                    a (possibly empty) collection view of
                      java.security.cert.Certificate objects
                      initialized with the data from the input stream.                    
                </return>
                <exception>
                    CertificateException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="generateCertificates" type="Collection<? extends Certificate>" line="461">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="465">
                Generates a certificate revocation list (CRL) object and initializes it
                  with the data read from the input stream &lt;code&gt;inStream&lt;/code&gt;.
                  &lt;p&gt;In order to take advantage of the specialized CRL format
                  supported by this certificate factory,
                  the returned CRL object can be typecast to the corresponding
                  CRL class. For example, if this certificate
                  factory implements X.509 CRLs, the returned CRL object
                  can be typecast to the &lt;code&gt;X509CRL&lt;/code&gt; class.
                  &lt;p&gt;Note that if the given input stream does not support{@link java.io.InputStream#mark(int) mark} and{@link java.io.InputStream#reset() reset}, this method will
                  consume the entire input stream. Otherwise, each call to this
                  method consumes one CRL and the read position of the input stream
                  is positioned to the next available byte after the inherent
                  end-of-CRL marker. If the data in the
                  input stream does not contain an inherent end-of-CRL marker (other
                  than EOF) and there is trailing data after the CRL is parsed, a
                  &lt;code&gt;CRLException&lt;/code&gt; is thrown.                
                <param>
                    inStream an input stream with the CRL data.                    
                </param>
                <return>
                    a CRL object initialized with the data
                      from the input stream.                    
                </return>
                <exception>
                    CRLException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="generateCRL" type="CRL" line="496">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="500">
                Returns a (possibly empty) collection view of the CRLs read
                  from the given input stream &lt;code&gt;inStream&lt;/code&gt;.
                  &lt;p&gt;In order to take advantage of the specialized CRL format
                  supported by this certificate factory, each element in
                  the returned collection view can be typecast to the corresponding
                  CRL class. For example, if this certificate
                  factory implements X.509 CRLs, the elements in the returned
                  collection can be typecast to the &lt;code&gt;X509CRL&lt;/code&gt; class.
                  &lt;p&gt;In the case of a certificate factory for X.509 CRLs,
                  &lt;code&gt;inStream&lt;/code&gt; may contain a sequence of DER-encoded CRLs.
                  In addition, &lt;code&gt;inStream&lt;/code&gt; may contain a PKCS#7 CRL
                  set. This is a PKCS#7 &lt;i&gt;SignedData&lt;/i&gt; object, with the only
                  significant field being &lt;i&gt;crls&lt;/i&gt;. In particular, the
                  signature and the contents are ignored. This format allows multiple
                  CRLs to be downloaded at once. If no CRLs are present,
                  an empty collection is returned.
                  &lt;p&gt;Note that if the given input stream does not support{@link java.io.InputStream#mark(int) mark} and{@link java.io.InputStream#reset() reset}, this method will
                  consume the entire input stream.                
                <param>
                    inStream the input stream with the CRLs.                    
                </param>
                <return>
                    a (possibly empty) collection view of
                      java.security.cert.CRL objects initialized with the data from the input
                      stream.                    
                </return>
                <exception>
                    CRLException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="generateCRLs" type="Collection<? extends CRL>" line="534">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
            </method>
        </class>
    </source>