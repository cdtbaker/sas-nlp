<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.util.Set"/>
        <interface name="X509Extension">
            <javadoc line="30">
                Interface for an X.509 extension.
                  &lt;p&gt;The extensions defined for X.509 v3{@link X509Certificate Certificates} and v2{@link X509CRL CRLs} (Certificate Revocation
                  Lists) provide methods
                  for associating additional attributes with users or public keys,
                  for managing the certification hierarchy, and for managing CRL
                  distribution. The X.509 extensions format also allows communities
                  to define private extensions to carry information unique to those
                  communities.
                  &lt;p&gt;Each extension in a certificate/CRL may be designated as
                  critical or non-critical.  A certificate/CRL-using system (an application
                  validating a certificate/CRL) must reject the certificate/CRL if it
                  encounters a critical extension it does not recognize.  A non-critical
                  extension may be ignored if it is not recognized.
                  &lt;p&gt;
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
                  Extension  ::=  SEQUENCE  {
                  extnId        OBJECT IDENTIFIER,
                  critical      BOOLEAN DEFAULT FALSE,
                  extnValue     OCTET STRING
                  -- contains a DER encoding of a value
                  -- of the type registered for use with
                  -- the extnId object identifier value
                  }
                  &lt;/pre&gt;
                  Since not all extensions are known, the &lt;code&gt;getExtensionValue&lt;/code&gt;
                  method returns the DER-encoded OCTET STRING of the
                  extension value (i.e., the &lt;code&gt;extnValue&lt;/code&gt;). This can then
                  be handled by a &lt;em&gt;Class&lt;/em&gt; that understands the extension.                
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <method name="hasUnsupportedCriticalExtension" type="boolean" line="72"/>
            <javadoc line="72">
                Check if there is a critical extension that is not supported.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if a critical extension is found that is
                      not supported, otherwise &lt;tt&gt;false&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="getCriticalExtensionOIDs" type="Set<String>" line="80"/>
            <javadoc line="80">
                Gets a Set of the OID strings for the extension(s) marked
                  CRITICAL in the certificate/CRL managed by the object
                  implementing this interface.
                  Here is sample code to get a Set of critical extensions from an
                  X509Certificate and print the OIDs:
                  &lt;pre&gt;&lt;code&gt;
                  InputStream inStrm = null;
                  X509Certificate cert = null;
                  try {
                  inStrm = new FileInputStream(&quot;DER-encoded-Cert&quot;);
                  CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);
                  cert = (X509Certificate)cf.generateCertificate(inStrm);
                  } finally {
                  if (inStrm != null) {
                  inStrm.close();
                  }
                  }&lt;p&gt;
                  Set&lt;String&gt; critSet = cert.getCriticalExtensionOIDs();
                  if (critSet != null &amp;&amp; !critSet.isEmpty()) {
                  System.out.println(&quot;Set of critical extensions:&quot;);
                  for (String oid : critSet) {
                  System.out.println(oid);
                  }
                  }
                  &lt;/code&gt;&lt;/pre&gt;                
                <return>
                    a Set (or an empty Set if none are marked critical) of
                      the extension OID strings for extensions that are marked critical.
                      If there are no extensions present at all, then this method returns
                      null.                    
                </return>
            </javadoc>
            <method name="getNonCriticalExtensionOIDs" type="Set<String>" line="115"/>
            <javadoc line="115">
                Gets a Set of the OID strings for the extension(s) marked
                  NON-CRITICAL in the certificate/CRL managed by the object
                  implementing this interface.
                  Here is sample code to get a Set of non-critical extensions from an
                  X509CRL revoked certificate entry and print the OIDs:
                  &lt;pre&gt;&lt;code&gt;
                  InputStream inStrm = null;
                  CertificateFactory cf = null;
                  X509CRL crl = null;
                  try {
                  inStrm = new FileInputStream(&quot;DER-encoded-CRL&quot;);
                  cf = CertificateFactory.getInstance(&quot;X.509&quot;);
                  crl = (X509CRL)cf.generateCRL(inStrm);
                  } finally {
                  if (inStrm != null) {
                  inStrm.close();
                  }
                  }&lt;p&gt;
                  byte[] certData = &amp;lt;DER-encoded certificate data&amp;gt;
                  ByteArrayInputStream bais = new ByteArrayInputStream(certData);
                  X509Certificate cert = (X509Certificate)cf.generateCertificate(bais);
                  bais.close();
                  X509CRLEntry badCert =
                  crl.getRevokedCertificate(cert.getSerialNumber());&lt;p&gt;
                  if (badCert != null) {
                  Set&lt;String&gt; nonCritSet = badCert.getNonCriticalExtensionOIDs();&lt;p&gt;
                  if (nonCritSet != null)
                  for (String oid : nonCritSet) {
                  System.out.println(oid);
                  }
                  }
                  &lt;/code&gt;&lt;/pre&gt;                
                <return>
                    a Set (or an empty Set if none are marked non-critical) of
                      the extension OID strings for extensions that are marked non-critical.
                      If there are no extensions present at all, then this method returns
                      null.                    
                </return>
            </javadoc>
            <method name="getExtensionValue" type="byte[]" line="159"/>
            <javadoc line="159">
                Gets the DER-encoded OCTET string for the extension value
                  (&lt;em&gt;extnValue&lt;/em&gt;) identified by the passed-in &lt;code&gt;oid&lt;/code&gt;
                  String.
                  The &lt;code&gt;oid&lt;/code&gt; string is
                  represented by a set of nonnegative whole numbers separated
                  by periods.
                  &lt;p&gt;For example:&lt;br&gt;
                  &lt;table border=groove summary=&quot;Examples of OIDs and extension names&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;OID &lt;em&gt;(Object Identifier)&lt;/em&gt;&lt;/th&gt;
                  &lt;th&gt;Extension Name&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.14&lt;/td&gt;
                  &lt;td&gt;SubjectKeyIdentifier&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.15&lt;/td&gt;
                  &lt;td&gt;KeyUsage&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.16&lt;/td&gt;
                  &lt;td&gt;PrivateKeyUsage&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.17&lt;/td&gt;
                  &lt;td&gt;SubjectAlternativeName&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.18&lt;/td&gt;
                  &lt;td&gt;IssuerAlternativeName&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.19&lt;/td&gt;
                  &lt;td&gt;BasicConstraints&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.30&lt;/td&gt;
                  &lt;td&gt;NameConstraints&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.33&lt;/td&gt;
                  &lt;td&gt;PolicyMappings&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.35&lt;/td&gt;
                  &lt;td&gt;AuthorityKeyIdentifier&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;2.5.29.36&lt;/td&gt;
                  &lt;td&gt;PolicyConstraints&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    oid the Object Identifier value for the extension.                    
                </param>
                <return>
                    the DER-encoded octet string of the extension value or
                      null if it is not present.                    
                </return>
            </javadoc>
        </interface>
    </source>