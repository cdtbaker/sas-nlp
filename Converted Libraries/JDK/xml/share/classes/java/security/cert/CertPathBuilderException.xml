<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.security.GeneralSecurityException"/>
        <class name="CertPathBuilderException" line="30">
            <extends class="GeneralSecurityException"/>
            <javadoc line="30">
                An exception indicating one of a variety of problems encountered when
                  building a certification path with a &lt;code&gt;CertPathBuilder&lt;/code&gt;.
                  &lt;p&gt;
                  A &lt;code&gt;CertPathBuilderException&lt;/code&gt; provides support for wrapping
                  exceptions. The {@link #getCause getCause} method returns the throwable,
                  if any, that caused this exception to be thrown.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  Unless otherwise specified, the methods defined in this class are not
                  thread-safe. Multiple threads that need to access a single
                  object concurrently should synchronize amongst themselves and
                  provide the necessary locking. Multiple threads each manipulating
                  separate objects need not synchronize.                
                <see>
                    CertPathBuilder                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="53"/>
            <javadoc line="55">
                Creates a &lt;code&gt;CertPathBuilderException&lt;/code&gt; with &lt;code&gt;null&lt;/code&gt;
                  as its detail message.                
            </javadoc>
            <method name="CertPathBuilderException" type="constructor" line="59"/>
            <javadoc line="63">
                Creates a &lt;code&gt;CertPathBuilderException&lt;/code&gt; with the given
                  detail message. The detail message is a &lt;code&gt;String&lt;/code&gt; that
                  describes this particular exception in more detail.                
                <param>
                    msg the detail message                    
                </param>
            </javadoc>
            <method name="CertPathBuilderException" type="constructor" line="70">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <javadoc line="74">
                Creates a &lt;code&gt;CertPathBuilderException&lt;/code&gt; that wraps the specified
                  throwable. This allows any exception to be converted into a
                  &lt;code&gt;CertPathBuilderException&lt;/code&gt;, while retaining information
                  about the wrapped exception, which may be useful for debugging. The
                  detail message is set to (&lt;code&gt;cause==null ? null : cause.toString()
                  &lt;/code&gt;) (which typically contains the class and detail message of
                  cause).                
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause getCause()} method). (A &lt;code&gt;null&lt;/code&gt; value is
                      permitted, and indicates that the cause is nonexistent or unknown.)                    
                </param>
            </javadoc>
            <method name="CertPathBuilderException" type="constructor" line="87">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="91">
                Creates a &lt;code&gt;CertPathBuilderException&lt;/code&gt; with the specified
                  detail message and cause.                
                <param>
                    msg the detail message                    
                </param>
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause getCause()} method). (A &lt;code&gt;null&lt;/code&gt; value is
                      permitted, and indicates that the cause is nonexistent or unknown.)                    
                </param>
            </javadoc>
            <method name="CertPathBuilderException" type="constructor" line="100">
                <params>
                    <param name="msg" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
        </class>
    </source>