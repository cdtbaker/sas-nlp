<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.util.Arrays"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.SignatureException"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <class name="Certificate" line="9">
            <implements interface="java.io.Serializable"/>
            <javadoc line="9">
                &lt;p&gt;Abstract class for managing a variety of identity certificates.
                  An identity certificate is a binding of a principal to a public key which
                  is vouched for by another principal.  (A principal represents
                  an entity such as an individual user, a group, or a corporation.)
                  &lt;p&gt;
                  This class is an abstraction for certificates that have different
                  formats but important common uses.  For example, different types of
                  certificates, such as X.509 and PGP, share general certificate
                  functionality (like encoding and verifying) and
                  some types of information (like a public key).
                  &lt;p&gt;
                  X.509, PGP, and SDSI certificates can all be implemented by
                  subclassing the Certificate class, even though they contain different
                  sets of information, and they store and retrieve the information in
                  different ways.                
                <see>
                    X509Certificate                    
                </see>
                <see>
                    CertificateFactory                    
                </see>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="30"/>
            <declaration name="type" type="String" line="31"/>
            <javadoc line="32">
                Creates a certificate of the specified type.                
                <param>
                    type the standard name of the certificate type.
                      See the CertificateFactory section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard certificate types.                    
                </param>
            </javadoc>
            <method name="Certificate" type="constructor" line="40">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="43">
                Returns the type of this certificate.                
                <return>
                    the type of this certificate.                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="47"/>
            <javadoc line="50">
                Compares this certificate for equality with the specified
                  object. If the &lt;code&gt;other&lt;/code&gt; object is an
                  &lt;code&gt;instanceof&lt;/code&gt; &lt;code&gt;Certificate&lt;/code&gt;, then
                  its encoded form is retrieved and compared with the
                  encoded form of this certificate.                
                <param>
                    other the object to test for equality with this certificate.                    
                </param>
                <return>
                    true iff the encoded forms of the two certificates
                      match, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="60">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="61"/>
                <scope line="64"/>
                <scope line="67">
                    <declaration name="thisCert" type="byte[]" line="68"/>
                    <declaration name="otherCert" type="byte[]" line="69"/>
                </scope>
                <scope line="72"/>
            </method>
            <javadoc line="76">
                Returns a hashcode value for this certificate from its
                  encoded form.                
                <return>
                    the hashcode value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="81">
                <declaration name="retval" type="int" line="82"/>
                <scope line="83">
                    <declaration name="certData" type="byte[]" line="84"/>
                    <scope line="85"/>
                </scope>
                <scope line="90"/>
            </method>
            <method name="getEncoded" type="byte[]" line="94"/>
            <javadoc line="94">
                Returns the encoded form of this certificate. It is
                  assumed that each certificate type would have only a single
                  form of encoding; for example, X.509 certificates would
                  be encoded as ASN.1 DER.                
                <return>
                    the encoded form of this certificate                    
                </return>
                <exception>
                    CertificateEncodingException if an encoding error occurs.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="103"/>
            <javadoc line="103">
                Verifies that this certificate was signed using the
                  private key that corresponds to the specified public key.                
                <param>
                    key the PublicKey used to carry out the verification.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException if there's no default provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="115"/>
            <javadoc line="115">
                Verifies that this certificate was signed using the
                  private key that corresponds to the specified public key.
                  This method uses the signature verification engine
                  supplied by the specified provider.                
                <param>
                    key the PublicKey used to carry out the verification.                    
                </param>
                <param>
                    sigProvider the name of the signature provider.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException on incorrect provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="toString" type="String" line="130"/>
            <javadoc line="130">
                Returns a string representation of this certificate.                
                <return>
                    a string representation of this certificate.                    
                </return>
            </javadoc>
            <method name="getPublicKey" type="PublicKey" line="135"/>
            <javadoc line="135">
                Gets the public key from this certificate.                
                <return>
                    the public key.                    
                </return>
            </javadoc>
            <class name="CertificateRep" line="140">
                <implements interface="java.io.Serializable"/>
                <javadoc line="140">
                    Alternate Certificate class for serialization.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="145"/>
                <declaration name="type" type="String" line="146"/>
                <declaration name="data" type="byte[]" line="147"/>
                <javadoc line="148">
                    Construct the alternate Certificate class with the Certificate
                      type and Certificate encoding bytes.
                      &lt;p&gt;                    
                    <param>
                        type the standard name of the Certificate type. <p>                        
                    </param>
                    <param>
                        data the Certificate data.                        
                    </param>
                </javadoc>
                <method name="CertificateRep" type="constructor" line="155">
                    <params>
                        <param name="type" type="String"/>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
                <javadoc line="159">
                    Resolve the Certificate Object.
                      &lt;p&gt;                    
                    <return>
                        the resolved Certificate Object                        
                    </return>
                    <throws>
                        java.io.ObjectStreamException if the Certificate
                          could not be resolved                        
                    </throws>
                </javadoc>
                <method name="readResolve" type="Object" line="166">
                    <scope line="167">
                        <declaration name="cf" type="CertificateFactory" line="168"/>
                    </scope>
                    <scope line="171"/>
                </method>
            </class>
            <javadoc line="176">
                Replace the Certificate to be serialized.                
                <return>
                    the alternate Certificate object to be serialized                    
                </return>
                <throws>
                    java.io.ObjectStreamException if a new object representing
                      this Certificate could not be created                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="writeReplace" type="Object" line="183">
                <scope line="184"/>
                <scope line="187"/>
            </method>
        </class>
    </source>