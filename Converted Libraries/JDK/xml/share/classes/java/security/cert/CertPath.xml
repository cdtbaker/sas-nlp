<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security.cert">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.NotSerializableException"/>
        <import package="java.io.ObjectStreamException"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <class name="CertPath" line="8">
            <implements interface="Serializable"/>
            <javadoc line="8">
                An immutable sequence of certificates (a certification path).
                  &lt;p&gt;
                  This is an abstract class that defines the methods common to all
                  &lt;code&gt;CertPath&lt;/code&gt;s. Subclasses can handle different kinds of
                  certificates (X.509, PGP, etc.).
                  &lt;p&gt;
                  All &lt;code&gt;CertPath&lt;/code&gt; objects have a type, a list of
                  &lt;code&gt;Certificate&lt;/code&gt;s, and one or more supported encodings. Because the
                  &lt;code&gt;CertPath&lt;/code&gt; class is immutable, a &lt;code&gt;CertPath&lt;/code&gt; cannot
                  change in any externally visible way after being constructed. This
                  stipulation applies to all public fields and methods of this class and any
                  added or overridden by subclasses.
                  &lt;p&gt;
                  The type is a &lt;code&gt;String&lt;/code&gt; that identifies the type of
                  &lt;code&gt;Certificate&lt;/code&gt;s in the certification path. For each
                  certificate &lt;code&gt;cert&lt;/code&gt; in a certification path &lt;code&gt;certPath&lt;/code&gt;,
                  &lt;code&gt;cert.getType().equals(certPath.getType())&lt;/code&gt; must be
                  &lt;code&gt;true&lt;/code&gt;.
                  &lt;p&gt;
                  The list of &lt;code&gt;Certificate&lt;/code&gt;s is an ordered &lt;code&gt;List&lt;/code&gt; of
                  zero or more &lt;code&gt;Certificate&lt;/code&gt;s. This &lt;code&gt;List&lt;/code&gt; and all
                  of the &lt;code&gt;Certificate&lt;/code&gt;s contained in it must be immutable.
                  &lt;p&gt;
                  Each &lt;code&gt;CertPath&lt;/code&gt; object must support one or more encodings
                  so that the object can be translated into a byte array for storage or
                  transmission to other parties. Preferably, these encodings should be
                  well-documented standards (such as PKCS#7). One of the encodings supported
                  by a &lt;code&gt;CertPath&lt;/code&gt; is considered the default encoding. This
                  encoding is used if no encoding is explicitly requested (for the{@link #getEncoded() getEncoded()} method, for instance).
                  &lt;p&gt;
                  All &lt;code&gt;CertPath&lt;/code&gt; objects are also &lt;code&gt;Serializable&lt;/code&gt;.
                  &lt;code&gt;CertPath&lt;/code&gt; objects are resolved into an alternate{@link CertPathRep CertPathRep} object during serialization. This allows
                  a &lt;code&gt;CertPath&lt;/code&gt; object to be serialized into an equivalent
                  representation regardless of its underlying implementation.
                  &lt;p&gt;
                  &lt;code&gt;CertPath&lt;/code&gt; objects can be created with a
                  &lt;code&gt;CertificateFactory&lt;/code&gt; or they can be returned by other classes,
                  such as a &lt;code&gt;CertPathBuilder&lt;/code&gt;.
                  &lt;p&gt;
                  By convention, X.509 &lt;code&gt;CertPath&lt;/code&gt;s (consisting of
                  &lt;code&gt;X509Certificate&lt;/code&gt;s), are ordered starting with the target
                  certificate and ending with a certificate issued by the trust anchor. That
                  is, the issuer of one certificate is the subject of the following one. The
                  certificate representing the {@link TrustAnchor TrustAnchor} should not be
                  included in the certification path. Unvalidated X.509 &lt;code&gt;CertPath&lt;/code&gt;s
                  may not follow these conventions. PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;s will
                  detect any departure from these conventions that cause the certification
                  path to be invalid and throw a &lt;code&gt;CertPathValidatorException&lt;/code&gt;.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;CertPath&lt;/code&gt; encodings:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;PKCS7&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;PkiPath&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  These encodings are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings&quot;&gt;
                  CertPath Encodings section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other encodings are supported.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  All &lt;code&gt;CertPath&lt;/code&gt; objects must be thread-safe. That is, multiple
                  threads may concurrently invoke the methods defined in this class on a
                  single &lt;code&gt;CertPath&lt;/code&gt; object (or more than one) with no
                  ill effects. This is also true for the &lt;code&gt;List&lt;/code&gt; returned by
                  &lt;code&gt;CertPath.getCertificates&lt;/code&gt;.
                  &lt;p&gt;
                  Requiring &lt;code&gt;CertPath&lt;/code&gt; objects to be immutable and thread-safe
                  allows them to be passed around to various pieces of code without worrying
                  about coordinating access.  Providing this thread-safety is
                  generally not difficult, since the &lt;code&gt;CertPath&lt;/code&gt; and
                  &lt;code&gt;List&lt;/code&gt; objects in question are immutable.                
                <see>
                    CertificateFactory                    
                </see>
                <see>
                    CertPathBuilder                    
                </see>
                <author>
                    Yassir Elley                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="89"/>
            <declaration name="type" type="String" line="90"/>
            <javadoc line="91">
                Creates a &lt;code&gt;CertPath&lt;/code&gt; of the specified type.
                  &lt;p&gt;
                  This constructor is protected because most users should use a
                  &lt;code&gt;CertificateFactory&lt;/code&gt; to create &lt;code&gt;CertPath&lt;/code&gt;s.                
                <param>
                    type the standard name of the type of
                      <code>Certificate</code>s in this path                    
                </param>
            </javadoc>
            <method name="CertPath" type="constructor" line="99">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="102">
                Returns the type of &lt;code&gt;Certificate&lt;/code&gt;s in this certification
                  path. This is the same string that would be returned by{@link java.security.cert.Certificate#getType() cert.getType()}for all &lt;code&gt;Certificate&lt;/code&gt;s in the certification path.                
                <return>
                    the type of <code>Certificate</code>s in this certification
                      path (never null)                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="108"/>
            <method name="getEncodings" type="Iterator<String>" line="111"/>
            <javadoc line="111">
                Returns an iteration of the encodings supported by this certification
                  path, with the default encoding first. Attempts to modify the returned
                  &lt;code&gt;Iterator&lt;/code&gt; via its &lt;code&gt;remove&lt;/code&gt; method result in an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <return>
                    an <code>Iterator</code> over the names of the supported
                      encodings (as Strings)                    
                </return>
            </javadoc>
            <javadoc line="120">
                Compares this certification path for equality with the specified
                  object. Two &lt;code&gt;CertPath&lt;/code&gt;s are equal if and only if their
                  types are equal and their certificate &lt;code&gt;List&lt;/code&gt;s (and by
                  implication the &lt;code&gt;Certificate&lt;/code&gt;s in those &lt;code&gt;List&lt;/code&gt;s)
                  are equal. A &lt;code&gt;CertPath&lt;/code&gt; is never equal to an object that is
                  not a &lt;code&gt;CertPath&lt;/code&gt;.
                  &lt;p&gt;
                  This algorithm is implemented by this method. If it is overridden,
                  the behavior specified here must be maintained.                
                <param>
                    other the object to test for equality with this certification path                    
                </param>
                <return>
                    true if the specified object is equal to this certification path,
                      false otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="134">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <declaration name="otherCP" type="CertPath" line="137"/>
                <declaration name="thisCertList" type="List&lt;? extends Certificate&gt;" line="139"/>
                <declaration name="otherCertList" type="List&lt;? extends Certificate&gt;" line="140"/>
            </method>
            <javadoc line="143">
                Returns the hashcode for this certification path. The hash code of
                  a certification path is defined to be the result of the following
                  calculation:
                  &lt;pre&gt;&lt;code&gt;
                  hashCode = path.getType().hashCode();
                  hashCode = 31hashCode + path.getCertificates().hashCode();
                  &lt;/code&gt;&lt;/pre&gt;
                  This ensures that &lt;code&gt;path1.equals(path2)&lt;/code&gt; implies that
                  &lt;code&gt;path1.hashCode()==path2.hashCode()&lt;/code&gt; for any two certification
                  paths, &lt;code&gt;path1&lt;/code&gt; and &lt;code&gt;path2&lt;/code&gt;, as required by the
                  general contract of &lt;code&gt;Object.hashCode&lt;/code&gt;.                
                <return>
                    the hashcode value for this certification path                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="157">
                <declaration name="hashCode" type="int" line="158"/>
            </method>
            <javadoc line="162">
                Returns a string representation of this certification path.
                  This calls the &lt;code&gt;toString&lt;/code&gt; method on each of the
                  &lt;code&gt;Certificate&lt;/code&gt;s in the path.                
                <return>
                    a string representation of this certification path                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="168">
                <declaration name="sb" type="StringBuffer" line="169"/>
                <declaration name="stringIterator" type="Iterator&lt;? extends Certificate&gt;" line="170"/>
                <declaration name="i" type="int" line="173"/>
                <scope line="174">
                    <declaration name="stringCert" type="Certificate" line="176"/>
                </scope>
            </method>
            <method name="getEncoded" type="byte[]" line="184"/>
            <javadoc line="184">
                Returns the encoded form of this certification path, using the default
                  encoding.                
                <return>
                    the encoded bytes                    
                </return>
                <exception>
                    CertificateEncodingException if an encoding error occurs                    
                </exception>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="191"/>
            <javadoc line="191">
                Returns the encoded form of this certification path, using the
                  specified encoding.                
                <param>
                    encoding the name of the encoding to use                    
                </param>
                <return>
                    the encoded bytes                    
                </return>
                <exception>
                    CertificateEncodingException if an encoding error occurs or
                      the encoding requested is not supported                    
                </exception>
            </javadoc>
            <method name="getCertificates" type="List<? extends Certificate>" line="200"/>
            <javadoc line="200">
                Returns the list of certificates in this certification path.
                  The &lt;code&gt;List&lt;/code&gt; returned must be immutable and thread-safe.                
                <return>
                    an immutable <code>List</code> of <code>Certificate</code>s
                      (may be empty, but not null)                    
                </return>
            </javadoc>
            <javadoc line="207">
                Replaces the &lt;code&gt;CertPath&lt;/code&gt; to be serialized with a
                  &lt;code&gt;CertPathRep&lt;/code&gt; object.                
                <return>
                    the <code>CertPathRep</code> to be serialized                    
                </return>
                <throws>
                    ObjectStreamException if a <code>CertPathRep</code> object
                      representing this certification path could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="214">
                <scope line="215"/>
                <scope line="218">
                    <declaration name="nse" type="NotSerializableException" line="219"/>
                </scope>
            </method>
            <class name="CertPathRep" line="224">
                <implements interface="Serializable"/>
                <javadoc line="224">
                    Alternate &lt;code&gt;CertPath&lt;/code&gt; class for serialization.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="229"/>
                <declaration name="type" type="String" line="230"/>
                <javadoc line="230">
                    The Certificate type                    
                </javadoc>
                <declaration name="data" type="byte[]" line="234"/>
                <javadoc line="234">
                    The encoded form of the cert path                    
                </javadoc>
                <javadoc line="238">
                    Creates a &lt;code&gt;CertPathRep&lt;/code&gt; with the specified
                      type and encoded form of a certification path.                    
                    <param>
                        type the standard name of a <code>CertPath</code> type                        
                    </param>
                    <param>
                        data the encoded form of the certification path                        
                    </param>
                </javadoc>
                <method name="CertPathRep" type="constructor" line="244">
                    <params>
                        <param name="type" type="String"/>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
                <javadoc line="248">
                    Returns a &lt;code&gt;CertPath&lt;/code&gt; constructed from the type and data.                    
                    <return>
                        the resolved <code>CertPath</code> object                        
                    </return>
                    <throws>
                        ObjectStreamException if a <code>CertPath</code> could not
                          be constructed                        
                    </throws>
                </javadoc>
                <method name="readResolve" type="Object" line="254">
                    <scope line="255">
                        <declaration name="cf" type="CertificateFactory" line="256"/>
                    </scope>
                    <scope line="259">
                        <declaration name="nse" type="NotSerializableException" line="260"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>