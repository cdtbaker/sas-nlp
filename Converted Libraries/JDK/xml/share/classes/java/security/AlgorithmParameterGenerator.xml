<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <class name="AlgorithmParameterGenerator" line="3">
            <javadoc line="3">
                The &lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; class is used to generate a
                  set of
                  parameters to be used with a certain algorithm. Parameter generators
                  are constructed using the &lt;code&gt;getInstance&lt;/code&gt; factory methods
                  (static methods that return instances of a given class).
                  &lt;P&gt;The object that will generate the parameters can be initialized
                  in two different ways: in an algorithm-independent manner, or in an
                  algorithm-specific manner:
                  &lt;ul&gt;
                  &lt;li&gt;The algorithm-independent approach uses the fact that all parameter
                  generators share the concept of a &quot;size&quot; and a
                  source of randomness. The measure of size is universally shared
                  by all algorithm parameters, though it is interpreted differently
                  for different algorithms. For example, in the case of parameters for
                  the &lt;i&gt;DSA&lt;/i&gt; algorithm, &quot;size&quot; corresponds to the size
                  of the prime modulus (in bits).
                  When using this approach, algorithm-specific parameter generation
                  values - if any - default to some standard values, unless they can be
                  derived from the specified size.&lt;P&gt;
                  &lt;li&gt;The other approach initializes a parameter generator object
                  using algorithm-specific semantics, which are represented by a set of
                  algorithm-specific parameter generation values. To generate
                  Diffie-Hellman system parameters, for example, the parameter generation
                  values usually
                  consist of the size of the prime modulus and the size of the
                  random exponent, both specified in number of bits.
                  &lt;/ul&gt;
                  &lt;P&gt;In case the client does not explicitly initialize the
                  AlgorithmParameterGenerator
                  (via a call to an &lt;code&gt;init&lt;/code&gt; method), each provider must supply (and
                  document) a default initialization. For example, the Sun provider uses a
                  default modulus prime size of 1024 bits for the generation of DSA
                  parameters.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; algorithms and
                  keysizes in parentheses:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;DiffieHellman&lt;/tt&gt; (1024)&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;DSA&lt;/tt&gt; (1024)&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator&quot;&gt;
                  AlgorithmParameterGenerator section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    AlgorithmParameters                    
                </see>
                <see>
                    java.security.spec.AlgorithmParameterSpec                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="provider" type="Provider" line="56"/>
            <declaration name="paramGenSpi" type="AlgorithmParameterGeneratorSpi" line="57"/>
            <declaration name="algorithm" type="String" line="58"/>
            <javadoc line="59">
                Creates an AlgorithmParameterGenerator object.                
                <param>
                    paramGenSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    algorithm the algorithm                    
                </param>
            </javadoc>
            <method name="AlgorithmParameterGenerator" type="constructor" line="65">
                <params>
                    <param name="paramGenSpi" type="AlgorithmParameterGeneratorSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="70">
                Returns the standard name of the algorithm this parameter
                  generator is associated with.                
                <return>
                    the string name of the algorithm.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="75"/>
            <javadoc line="78">
                Returns an AlgorithmParameterGenerator object for generating
                  a set of parameters to be used with the specified algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new AlgorithmParameterGenerator object encapsulating the
                  AlgorithmParameterGeneratorSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the name of the algorithm this
                      parameter generator is associated with.
                      See the AlgorithmParameterGenerator section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new AlgorithmParameterGenerator object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports an
                      AlgorithmParameterGeneratorSpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="AlgorithmParameterGenerator" line="100">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="101">
                    <declaration name="objs" type="Object[]" line="102"/>
                </scope>
                <scope line="105"/>
            </method>
            <javadoc line="109">
                Returns an AlgorithmParameterGenerator object for generating
                  a set of parameters to be used with the specified algorithm.
                  &lt;p&gt; A new AlgorithmParameterGenerator object encapsulating the
                  AlgorithmParameterGeneratorSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the name of the algorithm this
                      parameter generator is associated with.
                      See the AlgorithmParameterGenerator section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the string name of the Provider.                    
                </param>
                <return>
                    the new AlgorithmParameterGenerator object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="AlgorithmParameterGenerator" line="135">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="objs" type="Object[]" line="137"/>
            </method>
            <javadoc line="140">
                Returns an AlgorithmParameterGenerator object for generating
                  a set of parameters to be used with the specified algorithm.
                  &lt;p&gt; A new AlgorithmParameterGenerator object encapsulating the
                  AlgorithmParameterGeneratorSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the string name of the algorithm this
                      parameter generator is associated with.
                      See the AlgorithmParameterGenerator section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the Provider object.                    
                </param>
                <return>
                    the new AlgorithmParameterGenerator object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified provider is null.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="AlgorithmParameterGenerator" line="162">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="objs" type="Object[]" line="164"/>
            </method>
            <javadoc line="167">
                Returns the provider of this algorithm parameter generator object.                
                <return>
                    the provider of this algorithm parameter generator object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="171"/>
            <javadoc line="174">
                Initializes this parameter generator for a certain size.
                  To create the parameters, the &lt;code&gt;SecureRandom&lt;/code&gt;
                  implementation of the highest-priority installed provider is used as
                  the source of randomness.
                  (If none of the installed providers supply an implementation of
                  &lt;code&gt;SecureRandom&lt;/code&gt;, a system-provided source of randomness is
                  used.)                
                <param>
                    size the size (number of bits).                    
                </param>
            </javadoc>
            <method name="init" type="void" line="184">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="187">
                Initializes this parameter generator for a certain size and source
                  of randomness.                
                <param>
                    size the size (number of bits).                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="193">
                <params>
                    <param name="size" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="196">
                Initializes this parameter generator with a set of algorithm-specific
                  parameter generation values.
                  To generate the parameters, the &lt;code&gt;SecureRandom&lt;/code&gt;
                  implementation of the highest-priority installed provider is used as
                  the source of randomness.
                  (If none of the installed providers supply an implementation of
                  &lt;code&gt;SecureRandom&lt;/code&gt;, a system-provided source of randomness is
                  used.)                
                <param>
                    genParamSpec the set of algorithm-specific parameter generation values.                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameter
                      generation values are inappropriate for this parameter generator.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="209">
                <params>
                    <param name="genParamSpec" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="212">
                Initializes this parameter generator with a set of algorithm-specific
                  parameter generation values.                
                <param>
                    genParamSpec the set of algorithm-specific parameter generation values.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameter
                      generation values are inappropriate for this parameter generator.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="220">
                <params>
                    <param name="genParamSpec" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="223">
                Generates the parameters.                
                <return>
                    the new AlgorithmParameters object.                    
                </return>
            </javadoc>
            <method name="generateParameters" type="AlgorithmParameters" line="227"/>
        </class>
    </source>