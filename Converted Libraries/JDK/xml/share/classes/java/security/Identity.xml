<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.io.Serializable"/>
        <import package="java.util"/>
        <class name="Identity" line="31">
            <implements interface="Principal"/>
            <implements interface="Serializable"/>
            <javadoc line="31">
                &lt;p&gt;This class represents identities: real-world objects such as people,
                  companies or organizations whose identities can be authenticated using
                  their public keys. Identities may also be more abstract (or concrete)
                  constructs, such as daemon threads or smart cards.
                  &lt;p&gt;All Identity objects have a name and a public key. Names are
                  immutable. Identities may also be scoped. That is, if an Identity is
                  specified to have a particular scope, then the name and public
                  key of the Identity are unique within that scope.
                  &lt;p&gt;An Identity also has a set of certificates (all certifying its own
                  public key). The Principal names specified in these certificates need
                  not be the same, only the key.
                  &lt;p&gt;An Identity can be subclassed, to include postal and email addresses,
                  telephone numbers, images of faces and logos, and so on.                
                <see>
                    IdentityScope                    
                </see>
                <see>
                    Signer                    
                </see>
                <see>
                    Principal                    
                </see>
                <author>
                    Benjamin Renaud                    
                </author>
                <deprecated>
                    This class is no longer used. Its functionality has been
                      replaced by <code>java.security.KeyStore</code>, the
                      <code>java.security.cert</code> package, and
                      <code>java.security.Principal</code>.                    
                </deprecated>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="62"/>
            <javadoc line="62">
                use serialVersionUID from JDK 1.1.x for interoperability                
            </javadoc>
            <declaration name="name" type="String" line="65"/>
            <javadoc line="65">
                The name for this identity.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="publicKey" type="PublicKey" line="72"/>
            <javadoc line="72">
                The public key for this identity.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="info" type="String" line="79"/>
            <javadoc line="79">
                Generic, descriptive information about the identity.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="scope" type="IdentityScope" line="86"/>
            <javadoc line="86">
                The scope of the identity.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="certificates" type="Vector&lt;Certificate&gt;" line="93"/>
            <javadoc line="93">
                The certificates for this identity.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="100">
                Constructor for serialization only.                
            </javadoc>
            <method name="Identity" type="constructor" line="103"/>
            <javadoc line="107">
                Constructs an identity with the specified name and scope.                
                <param>
                    name the identity name.                    
                </param>
                <param>
                    scope the scope of the identity.                    
                </param>
                <exception>
                    KeyManagementException if there is already an identity
                      with the same name in the scope.                    
                </exception>
            </javadoc>
            <method name="Identity" type="constructor" line="117">
                <params>
                    <param name="name" type="String"/>
                    <param name="scope" type="IdentityScope"/>
                </params>
                <scope line="119"/>
            </method>
            <javadoc line="125">
                Constructs an identity with the specified name and no scope.                
                <param>
                    name the identity name.                    
                </param>
            </javadoc>
            <method name="Identity" type="constructor" line="130">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="134">
                Returns this identity&apos;s name.                
                <return>
                    the name of this identity.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="139"/>
            <javadoc line="143">
                Returns this identity&apos;s scope.                
                <return>
                    the scope of this identity.                    
                </return>
            </javadoc>
            <method name="getScope" type="IdentityScope" line="148"/>
            <javadoc line="152">
                Returns this identity&apos;s public key.                
                <return>
                    the public key for this identity.                    
                </return>
                <see>
                    #setPublicKey                    
                </see>
            </javadoc>
            <method name="getPublicKey" type="PublicKey" line="159"/>
            <javadoc line="163">
                Sets this identity&apos;s public key. The old key and all of this
                  identity&apos;s certificates are removed by this operation.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with &lt;code&gt;&quot;setIdentityPublicKey&quot;&lt;/code&gt;
                  as its argument to see if it&apos;s ok to set the public key.                
                <param>
                    key the public key for this identity.                    
                </param>
                <exception>
                    KeyManagementException if another identity in the
                      identity's scope has the same public key, or if another exception occurs.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSecurityAccess</code> method doesn't allow
                      setting the public key.                    
                </exception>
                <see>
                    #getPublicKey                    
                </see>
                <see>
                    SecurityManager#checkSecurityAccess                    
                </see>
            </javadoc>
            <method name="setPublicKey" type="void" line="184">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <comment line="184">
                                        
                </comment>
            </method>
            <javadoc line="191">
                Specifies a general information string for this identity.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with &lt;code&gt;&quot;setIdentityInfo&quot;&lt;/code&gt;
                  as its argument to see if it&apos;s ok to specify the information string.                
                <param>
                    info the information string.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSecurityAccess</code> method doesn't allow
                      setting the information string.                    
                </exception>
                <see>
                    #getInfo                    
                </see>
                <see>
                    SecurityManager#checkSecurityAccess                    
                </see>
            </javadoc>
            <method name="setInfo" type="void" line="207">
                <params>
                    <param name="info" type="String"/>
                </params>
            </method>
            <javadoc line="212">
                Returns general information previously specified for this identity.                
                <return>
                    general information about this identity.                    
                </return>
                <see>
                    #setInfo                    
                </see>
            </javadoc>
            <method name="getInfo" type="String" line="219"/>
            <javadoc line="223">
                Adds a certificate for this identity. If the identity has a public
                  key, the public key in the certificate must be the same, and if
                  the identity does not have a public key, the identity&apos;s
                  public key is set to be that specified in the certificate.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with &lt;code&gt;&quot;addIdentityCertificate&quot;&lt;/code&gt;
                  as its argument to see if it&apos;s ok to add a certificate.                
                <param>
                    certificate the certificate to be added.                    
                </param>
                <exception>
                    KeyManagementException if the certificate is not valid,
                      if the public key in the certificate being added conflicts with
                      this identity's public key, or if another exception occurs.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSecurityAccess</code> method doesn't allow
                      adding a certificate.                    
                </exception>
                <see>
                    SecurityManager#checkSecurityAccess                    
                </see>
            </javadoc>
            <method name="addCertificate" type="void" line="246">
                <params>
                    <param name="certificate" type="Certificate"/>
                </params>
                <scope line="250"/>
                <scope line="253">
                    <scope line="254"/>
                </scope>
                <scope line="258"/>
            </method>
            <method name="keyEquals" type="boolean" line="264">
                <params>
                    <param name="aKey" type="Key"/>
                    <param name="anotherKey" type="Key"/>
                </params>
                <declaration name="aKeyFormat" type="String" line="265"/>
                <declaration name="anotherKeyFormat" type="String" line="266"/>
            </method>
            <javadoc line="277">
                Removes a certificate from this identity.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with &lt;code&gt;&quot;removeIdentityCertificate&quot;&lt;/code&gt;
                  as its argument to see if it&apos;s ok to remove a certificate.                
                <param>
                    certificate the certificate to be removed.                    
                </param>
                <exception>
                    KeyManagementException if the certificate is
                      missing, or if another exception occurs.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSecurityAccess</code> method doesn't allow
                      removing a certificate.                    
                </exception>
                <see>
                    SecurityManager#checkSecurityAccess                    
                </see>
            </javadoc>
            <method name="removeCertificate" type="void" line="296">
                <params>
                    <param name="certificate" type="Certificate"/>
                </params>
                <scope line="298"/>
            </method>
            <javadoc line="303">
                Returns a copy of all the certificates for this identity.                
                <return>
                    a copy of all the certificates for this identity.                    
                </return>
            </javadoc>
            <method name="certificates" type="Certificate[]" line="308">
                <scope line="309"/>
                <declaration name="len" type="int" line="312"/>
                <declaration name="certs" type="Certificate[]" line="313"/>
            </method>
            <javadoc line="318">
                Tests for equality between the specified object and this identity.
                  This first tests to see if the entities actually refer to the same
                  object, in which case it returns true. Next, it checks to see if
                  the entities have the same name and the same scope. If they do,
                  the method returns true. Otherwise, it calls{@link #identityEquals(Identity) identityEquals}, which subclasses should
                  override.                
                <param>
                    identity the object to test for equality with this identity.                    
                </param>
                <return>
                    true if the objects are considered equal, false otherwise.                    
                </return>
                <see>
                    #identityEquals                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="333">
                <params>
                    <param name="identity" type="Object"/>
                </params>
                <scope line="335"/>
                <scope line="339">
                    <declaration name="i" type="Identity" line="340"/>
                    <scope line="341"/>
                    <scope line="343"/>
                </scope>
            </method>
            <javadoc line="350">
                Tests for equality between the specified identity and this identity.
                  This method should be overriden by subclasses to test for equality.
                  The default behavior is to return true if the names and public keys
                  are equal.                
                <param>
                    identity the identity to test for equality with this identity.                    
                </param>
                <return>
                    true if the identities are considered equal, false
                      otherwise.                    
                </return>
                <see>
                    #equals                    
                </see>
            </javadoc>
            <method name="identityEquals" type="boolean" line="363">
                <params>
                    <param name="identity" type="Identity"/>
                </params>
            </method>
            <javadoc line="378">
                Returns a parsable name for identity: identityName.scopeName                
            </javadoc>
            <method name="fullName" type="String" line="381">
                <declaration name="parsable" type="String" line="382"/>
                <scope line="383"/>
            </method>
            <javadoc line="389">
                Returns a short string describing this identity, telling its
                  name and its scope (if any).
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with &lt;code&gt;&quot;printIdentity&quot;&lt;/code&gt;
                  as its argument to see if it&apos;s ok to return the string.                
                <return>
                    information about this identity, such as its name and the
                      name of its scope (if any).                    
                </return>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSecurityAccess</code> method doesn't allow
                      returning a string describing this identity.                    
                </exception>
                <see>
                    SecurityManager#checkSecurityAccess                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="406">
                <declaration name="printable" type="String" line="408"/>
                <scope line="409"/>
            </method>
            <javadoc line="415">
                Returns a string representation of this identity, with
                  optionally more details than that provided by the
                  &lt;code&gt;toString&lt;/code&gt; method without any arguments.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt;
                  method is called with &lt;code&gt;&quot;printIdentity&quot;&lt;/code&gt;
                  as its argument to see if it&apos;s ok to return the string.                
                <param>
                    detailed whether or not to provide detailed information.                    
                </param>
                <return>
                    information about this identity. If <code>detailed</code>
                      is true, then this method returns more information than that
                      provided by the <code>toString</code> method without any arguments.                    
                </return>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSecurityAccess</code> method doesn't allow
                      returning a string describing this identity.                    
                </exception>
                <see>
                    #toString                    
                </see>
                <see>
                    SecurityManager#checkSecurityAccess                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="437">
                <params>
                    <param name="detailed" type="boolean"/>
                </params>
                <declaration name="out" type="String" line="438"/>
                <scope line="439">
                    <scope line="443"/>
                    <scope line="445"/>
                </scope>
            </method>
            <method name="printKeys" type="String" line="452">
                <declaration name="key" type="String" line="453"/>
                <scope line="454"/>
                <scope line="456"/>
            </method>
            <method name="printCertificates" type="String" line="462">
                <declaration name="out" type="String" line="463"/>
                <scope line="464"/>
                <scope line="466">
                    <declaration name="i" type="int" line="469"/>
                    <scope line="470"/>
                </scope>
            </method>
            <javadoc line="480">
                Returns a hashcode for this identity.                
                <return>
                    a hashcode for this identity.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="485"/>
            <method name="check" type="void" line="489">
                <params>
                    <param name="directive" type="String"/>
                </params>
                <declaration name="security" type="SecurityManager" line="490"/>
                <scope line="491"/>
            </method>
        </class>
    </source>