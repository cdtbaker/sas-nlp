<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.lang.reflect"/>
        <import package="java.security.cert"/>
        <class name="UnresolvedPermission" line="37">
            <extends class="Permission"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="37">
                The UnresolvedPermission class is used to hold Permissions that
                  were &quot;unresolved&quot; when the Policy was initialized.
                  An unresolved permission is one whose actual Permission class
                  does not yet exist at the time the Policy is initialized (see below).
                  &lt;p&gt;The policy for a Java runtime (specifying
                  which permissions are available for code from various principals)
                  is represented by a Policy object.
                  Whenever a Policy is initialized or refreshed, Permission objects of
                  appropriate classes are created for all permissions
                  allowed by the Policy.
                  &lt;p&gt;Many permission class types
                  referenced by the policy configuration are ones that exist
                  locally (i.e., ones that can be found on CLASSPATH).
                  Objects for such permissions can be instantiated during
                  Policy initialization. For example, it is always possible
                  to instantiate a java.io.FilePermission, since the
                  FilePermission class is found on the CLASSPATH.
                  &lt;p&gt;Other permission classes may not yet exist during Policy
                  initialization. For example, a referenced permission class may
                  be in a JAR file that will later be loaded.
                  For each such class, an UnresolvedPermission is instantiated.
                  Thus, an UnresolvedPermission is essentially a &quot;placeholder&quot;
                  containing information about the permission.
                  &lt;p&gt;Later, when code calls AccessController.checkPermission
                  on a permission of a type that was previously unresolved,
                  but whose class has since been loaded, previously-unresolved
                  permissions of that type are &quot;resolved&quot;. That is,
                  for each such UnresolvedPermission, a new object of
                  the appropriate class type is instantiated, based on the
                  information in the UnresolvedPermission.
                  &lt;p&gt; To instantiate the new class, UnresolvedPermission assumes
                  the class provides a zero, one, and/or two-argument constructor.
                  The zero-argument constructor would be used to instantiate
                  a permission without a name and without actions.
                  A one-arg constructor is assumed to take a &lt;code&gt;String&lt;/code&gt;
                  name as input, and a two-arg constructor is assumed to take a
                  &lt;code&gt;String&lt;/code&gt; name and &lt;code&gt;String&lt;/code&gt; actions
                  as input.  UnresolvedPermission may invoke a
                  constructor with a &lt;code&gt;null&lt;/code&gt; name and/or actions.
                  If an appropriate permission constructor is not available,
                  the UnresolvedPermission is ignored and the relevant permission
                  will not be granted to executing code.
                  &lt;p&gt; The newly created permission object replaces the
                  UnresolvedPermission, which is removed.
                  &lt;p&gt; Note that the &lt;code&gt;getName&lt;/code&gt; method for an
                  &lt;code&gt;UnresolvedPermission&lt;/code&gt; returns the
                  &lt;code&gt;type&lt;/code&gt; (class name) for the underlying permission
                  that has not been resolved.                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.security.Policy                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="107"/>
            <declaration name="debug" type="sun.security.util.Debug" line="109"/>
            <declaration name="type" type="String" line="113"/>
            <javadoc line="113">
                The class name of the Permission class that will be
                  created when this unresolved permission is resolved.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="name" type="String" line="121"/>
            <javadoc line="121">
                The permission name.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="actions" type="String" line="128"/>
            <javadoc line="128">
                The actions of the permission.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="certs" type="java.security.cert.Certificate" line="135"/>
            <javadoc line="137">
                Creates a new UnresolvedPermission containing the permission
                  information needed later to actually create a Permission of the
                  specified class, when the permission is resolved.                
                <param>
                    type the class name of the Permission class that will be
                      created when this unresolved permission is resolved.                    
                </param>
                <param>
                    name the name of the permission.                    
                </param>
                <param>
                    actions the actions of the permission.                    
                </param>
                <param>
                    certs the certificates the permission's class was signed with.
                      This is a list of certificate chains, where each chain is composed of a
                      signer certificate and optionally its supporting certificate chain.
                      Each chain is ordered bottom-to-top (i.e., with the signer certificate
                      first and the (root) certificate authority last). The signer
                      certificates are copied from the array. Subsequent changes to
                      the array will not affect this UnsolvedPermission.                    
                </param>
            </javadoc>
            <method name="UnresolvedPermission" type="constructor" line="158">
                <params>
                    <param name="type" type="String"/>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                    <param name="certs" type="java.security.cert.Certificate"/>
                </params>
                <comment line="169">
                    Extract the signer certs from the list of certificates.                    
                </comment>
                <comment line="172">
                    there is no concept of signer certs, so we store the
                     entire cert array                    
                </comment>
                <comment line="180">
                    Go through the list of certs and see if all the certs are
                     signer certs.                    
                </comment>
                <comment line="194">
                    All the certs are signer certs, so we store the entire
                     array                    
                </comment>
                <comment line="200">
                    extract the signer certs                    
                </comment>
                <scope line="167">
                    <scope line="169">
                        <scope line="170"/>
                    </scope>
                    <scope line="178">
                        <declaration name="i" type="int" line="181"/>
                        <declaration name="count" type="int" line="182"/>
                        <scope line="183">
                            <scope line="187"/>
                        </scope>
                        <scope line="192"/>
                        <scope line="198">
                            <declaration name="signerCerts" type="ArrayList&lt;java.security.cert.Certificate&gt;" line="200"/>
                            <scope line="203">
                                <scope line="207"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="PARAMS0" type="Class[]" line="221"/>
            <declaration name="PARAMS1" type="Class[]" line="222"/>
            <declaration name="PARAMS2" type="Class[]" line="223"/>
            <javadoc line="225">
                try and resolve this permission using the class loader of the permission
                  that was passed in.                
            </javadoc>
            <method name="resolve" type="Permission" line="229">
                <params>
                    <param name="p" type="Permission"/>
                    <param name="certs" type="java.security.cert.Certificate"/>
                </params>
                <comment line="232">
                    if p wasn&apos;t signed, we don&apos;t have a match                    
                </comment>
                <comment line="237">
                    all certs in this.certs must be present in certs                    
                </comment>
                <scope line="230">
                    <scope line="232"/>
                    <declaration name="match" type="boolean" line="237"/>
                    <scope line="238">
                        <scope line="240">
                            <scope line="241"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="249">
                    <declaration name="pc" type="Class" line="250"/>
                    <scope line="252">
                        <scope line="253">
                            <declaration name="c" type="Constructor" line="254"/>
                        </scope>
                        <scope line="256">
                            <scope line="257">
                                <declaration name="c" type="Constructor" line="258"/>
                            </scope>
                            <scope line="261">
                                <declaration name="c" type="Constructor" line="262"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="267">
                        <scope line="268">
                            <scope line="269">
                                <declaration name="c" type="Constructor" line="270"/>
                            </scope>
                            <scope line="273">
                                <declaration name="c" type="Constructor" line="274"/>
                            </scope>
                        </scope>
                        <scope line="278">
                            <declaration name="c" type="Constructor" line="279"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="284">
                    <scope line="285"/>
                </scope>
                <scope line="291">
                    <scope line="292"/>
                </scope>
            </method>
            <javadoc line="300">
                This method always returns false for unresolved permissions.
                  That is, an UnresolvedPermission is never considered to
                  imply another permission.                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    false.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="309">
                <params>
                    <param name="p" type="Permission"/>
                </params>
            </method>
            <javadoc line="313">
                Checks two UnresolvedPermission objects for equality.
                  Checks that &lt;i&gt;obj&lt;/i&gt; is an UnresolvedPermission, and has
                  the same type (class) name, permission name, actions, and
                  certificates as this object.
                  &lt;p&gt; To determine certificate equality, this method only compares
                  actual signer certificates.  Supporting certificate chains
                  are not taken into consideration by this method.                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if obj is an UnresolvedPermission, and has the same
                      type (class) name, permission name, actions, and
                      certificates as this object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="329">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="338">
                    check type                    
                </comment>
                <comment line="343">
                    check name                    
                </comment>
                <comment line="352">
                    check actions                    
                </comment>
                <comment line="363">
                    check certs                    
                </comment>
                <declaration name="that" type="UnresolvedPermission" line="335"/>
                <scope line="338"/>
                <scope line="343">
                    <scope line="344"/>
                </scope>
                <scope line="347"/>
                <scope line="352">
                    <scope line="353"/>
                </scope>
                <scope line="356">
                    <scope line="357"/>
                </scope>
                <scope line="366"/>
                <declaration name="i" type="int" line="370"/>
                <declaration name="match" type="boolean" line="371"/>
                <scope line="373">
                    <scope line="375">
                        <scope line="376"/>
                    </scope>
                </scope>
                <scope line="384">
                    <scope line="386">
                        <scope line="387"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="397">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="403">
                <declaration name="hash" type="int" line="404"/>
            </method>
            <javadoc line="412">
                Returns the canonical string representation of the actions,
                  which currently is the empty string &quot;&quot;, since there are no actions for
                  an UnresolvedPermission. That is, the actions for the
                  permission that will be created when this UnresolvedPermission
                  is resolved may be non-null, but an UnresolvedPermission
                  itself is never considered to have any actions.                
                <return>
                    the empty string "".                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="423"/>
            <javadoc line="427">
                Get the type (class name) of the underlying permission that
                  has not been resolved.                
                <return>
                    the type (class name) of the underlying permission that
                      has not been resolved                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getUnresolvedType" type="String" line="436"/>
            <javadoc line="440">
                Get the target name of the underlying permission that
                  has not been resolved.                
                <return>
                    the target name of the underlying permission that
                      has not been resolved, or <code>null</code>,
                      if there is no targe name                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getUnresolvedName" type="String" line="450"/>
            <javadoc line="454">
                Get the actions for the underlying permission that
                  has not been resolved.                
                <return>
                    the actions for the underlying permission that
                      has not been resolved, or <code>null</code>
                      if there are no actions                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getUnresolvedActions" type="String" line="464"/>
            <javadoc line="468">
                Get the signer certificates (without any supporting chain)
                  for the underlying permission that has not been resolved.                
                <return>
                    the signer certificates for the underlying permission that
                      has not been resolved, or null, if there are no signer certificates.
                      Returns a new array each time this method is called.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getUnresolvedCerts" type="java.security.cert.Certificate[]" line="478"/>
            <javadoc line="482">
                Returns a string describing this UnresolvedPermission.  The convention
                  is to specify the class name, the permission name, and the actions, in
                  the following format: &apos;(unresolved &quot;ClassName&quot; &quot;name&quot; &quot;actions&quot;)&apos;.                
                <return>
                    information about this UnresolvedPermission.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="489"/>
            <javadoc line="493">
                Returns a new PermissionCollection object for storing
                  UnresolvedPermission  objects.
                  &lt;p&gt;                
                <return>
                    a new PermissionCollection object suitable for
                      storing UnresolvedPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="501"/>
            <javadoc line="505">
                Writes this object out to a stream (i.e., serializes it).                
                <serialData>
                    An initial <code>String</code> denoting the
                      <code>type</code> is followed by a <code>String</code> denoting the
                      <code>name</code> is followed by a <code>String</code> denoting the
                      <code>actions</code> is followed by an <code>int</code> indicating the
                      number of certificates to follow
                      (a value of "zero" denotes that there are no certificates associated
                      with this object).
                      Each certificate is written out starting with a <code>String</code>
                      denoting the certificate type, followed by an
                      <code>int</code> specifying the length of the certificate encoding,
                      followed by the certificate encoding itself which is written out as an
                      array of bytes.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="523">
                <params>
                    <param name="oos" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="530">
                    write out the total number of certs                    
                </comment>
                <comment line="532">
                    write out each cert, including its type                    
                </comment>
                <scope line="526"/>
                <scope line="528">
                    <scope line="532">
                        <declaration name="cert" type="java.security.cert.Certificate" line="533"/>
                        <scope line="534">
                            <declaration name="encoded" type="byte[]" line="536"/>
                        </scope>
                        <scope line="539"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="546">
                Restores this object from a stream (i.e., deserializes it).                
            </javadoc>
            <method name="readObject" type="void" line="551">
                <params>
                    <param name="ois" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="561">
                    process any new-style certs in the stream (if present)                    
                </comment>
                <comment line="564">
                    we know of 3 different cert types: X.509, PGP, SDSI, which
                     could all be present in the stream at the same time                    
                </comment>
                <comment line="571">
                    read the certificate type, and instantiate a certificate
                     factory of that type (reuse existing factory if possible)                    
                </comment>
                <comment line="575">
                    reuse certificate factory                    
                </comment>
                <comment line="578">
                    create new certificate factory                    
                </comment>
                <comment line="585">
                    store the certificate factory so we can reuse it later                    
                </comment>
                <comment line="588">
                    parse the certificate                    
                </comment>
                <declaration name="cf" type="CertificateFactory" line="552"/>
                <declaration name="cfs" type="Hashtable&lt;String,CertificateFactory&gt;" line="553"/>
                <declaration name="size" type="int" line="561"/>
                <scope line="562"/>
                <scope line="569">
                    <declaration name="certType" type="String" line="572"/>
                    <scope line="573"/>
                    <scope line="576">
                        <scope line="578"/>
                        <scope line="580"/>
                    </scope>
                    <declaration name="encoded" type="byte[]" line="588"/>
                    <scope line="589"/>
                    <scope line="591"/>
                    <declaration name="bais" type="ByteArrayInputStream" line="595"/>
                    <scope line="596"/>
                    <scope line="598"/>
                </scope>
            </method>
        </class>
    </source>