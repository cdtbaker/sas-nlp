<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.io"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.util"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.security.auth.callback"/>
        <class name="KeyStore" line="37">
            <comment line="191">
                Constant to lookup in the Security properties file to determine
                 the default keystore type.
                 In the Security properties file, the default keystore type is given as:
                 &lt;pre&gt;
                 keystore.type=jks
                 &lt;pre&gt;                
            </comment>
            <comment line="201">
                The keystore type                
            </comment>
            <comment line="204">
                The provider                
            </comment>
            <comment line="207">
                The provider implementation                
            </comment>
            <comment line="210">
                Has this keystore been initialized (loaded)?                
            </comment>
            <javadoc line="37">
                This class represents a storage facility for cryptographic
                  keys and certificates.
                  &lt;p&gt; A &lt;code&gt;KeyStore&lt;/code&gt; manages different types of entries.
                  Each type of entry implements the &lt;code&gt;KeyStore.Entry&lt;/code&gt; interface.
                  Three basic &lt;code&gt;KeyStore.Entry&lt;/code&gt; implementations are provided:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;b&gt;KeyStore.PrivateKeyEntry&lt;/b&gt;
                  &lt;p&gt; This type of entry holds a cryptographic &lt;code&gt;PrivateKey&lt;/code&gt;,
                  which is optionally stored in a protected format to prevent
                  unauthorized access.  It is also accompanied by a certificate chain
                  for the corresponding public key.
                  &lt;p&gt; Private keys and certificate chains are used by a given entity for
                  self-authentication. Applications for this authentication include software
                  distribution organizations which sign JAR files as part of releasing
                  and/or licensing software.
                  &lt;li&gt;&lt;b&gt;KeyStore.SecretKeyEntry&lt;/b&gt;
                  &lt;p&gt; This type of entry holds a cryptographic &lt;code&gt;SecretKey&lt;/code&gt;,
                  which is optionally stored in a protected format to prevent
                  unauthorized access.
                  &lt;li&gt;&lt;b&gt;KeyStore.TrustedCertificateEntry&lt;/b&gt;
                  &lt;p&gt; This type of entry contains a single public key &lt;code&gt;Certificate&lt;/code&gt;
                  belonging to another party. It is called a &lt;i&gt;trusted certificate&lt;/i&gt;
                  because the keystore owner trusts that the public key in the certificate
                  indeed belongs to the identity identified by the &lt;i&gt;subject&lt;/i&gt; (owner)
                  of the certificate.
                  &lt;p&gt;This type of entry can be used to authenticate other parties.
                  &lt;/ul&gt;
                  &lt;p&gt; Each entry in a keystore is identified by an &quot;alias&quot; string. In the
                  case of private keys and their associated certificate chains, these strings
                  distinguish among the different ways in which the entity may authenticate
                  itself. For example, the entity may authenticate itself using different
                  certificate authorities, or using different public key algorithms.
                  &lt;p&gt; Whether aliases are case sensitive is implementation dependent. In order
                  to avoid problems, it is recommended not to use aliases in a KeyStore that
                  only differ in case.
                  &lt;p&gt; Whether keystores are persistent, and the mechanisms used by the
                  keystore if it is persistent, are not specified here. This allows
                  use of a variety of techniques for protecting sensitive (e.g., private or
                  secret) keys. Smart cards or other integrated cryptographic engines
                  (SafeKeyper) are one option, and simpler mechanisms such as files may also
                  be used (in a variety of formats).
                  &lt;p&gt; Typical ways to request a KeyStore object include
                  relying on the default type and providing a specific keystore type.
                  &lt;ul&gt;
                  &lt;li&gt;To rely on the default type:
                  &lt;pre&gt;
                  KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
                  &lt;/pre&gt;
                  The system will return a keystore implementation for the default type.
                  &lt;p&gt;
                  &lt;li&gt;To provide a specific keystore type:
                  &lt;pre&gt;
                  KeyStore ks = KeyStore.getInstance(&quot;JKS&quot;);
                  &lt;/pre&gt;
                  The system will return the most preferred implementation of the
                  specified keystore type available in the environment. &lt;p&gt;
                  &lt;/ul&gt;
                  &lt;p&gt; Before a keystore can be accessed, it must be{@link #load(java.io.InputStream,char[]) loaded}.
                  &lt;pre&gt;
                  KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
                  // get user password and file input stream
                  char[] password = getPassword();
                  java.io.FileInputStream fis = null;
                  try {
                  fis = new java.io.FileInputStream(&quot;keyStoreName&quot;);
                  ks.load(fis, password);
                  } finally {
                  if (fis != null) {
                  fis.close();
                  }
                  }
                  &lt;/pre&gt;
                  To create an empty keystore using the above &lt;code&gt;load&lt;/code&gt; method,
                  pass &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;InputStream&lt;/code&gt; argument.
                  &lt;p&gt; Once the keystore has been loaded, it is possible
                  to read existing entries from the keystore, or to write new entries
                  into the keystore:
                  &lt;pre&gt;
                  KeyStore.ProtectionParameter protParam =
                  new KeyStore.PasswordProtection(password);
                  // get my private key
                  KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)
                  ks.getEntry(&quot;privateKeyAlias&quot;, protParam);
                  PrivateKey myPrivateKey = pkEntry.getPrivateKey();
                  // save my secret key
                  javax.crypto.SecretKey mySecretKey;
                  KeyStore.SecretKeyEntry skEntry =
                  new KeyStore.SecretKeyEntry(mySecretKey);
                  ks.setEntry(&quot;secretKeyAlias&quot;, skEntry, protParam);
                  // store away the keystore
                  java.io.FileOutputStream fos = null;
                  try {
                  fos = new java.io.FileOutputStream(&quot;newKeyStoreName&quot;);
                  ks.store(fos, password);
                  } finally {
                  if (fos != null) {
                  fos.close();
                  }
                  }
                  &lt;/pre&gt;
                  Note that although the same password may be used to
                  load the keystore, to protect the private key entry,
                  to protect the secret key entry, and to store the keystore
                  (as is shown in the sample code above),
                  different passwords or other protection parameters
                  may also be used.
                  &lt;p&gt; Every implementation of the Java platform is required to support
                  the following standard &lt;code&gt;KeyStore&lt;/code&gt; type:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;PKCS12&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  This type is described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore&quot;&gt;
                  KeyStore section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other types are supported.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    java.security.PrivateKey                    
                </see>
                <see>
                    javax.crypto.SecretKey                    
                </see>
                <see>
                    java.security.cert.Certificate                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="KEYSTORE_TYPE" type="String" line="198"/>
            <declaration name="type" type="String" line="201"/>
            <declaration name="provider" type="Provider" line="204"/>
            <declaration name="keyStoreSpi" type="KeyStoreSpi" line="207"/>
            <declaration name="initialized" type="boolean" line="210"/>
            <interface name="LoadStoreParameter">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <javadoc line="212">
                    A marker interface for &lt;code&gt;KeyStore&lt;/code&gt;{@link #load(KeyStore.LoadStoreParameter) load}and{@link #store(KeyStore.LoadStoreParameter) store}parameters.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="getProtectionParameter" type="ProtectionParameter" line="222"/>
                <javadoc line="222">
                    Gets the parameter used to protect keystore data.                    
                    <return>
                        the parameter used to protect keystore data, or null                        
                    </return>
                </javadoc>
            </interface>
            <interface name="ProtectionParameter">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <javadoc line="230">
                    A marker interface for keystore protection parameters.
                      &lt;p&gt; The information stored in a &lt;code&gt;ProtectionParameter&lt;/code&gt;
                      object protects the contents of a keystore.
                      For example, protection parameters may be used to check
                      the integrity of keystore data, or to protect the
                      confidentiality of sensitive keystore data
                      (such as a &lt;code&gt;PrivateKey&lt;/code&gt;).                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
            </interface>
            <class name="PasswordProtection" line="244">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <implements interface="ProtectionParameter"/>
                <implements interface="javax.security.auth.Destroyable"/>
                <javadoc line="244">
                    A password-based implementation of &lt;code&gt;ProtectionParameter&lt;/code&gt;.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="password" type="char[]" line="252"/>
                <declaration name="destroyed" type="boolean" line="253"/>
                <javadoc line="255">
                    Creates a password parameter.
                      &lt;p&gt; The specified &lt;code&gt;password&lt;/code&gt; is cloned before it is stored
                      in the new &lt;code&gt;PasswordProtection&lt;/code&gt; object.                    
                    <param>
                        password the password, which may be <code>null</code>                        
                    </param>
                </javadoc>
                <method name="PasswordProtection" type="constructor" line="263">
                    <params>
                        <param name="password" type="char[]"/>
                    </params>
                </method>
                <javadoc line="267">
                    Gets the password.
                      &lt;p&gt;Note that this method returns a reference to the password.
                      If a clone of the array is created it is the caller&apos;s
                      responsibility to zero out the password information
                      after it is no longer needed.                    
                    <see>
                        #destroy()                        
                    </see>
                    <return>
                        the password, which may be <code>null</code>                        
                    </return>
                    <exception>
                        IllegalStateException if the password has
                          been cleared (destroyed)                        
                    </exception>
                </javadoc>
                <method name="getPassword" type="char[]" line="280">
                    <scope line="281"/>
                </method>
                <javadoc line="287">
                    Clears the password.                    
                    <exception>
                        DestroyFailedException if this method was unable
                          to clear the password                        
                    </exception>
                </javadoc>
                <method name="destroy" type="void" line="294">
                    <scope line="296"/>
                </method>
                <javadoc line="301">
                    Determines if password has been cleared.                    
                    <return>
                        true if the password has been cleared, false otherwise                        
                    </return>
                </javadoc>
                <method name="isDestroyed" type="boolean" line="306"/>
            </class>
            <class name="CallbackHandlerProtection" line="311">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <implements interface="ProtectionParameter"/>
                <javadoc line="311">
                    A ProtectionParameter encapsulating a CallbackHandler.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="handler" type="CallbackHandler" line="319"/>
                <javadoc line="321">
                    Constructs a new CallbackHandlerProtection from a
                      CallbackHandler.                    
                    <param>
                        handler the CallbackHandler                        
                    </param>
                    <exception>
                        NullPointerException if handler is null                        
                    </exception>
                </javadoc>
                <method name="CallbackHandlerProtection" type="constructor" line="328">
                    <params>
                        <param name="handler" type="CallbackHandler"/>
                    </params>
                    <scope line="329"/>
                </method>
                <javadoc line="335">
                    Returns the CallbackHandler.                    
                    <return>
                        the CallbackHandler.                        
                    </return>
                </javadoc>
                <method name="getCallbackHandler" type="CallbackHandler" line="340"/>
            </class>
            <interface name="Entry">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <javadoc line="346">
                    A marker interface for &lt;code&gt;KeyStore&lt;/code&gt; entry types.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
            </interface>
            <class name="PrivateKeyEntry" line="353">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <implements interface="Entry"/>
                <javadoc line="353">
                    A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a &lt;code&gt;PrivateKey&lt;/code&gt;
                      and corresponding certificate chain.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="privKey" type="PrivateKey" line="361"/>
                <declaration name="chain" type="Certificate[]" line="362"/>
                <javadoc line="364">
                    Constructs a &lt;code&gt;PrivateKeyEntry&lt;/code&gt; with a
                      &lt;code&gt;PrivateKey&lt;/code&gt; and corresponding certificate chain.
                      &lt;p&gt; The specified &lt;code&gt;chain&lt;/code&gt; is cloned before it is stored
                      in the new &lt;code&gt;PrivateKeyEntry&lt;/code&gt; object.                    
                    <param>
                        privateKey the <code>PrivateKey</code>                        
                    </param>
                    <param>
                        chain an array of <code>Certificate</code>s
                          representing the certificate chain.
                          The chain must be ordered and contain a
                          <code>Certificate</code> at index 0
                          corresponding to the private key.                        
                    </param>
                    <exception>
                        NullPointerException if
                          <code>privateKey</code> or <code>chain</code>
                          is <code>null</code>                        
                    </exception>
                    <exception>
                        IllegalArgumentException if the specified chain has a
                          length of 0, if the specified chain does not contain
                          <code>Certificate</code>s of the same type,
                          or if the <code>PrivateKey</code> algorithm
                          does not match the algorithm of the <code>PublicKey</code>
                          in the end entity <code>Certificate</code> (at index 0)                        
                    </exception>
                </javadoc>
                <method name="PrivateKeyEntry" type="constructor" line="388">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="chain" type="Certificate[]"/>
                    </params>
                    <scope line="389"/>
                    <scope line="392"/>
                    <declaration name="clonedChain" type="Certificate[]" line="397"/>
                    <declaration name="certType" type="String" line="398"/>
                    <scope line="399">
                        <scope line="400"/>
                    </scope>
                    <scope line="407"/>
                    <scope line="416"/>
                    <scope line="421"/>
                </method>
                <javadoc line="426">
                    Gets the &lt;code&gt;PrivateKey&lt;/code&gt; from this entry.                    
                    <return>
                        the <code>PrivateKey</code> from this entry                        
                    </return>
                </javadoc>
                <method name="getPrivateKey" type="PrivateKey" line="431"/>
                <javadoc line="435">
                    Gets the &lt;code&gt;Certificate&lt;/code&gt; chain from this entry.
                      &lt;p&gt; The stored chain is cloned before being returned.                    
                    <return>
                        an array of <code>Certificate</code>s corresponding
                          to the certificate chain for the public key.
                          If the certificates are of type X.509,
                          the runtime type of the returned array is
                          <code>X509Certificate[]</code>.                        
                    </return>
                </javadoc>
                <method name="getCertificateChain" type="Certificate[]" line="446"/>
                <javadoc line="450">
                    Gets the end entity &lt;code&gt;Certificate&lt;/code&gt;
                      from the certificate chain in this entry.                    
                    <return>
                        the end entity <code>Certificate</code> (at index 0)
                          from the certificate chain in this entry.
                          If the certificate is of type X.509,
                          the runtime type of the returned certificate is
                          <code>X509Certificate</code>.                        
                    </return>
                </javadoc>
                <method name="getCertificate" type="Certificate" line="460"/>
                <javadoc line="464">
                    Returns a string representation of this PrivateKeyEntry.                    
                    <return>
                        a string representation of this PrivateKeyEntry.                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="468">
                    <declaration name="sb" type="StringBuilder" line="469"/>
                    <scope line="472"/>
                </method>
            </class>
            <class name="SecretKeyEntry" line="481">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <implements interface="Entry"/>
                <javadoc line="481">
                    A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a &lt;code&gt;SecretKey&lt;/code&gt;.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="sKey" type="SecretKey" line="488"/>
                <javadoc line="490">
                    Constructs a &lt;code&gt;SecretKeyEntry&lt;/code&gt; with a
                      &lt;code&gt;SecretKey&lt;/code&gt;.                    
                    <param>
                        secretKey the <code>SecretKey</code>                        
                    </param>
                    <exception>
                        NullPointerException if <code>secretKey</code>
                          is <code>null</code>                        
                    </exception>
                </javadoc>
                <method name="SecretKeyEntry" type="constructor" line="499">
                    <params>
                        <param name="secretKey" type="SecretKey"/>
                    </params>
                    <scope line="500"/>
                </method>
                <javadoc line="506">
                    Gets the &lt;code&gt;SecretKey&lt;/code&gt; from this entry.                    
                    <return>
                        the <code>SecretKey</code> from this entry                        
                    </return>
                </javadoc>
                <method name="getSecretKey" type="SecretKey" line="511"/>
                <javadoc line="515">
                    Returns a string representation of this SecretKeyEntry.                    
                    <return>
                        a string representation of this SecretKeyEntry.                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="519"/>
            </class>
            <class name="TrustedCertificateEntry" line="524">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <implements interface="Entry"/>
                <javadoc line="524">
                    A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a trusted
                      &lt;code&gt;Certificate&lt;/code&gt;.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="cert" type="Certificate" line="532"/>
                <javadoc line="534">
                    Constructs a &lt;code&gt;TrustedCertificateEntry&lt;/code&gt; with a
                      trusted &lt;code&gt;Certificate&lt;/code&gt;.                    
                    <param>
                        trustedCert the trusted <code>Certificate</code>                        
                    </param>
                    <exception>
                        NullPointerException if
                          <code>trustedCert</code> is <code>null</code>                        
                    </exception>
                </javadoc>
                <method name="TrustedCertificateEntry" type="constructor" line="543">
                    <params>
                        <param name="trustedCert" type="Certificate"/>
                    </params>
                    <scope line="544"/>
                </method>
                <javadoc line="550">
                    Gets the trusted &lt;code&gt;Certficate&lt;/code&gt; from this entry.                    
                    <return>
                        the trusted <code>Certificate</code> from this entry                        
                    </return>
                </javadoc>
                <method name="getTrustedCertificate" type="Certificate" line="555"/>
                <javadoc line="559">
                    Returns a string representation of this TrustedCertificateEntry.                    
                    <return>
                        a string representation of this TrustedCertificateEntry.                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="563"/>
            </class>
            <javadoc line="568">
                Creates a KeyStore object of the given type, and encapsulates the given
                  provider implementation (SPI object) in it.                
                <param>
                    keyStoreSpi the provider implementation.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <param>
                    type the keystore type.                    
                </param>
            </javadoc>
            <method name="KeyStore" type="constructor" line="577">
                <params>
                    <param name="keyStoreSpi" type="KeyStoreSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="583">
                Returns a keystore object of the specified type.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new KeyStore object encapsulating the
                  KeyStoreSpi implementation from the first
                  Provider that supports the specified type is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    type the type of keystore.
                      See the KeyStore section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard keystore types.                    
                </param>
                <return>
                    a keystore object of the specified type.                    
                </return>
                <exception>
                    KeyStoreException if no Provider supports a
                      KeyStoreSpi implementation for the
                      specified type.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyStore" line="611">
                <params>
                    <param name="type" type="String"/>
                </params>
                <scope line="612">
                    <declaration name="objs" type="Object[]" line="613"/>
                </scope>
                <scope line="615"/>
                <scope line="617"/>
            </method>
            <javadoc line="622">
                Returns a keystore object of the specified type.
                  &lt;p&gt; A new KeyStore object encapsulating the
                  KeyStoreSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    type the type of keystore.
                      See the KeyStore section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard keystore types.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    a keystore object of the specified type.                    
                </return>
                <exception>
                    KeyStoreException if a KeyStoreSpi
                      implementation for the specified type is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the provider name is null
                      or empty.                    
                </exception>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyStore" line="657">
                <params>
                    <param name="type" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="660">
                    <declaration name="objs" type="Object[]" line="661"/>
                </scope>
                <scope line="663"/>
            </method>
            <javadoc line="668">
                Returns a keystore object of the specified type.
                  &lt;p&gt; A new KeyStore object encapsulating the
                  KeyStoreSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    type the type of keystore.
                      See the KeyStore section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard keystore types.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    a keystore object of the specified type.                    
                </return>
                <exception>
                    KeyStoreException if KeyStoreSpi
                      implementation for the specified type is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified provider is null.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInstance" type="KeyStore" line="698">
                <params>
                    <param name="type" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="701">
                    <declaration name="objs" type="Object[]" line="702"/>
                </scope>
                <scope line="704"/>
            </method>
            <javadoc line="709">
                Returns the default keystore type as specified in the Java security
                  properties file, or the string
                  &amp;quot;jks&amp;quot; (acronym for &amp;quot;Java keystore&amp;quot;)
                  if no such property exists.
                  The Java security properties file is located in the file named
                  &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security.
                  &amp;lt;JAVA_HOME&amp;gt; refers to the value of the java.home system property,
                  and specifies the directory where the JRE is installed.
                  &lt;p&gt;The default keystore type can be used by applications that do not
                  want to use a hard-coded keystore type when calling one of the
                  &lt;code&gt;getInstance&lt;/code&gt; methods, and want to provide a default keystore
                  type in case a user does not specify its own.
                  &lt;p&gt;The default keystore type can be changed by setting the value of the
                  &quot;keystore.type&quot; security property (in the Java security properties
                  file) to the desired keystore type.                
                <return>
                    the default keystore type as specified in the
                      Java security properties file, or the string &quot;jks&quot;
                      if no such property exists.                    
                </return>
            </javadoc>
            <method name="getDefaultType" type="String" line="732">
                <declaration name="kstype" type="String" line="733"/>
                <anonymous_class line="734">
                    <method name="run" type="String" line="735"/>
                </anonymous_class>
                <scope line="739"/>
            </method>
            <javadoc line="745">
                Returns the provider of this keystore.                
                <return>
                    the provider of this keystore.                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="751"/>
            <javadoc line="755">
                Returns the type of this keystore.                
                <return>
                    the type of this keystore.                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="761"/>
            <javadoc line="765">
                Returns the key associated with the given alias, using the given
                  password to recover it.  The key must have been associated with
                  the alias by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt; or &lt;code&gt;SecretKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password for recovering the key                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a key-related entry.                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g., the given password is wrong).                    
                </exception>
            </javadoc>
            <method name="getKey" type="Key" line="788">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="789"/>
            </method>
            <javadoc line="795">
                Returns the certificate chain associated with the given alias.
                  The certificate chain must have been associated with the alias
                  by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      followed by zero or more certificate authorities), or null if the given alias
                      does not exist or does not contain a certificate chain                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="getCertificateChain" type="Certificate[]" line="813">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="814"/>
            </method>
            <javadoc line="820">
                Returns the certificate associated with the given alias.
                  &lt;p&gt; If the given alias name identifies an entry
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  then the trusted certificate contained in that entry is returned.
                  &lt;p&gt; If the given alias name identifies an entry
                  created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;,
                  then the first element of the certificate chain in that entry
                  is returned.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="getCertificate" type="Certificate" line="846">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="847"/>
            </method>
            <javadoc line="853">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="getCreationDate" type="Date" line="866">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="867"/>
            </method>
            <javadoc line="873">
                Assigns the given key to the given alias, protecting it with the given
                  password.
                  &lt;p&gt;If the given key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded), the given key cannot be protected, or this operation fails
                      for some other reason                    
                </exception>
            </javadoc>
            <method name="setKeyEntry" type="void" line="899">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="900"/>
                <scope line="904"/>
            </method>
            <javadoc line="912">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a
                  certificate chain certifying the corresponding public key. If the
                  underlying keystore implementation is of type &lt;code&gt;jks&lt;/code&gt;,
                  &lt;code&gt;key&lt;/code&gt; must be encoded as an
                  &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; as defined in the PKCS #8 standard.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded), or if this operation fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="setKeyEntry" type="void" line="939">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="940"/>
            </method>
            <javadoc line="946">
                Assigns the given trusted certificate to the given alias.
                  &lt;p&gt; If the given alias identifies an existing entry
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  the trusted certificate in the existing entry
                  is overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the keystore has not been initialized,
                      or the given alias already exists and does not identify an
                      entry containing a trusted certificate,
                      or this operation fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="setCertificateEntry" type="void" line="966">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="967"/>
            </method>
            <javadoc line="973">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the keystore has not been initialized,
                      or if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="deleteEntry" type="void" line="983">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="984"/>
            </method>
            <javadoc line="990">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="aliases" type="Enumeration<String>" line="1000">
                <scope line="1001"/>
            </method>
            <javadoc line="1007">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="containsAlias" type="boolean" line="1019">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="1020"/>
            </method>
            <javadoc line="1026">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="size" type="int" line="1036">
                <scope line="1037"/>
            </method>
            <javadoc line="1043">
                Returns true if the entry identified by the given alias
                  was created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt; or a &lt;code&gt;SecretKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias for the keystore entry to be checked                    
                </param>
                <return>
                    true if the entry identified by the given alias is a
                      key-related entry, false otherwise.                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="isKeyEntry" type="boolean" line="1059">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="1060"/>
            </method>
            <javadoc line="1066">
                Returns true if the entry identified by the given alias
                  was created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;.                
                <param>
                    alias the alias for the keystore entry to be checked                    
                </param>
                <return>
                    true if the entry identified by the given alias contains a
                      trusted certificate, false otherwise.                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="isCertificateEntry" type="boolean" line="1082">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="1083"/>
            </method>
            <javadoc line="1089">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt; This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered was
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  then the given certificate is compared to that entry&apos;s certificate.
                  &lt;p&gt; If the entry being considered was
                  created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;,
                  then the given certificate is compared to the first
                  element of that entry&apos;s certificate chain.                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the alias name of the first entry with a matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
            </javadoc>
            <method name="getCertificateAlias" type="String" line="1117">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="1118"/>
            </method>
            <javadoc line="1124">
                Stores this keystore to the given output stream, and protects its
                  integrity with the given password.                
                <param>
                    stream the output stream to which this keystore is written.                    
                </param>
                <param>
                    password the password to generate the keystore integrity check                    
                </param>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
            </javadoc>
            <method name="store" type="void" line="1142">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="1143"/>
            </method>
            <javadoc line="1149">
                Stores this keystore using the given &lt;code&gt;LoadStoreParameter&lt;/code&gt;.                
                <param>
                    param the <code>LoadStoreParameter</code>
                      that specifies how to store the keystore,
                      which may be <code>null</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      <code>LoadStoreParameter</code>
                      input is not recognized                    
                </exception>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded)                    
                </exception>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="store" type="void" line="1171">
                <params>
                    <param name="param" type="LoadStoreParameter"/>
                </params>
                <scope line="1172"/>
            </method>
            <javadoc line="1178">
                Loads this KeyStore from the given input stream.
                  &lt;p&gt;A password may be given to unlock the keystore
                  (e.g. the keystore resides on a hardware token device),
                  or to check the integrity of the keystore data.
                  If a password is not given for integrity checking,
                  then integrity checking is not performed.
                  &lt;p&gt;In order to create an empty keystore, or if the keystore cannot
                  be initialized from a stream, pass &lt;code&gt;null&lt;/code&gt;
                  as the &lt;code&gt;stream&lt;/code&gt; argument.
                  &lt;p&gt; Note that if this keystore has already been loaded, it is
                  reinitialized and loaded again from the given input stream.                
                <param>
                    stream the input stream from which the keystore is loaded,
                      or <code>null</code>                    
                </param>
                <param>
                    password the password used to check the integrity of
                      the keystore, the password used to unlock the keystore,
                      or <code>null</code>                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data, if a password is required but not given,
                      or if the given password was incorrect. If the error is due to a
                      wrong password, the {@link Throwable#getCause cause} of the
                      <code>IOException</code> should be an
                      <code>UnrecoverableKeyException</code>                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
            </javadoc>
            <method name="load" type="void" line="1213">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
            </method>
            <javadoc line="1218">
                Loads this keystore using the given &lt;code&gt;LoadStoreParameter&lt;/code&gt;.
                  &lt;p&gt; Note that if this KeyStore has already been loaded, it is
                  reinitialized and loaded again from the given parameter.                
                <param>
                    param the <code>LoadStoreParameter</code>
                      that specifies how to load the keystore,
                      which may be <code>null</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      <code>LoadStoreParameter</code>
                      input is not recognized                    
                </exception>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data. If the error is due to an incorrect
                      <code>ProtectionParameter</code> (e.g. wrong password)
                      the {@link Throwable#getCause cause} of the
                      <code>IOException</code> should be an
                      <code>UnrecoverableKeyException</code>                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="load" type="void" line="1246">
                <params>
                    <param name="param" type="LoadStoreParameter"/>
                </params>
            </method>
            <javadoc line="1252">
                Gets a keystore &lt;code&gt;Entry&lt;/code&gt; for the specified alias
                  with the specified protection parameter.                
                <param>
                    alias get the keystore <code>Entry</code> for this alias                    
                </param>
                <param>
                    protParam the <code>ProtectionParameter</code>
                      used to protect the <code>Entry</code>,
                      which may be <code>null</code>                    
                </param>
                <return>
                    the keystore <code>Entry</code> for the specified alias,
                      or <code>null</code> if there is no such entry                    
                </return>
                <exception>
                    NullPointerException if
                      <code>alias</code> is <code>null</code>                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      entry cannot be found                    
                </exception>
                <exception>
                    UnrecoverableEntryException if the specified
                      <code>protParam</code> were insufficient or invalid                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the entry is a
                      <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>
                      and the specified <code>protParam</code> does not contain
                      the information needed to recover the key (e.g. wrong password)                    
                </exception>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded).                    
                </exception>
                <see>
                    #setEntry(String,KeyStore.Entry,KeyStore.ProtectionParameter)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getEntry" type="Entry" line="1282">
                <params>
                    <param name="alias" type="String"/>
                    <param name="protParam" type="ProtectionParameter"/>
                </params>
                <scope line="1284"/>
                <scope line="1287"/>
            </method>
            <javadoc line="1293">
                Saves a keystore &lt;code&gt;Entry&lt;/code&gt; under the specified alias.
                  The protection parameter is used to protect the
                  &lt;code&gt;Entry&lt;/code&gt;.
                  &lt;p&gt; If an entry already exists for the specified alias,
                  it is overridden.                
                <param>
                    alias save the keystore <code>Entry</code> under this alias                    
                </param>
                <param>
                    entry the <code>Entry</code> to save                    
                </param>
                <param>
                    protParam the <code>ProtectionParameter</code>
                      used to protect the <code>Entry</code>,
                      which may be <code>null</code>                    
                </param>
                <exception>
                    NullPointerException if
                      <code>alias</code> or <code>entry</code>
                      is <code>null</code>                    
                </exception>
                <exception>
                    KeyStoreException if the keystore has not been initialized
                      (loaded), or if this operation fails for some other reason                    
                </exception>
                <see>
                    #getEntry(String,KeyStore.ProtectionParameter)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setEntry" type="void" line="1319">
                <params>
                    <param name="alias" type="String"/>
                    <param name="entry" type="Entry"/>
                    <param name="protParam" type="ProtectionParameter"/>
                </params>
                <scope line="1320"/>
                <scope line="1323"/>
            </method>
            <javadoc line="1329">
                Determines if the keystore &lt;code&gt;Entry&lt;/code&gt; for the specified
                  &lt;code&gt;alias&lt;/code&gt; is an instance or subclass of the specified
                  &lt;code&gt;entryClass&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    entryClass the entry class                    
                </param>
                <return>
                    true if the keystore <code>Entry</code> for the specified
                      <code>alias</code> is an instance or subclass of the
                      specified <code>entryClass</code>, false otherwise                    
                </return>
                <exception>
                    NullPointerException if
                      <code>alias</code> or <code>entryClass</code>
                      is <code>null</code>                    
                </exception>
                <exception>
                    KeyStoreException if the keystore has not been
                      initialized (loaded)                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="entryInstanceOf" type="boolean" line="1353">
                <params>
                    <param name="alias" type="String"/>
                    <param name="entryClass" type="Class<? extends KeyStore.Entry>"/>
                </params>
                <scope line="1355"/>
                <scope line="1358"/>
            </method>
            <class name="Builder" line="1364">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <javadoc line="1364">
                    A description of a to-be-instantiated KeyStore object.
                      &lt;p&gt;An instance of this class encapsulates the information needed to
                      instantiate and initialize a KeyStore object. That process is
                      triggered when the {@linkplain #getKeyStore} method is called.
                      &lt;p&gt;This makes it possible to decouple configuration from KeyStore
                      object creation and e.g. delay a password prompt until it is
                      needed.                    
                    <see>
                        KeyStore                        
                    </see>
                    <see>
                        javax.net.ssl.KeyStoreBuilderParameters                        
                    </see>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="MAX_CALLBACK_TRIES" type="int" line="1382"/>
                <javadoc line="1384">
                    Construct a new Builder.                    
                </javadoc>
                <method name="Builder" type="constructor" line="1387">
                    <comment line="1388">
                        empty                        
                    </comment>
                </method>
                <method name="getKeyStore" type="KeyStore" line="1391"/>
                <javadoc line="1391">
                    Returns the KeyStore described by this object.                    
                    <exception>
                        KeyStoreException if an error occured during the
                          operation, for example if the KeyStore could not be
                          instantiated or loaded                        
                    </exception>
                </javadoc>
                <method name="getProtectionParameter" type="ProtectionParameter" line="1400"/>
                <javadoc line="1400">
                    Returns the ProtectionParameters that should be used to obtain
                      the {@link KeyStore.Entry Entry} with the given alias.
                      The &lt;code&gt;getKeyStore&lt;/code&gt; method must be invoked before this
                      method may be called.                    
                    <return>
                        the ProtectionParameters that should be used to obtain
                          the {@link KeyStore.Entry Entry} with the given alias.                        
                    </return>
                    <param>
                        alias the alias of the KeyStore entry                        
                    </param>
                    <throws>
                        NullPointerException if alias is null                        
                    </throws>
                    <throws>
                        KeyStoreException if an error occured during the
                          operation                        
                    </throws>
                    <throws>
                        IllegalStateException if the getKeyStore method has
                          not been invoked prior to calling this method                        
                    </throws>
                </javadoc>
                <javadoc line="1418">
                    Returns a new Builder that encapsulates the given KeyStore.
                      The {@linkplain #getKeyStore} method of the returned object
                      will return &lt;code&gt;keyStore&lt;/code&gt;, the {@linkplain #getProtectionParameter getProtectionParameter()} method will
                      return &lt;code&gt;protectionParameters&lt;/code&gt;.
                      &lt;p&gt; This is useful if an existing KeyStore object needs to be
                      used with Builder-based APIs.                    
                    <return>
                        a new Builder object                        
                    </return>
                    <param>
                        keyStore the KeyStore to be encapsulated                        
                    </param>
                    <param>
                        protectionParameter the ProtectionParameter used to
                          protect the KeyStore entries                        
                    </param>
                    <throws>
                        NullPointerException if keyStore or
                          protectionParameters is null                        
                    </throws>
                    <throws>
                        IllegalArgumentException if the keyStore has not been
                          initialized                        
                    </throws>
                </javadoc>
                <method name="newInstance" type="Builder" line="1438">
                    <params>
                        <param name="keyStore" type="KeyStore"/>
                        <param name="protectionParameter" type="ProtectionParameter"/>
                    </params>
                    <scope line="1439"/>
                    <scope line="1442"/>
                    <anonymous_class line="1445">
                        <declaration name="getCalled" type="boolean" line="1446"/>
                        <method name="getKeyStore" type="KeyStore" line="1448"/>
                        <method name="getProtectionParameter" type="ProtectionParameter" line="1454">
                            <params>
                                <param name="alias" type="String"/>
                            </params>
                            <scope line="1455"/>
                            <scope line="1458"/>
                        </method>
                    </anonymous_class>
                </method>
                <javadoc line="1467">
                    Returns a new Builder object.
                      &lt;p&gt;The first call to the {@link #getKeyStore} method on the returned
                      builder will create a KeyStore of type &lt;code&gt;type&lt;/code&gt; and call
                      its {@link KeyStore#load load()} method.
                      The &lt;code&gt;inputStream&lt;/code&gt; argument is constructed from
                      &lt;code&gt;file&lt;/code&gt;.
                      If &lt;code&gt;protection&lt;/code&gt; is a
                      &lt;code&gt;PasswordProtection&lt;/code&gt;, the password is obtained by
                      calling the &lt;code&gt;getPassword&lt;/code&gt; method.
                      Otherwise, if &lt;code&gt;protection&lt;/code&gt; is a
                      &lt;code&gt;CallbackHandlerProtection&lt;/code&gt;, the password is obtained
                      by invoking the CallbackHandler.
                      &lt;p&gt;Subsequent calls to {@link #getKeyStore} return the same object
                      as the initial call. If the initial call to failed with a
                      KeyStoreException, subsequent calls also throw a
                      KeyStoreException.
                      &lt;p&gt;The KeyStore is instantiated from &lt;code&gt;provider&lt;/code&gt; if
                      non-null. Otherwise, all installed providers are searched.
                      &lt;p&gt;Calls to {@link #getProtectionParameter getProtectionParameter()}will return a {@link KeyStore.PasswordProtection PasswordProtection}object encapsulating the password that was used to invoke the
                      &lt;code&gt;load&lt;/code&gt; method.
                      &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; that the {@link #getKeyStore} method is executed
                      within the {@link AccessControlContext} of the code invoking this
                      method.                    
                    <return>
                        a new Builder object                        
                    </return>
                    <param>
                        type the type of KeyStore to be constructed                        
                    </param>
                    <param>
                        provider the provider from which the KeyStore is to
                          be instantiated (or null)                        
                    </param>
                    <param>
                        file the File that contains the KeyStore data                        
                    </param>
                    <param>
                        protection the ProtectionParameter securing the KeyStore data                        
                    </param>
                    <throws>
                        NullPointerException if type, file or protection is null                        
                    </throws>
                    <throws>
                        IllegalArgumentException if protection is not an instance
                          of either PasswordProtection or CallbackHandlerProtection; or
                          if file does not exist or does not refer to a normal file                        
                    </throws>
                </javadoc>
                <method name="newInstance" type="Builder" line="1511">
                    <params>
                        <param name="type" type="String"/>
                        <param name="provider" type="Provider"/>
                        <param name="file" type="File"/>
                        <param name="protection" type="ProtectionParameter"/>
                    </params>
                    <scope line="1512"/>
                    <scope line="1516"/>
                    <scope line="1521"/>
                </method>
                <class name="FileBuilder" line="1530">
                    <extends class="Builder"/>
                    <declaration name="type" type="String" line="1532"/>
                    <declaration name="provider" type="Provider" line="1533"/>
                    <declaration name="file" type="File" line="1534"/>
                    <declaration name="protection" type="ProtectionParameter" line="1535"/>
                    <declaration name="keyProtection" type="ProtectionParameter" line="1536"/>
                    <declaration name="context" type="AccessControlContext" line="1537"/>
                    <declaration name="keyStore" type="KeyStore" line="1539"/>
                    <declaration name="oldException" type="Throwable" line="1541"/>
                    <method name="FileBuilder" type="constructor" line="1545">
                        <params>
                            <param name="type" type="String"/>
                            <param name="provider" type="Provider"/>
                            <param name="file" type="File"/>
                            <param name="protection" type="ProtectionParameter"/>
                            <param name="context" type="AccessControlContext"/>
                        </params>
                    </method>
                    <method name="getKeyStore" type="KeyStore" line="1554">
                        <comment line="1569">
                            when using a CallbackHandler,                            
                        </comment>
                        <comment line="1570">
                            reprompt if the password is wrong                            
                        </comment>
                        <scope line="1555"/>
                        <scope line="1558"/>
                        <anonymous_class line="1564">
                            <method name="run" type="KeyStore" line="1565">
                                <comment line="1569">
                                    when using a CallbackHandler,                                    
                                </comment>
                                <comment line="1570">
                                    reprompt if the password is wrong                                    
                                </comment>
                                <scope line="1566"/>
                                <declaration name="tries" type="int" line="1571"/>
                                <scope line="1572">
                                    <scope line="1574"/>
                                    <scope line="1576">
                                        <scope line="1578"/>
                                    </scope>
                                </scope>
                            </method>
                            <method name="run0" type="KeyStore" line="1585">
                                <declaration name="ks" type="KeyStore" line="1586"/>
                                <scope line="1587"/>
                                <scope line="1589"/>
                                <declaration name="in" type="InputStream" line="1592"/>
                                <declaration name="password" type="char[]" line="1593"/>
                                <scope line="1594">
                                    <scope line="1596"/>
                                    <scope line="1600">
                                        <declaration name="handler" type="CallbackHandler" line="1601"/>
                                        <declaration name="callback" type="PasswordCallback" line="1604"/>
                                        <scope line="1609"/>
                                    </scope>
                                </scope>
                                <scope line="1618">
                                    <scope line="1619"/>
                                </scope>
                            </method>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedExceptionAction&lt;KeyStore&gt;" line="1563"/>
                        <scope line="1625"/>
                        <scope line="1628"/>
                    </method>
                    <method name="getProtectionParameter" type="ProtectionParameter" line="1636">
                        <params>
                            <param name="alias" type="String"/>
                        </params>
                        <scope line="1637"/>
                        <scope line="1640"/>
                    </method>
                </class>
                <javadoc line="1648">
                    Returns a new Builder object.
                      &lt;p&gt;Each call to the {@link #getKeyStore} method on the returned
                      builder will return a new KeyStore object of type &lt;code&gt;type&lt;/code&gt;.
                      Its {@link KeyStore#load(KeyStore.LoadStoreParameter) load()}method is invoked using a
                      &lt;code&gt;LoadStoreParameter&lt;/code&gt; that encapsulates
                      &lt;code&gt;protection&lt;/code&gt;.
                      &lt;p&gt;The KeyStore is instantiated from &lt;code&gt;provider&lt;/code&gt; if
                      non-null. Otherwise, all installed providers are searched.
                      &lt;p&gt;Calls to {@link #getProtectionParameter getProtectionParameter()}will return &lt;code&gt;protection&lt;/code&gt;.
                      &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; that the {@link #getKeyStore} method is executed
                      within the {@link AccessControlContext} of the code invoking this
                      method.                    
                    <return>
                        a new Builder object                        
                    </return>
                    <param>
                        type the type of KeyStore to be constructed                        
                    </param>
                    <param>
                        provider the provider from which the KeyStore is to
                          be instantiated (or null)                        
                    </param>
                    <param>
                        protection the ProtectionParameter securing the Keystore                        
                    </param>
                    <throws>
                        NullPointerException if type or protection is null                        
                    </throws>
                </javadoc>
                <method name="newInstance" type="Builder" line="1676">
                    <params>
                        <param name="type" type="String"/>
                        <param name="provider" type="Provider"/>
                        <param name="protection" type="ProtectionParameter"/>
                    </params>
                    <comment line="1699">
                        when using a CallbackHandler,                        
                    </comment>
                    <comment line="1700">
                        reprompt if the password is wrong                        
                    </comment>
                    <scope line="1677"/>
                    <declaration name="context" type="AccessControlContext" line="1680"/>
                    <anonymous_class line="1681">
                        <declaration name="getCalled" type="boolean" line="1682"/>
                        <declaration name="oldException" type="IOException" line="1683"/>
                        <declaration name="action" type="PrivilegedExceptionAction&lt;KeyStore&gt;" line="1685"/>
                        <anonymous_class line="1686">
                            <method name="run" type="KeyStore" line="1688">
                                <comment line="1699">
                                    when using a CallbackHandler,                                    
                                </comment>
                                <comment line="1700">
                                    reprompt if the password is wrong                                    
                                </comment>
                                <declaration name="ks" type="KeyStore" line="1689"/>
                                <scope line="1690"/>
                                <scope line="1692"/>
                                <declaration name="param" type="LoadStoreParameter" line="1695"/>
                                <scope line="1696"/>
                                <scope line="1698">
                                    <declaration name="tries" type="int" line="1701"/>
                                    <scope line="1702">
                                        <scope line="1704"/>
                                        <scope line="1707">
                                            <scope line="1708">
                                                <scope line="1709"/>
                                                <scope line="1711"/>
                                            </scope>
                                        </scope>
                                    </scope>
                                </scope>
                            </method>
                        </anonymous_class>
                        <method name="getKeyStore" type="KeyStore" line="1725">
                            <scope line="1726"/>
                            <scope line="1731"/>
                            <scope line="1733">
                                <declaration name="cause" type="Throwable" line="1734"/>
                            </scope>
                        </method>
                        <method name="getProtectionParameter" type="ProtectionParameter" line="1741">
                            <params>
                                <param name="alias" type="String"/>
                            </params>
                            <scope line="1742"/>
                            <scope line="1745"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <class name="SimpleLoadStoreParameter" line="1756">
                <comment line="1382">
                    maximum times to try the callbackhandler if the password is wrong                    
                </comment>
                <implements interface="LoadStoreParameter"/>
                <declaration name="protection" type="ProtectionParameter" line="1758"/>
                <method name="SimpleLoadStoreParameter" type="constructor" line="1760">
                    <params>
                        <param name="protection" type="ProtectionParameter"/>
                    </params>
                </method>
                <method name="getProtectionParameter" type="ProtectionParameter" line="1764"/>
            </class>
        </class>
    </source>