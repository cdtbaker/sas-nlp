<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util.Set"/>
        <interface name="AlgorithmConstraints">
            <javadoc line="3">
                This interface specifies constraints for cryptographic algorithms,
                  keys (key sizes), and other algorithm parameters.
                  &lt;p&gt;{@code AlgorithmConstraints} objects are immutable.  An implementation
                  of this interface should not provide methods that can change the state
                  of an instance once it has been created.
                  &lt;p&gt;
                  Note that {@code AlgorithmConstraints} can be used to represent the
                  restrictions described by the security properties{@code jdk.certpath.disabledAlgorithms} and{@code jdk.tls.disabledAlgorithms}, or could be used by a
                  concrete {@code PKIXCertPathChecker} to check whether a specified
                  certificate in the certification path contains the required algorithm
                  constraints.                
                <see>
                    javax.net.ssl.SSLParameters#getAlgorithmConstraints                    
                </see>
                <see>
                    javax.net.ssl.SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="permits" type="boolean" line="20"/>
            <javadoc line="20">
                Determines whether an algorithm is granted permission for the
                  specified cryptographic primitives.                
                <param>
                    primitives a set of cryptographic primitives                    
                </param>
                <param>
                    algorithm the algorithm name                    
                </param>
                <param>
                    parameters the algorithm parameters, or null if no additional
                      parameters                    
                </param>
                <return>
                    true if the algorithm is permitted and can be used for all
                      of the specified cryptographic primitives                    
                </return>
                <throws>
                    IllegalArgumentException if primitives or algorithm is null
                      or empty                    
                </throws>
            </javadoc>
            <method name="permits" type="boolean" line="33"/>
            <javadoc line="33">
                Determines whether a key is granted permission for the specified
                  cryptographic primitives.
                  &lt;p&gt;
                  This method is usually used to check key size and key usage.                
                <param>
                    primitives a set of cryptographic primitives                    
                </param>
                <param>
                    key the key                    
                </param>
                <return>
                    true if the key can be used for all of the specified
                      cryptographic primitives                    
                </return>
                <throws>
                    IllegalArgumentException if primitives is null or empty,
                      or the key is null                    
                </throws>
            </javadoc>
            <method name="permits" type="boolean" line="46"/>
            <javadoc line="46">
                Determines whether an algorithm and the corresponding key are granted
                  permission for the specified cryptographic primitives.                
                <param>
                    primitives a set of cryptographic primitives                    
                </param>
                <param>
                    algorithm the algorithm name                    
                </param>
                <param>
                    key the key                    
                </param>
                <param>
                    parameters the algorithm parameters, or null if no additional
                      parameters                    
                </param>
                <return>
                    true if the key and the algorithm can be used for all of the
                      specified cryptographic primitives                    
                </return>
                <throws>
                    IllegalArgumentException if primitives or algorithm is null
                      or empty, or the key is null                    
                </throws>
            </javadoc>
        </interface>
    </source>