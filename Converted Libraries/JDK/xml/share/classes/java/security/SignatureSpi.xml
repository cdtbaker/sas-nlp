<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="SignatureSpi" line="7">
            <javadoc line="7">
                This class defines the &lt;i&gt;Service Provider Interface&lt;/i&gt; (&lt;b&gt;SPI&lt;/b&gt;)
                  for the &lt;code&gt;Signature&lt;/code&gt; class, which is used to provide the
                  functionality of a digital signature algorithm. Digital signatures are used
                  for authentication and integrity assurance of digital data.
                  .
                  &lt;p&gt; All the abstract methods in this class must be implemented by each
                  cryptographic service provider who wishes to supply the implementation
                  of a particular signature algorithm.                
                <author>
                    Benjamin Renaud                    
                </author>
                <see>
                    Signature                    
                </see>
            </javadoc>
            <declaration name="appRandom" type="SecureRandom" line="20"/>
            <javadoc line="20">
                Application-specified source of randomness.                
            </javadoc>
            <method name="engineInitVerify" type="void" line="24"/>
            <javadoc line="24">
                Initializes this signature object with the specified
                  public key for verification operations.                
                <param>
                    publicKey the public key of the identity whose signature is
                      going to be verified.                    
                </param>
                <exception>
                    InvalidKeyException if the key is improperly
                      encoded, parameters are missing, and so on.                    
                </exception>
            </javadoc>
            <method name="engineInitSign" type="void" line="33"/>
            <javadoc line="33">
                Initializes this signature object with the specified
                  private key for signing operations.                
                <param>
                    privateKey the private key of the identity whose signature
                      will be generated.                    
                </param>
                <exception>
                    InvalidKeyException if the key is improperly
                      encoded, parameters are missing, and so on.                    
                </exception>
            </javadoc>
            <javadoc line="42">
                Initializes this signature object with the specified
                  private key and source of randomness for signing operations.
                  &lt;p&gt;This concrete method has been added to this previously-defined
                  abstract class. (For backwards compatibility, it cannot be abstract.)                
                <param>
                    privateKey the private key of the identity whose signature
                      will be generated.                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the key is improperly
                      encoded, parameters are missing, and so on.                    
                </exception>
            </javadoc>
            <method name="engineInitSign" type="void" line="53">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="57"/>
            <javadoc line="57">
                Updates the data to be signed or verified
                  using the specified byte.                
                <param>
                    b the byte to use for the update.                    
                </param>
                <exception>
                    SignatureException if the engine is not initialized
                      properly.                    
                </exception>
            </javadoc>
            <method name="engineUpdate" type="void" line="65"/>
            <javadoc line="65">
                Updates the data to be signed or verified, using the
                  specified array of bytes, starting at the specified offset.                
                <param>
                    b the array of bytes                    
                </param>
                <param>
                    off the offset to start from in the array of bytes                    
                </param>
                <param>
                    len the number of bytes to use, starting at offset                    
                </param>
                <exception>
                    SignatureException if the engine is not initialized
                      properly                    
                </exception>
            </javadoc>
            <javadoc line="75">
                Updates the data to be signed or verified using the specified
                  ByteBuffer. Processes the &lt;code&gt;data.remaining()&lt;/code&gt; bytes
                  starting at at &lt;code&gt;data.position()&lt;/code&gt;.
                  Upon return, the buffer&apos;s position will be equal to its limit;
                  its limit will not have changed.                
                <param>
                    input the ByteBuffer                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineUpdate" type="void" line="84">
                <params>
                    <param name="input" type="ByteBuffer"/>
                </params>
                <scope line="85"/>
                <scope line="88">
                    <scope line="89">
                        <declaration name="b" type="byte[]" line="90"/>
                        <declaration name="ofs" type="int" line="91"/>
                        <declaration name="pos" type="int" line="92"/>
                        <declaration name="lim" type="int" line="93"/>
                    </scope>
                    <scope line="97">
                        <declaration name="len" type="int" line="98"/>
                        <declaration name="b" type="byte[]" line="99"/>
                        <scope line="100">
                            <declaration name="chunk" type="int" line="101"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="108"/>
            </method>
            <method name="engineSign" type="byte[]" line="112"/>
            <javadoc line="112">
                Returns the signature bytes of all the data
                  updated so far.
                  The format of the signature depends on the underlying
                  signature scheme.                
                <return>
                    the signature bytes of the signing operation&apos;s result.                    
                </return>
                <exception>
                    SignatureException if the engine is not
                      initialized properly or if this signature algorithm is unable to
                      process the input data provided.                    
                </exception>
            </javadoc>
            <javadoc line="123">
                Finishes this signature operation and stores the resulting signature
                  bytes in the provided buffer &lt;code&gt;outbuf&lt;/code&gt;, starting at
                  &lt;code&gt;offset&lt;/code&gt;.
                  The format of the signature depends on the underlying
                  signature scheme.
                  &lt;p&gt;The signature implementation is reset to its initial state
                  (the state it was in after a call to one of the
                  &lt;code&gt;engineInitSign&lt;/code&gt; methods)
                  and can be reused to generate further signatures with the same private
                  key.
                  This method should be abstract, but we leave it concrete for
                  binary compatibility.  Knowledgeable providers should override this
                  method.                
                <param>
                    outbuf buffer for the signature result.                    
                </param>
                <param>
                    offset offset into &lt;code&gt;outbuf&lt;/code&gt; where the signature is
                      stored.                    
                </param>
                <param>
                    len number of bytes within &lt;code&gt;outbuf&lt;/code&gt; allotted for the
                      signature.
                      Both this default implementation and the SUN provider do not
                      return partial digests. If the value of this parameter is less
                      than the actual signature length, this method will throw a
                      SignatureException.
                      This parameter is ignored if its value is greater than or equal to
                      the actual signature length.                    
                </param>
                <return>
                    the number of bytes placed into &lt;code&gt;outbuf&lt;/code&gt;                    
                </return>
                <exception>
                    SignatureException if the engine is not
                      initialized properly, if this signature algorithm is unable to
                      process the input data provided, or if &lt;code&gt;len&lt;/code&gt; is less
                      than the actual signature length.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="engineSign" type="int" line="155">
                <params>
                    <param name="outbuf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="sig" type="byte[]" line="156"/>
                <scope line="157"/>
                <scope line="160"/>
            </method>
            <method name="engineVerify" type="boolean" line="166"/>
            <javadoc line="166">
                Verifies the passed-in signature.                
                <param>
                    sigBytes the signature bytes to be verified.                    
                </param>
                <return>
                    true if the signature was verified, false if not.                    
                </return>
                <exception>
                    SignatureException if the engine is not
                      initialized properly, the passed-in signature is improperly
                      encoded or of the wrong type, if this signature algorithm is unable to
                      process the input data provided, etc.                    
                </exception>
            </javadoc>
            <javadoc line="176">
                Verifies the passed-in signature in the specified array
                  of bytes, starting at the specified offset.
                  &lt;p&gt; Note: Subclasses should overwrite the default implementation.                
                <param>
                    sigBytes the signature bytes to be verified.                    
                </param>
                <param>
                    offset the offset to start from in the array of bytes.                    
                </param>
                <param>
                    length the number of bytes to use, starting at offset.                    
                </param>
                <return>
                    true if the signature was verified, false if not.                    
                </return>
                <exception>
                    SignatureException if the engine is not
                      initialized properly, the passed-in signature is improperly
                      encoded or of the wrong type, if this signature algorithm is unable to
                      process the input data provided, etc.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="engineVerify" type="boolean" line="190">
                <params>
                    <param name="sigBytes" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="sigBytesCopy" type="byte[]" line="191"/>
            </method>
            <method name="engineSetParameter" type="void" line="195"/>
            <javadoc line="195">
                Sets the specified algorithm parameter to the specified
                  value. This method supplies a general-purpose mechanism through
                  which it is possible to set the various parameters of this object.
                  A parameter may be any settable parameter for the algorithm, such as
                  a parameter size, or a source of random bits for signature generation
                  (if appropriate), or an indication of whether or not to perform
                  a specific but optional computation. A uniform algorithm-specific
                  naming scheme for each parameter is desirable but left unspecified
                  at this time.                
                <param>
                    param the string identifier of the parameter.                    
                </param>
                <param>
                    value the parameter value.                    
                </param>
                <exception>
                    InvalidParameterException if &lt;code&gt;param&lt;/code&gt; is an
                      invalid parameter for this signature algorithm engine,
                      the parameter is already set
                      and cannot be set again, a security exception occurs, and so on.                    
                </exception>
                <deprecated>
                    Replaced by {@link #engineSetParameter(java.security.spec.AlgorithmParameterSpec)engineSetParameter}.                    
                </deprecated>
            </javadoc>
            <javadoc line="214">
                &lt;p&gt;This method is overridden by providers to initialize
                  this signature engine with the specified parameter set.                
                <param>
                    params the parameters                    
                </param>
                <exception>
                    UnsupportedOperationException if this method is not
                      overridden by a provider                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if this method is
                      overridden by a provider and the given parameters
                      are inappropriate for this signature engine                    
                </exception>
            </javadoc>
            <method name="engineSetParameter" type="void" line="224">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="227">
                &lt;p&gt;This method is overridden by providers to return the
                  parameters used with this signature engine, or null
                  if this signature engine does not use any parameters.
                  &lt;p&gt;The returned parameters may be the same that were used to initialize
                  this signature engine, or may contain a combination of default and
                  randomly generated parameter values used by the underlying signature
                  implementation if this signature engine requires algorithm parameters
                  but was not initialized with any.                
                <return>
                    the parameters used with this signature engine, or null if this
                      signature engine does not use any parameters                    
                </return>
                <exception>
                    UnsupportedOperationException if this method is
                      not overridden by a provider                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="engineGetParameters" type="AlgorithmParameters" line="242"/>
            <method name="engineGetParameter" type="Object" line="245"/>
            <javadoc line="245">
                Gets the value of the specified algorithm parameter.
                  This method supplies a general-purpose mechanism through which it
                  is possible to get the various parameters of this object. A parameter
                  may be any settable parameter for the algorithm, such as a parameter
                  size, or  a source of random bits for signature generation (if
                  appropriate), or an indication of whether or not to perform a
                  specific but optional computation. A uniform algorithm-specific
                  naming scheme for each parameter is desirable but left unspecified
                  at this time.                
                <param>
                    param the string name of the parameter.                    
                </param>
                <return>
                    the object that represents the parameter value, or null if
                      there is none.                    
                </return>
                <exception>
                    InvalidParameterException if &lt;code&gt;param&lt;/code&gt; is an
                      invalid parameter for this engine, or another exception occurs while
                      trying to get this parameter.                    
                </exception>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <javadoc line="264">
                Returns a clone if the implementation is cloneable.                
                <return>
                    a clone if the implementation is cloneable.                    
                </return>
                <exception>
                    CloneNotSupportedException if this is called
                      on an implementation that does not support &lt;code&gt;Cloneable&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="270">
                <scope line="271"/>
                <scope line="274"/>
            </method>
        </class>
    </source>