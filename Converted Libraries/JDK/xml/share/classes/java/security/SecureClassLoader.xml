<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util.HashMap"/>
        <import package="java.util.ArrayList"/>
        <import package="java.net.URL"/>
        <import package="sun.security.util.Debug"/>
        <class name="SecureClassLoader" line="6">
            <extends class="ClassLoader"/>
            <javadoc line="6">
                This class extends ClassLoader with additional support for defining
                  classes with an associated code source and permissions which are
                  retrieved by the system policy by default.                
                <author>
                    Li Gong                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="initialized" type="boolean" line="14"/>
            <declaration name="pdcache" type="HashMap&amp;lt;CodeSource,ProtectionDomain&amp;gt;" line="15"/>
            <declaration name="debug" type="Debug" line="16"/>
            <scope line="17"/>
            <javadoc line="20">
                Creates a new SecureClassLoader using the specified parent
                  class loader for delegation.
                  &lt;p&gt;If there is a security manager, this method first
                  calls the security manager&apos;s &lt;code&gt;checkCreateClassLoader&lt;/code&gt;
                  method  to ensure creation of a class loader is allowed.
                  &lt;p&gt;                
                <param>
                    parent the parent ClassLoader                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkCreateClassLoader&lt;/code&gt; method doesn&apos;t allow
                      creation of a class loader.                    
                </exception>
                <see>
                    SecurityManager#checkCreateClassLoader                    
                </see>
            </javadoc>
            <method name="SecureClassLoader" type="constructor" line="33">
                <params>
                    <param name="parent" type="ClassLoader"/>
                </params>
                <declaration name="security" type="SecurityManager" line="35"/>
                <scope line="36"/>
            </method>
            <javadoc line="41">
                Creates a new SecureClassLoader using the default parent class
                  loader for delegation.
                  &lt;p&gt;If there is a security manager, this method first
                  calls the security manager&apos;s &lt;code&gt;checkCreateClassLoader&lt;/code&gt;
                  method  to ensure creation of a class loader is allowed.                
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkCreateClassLoader&lt;/code&gt; method doesn&apos;t allow
                      creation of a class loader.                    
                </exception>
                <see>
                    SecurityManager#checkCreateClassLoader                    
                </see>
            </javadoc>
            <method name="SecureClassLoader" type="constructor" line="52">
                <declaration name="security" type="SecurityManager" line="54"/>
                <scope line="55"/>
            </method>
            <javadoc line="60">
                Converts an array of bytes into an instance of class Class,
                  with an optional CodeSource. Before the
                  class can be used it must be resolved.
                  &lt;p&gt;
                  If a non-null CodeSource is supplied a ProtectionDomain is
                  constructed and associated with the class being defined.
                  &lt;p&gt;                
                <param>
                    name the expected name of the class, or &lt;code&gt;null&lt;/code&gt;
                      if not known, using &apos;.&apos; and not &apos;/&apos; as the separator
                      and without a trailing &quot;.class&quot; suffix.                    
                </param>
                <param>
                    b    the bytes that make up the class data. The bytes in
                      positions &lt;code&gt;off&lt;/code&gt; through &lt;code&gt;off+len-1&lt;/code&gt;
                      should have the format of a valid class file as defined by
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.                    
                </param>
                <param>
                    off  the start offset in &lt;code&gt;b&lt;/code&gt; of the class data                    
                </param>
                <param>
                    len  the length of the class data                    
                </param>
                <param>
                    cs   the associated CodeSource, or &lt;code&gt;null&lt;/code&gt; if none                    
                </param>
                <return>
                    the &lt;code&gt;Class&lt;/code&gt; object created from the data,
                      and optional CodeSource.                    
                </return>
                <exception>
                    ClassFormatError if the data did not contain a valid class                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if either &lt;code&gt;off&lt;/code&gt; or
                      &lt;code&gt;len&lt;/code&gt; is negative, or if
                      &lt;code&gt;off+len&lt;/code&gt; is greater than &lt;code&gt;b.length&lt;/code&gt;.                    
                </exception>
                <exception>
                    SecurityException if an attempt is made to add this class
                      to a package that contains classes that were signed by
                      a different set of certificates than this class, or if
                      the class name begins with &quot;java.&quot;.                    
                </exception>
            </javadoc>
            <method name="defineClass" type="Class&lt;?&gt;" line="89">
                <params>
                    <param name="name" type="String"/>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="cs" type="CodeSource"/>
                </params>
            </method>
            <javadoc line="92">
                Converts a {@link java.nio.ByteBuffer &lt;tt&gt;ByteBuffer&lt;/tt&gt;}into an instance of class &lt;tt&gt;Class&lt;/tt&gt;, with an optional CodeSource.
                  Before the class can be used it must be resolved.
                  &lt;p&gt;
                  If a non-null CodeSource is supplied a ProtectionDomain is
                  constructed and associated with the class being defined.
                  &lt;p&gt;                
                <param>
                    name the expected name of the class, or &lt;code&gt;null&lt;/code&gt;
                      if not known, using &apos;.&apos; and not &apos;/&apos; as the separator
                      and without a trailing &quot;.class&quot; suffix.                    
                </param>
                <param>
                    b    the bytes that make up the class data.  The bytes from positions
                      &lt;tt&gt;b.position()&lt;/tt&gt; through &lt;tt&gt;b.position() + b.limit() -1&lt;/tt&gt;
                      should have the format of a valid class file as defined by
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.                    
                </param>
                <param>
                    cs   the associated CodeSource, or &lt;code&gt;null&lt;/code&gt; if none                    
                </param>
                <return>
                    the &lt;code&gt;Class&lt;/code&gt; object created from the data,
                      and optional CodeSource.                    
                </return>
                <exception>
                    ClassFormatError if the data did not contain a valid class                    
                </exception>
                <exception>
                    SecurityException if an attempt is made to add this class
                      to a package that contains classes that were signed by
                      a different set of certificates than this class, or if
                      the class name begins with &quot;java.&quot;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="defineClass" type="Class&lt;?&gt;" line="116">
                <params>
                    <param name="name" type="String"/>
                    <param name="b" type="java.nio.ByteBuffer"/>
                    <param name="cs" type="CodeSource"/>
                </params>
            </method>
            <javadoc line="119">
                Returns the permissions for the given CodeSource object.
                  &lt;p&gt;
                  This method is invoked by the defineClass method which takes
                  a CodeSource as an argument when it is constructing the
                  ProtectionDomain for the class being defined.
                  &lt;p&gt;                
                <param>
                    codesource the codesource.                    
                </param>
                <return>
                    the permissions granted to the codesource.                    
                </return>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="129">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
            </method>
            <method name="getProtectionDomain" type="ProtectionDomain" line="133">
                <params>
                    <param name="cs" type="CodeSource"/>
                </params>
                <declaration name="pd" type="ProtectionDomain" line="135"/>
                <scope line="136">
                    <scope line="138">
                        <declaration name="perms" type="PermissionCollection" line="139"/>
                        <scope line="142"/>
                    </scope>
                </scope>
            </method>
            <method name="check" type="void" line="150">
                <scope line="151"/>
            </method>
        </class>
    </source>