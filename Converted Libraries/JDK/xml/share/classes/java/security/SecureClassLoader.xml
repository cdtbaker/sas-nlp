<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.security">
        <import package="java.util.HashMap"/>
        <import package="java.util.ArrayList"/>
        <import package="java.net.URL"/>
        <import package="sun.security.util.Debug"/>
        <class name="SecureClassLoader" line="34">
            <extends class="ClassLoader"/>
            <comment line="44">
                If initialization succeed this is set to true and security checks will
                 succeed. Otherwise the object is not initialized and the object is
                 useless.                
            </comment>
            <comment line="51">
                HashMap that maps CodeSource to ProtectionDomain                
            </comment>
            <comment line="52">
                @GuardedBy(&quot;pdcache&quot;)                
            </comment>
            <comment line="196">
                Returned cached ProtectionDomain for the specified CodeSource.                
            </comment>
            <comment line="219">
                Check to make sure the class loader has been initialized.                
            </comment>
            <javadoc line="34">
                This class extends ClassLoader with additional support for defining
                  classes with an associated code source and permissions which are
                  retrieved by the system policy by default.                
                <author>
                    Li Gong                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="initialized" type="boolean" line="48"/>
            <declaration name="pdcache" type="HashMap&lt;CodeSource,ProtectionDomain&gt;" line="52"/>
            <declaration name="debug" type="Debug" line="55"/>
            <scope line="57"/>
            <javadoc line="61">
                Creates a new SecureClassLoader using the specified parent
                  class loader for delegation.
                  &lt;p&gt;If there is a security manager, this method first
                  calls the security manager&apos;s &lt;code&gt;checkCreateClassLoader&lt;/code&gt;
                  method  to ensure creation of a class loader is allowed.
                  &lt;p&gt;                
                <param>
                    parent the parent ClassLoader                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkCreateClassLoader</code> method doesn't allow
                      creation of a class loader.                    
                </exception>
                <see>
                    SecurityManager#checkCreateClassLoader                    
                </see>
            </javadoc>
            <method name="SecureClassLoader" type="constructor" line="75">
                <params>
                    <param name="parent" type="ClassLoader"/>
                </params>
                <comment line="77">
                    this is to make the stack depth consistent with 1.1                    
                </comment>
                <declaration name="security" type="SecurityManager" line="78"/>
                <scope line="79"/>
            </method>
            <javadoc line="85">
                Creates a new SecureClassLoader using the default parent class
                  loader for delegation.
                  &lt;p&gt;If there is a security manager, this method first
                  calls the security manager&apos;s &lt;code&gt;checkCreateClassLoader&lt;/code&gt;
                  method  to ensure creation of a class loader is allowed.                
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkCreateClassLoader</code> method doesn't allow
                      creation of a class loader.                    
                </exception>
                <see>
                    SecurityManager#checkCreateClassLoader                    
                </see>
            </javadoc>
            <method name="SecureClassLoader" type="constructor" line="98">
                <comment line="100">
                    this is to make the stack depth consistent with 1.1                    
                </comment>
                <declaration name="security" type="SecurityManager" line="101"/>
                <scope line="102"/>
            </method>
            <javadoc line="108">
                Converts an array of bytes into an instance of class Class,
                  with an optional CodeSource. Before the
                  class can be used it must be resolved.
                  &lt;p&gt;
                  If a non-null CodeSource is supplied a ProtectionDomain is
                  constructed and associated with the class being defined.
                  &lt;p&gt;                
                <param>
                    name the expected name of the class, or <code>null</code>
                      if not known, using '.' and not '/' as the separator
                      and without a trailing ".class" suffix.                    
                </param>
                <param>
                    b    the bytes that make up the class data. The bytes in
                      positions <code>off</code> through <code>off+len-1</code>
                      should have the format of a valid class file as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <param>
                    off  the start offset in <code>b</code> of the class data                    
                </param>
                <param>
                    len  the length of the class data                    
                </param>
                <param>
                    cs   the associated CodeSource, or <code>null</code> if none                    
                </param>
                <return>
                    the <code>Class</code> object created from the data,
                      and optional CodeSource.                    
                </return>
                <exception>
                    ClassFormatError if the data did not contain a valid class                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if either <code>off</code> or
                      <code>len</code> is negative, or if
                      <code>off+len</code> is greater than <code>b.length</code>.                    
                </exception>
                <exception>
                    SecurityException if an attempt is made to add this class
                      to a package that contains classes that were signed by
                      a different set of certificates than this class, or if
                      the class name begins with "java.".                    
                </exception>
            </javadoc>
            <method name="defineClass" type="Class<?>" line="141">
                <params>
                    <param name="name" type="String"/>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="cs" type="CodeSource"/>
                </params>
            </method>
            <javadoc line="145">
                Converts a {@link java.nio.ByteBuffer &lt;tt&gt;ByteBuffer&lt;/tt&gt;}into an instance of class &lt;tt&gt;Class&lt;/tt&gt;, with an optional CodeSource.
                  Before the class can be used it must be resolved.
                  &lt;p&gt;
                  If a non-null CodeSource is supplied a ProtectionDomain is
                  constructed and associated with the class being defined.
                  &lt;p&gt;                
                <param>
                    name the expected name of the class, or <code>null</code>
                      if not known, using '.' and not '/' as the separator
                      and without a trailing ".class" suffix.                    
                </param>
                <param>
                    b    the bytes that make up the class data.  The bytes from positions
                      <tt>b.position()</tt> through <tt>b.position() + b.limit() -1</tt>
                      should have the format of a valid class file as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <param>
                    cs   the associated CodeSource, or <code>null</code> if none                    
                </param>
                <return>
                    the <code>Class</code> object created from the data,
                      and optional CodeSource.                    
                </return>
                <exception>
                    ClassFormatError if the data did not contain a valid class                    
                </exception>
                <exception>
                    SecurityException if an attempt is made to add this class
                      to a package that contains classes that were signed by
                      a different set of certificates than this class, or if
                      the class name begins with "java.".                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="defineClass" type="Class<?>" line="173">
                <params>
                    <param name="name" type="String"/>
                    <param name="b" type="java.nio.ByteBuffer"/>
                    <param name="cs" type="CodeSource"/>
                </params>
            </method>
            <javadoc line="177">
                Returns the permissions for the given CodeSource object.
                  &lt;p&gt;
                  This method is invoked by the defineClass method which takes
                  a CodeSource as an argument when it is constructing the
                  ProtectionDomain for the class being defined.
                  &lt;p&gt;                
                <param>
                    codesource the codesource.                    
                </param>
                <return>
                    the permissions granted to the codesource.                    
                </return>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="190">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
                <comment line="192">
                    ProtectionDomain defers the binding                    
                </comment>
            </method>
            <method name="getProtectionDomain" type="ProtectionDomain" line="198">
                <params>
                    <param name="cs" type="CodeSource"/>
                </params>
                <declaration name="pd" type="ProtectionDomain" line="202"/>
                <scope line="203">
                    <scope line="205">
                        <declaration name="perms" type="PermissionCollection" line="206"/>
                        <scope line="209"/>
                    </scope>
                </scope>
            </method>
            <method name="check" type="void" line="221">
                <scope line="222"/>
            </method>
        </class>
    </source>