<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.net.idn.StringPrep"/>
        <import package="sun.net.idn.Punycode"/>
        <import package="sun.text.normalizer.UCharacterIterator"/>
        <class name="IDN" line="36">
            <comment line="201">
                                
            </comment>
            <comment line="203">
                ACE Prefix is &quot;xn--&quot;                
            </comment>
            <comment line="209">
                single instance of nameprep                
            </comment>
            <comment line="236">
                                
            </comment>
            <comment line="239">
                to suppress the default zero-argument constructor                
            </comment>
            <comment line="244">
                toASCII operation; should only apply to a single label                
            </comment>
            <comment line="322">
                toUnicode operation; should only apply to a single label                
            </comment>
            <comment line="381">
                LDH stands for &quot;letter/digit/hyphen&quot;, with characters restricted to the
                 26-letter Latin alphabet &lt;A-Z a-z&gt;, the digits &lt;0-9&gt;, and the hyphen
                 &lt;-&gt;
                 non-LDH = 0..0x2C, 0x2E..0x2F, 0x3A..0x40, 0x56..0x60, 0x7B..0x7F                
            </comment>
            <comment line="404">
                search dots in a string and return the index of that character;
                 or if there is no dots, return the length of input string
                 dots might be: \u002E (full stop), \u3002 (ideographic full stop), \uFF0E (fullwidth full stop),
                 and \uFF61 (halfwidth ideographic full stop).                
            </comment>
            <comment line="423">
                to check if a string only contains US-ASCII code point                
            </comment>
            <comment line="438">
                to check if a string starts with ACE-prefix                
            </comment>
            <javadoc line="36">
                Provides methods to convert internationalized domain names (IDNs) between
                  a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.
                  Internationalized domain names can use characters from the entire range of
                  Unicode, while traditional domain names are restricted to ASCII characters.
                  ACE is an encoding of Unicode strings that uses only ASCII characters and
                  can be used with software (such as the Domain Name System) that only
                  understands traditional domain names.
                  &lt;p&gt;Internationalized domain names are defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3490.txt&quot;&gt;RFC 3490&lt;/a&gt;.
                  RFC 3490 defines two operations: ToASCII and ToUnicode. These 2 operations employ
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3491.txt&quot;&gt;Nameprep&lt;/a&gt; algorithm, which is a
                  profile of &lt;a href=&quot;http://www.ietf.org/rfc/rfc3454.txt&quot;&gt;Stringprep&lt;/a&gt;, and
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3492.txt&quot;&gt;Punycode&lt;/a&gt; algorithm to convert
                  domain name string back and forth.
                  &lt;p&gt;The behavior of aforementioned conversion process can be adjusted by various flags:
                  &lt;ul&gt;
                  &lt;li&gt;If the ALLOW_UNASSIGNED flag is used, the domain name string to be converted
                  can contain code points that are unassigned in Unicode 3.2, which is the
                  Unicode version on which IDN conversion is based. If the flag is not used,
                  the presence of such unassigned code points is treated as an error.
                  &lt;li&gt;If the USE_STD3_ASCII_RULES flag is used, ASCII strings are checked against &lt;a href=&quot;http://www.ietf.org/rfc/rfc1122.txt&quot;&gt;RFC 1122&lt;/a&gt; and &lt;a href=&quot;http://www.ietf.org/rfc/rfc1123.txt&quot;&gt;RFC 1123&lt;/a&gt;.
                  It is an error if they don&apos;t meet the requirements.
                  &lt;/ul&gt;
                  These flags can be logically OR&apos;ed together.
                  &lt;p&gt;The security consideration is important with respect to internationalization
                  domain name support. For example, English domain names may be &lt;i&gt;homographed&lt;/i&gt;
                  - maliciously misspelled by substitution of non-Latin letters.
                  &lt;a href=&quot;http://www.unicode.org/reports/tr36/&quot;&gt;Unicode Technical Report #36&lt;/a&gt;
                  discusses security issues of IDN support as well as possible solutions.
                  Applications are responsible for taking adequate security measures when using
                  international domain names.                
                <author>
                    Edward Wang                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ALLOW_UNASSIGNED" type="int" line="76"/>
            <javadoc line="76">
                Flag to allow processing of unassigned code points                
            </javadoc>
            <declaration name="USE_STD3_ASCII_RULES" type="int" line="81"/>
            <javadoc line="81">
                Flag to turn on the check against STD-3 ASCII rules                
            </javadoc>
            <javadoc line="87">
                Translates a string from Unicode to ASCII Compatible Encoding (ACE),
                  as defined by the ToASCII operation of &lt;a href=&quot;http://www.ietf.org/rfc/rfc3490.txt&quot;&gt;RFC 3490&lt;/a&gt;.
                  &lt;p&gt;ToASCII operation can fail. ToASCII fails if any step of it fails.
                  If ToASCII operation fails, an IllegalArgumentException will be thrown.
                  In this case, the input string should not be used in an internationalized domain name.
                  &lt;p&gt; A label is an individual part of a domain name. The original ToASCII operation,
                  as defined in RFC 3490, only operates on a single label. This method can handle
                  both label and entire domain name, by assuming that labels in a domain name are
                  always separated by dots. The following characters are recognized as dots:
                  &amp;#0092;u002E (full stop), &amp;#0092;u3002 (ideographic full stop), &amp;#0092;uFF0E (fullwidth full stop),
                  and &amp;#0092;uFF61 (halfwidth ideographic full stop). if dots are
                  used as label separators, this method also changes all of them to &amp;#0092;u002E (full stop)
                  in output translated string.                
                <param>
                    input     the string to be processed                    
                </param>
                <param>
                    flag      process flag; can be 0 or any logical OR of possible flags                    
                </param>
                <return>
                    the translated &lt;tt&gt;String&lt;/tt&gt;                    
                </return>
                <throws>
                    IllegalArgumentException   if the input string doesn&apos;t conform to RFC 3490 specification                    
                </throws>
            </javadoc>
            <method name="toASCII" type="String" line="112">
                <params>
                    <param name="input" type="String"/>
                    <param name="flag" type="int"/>
                </params>
                <declaration name="p" type="int" line="113"/>
                <declaration name="out" type="StringBuffer" line="114"/>
                <scope line="116"/>
            </method>
            <javadoc line="127">
                Translates a string from Unicode to ASCII Compatible Encoding (ACE),
                  as defined by the ToASCII operation of &lt;a href=&quot;http://www.ietf.org/rfc/rfc3490.txt&quot;&gt;RFC 3490&lt;/a&gt;.
                  &lt;p&gt; This convenience method works as if by invoking the
                  two-argument counterpart as follows:
                  &lt;blockquote&gt;&lt;tt&gt;{@link #toASCII(String,int) toASCII}(input,&amp;nbsp;0);
                  &lt;/tt&gt;&lt;/blockquote&gt;                
                <param>
                    input     the string to be processed                    
                </param>
                <return>
                    the translated &lt;tt&gt;String&lt;/tt&gt;                    
                </return>
                <throws>
                    IllegalArgumentException   if the input string doesn&apos;t conform to RFC 3490 specification                    
                </throws>
            </javadoc>
            <method name="toASCII" type="String" line="143">
                <params>
                    <param name="input" type="String"/>
                </params>
            </method>
            <javadoc line="148">
                Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
                  as defined by the ToUnicode operation of &lt;a href=&quot;http://www.ietf.org/rfc/rfc3490.txt&quot;&gt;RFC 3490&lt;/a&gt;.
                  &lt;p&gt;ToUnicode never fails. In case of any error, the input string is returned unmodified.
                  &lt;p&gt; A label is an individual part of a domain name. The original ToUnicode operation,
                  as defined in RFC 3490, only operates on a single label. This method can handle
                  both label and entire domain name, by assuming that labels in a domain name are
                  always separated by dots. The following characters are recognized as dots:
                  &amp;#0092;u002E (full stop), &amp;#0092;u3002 (ideographic full stop), &amp;#0092;uFF0E (fullwidth full stop),
                  and &amp;#0092;uFF61 (halfwidth ideographic full stop).                
                <param>
                    input     the string to be processed                    
                </param>
                <param>
                    flag      process flag; can be 0 or any logical OR of possible flags                    
                </param>
                <return>
                    the translated &lt;tt&gt;String&lt;/tt&gt;                    
                </return>
            </javadoc>
            <method name="toUnicode" type="String" line="166">
                <params>
                    <param name="input" type="String"/>
                    <param name="flag" type="int"/>
                </params>
                <declaration name="p" type="int" line="167"/>
                <declaration name="out" type="StringBuffer" line="168"/>
                <scope line="170"/>
            </method>
            <javadoc line="181">
                Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
                  as defined by the ToUnicode operation of &lt;a href=&quot;http://www.ietf.org/rfc/rfc3490.txt&quot;&gt;RFC 3490&lt;/a&gt;.
                  &lt;p&gt; This convenience method works as if by invoking the
                  two-argument counterpart as follows:
                  &lt;blockquote&gt;&lt;tt&gt;{@link #toUnicode(String,int) toUnicode}(input,&amp;nbsp;0);
                  &lt;/tt&gt;&lt;/blockquote&gt;                
                <param>
                    input     the string to be processed                    
                </param>
                <return>
                    the translated &lt;tt&gt;String&lt;/tt&gt;                    
                </return>
            </javadoc>
            <method name="toUnicode" type="String" line="195">
                <params>
                    <param name="input" type="String"/>
                </params>
            </method>
            <declaration name="ACE_PREFIX" type="String" line="203"/>
            <declaration name="ACE_PREFIX_LENGTH" type="int" line="204"/>
            <declaration name="MAX_LABEL_LENGTH" type="int" line="206"/>
            <declaration name="namePrep" type="StringPrep" line="209"/>
            <scope line="211">
                <declaration name="stream" type="InputStream" line="212"/>
                <scope line="214">
                    <declaration name="IDN_PROFILE" type="String" line="215"/>
                    <scope line="216">
                        <anonymous_class line="217">
                            <method name="run" type="InputStream" line="218"/>
                        </anonymous_class>
                    </scope>
                    <scope line="222"/>
                </scope>
                <scope line="228"/>
            </scope>
            <method name="IDN" type="constructor" line="241"/>
            <method name="toASCIIInternal" type="String" line="247">
                <params>
                    <param name="label" type="String"/>
                    <param name="flag" type="int"/>
                </params>
                <comment line="249">
                    step 1
                     Check if the string contains code points outside the ASCII range 0..0x7c.                    
                </comment>
                <comment line="254">
                    step 2
                     perform the nameprep operation; flag ALLOW_UNASSIGNED is used here                    
                </comment>
                <comment line="267">
                    step 3
                     Verify the absence of non-LDH ASCII code points
                       0..0x2c, 0x2e..0x2f, 0x3a..0x40, 0x5b..0x60, 0x7b..0x7f
                     Verify the absence of leading and trailing hyphen                    
                </comment>
                <comment line="286">
                    step 4
                     If all code points are inside 0..0x7f, skip to step 8                    
                </comment>
                <comment line="289">
                    step 5
                     verify the sequence does not begin with ACE prefix                    
                </comment>
                <comment line="293">
                    step 6
                     encode the sequence with punycode                    
                </comment>
                <comment line="303">
                    step 7
                     prepend the ACE prefix                    
                </comment>
                <comment line="313">
                    step 8
                     the length must be inside 1..63                    
                </comment>
                <declaration name="isASCII" type="boolean" line="250"/>
                <declaration name="dest" type="StringBuffer" line="251"/>
                <scope line="255">
                    <declaration name="iter" type="UCharacterIterator" line="256"/>
                    <scope line="257"/>
                    <scope line="259"/>
                </scope>
                <scope line="262"/>
                <declaration name="useSTD3ASCIIRules" type="boolean" line="270"/>
                <scope line="271">
                    <scope line="272">
                        <declaration name="c" type="int" line="273"/>
                        <scope line="274"/>
                    </scope>
                    <scope line="279"/>
                </scope>
                <scope line="284">
                    <scope line="287">
                        <scope line="290">
                            <scope line="294"/>
                            <scope line="296"/>
                        </scope>
                        <scope line="305"/>
                    </scope>
                </scope>
                <scope line="314"/>
            </method>
            <method name="toUnicodeInternal" type="String" line="324">
                <params>
                    <param name="label" type="String"/>
                    <param name="flag" type="int"/>
                </params>
                <comment line="329">
                    step 1
                     find out if all the codepoints in input are ASCII                    
                </comment>
                <comment line="334">
                    step 2
                     perform the nameprep operation; flag ALLOW_UNASSIGNED is used here                    
                </comment>
                <comment line="340">
                    toUnicode never fails; if any step fails, return the input string                    
                </comment>
                <comment line="347">
                    step 3
                     verify ACE Prefix                    
                </comment>
                <comment line="351">
                    step 4
                     Remove the ACE Prefix                    
                </comment>
                <comment line="356">
                    step 5
                     Decode using punycode                    
                </comment>
                <comment line="360">
                    step 6
                     Apply toASCII                    
                </comment>
                <comment line="364">
                    step 7
                     verify                    
                </comment>
                <comment line="367">
                    step 8
                     return output of step 5                    
                </comment>
                <comment line="372">
                    no-op                    
                </comment>
                <comment line="376">
                    just return the input                    
                </comment>
                <declaration name="caseFlags" type="boolean[]" line="325"/>
                <declaration name="dest" type="StringBuffer" line="326"/>
                <declaration name="isASCII" type="boolean" line="330"/>
                <scope line="332">
                    <scope line="335">
                        <declaration name="iter" type="UCharacterIterator" line="336"/>
                    </scope>
                    <scope line="338"/>
                </scope>
                <scope line="342"/>
                <scope line="348">
                    <declaration name="temp" type="String" line="352"/>
                    <scope line="354">
                        <declaration name="decodeOut" type="StringBuffer" line="357"/>
                        <declaration name="toASCIIOut" type="String" line="361"/>
                        <scope line="365"/>
                    </scope>
                    <scope line="370"/>
                </scope>
            </method>
            <method name="isLDHChar" type="boolean" line="386">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <comment line="388">
                    high runner case                    
                </comment>
                <comment line="392">
                    [&apos;-&apos; &apos;0&apos;..&apos;9&apos; &apos;A&apos;..&apos;Z&apos; &apos;a&apos;..&apos;z&apos;]                    
                </comment>
                <scope line="388"/>
                <scope line="396"/>
            </method>
            <method name="searchDots" type="int" line="409">
                <params>
                    <param name="s" type="String"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="i" type="int" line="410"/>
                <scope line="411">
                    <declaration name="c" type="char" line="412"/>
                    <scope line="413"/>
                </scope>
            </method>
            <method name="isAllASCII" type="boolean" line="425">
                <params>
                    <param name="input" type="String"/>
                </params>
                <declaration name="isASCII" type="boolean" line="426"/>
                <scope line="427">
                    <declaration name="c" type="int" line="428"/>
                    <scope line="429"/>
                </scope>
            </method>
            <method name="startsWithACEPrefix" type="boolean" line="440">
                <params>
                    <param name="input" type="StringBuffer"/>
                </params>
                <declaration name="startsWithPrefix" type="boolean" line="441"/>
                <scope line="443"/>
                <scope line="446">
                    <scope line="447"/>
                </scope>
            </method>
            <method name="toASCIILower" type="char" line="454">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <scope line="455"/>
            </method>
            <method name="toASCIILower" type="StringBuffer" line="461">
                <params>
                    <param name="input" type="StringBuffer"/>
                </params>
                <declaration name="dest" type="StringBuffer" line="462"/>
                <scope line="463"/>
            </method>
        </class>
    </source>