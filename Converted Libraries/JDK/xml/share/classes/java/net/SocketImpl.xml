<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.FileDescriptor"/>
        <class name="SocketImpl" line="6">
            <implements interface="SocketOptions"/>
            <javadoc line="6">
                The abstract class &lt;code&gt;SocketImpl&lt;/code&gt; is a common superclass
                  of all classes that actually implement sockets. It is used to
                  create both client and server sockets.
                  &lt;p&gt;
                  A &quot;plain&quot; socket implements these methods exactly as
                  described, without attempting to go through a firewall or proxy.                
                <author>
                    unascribed                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="socket" type="Socket" line="17"/>
            <javadoc line="17">
                The actual Socket object.                
            </javadoc>
            <declaration name="serverSocket" type="ServerSocket" line="21"/>
            <declaration name="fd" type="FileDescriptor" line="22"/>
            <javadoc line="22">
                The file descriptor object for this socket.                
            </javadoc>
            <declaration name="address" type="InetAddress" line="26"/>
            <javadoc line="26">
                The IP address of the remote end of this socket.                
            </javadoc>
            <declaration name="port" type="int" line="30"/>
            <javadoc line="30">
                The port number on the remote host to which this socket is connected.                
            </javadoc>
            <declaration name="localport" type="int" line="34"/>
            <javadoc line="34">
                The local port number to which this socket is connected.                
            </javadoc>
            <method name="create" type="void" line="38"/>
            <javadoc line="38">
                Creates either a stream or a datagram socket.                
                <param>
                    stream   if <code>true</code>, create a stream socket;
                      otherwise, create a datagram socket.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs while creating the
                      socket.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="46"/>
            <javadoc line="46">
                Connects this socket to the specified port on the named host.                
                <param>
                    host   the name of the remote host.                    
                </param>
                <param>
                    port   the port number.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when connecting to the
                      remote host.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="54"/>
            <javadoc line="54">
                Connects this socket to the specified port number on the specified host.                
                <param>
                    address   the IP address of the remote host.                    
                </param>
                <param>
                    port      the port number.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when attempting a
                      connection.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="62"/>
            <javadoc line="62">
                Connects this socket to the specified port number on the specified host.
                  A timeout of zero is interpreted as an infinite timeout. The connection
                  will then block until established or an error occurs.                
                <param>
                    address   the Socket address of the remote host.                    
                </param>
                <param>
                    timeout  the timeout value, in milliseconds, or zero for no timeout.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when attempting a
                      connection.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="bind" type="void" line="73"/>
            <javadoc line="73">
                Binds this socket to the specified local IP address and port number.                
                <param>
                    host   an IP address that belongs to a local interface.                    
                </param>
                <param>
                    port   the port number.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when binding this socket.                    
                </exception>
            </javadoc>
            <method name="listen" type="void" line="80"/>
            <javadoc line="80">
                Sets the maximum queue length for incoming connection indications
                  (a request to connect) to the &lt;code&gt;count&lt;/code&gt; argument. If a
                  connection indication arrives when the queue is full, the
                  connection is refused.                
                <param>
                    backlog   the maximum length of the queue.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when creating the queue.                    
                </exception>
            </javadoc>
            <method name="accept" type="void" line="89"/>
            <javadoc line="89">
                Accepts a connection.                
                <param>
                    s   the accepted connection.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when accepting the
                      connection.                    
                </exception>
            </javadoc>
            <method name="getInputStream" type="InputStream" line="96"/>
            <javadoc line="96">
                Returns an input stream for this socket.                
                <return>
                    a stream for reading from this socket.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs when creating the
                      input stream.                    
                </exception>
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="103"/>
            <javadoc line="103">
                Returns an output stream for this socket.                
                <return>
                    an output stream for writing to this socket.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs when creating the
                      output stream.                    
                </exception>
            </javadoc>
            <method name="available" type="int" line="110"/>
            <javadoc line="110">
                Returns the number of bytes that can be read from this socket
                  without blocking.                
                <return>
                    the number of bytes that can be read from this socket
                      without blocking.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs when determining the
                      number of bytes available.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="119"/>
            <javadoc line="119">
                Closes this socket.                
                <exception>
                    IOException  if an I/O error occurs when closing this socket.                    
                </exception>
            </javadoc>
            <javadoc line="124">
                Places the input stream for this socket at &quot;end of stream&quot;.
                  Any data sent to this socket is acknowledged and then
                  silently discarded.
                  If you read from a socket input stream after invoking
                  shutdownInput() on the socket, the stream will return EOF.                
                <exception>
                    IOException if an I/O error occurs when shutting down this
                      socket.                    
                </exception>
                <see>
                    java.net.Socket#shutdownOutput()                    
                </see>
                <see>
                    java.net.Socket#close()                    
                </see>
                <see>
                    java.net.Socket#setSoLinger(boolean,int)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="shutdownInput" type="void" line="137"/>
            <javadoc line="140">
                Disables the output stream for this socket.
                  For a TCP socket, any previously written data will be sent
                  followed by TCP&apos;s normal connection termination sequence.
                  If you write to a socket output stream after invoking
                  shutdownOutput() on the socket, the stream will throw
                  an IOException.                
                <exception>
                    IOException if an I/O error occurs when shutting down this
                      socket.                    
                </exception>
                <see>
                    java.net.Socket#shutdownInput()                    
                </see>
                <see>
                    java.net.Socket#close()                    
                </see>
                <see>
                    java.net.Socket#setSoLinger(boolean,int)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="shutdownOutput" type="void" line="154"/>
            <javadoc line="157">
                Returns the value of this socket&apos;s &lt;code&gt;fd&lt;/code&gt; field.                
                <return>
                    the value of this socket's <code>fd</code> field.                    
                </return>
                <see>
                    java.net.SocketImpl#fd                    
                </see>
            </javadoc>
            <method name="getFileDescriptor" type="FileDescriptor" line="162"/>
            <javadoc line="165">
                Returns the value of this socket&apos;s &lt;code&gt;address&lt;/code&gt; field.                
                <return>
                    the value of this socket's <code>address</code> field.                    
                </return>
                <see>
                    java.net.SocketImpl#address                    
                </see>
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="170"/>
            <javadoc line="173">
                Returns the value of this socket&apos;s &lt;code&gt;port&lt;/code&gt; field.                
                <return>
                    the value of this socket's <code>port</code> field.                    
                </return>
                <see>
                    java.net.SocketImpl#port                    
                </see>
            </javadoc>
            <method name="getPort" type="int" line="178"/>
            <javadoc line="181">
                Returns whether or not this SocketImpl supports sending
                  urgent data. By default, false is returned
                  unless the method is overridden in a sub-class                
                <return>
                    true if urgent data supported                    
                </return>
                <see>
                    java.net.SocketImpl#address                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="supportsUrgentData" type="boolean" line="189"/>
            <method name="sendUrgentData" type="void" line="192"/>
            <javadoc line="192">
                Send one byte of urgent data on the socket.
                  The byte to be sent is the low eight bits of the parameter                
                <param>
                    data The byte of data to send                    
                </param>
                <exception>
                    IOException if there is an error
                      sending the data.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="201">
                Returns the value of this socket&apos;s &lt;code&gt;localport&lt;/code&gt; field.                
                <return>
                    the value of this socket's <code>localport</code> field.                    
                </return>
                <see>
                    java.net.SocketImpl#localport                    
                </see>
            </javadoc>
            <method name="getLocalPort" type="int" line="206"/>
            <method name="setSocket" type="void" line="209">
                <params>
                    <param name="soc" type="Socket"/>
                </params>
            </method>
            <method name="getSocket" type="Socket" line="212"/>
            <method name="setServerSocket" type="void" line="215">
                <params>
                    <param name="soc" type="ServerSocket"/>
                </params>
            </method>
            <method name="getServerSocket" type="ServerSocket" line="218"/>
            <javadoc line="221">
                Returns the address and port of this socket as a &lt;code&gt;String&lt;/code&gt;.                
                <return>
                    a string representation of this socket.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="225"/>
            <method name="reset" type="void" line="228"/>
            <javadoc line="233">
                Sets performance preferences for this socket.
                  &lt;p&gt; Sockets use the TCP/IP protocol by default.  Some implementations
                  may offer alternative protocols which have different performance
                  characteristics than TCP/IP.  This method allows the application to
                  express its own preferences as to how these tradeoffs should be made
                  when the implementation chooses from the available protocols.
                  &lt;p&gt; Performance preferences are described by three integers
                  whose values indicate the relative importance of short connection time,
                  low latency, and high bandwidth.  The absolute values of the integers
                  are irrelevant; in order to choose a protocol the values are simply
                  compared, with larger values indicating stronger preferences. Negative
                  values represent a lower priority than positive values. If the
                  application prefers short connection time over both low latency and high
                  bandwidth, for example, then it could invoke this method with the values
                  &lt;tt&gt;(1, 0, 0)&lt;/tt&gt;.  If the application prefers high bandwidth above low
                  latency, and low latency above short connection time, then it could
                  invoke this method with the values &lt;tt&gt;(0, 1, 2)&lt;/tt&gt;.
                  By default, this method does nothing, unless it is overridden in a
                  a sub-class.                
                <param>
                    connectionTimeAn <tt>int</tt> expressing the relative importance of a short
                      connection time                    
                </param>
                <param>
                    latencyAn <tt>int</tt> expressing the relative importance of low
                      latency                    
                </param>
                <param>
                    bandwidthAn <tt>int</tt> expressing the relative importance of high
                      bandwidth                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setPerformancePreferences" type="void" line="261">
                <params>
                    <param name="connectionTime" type="int"/>
                    <param name="latency" type="int"/>
                    <param name="bandwidth" type="int"/>
                </params>
            </method>
        </class>
    </source>