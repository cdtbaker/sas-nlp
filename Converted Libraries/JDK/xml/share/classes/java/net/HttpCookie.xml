<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.util.List"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.text.SimpleDateFormat"/>
        <import package="java.util.TimeZone"/>
        <import package="java.util.Date"/>
        <import package="java.lang.NullPointerException"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Objects"/>
        <class name="HttpCookie" line="39">
            <comment line="60">
                                
            </comment>
            <comment line="62">
                                
            </comment>
            <comment line="63">
                The value of the cookie itself.                
            </comment>
            <comment line="64">
                                
            </comment>
            <comment line="66">
                NAME= ... &quot;$Name&quot; style is reserved                
            </comment>
            <comment line="67">
                value of NAME                
            </comment>
            <comment line="69">
                                
            </comment>
            <comment line="70">
                Attributes encoded in the header&apos;s cookie fields.                
            </comment>
            <comment line="71">
                                
            </comment>
            <comment line="73">
                Comment=VALUE ... describes cookie&apos;s use                
            </comment>
            <comment line="74">
                CommentURL=&quot;http URL&quot; ... describes cookie&apos;s use                
            </comment>
            <comment line="75">
                Discard ... discard cookie unconditionally                
            </comment>
            <comment line="76">
                Domain=VALUE ... domain that sees cookie                
            </comment>
            <comment line="77">
                Max-Age=VALUE ... cookies auto-expire                
            </comment>
            <comment line="78">
                Path=VALUE ... URLs that see the cookie                
            </comment>
            <comment line="79">
                Port[=&quot;portlist&quot;] ... the port cookie may be returned to                
            </comment>
            <comment line="80">
                Secure ... e.g. use SSL                
            </comment>
            <comment line="81">
                HttpOnly ... i.e. not accessible to scripts                
            </comment>
            <comment line="82">
                Version=1 ... RFC 2965 style                
            </comment>
            <comment line="84">
                                
            </comment>
            <comment line="85">
                Hold the creation time (in seconds) of the http cookie for later                
            </comment>
            <comment line="86">
                expiration calculation                
            </comment>
            <comment line="87">
                                
            </comment>
            <comment line="91">
                                
            </comment>
            <comment line="92">
                Since the positive and zero max-age have their meanings,                
            </comment>
            <comment line="93">
                this value serves as a hint as &apos;not specify max-age&apos;                
            </comment>
            <comment line="94">
                                
            </comment>
            <comment line="98">
                                
            </comment>
            <comment line="99">
                date formats used by Netscape&apos;s cookie draft                
            </comment>
            <comment line="100">
                as well as formats seen on various sites                
            </comment>
            <comment line="101">
                                
            </comment>
            <comment line="108">
                                
            </comment>
            <comment line="109">
                constant strings represent set-cookie header token                
            </comment>
            <comment line="110">
                                
            </comment>
            <comment line="115">
                                
            </comment>
            <comment line="219">
                                
            </comment>
            <comment line="863">
                                
            </comment>
            <comment line="865">
                Note -- disabled for now to allow full Netscape compatibility                
            </comment>
            <comment line="866">
                from RFC 2068, token special case characters                
            </comment>
            <comment line="867">
                                
            </comment>
            <comment line="868">
                private static final String tspecials = &quot;()&lt;&gt;@,;:\\\&quot;/[]?={} \t&quot;;                
            </comment>
            <comment line="871">
                Tests a string and returns true if the string counts as a
                 token.
                
                 @param value             the &lt;code&gt;String&lt;code&gt; to be tested
                
                 @return                  &lt;code&gt;true&lt;code&gt; if the &lt;code&gt;String&lt;code&gt; is
                                          a token; &lt;code&gt;false&lt;code&gt; if it is not                
            </comment>
            <comment line="894">
                @param name      the name to be tested
                 @return          &lt;tt&gt;true&lt;tt&gt; if the name is reserved by cookie
                                  specification, &lt;tt&gt;false&lt;tt&gt; if it is not                
            </comment>
            <comment line="920">
                Parse header string to cookie object.
                
                 @param header    header string; should contain only one NAME=VALUE pair
                
                 @return          an HttpCookie being extracted
                
                 @throws IllegalArgumentException if header string violates the cookie
                                                  specification                
            </comment>
            <comment line="975">
                assign cookie attribute value to attribute name;
                 use a map to simulate method dispatch                
            </comment>
            <comment line="1068">
                Constructs a string representation of this cookie. The string format is
                 as Netscape spec, but without leading &quot;Cookie:&quot; token.                
            </comment>
            <comment line="1080">
                Constructs a string representation of this cookie. The string format is
                 as RFC 29652109, but without leading &quot;Cookie:&quot; token.                
            </comment>
            <comment line="1100">
                @param dateString        a date string in one of the formats
                                          defined in Netscape cookie spec
                
                 @return                  delta seconds between this cookie&apos;s creation
                                          time and the time specified by dateString                
            </comment>
            <comment line="1123">
                try to guess the cookie version through set-cookie header string                
            </comment>
            <comment line="1178">
                Split cookie header string according to rfc 2965:
                   1) split where it is a comma;
                   2) but not the comma surrounding by double-quotes, which is the comma
                      inside port list or embeded URIs.
                
                 @param header            the cookie header string to split
                
                 @return                  list of strings; never null                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="39">
                An HttpCookie object represents an http cookie, which carries state
                  information between server and user agent. Cookie is widely adopted
                  to create stateful sessions.
                  &lt;p&gt;There are 3 http cookie specifications:
                  &lt;blockquote&gt;
                  Netscape draft&lt;br&gt;
                  RFC 2109 - &lt;a href=&quot;http://www.ietf.org/rfc/rfc2109.txt&quot;&gt;
                  &lt;i&gt;http://www.ietf.org/rfc/rfc2109.txt&lt;/i&gt;&lt;/a&gt;&lt;br&gt;
                  RFC 2965 - &lt;a href=&quot;http://www.ietf.org/rfc/rfc2965.txt&quot;&gt;
                  &lt;i&gt;http://www.ietf.org/rfc/rfc2965.txt&lt;/i&gt;&lt;/a&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;HttpCookie class can accept all these 3 forms of syntax.                
                <author>
                    Edward Wang                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="name" type="String" line="65"/>
            <declaration name="value" type="String" line="66"/>
            <declaration name="comment" type="String" line="72"/>
            <declaration name="commentURL" type="String" line="73"/>
            <declaration name="toDiscard" type="boolean" line="74"/>
            <declaration name="domain" type="String" line="75"/>
            <declaration name="maxAge" type="long" line="76"/>
            <declaration name="path" type="String" line="77"/>
            <declaration name="portlist" type="String" line="78"/>
            <declaration name="secure" type="boolean" line="79"/>
            <declaration name="httpOnly" type="boolean" line="80"/>
            <declaration name="version" type="int" line="81"/>
            <declaration name="whenCreated" type="long" line="87"/>
            <declaration name="MAX_AGE_UNSPECIFIED" type="long" line="94"/>
            <declaration name="COOKIE_DATE_FORMATS" type="String[]" line="101"/>
            <declaration name="SET_COOKIE" type="String" line="110"/>
            <declaration name="SET_COOKIE2" type="String" line="111"/>
            <javadoc line="116">
                Constructs a cookie with a specified name and value.
                  &lt;p&gt;The name must conform to RFC 2965. That means it can contain
                  only ASCII alphanumeric characters and cannot contain commas,
                  semicolons, or white space or begin with a $ character. The cookie&apos;s
                  name cannot be changed after creation.
                  &lt;p&gt;The value can be anything the server chooses to send. Its
                  value is probably of interest only to the server. The cookie&apos;s
                  value can be changed after creation with the
                  &lt;code&gt;setValue&lt;/code&gt; method.
                  &lt;p&gt;By default, cookies are created according to the RFC 2965
                  cookie specification. The version can be changed with the
                  &lt;code&gt;setVersion&lt;/code&gt; method.                
                <param>
                    name                      a <code>String</code> specifying the name of the cookie                    
                </param>
                <param>
                    value                     a <code>String</code> specifying the value of the cookie                    
                </param>
                <throws>
                    IllegalArgumentException if the cookie name contains illegal characters
                      or it is one of the tokens reserved for use
                      by the cookie protocol                    
                </throws>
                <throws>
                    NullPointerException     if <tt>name</tt> is <tt>null</tt>                    
                </throws>
                <see>
                    #setValue                    
                </see>
                <see>
                    #setVersion                    
                </see>
            </javadoc>
            <method name="HttpCookie" type="constructor" line="147">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="149"/>
            </method>
            <javadoc line="163">
                Constructs cookies from set-cookie or set-cookie2 header string.
                  RFC 2965 section 3.2.2 set-cookie2 syntax indicates that one header line
                  may contain more than one cookie definitions, so this is a static
                  utility method instead of another constructor.                
                <param>
                    header    a <tt>String</tt> specifying the set-cookie header.
                      The header should start with "set-cookie", or "set-cookie2"
                      token; or it should have no leading token at all.                    
                </param>
                <return>
                    a List of cookie parsed from header line string                    
                </return>
                <throws>
                    IllegalArgumentException if header string violates the cookie
                      specification's syntax, or the cookie
                      name contains llegal characters, or
                      the cookie name is one of the tokens
                      reserved for use by the cookie protocol                    
                </throws>
                <throws>
                    NullPointerException     if the header string is <tt>null</tt>                    
                </throws>
            </javadoc>
            <method name="parse" type="List<HttpCookie>" line="180">
                <params>
                    <param name="header" type="String"/>
                </params>
                <comment line="183">
                    if header start with set-cookie or set-cookie2, strip it off                    
                </comment>
                <comment line="192">
                    The Netscape cookie may have a comma in its expires attribute,                    
                </comment>
                <comment line="193">
                    while the comma is the delimiter in rfc 2965/2109 cookie header string.                    
                </comment>
                <comment line="194">
                    so the parse logic is slightly different                    
                </comment>
                <comment line="196">
                    Netscape draft cookie                    
                </comment>
                <comment line="201">
                    rfc2965/2109 cookie                    
                </comment>
                <comment line="202">
                    if header string contains more than one cookie,                    
                </comment>
                <comment line="203">
                    it&apos;ll separate them with comma                    
                </comment>
                <declaration name="version" type="int" line="181"/>
                <scope line="184"/>
                <scope line="186"/>
                <declaration name="cookies" type="List&lt;HttpCookie&gt;" line="191"/>
                <scope line="195">
                    <declaration name="cookie" type="HttpCookie" line="197"/>
                </scope>
                <scope line="200">
                    <declaration name="cookieStrings" type="List&lt;String&gt;" line="204"/>
                    <scope line="205">
                        <declaration name="cookie" type="HttpCookie" line="206"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="221">
                Reports whether this http cookie has expired or not.                
                <return>
                    <tt>true</tt> to indicate this http cookie has expired;
                      otherwise, <tt>false</tt>                    
                </return>
            </javadoc>
            <method name="hasExpired" type="boolean" line="227">
                <comment line="230">
                    if not specify max-age, this cookie should be                    
                </comment>
                <comment line="231">
                    discarded when user agent is to be closed, but                    
                </comment>
                <comment line="232">
                    it is not expired.                    
                </comment>
                <declaration name="deltaSecond" type="long" line="235"/>
            </method>
            <javadoc line="242">
                Specifies a comment that describes a cookie&apos;s purpose.
                  The comment is useful if the browser presents the cookie
                  to the user. Comments
                  are not supported by Netscape Version 0 cookies.                
                <param>
                    purpose           a <code>String</code> specifying the comment
                      to display to the user                    
                </param>
                <see>
                    #getComment                    
                </see>
            </javadoc>
            <method name="setComment" type="void" line="256">
                <params>
                    <param name="purpose" type="String"/>
                </params>
            </method>
            <javadoc line="263">
                Returns the comment describing the purpose of this cookie, or
                  &lt;code&gt;null&lt;/code&gt; if the cookie has no comment.                
                <return>
                    a <code>String</code> containing the comment,
                      or <code>null</code> if none                    
                </return>
                <see>
                    #setComment                    
                </see>
            </javadoc>
            <method name="getComment" type="String" line="274"/>
            <javadoc line="279">
                Specifies a comment url that describes a cookie&apos;s purpose.
                  The comment url is useful if the browser presents the cookie
                  to the user. Comment url is RFC 2965 only.                
                <param>
                    purpose           a <code>String</code> specifying the comment url
                      to display to the user                    
                </param>
                <see>
                    #getCommentURL                    
                </see>
            </javadoc>
            <method name="setCommentURL" type="void" line="292">
                <params>
                    <param name="purpose" type="String"/>
                </params>
            </method>
            <javadoc line="299">
                Returns the comment url describing the purpose of this cookie, or
                  &lt;code&gt;null&lt;/code&gt; if the cookie has no comment url.                
                <return>
                    a <code>String</code> containing the comment url,
                      or <code>null</code> if none                    
                </return>
                <see>
                    #setCommentURL                    
                </see>
            </javadoc>
            <method name="getCommentURL" type="String" line="310"/>
            <javadoc line="315">
                Specify whether user agent should discard the cookie unconditionally.
                  This is RFC 2965 only attribute.                
                <param>
                    discard   <tt>true</tt> indicates to discard cookie unconditionally                    
                </param>
                <see>
                    #getDiscard                    
                </see>
            </javadoc>
            <method name="setDiscard" type="void" line="324">
                <params>
                    <param name="discard" type="boolean"/>
                </params>
            </method>
            <javadoc line="331">
                Return the discard attribute of the cookie                
                <return>
                    a <tt>boolean</tt> to represent this cookie's discard attribute                    
                </return>
                <see>
                    #setDiscard                    
                </see>
            </javadoc>
            <method name="getDiscard" type="boolean" line="339"/>
            <javadoc line="344">
                Specify the portlist of the cookie, which restricts the port(s)
                  to which a cookie may be sent back in a Cookie header.                
                <param>
                    ports     a <tt>String</tt> specify the port list, which is
                      comma seperated series of digits                    
                </param>
                <see>
                    #getPortlist                    
                </see>
            </javadoc>
            <method name="setPortlist" type="void" line="353">
                <params>
                    <param name="ports" type="String"/>
                </params>
            </method>
            <javadoc line="360">
                Return the port list attribute of the cookie                
                <return>
                    a <tt>String</tt> contains the port list
                      or <tt>null</tt> if none                    
                </return>
                <see>
                    #setPortlist                    
                </see>
            </javadoc>
            <method name="getPortlist" type="String" line="368"/>
            <javadoc line="372">
                Specifies the domain within which this cookie should be presented.
                  &lt;p&gt;The form of the domain name is specified by RFC 2965. A domain
                  name begins with a dot (&lt;code&gt;.foo.com&lt;/code&gt;) and means that
                  the cookie is visible to servers in a specified Domain Name System
                  (DNS) zone (for example, &lt;code&gt;www.foo.com&lt;/code&gt;, but not
                  &lt;code&gt;a.b.foo.com&lt;/code&gt;). By default, cookies are only returned
                  to the server that sent them.                
                <param>
                    pattern           a <code>String</code> containing the domain name
                      within which this cookie is visible;
                      form is according to RFC 2965                    
                </param>
                <see>
                    #getDomain                    
                </see>
            </javadoc>
            <method name="setDomain" type="void" line="392">
                <params>
                    <param name="pattern" type="String"/>
                </params>
            </method>
            <javadoc line="403">
                Returns the domain name set for this cookie. The form of
                  the domain name is set by RFC 2965.                
                <return>
                    a <code>String</code> containing the domain name                    
                </return>
                <see>
                    #setDomain                    
                </see>
            </javadoc>
            <method name="getDomain" type="String" line="413"/>
            <javadoc line="418">
                Sets the maximum age of the cookie in seconds.
                  &lt;p&gt;A positive value indicates that the cookie will expire
                  after that many seconds have passed. Note that the value is
                  the &lt;i&gt;maximum&lt;/i&gt; age when the cookie will expire, not the cookie&apos;s
                  current age.
                  &lt;p&gt;A negative value means
                  that the cookie is not stored persistently and will be deleted
                  when the Web browser exits. A zero value causes the cookie
                  to be deleted.                
                <param>
                    expiry            an integer specifying the maximum age of the
                      cookie in seconds; if zero, the cookie
                      should be discarded immediately;
                      otherwise, the cookie's max age is unspecified.                    
                </param>
                <see>
                    #getMaxAge                    
                </see>
            </javadoc>
            <method name="setMaxAge" type="void" line="439">
                <params>
                    <param name="expiry" type="long"/>
                </params>
            </method>
            <javadoc line="446">
                Returns the maximum age of the cookie, specified in seconds.
                  By default, &lt;code&gt;-1&lt;/code&gt; indicating the cookie will persist
                  until browser shutdown.                
                <return>
                    an integer specifying the maximum age of the
                      cookie in seconds                    
                </return>
                <see>
                    #setMaxAge                    
                </see>
            </javadoc>
            <method name="getMaxAge" type="long" line="460"/>
            <javadoc line="467">
                Specifies a path for the cookie
                  to which the client should return the cookie.
                  &lt;p&gt;The cookie is visible to all the pages in the directory
                  you specify, and all the pages in that directory&apos;s subdirectories.
                  A cookie&apos;s path must include the servlet that set the cookie,
                  for example, &lt;i&gt;/catalog&lt;/i&gt;, which makes the cookie
                  visible to all directories on the server under &lt;i&gt;/catalog&lt;/i&gt;.
                  &lt;p&gt;Consult RFC 2965 (available on the Internet) for more
                  information on setting path names for cookies.                
                <param>
                    uri               a <code>String</code> specifying a path                    
                </param>
                <see>
                    #getPath                    
                </see>
            </javadoc>
            <method name="setPath" type="void" line="488">
                <params>
                    <param name="uri" type="String"/>
                </params>
            </method>
            <javadoc line="495">
                Returns the path on the server
                  to which the browser returns this cookie. The
                  cookie is visible to all subpaths on the server.                
                <return>
                    a <code>String</code> specifying a path that contains
                      a servlet name, for example, <i>/catalog</i>                    
                </return>
                <see>
                    #setPath                    
                </see>
            </javadoc>
            <method name="getPath" type="String" line="508"/>
            <javadoc line="516">
                Indicates whether the cookie should only be sent using a secure protocol,
                  such as HTTPS or SSL.
                  &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    flag      If <code>true</code>, the cookie can only be sent over
                      a secure protocol like https.
                      If <code>false</code>, it can be sent over any protocol.                    
                </param>
                <see>
                    #getSecure                    
                </see>
            </javadoc>
            <method name="setSecure" type="void" line="530">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="537">
                Returns &lt;code&gt;true&lt;/code&gt; if sending this cookie should be
                  restricted to a secure protocol, or &lt;code&gt;false&lt;/code&gt; if the
                  it can be sent using any protocol.                
                <return>
                    <code>false</code> if the cookie can be sent over
                      any standard protocol; otherwise, <code>true</code>                    
                </return>
                <see>
                    #setSecure                    
                </see>
            </javadoc>
            <method name="getSecure" type="boolean" line="549"/>
            <javadoc line="557">
                Returns the name of the cookie. The name cannot be changed after
                  creation.                
                <return>
                    a <code>String</code> specifying the cookie's name                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="565"/>
            <javadoc line="573">
                Assigns a new value to a cookie after the cookie is created.
                  If you use a binary value, you may want to use BASE64 encoding.
                  &lt;p&gt;With Version 0 cookies, values should not contain white
                  space, brackets, parentheses, equals signs, commas,
                  double quotes, slashes, question marks, at signs, colons,
                  and semicolons. Empty values may not behave the same way
                  on all browsers.                
                <param>
                    newValue          a <code>String</code> specifying the new value                    
                </param>
                <see>
                    #getValue                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="591">
                <params>
                    <param name="newValue" type="String"/>
                </params>
            </method>
            <javadoc line="598">
                Returns the value of the cookie.                
                <return>
                    a <code>String</code> containing the cookie's
                      present value                    
                </return>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="getValue" type="String" line="608"/>
            <javadoc line="615">
                Returns the version of the protocol this cookie complies
                  with. Version 1 complies with RFC 2965/2109,
                  and version 0 complies with the original
                  cookie specification drafted by Netscape. Cookies provided
                  by a browser use and identify the browser&apos;s cookie version.                
                <return>
                    0 if the cookie complies with the
                      original Netscape specification; 1
                      if the cookie complies with RFC 2965/2109                    
                </return>
                <see>
                    #setVersion                    
                </see>
            </javadoc>
            <method name="getVersion" type="int" line="631"/>
            <javadoc line="638">
                Sets the version of the cookie protocol this cookie complies
                  with. Version 0 complies with the original Netscape cookie
                  specification. Version 1 complies with RFC 2965/2109.                
                <param>
                    v                 0 if the cookie should comply with
                      the original Netscape specification;
                      1 if the cookie should comply with RFC 2965/2109                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>v</tt> is neither 0 nor 1                    
                </throws>
                <see>
                    #getVersion                    
                </see>
            </javadoc>
            <method name="setVersion" type="void" line="654">
                <params>
                    <param name="v" type="int"/>
                </params>
                <scope line="655"/>
            </method>
            <javadoc line="662">
                Returns {@code true} if this cookie contains the &lt;i&gt;HttpOnly&lt;/i&gt;
                  attribute. This means that the cookie should not be accessible to
                  scripting engines, like javascript.                
                <return>
                    {@code true} if this cookie should be considered http only.                    
                </return>
                <see>
                    #setHttpOnly(boolean)                    
                </see>
            </javadoc>
            <method name="isHttpOnly" type="boolean" line="671"/>
            <javadoc line="675">
                Indicates whether the cookie should be considered HTTP Only. If set to{@code true} it means the cookie should not be accessible to scripting
                  engines like javascript.                
                <param>
                    httpOnly if {@code true} make the cookie HTTP only, i.e.
                      only visible as part of an HTTP request.                    
                </param>
                <see>
                    #isHttpOnly()                    
                </see>
            </javadoc>
            <method name="setHttpOnly" type="void" line="685">
                <params>
                    <param name="httpOnly" type="boolean"/>
                </params>
            </method>
            <javadoc line="689">
                The utility method to check whether a host name is in a domain
                  or not.
                  &lt;p&gt;This concept is described in the cookie specification.
                  To understand the concept, some terminologies need to be defined first:
                  &lt;blockquote&gt;
                  effective host name = hostname if host name contains dot&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;or = hostname.local if not
                  &lt;/blockquote&gt;
                  &lt;p&gt;Host A&apos;s name domain-matches host B&apos;s if:
                  &lt;blockquote&gt;&lt;ul&gt;
                  &lt;li&gt;their host name strings string-compare equal; or&lt;/li&gt;
                  &lt;li&gt;A is a HDN string and has the form NB, where N is a non-empty
                  name string, B has the form .B&apos;, and B&apos; is a HDN string.  (So,
                  x.y.com domain-matches .Y.com but not Y.com.)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/blockquote&gt;
                  &lt;p&gt;A host isn&apos;t in a domain (RFC 2965 sec. 3.3.2) if:
                  &lt;blockquote&gt;&lt;ul&gt;
                  &lt;li&gt;The value for the Domain attribute contains no embedded dots,
                  and the value is not .local.&lt;/li&gt;
                  &lt;li&gt;The effective host name that derives from the request-host does
                  not domain-match the Domain attribute.&lt;/li&gt;
                  &lt;li&gt;The request-host is a HDN (not IP address) and has the form HD,
                  where D is the value of the Domain attribute, and H is a string
                  that contains one or more dots.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/blockquote&gt;
                  &lt;p&gt;Examples:
                  &lt;blockquote&gt;&lt;ul&gt;
                  &lt;li&gt;A Set-Cookie2 from request-host y.x.foo.com for Domain=.foo.com
                  would be rejected, because H is y.x and contains a dot.&lt;/li&gt;
                  &lt;li&gt;A Set-Cookie2 from request-host x.foo.com for Domain=.foo.com
                  would be accepted.&lt;/li&gt;
                  &lt;li&gt;A Set-Cookie2 with Domain=.com or Domain=.com., will always be
                  rejected, because there is no embedded dot.&lt;/li&gt;
                  &lt;li&gt;A Set-Cookie2 with Domain=ajax.com will be accepted, and the
                  value for Domain will be taken to be .ajax.com, because a dot
                  gets prepended to the value.&lt;/li&gt;
                  &lt;li&gt;A Set-Cookie2 from request-host example for Domain=.local will
                  be accepted, because the effective host name for the request-
                  host is example.local, and example.local domain-matches .local.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/blockquote&gt;                
                <param>
                    domain    the domain name to check host name with                    
                </param>
                <param>
                    host      the host name in question                    
                </param>
                <return>
                    <tt>true</tt> if they domain-matches; <tt>false</tt> if not                    
                </return>
            </javadoc>
            <method name="domainMatches" type="boolean" line="738">
                <params>
                    <param name="domain" type="String"/>
                    <param name="host" type="String"/>
                </params>
                <comment line="742">
                    if there&apos;s no embedded dot in domain and domain is not .local                    
                </comment>
                <comment line="751">
                    if the host name contains no dot and the domain name is .local                    
                </comment>
                <comment line="759">
                    if the host name and the domain name are just string-compare euqal                    
                </comment>
                <comment line="763">
                    need to check H &amp; D component                    
                </comment>
                <comment line="770">
                    if domain is actually .host                    
                </comment>
                <declaration name="isLocalDomain" type="boolean" line="743"/>
                <declaration name="embeddedDotInDomain" type="int" line="744"/>
                <declaration name="firstDotInHost" type="int" line="752"/>
                <declaration name="domainLength" type="int" line="756"/>
                <declaration name="lengthDiff" type="int" line="757"/>
                <scope line="758"/>
                <scope line="762">
                    <declaration name="H" type="String" line="764"/>
                    <declaration name="D" type="String" line="765"/>
                </scope>
                <scope line="769"/>
            </method>
            <javadoc line="779">
                Constructs a cookie header string representation of this cookie,
                  which is in the format defined by corresponding cookie specification,
                  but without the leading &quot;Cookie:&quot; token.                
                <return>
                    a string form of the cookie. The string has the defined format                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="787">
                <scope line="788"/>
                <scope line="790"/>
            </method>
            <javadoc line="796">
                Test the equality of two http cookies.
                  &lt;p&gt; The result is &lt;tt&gt;true&lt;/tt&gt; only if two cookies
                  come from same domain (case-insensitive),
                  have same name (case-insensitive),
                  and have same path (case-sensitive).                
                <return>
                    <tt>true</tt> if 2 http cookies equal to each other;
                      otherwise, <tt>false</tt>                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="808">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="815">
                    One http cookie equals to another cookie (RFC 2965 sec. 3.3.3) if:                    
                </comment>
                <comment line="816">
                    1. they come from same domain (case-insensitive),                    
                </comment>
                <comment line="817">
                    2. have same name (case-insensitive),                    
                </comment>
                <comment line="818">
                    3. and have same path (case-sensitive).                    
                </comment>
                <declaration name="other" type="HttpCookie" line="813"/>
            </method>
            <javadoc line="825">
                Return hash code of this http cookie. The result is the sum of
                  hash code value of three significant components of this cookie:
                  name, domain, and path.
                  That is, the hash code is the value of the expression:
                  &lt;blockquote&gt;
                  getName().toLowerCase().hashCode()&lt;br&gt;
                  + getDomain().toLowerCase().hashCode()&lt;br&gt;
                  + getPath().hashCode()
                  &lt;/blockquote&gt;                
                <return>
                    this http cookie's hash code                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="839">
                <declaration name="h1" type="int" line="840"/>
                <declaration name="h2" type="int" line="841"/>
                <declaration name="h3" type="int" line="842"/>
            </method>
            <javadoc line="847">
                Create and return a copy of this object.                
                <return>
                    a clone of this http cookie                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="853">
                <scope line="854"/>
                <scope line="856"/>
            </method>
            <declaration name="tspecials" type="String" line="868"/>
            <method name="isToken" type="boolean" line="880">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="len" type="int" line="881"/>
                <scope line="883">
                    <declaration name="c" type="char" line="884"/>
                </scope>
            </method>
            <method name="isReserved" type="boolean" line="898">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="900">
                    rfc2965 only                    
                </comment>
                <comment line="901">
                    rfc2965 only                    
                </comment>
                <comment line="903">
                    netscape draft only                    
                </comment>
                <comment line="906">
                    rfc2965 only                    
                </comment>
                <scope line="911"/>
            </method>
            <method name="parseInternal" type="HttpCookie" line="930">
                <params>
                    <param name="header" type="String"/>
                </params>
                <comment line="936">
                    there should always have at least on name-value pair;                    
                </comment>
                <comment line="937">
                    it&apos;s cookie&apos;s name                    
                </comment>
                <comment line="946">
                    no &quot;=&quot; in name-value pair; it&apos;s an error                    
                </comment>
                <comment line="953">
                    remaining name-value pairs are cookie&apos;s attributes                    
                </comment>
                <comment line="966">
                    assign attribute to cookie                    
                </comment>
                <declaration name="cookie" type="HttpCookie" line="931"/>
                <declaration name="namevaluePair" type="String" line="932"/>
                <declaration name="tokenizer" type="StringTokenizer" line="934"/>
                <scope line="938">
                    <declaration name="index" type="int" line="940"/>
                    <scope line="941">
                        <declaration name="name" type="String" line="942"/>
                        <declaration name="value" type="String" line="943"/>
                    </scope>
                    <scope line="945"/>
                </scope>
                <scope line="949"/>
                <scope line="954">
                    <declaration name="index" type="int" line="956"/>
                    <declaration name="name" type="String" line="957"/>
                    <scope line="958"/>
                    <scope line="961"/>
                </scope>
            </method>
            <interface name="CookieAttributeAssignor">
                <method name="assign" type="void" line="979"/>
            </interface>
            <declaration name="assignors" type="java.util.Map&lt;String,CookieAttributeAssignor&gt;" line="981"/>
            <scope line="982">
                <anonymous_class line="984">
                    <method name="assign" type="void" line="985">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="989">
                    <method name="assign" type="void" line="990">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="994">
                    <method name="assign" type="void" line="995">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="999">
                    <method name="assign" type="void" line="1000">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1004">
                    <method name="assign" type="void" line="1005">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                        <scope line="1006">
                            <declaration name="maxage" type="long" line="1007"/>
                        </scope>
                        <scope line="1009"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="1014">
                    <method name="assign" type="void" line="1015">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1019">
                    <method name="assign" type="void" line="1020">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1024">
                    <method name="assign" type="void" line="1025">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1029">
                    <method name="assign" type="void" line="1030">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1034">
                    <method name="assign" type="void" line="1035">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                        <comment line="1040">
                            Just ignore bogus version, it will default to 0 or 1                            
                        </comment>
                        <scope line="1036">
                            <declaration name="version" type="int" line="1037"/>
                        </scope>
                        <scope line="1039"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="1044">
                    <method name="assign" type="void" line="1045">
                        <params>
                            <param name="cookie" type="HttpCookie"/>
                            <param name="attrName" type="String"/>
                            <param name="attrValue" type="String"/>
                        </params>
                        <scope line="1046"/>
                    </method>
                </anonymous_class>
            </scope>
            <method name="assignAttribute" type="void" line="1055">
                <params>
                    <param name="cookie" type="HttpCookie"/>
                    <param name="attrName" type="String"/>
                    <param name="attrValue" type="String"/>
                </params>
                <comment line="1056">
                    strip off the surrounding &quot;-sign if there&apos;s any                    
                </comment>
                <comment line="1063">
                    Ignore the attribute as per RFC 2965                    
                </comment>
                <declaration name="assignor" type="CookieAttributeAssignor" line="1059"/>
                <scope line="1060"/>
                <scope line="1062"/>
            </method>
            <method name="toNetscapeHeaderString" type="String" line="1071">
                <declaration name="sb" type="StringBuilder" line="1072"/>
            </method>
            <method name="toRFC2965HeaderString" type="String" line="1083">
                <declaration name="sb" type="StringBuilder" line="1084"/>
            </method>
            <declaration name="GMT" type="TimeZone" line="1097"/>
            <method name="expiryDate2DeltaSeconds" type="long" line="1106">
                <params>
                    <param name="dateString" type="String"/>
                </params>
                <comment line="1114">
                    Ignore, try the next date format                    
                </comment>
                <scope line="1107">
                    <declaration name="df" type="SimpleDateFormat" line="1108"/>
                    <scope line="1110">
                        <declaration name="date" type="Date" line="1111"/>
                    </scope>
                    <scope line="1113"/>
                </scope>
            </method>
            <method name="guessCookieVersion" type="int" line="1125">
                <params>
                    <param name="header" type="String"/>
                </params>
                <comment line="1130">
                    only netscape cookie using &apos;expires&apos;                    
                </comment>
                <comment line="1133">
                    version is mandatory for rfc 2965/2109 cookie                    
                </comment>
                <comment line="1136">
                    rfc 2965/2109 use &apos;max-age&apos;                    
                </comment>
                <comment line="1139">
                    only rfc 2965 cookie starts with &apos;set-cookie2&apos;                    
                </comment>
                <declaration name="version" type="int" line="1126"/>
                <scope line="1129"/>
                <scope line="1132"/>
                <scope line="1135"/>
                <scope line="1138"/>
            </method>
            <method name="stripOffSurroundingQuote" type="String" line="1146">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="1148"/>
                <scope line="1152"/>
            </method>
            <method name="equalsIgnoreCase" type="boolean" line="1158">
                <params>
                    <param name="s" type="String"/>
                    <param name="t" type="String"/>
                </params>
                <scope line="1160"/>
            </method>
            <method name="startsWithIgnoreCase" type="boolean" line="1166">
                <params>
                    <param name="s" type="String"/>
                    <param name="start" type="String"/>
                </params>
                <scope line="1170"/>
            </method>
            <method name="splitMultiCookies" type="List<String>" line="1188">
                <params>
                    <param name="header" type="String"/>
                </params>
                <comment line="1196">
                    it is comma and not surrounding by double-quotes                    
                </comment>
                <declaration name="cookies" type="List&lt;String&gt;" line="1189"/>
                <declaration name="quoteCount" type="int" line="1190"/>
                <declaration name="p" type="int" line="1191"/>
                <scope line="1193">
                    <declaration name="c" type="char" line="1194"/>
                    <scope line="1196"/>
                </scope>
            </method>
        </class>
    </source>