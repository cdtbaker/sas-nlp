<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.StringTokenizer"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="URL" line="8">
            <implements interface="java.io.Serializable"/>
            <javadoc line="8">
                Class &lt;code&gt;URL&lt;/code&gt; represents a Uniform Resource
                  Locator, a pointer to a &quot;resource&quot; on the World
                  Wide Web. A resource can be something as simple as a file or a
                  directory, or it can be a reference to a more complicated object,
                  such as a query to a database or to a search engine. More
                  information on the types of URLs and their formats can be found at:
                  &lt;blockquote&gt;
                  &lt;a href=&quot;http://www.socs.uts.edu.au/MosaicDocs-old/url-primer.html&quot;&gt;
                  &lt;i&gt;http://www.socs.uts.edu.au/MosaicDocs-old/url-primer.html&lt;/i&gt;&lt;/a&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  In general, a URL can be broken into several parts. The previous
                  example of a URL indicates that the protocol to use is
                  &lt;code&gt;http&lt;/code&gt; (HyperText Transfer Protocol) and that the
                  information resides on a host machine named
                  &lt;code&gt;www.socs.uts.edu.au&lt;/code&gt;. The information on that host
                  machine is named &lt;code&gt;/MosaicDocs-old/url-primer.html&lt;/code&gt;. The exact
                  meaning of this name on the host machine is both protocol
                  dependent and host dependent. The information normally resides in
                  a file, but it could be generated on the fly. This component of
                  the URL is called the &lt;i&gt;path&lt;/i&gt; component.
                  &lt;p&gt;
                  A URL can optionally specify a &quot;port&quot;, which is the
                  port number to which the TCP connection is made on the remote host
                  machine. If the port is not specified, the default port for
                  the protocol is used instead. For example, the default port for
                  &lt;code&gt;http&lt;/code&gt; is &lt;code&gt;80&lt;/code&gt;. An alternative port could be
                  specified as:
                  &lt;blockquote&gt;&lt;pre&gt;
                  http://www.socs.uts.edu.au:80/MosaicDocs-old/url-primer.html
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  The syntax of &lt;code&gt;URL&lt;/code&gt; is defined by  &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2396: Uniform
                  Resource Identifiers (URI): Generic Syntax&lt;/i&gt;&lt;/a&gt;, amended by &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2732.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2732: Format for
                  Literal IPv6 Addresses in URLs&lt;/i&gt;&lt;/a&gt;. The Literal IPv6 address format
                  also supports scope_ids. The syntax and usage of scope_ids is described
                  &lt;a href=&quot;Inet6Address.html#scoped&quot;&gt;here&lt;/a&gt;.
                  &lt;p&gt;
                  A URL may have appended to it a &quot;fragment&quot;, also known
                  as a &quot;ref&quot; or a &quot;reference&quot;. The fragment is indicated by the sharp
                  sign character &quot;#&quot; followed by more characters. For example,
                  &lt;blockquote&gt;&lt;pre&gt;
                  http://java.sun.com/index.html#chapter1
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This fragment is not technically part of the URL. Rather, it
                  indicates that after the specified resource is retrieved, the
                  application is specifically interested in that part of the
                  document that has the tag &lt;code&gt;chapter1&lt;/code&gt; attached to it. The
                  meaning of a tag is resource specific.
                  &lt;p&gt;
                  An application can also specify a &quot;relative URL&quot;,
                  which contains only enough information to reach the resource
                  relative to another URL. Relative URLs are frequently used within
                  HTML pages. For example, if the contents of the URL:
                  &lt;blockquote&gt;&lt;pre&gt;
                  http://java.sun.com/index.html
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  contained within it the relative URL:
                  &lt;blockquote&gt;&lt;pre&gt;
                  FAQ.html
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  it would be a shorthand for:
                  &lt;blockquote&gt;&lt;pre&gt;
                  http://java.sun.com/FAQ.html
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  The relative URL need not specify all the components of a URL. If
                  the protocol, host name, or port number is missing, the value is
                  inherited from the fully specified URL. The file component must be
                  specified. The optional fragment is not inherited.
                  &lt;p&gt;
                  The URL class does not itself encode or decode any URL components
                  according to the escaping mechanism defined in RFC2396. It is the
                  responsibility of the caller to encode any fields, which need to be
                  escaped prior to calling URL, and also to decode any escaped fields,
                  that are returned from URL. Furthermore, because URL has no knowledge
                  of URL escaping, it does not recognise equivalence between the encoded
                  or decoded form of the same URL. For example, the two URLs:&lt;br&gt;
                  &lt;pre&gt;    http://foo.com/hello world/ and http://foo.com/hello%20world&lt;/pre&gt;
                  would be considered not equal to each other.
                  &lt;p&gt;
                  Note, the {@link java.net.URI} class does perform escaping of its
                  component fields in certain circumstances. The recommended way
                  to manage the encoding and decoding of URLs is to use {@link java.net.URI},
                  and to convert between these two classes using {@link #toURI()} and{@link URI#toURL()}.
                  &lt;p&gt;
                  The {@link URLEncoder} and {@link URLDecoder} classes can also be
                  used, but only for HTML form encoding, which is not the same
                  as the encoding scheme defined in RFC2396.                
                <author>
                    James Gosling                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="105"/>
            <declaration name="protocolPathProp" type="String" line="106"/>
            <javadoc line="106">
                The property which specifies the package prefix list to be scanned
                  for protocol handlers.  The value of this property (if any) should
                  be a vertical bar delimited list of package names to search through
                  for a protocol handler to load.  The policy of this class is that
                  all protocol handlers will be in a class called &lt;protocolname&gt;.Handler,
                  and each package in the list is examined in turn for a matching
                  handler.  If none are found (or the property is not specified), the
                  default package prefix, sun.net.www.protocol, is used.  The search
                  proceeds from the first package in the list to the last and stops
                  when a match is found.                
            </javadoc>
            <declaration name="protocol" type="String" line="119"/>
            <javadoc line="119">
                The protocol to use (ftp, http, nntp, ... etc.) .                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="host" type="String" line="124"/>
            <javadoc line="124">
                The host name to connect to.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="port" type="int" line="129"/>
            <javadoc line="129">
                The protocol port to connect to.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="file" type="String" line="134"/>
            <javadoc line="134">
                The specified file name on that host. &lt;code&gt;file&lt;/code&gt; is
                  defined as &lt;code&gt;path[?query]&lt;/code&gt;                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="query" type="String" line="140"/>
            <javadoc line="140">
                The query part of this URL.                
            </javadoc>
            <declaration name="authority" type="String" line="144"/>
            <javadoc line="144">
                The authority part of this URL.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="path" type="String" line="149"/>
            <javadoc line="149">
                The path part of this URL.                
            </javadoc>
            <declaration name="userInfo" type="String" line="153"/>
            <javadoc line="153">
                The userinfo part of this URL.                
            </javadoc>
            <declaration name="ref" type="String" line="157"/>
            <javadoc line="157">
                # reference.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="hostAddress" type="InetAddress" line="162"/>
            <javadoc line="162">
                The host&apos;s IP address, used in equals and hashCode.
                  Computed on demand. An uninitialized or unknown hostAddress is null.                
            </javadoc>
            <declaration name="handler" type="URLStreamHandler" line="167"/>
            <javadoc line="167">
                The URLStreamHandler for this URL.                
            </javadoc>
            <declaration name="hashCode" type="int" line="171"/>
            <javadoc line="172">
                Creates a &lt;code&gt;URL&lt;/code&gt; object from the specified
                  &lt;code&gt;protocol&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;
                  number, and &lt;code&gt;file&lt;/code&gt;.&lt;p&gt;
                  &lt;code&gt;host&lt;/code&gt; can be expressed as a host name or a literal
                  IP address. If IPv6 literal address is used, it should be
                  enclosed in square brackets (&lt;tt&gt;&apos;[&apos;&lt;/tt&gt; and &lt;tt&gt;&apos;]&apos;&lt;/tt&gt;), as
                  specified by &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2732.txt&quot;&gt;RFC&amp;nbsp;2732&lt;/a&gt;;
                  However, the literal IPv6 address format defined in &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2373: IP
                  Version 6 Addressing Architecture&lt;/i&gt;&lt;/a&gt; is also accepted.&lt;p&gt;
                  Specifying a &lt;code&gt;port&lt;/code&gt; number of &lt;code&gt;-1&lt;/code&gt;
                  indicates that the URL should use the default port for the
                  protocol.&lt;p&gt;
                  If this is the first URL object being created with the specified
                  protocol, a &lt;i&gt;stream protocol handler&lt;/i&gt; object, an instance of
                  class &lt;code&gt;URLStreamHandler&lt;/code&gt;, is created for that protocol:
                  &lt;ol&gt;
                  &lt;li&gt;If the application has previously set up an instance of
                  &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; as the stream handler factory,
                  then the &lt;code&gt;createURLStreamHandler&lt;/code&gt; method of that instance
                  is called with the protocol string as an argument to create the
                  stream protocol handler.
                  &lt;li&gt;If no &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; has yet been set up,
                  or if the factory&apos;s &lt;code&gt;createURLStreamHandler&lt;/code&gt; method
                  returns &lt;code&gt;null&lt;/code&gt;, then the constructor finds the
                  value of the system property:
                  &lt;blockquote&gt;&lt;pre&gt;
                  java.protocol.handler.pkgs
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If the value of that system property is not &lt;code&gt;null&lt;/code&gt;,
                  it is interpreted as a list of packages separated by a vertical
                  slash character &apos;&lt;code&gt;|&lt;/code&gt;&apos;. The constructor tries to load
                  the class named:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &amp;lt;&lt;i&gt;package&lt;/i&gt;&amp;gt;.&amp;lt;&lt;i&gt;protocol&lt;/i&gt;&amp;gt;.Handler
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  where &amp;lt;&lt;i&gt;package&lt;/i&gt;&amp;gt; is replaced by the name of the package
                  and &amp;lt;&lt;i&gt;protocol&lt;/i&gt;&amp;gt; is replaced by the name of the protocol.
                  If this class does not exist, or if the class exists but it is not
                  a subclass of &lt;code&gt;URLStreamHandler&lt;/code&gt;, then the next package
                  in the list is tried.
                  &lt;li&gt;If the previous step fails to find a protocol handler, then the
                  constructor tries to load from a system default package.
                  &lt;blockquote&gt;&lt;pre&gt;
                  &amp;lt;&lt;i&gt;system default package&lt;/i&gt;&amp;gt;.&amp;lt;&lt;i&gt;protocol&lt;/i&gt;&amp;gt;.Handler
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If this class does not exist, or if the class exists but it is not a
                  subclass of &lt;code&gt;URLStreamHandler&lt;/code&gt;, then a
                  &lt;code&gt;MalformedURLException&lt;/code&gt; is thrown.
                  &lt;/ol&gt;
                  &lt;p&gt;Protocol handlers for the following protocols are guaranteed
                  to exist on the search path :-
                  &lt;blockquote&gt;&lt;pre&gt;
                  http, https, ftp, file, and jar
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  Protocol handlers for additional protocols may also be
                  available.
                  &lt;p&gt;No validation of the inputs is performed by this constructor.                
                <param>
                    protocol   the name of the protocol to use.                    
                </param>
                <param>
                    host       the name of the host.                    
                </param>
                <param>
                    port       the port number on the host.                    
                </param>
                <param>
                    file       the file on the host                    
                </param>
                <exception>
                    MalformedURLException  if an unknown protocol is specified.                    
                </exception>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)                    
                </see>
                <see>
                    java.net.URLStreamHandler                    
                </see>
                <see>
                    java.net.URLStreamHandlerFactory#createURLStreamHandler(java.lang.String)                    
                </see>
            </javadoc>
            <method name="URL" type="constructor" line="242">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="file" type="String"/>
                </params>
            </method>
            <javadoc line="245">
                Creates a URL from the specified &lt;code&gt;protocol&lt;/code&gt;
                  name, &lt;code&gt;host&lt;/code&gt; name, and &lt;code&gt;file&lt;/code&gt; name. The
                  default port for the specified protocol is used.
                  &lt;p&gt;
                  This method is equivalent to calling the four-argument
                  constructor with the arguments being &lt;code&gt;protocol&lt;/code&gt;,
                  &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, and &lt;code&gt;file&lt;/code&gt;.
                  No validation of the inputs is performed by this constructor.                
                <param>
                    protocol   the name of the protocol to use.                    
                </param>
                <param>
                    host       the name of the host.                    
                </param>
                <param>
                    file       the file on the host.                    
                </param>
                <exception>
                    MalformedURLException  if an unknown protocol is specified.                    
                </exception>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
            </javadoc>
            <method name="URL" type="constructor" line="260">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="file" type="String"/>
                </params>
            </method>
            <javadoc line="263">
                Creates a &lt;code&gt;URL&lt;/code&gt; object from the specified
                  &lt;code&gt;protocol&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;
                  number, &lt;code&gt;file&lt;/code&gt;, and &lt;code&gt;handler&lt;/code&gt;. Specifying
                  a &lt;code&gt;port&lt;/code&gt; number of &lt;code&gt;-1&lt;/code&gt; indicates that
                  the URL should use the default port for the protocol. Specifying
                  a &lt;code&gt;handler&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt; indicates that the URL
                  should use a default stream handler for the protocol, as outlined
                  for:
                  java.net.URL#URL(java.lang.String, java.lang.String, int,
                  java.lang.String)
                  &lt;p&gt;If the handler is not null and there is a security manager,
                  the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a
                  &lt;code&gt;NetPermission(&quot;specifyStreamHandler&quot;)&lt;/code&gt; permission.
                  This may result in a SecurityException.
                  No validation of the inputs is performed by this constructor.                
                <param>
                    protocol   the name of the protocol to use.                    
                </param>
                <param>
                    host       the name of the host.                    
                </param>
                <param>
                    port       the port number on the host.                    
                </param>
                <param>
                    file       the file on the host                    
                </param>
                <param>
                    handler    the stream handler for the URL.                    
                </param>
                <exception>
                    MalformedURLException  if an unknown protocol is specified.                    
                </exception>
                <exception>
                    SecurityExceptionif a security manager exists and its
                      <code>checkPermission</code> method doesn't allow
                      specifying a stream handler explicitly.                    
                </exception>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)                    
                </see>
                <see>
                    java.net.URLStreamHandler                    
                </see>
                <see>
                    java.net.URLStreamHandlerFactory#createURLStreamHandler(java.lang.String)                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.net.NetPermission                    
                </see>
            </javadoc>
            <method name="URL" type="constructor" line="296">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="file" type="String"/>
                    <param name="handler" type="URLStreamHandler"/>
                </params>
                <scope line="297">
                    <declaration name="sm" type="SecurityManager" line="298"/>
                    <scope line="299"/>
                </scope>
                <scope line="305">
                    <scope line="306"/>
                    <scope line="310"/>
                </scope>
                <declaration name="parts" type="Parts" line="316"/>
                <scope line="319"/>
                <scope line="322"/>
                <scope line="326"/>
            </method>
            <javadoc line="331">
                Creates a &lt;code&gt;URL&lt;/code&gt; object from the &lt;code&gt;String&lt;/code&gt;
                  representation.
                  &lt;p&gt;
                  This constructor is equivalent to a call to the two-argument
                  constructor with a &lt;code&gt;null&lt;/code&gt; first argument.                
                <param>
                    spec   the <code>String</code> to parse as a URL.                    
                </param>
                <exception>
                    MalformedURLException  if no protocol is specified, or an
                      unknown protocol is found, or <tt>spec</tt> is <tt>null</tt>.                    
                </exception>
                <see>
                    java.net.URL#URL(java.net.URL,java.lang.String)                    
                </see>
            </javadoc>
            <method name="URL" type="constructor" line="342">
                <params>
                    <param name="spec" type="String"/>
                </params>
            </method>
            <javadoc line="345">
                Creates a URL by parsing the given spec within a specified context.
                  The new URL is created from the given context URL and the spec
                  argument as described in
                  RFC2396 &amp;quot;Uniform Resource Identifiers : Generic  Syntax&amp;quot; :
                  &lt;blockquote&gt;&lt;pre&gt;
                  &amp;lt;scheme&amp;gt;://&amp;lt;authority&amp;gt;&amp;lt;path&amp;gt;?&amp;lt;query&amp;gt;#&amp;lt;fragment&amp;gt;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  The reference is parsed into the scheme, authority, path, query and
                  fragment parts. If the path component is empty and the scheme,
                  authority, and query components are undefined, then the new URL is a
                  reference to the current document. Otherwise, the fragment and query
                  parts present in the spec are used in the new URL.
                  &lt;p&gt;
                  If the scheme component is defined in the given spec and does not match
                  the scheme of the context, then the new URL is created as an absolute
                  URL based on the spec alone. Otherwise the scheme component is inherited
                  from the context URL.
                  &lt;p&gt;
                  If the authority component is present in the spec then the spec is
                  treated as absolute and the spec authority and path will replace the
                  context authority and path. If the authority component is absent in the
                  spec then the authority of the new URL will be inherited from the
                  context.
                  &lt;p&gt;
                  If the spec&apos;s path component begins with a slash character
                  &amp;quot;/&amp;quot; then the
                  path is treated as absolute and the spec path replaces the context path.
                  &lt;p&gt;
                  Otherwise, the path is treated as a relative path and is appended to the
                  context path, as described in RFC2396. Also, in this case,
                  the path is canonicalized through the removal of directory
                  changes made by occurences of &amp;quot;..&amp;quot; and &amp;quot;.&amp;quot;.
                  &lt;p&gt;
                  For a more detailed description of URL parsing, refer to RFC2396.                
                <param>
                    context   the context in which to parse the specification.                    
                </param>
                <param>
                    spec      the <code>String</code> to parse as a URL.                    
                </param>
                <exception>
                    MalformedURLException  if no protocol is specified, or an
                      unknown protocol is found, or <tt>spec</tt> is <tt>null</tt>.                    
                </exception>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
                <see>
                    java.net.URLStreamHandler                    
                </see>
                <see>
                    java.net.URLStreamHandler#parseURL(java.net.URL,java.lang.String,int,int)                    
                </see>
            </javadoc>
            <method name="URL" type="constructor" line="388">
                <params>
                    <param name="context" type="URL"/>
                    <param name="spec" type="String"/>
                </params>
            </method>
            <javadoc line="391">
                Creates a URL by parsing the given spec with the specified handler
                  within a specified context. If the handler is null, the parsing
                  occurs as with the two argument constructor.                
                <param>
                    context   the context in which to parse the specification.                    
                </param>
                <param>
                    spec      the <code>String</code> to parse as a URL.                    
                </param>
                <param>
                    handler   the stream handler for the URL.                    
                </param>
                <exception>
                    MalformedURLException  if no protocol is specified, or an
                      unknown protocol is found, or <tt>spec</tt> is <tt>null</tt>.                    
                </exception>
                <exception>
                    SecurityExceptionif a security manager exists and its
                      <code>checkPermission</code> method doesn't allow
                      specifying a stream handler.                    
                </exception>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
                <see>
                    java.net.URLStreamHandler                    
                </see>
                <see>
                    java.net.URLStreamHandler#parseURL(java.net.URL,java.lang.String,int,int)                    
                </see>
            </javadoc>
            <method name="URL" type="constructor" line="407">
                <params>
                    <param name="context" type="URL"/>
                    <param name="spec" type="String"/>
                    <param name="handler" type="URLStreamHandler"/>
                </params>
                <declaration name="original" type="String" line="408"/>
                <declaration name="i" type="int" line="409"/>
                <declaration name="start" type="int" line="410"/>
                <declaration name="newProtocol" type="String" line="411"/>
                <declaration name="aRef" type="boolean" line="412"/>
                <declaration name="isRelative" type="boolean" line="413"/>
                <scope line="414">
                    <declaration name="sm" type="SecurityManager" line="415"/>
                    <scope line="416"/>
                </scope>
                <scope line="420">
                    <scope line="422"/>
                    <scope line="425"/>
                    <scope line="428"/>
                    <scope line="431"/>
                    <scope line="434">
                        <scope line="435">
                            <declaration name="s" type="String" line="436"/>
                            <scope line="437"/>
                        </scope>
                    </scope>
                    <scope line="445">
                        <scope line="446"/>
                        <scope line="450"/>
                    </scope>
                    <scope line="461"/>
                    <scope line="464"/>
                    <scope line="469"/>
                    <scope line="473">
                        <scope line="475"/>
                    </scope>
                </scope>
                <scope line="481"/>
                <scope line="484">
                    <declaration name="exception" type="MalformedURLException" line="485"/>
                </scope>
            </method>
            <method name="isValidProtocol" type="boolean" line="490">
                <params>
                    <param name="protocol" type="String"/>
                </params>
                <declaration name="len" type="int" line="491"/>
                <declaration name="c" type="char" line="493"/>
                <scope line="495">
                    <scope line="497"/>
                </scope>
            </method>
            <method name="checkSpecifyHandler" type="void" line="503">
                <params>
                    <param name="sm" type="SecurityManager"/>
                </params>
            </method>
            <javadoc line="506">
                Sets the fields of the URL. This is not a public method so that
                  only URLStreamHandlers can modify URL fields. URLs are
                  otherwise constant.                
                <param>
                    protocol the name of the protocol to use                    
                </param>
                <param>
                    host the name of the host                    
                </param>
                <param>
                    port the port number on the host                    
                </param>
                <param>
                    file the file on the host                    
                </param>
                <param>
                    ref the internal reference in the URL                    
                </param>
            </javadoc>
            <method name="set" type="void" line="516">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="file" type="String"/>
                    <param name="ref" type="String"/>
                </params>
                <scope line="517">
                    <declaration name="q" type="int" line="526"/>
                    <scope line="527"/>
                </scope>
            </method>
            <javadoc line="534">
                Sets the specified 8 fields of the URL. This is not a public method so
                  that only URLStreamHandlers can modify URL fields. URLs are otherwise
                  constant.                
                <param>
                    protocol the name of the protocol to use                    
                </param>
                <param>
                    host the name of the host                    
                </param>
                <param>
                    port the port number on the host                    
                </param>
                <param>
                    authority the authority part for the url                    
                </param>
                <param>
                    userInfo the username and password                    
                </param>
                <param>
                    path the file on the host                    
                </param>
                <param>
                    ref the internal reference in the URL                    
                </param>
                <param>
                    query the query part of this URL                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="set" type="void" line="548">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="authority" type="String"/>
                    <param name="userInfo" type="String"/>
                    <param name="path" type="String"/>
                    <param name="query" type="String"/>
                    <param name="ref" type="String"/>
                </params>
                <scope line="549"/>
            </method>
            <javadoc line="563">
                Gets the query part of this &lt;code&gt;URL&lt;/code&gt;.                
                <return>
                    the query part of this <code>URL</code>,
                      or <CODE>null</CODE> if one does not exist                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getQuery" type="String" line="569"/>
            <javadoc line="572">
                Gets the path part of this &lt;code&gt;URL&lt;/code&gt;.                
                <return>
                    the path part of this <code>URL</code>, or an
                      empty string if one does not exist                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getPath" type="String" line="578"/>
            <javadoc line="581">
                Gets the userInfo part of this &lt;code&gt;URL&lt;/code&gt;.                
                <return>
                    the userInfo part of this <code>URL</code>, or
                      <CODE>null</CODE> if one does not exist                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getUserInfo" type="String" line="587"/>
            <javadoc line="590">
                Gets the authority part of this &lt;code&gt;URL&lt;/code&gt;.                
                <return>
                    the authority part of this <code>URL</code>                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAuthority" type="String" line="595"/>
            <javadoc line="598">
                Gets the port number of this &lt;code&gt;URL&lt;/code&gt;.                
                <return>
                    the port number, or -1 if the port is not set                    
                </return>
            </javadoc>
            <method name="getPort" type="int" line="602"/>
            <javadoc line="605">
                Gets the default port number of the protocol associated
                  with this &lt;code&gt;URL&lt;/code&gt;. If the URL scheme or the URLStreamHandler
                  for the URL do not define a default port number,
                  then -1 is returned.                
                <return>
                    the port number                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDefaultPort" type="int" line="613"/>
            <javadoc line="616">
                Gets the protocol name of this &lt;code&gt;URL&lt;/code&gt;.                
                <return>
                    the protocol of this <code>URL</code>.                    
                </return>
            </javadoc>
            <method name="getProtocol" type="String" line="620"/>
            <javadoc line="623">
                Gets the host name of this &lt;code&gt;URL&lt;/code&gt;, if applicable.
                  The format of the host conforms to RFC 2732, i.e. for a
                  literal IPv6 address, this method will return the IPv6 address
                  enclosed in square brackets (&lt;tt&gt;&apos;[&apos;&lt;/tt&gt; and &lt;tt&gt;&apos;]&apos;&lt;/tt&gt;).                
                <return>
                    the host name of this <code>URL</code>.                    
                </return>
            </javadoc>
            <method name="getHost" type="String" line="630"/>
            <javadoc line="633">
                Gets the file name of this &lt;code&gt;URL&lt;/code&gt;.
                  The returned file portion will be
                  the same as &lt;CODE&gt;getPath()&lt;/CODE&gt;, plus the concatenation of
                  the value of &lt;CODE&gt;getQuery()&lt;/CODE&gt;, if any. If there is
                  no query portion, this method and &lt;CODE&gt;getPath()&lt;/CODE&gt; will
                  return identical results.                
                <return>
                    the file name of this <code>URL</code>,
                      or an empty string if one does not exist                    
                </return>
            </javadoc>
            <method name="getFile" type="String" line="643"/>
            <javadoc line="646">
                Gets the anchor (also known as the &quot;reference&quot;) of this
                  &lt;code&gt;URL&lt;/code&gt;.                
                <return>
                    the anchor (also known as the "reference") of this
                      <code>URL</code>, or <CODE>null</CODE> if one does not exist                    
                </return>
            </javadoc>
            <method name="getRef" type="String" line="652"/>
            <javadoc line="655">
                Compares this URL for equality with another object.&lt;p&gt;
                  If the given object is not a URL then this method immediately returns
                  &lt;code&gt;false&lt;/code&gt;.&lt;p&gt;
                  Two URL objects are equal if they have the same protocol, reference
                  equivalent hosts, have the same port number on the host, and the same
                  file and fragment of the file.&lt;p&gt;
                  Two hosts are considered equivalent if both host names can be resolved
                  into the same IP addresses; else if either host name can&apos;t be
                  resolved, the host names must be equal without regard to case; or both
                  host names equal to null.&lt;p&gt;
                  Since hosts comparison requires name resolution, this operation is a
                  blocking operation. &lt;p&gt;
                  Note: The defined behavior for &lt;code&gt;equals&lt;/code&gt; is known to
                  be inconsistent with virtual hosting in HTTP.                
                <param>
                    obj   the URL to compare against.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="674">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="u2" type="URL" line="676"/>
            </method>
            <javadoc line="679">
                Creates an integer suitable for hash table indexing.&lt;p&gt;
                  The hash code is based upon all the URL components relevant for URL
                  comparison. As such, this operation is a blocking operation.&lt;p&gt;                
                <return>
                    a hash code for this <code>URL</code>.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="685"/>
            <javadoc line="690">
                Compares two URLs, excluding the fragment component.&lt;p&gt;
                  Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;URL&lt;/code&gt; and the
                  &lt;code&gt;other&lt;/code&gt; argument are equal without taking the
                  fragment component into consideration.                
                <param>
                    other   the <code>URL</code> to compare against.                    
                </param>
                <return>
                    <code>true</code> if they reference the same remote object;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="sameFile" type="boolean" line="699">
                <params>
                    <param name="other" type="URL"/>
                </params>
            </method>
            <javadoc line="702">
                Constructs a string representation of this &lt;code&gt;URL&lt;/code&gt;. The
                  string is created by calling the &lt;code&gt;toExternalForm&lt;/code&gt;
                  method of the stream protocol handler for this object.                
                <return>
                    a string representation of this object.                    
                </return>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
                <see>
                    java.net.URLStreamHandler#toExternalForm(java.net.URL)                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="710"/>
            <javadoc line="713">
                Constructs a string representation of this &lt;code&gt;URL&lt;/code&gt;. The
                  string is created by calling the &lt;code&gt;toExternalForm&lt;/code&gt;
                  method of the stream protocol handler for this object.                
                <return>
                    a string representation of this object.                    
                </return>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
                <see>
                    java.net.URLStreamHandler#toExternalForm(java.net.URL)                    
                </see>
            </javadoc>
            <method name="toExternalForm" type="String" line="721"/>
            <javadoc line="724">
                Returns a {@link java.net.URI} equivalent to this URL.
                  This method functions in the same way as &lt;code&gt;new URI (this.toString())&lt;/code&gt;.
                  &lt;p&gt;Note, any URL instance that complies with RFC 2396 can be converted
                  to a URI. However, some URLs that are not strictly in compliance
                  can not be converted to a URI.                
                <exception>
                    URISyntaxException if this URL is not formatted strictly according to
                      to RFC2396 and cannot be converted to a URI.                    
                </exception>
                <return>
                    a URI instance equivalent to this URL.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toURI" type="URI" line="735"/>
            <javadoc line="738">
                Returns a {@link java.net.URLConnection URLConnection} instance that
                  represents a connection to the remote object referred to by the{@code URL}.
                  &lt;P&gt;A new instance of {@linkplain java.net.URLConnection URLConnection} is
                  created every time when invoking the{@linkplain java.net.URLStreamHandler#openConnection(URL)URLStreamHandler.openConnection(URL)} method of the protocol handler for
                  this URL.&lt;/P&gt;
                  &lt;P&gt;It should be noted that a URLConnection instance does not establish
                  the actual network connection on creation. This will happen only when
                  calling {@linkplain java.net.URLConnection#connect() URLConnection.connect()}.&lt;/P&gt;
                  &lt;P&gt;If for the URL&apos;s protocol (such as HTTP or JAR), there
                  exists a public, specialized URLConnection subclass belonging
                  to one of the following packages or one of their subpackages:
                  java.lang, java.io, java.util, java.net, the connection
                  returned will be of that subclass. For example, for HTTP an
                  HttpURLConnection will be returned, and for JAR a
                  JarURLConnection will be returned.&lt;/P&gt;                
                <return>
                    a {@link java.net.URLConnection URLConnection} linking
                      to the URL.                    
                </return>
                <exception>
                    IOException  if an I/O exception occurs.                    
                </exception>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
            </javadoc>
            <method name="openConnection" type="URLConnection" line="759"/>
            <javadoc line="762">
                Same as {@link #openConnection()}, except that the connection will be
                  made through the specified proxy; Protocol handlers that do not
                  support proxing will ignore the proxy parameter and make a
                  normal connection.
                  Invoking this method preempts the system&apos;s default ProxySelector
                  settings.                
                <param>
                    proxy the Proxy through which this connection
                      will be made. If direct connection is desired,
                      Proxy.NO_PROXY should be specified.                    
                </param>
                <return>
                    a <code>URLConnection</code> to the URL.                    
                </return>
                <exception>
                    IOException  if an I/O exception occurs.                    
                </exception>
                <exception>
                    SecurityException if a security manager is present
                      and the caller doesn't have permission to connect
                      to the proxy.                    
                </exception>
                <exception>
                    IllegalArgumentException will be thrown if proxy is null,
                      or proxy has the wrong type                    
                </exception>
                <exception>
                    UnsupportedOperationException if the subclass that
                      implements the protocol handler doesn't support
                      this method.                    
                </exception>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
                <see>
                    java.net.URLConnection                    
                </see>
                <see>
                    java.net.URLStreamHandler#openConnection(java.net.URL,java.net.Proxy)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="openConnection" type="URLConnection" line="787">
                <params>
                    <param name="proxy" type="Proxy"/>
                </params>
                <scope line="788"/>
                <declaration name="p" type="Proxy" line="791"/>
                <declaration name="sm" type="SecurityManager" line="792"/>
                <scope line="793">
                    <declaration name="epoint" type="InetSocketAddress" line="794"/>
                </scope>
            </method>
            <javadoc line="800">
                Opens a connection to this &lt;code&gt;URL&lt;/code&gt; and returns an
                  &lt;code&gt;InputStream&lt;/code&gt; for reading from that connection. This
                  method is a shorthand for:
                  &lt;blockquote&gt;&lt;pre&gt;
                  openConnection().getInputStream()
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    an input stream for reading from the URL connection.                    
                </return>
                <exception>
                    IOException  if an I/O exception occurs.                    
                </exception>
                <see>
                    java.net.URL#openConnection()                    
                </see>
                <see>
                    java.net.URLConnection#getInputStream()                    
                </see>
            </javadoc>
            <method name="openStream" type="InputStream" line="812"/>
            <javadoc line="815">
                Gets the contents of this URL. This method is a shorthand for:
                  &lt;blockquote&gt;&lt;pre&gt;
                  openConnection().getContent()
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    the contents of this URL.                    
                </return>
                <exception>
                    IOException  if an I/O exception occurs.                    
                </exception>
                <see>
                    java.net.URLConnection#getContent()                    
                </see>
            </javadoc>
            <method name="getContent" type="Object" line="824"/>
            <javadoc line="827">
                Gets the contents of this URL. This method is a shorthand for:
                  &lt;blockquote&gt;&lt;pre&gt;
                  openConnection().getContent(Class[])
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    classes an array of Java types                    
                </param>
                <return>
                    the content object of this URL that is the first match of
                      the types specified in the classes array.
                      null if none of the requested types are supported.                    
                </return>
                <exception>
                    IOException  if an I/O exception occurs.                    
                </exception>
                <see>
                    java.net.URLConnection#getContent(Class[])                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getContent" type="Object" line="840">
                <params>
                    <param name="classes" type="Class[]"/>
                </params>
            </method>
            <declaration name="factory" type="URLStreamHandlerFactory" line="843"/>
            <javadoc line="843">
                The URLStreamHandler factory.                
            </javadoc>
            <javadoc line="847">
                Sets an application&apos;s &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt;.
                  This method can be called at most once in a given Java Virtual
                  Machine.
                  &lt;p&gt; The &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; instance is used to
                  construct a stream protocol handler from a protocol name.
                  &lt;p&gt; If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkSetFactory&lt;/code&gt; method
                  to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    fac   the desired factory.                    
                </param>
                <exception>
                    Error  if the application has already set a factory.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSetFactory</code> method doesn't allow
                      the operation.                    
                </exception>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
                <see>
                    java.net.URLStreamHandlerFactory                    
                </see>
                <see>
                    SecurityManager#checkSetFactory                    
                </see>
            </javadoc>
            <method name="setURLStreamHandlerFactory" type="void" line="866">
                <params>
                    <param name="fac" type="URLStreamHandlerFactory"/>
                </params>
                <scope line="867">
                    <scope line="868"/>
                    <declaration name="security" type="SecurityManager" line="871"/>
                    <scope line="872"/>
                </scope>
            </method>
            <declaration name="handlers" type="Hashtable" line="879"/>
            <javadoc line="879">
                A table of protocol handlers.                
            </javadoc>
            <declaration name="streamHandlerLock" type="Object" line="883"/>
            <javadoc line="884">
                Returns the Stream Handler.                
                <param>
                    protocol the protocol to use                    
                </param>
            </javadoc>
            <method name="getURLStreamHandler" type="URLStreamHandler" line="888">
                <params>
                    <param name="protocol" type="String"/>
                </params>
                <declaration name="handler" type="URLStreamHandler" line="889"/>
                <scope line="890">
                    <declaration name="checkedWithFactory" type="boolean" line="891"/>
                    <scope line="892"/>
                    <scope line="896">
                        <declaration name="packagePrefixList" type="String" line="897"/>
                        <scope line="899"/>
                        <declaration name="packagePrefixIter" type="StringTokenizer" line="903"/>
                        <scope line="904">
                            <declaration name="packagePrefix" type="String" line="905"/>
                            <scope line="906">
                                <declaration name="clsName" type="String" line="907"/>
                                <declaration name="cls" type="Class" line="908"/>
                                <scope line="909"/>
                                <scope line="912">
                                    <declaration name="cl" type="ClassLoader" line="913"/>
                                    <scope line="914"/>
                                </scope>
                                <scope line="918"/>
                            </scope>
                            <scope line="922"/>
                        </scope>
                    </scope>
                    <scope line="926">
                        <declaration name="handler2" type="URLStreamHandler" line="927"/>
                        <scope line="929"/>
                        <scope line="932"/>
                        <scope line="935"/>
                        <scope line="938"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="945">
                WriteObject is called to save the state of the URL to an
                  ObjectOutputStream. The handler is not saved since it is
                  specific to this system.                
                <serialData>
                    the default write object value. When read back in,
                      the reader must ensure that calling getURLStreamHandler with
                      the protocol variable returns a valid URLStreamHandler and
                      throw an IOException if it does not.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="954">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="957">
                readObject is called to restore the state of the URL from the
                  stream.  It reads the components of the URL and finds the local
                  stream handler.                
            </javadoc>
            <method name="readObject" type="void" line="962">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <scope line="964"/>
                <scope line="967">
                    <declaration name="at" type="int" line="970"/>
                    <scope line="971"/>
                </scope>
                <scope line="976">
                    <declaration name="ind" type="int" line="977"/>
                </scope>
                <scope line="982">
                    <declaration name="q" type="int" line="983"/>
                    <scope line="984"/>
                </scope>
            </method>
        </class>
        <class name="Parts" line="992">
            <declaration name="path" type="String" line="993"/>
            <method name="Parts" type="constructor" line="994">
                <params>
                    <param name="file" type="String"/>
                </params>
                <declaration name="ind" type="int" line="995"/>
                <declaration name="q" type="int" line="998"/>
                <scope line="999"/>
                <scope line="1003"/>
            </method>
            <method name="getPath" type="String" line="1007"/>
            <method name="getQuery" type="String" line="1010"/>
            <method name="getRef" type="String" line="1013"/>
        </class>
    </source>