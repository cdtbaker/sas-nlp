<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <interface name="SocketOptions">
            <javadoc line="2">
                Interface of methods to get/set socket options.  This interface is
                  implemented by: &lt;B&gt;SocketImpl&lt;/B&gt; and  &lt;B&gt;DatagramSocketImpl&lt;/B&gt;.
                  Subclasses of these should override the methods
                  of this interface in order to support their own options.
                  &lt;P&gt;
                  The methods and constants which specify options in this interface are
                  for implementation only.  If you&apos;re not subclassing SocketImpl or
                  DatagramSocketImpl, &lt;B&gt;you won&apos;t use these directly.&lt;/B&gt; There are
                  type-safe methods to get/set each of these options in Socket, ServerSocket,
                  DatagramSocket and MulticastSocket.
                  &lt;P&gt;                
                <author>
                    David Brown                    
                </author>
            </javadoc>
            <method name="setOption" type="void" line="17"/>
            <javadoc line="17">
                Enable/disable the option specified by &lt;I&gt;optID&lt;/I&gt;.  If the option
                  is to be enabled, and it takes an option-specific &quot;value&quot;,  this is
                  passed in &lt;I&gt;value&lt;/I&gt;.  The actual type of value is option-specific,
                  and it is an error to pass something that isn&apos;t of the expected type:
                  &lt;BR&gt;&lt;PRE&gt;
                  SocketImpl s;
                  ...
                  s.setOption(SO_LINGER, new Integer(10));
                  // OK - set SO_LINGER w/ timeout of 10 sec.
                  s.setOption(SO_LINGER, new Double(10));
                  // ERROR - expects java.lang.Integer
                  &lt;/PRE&gt;
                  If the requested option is binary, it can be set using this method by
                  a java.lang.Boolean:
                  &lt;BR&gt;&lt;PRE&gt;
                  s.setOption(TCP_NODELAY, new Boolean(true));
                  // OK - enables TCP_NODELAY, a binary option
                  &lt;/PRE&gt;
                  &lt;BR&gt;
                  Any option can be disabled using this method with a Boolean(false):
                  &lt;BR&gt;&lt;PRE&gt;
                  s.setOption(TCP_NODELAY, new Boolean(false));
                  // OK - disables TCP_NODELAY
                  s.setOption(SO_LINGER, new Boolean(false));
                  // OK - disables SO_LINGER
                  &lt;/PRE&gt;
                  &lt;BR&gt;
                  For an option that has a notion of on and off, and requires
                  a non-boolean parameter, setting its value to anything other than
                  &lt;I&gt;Boolean(false)&lt;/I&gt; implicitly enables it.
                  &lt;BR&gt;
                  Throws SocketException if the option is unrecognized,
                  the socket is closed, or some low-level error occurred
                  &lt;BR&gt;                
                <param>
                    optID identifies the option                    
                </param>
                <param>
                    value the parameter of the socket option                    
                </param>
                <throws>
                    SocketException if the option is unrecognized,
                      the socket is closed, or some low-level error occurred                    
                </throws>
                <see>
                    #getOption(int)                    
                </see>
            </javadoc>
            <method name="getOption" type="Object" line="59"/>
            <javadoc line="59">
                Fetch the value of an option.
                  Binary options will return java.lang.Boolean(true)
                  if enabled, java.lang.Boolean(false) if disabled, e.g.:
                  &lt;BR&gt;&lt;PRE&gt;
                  SocketImpl s;
                  ...
                  Boolean noDelay = (Boolean)(s.getOption(TCP_NODELAY));
                  if (noDelay.booleanValue()) {
                  // true if TCP_NODELAY is enabled...
                  ...
                  }
                  &lt;/PRE&gt;
                  &lt;P&gt;
                  For options that take a particular type as a parameter,
                  getOption(int) will return the parameter&apos;s value, else
                  it will return java.lang.Boolean(false):
                  &lt;PRE&gt;
                  Object o = s.getOption(SO_LINGER);
                  if (o instanceof Integer) {
                  System.out.print(&quot;Linger time is &quot; + ((Integer)o).intValue());
                  } else {
                  // the true type of o is java.lang.Boolean(false);
                  }
                  &lt;/PRE&gt;                
                <param>
                    optID an &lt;code&gt;int&lt;/code&gt; identifying the option to fetch                    
                </param>
                <return>
                    the value of the option                    
                </return>
                <throws>
                    SocketException if the socket is closed                    
                </throws>
                <throws>
                    SocketException if &lt;I&gt;optID&lt;/I&gt; is unknown along the
                      protocol stack (including the SocketImpl)                    
                </throws>
                <see>
                    #setOption(int,java.lang.Object)                    
                </see>
            </javadoc>
            <declaration name="TCP_NODELAY" type="int" line="92"/>
            <javadoc line="92">
                Disable Nagle&apos;s algorithm for this connection.  Written data
                  to the network is not buffered pending acknowledgement of
                  previously written data.
                  &lt;P&gt;
                  Valid for TCP only: SocketImpl.
                  &lt;P&gt;                
                <see>
                    Socket#setTcpNoDelay                    
                </see>
                <see>
                    Socket#getTcpNoDelay                    
                </see>
            </javadoc>
            <declaration name="SO_BINDADDR" type="int" line="103"/>
            <javadoc line="103">
                Fetch the local address binding of a socket (this option cannot
                  be &quot;set&quot; only &quot;gotten&quot;, since sockets are bound at creation time,
                  and so the locally bound address cannot be changed).  The default local
                  address of a socket is INADDR_ANY, meaning any local address on a
                  multi-homed host.  A multi-homed host can use this option to accept
                  connections to only one of its addresses (in the case of a
                  ServerSocket or DatagramSocket), or to specify its return address
                  to the peer (for a Socket or DatagramSocket).  The parameter of
                  this option is an InetAddress.
                  &lt;P&gt;
                  This option &lt;B&gt;must&lt;/B&gt; be specified in the constructor.
                  &lt;P&gt;
                  Valid for: SocketImpl, DatagramSocketImpl
                  &lt;P&gt;                
                <see>
                    Socket#getLocalAddress                    
                </see>
                <see>
                    DatagramSocket#getLocalAddress                    
                </see>
            </javadoc>
            <declaration name="SO_REUSEADDR" type="int" line="122"/>
            <javadoc line="122">
                Sets SO_REUSEADDR for a socket.  This is used only for MulticastSockets
                  in java, and it is set by default for MulticastSockets.
                  &lt;P&gt;
                  Valid for: DatagramSocketImpl                
            </javadoc>
            <declaration name="SO_BROADCAST" type="int" line="129"/>
            <javadoc line="129">
                Sets SO_BROADCAST for a socket. This option enables and disables
                  the ability of the process to send broadcast messages. It is supported
                  for only datagram sockets and only on networks that support
                  the concept of a broadcast message (e.g. Ethernet, token ring, etc.),
                  and it is set by default for DatagramSockets.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="IP_MULTICAST_IF" type="int" line="138"/>
            <javadoc line="138">
                Set which outgoing interface on which to send multicast packets.
                  Useful on hosts with multiple network interfaces, where applications
                  want to use other than the system default.  Takes/returns an InetAddress.
                  &lt;P&gt;
                  Valid for Multicast: DatagramSocketImpl
                  &lt;P&gt;                
                <see>
                    MulticastSocket#setInterface(InetAddress)                    
                </see>
                <see>
                    MulticastSocket#getInterface()                    
                </see>
            </javadoc>
            <declaration name="IP_MULTICAST_IF2" type="int" line="149"/>
            <javadoc line="149">
                Same as above. This option is introduced so that the behaviour
                  with IP_MULTICAST_IF will be kept the same as before, while
                  this new option can support setting outgoing interfaces with either
                  IPv4 and IPv6 addresses.
                  NOTE: make sure there is no conflict with this                
                <see>
                    MulticastSocket#setNetworkInterface(NetworkInterface)                    
                </see>
                <see>
                    MulticastSocket#getNetworkInterface()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="IP_MULTICAST_LOOP" type="int" line="160"/>
            <javadoc line="160">
                This option enables or disables local loopback of multicast datagrams.
                  This option is enabled by default for Multicast Sockets.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="IP_TOS" type="int" line="166"/>
            <javadoc line="166">
                This option sets the type-of-service or traffic class field
                  in the IP header for a TCP or UDP socket.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="SO_LINGER" type="int" line="172"/>
            <javadoc line="172">
                Specify a linger-on-close timeout.  This option disables/enables
                  immediate return from a &lt;B&gt;close()&lt;/B&gt; of a TCP Socket.  Enabling
                  this option with a non-zero Integer &lt;I&gt;timeout&lt;/I&gt; means that a
                  &lt;B&gt;close()&lt;/B&gt; will block pending the transmission and acknowledgement
                  of all data written to the peer, at which point the socket is closed
                  &lt;I&gt;gracefully&lt;/I&gt;.  Upon reaching the linger timeout, the socket is
                  closed &lt;I&gt;forcefully&lt;/I&gt;, with a TCP RST. Enabling the option with a
                  timeout of zero does a forceful close immediately. If the specified
                  timeout value exceeds 65,535 it will be reduced to 65,535.
                  &lt;P&gt;
                  Valid only for TCP: SocketImpl                
                <see>
                    Socket#setSoLinger                    
                </see>
                <see>
                    Socket#getSoLinger                    
                </see>
            </javadoc>
            <declaration name="SO_TIMEOUT" type="int" line="188"/>
            <javadoc line="188">
                Set a timeout on blocking Socket operations:
                  &lt;PRE&gt;
                  ServerSocket.accept();
                  SocketInputStream.read();
                  DatagramSocket.receive();
                  &lt;/PRE&gt;
                  &lt;P&gt; The option must be set prior to entering a blocking
                  operation to take effect.  If the timeout expires and the
                  operation would continue to block,
                  &lt;B&gt;java.io.InterruptedIOException&lt;/B&gt; is raised.  The Socket is
                  not closed in this case.
                  &lt;P&gt; Valid for all sockets: SocketImpl, DatagramSocketImpl                
                <see>
                    Socket#setSoTimeout                    
                </see>
                <see>
                    ServerSocket#setSoTimeout                    
                </see>
                <see>
                    DatagramSocket#setSoTimeout                    
                </see>
            </javadoc>
            <declaration name="SO_SNDBUF" type="int" line="206"/>
            <javadoc line="206">
                Set a hint the size of the underlying buffers used by the
                  platform for outgoing network I/O. When used in set, this is a
                  suggestion to the kernel from the application about the size of
                  buffers to use for the data to be sent over the socket. When
                  used in get, this must return the size of the buffer actually
                  used by the platform when sending out data on this socket.
                  Valid for all sockets: SocketImpl, DatagramSocketImpl                
                <see>
                    Socket#setSendBufferSize                    
                </see>
                <see>
                    Socket#getSendBufferSize                    
                </see>
                <see>
                    DatagramSocket#setSendBufferSize                    
                </see>
                <see>
                    DatagramSocket#getSendBufferSize                    
                </see>
            </javadoc>
            <declaration name="SO_RCVBUF" type="int" line="220"/>
            <javadoc line="220">
                Set a hint the size of the underlying buffers used by the
                  platform for incoming network I/O. When used in set, this is a
                  suggestion to the kernel from the application about the size of
                  buffers to use for the data to be received over the
                  socket. When used in get, this must return the size of the
                  buffer actually used by the platform when receiving in data on
                  this socket.
                  Valid for all sockets: SocketImpl, DatagramSocketImpl                
                <see>
                    Socket#setReceiveBufferSize                    
                </see>
                <see>
                    Socket#getReceiveBufferSize                    
                </see>
                <see>
                    DatagramSocket#setReceiveBufferSize                    
                </see>
                <see>
                    DatagramSocket#getReceiveBufferSize                    
                </see>
            </javadoc>
            <declaration name="SO_KEEPALIVE" type="int" line="235"/>
            <javadoc line="235">
                When the keepalive option is set for a TCP socket and no data
                  has been exchanged across the socket in either direction for
                  2 hours (NOTE: the actual value is implementation dependent),
                  TCP automatically sends a keepalive probe to the peer. This probe is a
                  TCP segment to which the peer must respond.
                  One of three responses is expected:
                  1. The peer responds with the expected ACK. The application is not
                  notified (since everything is OK). TCP will send another probe
                  following another 2 hours of inactivity.
                  2. The peer responds with an RST, which tells the local TCP that
                  the peer host has crashed and rebooted. The socket is closed.
                  3. There is no response from the peer. The socket is closed.
                  The purpose of this option is to detect if the peer host crashes.
                  Valid only for TCP socket: SocketImpl                
                <see>
                    Socket#setKeepAlive                    
                </see>
                <see>
                    Socket#getKeepAlive                    
                </see>
            </javadoc>
            <declaration name="SO_OOBINLINE" type="int" line="254"/>
            <javadoc line="254">
                When the OOBINLINE option is set, any TCP urgent data received on
                  the socket will be received through the socket input stream.
                  When the option is disabled (which is the default) urgent data
                  is silently discarded.                
                <see>
                    Socket#setOOBInline                    
                </see>
                <see>
                    Socket#getOOBInline                    
                </see>
            </javadoc>
        </interface>
    </source>