<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.io.IOException"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="CookieManager" line="35">
            <extends class="CookieHandler"/>
            <comment line="120">
                                
            </comment>
            <comment line="128">
                                
            </comment>
            <comment line="169">
                                
            </comment>
            <comment line="353">
                                
            </comment>
            <comment line="355">
                to determine whether or not accept this cookie                
            </comment>
            <comment line="391">
                path-matches algorithm, as defined by RFC 2965                
            </comment>
            <comment line="406">
                sort cookies with respect to their path: those with more specific Path attributes
                 precede those with less specific, as defined in RFC 2965 sec. 3.3.4                
            </comment>
            <javadoc line="35">
                CookieManager provides a concrete implementation of {@link CookieHandler},
                  which separates the storage of cookies from the policy surrounding accepting
                  and rejecting cookies. A CookieManager is initialized with a {@link CookieStore}which manages storage, and a {@link CookiePolicy} object, which makes
                  policy decisions on cookie acceptance/rejection.
                  &lt;p&gt; The HTTP cookie management in java.net package looks like:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  use
                  CookieHandler &lt;------- HttpURLConnection
                  ^
                  | impl
                  |         use
                  CookieManager -------&gt; CookiePolicy
                  |   use
                  |--------&gt; HttpCookie
                  |              ^
                  |              | use
                  |   use        |
                  |--------&gt; CookieStore
                  ^
                  | impl
                  |
                  Internal in-memory implementation
                  &lt;/pre&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  CookieHandler is at the core of cookie management. User can call
                  CookieHandler.setDefault to set a concrete CookieHanlder implementation
                  to be used.
                  &lt;/li&gt;
                  &lt;li&gt;
                  CookiePolicy.shouldAccept will be called by CookieManager.put to see whether
                  or not one cookie should be accepted and put into cookie store. User can use
                  any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and
                  ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation
                  and tell CookieManager to use it.
                  &lt;/li&gt;
                  &lt;li&gt;
                  CookieStore is the place where any accepted HTTP cookie is stored in.
                  If not specified when created, a CookieManager instance will use an internal
                  in-memory implementation. Or user can implements one and tell CookieManager
                  to use it.
                  &lt;/li&gt;
                  &lt;li&gt;
                  Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI)
                  are used by CookieManager. Others are for completeness and might be needed
                  by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieSotre.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;There&apos;re various ways user can hook up his own HTTP cookie management behavior, e.g.
                  &lt;blockquote&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Use CookieHandler.setDefault to set a brand new {@link CookieHandler} implementation
                  &lt;li&gt;Let CookieManager be the default {@link CookieHandler} implementation,
                  but implement user&apos;s own {@link CookieStore} and {@link CookiePolicy}and tell default CookieManager to use them:
                  &lt;blockquote&gt;&lt;pre&gt;
                  // this should be done at the beginning of an HTTP session
                  CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy()));
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;li&gt;Let CookieManager be the default {@link CookieHandler} implementation, but
                  use customized {@link CookiePolicy}:
                  &lt;blockquote&gt;&lt;pre&gt;
                  // this should be done at the beginning of an HTTP session
                  CookieHandler.setDefault(new CookieManager());
                  // this can be done at any point of an HTTP session
                  ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy());
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;/ul&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;The implementation conforms to &lt;a href=&quot;http://www.ietf.org/rfc/rfc2965.txt&quot;&gt;RFC 2965&lt;/a&gt;, section 3.3.                
                <see>
                    CookiePolicy                    
                </see>
                <author>
                    Edward Wang                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="policyCallback" type="CookiePolicy" line="121"/>
            <declaration name="cookieJar" type="CookieStore" line="124"/>
            <javadoc line="129">
                Create a new cookie manager.
                  &lt;p&gt;This constructor will create new cookie manager with default
                  cookie store and accept policy. The effect is same as
                  &lt;tt&gt;CookieManager(null, null)&lt;/tt&gt;.                
            </javadoc>
            <method name="CookieManager" type="constructor" line="136"/>
            <javadoc line="141">
                Create a new cookie manager with specified cookie store and cookie policy.                
                <param>
                    store     a <tt>CookieStore</tt> to be used by cookie manager.
                      if <tt>null</tt>, cookie manager will use a default one,
                      which is an in-memory CookieStore implmentation.                    
                </param>
                <param>
                    cookiePolicy      a <tt>CookiePolicy</tt> instance
                      to be used by cookie manager as policy callback.
                      if <tt>null</tt>, ACCEPT_ORIGINAL_SERVER will
                      be used.                    
                </param>
            </javadoc>
            <method name="CookieManager" type="constructor" line="154">
                <params>
                    <param name="store" type="CookieStore"/>
                    <param name="cookiePolicy" type="CookiePolicy"/>
                </params>
                <comment line="155">
                    use default cookie policy if not specify one                    
                </comment>
                <comment line="159">
                    if not specify CookieStore to use, use default one                    
                </comment>
                <scope line="160"/>
                <scope line="162"/>
            </method>
            <javadoc line="170">
                To set the cookie policy of this cookie manager.
                  &lt;p&gt; A instance of &lt;tt&gt;CookieManager&lt;/tt&gt; will have
                  cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always
                  can call this method to set another cookie policy.                
                <param>
                    cookiePolicy      the cookie policy. Can be <tt>null</tt>, which
                      has no effects on current cookie policy.                    
                </param>
            </javadoc>
            <method name="setCookiePolicy" type="void" line="180">
                <params>
                    <param name="cookiePolicy" type="CookiePolicy"/>
                </params>
            </method>
            <javadoc line="185">
                To retrieve current cookie store.                
                <return>
                    the cookie store currently used by cookie manager.                    
                </return>
            </javadoc>
            <method name="getCookieStore" type="CookieStore" line="190"/>
            <method name="get" type="Map<String,List<String>>" line="198">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="requestHeaders" type="Map<String,List<String>>"/>
                </params>
                <comment line="199">
                    pre-condition check                    
                </comment>
                <comment line="206">
                    if there&apos;s no default CookieStore, no way for us to get any cookie                    
                </comment>
                <comment line="217">
                    apply path-matches rule (RFC 2965 sec. 3.3.4)                    
                </comment>
                <comment line="218">
                    and check for the possible &quot;secure&quot; tag (i.e. don&apos;t send                    
                </comment>
                <comment line="219">
                    &apos;secure&apos; cookies over unsecure links)                    
                </comment>
                <comment line="222">
                    Enforce httponly attribute                    
                </comment>
                <comment line="229">
                    Let&apos;s check the authorize port list if it exists                    
                </comment>
                <comment line="245">
                    apply sort rule (RFC 2965 sec. 3.3.4)                    
                </comment>
                <scope line="200"/>
                <declaration name="cookieMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="204"/>
                <declaration name="secureLink" type="boolean" line="210"/>
                <declaration name="cookies" type="List&lt;HttpCookie&gt;" line="211"/>
                <declaration name="path" type="String" line="212"/>
                <scope line="213"/>
                <scope line="216">
                    <scope line="221">
                        <scope line="223">
                            <declaration name="s" type="String" line="224"/>
                            <scope line="225"/>
                        </scope>
                        <declaration name="ports" type="String" line="230"/>
                        <scope line="231">
                            <declaration name="port" type="int" line="232"/>
                            <scope line="233"/>
                            <scope line="236"/>
                        </scope>
                        <scope line="239"/>
                    </scope>
                </scope>
                <declaration name="cookieHeader" type="List&lt;String&gt;" line="246"/>
            </method>
            <method name="put" type="void" line="256">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="responseHeaders" type="Map<String,List<String>>"/>
                </params>
                <comment line="257">
                    pre-condition check                    
                </comment>
                <comment line="263">
                    if there&apos;s no default CookieStore, no need to remember any cookie                    
                </comment>
                <comment line="269">
                    RFC 2965 3.2.2, key must be &apos;Set-Cookie2&apos;                    
                </comment>
                <comment line="270">
                    we also accept &apos;Set-Cookie&apos; here for backward compatibility                    
                </comment>
                <comment line="286">
                    Bogus header, make an empty list and log the error                    
                </comment>
                <comment line="294">
                    If no path is specified, then by default                    
                </comment>
                <comment line="295">
                    the path is the directory of the page/doc                    
                </comment>
                <comment line="308">
                    As per RFC 2965, section 3.3.1:                    
                </comment>
                <comment line="309">
                    Domain  Defaults to the effective request-host.  (Note that because                    
                </comment>
                <comment line="310">
                    there is no dot at the beginning of effective request-host,                    
                </comment>
                <comment line="311">
                    the default Domain can only domain-match itself.)                    
                </comment>
                <comment line="322">
                    Empty port list means this should be restricted                    
                </comment>
                <comment line="323">
                    to the incoming URI port                    
                </comment>
                <comment line="329">
                    Only store cookies with a port list                    
                </comment>
                <comment line="330">
                    IF the URI port is in that list, as per                    
                </comment>
                <comment line="331">
                    RFC 2965 section 3.3.2                    
                </comment>
                <comment line="344">
                    invalid set-cookie header string                    
                </comment>
                <comment line="345">
                    no-op                    
                </comment>
                <scope line="258"/>
                <declaration name="logger" type="PlatformLogger" line="267"/>
                <scope line="268">
                    <scope line="276"/>
                    <scope line="280">
                        <scope line="281">
                            <declaration name="cookies" type="List&lt;HttpCookie&gt;" line="282"/>
                            <scope line="283"/>
                            <scope line="285">
                                <scope line="288"/>
                            </scope>
                            <scope line="292">
                                <scope line="293">
                                    <declaration name="path" type="String" line="296"/>
                                    <scope line="297">
                                        <declaration name="i" type="int" line="298"/>
                                        <scope line="299"/>
                                        <scope line="301"/>
                                    </scope>
                                </scope>
                                <scope line="312"/>
                                <declaration name="ports" type="String" line="315"/>
                                <scope line="316">
                                    <declaration name="port" type="int" line="317"/>
                                    <scope line="318"/>
                                    <scope line="321">
                                        <scope line="325"/>
                                    </scope>
                                    <scope line="328">
                                        <scope line="333"/>
                                    </scope>
                                </scope>
                                <scope line="337">
                                    <scope line="338"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="343"/>
                    </scope>
                </scope>
            </method>
            <method name="shouldAcceptInternal" type="boolean" line="355">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="cookie" type="HttpCookie"/>
                </params>
                <comment line="358">
                    pretect against malicious callback                    
                </comment>
                <scope line="356"/>
                <scope line="358"/>
            </method>
            <method name="isInPortList" type="boolean" line="364">
                <params>
                    <param name="lst" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="i" type="int" line="365"/>
                <declaration name="val" type="int" line="366"/>
                <scope line="367">
                    <scope line="368">
                        <scope line="370"/>
                    </scope>
                    <scope line="373"/>
                </scope>
                <scope line="378">
                    <scope line="379">
                        <scope line="381"/>
                    </scope>
                    <scope line="384"/>
                </scope>
            </method>
            <method name="pathMatches" type="boolean" line="393">
                <params>
                    <param name="path" type="String"/>
                    <param name="pathToMatchWith" type="String"/>
                </params>
            </method>
            <method name="sortByPath" type="List<String>" line="409">
                <params>
                    <param name="cookies" type="List<HttpCookie>"/>
                </params>
                <comment line="414">
                    Netscape cookie spec and RFC 2965 have different format of Cookie                    
                </comment>
                <comment line="415">
                    header; RFC 2965 requires a leading $Version=&quot;1&quot; string while Netscape                    
                </comment>
                <comment line="416">
                    does not.                    
                </comment>
                <comment line="417">
                    The workaround here is to add a $Version=&quot;1&quot; string in advance                    
                </comment>
                <declaration name="cookieHeader" type="List&lt;String&gt;" line="412"/>
                <scope line="413">
                    <scope line="418"/>
                </scope>
            </method>
            <class name="CookiePathComparator" line="428">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="HttpCookie"/>
                    </type_params>
                </implements>
                <method name="compare" type="int" line="429">
                    <params>
                        <param name="c1" type="HttpCookie"/>
                        <param name="c2" type="HttpCookie"/>
                    </params>
                    <comment line="434">
                        path rule only applies to the cookies with same name                        
                    </comment>
                    <comment line="437">
                        those with more specific Path attributes precede those with less specific                        
                    </comment>
                </method>
            </class>
        </class>
    </source>