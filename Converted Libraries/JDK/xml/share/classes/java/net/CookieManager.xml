<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.io.IOException"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="CookieManager" line="8">
            <extends class="CookieHandler"/>
            <javadoc line="8">
                CookieManager provides a concrete implementation of {@link CookieHandler},
                  which separates the storage of cookies from the policy surrounding accepting
                  and rejecting cookies. A CookieManager is initialized with a {@link CookieStore}which manages storage, and a {@link CookiePolicy} object, which makes
                  policy decisions on cookie acceptance/rejection.
                  &lt;p&gt; The HTTP cookie management in java.net package looks like:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  use
                  CookieHandler &lt;------- HttpURLConnection
                  ^
                  | impl
                  |         use
                  CookieManager -------&gt; CookiePolicy
                  |   use
                  |--------&gt; HttpCookie
                  |              ^
                  |              | use
                  |   use        |
                  |--------&gt; CookieStore
                  ^
                  | impl
                  |
                  Internal in-memory implementation
                  &lt;/pre&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  CookieHandler is at the core of cookie management. User can call
                  CookieHandler.setDefault to set a concrete CookieHanlder implementation
                  to be used.
                  &lt;/li&gt;
                  &lt;li&gt;
                  CookiePolicy.shouldAccept will be called by CookieManager.put to see whether
                  or not one cookie should be accepted and put into cookie store. User can use
                  any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and
                  ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation
                  and tell CookieManager to use it.
                  &lt;/li&gt;
                  &lt;li&gt;
                  CookieStore is the place where any accepted HTTP cookie is stored in.
                  If not specified when created, a CookieManager instance will use an internal
                  in-memory implementation. Or user can implements one and tell CookieManager
                  to use it.
                  &lt;/li&gt;
                  &lt;li&gt;
                  Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI)
                  are used by CookieManager. Others are for completeness and might be needed
                  by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieSotre.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;There&apos;re various ways user can hook up his own HTTP cookie management behavior, e.g.
                  &lt;blockquote&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Use CookieHandler.setDefault to set a brand new {@link CookieHandler} implementation
                  &lt;li&gt;Let CookieManager be the default {@link CookieHandler} implementation,
                  but implement user&apos;s own {@link CookieStore} and {@link CookiePolicy}and tell default CookieManager to use them:
                  &lt;blockquote&gt;&lt;pre&gt;
                  // this should be done at the beginning of an HTTP session
                  CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy()));
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;li&gt;Let CookieManager be the default {@link CookieHandler} implementation, but
                  use customized {@link CookiePolicy}:
                  &lt;blockquote&gt;&lt;pre&gt;
                  // this should be done at the beginning of an HTTP session
                  CookieHandler.setDefault(new CookieManager());
                  // this can be done at any point of an HTTP session
                  ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy());
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;/ul&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;The implementation conforms to &lt;a href=&quot;http://www.ietf.org/rfc/rfc2965.txt&quot;&gt;RFC 2965&lt;/a&gt;, section 3.3.                
                <see>
                    CookiePolicy                    
                </see>
                <author>
                    Edward Wang                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="policyCallback" type="CookiePolicy" line="85"/>
            <declaration name="cookieJar" type="CookieStore" line="86"/>
            <javadoc line="87">
                Create a new cookie manager.
                  &lt;p&gt;This constructor will create new cookie manager with default
                  cookie store and accept policy. The effect is same as
                  &lt;tt&gt;CookieManager(null, null)&lt;/tt&gt;.                
            </javadoc>
            <method name="CookieManager" type="constructor" line="93"/>
            <javadoc line="96">
                Create a new cookie manager with specified cookie store and cookie policy.                
                <param>
                    store     a <tt>CookieStore</tt> to be used by cookie manager.
                      if <tt>null</tt>, cookie manager will use a default one,
                      which is an in-memory CookieStore implmentation.                    
                </param>
                <param>
                    cookiePolicy      a <tt>CookiePolicy</tt> instance
                      to be used by cookie manager as policy callback.
                      if <tt>null</tt>, ACCEPT_ORIGINAL_SERVER will
                      be used.                    
                </param>
            </javadoc>
            <method name="CookieManager" type="constructor" line="106">
                <params>
                    <param name="store" type="CookieStore"/>
                    <param name="cookiePolicy" type="CookiePolicy"/>
                </params>
                <scope line="108"/>
                <scope line="111"/>
            </method>
            <javadoc line="115">
                To set the cookie policy of this cookie manager.
                  &lt;p&gt; A instance of &lt;tt&gt;CookieManager&lt;/tt&gt; will have
                  cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always
                  can call this method to set another cookie policy.                
                <param>
                    cookiePolicy      the cookie policy. Can be <tt>null</tt>, which
                      has no effects on current cookie policy.                    
                </param>
            </javadoc>
            <method name="setCookiePolicy" type="void" line="123">
                <params>
                    <param name="cookiePolicy" type="CookiePolicy"/>
                </params>
            </method>
            <javadoc line="126">
                To retrieve current cookie store.                
                <return>
                    the cookie store currently used by cookie manager.                    
                </return>
            </javadoc>
            <method name="getCookieStore" type="CookieStore" line="130"/>
            <method name="get" type="Map<String,List<String>>" line="133">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="requestHeaders" type="Map<String,List<String>>"/>
                </params>
                <scope line="134"/>
                <declaration name="cookieMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="137"/>
                <declaration name="secureLink" type="boolean" line="139"/>
                <declaration name="cookies" type="List&lt;HttpCookie&gt;" line="140"/>
                <declaration name="path" type="String" line="141"/>
                <scope line="142"/>
                <scope line="145">
                    <scope line="146">
                        <scope line="147">
                            <declaration name="s" type="String" line="148"/>
                            <scope line="149"/>
                        </scope>
                        <declaration name="ports" type="String" line="153"/>
                        <scope line="154">
                            <declaration name="port" type="int" line="155"/>
                            <scope line="156"/>
                            <scope line="159"/>
                        </scope>
                        <scope line="163"/>
                    </scope>
                </scope>
                <declaration name="cookieHeader" type="List&lt;String&gt;" line="168"/>
            </method>
            <method name="put" type="void" line="172">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="responseHeaders" type="Map<String,List<String>>"/>
                </params>
                <scope line="173"/>
                <declaration name="logger" type="PlatformLogger" line="177"/>
                <scope line="178">
                    <scope line="179"/>
                    <scope line="182">
                        <scope line="183">
                            <declaration name="cookies" type="List&lt;HttpCookie&gt;" line="184"/>
                            <scope line="185"/>
                            <scope line="188">
                                <scope line="190"/>
                            </scope>
                            <scope line="194">
                                <scope line="195">
                                    <declaration name="path" type="String" line="196"/>
                                    <scope line="197">
                                        <declaration name="i" type="int" line="198"/>
                                        <scope line="199"/>
                                        <scope line="202"/>
                                    </scope>
                                </scope>
                                <scope line="208"/>
                                <declaration name="ports" type="String" line="211"/>
                                <scope line="212">
                                    <declaration name="port" type="int" line="213"/>
                                    <scope line="214"/>
                                    <scope line="217">
                                        <scope line="219"/>
                                    </scope>
                                    <scope line="223">
                                        <scope line="224"/>
                                    </scope>
                                </scope>
                                <scope line="229">
                                    <scope line="230"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="236"/>
                    </scope>
                </scope>
            </method>
            <method name="shouldAcceptInternal" type="boolean" line="241">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="cookie" type="HttpCookie"/>
                </params>
                <scope line="242"/>
                <scope line="245"/>
            </method>
            <method name="isInPortList" type="boolean" line="249">
                <params>
                    <param name="lst" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="i" type="int" line="250"/>
                <declaration name="val" type="int" line="251"/>
                <scope line="252">
                    <scope line="253">
                        <scope line="255"/>
                    </scope>
                    <scope line="259"/>
                </scope>
                <scope line="264">
                    <scope line="265">
                        <scope line="267"/>
                    </scope>
                    <scope line="271"/>
                </scope>
            </method>
            <method name="pathMatches" type="boolean" line="276">
                <params>
                    <param name="path" type="String"/>
                    <param name="pathToMatchWith" type="String"/>
                </params>
            </method>
            <method name="sortByPath" type="List<String>" line="282">
                <params>
                    <param name="cookies" type="List<HttpCookie>"/>
                </params>
                <declaration name="cookieHeader" type="List&lt;String&gt;" line="284"/>
                <scope line="285">
                    <scope line="286"/>
                </scope>
            </method>
            <class name="CookiePathComparator" line="293">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="HttpCookie"/>
                    </type_params>
                </implements>
                <method name="compare" type="int" line="294">
                    <params>
                        <param name="c1" type="HttpCookie"/>
                        <param name="c2" type="HttpCookie"/>
                    </params>
                </method>
            </class>
        </class>
    </source>