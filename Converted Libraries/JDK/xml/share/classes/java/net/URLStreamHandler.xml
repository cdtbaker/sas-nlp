<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="sun.net.util.IPAddressUtil"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="URLStreamHandler" line="9">
            <javadoc line="9">
                The abstract class &lt;code&gt;URLStreamHandler&lt;/code&gt; is the common
                  superclass for all stream protocol handlers. A stream protocol
                  handler knows how to make a connection for a particular protocol
                  type, such as &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;, or
                  &lt;code&gt;gopher&lt;/code&gt;.
                  &lt;p&gt;
                  In most cases, an instance of a &lt;code&gt;URLStreamHandler&lt;/code&gt;
                  subclass is not created directly by an application. Rather, the
                  first time a protocol name is encountered when constructing a
                  &lt;code&gt;URL&lt;/code&gt;, the appropriate stream protocol handler is
                  automatically loaded.                
                <author>
                    James Gosling                    
                </author>
                <see>
                    java.net.URL#URL(java.lang.String,java.lang.String,int,java.lang.String)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="openConnection" type="URLConnection" line="26"/>
            <javadoc line="26">
                Opens a connection to the object referenced by the
                  &lt;code&gt;URL&lt;/code&gt; argument.
                  This method should be overridden by a subclass.
                  &lt;p&gt;If for the handler&apos;s protocol (such as HTTP or JAR), there
                  exists a public, specialized URLConnection subclass belonging
                  to one of the following packages or one of their subpackages:
                  java.lang, java.io, java.util, java.net, the connection
                  returned will be of that subclass. For example, for HTTP an
                  HttpURLConnection will be returned, and for JAR a
                  JarURLConnection will be returned.                
                <param>
                    u   the URL that this connects to.                    
                </param>
                <return>
                    a <code>URLConnection</code> object for the <code>URL</code>.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs while opening the
                      connection.                    
                </exception>
            </javadoc>
            <javadoc line="43">
                Same as openConnection(URL), except that the connection will be
                  made through the specified proxy; Protocol handlers that do not
                  support proxying will ignore the proxy parameter and make a
                  normal connection.
                  Calling this method preempts the system&apos;s default ProxySelector
                  settings.                
                <param>
                    u   the URL that this connects to.                    
                </param>
                <param>
                    p   the proxy through which the connection will be made.
                      If direct connection is desired, Proxy.NO_PROXY
                      should be specified.                    
                </param>
                <return>
                    a <code>URLConnection</code> object for the <code>URL</code>.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs while opening the
                      connection.                    
                </exception>
                <exception>
                    IllegalArgumentException if either u or p is null,
                      or p has the wrong type.                    
                </exception>
                <exception>
                    UnsupportedOperationException if the subclass that
                      implements the protocol doesn't support this method.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="openConnection" type="URLConnection" line="63">
                <params>
                    <param name="u" type="URL"/>
                    <param name="p" type="Proxy"/>
                </params>
            </method>
            <javadoc line="66">
                Parses the string representation of a &lt;code&gt;URL&lt;/code&gt; into a
                  &lt;code&gt;URL&lt;/code&gt; object.
                  &lt;p&gt;
                  If there is any inherited context, then it has already been
                  copied into the &lt;code&gt;URL&lt;/code&gt; argument.
                  &lt;p&gt;
                  The &lt;code&gt;parseURL&lt;/code&gt; method of &lt;code&gt;URLStreamHandler&lt;/code&gt;
                  parses the string representation as if it were an
                  &lt;code&gt;http&lt;/code&gt; specification. Most URL protocol families have a
                  similar parsing. A stream protocol handler for a protocol that has
                  a different syntax must override this routine.                
                <param>
                    u       the <code>URL</code> to receive the result of parsing
                      the spec.                    
                </param>
                <param>
                    spec    the <code>String</code> representing the URL that
                      must be parsed.                    
                </param>
                <param>
                    start   the character index at which to begin parsing. This is
                      just past the '<code>:</code>' (if there is one) that
                      specifies the determination of the protocol name.                    
                </param>
                <param>
                    limit   the character position to stop parsing at. This is the
                      end of the string or the position of the
                      "<code>#</code>" character, if present. All information
                      after the sharp sign indicates an anchor.                    
                </param>
            </javadoc>
            <method name="parseURL" type="void" line="90">
                <params>
                    <param name="u" type="URL"/>
                    <param name="spec" type="String"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="protocol" type="String" line="91"/>
                <declaration name="authority" type="String" line="92"/>
                <declaration name="userInfo" type="String" line="93"/>
                <declaration name="host" type="String" line="94"/>
                <declaration name="port" type="int" line="95"/>
                <declaration name="path" type="String" line="96"/>
                <declaration name="query" type="String" line="97"/>
                <declaration name="ref" type="String" line="98"/>
                <declaration name="isRelPath" type="boolean" line="99"/>
                <declaration name="queryOnly" type="boolean" line="100"/>
                <scope line="101">
                    <declaration name="queryStart" type="int" line="102"/>
                    <scope line="104"/>
                </scope>
                <declaration name="i" type="int" line="110"/>
                <declaration name="isUNCName" type="boolean" line="111"/>
                <scope line="112">
                    <scope line="115"/>
                    <declaration name="ind" type="int" line="120"/>
                    <scope line="121"/>
                    <scope line="125"/>
                    <scope line="128">
                        <scope line="129">
                            <scope line="130">
                                <declaration name="nhost" type="String" line="131"/>
                                <scope line="133"/>
                                <scope line="137">
                                    <scope line="138">
                                        <scope line="140"/>
                                    </scope>
                                    <scope line="144"/>
                                </scope>
                            </scope>
                            <scope line="149"/>
                        </scope>
                        <scope line="153">
                            <scope line="156">
                                <scope line="157"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="164"/>
                </scope>
                <scope line="171"/>
                <scope line="174">
                    <scope line="175"/>
                    <scope line="178">
                        <declaration name="ind" type="int" line="180"/>
                        <declaration name="seperator" type="String" line="181"/>
                    </scope>
                    <scope line="185">
                        <declaration name="seperator" type="String" line="186"/>
                    </scope>
                </scope>
                <scope line="190">
                    <declaration name="ind" type="int" line="191"/>
                </scope>
                <scope line="196">
                    <scope line="197"/>
                    <scope line="201">
                        <scope line="202"/>
                        <scope line="206"/>
                    </scope>
                    <scope line="210">
                        <scope line="212"/>
                        <scope line="215"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="224">
                Returns the default port for a URL parsed by this handler. This method
                  is meant to be overidden by handlers with default port numbers.                
                <return>
                    the default port for a <code>URL</code> parsed by this handler.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getDefaultPort" type="int" line="230"/>
            <javadoc line="233">
                Provides the default equals calculation. May be overidden by handlers
                  for other protocols that have different requirements for equals().
                  This method requires that none of its arguments is null. This is
                  guaranteed by the fact that it is only called by java.net.URL class.                
                <param>
                    u1 a URL object                    
                </param>
                <param>
                    u2 a URL object                    
                </param>
                <return>
                    <tt>true</tt> if the two urls are
                      considered equal, ie. they refer to the same
                      fragment in the same file.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="245">
                <params>
                    <param name="u1" type="URL"/>
                    <param name="u2" type="URL"/>
                </params>
                <declaration name="ref1" type="String" line="246"/>
                <declaration name="ref2" type="String" line="247"/>
            </method>
            <javadoc line="250">
                Provides the default hash calculation. May be overidden by handlers for
                  other protocols that have different requirements for hashCode
                  calculation.                
                <param>
                    u a URL object                    
                </param>
                <return>
                    an <tt>int</tt> suitable for hash table indexing                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="258">
                <params>
                    <param name="u" type="URL"/>
                </params>
                <declaration name="h" type="int" line="259"/>
                <declaration name="protocol" type="String" line="260"/>
                <declaration name="addr" type="InetAddress" line="262"/>
                <scope line="263"/>
                <scope line="266">
                    <declaration name="host" type="String" line="267"/>
                </scope>
                <declaration name="file" type="String" line="270"/>
                <declaration name="ref" type="String" line="274"/>
            </method>
            <javadoc line="278">
                Compare two urls to see whether they refer to the same file,
                  i.e., having the same protocol, host, port, and path.
                  This method requires that none of its arguments is null. This is
                  guaranteed by the fact that it is only called indirectly
                  by java.net.URL class.                
                <param>
                    u1 a URL object                    
                </param>
                <param>
                    u2 a URL object                    
                </param>
                <return>
                    true if u1 and u2 refer to the same file                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="sameFile" type="boolean" line="289">
                <params>
                    <param name="u1" type="URL"/>
                    <param name="u2" type="URL"/>
                </params>
                <declaration name="port1" type="int" line="292"/>
            </method>
            <javadoc line="299">
                Get the IP address of our host. An empty host field or a DNS failure
                  will result in a null return.                
                <param>
                    u a URL object                    
                </param>
                <return>
                    an <code>InetAddress</code> representing the host
                      IP address.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getHostAddress" type="InetAddress" line="307">
                <params>
                    <param name="u" type="URL"/>
                </params>
                <declaration name="host" type="String" line="309"/>
                <scope line="310"/>
                <scope line="313">
                    <scope line="314"/>
                    <scope line="317"/>
                    <scope line="320"/>
                </scope>
            </method>
            <javadoc line="326">
                Compares the host components of two URLs.                
                <param>
                    u1 the URL of the first host to compare                    
                </param>
                <param>
                    u2 the URL of the second host to compare                    
                </param>
                <return>
                    <tt>true</tt> if and only if they
                      are equal, <tt>false</tt> otherwise.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="hostsEqual" type="boolean" line="334">
                <params>
                    <param name="u1" type="URL"/>
                    <param name="u2" type="URL"/>
                </params>
                <declaration name="a1" type="InetAddress" line="335"/>
                <declaration name="a2" type="InetAddress" line="336"/>
                <scope line="337"/>
            </method>
            <javadoc line="343">
                Converts a &lt;code&gt;URL&lt;/code&gt; of a specific protocol to a
                  &lt;code&gt;String&lt;/code&gt;.                
                <param>
                    u   the URL.                    
                </param>
                <return>
                    a string representation of the <code>URL</code> argument.                    
                </return>
            </javadoc>
            <method name="toExternalForm" type="String" line="349">
                <params>
                    <param name="u" type="URL"/>
                </params>
                <declaration name="len" type="int" line="350"/>
                <scope line="352"/>
                <scope line="355"/>
                <declaration name="result" type="StringBuffer" line="359"/>
                <scope line="362"/>
                <scope line="366"/>
                <scope line="369"/>
                <scope line="373"/>
            </method>
            <javadoc line="379">
                Sets the fields of the &lt;code&gt;URL&lt;/code&gt; argument to the indicated values.
                  Only classes derived from URLStreamHandler are supposed to be able
                  to call the set method on a URL.                
                <param>
                    u         the URL to modify.                    
                </param>
                <param>
                    protocol  the protocol name.                    
                </param>
                <param>
                    host      the remote host value for the URL.                    
                </param>
                <param>
                    port      the port on the remote machine.                    
                </param>
                <param>
                    authority the authority part for the URL.                    
                </param>
                <param>
                    userInfo the userInfo part of the URL.                    
                </param>
                <param>
                    path      the path component of the URL.                    
                </param>
                <param>
                    query     the query part for the URL.                    
                </param>
                <param>
                    ref       the reference.                    
                </param>
                <exception>
                    SecurityException       if the protocol handler of the URL is
                      different from this one                    
                </exception>
                <see>
                    java.net.URL#set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setURL" type="void" line="397">
                <params>
                    <param name="u" type="URL"/>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="authority" type="String"/>
                    <param name="userInfo" type="String"/>
                    <param name="path" type="String"/>
                    <param name="query" type="String"/>
                    <param name="ref" type="String"/>
                </params>
                <scope line="398"/>
            </method>
            <javadoc line="403">
                Sets the fields of the &lt;code&gt;URL&lt;/code&gt; argument to the indicated values.
                  Only classes derived from URLStreamHandler are supposed to be able
                  to call the set method on a URL.                
                <param>
                    u         the URL to modify.                    
                </param>
                <param>
                    protocol  the protocol name. This value is ignored since 1.2.                    
                </param>
                <param>
                    host      the remote host value for the URL.                    
                </param>
                <param>
                    port      the port on the remote machine.                    
                </param>
                <param>
                    file      the file.                    
                </param>
                <param>
                    ref       the reference.                    
                </param>
                <exception>
                    SecurityException       if the protocol handler of the URL is
                      different from this one                    
                </exception>
                <deprecated>
                    Use setURL(URL, String, String, int, String, String, String,
                      String);                    
                </deprecated>
            </javadoc>
            <method name="setURL" type="void" line="418">
                <params>
                    <param name="u" type="URL"/>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="file" type="String"/>
                    <param name="ref" type="String"/>
                </params>
                <declaration name="authority" type="String" line="419"/>
                <declaration name="userInfo" type="String" line="420"/>
                <scope line="421">
                    <declaration name="at" type="int" line="423"/>
                    <scope line="424"/>
                </scope>
                <declaration name="path" type="String" line="429"/>
                <declaration name="query" type="String" line="430"/>
                <scope line="431">
                    <declaration name="q" type="int" line="432"/>
                    <scope line="433"/>
                </scope>
            </method>
        </class>
    </source>