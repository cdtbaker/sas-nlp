<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.net.InetAddress"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.net.util.IPAddressUtil"/>
        <import package="sun.net.RegisteredDomain"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.security.util.Debug"/>
        <class name="SocketPermission" line="48">
            <extends class="Permission"/>
            <comment line="176">
                various port constants                
            </comment>
            <comment line="181">
                the actions mask                
            </comment>
            <comment line="190">
                Left null as long as possible, then                
            </comment>
            <comment line="191">
                created and re-used in the getAction function.                
            </comment>
            <comment line="193">
                hostname part as it is passed                
            </comment>
            <comment line="196">
                the canonical name of the host                
            </comment>
            <comment line="197">
                in the case of &quot;*.foo.com&quot;, cname is &quot;.foo.com&quot;.                
            </comment>
            <comment line="201">
                all the IP addresses of the host                
            </comment>
            <comment line="204">
                true if the hostname is a wildcard (e.g. &quot;*.sun.com&quot;)                
            </comment>
            <comment line="207">
                true if we were initialized with a single numeric IP address                
            </comment>
            <comment line="210">
                true if this SocketPermission represents an invalid/unknown host                
            </comment>
            <comment line="211">
                used for implies when the delayed lookup has already failed                
            </comment>
            <comment line="214">
                port range on host                
            </comment>
            <comment line="219">
                true if this SocketPermission represents a hostname                
            </comment>
            <comment line="220">
                that failed our reverse mapping heuristic test                
            </comment>
            <comment line="224">
                true if the sun.net.trustNameService system property is set                
            </comment>
            <comment line="1169">
                public String toString()
                {
                StringBuffer s = new StringBuffer(super.toString() + &quot;\n&quot; +
                &quot;cname = &quot; + cname + &quot;\n&quot; +
                &quot;wildcard = &quot; + wildcard + &quot;\n&quot; +
                &quot;invalid = &quot; + invalid + &quot;\n&quot; +
                &quot;portrange = &quot; + portrange[0] + &quot;,&quot; + portrange[1] + &quot;\n&quot;);
                if (addresses != null) for (int i=0; i&lt;addresses.length; i++) {
                s.append( addresses[i].getHostAddress());
                s.append(&quot;\n&quot;);
                } else {
                s.append(&quot;(no addresses)\n&quot;);
                }
                
                return s.toString();
                }
                
                public static void main(String args[]) throws Exception {
                SocketPermission this_ = new SocketPermission(args[0], &quot;connect&quot;);
                SocketPermission that_ = new SocketPermission(args[1], &quot;connect&quot;);
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;this.implies(that) = &quot; + this_.implies(that_));
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;this = &quot;+this_);
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;that = &quot;+that_);
                System.out.println(&quot;-----\n&quot;);
                
                SocketPermissionCollection nps = new SocketPermissionCollection();
                nps.add(this_);
                nps.add(new SocketPermission(&quot;www-leland.stanford.edu&quot;,&quot;connect&quot;));
                nps.add(new SocketPermission(&quot;www-sun.com&quot;,&quot;connect&quot;));
                System.out.println(&quot;nps.implies(that) = &quot; + nps.implies(that_));
                System.out.println(&quot;-----\n&quot;);
                }                
            </comment>
            <comment line="1228">
                Not serialized; see serialization section at end of class                
            </comment>
            <comment line="1323">
                Need to maintain serialization interoperability with earlier releases,                
            </comment>
            <comment line="1324">
                which had the serializable field:                
            </comment>
            <comment line="1326">
                                
            </comment>
            <comment line="1327">
                The SocketPermissions for this set.                
            </comment>
            <comment line="1328">
                @serial                
            </comment>
            <comment line="1329">
                                
            </comment>
            <comment line="1330">
                private Vector permissions;                
            </comment>
            <comment line="1362">
                Reads in a Vector of SocketPermissions and saves them in the perms field.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="48">
                This class represents access to a network via sockets.
                  A SocketPermission consists of a
                  host specification and a set of &quot;actions&quot; specifying ways to
                  connect to that host. The host is specified as
                  &lt;pre&gt;
                  host = (hostname | IPv4address | iPv6reference) [:portrange]
                  portrange = portnumber | -portnumber | portnumber-[portnumber]
                  &lt;/pre&gt;
                  The host is expressed as a DNS name, as a numerical IP address,
                  or as &quot;localhost&quot; (for the local machine).
                  The wildcard &quot;&quot; may be included once in a DNS name host
                  specification. If it is included, it must be in the leftmost
                  position, as in &quot;.sun.com&quot;.
                  &lt;p&gt;
                  The format of the IPv6reference should follow that specified in &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2732.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2732: Format
                  for Literal IPv6 Addresses in URLs&lt;/i&gt;&lt;/a&gt;:
                  &lt;pre&gt;
                  ipv6reference = &quot;[&quot; IPv6address &quot;]&quot;
                  &lt;/pre&gt;
                  For example, you can construct a SocketPermission instance
                  as the following:
                  &lt;pre&gt;
                  String hostAddress = inetaddress.getHostAddress();
                  if (inetaddress instanceof Inet6Address) {
                  sp = new SocketPermission(&quot;[&quot; + hostAddress + &quot;]:&quot; + port, action);
                  } else {
                  sp = new SocketPermission(hostAddress + &quot;:&quot; + port, action);
                  }
                  &lt;/pre&gt;
                  or
                  &lt;pre&gt;
                  String host = url.getHost();
                  sp = new SocketPermission(host + &quot;:&quot; + port, action);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The &lt;A HREF=&quot;Inet6Address.html#lform&quot;&gt;full uncompressed form&lt;/A&gt; of
                  an IPv6 literal address is also valid.
                  &lt;p&gt;
                  The port or portrange is optional. A port specification of the
                  form &quot;N-&quot;, where &lt;i&gt;N&lt;/i&gt; is a port number, signifies all ports
                  numbered &lt;i&gt;N&lt;/i&gt; and above, while a specification of the
                  form &quot;-N&quot; indicates all ports numbered &lt;i&gt;N&lt;/i&gt; and below.
                  &lt;p&gt;
                  The possible ways to connect to the host are
                  &lt;pre&gt;
                  accept
                  connect
                  listen
                  resolve
                  &lt;/pre&gt;
                  The &quot;listen&quot; action is only meaningful when used with &quot;localhost&quot;.
                  The &quot;resolve&quot; action is implied when any of the other actions are present.
                  The action &quot;resolve&quot; refers to host/ip name service lookups.
                  &lt;P&gt;
                  The actions string is converted to lowercase before processing.
                  &lt;p&gt;As an example of the creation and meaning of SocketPermissions,
                  note that if the following permission:
                  &lt;pre&gt;
                  p1 = new SocketPermission(&quot;puffin.eng.sun.com:7777&quot;, &quot;connect,accept&quot;);
                  &lt;/pre&gt;
                  is granted to some code, it allows that code to connect to port 7777 on
                  &lt;code&gt;puffin.eng.sun.com&lt;/code&gt;, and to accept connections on that port.
                  &lt;p&gt;Similarly, if the following permission:
                  &lt;pre&gt;
                  p2 = new SocketPermission(&quot;localhost:1024-&quot;, &quot;accept,connect,listen&quot;);
                  &lt;/pre&gt;
                  is granted to some code, it allows that code to
                  accept connections on, connect to, or listen on any port between
                  1024 and 65535 on the local host.
                  &lt;p&gt;Note: Granting code permission to accept or make connections to remote
                  hosts may be dangerous because malevolent code can then more easily
                  transfer and share confidential data among parties who may not
                  otherwise have access to the data.                
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    SocketPermission                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="143"/>
            <declaration name="CONNECT" type="int" line="145"/>
            <javadoc line="145">
                Connect to host:port                
            </javadoc>
            <declaration name="LISTEN" type="int" line="150"/>
            <javadoc line="150">
                Listen on host:port                
            </javadoc>
            <declaration name="ACCEPT" type="int" line="155"/>
            <javadoc line="155">
                Accept a connection from host:port                
            </javadoc>
            <declaration name="RESOLVE" type="int" line="160"/>
            <javadoc line="160">
                Resolve DNS queries                
            </javadoc>
            <declaration name="NONE" type="int" line="165"/>
            <javadoc line="165">
                No actions                
            </javadoc>
            <declaration name="ALL" type="int" line="170"/>
            <javadoc line="170">
                All actions                
            </javadoc>
            <declaration name="PORT_MIN" type="int" line="176"/>
            <declaration name="PORT_MAX" type="int" line="177"/>
            <declaration name="PRIV_PORT_MAX" type="int" line="178"/>
            <declaration name="mask" type="int" line="181"/>
            <declaration name="actions" type="String" line="183"/>
            <javadoc line="183">
                the actions string.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="hostname" type="String" line="193"/>
            <declaration name="cname" type="String" line="198"/>
            <declaration name="addresses" type="InetAddress[]" line="201"/>
            <declaration name="wildcard" type="boolean" line="204"/>
            <declaration name="init_with_ip" type="boolean" line="207"/>
            <declaration name="invalid" type="boolean" line="211"/>
            <declaration name="portrange" type="int[]" line="214"/>
            <declaration name="defaultDeny" type="boolean" line="216"/>
            <declaration name="untrusted" type="boolean" line="220"/>
            <declaration name="trusted" type="boolean" line="221"/>
            <declaration name="trustNameService" type="boolean" line="224"/>
            <declaration name="debug" type="Debug" line="226"/>
            <declaration name="debugInit" type="boolean" line="227"/>
            <scope line="229">
                <declaration name="tmp" type="Boolean" line="230"/>
            </scope>
            <method name="getDebug" type="Debug" line="236">
                <scope line="237"/>
            </method>
            <javadoc line="244">
                Creates a new SocketPermission object with the specified actions.
                  The host is expressed as a DNS name, or as a numerical IP address.
                  Optionally, a port or a portrange may be supplied (separated
                  from the DNS name or IP address by a colon).
                  &lt;p&gt;
                  To specify the local machine, use &quot;localhost&quot; as the &lt;i&gt;host&lt;/i&gt;.
                  Also note: An empty &lt;i&gt;host&lt;/i&gt; String (&quot;&quot;) is equivalent to &quot;localhost&quot;.
                  &lt;p&gt;
                  The &lt;i&gt;actions&lt;/i&gt; parameter contains a comma-separated list of the
                  actions granted for the specified host (and port(s)). Possible actions are
                  &quot;connect&quot;, &quot;listen&quot;, &quot;accept&quot;, &quot;resolve&quot;, or
                  any combination of those. &quot;resolve&quot; is automatically added
                  when any of the other three are specified.
                  &lt;p&gt;
                  Examples of SocketPermission instantiation are the following:
                  &lt;pre&gt;
                  nr = new SocketPermission(&quot;www.catalog.com&quot;, &quot;connect&quot;);
                  nr = new SocketPermission(&quot;www.sun.com:80&quot;, &quot;connect&quot;);
                  nr = new SocketPermission(&quot;.sun.com&quot;, &quot;connect&quot;);
                  nr = new SocketPermission(&quot;.edu&quot;, &quot;resolve&quot;);
                  nr = new SocketPermission(&quot;204.160.241.0&quot;, &quot;connect&quot;);
                  nr = new SocketPermission(&quot;localhost:1024-65535&quot;, &quot;listen&quot;);
                  nr = new SocketPermission(&quot;204.160.241.0:1024-65535&quot;, &quot;connect&quot;);
                  &lt;/pre&gt;                
                <param>
                    host the hostname or IPaddress of the computer, optionally
                      including a colon followed by a port or port range.                    
                </param>
                <param>
                    action the action string.                    
                </param>
            </javadoc>
            <method name="SocketPermission" type="constructor" line="274">
                <params>
                    <param name="host" type="String"/>
                    <param name="action" type="String"/>
                </params>
                <comment line="276">
                    name initialized to getHost(host); NPE detected in getHost()                    
                </comment>
            </method>
            <method name="SocketPermission" type="constructor" line="281">
                <params>
                    <param name="host" type="String"/>
                    <param name="mask" type="int"/>
                </params>
                <comment line="283">
                    name initialized to getHost(host); NPE detected in getHost()                    
                </comment>
            </method>
            <method name="setDeny" type="void" line="287"/>
            <method name="getHost" type="String" line="292">
                <params>
                    <param name="host" type="String"/>
                </params>
                <comment line="296">
                    IPv6 literal address used in this context should follow
                     the format specified in RFC 2732;
                     if not, we try to solve the unambiguous case                    
                </comment>
                <comment line="303">
                    More than one &quot;:&quot;, meaning IPv6 address is not
                     in RFC 2732 format;
                     We will rectify user errors for all unambiguious cases                    
                </comment>
                <comment line="310">
                    IPv6 address followed by port                    
                </comment>
                <comment line="315">
                    IPv6 address only, not followed by port                    
                </comment>
                <comment line="318">
                    could be ambiguous                    
                </comment>
                <scope line="293"/>
                <scope line="295">
                    <declaration name="ind" type="int" line="300"/>
                    <scope line="301">
                        <scope line="302">
                            <declaration name="st" type="StringTokenizer" line="307"/>
                            <declaration name="tokens" type="int" line="308"/>
                            <scope line="309"/>
                            <scope line="314"/>
                            <scope line="317"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="parsePort" type="int[]" line="330">
                <params>
                    <param name="port" type="String"/>
                </params>
                <scope line="332"/>
                <declaration name="dash" type="int" line="336"/>
                <scope line="338">
                    <declaration name="p" type="int" line="339"/>
                </scope>
                <scope line="341">
                    <declaration name="low" type="String" line="342"/>
                    <declaration name="high" type="String" line="343"/>
                    <declaration name="l" type="int" line="344"/>
                    <scope line="346"/>
                    <scope line="348"/>
                    <scope line="352"/>
                    <scope line="354"/>
                </scope>
            </method>
            <javadoc line="364">
                Initialize the SocketPermission object. We don&apos;t do any DNS lookups
                  as this point, instead we hold off until the implies method is
                  called.                
            </javadoc>
            <method name="init" type="void" line="369">
                <params>
                    <param name="host" type="String"/>
                    <param name="mask" type="int"/>
                </params>
                <comment line="370">
                    Set the integer mask that represents the actions                    
                </comment>
                <comment line="375">
                    always OR in RESOLVE if we allow any of the others                    
                </comment>
                <comment line="378">
                    Parse the host name.  A name has up to three components, the                    
                </comment>
                <comment line="379">
                    hostname, a port number, or two numbers representing a port                    
                </comment>
                <comment line="380">
                    range.   &quot;www.sun.com:8080-9090&quot; is a valid host name.                    
                </comment>
                <comment line="382">
                    With IPv6 an address can be 2010:836B:4179::836B:4179                    
                </comment>
                <comment line="383">
                    An IPv6 address needs to be enclose in []                    
                </comment>
                <comment line="384">
                    For ex: [2010:836B:4179::836B:4179]:8080-9090                    
                </comment>
                <comment line="385">
                    Refer to RFC 2732 for more information.                    
                </comment>
                <comment line="424">
                    is this a domain wildcard specification                    
                </comment>
                <comment line="441">
                    see if we are being initialized with an IP address.                    
                </comment>
                <comment line="455">
                    this shouldn&apos;t happen                    
                </comment>
                <declaration name="rb" type="int" line="387"/>
                <declaration name="start" type="int" line="388"/>
                <declaration name="sep" type="int" line="389"/>
                <declaration name="hostport" type="String" line="390"/>
                <scope line="391">
                    <scope line="394"/>
                    <scope line="396"/>
                </scope>
                <scope line="401">
                    <scope line="405"/>
                </scope>
                <scope line="410">
                    <declaration name="port" type="String" line="411"/>
                    <scope line="412"/>
                    <scope line="414"/>
                </scope>
                <scope line="418"/>
                <scope line="425"/>
                <scope line="428">
                    <scope line="430"/>
                    <scope line="432"/>
                    <scope line="434"/>
                </scope>
                <scope line="439">
                    <scope line="440">
                        <declaration name="ch" type="char" line="442"/>
                        <scope line="443">
                            <declaration name="ip" type="byte" line="444"/>
                            <scope line="445"/>
                            <scope line="448">
                                <scope line="449"/>
                                <scope line="454"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="464">
                Convert an action string to an integer actions mask.                
                <param>
                    action the action string                    
                </param>
                <return>
                    the action mask                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="470">
                <params>
                    <param name="action" type="String"/>
                </params>
                <comment line="482">
                    Check against use of constants (used heavily within the JDK)                    
                </comment>
                <comment line="504">
                    skip whitespace                    
                </comment>
                <comment line="512">
                    check for the known strings                    
                </comment>
                <comment line="558">
                    parse error                    
                </comment>
                <comment line="563">
                    make sure we didn&apos;t just match the tail of a word                    
                </comment>
                <comment line="564">
                    like &quot;ackbarfaccept&quot;.  Also, skip to the comma.                    
                </comment>
                <comment line="570">
                                        
                </comment>
                <comment line="581">
                    point i at the location of the comma minus one (or -1).                    
                </comment>
                <scope line="472"/>
                <scope line="476"/>
                <declaration name="mask" type="int" line="480"/>
                <scope line="483"/>
                <scope line="485"/>
                <scope line="487"/>
                <scope line="489"/>
                <scope line="491"/>
                <declaration name="a" type="char[]" line="495"/>
                <declaration name="i" type="int" line="497"/>
                <scope line="501">
                    <declaration name="c" type="char" line="502"/>
                    <declaration name="matchlen" type="int" line="513"/>
                    <scope line="522"/>
                    <scope line="533"/>
                    <scope line="543"/>
                    <scope line="553"/>
                    <scope line="557"/>
                    <declaration name="seencomma" type="boolean" line="565"/>
                    <scope line="566"/>
                </scope>
            </method>
            <method name="isUntrusted" type="boolean" line="590">
                <comment line="600">
                    Last chance                    
                </comment>
                <scope line="593">
                    <scope line="595">
                        <scope line="596"/>
                        <scope line="599">
                            <scope line="601">
                                <declaration name="debug" type="Debug" line="603"/>
                                <scope line="604"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="612"/>
            </method>
            <javadoc line="619">
                attempt to get the fully qualified domain name                
            </javadoc>
            <method name="getCanonName" type="void" line="625">
                <comment line="628">
                    attempt to get the canonical name                    
                </comment>
                <comment line="631">
                    first get the IP addresses if we don&apos;t have them yet                    
                </comment>
                <comment line="632">
                    this is because we need the IP address to then get                    
                </comment>
                <comment line="633">
                    FQDN.                    
                </comment>
                <comment line="638">
                    we have to do this check, otherwise we might not                    
                </comment>
                <comment line="639">
                    get the fully qualified domain name                    
                </comment>
                <scope line="630">
                    <scope line="634"/>
                    <scope line="640"/>
                    <scope line="642"/>
                </scope>
                <scope line="646"/>
            </method>
            <declaration name="cdomain" type="String" line="652"/>
            <method name="match" type="boolean" line="654">
                <params>
                    <param name="cname" type="String"/>
                    <param name="hname" type="String"/>
                </params>
                <declaration name="a" type="String" line="655"/>
                <declaration name="b" type="String" line="656"/>
                <scope line="660"/>
                <scope line="663"/>
            </method>
            <method name="authorized" type="boolean" line="671">
                <params>
                    <param name="cname" type="String"/>
                    <param name="addr" type="byte[]"/>
                </params>
            </method>
            <method name="authorizedIPv4" type="boolean" line="680">
                <params>
                    <param name="cname" type="String"/>
                    <param name="addr" type="byte[]"/>
                </params>
                <comment line="689">
                    Following check seems unnecessary                    
                </comment>
                <comment line="690">
                    auth = InetAddress.getAllByName0(authHost, false)[0];                    
                </comment>
                <declaration name="authHost" type="String" line="681"/>
                <declaration name="auth" type="InetAddress" line="682"/>
                <scope line="684">
                    <scope line="693"/>
                    <declaration name="debug" type="Debug" line="696"/>
                    <scope line="697"/>
                </scope>
                <scope line="700">
                    <declaration name="debug" type="Debug" line="701"/>
                    <scope line="702"/>
                </scope>
            </method>
            <method name="authorizedIPv6" type="boolean" line="709">
                <params>
                    <param name="cname" type="String"/>
                    <param name="addr" type="byte[]"/>
                </params>
                <comment line="723">
                    auth = InetAddress.getAllByName0(authHost, false)[0];                    
                </comment>
                <declaration name="authHost" type="String" line="710"/>
                <declaration name="auth" type="InetAddress" line="711"/>
                <scope line="713">
                    <declaration name="sb" type="StringBuffer" line="714"/>
                    <scope line="716"/>
                    <declaration name="debug" type="Debug" line="728"/>
                    <scope line="729"/>
                </scope>
                <scope line="732">
                    <declaration name="debug" type="Debug" line="733"/>
                    <scope line="734"/>
                </scope>
            </method>
            <javadoc line="742">
                get IP addresses. Sets invalid to true if we can&apos;t get them.                
            </javadoc>
            <method name="getIP" type="void" line="748">
                <comment line="752">
                    now get all the IP addresses                    
                </comment>
                <comment line="755">
                    Literal IPv6 address                    
                </comment>
                <scope line="751">
                    <declaration name="host" type="String" line="753"/>
                    <scope line="754"/>
                    <scope line="757">
                        <declaration name="i" type="int" line="758"/>
                        <scope line="761"/>
                    </scope>
                </scope>
                <scope line="769"/>
                <scope line="772"/>
            </method>
            <javadoc line="778">
                Checks if this socket permission object &quot;implies&quot; the
                  specified permission.
                  &lt;P&gt;
                  More specifically, this method first ensures that all of the following
                  are true (and returns false if any of them are not):&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instanceof SocketPermission,&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s actions are a proper subset of this
                  object&apos;s actions, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s port range is included in this port range. Note:
                  port range is ignored when p only contains the action, &apos;resolve&apos;.&lt;p&gt;
                  &lt;/ul&gt;
                  Then &lt;code&gt;implies&lt;/code&gt; checks each of the following, in order,
                  and for each returns true if the stated condition is true:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; If this object was initialized with a single IP address and one of &lt;i&gt;p&lt;/i&gt;&apos;s
                  IP addresses is equal to this object&apos;s IP address.&lt;p&gt;
                  &lt;li&gt;If this object is a wildcard domain (such as .sun.com), and
                  &lt;i&gt;p&lt;/i&gt;&apos;s canonical name (the name without any preceding )
                  ends with this object&apos;s canonical host name. For example, .sun.com
                  implies .eng.sun.com..&lt;p&gt;
                  &lt;li&gt;If this object was not initialized with a single IP address, and one of this
                  object&apos;s IP addresses equals one of &lt;i&gt;p&lt;/i&gt;&apos;s IP addresses.&lt;p&gt;
                  &lt;li&gt;If this canonical name equals &lt;i&gt;p&lt;/i&gt;&apos;s canonical name.&lt;p&gt;
                  &lt;/ul&gt;
                  If none of the above are true, &lt;code&gt;implies&lt;/code&gt; returns false.                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="813">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="i" type="int" line="814"/>
                <declaration name="that" type="SocketPermission" line="822"/>
            </method>
            <javadoc line="828">
                Checks if the incoming Permission&apos;s action are a proper subset of
                  the this object&apos;s actions.
                  &lt;P&gt;
                  Check, in the following order:
                  &lt;ul&gt;
                  &lt;li&gt; Checks that &quot;p&quot; is an instanceof a SocketPermission
                  &lt;li&gt; Checks that &quot;p&quot;&apos;s actions are a proper subset of the
                  current object&apos;s actions.
                  &lt;li&gt; Checks that &quot;p&quot;&apos;s port range is included in this port range
                  &lt;li&gt; If this object was initialized with an IP address, checks that
                  one of &quot;p&quot;&apos;s IP addresses is equal to this object&apos;s IP address.
                  &lt;li&gt; If either object is a wildcard domain (i.e., &quot;.sun.com&quot;),
                  attempt to match based on the wildcard.
                  &lt;li&gt; If this object was not initialized with an IP address, attempt
                  to find a match based on the IP addresses in both objects.
                  &lt;li&gt; Attempt to match on the canonical hostnames of both objects.
                  &lt;/ul&gt;                
                <param>
                    p the incoming permission request                    
                </param>
                <return>
                    true if "permission" is a proper subset of the current object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="impliesIgnoreMask" type="boolean" line="852">
                <params>
                    <param name="that" type="SocketPermission"/>
                </params>
                <comment line="856">
                    check port range                    
                </comment>
                <comment line="863">
                    allow a &quot;*&quot; wildcard to always match anything                    
                </comment>
                <comment line="867">
                    return if either one of these NetPerm objects are invalid...                    
                </comment>
                <comment line="873">
                    we only check IP addresses                    
                </comment>
                <comment line="888">
                    since &quot;this&quot; was initialized with an IP address, we                    
                </comment>
                <comment line="889">
                    don&apos;t check any other cases                    
                </comment>
                <comment line="893">
                    check and see if we have any wildcards...                    
                </comment>
                <comment line="895">
                    if they are both wildcards, return true iff                    
                </comment>
                <comment line="896">
                    that&apos;s cname ends with this cname (i.e., *.sun.com                    
                </comment>
                <comment line="897">
                    implies *.eng.sun.com)                    
                </comment>
                <comment line="901">
                    a non-wildcard can&apos;t imply a wildcard                    
                </comment>
                <comment line="905">
                    this is a wildcard, lets see if that&apos;s cname ends with                    
                </comment>
                <comment line="906">
                    it...                    
                </comment>
                <comment line="913">
                    comapare IP addresses                    
                </comment>
                <comment line="930">
                    XXX: if all else fails, compare hostnames?                    
                </comment>
                <comment line="931">
                    Do we really want this?                    
                </comment>
                <comment line="947">
                    make sure the first thing that is done here is to return                    
                </comment>
                <comment line="948">
                    false. If not, uncomment the return false in the above catch.                    
                </comment>
                <declaration name="i" type="int" line="853"/>
                <scope line="855">
                    <scope line="858"/>
                </scope>
                <scope line="868"/>
                <scope line="872">
                    <scope line="873">
                        <scope line="877"/>
                        <scope line="879">
                            <scope line="880"/>
                            <scope line="883"/>
                        </scope>
                    </scope>
                    <scope line="894">
                        <scope line="907"/>
                    </scope>
                    <scope line="914"/>
                    <scope line="918"/>
                    <scope line="922">
                        <scope line="923">
                            <scope line="924"/>
                        </scope>
                        <scope line="932"/>
                        <scope line="936"/>
                    </scope>
                </scope>
                <scope line="943"/>
            </method>
            <method name="compareHostnames" type="boolean" line="953">
                <params>
                    <param name="that" type="SocketPermission"/>
                </params>
                <comment line="954">
                    we see if the original names/IPs passed in were equal.                    
                </comment>
                <declaration name="thisHost" type="String" line="956"/>
                <declaration name="thatHost" type="String" line="957"/>
            </method>
            <javadoc line="965">
                Checks two SocketPermission objects for equality.
                  &lt;P&gt;                
                <param>
                    obj the object to test for equality with this object.                    
                </param>
                <return>
                    true if <i>obj</i> is a SocketPermission, and has the
                      same hostname, port range, and actions as this
                      SocketPermission object. However, port range will be ignored
                      in the comparison if <i>obj</i> only contains the action, 'resolve'.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="975">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="984">
                    this is (overly?) complex!!!                    
                </comment>
                <comment line="986">
                    check the mask first                    
                </comment>
                <comment line="990">
                    now check the port range...                    
                </comment>
                <comment line="997">
                    short cut. This catches:                    
                </comment>
                <comment line="998">
                    &quot;crypto&quot; equal to &quot;crypto&quot;, or                    
                </comment>
                <comment line="999">
                    &quot;1.2.3.4&quot; equal to &quot;1.2.3.4.&quot;, or                    
                </comment>
                <comment line="1000">
                    &quot;*.edu&quot; equal to &quot;*.edu&quot;, but it                    
                </comment>
                <comment line="1001">
                    does not catch &quot;crypto&quot; equal to                    
                </comment>
                <comment line="1002">
                    &quot;crypto.eng.sun.com&quot;.                    
                </comment>
                <comment line="1008">
                    we now attempt to get the Canonical (FQDN) name and                    
                </comment>
                <comment line="1009">
                    compare that. If this fails, about all we can do is return                    
                </comment>
                <comment line="1010">
                    false.                    
                </comment>
                <declaration name="that" type="SocketPermission" line="982"/>
                <scope line="989">
                    <scope line="992"/>
                </scope>
                <scope line="1004"/>
                <scope line="1012"/>
                <scope line="1015"/>
                <scope line="1022"/>
            </method>
            <javadoc line="1029">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="1035">
                <comment line="1036">
                    If this SocketPermission was initialized with an IP address
                     or a wildcard, use getName().hashCode(), otherwise use
                     the hashCode() of the host name returned from
                     java.net.InetAddress.getHostName method.                    
                </comment>
                <scope line="1043"/>
                <scope line="1047"/>
                <scope line="1049"/>
            </method>
            <javadoc line="1059">
                Return the current action mask.                
                <return>
                    the actions mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="1065"/>
            <javadoc line="1069">
                Returns the &quot;canonical string representation&quot; of the actions in the
                  specified mask.
                  Always returns present actions in the following order:
                  connect, listen, accept, resolve.                
                <param>
                    mask a specific integer action mask to translate into a string                    
                </param>
                <return>
                    the canonical string representation of the actions                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="1079">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="1080"/>
                <declaration name="comma" type="boolean" line="1081"/>
                <scope line="1083"/>
                <scope line="1088"/>
                <scope line="1094"/>
                <scope line="1101"/>
            </method>
            <javadoc line="1110">
                Returns the canonical string representation of the actions.
                  Always returns present actions in the following order:
                  connect, listen, accept, resolve.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="1118"/>
            <javadoc line="1125">
                Returns a new PermissionCollection object for storing SocketPermission
                  objects.
                  &lt;p&gt;
                  SocketPermission objects must be stored in a manner that allows them
                  to be inserted into the collection in any order, but that also enables the
                  PermissionCollection &lt;code&gt;implies&lt;/code&gt;
                  method to be implemented in an efficient (and consistent) manner.                
                <return>
                    a new PermissionCollection object suitable for storing SocketPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="1137"/>
            <javadoc line="1141">
                WriteObject is called to save the state of the SocketPermission
                  to a stream. The actions are serialized, and the superclass
                  takes care of the name.                
            </javadoc>
            <method name="writeObject" type="void" line="1148">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="1149">
                    Write out the actions. The superclass takes care of the name                    
                </comment>
                <comment line="1150">
                    call getActions to make sure actions field is initialized                    
                </comment>
            </method>
            <javadoc line="1156">
                readObject is called to restore the state of the SocketPermission from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="1162">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="1163">
                    Read in the action, then initialize the rest                    
                </comment>
            </method>
        </class>
        <class name="SocketPermissionCollection" line="1207">
            <extends class="PermissionCollection"/>
            <comment line="176">
                various port constants                
            </comment>
            <comment line="181">
                the actions mask                
            </comment>
            <comment line="190">
                Left null as long as possible, then                
            </comment>
            <comment line="191">
                created and re-used in the getAction function.                
            </comment>
            <comment line="193">
                hostname part as it is passed                
            </comment>
            <comment line="196">
                the canonical name of the host                
            </comment>
            <comment line="197">
                in the case of &quot;*.foo.com&quot;, cname is &quot;.foo.com&quot;.                
            </comment>
            <comment line="201">
                all the IP addresses of the host                
            </comment>
            <comment line="204">
                true if the hostname is a wildcard (e.g. &quot;*.sun.com&quot;)                
            </comment>
            <comment line="207">
                true if we were initialized with a single numeric IP address                
            </comment>
            <comment line="210">
                true if this SocketPermission represents an invalid/unknown host                
            </comment>
            <comment line="211">
                used for implies when the delayed lookup has already failed                
            </comment>
            <comment line="214">
                port range on host                
            </comment>
            <comment line="219">
                true if this SocketPermission represents a hostname                
            </comment>
            <comment line="220">
                that failed our reverse mapping heuristic test                
            </comment>
            <comment line="224">
                true if the sun.net.trustNameService system property is set                
            </comment>
            <comment line="1169">
                public String toString()
                {
                StringBuffer s = new StringBuffer(super.toString() + &quot;\n&quot; +
                &quot;cname = &quot; + cname + &quot;\n&quot; +
                &quot;wildcard = &quot; + wildcard + &quot;\n&quot; +
                &quot;invalid = &quot; + invalid + &quot;\n&quot; +
                &quot;portrange = &quot; + portrange[0] + &quot;,&quot; + portrange[1] + &quot;\n&quot;);
                if (addresses != null) for (int i=0; i&lt;addresses.length; i++) {
                s.append( addresses[i].getHostAddress());
                s.append(&quot;\n&quot;);
                } else {
                s.append(&quot;(no addresses)\n&quot;);
                }
                
                return s.toString();
                }
                
                public static void main(String args[]) throws Exception {
                SocketPermission this_ = new SocketPermission(args[0], &quot;connect&quot;);
                SocketPermission that_ = new SocketPermission(args[1], &quot;connect&quot;);
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;this.implies(that) = &quot; + this_.implies(that_));
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;this = &quot;+this_);
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;that = &quot;+that_);
                System.out.println(&quot;-----\n&quot;);
                
                SocketPermissionCollection nps = new SocketPermissionCollection();
                nps.add(this_);
                nps.add(new SocketPermission(&quot;www-leland.stanford.edu&quot;,&quot;connect&quot;));
                nps.add(new SocketPermission(&quot;www-sun.com&quot;,&quot;connect&quot;));
                System.out.println(&quot;nps.implies(that) = &quot; + nps.implies(that_));
                System.out.println(&quot;-----\n&quot;);
                }                
            </comment>
            <comment line="1228">
                Not serialized; see serialization section at end of class                
            </comment>
            <comment line="1323">
                Need to maintain serialization interoperability with earlier releases,                
            </comment>
            <comment line="1324">
                which had the serializable field:                
            </comment>
            <comment line="1326">
                                
            </comment>
            <comment line="1327">
                The SocketPermissions for this set.                
            </comment>
            <comment line="1328">
                @serial                
            </comment>
            <comment line="1329">
                                
            </comment>
            <comment line="1330">
                private Vector permissions;                
            </comment>
            <comment line="1362">
                Reads in a Vector of SocketPermissions and saves them in the perms field.                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="1207">
                if (init&apos;d with IP, key is IP as string)
                  if wildcard, its the wild card
                  else its the cname?                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="perms" type="List" line="1228"/>
            <javadoc line="1230">
                Create an empty SocketPermissions object.                
            </javadoc>
            <method name="SocketPermissionCollection" type="constructor" line="1235"/>
            <javadoc line="1239">
                Adds a permission to the SocketPermissions. The key for the hash is
                  the name in the case of wildcards, or all the IP addresses.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    IllegalArgumentException - if the permission is not a
                      SocketPermission                    
                </exception>
                <exception>
                    SecurityException - if this SocketPermissionCollection object
                      has been marked readonly                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="1253">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="1261">
                    optimization to ensure perms most likely to be tested                    
                </comment>
                <comment line="1262">
                    show up early (4301064)                    
                </comment>
                <scope line="1263"/>
            </method>
            <javadoc line="1268">
                Check and see if this collection of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if "permission" is a proper subset of a permission in
                      the collection, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="1279">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="1291">
                    System.out.println(&quot;implies &quot;+np);                    
                </comment>
                <comment line="1294">
                    System.out.println(&quot;  trying &quot;+x);                    
                </comment>
                <declaration name="np" type="SocketPermission" line="1283"/>
                <declaration name="desired" type="int" line="1285"/>
                <declaration name="effective" type="int" line="1286"/>
                <declaration name="needed" type="int" line="1287"/>
                <scope line="1289">
                    <declaration name="len" type="int" line="1290"/>
                    <scope line="1292">
                        <declaration name="x" type="SocketPermission" line="1293"/>
                        <scope line="1295"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1306">
                Returns an enumeration of all the SocketPermission objects in the
                  container.                
                <return>
                    an enumeration of all the SocketPermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration" line="1313">
                <comment line="1314">
                    Convert Iterator into Enumeration                    
                </comment>
                <scope line="1315"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="1320"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="1331"/>
            <javadoc line="1331">
                @serialField permissions java.util.Vector
                  A list of the SocketPermissions for this set.                
            </javadoc>
            <javadoc line="1339">
                @serialData &quot;permissions&quot; field (a Vector containing the SocketPermissions).                
            </javadoc>
            <method name="writeObject" type="void" line="1346">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="1342">
                    Writes the contents of the perms field out as a Vector for
                     serialization compatibility with earlier releases.                    
                </comment>
                <comment line="1347">
                    Don&apos;t call out.defaultWriteObject()                    
                </comment>
                <comment line="1349">
                    Write out Vector                    
                </comment>
                <declaration name="permissions" type="Vector" line="1350"/>
                <scope line="1352"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="1356"/>
            </method>
            <method name="readObject" type="void" line="1365">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="1366">
                    Don&apos;t call in.defaultReadObject()                    
                </comment>
                <comment line="1368">
                    Read in serialized fields                    
                </comment>
                <comment line="1371">
                    Get the one we want                    
                </comment>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="1369"/>
                <declaration name="permissions" type="Vector" line="1372"/>
            </method>
        </class>
    </source>