<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InterruptedIOException"/>
        <import package="java.util.Enumeration"/>
        <import package="sun.net.ResourceManager"/>
        <class name="AbstractPlainDatagramSocketImpl" line="33">
            <extends class="DatagramSocketImpl"/>
            <comment line="46">
                                
            </comment>
            <comment line="53">
                                
            </comment>
            <comment line="303">
                get option&apos;s state - set or not                
            </comment>
            <javadoc line="33">
                Abstract datagram and multicast socket implementation base class.
                  Note: This is not a public class, so that applets cannot call
                  into the implementation directly and hence cannot bypass the
                  security checks present in the DatagramSocket and MulticastSocket
                  classes.                
                <author>
                    Pavani Diwanji                    
                </author>
            </javadoc>
            <declaration name="timeout" type="int" line="46"/>
            <declaration name="connected" type="boolean" line="47"/>
            <declaration name="trafficClass" type="int" line="48"/>
            <declaration name="connectedAddress" type="InetAddress" line="49"/>
            <declaration name="connectedPort" type="int" line="50"/>
            <declaration name="multicastInterface" type="int" line="53"/>
            <declaration name="loopbackMode" type="boolean" line="54"/>
            <declaration name="ttl" type="int" line="55"/>
            <javadoc line="57">
                Load net library into runtime.                
            </javadoc>
            <scope line="60"/>
            <javadoc line="65">
                Creates a datagram socket                
            </javadoc>
            <method name="create" type="void" line="68">
                <scope line="71"/>
                <scope line="73"/>
            </method>
            <javadoc line="80">
                Binds a datagram socket to a local port.                
            </javadoc>
            <method name="bind" type="void" line="84">
                <params>
                    <param name="lport" type="int"/>
                    <param name="laddr" type="InetAddress"/>
                </params>
            </method>
            <method name="bind0" type="void" line="88"/>
            <method name="send" type="void" line="91"/>
            <javadoc line="91">
                Sends a datagram packet. The packet contains the data and the
                  destination address to send the packet to.                
                <param>
                    packet to be sent.                    
                </param>
            </javadoc>
            <javadoc line="98">
                Connects a datagram socket to a remote destination. This associates the remote
                  address with the local socket so that datagrams may only be sent to this destination
                  and received from this destination.                
                <param>
                    address the remote InetAddress to connect to                    
                </param>
                <param>
                    port the remote port number                    
                </param>
            </javadoc>
            <method name="connect" type="void" line="105">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                Disconnects a previously connected socket. Does nothing if the socket was
                  not connected already.                
            </javadoc>
            <method name="disconnect" type="void" line="116"/>
            <method name="peek" type="int" line="123"/>
            <javadoc line="123">
                Peek at the packet to see who it is from.                
                <param>
                    return the address which the packet came from.                    
                </param>
            </javadoc>
            <method name="peekData" type="int" line="128"/>
            <javadoc line="129">
                Receive the datagram packet.                
                <param>
                    Packet Received.                    
                </param>
            </javadoc>
            <method name="receive" type="void" line="134">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
            </method>
            <method name="receive0" type="void" line="138"/>
            <method name="setTimeToLive" type="void" line="141"/>
            <javadoc line="141">
                Set the TTL (time-to-live) option.                
                <param>
                    TTL to be set.                    
                </param>
            </javadoc>
            <method name="getTimeToLive" type="int" line="147"/>
            <javadoc line="147">
                Get the TTL (time-to-live) option.                
            </javadoc>
            <method name="setTTL" type="void" line="152"/>
            <javadoc line="152">
                Set the TTL (time-to-live) option.                
                <param>
                    TTL to be set.                    
                </param>
            </javadoc>
            <method name="getTTL" type="byte" line="158"/>
            <javadoc line="158">
                Get the TTL (time-to-live) option.                
            </javadoc>
            <javadoc line="163">
                Join the multicast group.                
                <param>
                    multicast address to join.                    
                </param>
            </javadoc>
            <method name="join" type="void" line="167">
                <params>
                    <param name="inetaddr" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="171">
                Leave the multicast group.                
                <param>
                    multicast address to leave.                    
                </param>
            </javadoc>
            <method name="leave" type="void" line="175">
                <params>
                    <param name="inetaddr" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="178">
                Join the multicast group.                
                <param>
                    multicast address to join.                    
                </param>
                <param>
                    netIf specifies the local interface to receive multicast
                      datagram packets                    
                </param>
                <throws>
                    IllegalArgumentException if mcastaddr is null or is a
                      SocketAddress subclass not supported by this socket                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="joinGroup" type="void" line="189">
                <params>
                    <param name="mcastaddr" type="SocketAddress"/>
                    <param name="netIf" type="NetworkInterface"/>
                </params>
            </method>
            <method name="join" type="void" line="195"/>
            <javadoc line="198">
                Leave the multicast group.                
                <param>
                    multicast address to leave.                    
                </param>
                <param>
                    netIf specified the local interface to leave the group at                    
                </param>
                <throws>
                    IllegalArgumentException if mcastaddr is null or is a
                      SocketAddress subclass not supported by this socket                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="leaveGroup" type="void" line="207">
                <params>
                    <param name="mcastaddr" type="SocketAddress"/>
                    <param name="netIf" type="NetworkInterface"/>
                </params>
            </method>
            <method name="leave" type="void" line="213"/>
            <javadoc line="216">
                Close the socket.                
            </javadoc>
            <method name="close" type="void" line="219">
                <scope line="220"/>
            </method>
            <method name="isClosed" type="boolean" line="227"/>
            <method name="finalize" type="void" line="231"/>
            <javadoc line="235">
                set a value - since we only support (setting) binary options
                  here, o must be a Boolean                
            </javadoc>
            <method name="setOption" type="void" line="240">
                <params>
                    <param name="optID" type="int"/>
                    <param name="o" type="Object"/>
                </params>
                <comment line="245">
                    check type safety b4 going native.  These should never
                     fail, since only java.Socket has access to
                     PlainSocketImpl.setOption().                    
                </comment>
                <scope line="241"/>
                <scope line="250"/>
                <declaration name="tmp" type="int" line="253"/>
                <scope line="259"/>
                <scope line="265"/>
                <scope line="270"/>
                <scope line="279"/>
            </method>
            <method name="getOption" type="Object" line="306">
                <params>
                    <param name="optID" type="int"/>
                </params>
                <scope line="307"/>
                <declaration name="result" type="Object" line="311"/>
                <scope line="320"/>
            </method>
            <method name="datagramSocketCreate" type="void" line="343"/>
            <method name="datagramSocketClose" type="void" line="344"/>
            <method name="socketSetOption" type="void" line="345"/>
            <method name="socketGetOption" type="Object" line="347"/>
            <method name="connect0" type="void" line="349"/>
            <method name="disconnect0" type="void" line="350"/>
        </class>
    </source>