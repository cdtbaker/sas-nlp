<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.security.AccessController"/>
        <import package="java.io.ObjectStreamException"/>
        <import package="sun.security.action"/>
        <class name="Inet4Address" line="32">
            <extends class="InetAddress"/>
            <comment line="97">
                Perform initializations.                
            </comment>
            <comment line="183">
                                
            </comment>
            <comment line="356">
                Utilities                
            </comment>
            <comment line="357">
                Converts IPv4 binary address into a string suitable for presentation.
                
                 @param src a byte array representing an IPv4 numeric address
                 @return a String representing the IPv4 address in
                         textual representation format
                 @since 1.4                
            </comment>
            <javadoc line="32">
                This class represents an Internet Protocol version 4 (IPv4) address.
                  Defined by &lt;a href=&quot;http://www.ietf.org/rfc/rfc790.txt&quot;&gt;
                  &lt;i&gt;RFC&amp;nbsp;790: Assigned Numbers&lt;/i&gt;&lt;/a&gt;,
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc1918.txt&quot;&gt;
                  &lt;i&gt;RFC&amp;nbsp;1918: Address Allocation for Private Internets&lt;/i&gt;&lt;/a&gt;,
                  and &lt;a href=&quot;http://www.ietf.org/rfc/rfc2365.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2365:
                  Administratively Scoped IP Multicast&lt;/i&gt;&lt;/a&gt;
                  &lt;h4&gt; &lt;A NAME=&quot;format&quot;&gt;Textual representation of IP addresses&lt;/a&gt; &lt;/h4&gt;
                  Textual representation of IPv4 address used as input to methods
                  takes one of the following forms:
                  &lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;d.d.d.d&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;d.d.d&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;d.d&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;d&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt; When four parts are specified, each is interpreted as a byte of
                  data and assigned, from left to right, to the four bytes of an IPv4
                  address.
                  &lt;p&gt; When a three part address is specified, the last part is
                  interpreted as a 16-bit quantity and placed in the right most two
                  bytes of the network address. This makes the three part address
                  format convenient for specifying Class B net- work addresses as
                  128.net.host.
                  &lt;p&gt; When a two part address is supplied, the last part is
                  interpreted as a 24-bit quantity and placed in the right most three
                  bytes of the network address. This makes the two part address
                  format convenient for specifying Class A network addresses as
                  net.host.
                  &lt;p&gt; When only one part is given, the value is stored directly in
                  the network address without any byte rearrangement.
                  &lt;p&gt; For methods that return a textual representation as output
                  value, the first form, i.e. a dotted-quad string, is used.
                  &lt;h4&gt; The Scope of a Multicast Address &lt;/h4&gt;
                  Historically the IPv4 TTL field in the IP header has doubled as a
                  multicast scope field: a TTL of 0 means node-local, 1 means
                  link-local, up through 32 means site-local, up through 64 means
                  region-local, up through 128 means continent-local, and up through
                  255 are global. However, the administrative scoping is preferred.
                  Please refer to &lt;a href=&quot;http://www.ietf.org/rfc/rfc2365.txt&quot;&gt;
                  &lt;i&gt;RFC&amp;nbsp;2365: Administratively Scoped IP Multicast&lt;/i&gt;&lt;/a&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="INADDRSZ" type="int" line="89"/>
            <declaration name="serialVersionUID" type="long" line="91"/>
            <javadoc line="91">
                use serialVersionUID from InetAddress, but Inet4Address instance
                  is always replaced by an InetAddress instance before being
                  serialized                
            </javadoc>
            <scope line="99"/>
            <method name="Inet4Address" type="constructor" line="103"/>
            <method name="Inet4Address" type="constructor" line="110">
                <params>
                    <param name="hostName" type="String"/>
                    <param name="addr" type="byte"/>
                </params>
                <scope line="113">
                    <scope line="114"/>
                </scope>
            </method>
            <method name="Inet4Address" type="constructor" line="122">
                <params>
                    <param name="hostName" type="String"/>
                    <param name="address" type="int"/>
                </params>
            </method>
            <javadoc line="128">
                Replaces the object to be serialized with an InetAddress object.                
                <return>
                    the alternate object to be serialized.                    
                </return>
                <throws>
                    ObjectStreamException if a new object replacing this
                      object could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="136">
                <comment line="138">
                    will replace the to be serialized &apos;this&apos; object                    
                </comment>
                <comment line="143">
                    Prior to 1.4 an InetAddress was created with a family
                     based on the platform AF_INET value (usually 2).
                     For compatibility reasons we must therefore write the
                     the InetAddress with this family.                    
                </comment>
                <declaration name="inet" type="InetAddress" line="138"/>
            </method>
            <javadoc line="153">
                Utility routine to check if the InetAddress is an
                  IP multicast address. IP multicast address is a Class D
                  address i.e first four bits of the address are 1110.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the InetAddress is
                      an IP multicast address                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isMulticastAddress" type="boolean" line="161"/>
            <javadoc line="165">
                Utility routine to check if the InetAddress in a wildcard address.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the Inetaddress is
                      a wildcard address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isAnyLocalAddress" type="boolean" line="171"/>
            <declaration name="loopback" type="int" line="175"/>
            <javadoc line="175">
                Utility routine to check if the InetAddress is a loopback address.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the InetAddress is
                      a loopback address; or false otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isLoopbackAddress" type="boolean" line="183">
                <comment line="185">
                                        
                </comment>
                <declaration name="byteAddr" type="byte[]" line="185"/>
            </method>
            <javadoc line="189">
                Utility routine to check if the InetAddress is an link local address.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the InetAddress is
                      a link local address; or false if address is not a link local unicast address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isLinkLocalAddress" type="boolean" line="196">
                <comment line="198">
                    link-local unicast in IPv4 (169.254.0.0/16)
                     defined in &quot;Documenting Special Use IPv4 Address Blocks
                     that have been Registered with IANA&quot; by Bill Manning
                     draft-manning-dsua-06.txt                    
                </comment>
            </method>
            <javadoc line="205">
                Utility routine to check if the InetAddress is a site local address.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the InetAddress is
                      a site local address; or false if address is not a site local unicast address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isSiteLocalAddress" type="boolean" line="212">
                <comment line="214">
                    refer to RFC 1918
                     10/8 prefix
                     172.16/12 prefix
                     192.168/16 prefix                    
                </comment>
            </method>
            <javadoc line="224">
                Utility routine to check if the multicast address has global scope.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the address has
                      is a multicast address of global scope, false if it is not
                      of global scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCGlobal" type="boolean" line="232">
                <comment line="234">
                    224.0.1.0 to 238.255.255.255                    
                </comment>
                <declaration name="byteAddr" type="byte[]" line="234"/>
            </method>
            <javadoc line="240">
                Utility routine to check if the multicast address has node scope.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the address has
                      is a multicast address of node-local scope, false if it is not
                      of node-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCNodeLocal" type="boolean" line="248">
                <comment line="250">
                    unless ttl == 0                    
                </comment>
            </method>
            <javadoc line="253">
                Utility routine to check if the multicast address has link scope.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the address has
                      is a multicast address of link-local scope, false if it is not
                      of link-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCLinkLocal" type="boolean" line="261">
                <comment line="263">
                    224.0.0/24 prefix and ttl == 1                    
                </comment>
            </method>
            <javadoc line="268">
                Utility routine to check if the multicast address has site scope.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the address has
                      is a multicast address of site-local scope, false if it is not
                      of site-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCSiteLocal" type="boolean" line="276">
                <comment line="278">
                    239.255/16 prefix or ttl &lt; 32                    
                </comment>
            </method>
            <javadoc line="282">
                Utility routine to check if the multicast address has organization scope.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating if the address has
                      is a multicast address of organization-local scope,
                      false if it is not of organization-local scope
                      or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCOrgLocal" type="boolean" line="291">
                <comment line="293">
                    239.192 - 239.195                    
                </comment>
            </method>
            <javadoc line="298">
                Returns the raw IP address of this &lt;code&gt;InetAddress&lt;/code&gt;
                  object. The result is in network byte order: the highest order
                  byte of the address is in &lt;code&gt;getAddress()[0]&lt;/code&gt;.                
                <return>
                    the raw IP address of this object.                    
                </return>
            </javadoc>
            <method name="getAddress" type="byte[]" line="305">
                <declaration name="addr" type="byte[]" line="306"/>
            </method>
            <javadoc line="315">
                Returns the IP address string in textual presentation form.                
                <return>
                    the raw IP address in a string format.                    
                </return>
                <since>
                    JDK1.0.2                    
                </since>
            </javadoc>
            <method name="getHostAddress" type="String" line="321"/>
            <javadoc line="325">
                Returns a hashcode for this IP address.                
                <return>
                    a hash code value for this IP address.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="330"/>
            <javadoc line="334">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is
                  not &lt;code&gt;null&lt;/code&gt; and it represents the same IP address as
                  this object.
                  &lt;p&gt;
                  Two instances of &lt;code&gt;InetAddress&lt;/code&gt; represent the same IP
                  address if the length of the byte arrays returned by
                  &lt;code&gt;getAddress&lt;/code&gt; is the same for both, and each of the
                  array components is the same for the byte arrays.                
                <param>
                    obj   the object to compare against.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are the same;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.net.InetAddress#getAddress()                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="350">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="numericToTextFormat" type="String" line="366">
                <params>
                    <param name="src" type="byte[]"/>
                </params>
            </method>
            <method name="init" type="void" line="370"/>
            <javadoc line="370">
                Perform class load-time initializations.                
            </javadoc>
        </class>
    </source>