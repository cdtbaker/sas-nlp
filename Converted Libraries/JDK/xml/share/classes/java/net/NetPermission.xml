<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.security"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.StringTokenizer"/>
        <class name="NetPermission" line="33">
            <extends class="BasicPermission"/>
            <javadoc line="33">
                This class is for various network permissions.
                  A NetPermission contains a name (also referred to as a &quot;target name&quot;) but
                  no actions list; you either have the named permission
                  or you don&apos;t.
                  &lt;P&gt;
                  The target name is the name of the network permission (see below). The naming
                  convention follows the  hierarchical property naming convention.
                  Also, an asterisk
                  may appear at the end of the name, following a &quot;.&quot;, or by itself, to
                  signify a wildcard match. For example: &quot;foo.&quot; or &quot;&quot; is valid,
                  &quot;foo&quot; or &quot;ab&quot; is not valid.
                  &lt;P&gt;
                  The following table lists all the possible NetPermission target names,
                  and for each provides a description of what the permission allows
                  and a discussion of the risks of granting code the permission.
                  &lt;P&gt;
                  &lt;table border=1 cellpadding=5 summary=&quot;Permission target name, what the permission allows, and associated risks&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Permission Target Name&lt;/th&gt;
                  &lt;th&gt;What the Permission Allows&lt;/th&gt;
                  &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;allowHttpTrace&lt;/td&gt;
                  &lt;td&gt;The ability to use the HTTP TRACE method in HttpURLConnection.&lt;/td&gt;
                  &lt;td&gt;Malicious code using HTTP TRACE could get access to security sensitive
                  information in the HTTP headers (such as cookies) that it might not
                  otherwise have access to.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;getCookieHandler&lt;/td&gt;
                  &lt;td&gt;The ability to get the cookie handler that processes highly
                  security sensitive cookie information for an Http session.&lt;/td&gt;
                  &lt;td&gt;Malicious code can get a cookie handler to obtain access to
                  highly security sensitive cookie information. Some web servers
                  use cookies to save user private information such as access
                  control information, or to track user browsing habit.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;getNetworkInformation&lt;/td&gt;
                  &lt;td&gt;The ability to retrieve all information about local network interfaces.&lt;/td&gt;
                  &lt;td&gt;Malicious code can read information about network hardware such as
                  MAC addresses, which could be used to construct local IPv6 addresses.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;getProxySelector&lt;/td&gt;
                  &lt;td&gt;The ability to get the proxy selector used to make decisions
                  on which proxies to use when making network connections.&lt;/td&gt;
                  &lt;td&gt;Malicious code can get a ProxySelector to discover proxy
                  hosts and ports on internal networks, which could then become
                  targets for attack.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;getResponseCache&lt;/td&gt;
                  &lt;td&gt;The ability to get the response cache that provides
                  access to a local response cache.&lt;/td&gt;
                  &lt;td&gt;Malicious code getting access to the local response cache
                  could access security sensitive information.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;requestPasswordAuthentication&lt;/td&gt;
                  &lt;td&gt;The ability
                  to ask the authenticator registered with the system for
                  a password&lt;/td&gt;
                  &lt;td&gt;Malicious code may steal this password.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setCookieHandler&lt;/td&gt;
                  &lt;td&gt;The ability to set the cookie handler that processes highly
                  security sensitive cookie information for an Http session.&lt;/td&gt;
                  &lt;td&gt;Malicious code can set a cookie handler to obtain access to
                  highly security sensitive cookie information. Some web servers
                  use cookies to save user private information such as access
                  control information, or to track user browsing habit.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setDefaultAuthenticator&lt;/td&gt;
                  &lt;td&gt;The ability to set the
                  way authentication information is retrieved when
                  a proxy or HTTP server asks for authentication&lt;/td&gt;
                  &lt;td&gt;Malicious
                  code can set an authenticator that monitors and steals user
                  authentication input as it retrieves the input from the user.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setProxySelector&lt;/td&gt;
                  &lt;td&gt;The ability to set the proxy selector used to make decisions
                  on which proxies to use when making network connections.&lt;/td&gt;
                  &lt;td&gt;Malicious code can set a ProxySelector that directs network
                  traffic to an arbitrary network host.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setResponseCache&lt;/td&gt;
                  &lt;td&gt;The ability to set the response cache that provides access to
                  a local response cache.&lt;/td&gt;
                  &lt;td&gt;Malicious code getting access to the local response cache
                  could access security sensitive information, or create false
                  entries in the response cache.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;specifyStreamHandler&lt;/td&gt;
                  &lt;td&gt;The ability
                  to specify a stream handler when constructing a URL&lt;/td&gt;
                  &lt;td&gt;Malicious code may create a URL with resources that it would
                  normally not have access to (like file:/foo/fum/), specifying a
                  stream handler that gets the actual bytes from someplace it does
                  have access to. Thus it might be able to trick the system into
                  creating a ProtectionDomain/CodeSource for a class even though
                  that class really didn&apos;t come from that location.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="169"/>
            <javadoc line="171">
                Creates a new NetPermission with the specified name.
                  The name is the symbolic name of the NetPermission, such as
                  &quot;setDefaultAuthenticator&quot;, etc. An asterisk
                  may appear at the end of the name, following a &quot;.&quot;, or by itself, to
                  signify a wildcard match.                
                <param>
                    name the name of the NetPermission.                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="NetPermission" type="constructor" line="185">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="189">
                Creates a new NetPermission object with the specified name.
                  The name is the symbolic name of the NetPermission, and the
                  actions String is currently unused and should be null.                
                <param>
                    name the name of the NetPermission.                    
                </param>
                <param>
                    actions should be null.                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="NetPermission" type="constructor" line="202">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
        </class>
    </source>