<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.util.HashMap"/>
        <import package="java.util.LinkedHashMap"/>
        <import package="java.util.Random"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.security.AccessController"/>
        <import package="java.io.ObjectStreamException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="sun.security.action"/>
        <import package="sun.net.InetAddressCachePolicy"/>
        <import package="sun.net.util.IPAddressUtil"/>
        <import package="sun.misc.Service"/>
        <import package="sun.net.spi.nameservice"/>
        <class name="InetAddress" line="45">
            <comment line="200">
                                
            </comment>
            <comment line="223">
                                
            </comment>
            <comment line="226">
                                
            </comment>
            <comment line="232">
                Load net library into runtime, and perform initializations.                
            </comment>
            <comment line="668">
                Cached addresses - our own litle nis, not!                
            </comment>
            <comment line="677">
                put THIS in cache                
            </comment>
            <comment line="796">
                Initialize cache and insert anyLocalAddress into the
                 unknown array with no expiry.                
            </comment>
            <comment line="814">
                Cache the given hostname and addresses.                
            </comment>
            <comment line="831">
                Lookup hostname in cache (positive &amp; negative cache). If
                 found return addresses, null if not found.                
            </comment>
            <comment line="1017">
                called from deployment cache manager                
            </comment>
            <comment line="1462">
                Returns the InetAddress representing anyLocalAddress
                 (typically 0.0.0.0 or ::0)                
            </comment>
            <comment line="1470">
                Load and instantiate an underlying impl class                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="45">
                This class represents an Internet Protocol (IP) address.
                  &lt;p&gt; An IP address is either a 32-bit or 128-bit unsigned number
                  used by IP, a lower-level protocol on which protocols like UDP and
                  TCP are built. The IP address architecture is defined by &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc790.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;790:
                  Assigned Numbers&lt;/i&gt;&lt;/a&gt;, &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc1918.txt&quot;&gt; &lt;i&gt;RFC&amp;nbsp;1918:
                  Address Allocation for Private Internets&lt;/i&gt;&lt;/a&gt;, &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2365.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2365:
                  Administratively Scoped IP Multicast&lt;/i&gt;&lt;/a&gt;, and &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2373: IP
                  Version 6 Addressing Architecture&lt;/i&gt;&lt;/a&gt;. An instance of an
                  InetAddress consists of an IP address and possibly its
                  corresponding host name (depending on whether it is constructed
                  with a host name or whether it has already done reverse host name
                  resolution).
                  &lt;h4&gt; Address types &lt;/h4&gt;
                  &lt;blockquote&gt;&lt;table cellspacing=2 summary=&quot;Description of unicast and multicast address types&quot;&gt;
                  &lt;tr&gt;&lt;th valign=top&gt;&lt;i&gt;unicast&lt;/i&gt;&lt;/th&gt;
                  &lt;td&gt;An identifier for a single interface. A packet sent to
                  a unicast address is delivered to the interface identified by
                  that address.
                  &lt;p&gt; The Unspecified Address -- Also called anylocal or wildcard
                  address. It must never be assigned to any node. It indicates the
                  absence of an address. One example of its use is as the target of
                  bind, which allows a server to accept a client connection on any
                  interface, in case the server host has multiple interfaces.
                  &lt;p&gt; The &lt;i&gt;unspecified&lt;/i&gt; address must not be used as
                  the destination address of an IP packet.
                  &lt;p&gt; The &lt;i&gt;Loopback&lt;/i&gt; Addresses -- This is the address
                  assigned to the loopback interface. Anything sent to this
                  IP address loops around and becomes IP input on the local
                  host. This address is often used when testing a
                  client.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;th valign=top&gt;&lt;i&gt;multicast&lt;/i&gt;&lt;/th&gt;
                  &lt;td&gt;An identifier for a set of interfaces (typically belonging
                  to different nodes). A packet sent to a multicast address is
                  delivered to all interfaces identified by that address.&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;h4&gt; IP address scope &lt;/h4&gt;
                  &lt;p&gt; &lt;i&gt;Link-local&lt;/i&gt; addresses are designed to be used for addressing
                  on a single link for purposes such as auto-address configuration,
                  neighbor discovery, or when no routers are present.
                  &lt;p&gt; &lt;i&gt;Site-local&lt;/i&gt; addresses are designed to be used for addressing
                  inside of a site without the need for a global prefix.
                  &lt;p&gt; &lt;i&gt;Global&lt;/i&gt; addresses are unique across the internet.
                  &lt;h4&gt; Textual representation of IP addresses &lt;/h4&gt;
                  The textual representation of an IP address is address family specific.
                  &lt;p&gt;
                  For IPv4 address format, please refer to &lt;A
                  HREF=&quot;Inet4Address.html#format&quot;&gt;Inet4Address#format&lt;/A&gt;; For IPv6
                  address format, please refer to &lt;A
                  HREF=&quot;Inet6Address.html#format&quot;&gt;Inet6Address#format&lt;/A&gt;.
                  &lt;P&gt;There is a &lt;a href=&quot;doc-files/net-properties.html#Ipv4IPv6&quot;&gt;couple of
                  System Properties&lt;/a&gt; affecting how IPv4 and IPv6 addresses are used.&lt;/P&gt;
                  &lt;h4&gt; Host Name Resolution &lt;/h4&gt;
                  Host name-to-IP address &lt;i&gt;resolution&lt;/i&gt; is accomplished through
                  the use of a combination of local machine configuration information
                  and network naming services such as the Domain Name System (DNS)
                  and Network Information Service(NIS). The particular naming
                  services(s) being used is by default the local machine configured
                  one. For any host name, its corresponding IP address is returned.
                  &lt;p&gt; &lt;i&gt;Reverse name resolution&lt;/i&gt; means that for any IP address,
                  the host associated with the IP address is returned.
                  &lt;p&gt; The InetAddress class provides methods to resolve host names to
                  their IP addresses and vice versa.
                  &lt;h4&gt; InetAddress Caching &lt;/h4&gt;
                  The InetAddress class has a cache to store successful as well as
                  unsuccessful host name resolutions.
                  &lt;p&gt; By default, when a security manager is installed, in order to
                  protect against DNS spoofing attacks,
                  the result of positive host name resolutions are
                  cached forever. When a security manager is not installed, the default
                  behavior is to cache entries for a finite (implementation dependent)
                  period of time. The result of unsuccessful host
                  name resolution is cached for a very short period of time (10
                  seconds) to improve performance.
                  &lt;p&gt; If the default behavior is not desired, then a Java security property
                  can be set to a different Time-to-live (TTL) value for positive
                  caching. Likewise, a system admin can configure a different
                  negative caching TTL value when needed.
                  &lt;p&gt; Two Java security properties control the TTL values used for
                  positive and negative host name resolution caching:
                  &lt;blockquote&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;networkaddress.cache.ttl&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;Indicates the caching policy for successful name lookups from
                  the name service. The value is specified as as integer to indicate
                  the number of seconds to cache the successful lookup. The default
                  setting is to cache for an implementation specific period of time.
                  &lt;p&gt;
                  A value of -1 indicates &quot;cache forever&quot;.
                  &lt;/dd&gt;
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;networkaddress.cache.negative.ttl&lt;/b&gt; (default: 10)&lt;/dt&gt;
                  &lt;dd&gt;Indicates the caching policy for un-successful name lookups
                  from the name service. The value is specified as as integer to
                  indicate the number of seconds to cache the failure for
                  un-successful lookups.
                  &lt;p&gt;
                  A value of 0 indicates &quot;never cache&quot;.
                  A value of -1 indicates &quot;cache forever&quot;.
                  &lt;/dd&gt;
                  &lt;/dl&gt;
                  &lt;/blockquote&gt;                
                <author>
                    Chris Warth                    
                </author>
                <see>
                    java.net.InetAddress#getByAddress(byte[])                    
                </see>
                <see>
                    java.net.InetAddress#getByAddress(java.lang.String,byte[])                    
                </see>
                <see>
                    java.net.InetAddress#getAllByName(java.lang.String)                    
                </see>
                <see>
                    java.net.InetAddress#getByName(java.lang.String)                    
                </see>
                <see>
                    java.net.InetAddress#getLocalHost()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="IPv4" type="int" line="187"/>
            <javadoc line="187">
                Specify the address family: Internet Protocol, Version 4                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="IPv6" type="int" line="193"/>
            <javadoc line="193">
                Specify the address family: Internet Protocol, Version 6                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="preferIPv6Address" type="boolean" line="200"/>
            <declaration name="hostName" type="String" line="202"/>
            <javadoc line="202">
                @serial                
            </javadoc>
            <declaration name="address" type="int" line="207"/>
            <javadoc line="207">
                Holds a 32-bit IPv4 address.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="family" type="int" line="214"/>
            <javadoc line="214">
                Specifies the address family type, for instance, &apos;1&apos; for IPv4
                  addresses, and &apos;2&apos; for IPv6 addresses.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="nameServices" type="List&lt;NameService&gt;" line="223"/>
            <declaration name="canonicalHostName" type="String" line="226"/>
            <declaration name="serialVersionUID" type="long" line="228"/>
            <javadoc line="228">
                use serialVersionUID from JDK 1.0.2 for interoperability                
            </javadoc>
            <scope line="234"/>
            <javadoc line="241">
                Constructor for the Socket.accept() method.
                  This creates an empty InetAddress, which is filled in by
                  the accept() method.  This InetAddress, however, is not
                  put in the address cache, since it is not created by name.                
            </javadoc>
            <method name="InetAddress" type="constructor" line="247"/>
            <javadoc line="250">
                Replaces the de-serialized object with an Inet4Address object.                
                <return>
                    the alternate object to the de-serialized object.                    
                </return>
                <throws>
                    ObjectStreamException if a new object replacing this
                      object could not be created                    
                </throws>
            </javadoc>
            <method name="readResolve" type="Object" line="258">
                <comment line="260">
                    will replace the deserialized &apos;this&apos; object                    
                </comment>
            </method>
            <javadoc line="263">
                Utility routine to check if the InetAddress is an
                  IP multicast address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      an IP multicast address                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isMulticastAddress" type="boolean" line="270"/>
            <javadoc line="274">
                Utility routine to check if the InetAddress in a wildcard address.                
                <return>
                    a <code>boolean</code> indicating if the Inetaddress is
                      a wildcard address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isAnyLocalAddress" type="boolean" line="280"/>
            <javadoc line="284">
                Utility routine to check if the InetAddress is a loopback address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      a loopback address; or false otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isLoopbackAddress" type="boolean" line="291"/>
            <javadoc line="295">
                Utility routine to check if the InetAddress is an link local address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      a link local address; or false if address is not a link local unicast address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isLinkLocalAddress" type="boolean" line="302"/>
            <javadoc line="306">
                Utility routine to check if the InetAddress is a site local address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      a site local address; or false if address is not a site local unicast address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isSiteLocalAddress" type="boolean" line="313"/>
            <javadoc line="317">
                Utility routine to check if the multicast address has global scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of global scope, false if it is not
                      of global scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCGlobal" type="boolean" line="325"/>
            <javadoc line="329">
                Utility routine to check if the multicast address has node scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of node-local scope, false if it is not
                      of node-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCNodeLocal" type="boolean" line="337"/>
            <javadoc line="341">
                Utility routine to check if the multicast address has link scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of link-local scope, false if it is not
                      of link-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCLinkLocal" type="boolean" line="349"/>
            <javadoc line="353">
                Utility routine to check if the multicast address has site scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of site-local scope, false if it is not
                      of site-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCSiteLocal" type="boolean" line="361"/>
            <javadoc line="365">
                Utility routine to check if the multicast address has organization scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of organization-local scope,
                      false if it is not of organization-local scope
                      or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCOrgLocal" type="boolean" line="374"/>
            <javadoc line="379">
                Test whether that address is reachable. Best effort is made by the
                  implementation to try to reach the host, but firewalls and server
                  configuration may block requests resulting in a unreachable status
                  while some specific ports may be accessible.
                  A typical implementation will use ICMP ECHO REQUESTs if the
                  privilege can be obtained, otherwise it will try to establish
                  a TCP connection on port 7 (Echo) of the destination host.
                  &lt;p&gt;
                  The timeout value, in milliseconds, indicates the maximum amount of time
                  the try should take. If the operation times out before getting an
                  answer, the host is deemed unreachable. A negative value will result
                  in an IllegalArgumentException being thrown.                
                <param>
                    timeout the time, in milliseconds, before the call aborts                    
                </param>
                <return>
                    a <code>boolean</code> indicating if the address is reachable.                    
                </return>
                <throws>
                    IOException if a network error occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>timeout</code> is negative.                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isReachable" type="boolean" line="399">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="403">
                Test whether that address is reachable. Best effort is made by the
                  implementation to try to reach the host, but firewalls and server
                  configuration may block requests resulting in a unreachable status
                  while some specific ports may be accessible.
                  A typical implementation will use ICMP ECHO REQUESTs if the
                  privilege can be obtained, otherwise it will try to establish
                  a TCP connection on port 7 (Echo) of the destination host.
                  &lt;p&gt;
                  The &lt;code&gt;network interface&lt;/code&gt; and &lt;code&gt;ttl&lt;/code&gt; parameters
                  let the caller specify which network interface the test will go through
                  and the maximum number of hops the packets should go through.
                  A negative value for the &lt;code&gt;ttl&lt;/code&gt; will result in an
                  IllegalArgumentException being thrown.
                  &lt;p&gt;
                  The timeout value, in milliseconds, indicates the maximum amount of time
                  the try should take. If the operation times out before getting an
                  answer, the host is deemed unreachable. A negative value will result
                  in an IllegalArgumentException being thrown.                
                <param>
                    netif   the NetworkInterface through which the
                      test will be done, or null for any interface                    
                </param>
                <param>
                    ttl     the maximum numbers of hops to try or 0 for the
                      default                    
                </param>
                <param>
                    timeout the time, in milliseconds, before the call aborts                    
                </param>
                <throws>
                    IllegalArgumentException if either <code>timeout</code>
                      or <code>ttl</code> are negative.                    
                </throws>
                <return>
                    a <code>boolean</code>indicating if the address is reachable.                    
                </return>
                <throws>
                    IOException if a network error occurs                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isReachable" type="boolean" line="435">
                <params>
                    <param name="netif" type="NetworkInterface"/>
                    <param name="ttl" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="444">
                Gets the host name for this IP address.
                  &lt;p&gt;If this InetAddress was created with a host name,
                  this host name will be remembered and returned;
                  otherwise, a reverse name lookup will be performed
                  and the result will be returned based on the system
                  configured name lookup service. If a lookup of the name service
                  is required, call{@link #getCanonicalHostName() getCanonicalHostName}.
                  &lt;p&gt;If there is a security manager, its
                  &lt;code&gt;checkConnect&lt;/code&gt; method is first called
                  with the hostname and &lt;code&gt;-1&lt;/code&gt;
                  as its arguments to see if the operation is allowed.
                  If the operation is not allowed, it will return
                  the textual representation of the IP address.                
                <return>
                    the host name for this IP address, or if the operation
                      is not allowed by the security check, the textual
                      representation of the IP address.                    
                </return>
                <see>
                    InetAddress#getCanonicalHostName                    
                </see>
                <see>
                    SecurityManager#checkConnect                    
                </see>
            </javadoc>
            <method name="getHostName" type="String" line="469"/>
            <javadoc line="473">
                Returns the hostname for this address.
                  If the host is equal to null, then this address refers to any
                  of the local machine&apos;s available network addresses.
                  this is package private so SocketPermission can make calls into
                  here without a security check.
                  &lt;p&gt;If there is a security manager, this method first
                  calls its &lt;code&gt;checkConnect&lt;/code&gt; method
                  with the hostname and &lt;code&gt;-1&lt;/code&gt;
                  as its arguments to see if the calling code is allowed to know
                  the hostname for this IP address, i.e., to connect to the host.
                  If the operation is not allowed, it will return
                  the textual representation of the IP address.                
                <return>
                    the host name for this IP address, or if the operation
                      is not allowed by the security check, the textual
                      representation of the IP address.                    
                </return>
                <param>
                    check make security check if true                    
                </param>
                <see>
                    SecurityManager#checkConnect                    
                </see>
            </javadoc>
            <method name="getHostName" type="String" line="496">
                <params>
                    <param name="check" type="boolean"/>
                </params>
                <scope line="497"/>
            </method>
            <javadoc line="503">
                Gets the fully qualified domain name for this IP address.
                  Best effort method, meaning we may not be able to return
                  the FQDN depending on the underlying system configuration.
                  &lt;p&gt;If there is a security manager, this method first
                  calls its &lt;code&gt;checkConnect&lt;/code&gt; method
                  with the hostname and &lt;code&gt;-1&lt;/code&gt;
                  as its arguments to see if the calling code is allowed to know
                  the hostname for this IP address, i.e., to connect to the host.
                  If the operation is not allowed, it will return
                  the textual representation of the IP address.                
                <return>
                    the fully qualified domain name for this IP address,
                      or if the operation is not allowed by the security check,
                      the textual representation of the IP address.                    
                </return>
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCanonicalHostName" type="String" line="524">
                <scope line="525"/>
            </method>
            <javadoc line="532">
                Returns the hostname for this address.
                  &lt;p&gt;If there is a security manager, this method first
                  calls its &lt;code&gt;checkConnect&lt;/code&gt; method
                  with the hostname and &lt;code&gt;-1&lt;/code&gt;
                  as its arguments to see if the calling code is allowed to know
                  the hostname for this IP address, i.e., to connect to the host.
                  If the operation is not allowed, it will return
                  the textual representation of the IP address.                
                <return>
                    the host name for this IP address, or if the operation
                      is not allowed by the security check, the textual
                      representation of the IP address.                    
                </return>
                <param>
                    check make security check if true                    
                </param>
                <see>
                    SecurityManager#checkConnect                    
                </see>
            </javadoc>
            <method name="getHostFromNameService" type="String" line="551">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="check" type="boolean"/>
                </params>
                <comment line="556">
                    first lookup the hostname                    
                </comment>
                <comment line="559">
                    check to see if calling code is allowed to know
                     the hostname for this IP address, ie, connect to the host                    
                </comment>
                <comment line="569">
                    now get all the IP addresses for this hostname,
                     and make sure one of them matches the original IP
                     address. We do this to try and prevent spoofing.                    
                </comment>
                <comment line="583">
                    XXX: if it looks a spoof just return the address?                    
                </comment>
                <comment line="596">
                    let next provider resolve the hostname                    
                </comment>
                <declaration name="host" type="String" line="552"/>
                <scope line="553">
                    <scope line="554">
                        <scope line="561">
                            <declaration name="sec" type="SecurityManager" line="562"/>
                            <scope line="563"/>
                        </scope>
                        <declaration name="arr" type="InetAddress[]" line="573"/>
                        <declaration name="ok" type="boolean" line="574"/>
                        <scope line="576">
                            <scope line="577"/>
                        </scope>
                        <scope line="583"/>
                    </scope>
                    <scope line="590"/>
                    <scope line="593"/>
                </scope>
            </method>
            <javadoc line="602">
                Returns the raw IP address of this &lt;code&gt;InetAddress&lt;/code&gt;
                  object. The result is in network byte order: the highest order
                  byte of the address is in &lt;code&gt;getAddress()[0]&lt;/code&gt;.                
                <return>
                    the raw IP address of this object.                    
                </return>
            </javadoc>
            <method name="getAddress" type="byte[]" line="609"/>
            <javadoc line="613">
                Returns the IP address string in textual presentation.                
                <return>
                    the raw IP address in a string format.                    
                </return>
                <since>
                    JDK1.0.2                    
                </since>
            </javadoc>
            <method name="getHostAddress" type="String" line="619"/>
            <javadoc line="623">
                Returns a hashcode for this IP address.                
                <return>
                    a hash code value for this IP address.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="628"/>
            <javadoc line="632">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is
                  not &lt;code&gt;null&lt;/code&gt; and it represents the same IP address as
                  this object.
                  &lt;p&gt;
                  Two instances of &lt;code&gt;InetAddress&lt;/code&gt; represent the same IP
                  address if the length of the byte arrays returned by
                  &lt;code&gt;getAddress&lt;/code&gt; is the same for both, and each of the
                  array components is the same for the byte arrays.                
                <param>
                    obj   the object to compare against.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.net.InetAddress#getAddress()                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="648">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="652">
                Converts this IP address to a &lt;code&gt;String&lt;/code&gt;. The
                  string returned is of the form: hostname / literal IP
                  address.
                  If the host name is unresolved, no reverse name service lookup
                  is performed. The hostname part will be represented by an empty string.                
                <return>
                    a string representation of this IP address.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="662"/>
            <declaration name="addressCache" type="Cache" line="670"/>
            <declaration name="negativeCache" type="Cache" line="672"/>
            <declaration name="addressCacheInit" type="boolean" line="674"/>
            <declaration name="unknown_array" type="InetAddress[]" line="676"/>
            <declaration name="impl" type="InetAddressImpl" line="678"/>
            <declaration name="lookupTable" type="HashMap&lt;String,Void&gt;" line="680"/>
            <class name="CacheEntry" line="682">
                <javadoc line="682">
                    Represents a cache entry                    
                </javadoc>
                <method name="CacheEntry" type="constructor" line="687">
                    <params>
                        <param name="addresses" type="InetAddress[]"/>
                        <param name="expiration" type="long"/>
                    </params>
                </method>
                <declaration name="addresses" type="InetAddress[]" line="692"/>
                <declaration name="expiration" type="long" line="693"/>
            </class>
            <class name="Cache" line="696">
                <javadoc line="696">
                    A cache that manages entries based on a policy specified
                      at creation time.                    
                </javadoc>
                <declaration name="cache" type="LinkedHashMap&lt;String,CacheEntry&gt;" line="701"/>
                <declaration name="type" type="Type" line="702"/>
                <javadoc line="706">
                    Create cache                    
                </javadoc>
                <method name="Cache" type="constructor" line="709">
                    <params>
                        <param name="type" type="Type"/>
                    </params>
                </method>
                <method name="getPolicy" type="int" line="714">
                    <scope line="715"/>
                    <scope line="717"/>
                </method>
                <javadoc line="722">
                    Add an entry to the cache. If there&apos;s already an
                      entry then for this host then the entry will be
                      replaced.                    
                </javadoc>
                <method name="put" type="Cache" line="727">
                    <params>
                        <param name="host" type="String"/>
                        <param name="addresses" type="InetAddress[]"/>
                    </params>
                    <comment line="734">
                        purge any expired entries                        
                    </comment>
                    <comment line="738">
                        As we iterate in insertion order we can
                         terminate when a non-expired entry is found.                        
                    </comment>
                    <comment line="757">
                        create new entry and add it to the cache
                         -- as a HashMap replaces existing entries we
                            don&apos;t need to explicitly check if there is
                            already an entry for this host.                        
                    </comment>
                    <declaration name="policy" type="int" line="728"/>
                    <scope line="729"/>
                    <scope line="735">
                        <declaration name="expired" type="LinkedList&lt;String&gt;" line="739"/>
                        <declaration name="now" type="long" line="740"/>
                        <scope line="741">
                            <declaration name="entry" type="CacheEntry" line="742"/>
                            <scope line="744"/>
                            <scope line="746"/>
                        </scope>
                        <scope line="751"/>
                    </scope>
                    <declaration name="expiration" type="long" line="760"/>
                    <scope line="761"/>
                    <scope line="763"/>
                    <declaration name="entry" type="CacheEntry" line="766"/>
                </method>
                <javadoc line="771">
                    Query the cache for the specific host. If found then
                      return its CacheEntry, or null if not found.                    
                </javadoc>
                <method name="get" type="CacheEntry" line="775">
                    <params>
                        <param name="host" type="String"/>
                    </params>
                    <comment line="783">
                        check if entry has expired                        
                    </comment>
                    <declaration name="policy" type="int" line="776"/>
                    <scope line="777"/>
                    <declaration name="entry" type="CacheEntry" line="780"/>
                    <scope line="783">
                        <scope line="785"/>
                    </scope>
                </method>
            </class>
            <method name="cacheInitIfNeeded" type="void" line="799">
                <scope line="801"/>
            </method>
            <method name="cacheAddresses" type="void" line="818">
                <params>
                    <param name="hostname" type="String"/>
                    <param name="addresses" type="InetAddress[]"/>
                    <param name="success" type="boolean"/>
                </params>
                <scope line="820">
                    <scope line="822"/>
                    <scope line="824"/>
                </scope>
            </method>
            <method name="getCachedAddresses" type="InetAddress[]" line="834">
                <params>
                    <param name="hostname" type="String"/>
                </params>
                <comment line="838">
                    search both positive &amp; negative caches                    
                </comment>
                <comment line="853">
                    not found                    
                </comment>
                <scope line="839">
                    <declaration name="entry" type="CacheEntry" line="842"/>
                    <scope line="843"/>
                    <scope line="847"/>
                </scope>
            </method>
            <method name="createNSProvider" type="NameService" line="856">
                <params>
                    <param name="provider" type="String"/>
                </params>
                <comment line="863">
                    initialize the default name service                    
                </comment>
                <declaration name="nameService" type="NameService" line="860"/>
                <scope line="861">
                    <anonymous_class line="863">
                        <method name="lookupAllHostAddr" type="InetAddress[]" line="865">
                            <params>
                                <param name="host" type="String"/>
                            </params>
                        </method>
                        <method name="getHostByAddr" type="String" line="869">
                            <params>
                                <param name="addr" type="byte[]"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="873">
                    <declaration name="providerName" type="String" line="874"/>
                    <scope line="875">
                        <anonymous_class line="877">
                            <method name="run" type="NameService" line="878">
                                <declaration name="itr" type="Iterator" line="879"/>
                                <scope line="880">
                                    <declaration name="nsd" type="NameServiceDescriptor" line="881"/>
                                    <scope line="885">
                                        <scope line="886"/>
                                        <scope line="888"/>
                                    </scope>
                                </scope>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="901"/>
                </scope>
            </method>
            <scope line="908">
                <declaration name="provider" type="String" line="913"/>
                <declaration name="propPrefix" type="String" line="914"/>
                <declaration name="n" type="int" line="915"/>
                <scope line="919">
                    <declaration name="ns" type="NameService" line="920"/>
                </scope>
                <scope line="931">
                    <declaration name="ns" type="NameService" line="932"/>
                </scope>
            </scope>
            <javadoc line="937">
                Creates an InetAddress based on the provided host name and IP address.
                  No name service is checked for the validity of the address.
                  &lt;p&gt; The host name can either be a machine name, such as
                  &quot;&lt;code&gt;java.sun.com&lt;/code&gt;&quot;, or a textual representation of its IP
                  address.
                  &lt;p&gt; No validity checking is done on the host name either.
                  &lt;p&gt; If addr specifies an IPv4 address an instance of Inet4Address
                  will be returned; otherwise, an instance of Inet6Address
                  will be returned.
                  &lt;p&gt; IPv4 address byte array must be 4 bytes long and IPv6 byte array
                  must be 16 bytes long                
                <param>
                    host the specified host                    
                </param>
                <param>
                    addr the raw IP address in network byte order                    
                </param>
                <return>
                    an InetAddress object created from the raw IP address.                    
                </return>
                <exception>
                    UnknownHostException  if IP address is of illegal length                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getByAddress" type="InetAddress" line="960">
                <params>
                    <param name="host" type="String"/>
                    <param name="addr" type="byte[]"/>
                </params>
                <scope line="961">
                    <scope line="962"/>
                </scope>
                <scope line="966">
                    <scope line="967"/>
                    <scope line="969">
                        <declaration name="newAddr" type="byte[]" line="970"/>
                        <scope line="972"/>
                        <scope line="974"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="983">
                Determines the IP address of a host, given the host&apos;s name.
                  &lt;p&gt; The host name can either be a machine name, such as
                  &quot;&lt;code&gt;java.sun.com&lt;/code&gt;&quot;, or a textual representation of its
                  IP address. If a literal IP address is supplied, only the
                  validity of the address format is checked.
                  &lt;p&gt; For &lt;code&gt;host&lt;/code&gt; specified in literal IPv6 address,
                  either the form defined in RFC 2732 or the literal IPv6 address
                  format defined in RFC 2373 is accepted. IPv6 scoped addresses are also
                  supported. See &lt;a href=&quot;Inet6Address.html#scoped&quot;&gt;here&lt;/a&gt; for a description of IPv6
                  scoped addresses.
                  &lt;p&gt; If the host is &lt;tt&gt;null&lt;/tt&gt; then an &lt;tt&gt;InetAddress&lt;/tt&gt;
                  representing an address of the loopback interface is returned.
                  See &lt;a href=&quot;http://www.ietf.org/rfc/rfc3330.txt&quot;&gt;RFC&amp;nbsp;3330&lt;/a&gt;
                  section&amp;nbsp;2 and &lt;a href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;RFC&amp;nbsp;2373&lt;/a&gt;
                  section&amp;nbsp;2.5.3. &lt;/p&gt;                
                <param>
                    host   the specified host, or <code>null</code>.                    
                </param>
                <return>
                    an IP address for the given host name.                    
                </return>
                <exception>
                    UnknownHostException  if no IP address for the
                      <code>host</code> could be found, or if a scope_id was specified
                      for a global IPv6 address.                    
                </exception>
                <exception>
                    SecurityException if a security manager exists
                      and its checkConnect method doesn't allow the operation                    
                </exception>
            </javadoc>
            <method name="getByName" type="InetAddress" line="1012">
                <params>
                    <param name="host" type="String"/>
                </params>
            </method>
            <method name="getByName" type="InetAddress" line="1018">
                <params>
                    <param name="host" type="String"/>
                    <param name="reqAddr" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="1022">
                Given the name of a host, returns an array of its IP addresses,
                  based on the configured name service on the system.
                  &lt;p&gt; The host name can either be a machine name, such as
                  &quot;&lt;code&gt;java.sun.com&lt;/code&gt;&quot;, or a textual representation of its IP
                  address. If a literal IP address is supplied, only the
                  validity of the address format is checked.
                  &lt;p&gt; For &lt;code&gt;host&lt;/code&gt; specified in &lt;i&gt;literal IPv6 address&lt;/i&gt;,
                  either the form defined in RFC 2732 or the literal IPv6 address
                  format defined in RFC 2373 is accepted. A literal IPv6 address may
                  also be qualified by appending a scoped zone identifier or scope_id.
                  The syntax and usage of scope_ids is described
                  &lt;a href=&quot;Inet6Address.html#scoped&quot;&gt;here&lt;/a&gt;.
                  &lt;p&gt; If the host is &lt;tt&gt;null&lt;/tt&gt; then an &lt;tt&gt;InetAddress&lt;/tt&gt;
                  representing an address of the loopback interface is returned.
                  See &lt;a href=&quot;http://www.ietf.org/rfc/rfc3330.txt&quot;&gt;RFC&amp;nbsp;3330&lt;/a&gt;
                  section&amp;nbsp;2 and &lt;a href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;RFC&amp;nbsp;2373&lt;/a&gt;
                  section&amp;nbsp;2.5.3. &lt;/p&gt;
                  &lt;p&gt; If there is a security manager and &lt;code&gt;host&lt;/code&gt; is not
                  null and &lt;code&gt;host.length() &lt;/code&gt; is not equal to zero, the
                  security manager&apos;s
                  &lt;code&gt;checkConnect&lt;/code&gt; method is called
                  with the hostname and &lt;code&gt;-1&lt;/code&gt;
                  as its arguments to see if the operation is allowed.                
                <param>
                    host   the name of the host, or <code>null</code>.                    
                </param>
                <return>
                    an array of all the IP addresses for a given host name.                    
                </return>
                <exception>
                    UnknownHostException  if no IP address for the
                      <code>host</code> could be found, or if a scope_id was specified
                      for a global IPv6 address.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkConnect</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkConnect                    
                </see>
            </javadoc>
            <method name="getAllByName" type="InetAddress[]" line="1062">
                <params>
                    <param name="host" type="String"/>
                </params>
            </method>
            <method name="getAllByName" type="InetAddress[]" line="1067">
                <params>
                    <param name="host" type="String"/>
                    <param name="reqAddr" type="InetAddress"/>
                </params>
                <comment line="1078">
                    This is supposed to be an IPv6 literal                    
                </comment>
                <comment line="1083">
                    This was supposed to be a IPv6 address, but it&apos;s not!                    
                </comment>
                <comment line="1088">
                    if host is an IP address, we won&apos;t do further lookup                    
                </comment>
                <comment line="1094">
                    see if it is IPv4 address                    
                </comment>
                <comment line="1097">
                    see if it is IPv6 address
                     Check if a numeric or string zone id is present                    
                </comment>
                <comment line="1102">
                                        
                </comment>
                <comment line="1108">
                    Means an IPv4 litteral between brackets!                    
                </comment>
                <comment line="1125">
                    We were expecting an IPv6 Litteral, but got something else                    
                </comment>
                <scope line="1069">
                    <declaration name="ret" type="InetAddress[]" line="1070"/>
                </scope>
                <declaration name="ipv6Expected" type="boolean" line="1075"/>
                <scope line="1076">
                    <scope line="1078"/>
                    <scope line="1081"/>
                </scope>
                <scope line="1089">
                    <declaration name="addr" type="byte[]" line="1090"/>
                    <declaration name="numericZone" type="int" line="1091"/>
                    <declaration name="ifname" type="String" line="1092"/>
                    <scope line="1095">
                        <declaration name="pos" type="int" line="1098"/>
                        <scope line="1099">
                            <scope line="1101"/>
                        </scope>
                    </scope>
                    <scope line="1106"/>
                    <declaration name="ret" type="InetAddress[]" line="1110"/>
                    <scope line="1111">
                        <scope line="1112"/>
                        <scope line="1114">
                            <scope line="1115"/>
                            <scope line="1117"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1123"/>
            </method>
            <javadoc line="1130">
                Returns the loopback address.
                  &lt;p&gt;
                  The InetAddress returned will represent the IPv4
                  loopback address, 127.0.0.1, or the IPv6 loopback
                  address, ::1. The IPv4 loopback address returned
                  is only one of many in the form 127...                
                <return>
                    the InetAddress loopback instance.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getLoopbackAddress" type="InetAddress" line="1141"/>
            <javadoc line="1146">
                check if the literal address string has %nn appended
                  returns -1 if not, or the numeric value otherwise.
                  %nn may also be a string that represents the displayName of
                  a currently available NetworkInterface.                
            </javadoc>
            <method name="checkNumericZone" type="int" line="1153">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="1165">
                                        
                </comment>
                <declaration name="percent" type="int" line="1154"/>
                <declaration name="slen" type="int" line="1155"/>
                <declaration name="digit" type="int" line="1156"/>
                <scope line="1157"/>
                <scope line="1160">
                    <declaration name="c" type="char" line="1161"/>
                    <scope line="1162">
                        <scope line="1163"/>
                    </scope>
                    <scope line="1169"/>
                </scope>
            </method>
            <method name="getAllByName0" type="InetAddress[]" line="1179">
                <params>
                    <param name="host" type="String"/>
                </params>
            </method>
            <javadoc line="1183">
                package private so SocketPermission can call it                
            </javadoc>
            <method name="getAllByName0" type="InetAddress[]" line="1187">
                <params>
                    <param name="host" type="String"/>
                    <param name="check" type="boolean"/>
                </params>
            </method>
            <method name="getAllByName0" type="InetAddress[]" line="1192">
                <params>
                    <param name="host" type="String"/>
                    <param name="reqAddr" type="InetAddress"/>
                    <param name="check" type="boolean"/>
                </params>
                <comment line="1195">
                                        
                </comment>
                <comment line="1196">
                                        
                </comment>
                <comment line="1198">
                    make sure the connection to the host is allowed, before we
                     give out a hostname                    
                </comment>
                <comment line="1210">
                                        
                </comment>
                <scope line="1200">
                    <declaration name="security" type="SecurityManager" line="1201"/>
                    <scope line="1202"/>
                </scope>
                <declaration name="addresses" type="InetAddress[]" line="1207"/>
                <scope line="1210"/>
            </method>
            <method name="getAddressesFromNameService" type="InetAddress[]" line="1222">
                <params>
                    <param name="host" type="String"/>
                    <param name="reqAddr" type="InetAddress"/>
                </params>
                <comment line="1228">
                    Check whether the host is in the lookupTable.
                     1) If the host isn&apos;t in the lookupTable when
                        checkLookupTable() is called, checkLookupTable()
                        would add the host in the lookupTable and
                        return null. So we will do the lookup.
                     2) If the host is in the lookupTable when
                        checkLookupTable() is called, the current thread
                        would be blocked until the host is removed
                        from the lookupTable. Then this thread
                        should try to look up the addressCache.
                         i) if it found the addresses in the
                            addressCache, checkLookupTable()  would
                            return the addresses.
                         ii) if it didn&apos;t find the addresses in the
                             addressCache for any reason,
                             it should add the host in the
                             lookupTable and return null so the
                             following code would do  a lookup itself.                    
                </comment>
                <comment line="1248">
                    This is the first thread which looks up the addresses
                     this host or the cache entry for this host has been
                     expired so this thread should do the lookup.                    
                </comment>
                <comment line="1253">
                    Do not put the call to lookup() inside the
                     constructor.  if you do you will still be
                     allocating space when the lookup fails.                    
                </comment>
                <comment line="1277">
                    More to do?                    
                </comment>
                <comment line="1279">
                    Find it?                    
                </comment>
                <comment line="1286">
                    Rotate                    
                </comment>
                <comment line="1297">
                    Cache the address.                    
                </comment>
                <comment line="1304">
                    Delete host from the lookupTable and notify
                     all threads waiting on the lookupTable monitor.                    
                </comment>
                <declaration name="addresses" type="InetAddress[]" line="1223"/>
                <declaration name="success" type="boolean" line="1224"/>
                <declaration name="ex" type="UnknownHostException" line="1225"/>
                <scope line="1245">
                    <scope line="1246">
                        <scope line="1250">
                            <scope line="1251"/>
                            <scope line="1261">
                                <scope line="1262">
                                    <declaration name="local" type="InetAddress[]" line="1263"/>
                                </scope>
                                <scope line="1268"/>
                            </scope>
                        </scope>
                        <scope line="1277">
                            <declaration name="i" type="int" line="1279"/>
                            <scope line="1280">
                                <scope line="1281"/>
                            </scope>
                            <scope line="1286">
                                <declaration name="tmp" type="InetAddress" line="1287"/>
                                <scope line="1288"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1302"/>
                </scope>
            </method>
            <method name="checkLookupTable" type="InetAddress[]" line="1313">
                <params>
                    <param name="host" type="String"/>
                </params>
                <comment line="1316">
                    If the host isn&apos;t in the lookupTable, add it in the
                     lookuptable and return null. The caller should do
                     the lookup.                    
                </comment>
                <comment line="1324">
                    If the host is in the lookupTable, it means that another
                     thread is trying to look up the addresses of this host.
                     This thread should wait.                    
                </comment>
                <comment line="1335">
                    The other thread has finished looking up the addresses of
                     the host. This thread should retry to get the addresses
                     from the addressCache. If it doesn&apos;t get the addresses from
                     the cache, it will try to look up the addresses itself.                    
                </comment>
                <scope line="1314">
                    <scope line="1318"/>
                    <scope line="1326">
                        <scope line="1327"/>
                        <scope line="1329"/>
                    </scope>
                </scope>
                <declaration name="addresses" type="InetAddress[]" line="1338"/>
                <scope line="1339">
                    <scope line="1340"/>
                </scope>
            </method>
            <method name="updateLookupTable" type="void" line="1349">
                <params>
                    <param name="host" type="String"/>
                </params>
                <scope line="1350"/>
            </method>
            <javadoc line="1356">
                Returns an &lt;code&gt;InetAddress&lt;/code&gt; object given the raw IP address .
                  The argument is in network byte order: the highest order
                  byte of the address is in &lt;code&gt;getAddress()[0]&lt;/code&gt;.
                  &lt;p&gt; This method doesn&apos;t block, i.e. no reverse name service lookup
                  is performed.
                  &lt;p&gt; IPv4 address byte array must be 4 bytes long and IPv6 byte array
                  must be 16 bytes long                
                <param>
                    addr the raw IP address in network byte order                    
                </param>
                <return>
                    an InetAddress object created from the raw IP address.                    
                </return>
                <exception>
                    UnknownHostException  if IP address is of illegal length                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getByAddress" type="InetAddress" line="1373">
                <params>
                    <param name="addr" type="byte[]"/>
                </params>
            </method>
            <declaration name="cachedLocalHost" type="InetAddress" line="1377"/>
            <declaration name="cacheTime" type="long" line="1378"/>
            <declaration name="maxCacheTime" type="long" line="1379"/>
            <declaration name="cacheLock" type="Object" line="1380"/>
            <javadoc line="1382">
                Returns the address of the local host. This is achieved by retrieving
                  the name of the host from the system, then resolving that name into
                  an &lt;code&gt;InetAddress&lt;/code&gt;.
                  &lt;P&gt;Note: The resolved address may be cached for a short period of time.
                  &lt;/P&gt;
                  &lt;p&gt;If there is a security manager, its
                  &lt;code&gt;checkConnect&lt;/code&gt; method is called
                  with the local host name and &lt;code&gt;-1&lt;/code&gt;
                  as its arguments to see if the operation is allowed.
                  If the operation is not allowed, an InetAddress representing
                  the loopback address is returned.                
                <return>
                    the address of the local host.                    
                </return>
                <exception>
                    UnknownHostException  if the local host name could not
                      be resolved into an address.                    
                </exception>
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <see>
                    java.net.InetAddress#getByName(java.lang.String)                    
                </see>
            </javadoc>
            <method name="getLocalHost" type="InetAddress" line="1405">
                <comment line="1424">
                    Less than 5s old?                    
                </comment>
                <comment line="1430">
                    we are calling getAddressesFromNameService directly
                     to avoid getting localHost from cache                    
                </comment>
                <comment line="1438">
                    Rethrow with a more informative error message.                    
                </comment>
                <declaration name="security" type="SecurityManager" line="1407"/>
                <scope line="1408">
                    <declaration name="local" type="String" line="1409"/>
                    <scope line="1411"/>
                    <scope line="1415"/>
                    <declaration name="ret" type="InetAddress" line="1419"/>
                    <scope line="1420">
                        <declaration name="now" type="long" line="1421"/>
                        <scope line="1422"/>
                        <scope line="1431">
                            <declaration name="localAddrs" type="InetAddress[]" line="1432"/>
                            <scope line="1433"/>
                            <scope line="1436">
                                <declaration name="uhe2" type="UnknownHostException" line="1438"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1450"/>
            </method>
            <method name="init" type="void" line="1455"/>
            <javadoc line="1455">
                Perform class load-time initializations.                
            </javadoc>
            <method name="anyLocalAddress" type="InetAddress" line="1465"/>
            <method name="loadImpl" type="InetAddressImpl" line="1472">
                <params>
                    <param name="implName" type="String"/>
                </params>
                <comment line="1476">
                    Property &quot;impl.prefix&quot; will be prepended to the classname
                     of the implementation object we instantiate, to which we
                     delegate the real work (like native methods).  This
                     property can vary across implementations of the java.
                     classes.  The default is an empty String &quot;&quot;.                    
                </comment>
                <declaration name="impl" type="Object" line="1473"/>
                <declaration name="prefix" type="String" line="1482"/>
                <scope line="1484"/>
                <scope line="1486"/>
                <scope line="1490"/>
                <scope line="1494"/>
                <scope line="1500">
                    <scope line="1501"/>
                    <scope line="1503"/>
                </scope>
            </method>
            <method name="readObjectNoData" type="void" line="1512">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="1513"/>
            </method>
            <method name="readObject" type="void" line="1519">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="1521"/>
            </method>
        </class>
        <class name="InetAddressImplFactory" line="1532">
            <comment line="200">
                                
            </comment>
            <comment line="223">
                                
            </comment>
            <comment line="226">
                                
            </comment>
            <comment line="232">
                Load net library into runtime, and perform initializations.                
            </comment>
            <comment line="668">
                Cached addresses - our own litle nis, not!                
            </comment>
            <comment line="677">
                put THIS in cache                
            </comment>
            <comment line="796">
                Initialize cache and insert anyLocalAddress into the
                 unknown array with no expiry.                
            </comment>
            <comment line="814">
                Cache the given hostname and addresses.                
            </comment>
            <comment line="831">
                Lookup hostname in cache (positive &amp; negative cache). If
                 found return addresses, null if not found.                
            </comment>
            <comment line="1017">
                called from deployment cache manager                
            </comment>
            <comment line="1462">
                Returns the InetAddress representing anyLocalAddress
                 (typically 0.0.0.0 or ::0)                
            </comment>
            <comment line="1470">
                Load and instantiate an underlying impl class                
            </comment>
            <method name="create" type="InetAddressImpl" line="1534"/>
            <method name="isIPv6Supported" type="boolean" line="1539"/>
        </class>
    </source>