<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <class name="Authenticator" line="2">
            <javadoc line="2">
                The class Authenticator represents an object that knows how to obtain
                  authentication for a network connection.  Usually, it will do this
                  by prompting the user for information.
                  &lt;p&gt;
                  Applications use this class by overriding {@link #getPasswordAuthentication()} in a sub-class. This method will
                  typically use the various getXXX() accessor methods to get information
                  about the entity requesting authentication. It must then acquire a
                  username and password either by interacting with the user or through
                  some other non-interactive means. The credentials are then returned
                  as a {@link PasswordAuthentication} return value.
                  &lt;p&gt;
                  An instance of this concrete sub-class is then registered
                  with the system by calling {@link #setDefault(Authenticator)}.
                  When authentication is required, the system will invoke one of the
                  requestPasswordAuthentication() methods which in turn will call the
                  getPasswordAuthentication() method of the registered object.
                  &lt;p&gt;
                  All methods that request authentication have a default implementation
                  that fails.                
                <see>
                    java.net.Authenticator#setDefault(java.net.Authenticator)                    
                </see>
                <see>
                    java.net.Authenticator#getPasswordAuthentication()                    
                </see>
                <author>
                    Bill Foote                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="theAuthenticator" type="Authenticator" line="28"/>
            <declaration name="requestingHost" type="String" line="29"/>
            <declaration name="requestingSite" type="InetAddress" line="30"/>
            <declaration name="requestingPort" type="int" line="31"/>
            <declaration name="requestingProtocol" type="String" line="32"/>
            <declaration name="requestingPrompt" type="String" line="33"/>
            <declaration name="requestingScheme" type="String" line="34"/>
            <declaration name="requestingURL" type="URL" line="35"/>
            <declaration name="requestingAuthType" type="RequestorType" line="36"/>
            <declaration name="RequestorType" type="enum" line="37"/>
            <javadoc line="37">
                The type of the entity requesting authentication.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <scope line="41"/>
            <javadoc line="44">
                Entity requesting authentication is a HTTP origin server.                
            </javadoc>
            <method name="reset" type="void" line="48"/>
            <javadoc line="58">
                Sets the authenticator that will be used by the networking code
                  when a proxy or an HTTP server asks for authentication.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a
                  &lt;code&gt;NetPermission(&quot;setDefaultAuthenticator&quot;)&lt;/code&gt; permission.
                  This may result in a java.lang.SecurityException.                
                <param>
                    a       The authenticator to be set. If a is &lt;code&gt;null&lt;/code&gt; then
                      any previously set authenticator is removed.                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
                      setting the default authenticator.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.net.NetPermission                    
                </see>
            </javadoc>
            <method name="setDefault" type="void" line="74">
                <params>
                    <param name="a" type="Authenticator"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="75"/>
                <scope line="76">
                    <declaration name="setDefaultPermission" type="NetPermission" line="77"/>
                </scope>
            </method>
            <javadoc line="82">
                Ask the authenticator that has been registered with the system
                  for a password.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a
                  &lt;code&gt;NetPermission(&quot;requestPasswordAuthentication&quot;)&lt;/code&gt; permission.
                  This may result in a java.lang.SecurityException.                
                <param>
                    addr The InetAddress of the site requesting authorization,
                      or null if not known.                    
                </param>
                <param>
                    port the port for the requested connection                    
                </param>
                <param>
                    protocol The protocol that&apos;s requesting the connection
                      ({@link java.net.Authenticator#getRequestingProtocol()})                    
                </param>
                <param>
                    prompt A prompt string for the user                    
                </param>
                <param>
                    scheme The authentication scheme                    
                </param>
                <return>
                    The username/password, or null if one can&apos;t be gotten.                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
                      the password authentication request.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.net.NetPermission                    
                </see>
            </javadoc>
            <method name="requestPasswordAuthentication" type="PasswordAuthentication" line="104">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="protocol" type="String"/>
                    <param name="prompt" type="String"/>
                    <param name="scheme" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="105"/>
                <scope line="106">
                    <declaration name="requestPermission" type="NetPermission" line="107"/>
                </scope>
                <declaration name="a" type="Authenticator" line="110"/>
                <scope line="111"/>
                <scope line="114">
                    <scope line="115"/>
                </scope>
            </method>
            <javadoc line="126">
                Ask the authenticator that has been registered with the system
                  for a password. This is the preferred method for requesting a password
                  because the hostname can be provided in cases where the InetAddress
                  is not available.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a
                  &lt;code&gt;NetPermission(&quot;requestPasswordAuthentication&quot;)&lt;/code&gt; permission.
                  This may result in a java.lang.SecurityException.                
                <param>
                    host The hostname of the site requesting authentication.                    
                </param>
                <param>
                    addr The InetAddress of the site requesting authentication,
                      or null if not known.                    
                </param>
                <param>
                    port the port for the requested connection.                    
                </param>
                <param>
                    protocol The protocol that&apos;s requesting the connection
                      ({@link java.net.Authenticator#getRequestingProtocol()})                    
                </param>
                <param>
                    prompt A prompt string for the user which identifies the authentication realm.                    
                </param>
                <param>
                    scheme The authentication scheme                    
                </param>
                <return>
                    The username/password, or null if one can&apos;t be gotten.                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
                      the password authentication request.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.net.NetPermission                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="requestPasswordAuthentication" type="PasswordAuthentication" line="152">
                <params>
                    <param name="host" type="String"/>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="protocol" type="String"/>
                    <param name="prompt" type="String"/>
                    <param name="scheme" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="153"/>
                <scope line="154">
                    <declaration name="requestPermission" type="NetPermission" line="155"/>
                </scope>
                <declaration name="a" type="Authenticator" line="158"/>
                <scope line="159"/>
                <scope line="162">
                    <scope line="163"/>
                </scope>
            </method>
            <javadoc line="175">
                Ask the authenticator that has been registered with the system
                  for a password.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a
                  &lt;code&gt;NetPermission(&quot;requestPasswordAuthentication&quot;)&lt;/code&gt; permission.
                  This may result in a java.lang.SecurityException.                
                <param>
                    host The hostname of the site requesting authentication.                    
                </param>
                <param>
                    addr The InetAddress of the site requesting authorization,
                      or null if not known.                    
                </param>
                <param>
                    port the port for the requested connection                    
                </param>
                <param>
                    protocol The protocol that&apos;s requesting the connection
                      ({@link java.net.Authenticator#getRequestingProtocol()})                    
                </param>
                <param>
                    prompt A prompt string for the user                    
                </param>
                <param>
                    scheme The authentication scheme                    
                </param>
                <param>
                    url The requesting URL that caused the authentication                    
                </param>
                <param>
                    reqType The type (server or proxy) of the entity requesting
                      authentication.                    
                </param>
                <return>
                    The username/password, or null if one can&apos;t be gotten.                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
                      the password authentication request.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.net.NetPermission                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="requestPasswordAuthentication" type="PasswordAuthentication" line="202">
                <params>
                    <param name="host" type="String"/>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="protocol" type="String"/>
                    <param name="prompt" type="String"/>
                    <param name="scheme" type="String"/>
                    <param name="url" type="URL"/>
                    <param name="reqType" type="RequestorType"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="203"/>
                <scope line="204">
                    <declaration name="requestPermission" type="NetPermission" line="205"/>
                </scope>
                <declaration name="a" type="Authenticator" line="208"/>
                <scope line="209"/>
                <scope line="212">
                    <scope line="213"/>
                </scope>
            </method>
            <javadoc line="227">
                Gets the &lt;code&gt;hostname&lt;/code&gt; of the
                  site or proxy requesting authentication, or &lt;code&gt;null&lt;/code&gt;
                  if not available.                
                <return>
                    the hostname of the connection requiring authentication, or null
                      if it&apos;s not available.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRequestingHost" type="String" line="235"/>
            <javadoc line="238">
                Gets the &lt;code&gt;InetAddress&lt;/code&gt; of the
                  site requesting authorization, or &lt;code&gt;null&lt;/code&gt;
                  if not available.                
                <return>
                    the InetAddress of the site requesting authorization, or null
                      if it&apos;s not available.                    
                </return>
            </javadoc>
            <method name="getRequestingSite" type="InetAddress" line="245"/>
            <javadoc line="248">
                Gets the port number for the requested connection.                
                <return>
                    an &lt;code&gt;int&lt;/code&gt; indicating the
                      port for the requested connection.                    
                </return>
            </javadoc>
            <method name="getRequestingPort" type="int" line="253"/>
            <javadoc line="256">
                Give the protocol that&apos;s requesting the connection.  Often this
                  will be based on a URL, but in a future JDK it could be, for
                  example, &quot;SOCKS&quot; for a password-protected SOCKS5 firewall.                
                <return>
                    the protcol, optionally followed by &quot;/version&quot;, where
                      version is a version number.                    
                </return>
                <see>
                    java.net.URL#getProtocol()                    
                </see>
            </javadoc>
            <method name="getRequestingProtocol" type="String" line="264"/>
            <javadoc line="267">
                Gets the prompt string given by the requestor.                
                <return>
                    the prompt string given by the requestor (realm for
                      http requests)                    
                </return>
            </javadoc>
            <method name="getRequestingPrompt" type="String" line="272"/>
            <javadoc line="275">
                Gets the scheme of the requestor (the HTTP scheme
                  for an HTTP firewall, for example).                
                <return>
                    the scheme of the requestor                    
                </return>
            </javadoc>
            <method name="getRequestingScheme" type="String" line="280"/>
            <javadoc line="283">
                Called when password authorization is needed.  Subclasses should
                  override the default implementation, which returns null.                
                <return>
                    The PasswordAuthentication collected from the
                      user, or null if none is provided.                    
                </return>
            </javadoc>
            <method name="getPasswordAuthentication" type="PasswordAuthentication" line="289"/>
            <javadoc line="292">
                Returns the URL that resulted in this
                  request for authentication.                
                <since>
                    1.5                    
                </since>
                <return>
                    the requesting URL                    
                </return>
            </javadoc>
            <method name="getRequestingURL" type="URL" line="298"/>
            <javadoc line="301">
                Returns whether the requestor is a Proxy or a Server.                
                <since>
                    1.5                    
                </since>
                <return>
                    the authentication type of the requestor                    
                </return>
            </javadoc>
            <method name="getRequestorType" type="RequestorType" line="306"/>
        </class>
    </source>