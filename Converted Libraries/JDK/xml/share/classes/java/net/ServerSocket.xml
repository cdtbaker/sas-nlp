<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.channels.ServerSocketChannel"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <class name="ServerSocket" line="34">
            <implements interface="java.io.Closeable"/>
            <javadoc line="34">
                This class implements server sockets. A server socket waits for
                  requests to come in over the network. It performs some operation
                  based on that request, and then possibly returns a result to the requester.
                  &lt;p&gt;
                  The actual work of the server socket is performed by an instance
                  of the &lt;code&gt;SocketImpl&lt;/code&gt; class. An application can
                  change the socket factory that creates the socket
                  implementation to configure itself to create sockets
                  appropriate to the local firewall.                
                <author>
                    unascribed                    
                </author>
                <see>
                    java.net.SocketImpl                    
                </see>
                <see>
                    java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)                    
                </see>
                <see>
                    java.nio.channels.ServerSocketChannel                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="created" type="boolean" line="53"/>
            <javadoc line="53">
                Various states of this socket.                
            </javadoc>
            <declaration name="bound" type="boolean" line="57"/>
            <declaration name="closed" type="boolean" line="58"/>
            <declaration name="closeLock" type="Object" line="59"/>
            <declaration name="impl" type="SocketImpl" line="61"/>
            <javadoc line="61">
                The implementation of this Socket.                
            </javadoc>
            <declaration name="oldImpl" type="boolean" line="66"/>
            <javadoc line="66">
                Are we using an older SocketImpl?                
            </javadoc>
            <javadoc line="71">
                Package-private constructor to create a ServerSocket associated with
                  the given SocketImpl.                
            </javadoc>
            <method name="ServerSocket" type="constructor" line="75">
                <params>
                    <param name="impl" type="SocketImpl"/>
                </params>
            </method>
            <javadoc line="80">
                Creates an unbound server socket.                
                <exception>
                    IOException IO error when opening the socket.                    
                </exception>
                <revised>
                    1.4                    
                </revised>
            </javadoc>
            <method name="ServerSocket" type="constructor" line="86"/>
            <javadoc line="90">
                Creates a server socket, bound to the specified port. A port number
                  of &lt;code&gt;0&lt;/code&gt; means that the port number is automatically
                  allocated, typically from an ephemeral port range. This port
                  number can then be retrieved by calling {@link #getLocalPort getLocalPort}.
                  &lt;p&gt;
                  The maximum queue length for incoming connection indications (a
                  request to connect) is set to &lt;code&gt;50&lt;/code&gt;. If a connection
                  indication arrives when the queue is full, the connection is refused.
                  &lt;p&gt;
                  If the application has specified a server socket factory, that
                  factory&apos;s &lt;code&gt;createSocketImpl&lt;/code&gt; method is called to create
                  the actual socket implementation. Otherwise a &quot;plain&quot; socket is created.
                  &lt;p&gt;
                  If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is called
                  with the &lt;code&gt;port&lt;/code&gt; argument
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    port  the port number, or <code>0</code> to use a port
                      number that is automatically allocated.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when opening the socket.                    
                </exception>
                <exception>
                    SecurityExceptionif a security manager exists and its <code>checkListen</code>
                      method doesn't allow the operation.                    
                </exception>
                <exception>
                    IllegalArgumentException if the port parameter is outside
                      the specified range of valid port values, which is between
                      0 and 65535, inclusive.                    
                </exception>
                <see>
                    java.net.SocketImpl                    
                </see>
                <see>
                    java.net.SocketImplFactory#createSocketImpl()                    
                </see>
                <see>
                    java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)                    
                </see>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="ServerSocket" type="constructor" line="127">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="131">
                Creates a server socket and binds it to the specified local port
                  number, with the specified backlog.
                  A port number of &lt;code&gt;0&lt;/code&gt; means that the port number is
                  automatically allocated, typically from an ephemeral port range.
                  This port number can then be retrieved by calling{@link #getLocalPort getLocalPort}.
                  &lt;p&gt;
                  The maximum queue length for incoming connection indications (a
                  request to connect) is set to the &lt;code&gt;backlog&lt;/code&gt; parameter. If
                  a connection indication arrives when the queue is full, the
                  connection is refused.
                  &lt;p&gt;
                  If the application has specified a server socket factory, that
                  factory&apos;s &lt;code&gt;createSocketImpl&lt;/code&gt; method is called to create
                  the actual socket implementation. Otherwise a &quot;plain&quot; socket is created.
                  &lt;p&gt;
                  If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is called
                  with the &lt;code&gt;port&lt;/code&gt; argument
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.
                  The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of
                  pending connections on the socket. Its exact semantics are implementation
                  specific. In particular, an implementation may impose a maximum length
                  or may choose to ignore the parameter altogther. The value provided
                  should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to
                  &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.
                  &lt;P&gt;                
                <param>
                    port     the port number, or <code>0</code> to use a port
                      number that is automatically allocated.                    
                </param>
                <param>
                    backlog  requested maximum length of the queue of incoming
                      connections.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when opening the socket.                    
                </exception>
                <exception>
                    SecurityExceptionif a security manager exists and its <code>checkListen</code>
                      method doesn't allow the operation.                    
                </exception>
                <exception>
                    IllegalArgumentException if the port parameter is outside
                      the specified range of valid port values, which is between
                      0 and 65535, inclusive.                    
                </exception>
                <see>
                    java.net.SocketImpl                    
                </see>
                <see>
                    java.net.SocketImplFactory#createSocketImpl()                    
                </see>
                <see>
                    java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)                    
                </see>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="ServerSocket" type="constructor" line="180">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                </params>
            </method>
            <javadoc line="184">
                Create a server with the specified port, listen backlog, and
                  local IP address to bind to.  The &lt;i&gt;bindAddr&lt;/i&gt; argument
                  can be used on a multi-homed host for a ServerSocket that
                  will only accept connect requests to one of its addresses.
                  If &lt;i&gt;bindAddr&lt;/i&gt; is null, it will default accepting
                  connections on any/all local addresses.
                  The port must be between 0 and 65535, inclusive.
                  A port number of &lt;code&gt;0&lt;/code&gt; means that the port number is
                  automatically allocated, typically from an ephemeral port range.
                  This port number can then be retrieved by calling{@link #getLocalPort getLocalPort}.
                  &lt;P&gt;If there is a security manager, this method
                  calls its &lt;code&gt;checkListen&lt;/code&gt; method
                  with the &lt;code&gt;port&lt;/code&gt; argument
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.
                  The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of
                  pending connections on the socket. Its exact semantics are implementation
                  specific. In particular, an implementation may impose a maximum length
                  or may choose to ignore the parameter altogther. The value provided
                  should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to
                  &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.
                  &lt;P&gt;                
                <param>
                    port  the port number, or <code>0</code> to use a port
                      number that is automatically allocated.                    
                </param>
                <param>
                    backlog requested maximum length of the queue of incoming
                      connections.                    
                </param>
                <param>
                    bindAddr the local InetAddress the server will bind to                    
                </param>
                <throws>
                    SecurityException if a security manager exists and
                      its <code>checkListen</code> method doesn't allow the operation.                    
                </throws>
                <throws>
                    IOException if an I/O error occurs when opening the socket.                    
                </throws>
                <exception>
                    IllegalArgumentException if the port parameter is outside
                      the specified range of valid port values, which is between
                      0 and 65535, inclusive.                    
                </exception>
                <see>
                    SocketOptions                    
                </see>
                <see>
                    SocketImpl                    
                </see>
                <see>
                    SecurityManager#checkListen                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="ServerSocket" type="constructor" line="229">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                    <param name="bindAddr" type="InetAddress"/>
                </params>
                <scope line="236"/>
                <scope line="238"/>
                <scope line="241"/>
            </method>
            <javadoc line="247">
                Get the &lt;code&gt;SocketImpl&lt;/code&gt; attached to this socket, creating
                  it if necessary.                
                <return>
                    the <code>SocketImpl</code> attached to that ServerSocket.                    
                </return>
                <throws>
                    SocketException if creation fails.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getImpl" type="SocketImpl" line="255"/>
            <method name="checkOldImpl" type="void" line="261">
                <comment line="264">
                    SocketImpl.connect() is a protected method, therefore we need to use                    
                </comment>
                <comment line="265">
                    getDeclaredMethod, therefore we need permission to access the member                    
                </comment>
                <scope line="266">
                    <anonymous_class line="268">
                        <method name="run" type="Void" line="269">
                            <declaration name="cl" type="Class[]" line="270"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="277"/>
            </method>
            <method name="setImpl" type="void" line="282">
                <comment line="287">
                    No need to do a checkOldImpl() here, we know it&apos;s an up to date                    
                </comment>
                <comment line="288">
                    SocketImpl!                    
                </comment>
                <scope line="283"/>
                <scope line="286"/>
            </method>
            <javadoc line="295">
                Creates the socket implementation.                
                <throws>
                    IOException if creation fails                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createImpl" type="void" line="301">
                <scope line="304"/>
                <scope line="307"/>
            </method>
            <javadoc line="312">
                Binds the &lt;code&gt;ServerSocket&lt;/code&gt; to a specific address
                  (IP address and port number).
                  &lt;p&gt;
                  If the address is &lt;code&gt;null&lt;/code&gt;, then the system will pick up
                  an ephemeral port and a valid local address to bind the socket.
                  &lt;p&gt;                
                <param>
                    endpoint        The IP address & port number to bind to.                    
                </param>
                <throws>
                    IOException if the bind operation fails, or if the socket
                      is already bound.                    
                </throws>
                <throws>
                    SecurityException       if a <code>SecurityManager</code> is present and
                      its <code>checkListen</code> method doesn't allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if endpoint is a
                      SocketAddress subclass not supported by this socket                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="bind" type="void" line="329">
                <params>
                    <param name="endpoint" type="SocketAddress"/>
                </params>
            </method>
            <javadoc line="333">
                Binds the &lt;code&gt;ServerSocket&lt;/code&gt; to a specific address
                  (IP address and port number).
                  &lt;p&gt;
                  If the address is &lt;code&gt;null&lt;/code&gt;, then the system will pick up
                  an ephemeral port and a valid local address to bind the socket.
                  &lt;P&gt;
                  The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of
                  pending connections on the socket. Its exact semantics are implementation
                  specific. In particular, an implementation may impose a maximum length
                  or may choose to ignore the parameter altogther. The value provided
                  should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to
                  &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.                
                <param>
                    endpoint        The IP address & port number to bind to.                    
                </param>
                <param>
                    backlog         requested maximum length of the queue of
                      incoming connections.                    
                </param>
                <throws>
                    IOException if the bind operation fails, or if the socket
                      is already bound.                    
                </throws>
                <throws>
                    SecurityException       if a <code>SecurityManager</code> is present and
                      its <code>checkListen</code> method doesn't allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if endpoint is a
                      SocketAddress subclass not supported by this socket                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="bind" type="void" line="358">
                <params>
                    <param name="endpoint" type="SocketAddress"/>
                    <param name="backlog" type="int"/>
                </params>
                <declaration name="epoint" type="InetSocketAddress" line="367"/>
                <scope line="372">
                    <declaration name="security" type="SecurityManager" line="373"/>
                </scope>
                <scope line="379"/>
                <scope line="382"/>
            </method>
            <javadoc line="388">
                Returns the local address of this server socket.
                  &lt;p&gt;
                  If the socket was bound prior to being {@link #close closed},
                  then this method will continue to return the local address
                  after the socket is closed.                
                <return>
                    the address to which this socket is bound,
                      or <code>null</code> if the socket is unbound.                    
                </return>
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="398">
                <comment line="404">
                    nothing                    
                </comment>
                <comment line="405">
                    If we&apos;re bound, the impl has been created                    
                </comment>
                <comment line="406">
                    so we shouldn&apos;t get here                    
                </comment>
                <scope line="401"/>
                <scope line="403"/>
            </method>
            <javadoc line="411">
                Returns the port number on which this socket is listening.
                  &lt;p&gt;
                  If the socket was bound prior to being {@link #close closed},
                  then this method will continue to return the port number
                  after the socket is closed.                
                <return>
                    the port number to which this socket is listening or
                      -1 if the socket is not bound yet.                    
                </return>
            </javadoc>
            <method name="getLocalPort" type="int" line="421">
                <comment line="427">
                    nothing                    
                </comment>
                <comment line="428">
                    If we&apos;re bound, the impl has been created                    
                </comment>
                <comment line="429">
                    so we shouldn&apos;t get here                    
                </comment>
                <scope line="424"/>
                <scope line="426"/>
            </method>
            <javadoc line="434">
                Returns the address of the endpoint this socket is bound to, or
                  &lt;code&gt;null&lt;/code&gt; if it is not bound yet.
                  &lt;p&gt;
                  If the socket was bound prior to being {@link #close closed},
                  then this method will continue to return the address of the endpoint
                  after the socket is closed.                
                <return>
                    a <code>SocketAddress</code> representing the local endpoint of this
                      socket, or <code>null</code> if it is not bound yet.                    
                </return>
                <see>
                    #getInetAddress()                    
                </see>
                <see>
                    #getLocalPort()                    
                </see>
                <see>
                    #bind(SocketAddress)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getLocalSocketAddress" type="SocketAddress" line="450"/>
            <javadoc line="456">
                Listens for a connection to be made to this socket and accepts
                  it. The method blocks until a connection is made.
                  &lt;p&gt;A new Socket &lt;code&gt;s&lt;/code&gt; is created and, if there
                  is a security manager,
                  the security manager&apos;s &lt;code&gt;checkAccept&lt;/code&gt; method is called
                  with &lt;code&gt;s.getInetAddress().getHostAddress()&lt;/code&gt; and
                  &lt;code&gt;s.getPort()&lt;/code&gt;
                  as its arguments to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <exception>
                    IOException  if an I/O error occurs when waiting for a
                      connection.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkAccept</code> method doesn't allow the operation.                    
                </exception>
                <exception>
                    SocketTimeoutException if a timeout was previously set with setSoTimeout and
                      the timeout has been reached.                    
                </exception>
                <exception>
                    java.nio.channels.IllegalBlockingModeExceptionif this socket has an associated channel, the channel is in
                      non-blocking mode, and there is no connection ready to be
                      accepted                    
                </exception>
                <return>
                    the new Socket                    
                </return>
                <see>
                    SecurityManager#checkAccept                    
                </see>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="accept" type="Socket" line="484">
                <declaration name="s" type="Socket" line="489"/>
            </method>
            <javadoc line="494">
                Subclasses of ServerSocket use this method to override accept()
                  to return their own subclass of socket.  So a FooServerSocket
                  will typically hand this method an &lt;i&gt;empty&lt;/i&gt; FooSocket.  On
                  return from implAccept the FooSocket will be connected to a client.                
                <param>
                    s the Socket                    
                </param>
                <throws>
                    java.nio.channels.IllegalBlockingModeExceptionif this socket has an associated channel,
                      and the channel is in non-blocking mode                    
                </throws>
                <throws>
                    IOException if an I/O error occurs when waiting
                      for a connection.                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="implAccept" type="void" line="510">
                <params>
                    <param name="s" type="Socket"/>
                </params>
                <declaration name="si" type="SocketImpl" line="511"/>
                <scope line="512">
                    <scope line="515"/>
                    <declaration name="security" type="SecurityManager" line="524"/>
                    <scope line="525"/>
                </scope>
                <scope line="529"/>
                <scope line="534"/>
            </method>
            <javadoc line="544">
                Closes this socket.
                  Any thread currently blocked in {@link #accept()} will throw
                  a {@link SocketException}.
                  &lt;p&gt; If this socket has an associated channel then the channel is closed
                  as well.                
                <exception>
                    IOException  if an I/O error occurs when closing the socket.                    
                </exception>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="close" type="void" line="557">
                <scope line="558"/>
            </method>
            <javadoc line="567">
                Returns the unique {@link java.nio.channels.ServerSocketChannel} object
                  associated with this socket, if any.
                  &lt;p&gt; A server socket will have a channel if, and only if, the channel
                  itself was created via the {@link java.nio.channels.ServerSocketChannel#open ServerSocketChannel.open}method.                
                <return>
                    the server-socket channel associated with this socket,
                      or <tt>null</tt> if this socket was not created
                      for a channel                    
                </return>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getChannel" type="ServerSocketChannel" line="583"/>
            <javadoc line="587">
                Returns the binding state of the ServerSocket.                
                <return>
                    true if the ServerSocket succesfuly bound to an address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isBound" type="boolean" line="593">
                <comment line="594">
                    Before 1.3 ServerSockets were always bound during creation                    
                </comment>
            </method>
            <javadoc line="598">
                Returns the closed state of the ServerSocket.                
                <return>
                    true if the socket has been closed                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isClosed" type="boolean" line="604">
                <scope line="605"/>
            </method>
            <javadoc line="610">
                Enable/disable SO_TIMEOUT with the specified timeout, in
                  milliseconds.  With this option set to a non-zero timeout,
                  a call to accept() for this ServerSocket
                  will block for only this amount of time.  If the timeout expires,
                  a &lt;B&gt;java.net.SocketTimeoutException&lt;/B&gt; is raised, though the
                  ServerSocket is still valid.  The option &lt;B&gt;must&lt;/B&gt; be enabled
                  prior to entering the blocking operation to have effect.  The
                  timeout must be &gt; 0.
                  A timeout of zero is interpreted as an infinite timeout.                
                <param>
                    timeout the specified timeout, in milliseconds                    
                </param>
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as a TCP error.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #getSoTimeout()                    
                </see>
            </javadoc>
            <method name="setSoTimeout" type="void" line="626">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="632">
                Retrieve setting for SO_TIMEOUT.  0 returns implies that the
                  option is disabled (i.e., timeout of infinity).                
                <return>
                    the SO_TIMEOUT value                    
                </return>
                <exception>
                    IOException if an I/O error occurs                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #setSoTimeout(int)                    
                </see>
            </javadoc>
            <method name="getSoTimeout" type="int" line="640">
                <comment line="644">
                                        
                </comment>
                <declaration name="o" type="Object" line="643"/>
                <scope line="645"/>
                <scope line="647"/>
            </method>
            <javadoc line="652">
                Enable/disable the SO_REUSEADDR socket option.
                  &lt;p&gt;
                  When a TCP connection is closed the connection may remain
                  in a timeout state for a period of time after the connection
                  is closed (typically known as the &lt;tt&gt;TIME_WAIT&lt;/tt&gt; state
                  or &lt;tt&gt;2MSL&lt;/tt&gt; wait state).
                  For applications using a well known socket address or port
                  it may not be possible to bind a socket to the required
                  &lt;tt&gt;SocketAddress&lt;/tt&gt; if there is a connection in the
                  timeout state involving the socket address or port.
                  &lt;p&gt;
                  Enabling &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; prior to binding the socket
                  using {@link #bind(SocketAddress)} allows the socket to be
                  bound even though a previous connection is in a timeout
                  state.
                  &lt;p&gt;
                  When a &lt;tt&gt;ServerSocket&lt;/tt&gt; is created the initial setting
                  of &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; is not defined. Applications can
                  use {@link #getReuseAddress()} to determine the initial
                  setting of &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt;.
                  &lt;p&gt;
                  The behaviour when &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; is enabled or
                  disabled after a socket is bound (See {@link #isBound()})
                  is not defined.                
                <param>
                    on  whether to enable or disable the socket option                    
                </param>
                <exception>
                    SocketException if an error occurs enabling or
                      disabling the <tt>SO_RESUEADDR</tt> socket option,
                      or the socket is closed.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #getReuseAddress()                    
                </see>
                <see>
                    #bind(SocketAddress)                    
                </see>
                <see>
                    #isBound()                    
                </see>
                <see>
                    #isClosed()                    
                </see>
            </javadoc>
            <method name="setReuseAddress" type="void" line="688">
                <params>
                    <param name="on" type="boolean"/>
                </params>
            </method>
            <javadoc line="694">
                Tests if SO_REUSEADDR is enabled.                
                <return>
                    a <code>boolean</code> indicating whether or not SO_REUSEADDR is enabled.                    
                </return>
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as a TCP error.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #setReuseAddress(boolean)                    
                </see>
            </javadoc>
            <method name="getReuseAddress" type="boolean" line="703"/>
            <javadoc line="709">
                Returns the implementation address and implementation port of
                  this socket as a &lt;code&gt;String&lt;/code&gt;.                
                <return>
                    a string representation of this socket.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="715"/>
            <method name="setBound" type="void" line="723"/>
            <method name="setCreated" type="void" line="727"/>
            <declaration name="factory" type="SocketImplFactory" line="731"/>
            <javadoc line="731">
                The factory for all server sockets.                
            </javadoc>
            <javadoc line="736">
                Sets the server socket implementation factory for the
                  application. The factory can be specified only once.
                  &lt;p&gt;
                  When an application creates a new server socket, the socket
                  implementation factory&apos;s &lt;code&gt;createSocketImpl&lt;/code&gt; method is
                  called to create the actual socket implementation.
                  &lt;p&gt;
                  Passing &lt;code&gt;null&lt;/code&gt; to the method is a no-op unless the factory
                  was already set.
                  &lt;p&gt;
                  If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkSetFactory&lt;/code&gt; method
                  to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    fac   the desired factory.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when setting the
                      socket factory.                    
                </exception>
                <exception>
                    SocketException  if the factory has already been defined.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSetFactory</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    java.net.SocketImplFactory#createSocketImpl()                    
                </see>
                <see>
                    SecurityManager#checkSetFactory                    
                </see>
            </javadoc>
            <method name="setSocketFactory" type="void" line="761">
                <params>
                    <param name="fac" type="SocketImplFactory"/>
                </params>
                <scope line="762"/>
                <declaration name="security" type="SecurityManager" line="765"/>
                <scope line="766"/>
            </method>
            <javadoc line="772">
                Sets a default proposed value for the SO_RCVBUF option for sockets
                  accepted from this &lt;tt&gt;ServerSocket&lt;/tt&gt;. The value actually set
                  in the accepted socket must be determined by calling{@link Socket#getReceiveBufferSize()} after the socket
                  is returned by {@link #accept()}.
                  &lt;p&gt;
                  The value of SO_RCVBUF is used both to set the size of the internal
                  socket receive buffer, and to set the size of the TCP receive window
                  that is advertized to the remote peer.
                  &lt;p&gt;
                  It is possible to change the value subsequently, by calling{@link Socket#setReceiveBufferSize(int)}. However, if the application
                  wishes to allow a receive window larger than 64K bytes, as defined by RFC1323
                  then the proposed value must be set in the ServerSocket &lt;B&gt;before&lt;/B&gt;
                  it is bound to a local address. This implies, that the ServerSocket must be
                  created with the no-argument constructor, then setReceiveBufferSize() must
                  be called and lastly the ServerSocket is bound to an address by calling bind().
                  &lt;p&gt;
                  Failure to do this will not cause an error, and the buffer size may be set to the
                  requested value but the TCP receive window in sockets accepted from
                  this ServerSocket will be no larger than 64K bytes.                
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as a TCP error.                    
                </exception>
                <param>
                    size the size to which to set the receive buffer
                      size. This value must be greater than 0.                    
                </param>
                <exception>
                    IllegalArgumentException if the
                      value is 0 or is negative.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #getReceiveBufferSize                    
                </see>
            </javadoc>
            <method name="setReceiveBufferSize" type="void" line="807">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="808"/>
            </method>
            <javadoc line="816">
                Gets the value of the SO_RCVBUF option for this &lt;tt&gt;ServerSocket&lt;/tt&gt;,
                  that is the proposed buffer size that will be used for Sockets accepted
                  from this &lt;tt&gt;ServerSocket&lt;/tt&gt;.
                  &lt;p&gt;Note, the value actually set in the accepted socket is determined by
                  calling {@link Socket#getReceiveBufferSize()}.                
                <return>
                    the value of the SO_RCVBUF option for this <tt>Socket</tt>.                    
                </return>
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as a TCP error.                    
                </exception>
                <see>
                    #setReceiveBufferSize(int)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getReceiveBufferSize" type="int" line="830">
                <declaration name="result" type="int" line="833"/>
                <declaration name="o" type="Object" line="834"/>
                <scope line="835"/>
            </method>
            <javadoc line="841">
                Sets performance preferences for this ServerSocket.
                  &lt;p&gt; Sockets use the TCP/IP protocol by default.  Some implementations
                  may offer alternative protocols which have different performance
                  characteristics than TCP/IP.  This method allows the application to
                  express its own preferences as to how these tradeoffs should be made
                  when the implementation chooses from the available protocols.
                  &lt;p&gt; Performance preferences are described by three integers
                  whose values indicate the relative importance of short connection time,
                  low latency, and high bandwidth.  The absolute values of the integers
                  are irrelevant; in order to choose a protocol the values are simply
                  compared, with larger values indicating stronger preferences.  If the
                  application prefers short connection time over both low latency and high
                  bandwidth, for example, then it could invoke this method with the values
                  &lt;tt&gt;(1, 0, 0)&lt;/tt&gt;.  If the application prefers high bandwidth above low
                  latency, and low latency above short connection time, then it could
                  invoke this method with the values &lt;tt&gt;(0, 1, 2)&lt;/tt&gt;.
                  &lt;p&gt; Invoking this method after this socket has been bound
                  will have no effect. This implies that in order to use this capability
                  requires the socket to be created with the no-argument constructor.                
                <param>
                    connectionTimeAn <tt>int</tt> expressing the relative importance of a short
                      connection time                    
                </param>
                <param>
                    latencyAn <tt>int</tt> expressing the relative importance of low
                      latency                    
                </param>
                <param>
                    bandwidthAn <tt>int</tt> expressing the relative importance of high
                      bandwidth                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setPerformancePreferences" type="void" line="882">
                <params>
                    <param name="connectionTime" type="int"/>
                    <param name="latency" type="int"/>
                    <param name="bandwidth" type="int"/>
                </params>
                <comment line="883">
                                        
                </comment>
            </method>
        </class>
    </source>