<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InvalidObjectException"/>
        <class name="InetSocketAddress" line="5">
            <extends class="SocketAddress"/>
            <javadoc line="5">
                This class implements an IP Socket Address (IP address + port number)
                  It can also be a pair (hostname + port number), in which case an attempt
                  will be made to resolve the hostname. If resolution fails then the address
                  is said to be &lt;I&gt;unresolved&lt;/I&gt; but can still be used on some circumstances
                  like connecting through a proxy.
                  &lt;p&gt;
                  It provides an immutable object used by sockets for binding, connecting, or
                  as returned values.
                  &lt;p&gt;
                  The &lt;i&gt;wildcard&lt;/i&gt; is a special local IP address. It usually means &quot;any&quot;
                  and can only be used for &lt;code&gt;bind&lt;/code&gt; operations.                
                <see>
                    java.net.Socket                    
                </see>
                <see>
                    java.net.ServerSocket                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="hostname" type="String" line="22"/>
            <declaration name="addr" type="InetAddress" line="23"/>
            <declaration name="port" type="int" line="24"/>
            <declaration name="serialVersionUID" type="long" line="25"/>
            <method name="InetSocketAddress" type="constructor" line="26"/>
            <javadoc line="28">
                Creates a socket address where the IP address is the wildcard address
                  and the port number a specified value.
                  &lt;p&gt;
                  A valid port value is between 0 and 65535.
                  A port number of &lt;code&gt;zero&lt;/code&gt; will let the system pick up an
                  ephemeral port in a &lt;code&gt;bind&lt;/code&gt; operation.
                  &lt;p&gt;                
                <param>
                    port    The port number                    
                </param>
                <throws>
                    IllegalArgumentException if the port parameter is outside the specified
                      range of valid port values.                    
                </throws>
            </javadoc>
            <method name="InetSocketAddress" type="constructor" line="40">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="43">
                Creates a socket address from an IP address and a port number.
                  &lt;p&gt;
                  A valid port value is between 0 and 65535.
                  A port number of &lt;code&gt;zero&lt;/code&gt; will let the system pick up an
                  ephemeral port in a &lt;code&gt;bind&lt;/code&gt; operation.
                  &lt;P&gt;
                  A &lt;code&gt;null&lt;/code&gt; address will assign the &lt;i&gt;wildcard&lt;/i&gt; address.
                  &lt;p&gt;                
                <param>
                    addr    The IP address                    
                </param>
                <param>
                    port    The port number                    
                </param>
                <throws>
                    IllegalArgumentException if the port parameter is outside the specified
                      range of valid port values.                    
                </throws>
            </javadoc>
            <method name="InetSocketAddress" type="constructor" line="57">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="58"/>
            </method>
            <javadoc line="65">
                Creates a socket address from a hostname and a port number.
                  &lt;p&gt;
                  An attempt will be made to resolve the hostname into an InetAddress.
                  If that attempt fails, the address will be flagged as &lt;I&gt;unresolved&lt;/I&gt;.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method
                  is called with the host name as its argument to check the permissiom
                  to resolve it. This could result in a SecurityException.
                  &lt;P&gt;
                  A valid port value is between 0 and 65535.
                  A port number of &lt;code&gt;zero&lt;/code&gt; will let the system pick up an
                  ephemeral port in a &lt;code&gt;bind&lt;/code&gt; operation.
                  &lt;P&gt;                
                <param>
                    hostname the Host name                    
                </param>
                <param>
                    port    The port number                    
                </param>
                <throws>
                    IllegalArgumentException if the port parameter is outside the range
                      of valid port values, or if the hostname parameter is &lt;TT&gt;null&lt;/TT&gt;.                    
                </throws>
                <throws>
                    SecurityException if a security manager is present and
                      permission to resolve the host name is
                      denied.                    
                </throws>
                <see>
                    #isUnresolved()                    
                </see>
            </javadoc>
            <method name="InetSocketAddress" type="constructor" line="88">
                <params>
                    <param name="hostname" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="89"/>
                <scope line="92"/>
                <scope line="95"/>
                <scope line="98"/>
            </method>
            <javadoc line="104">
                Creates an unresolved socket address from a hostname and a port number.
                  &lt;p&gt;
                  No attempt will be made to resolve the hostname into an InetAddress.
                  The address will be flagged as &lt;I&gt;unresolved&lt;/I&gt;.
                  &lt;p&gt;
                  A valid port value is between 0 and 65535.
                  A port number of &lt;code&gt;zero&lt;/code&gt; will let the system pick up an
                  ephemeral port in a &lt;code&gt;bind&lt;/code&gt; operation.
                  &lt;P&gt;                
                <param>
                    host    the Host name                    
                </param>
                <param>
                    port    The port number                    
                </param>
                <throws>
                    IllegalArgumentException if the port parameter is outside
                      the range of valid port values, or if the hostname
                      parameter is &lt;TT&gt;null&lt;/TT&gt;.                    
                </throws>
                <see>
                    #isUnresolved()                    
                </see>
                <return>
                    a &lt;code&gt;InetSocketAddress&lt;/code&gt; representing the unresolved
                      socket address                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createUnresolved" type="InetSocketAddress" line="124">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="125"/>
                <scope line="128"/>
                <declaration name="s" type="InetSocketAddress" line="131"/>
            </method>
            <method name="readObject" type="void" line="137">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="139"/>
                <scope line="142"/>
            </method>
            <javadoc line="146">
                Gets the port number.                
                <return>
                    the port number.                    
                </return>
            </javadoc>
            <method name="getPort" type="int" line="150"/>
            <javadoc line="153">
                Gets the &lt;code&gt;InetAddress&lt;/code&gt;.                
                <return>
                    the InetAdress or &lt;code&gt;null&lt;/code&gt; if it is unresolved.                    
                </return>
            </javadoc>
            <method name="getAddress" type="InetAddress" line="157"/>
            <javadoc line="160">
                Gets the &lt;code&gt;hostname&lt;/code&gt;.
                  Note: This method may trigger a name service reverse lookup if the
                  address was created with a literal IP address.                
                <return>
                    the hostname part of the address.                    
                </return>
            </javadoc>
            <method name="getHostName" type="String" line="166"/>
            <javadoc line="171">
                Returns the hostname, or the String form of the address if it
                  doesn&apos;t have a hostname (it was created using a literal).
                  This has the benefit of &lt;b&gt;not&lt;/b&gt; attemptimg a reverse lookup.                
                <return>
                    the hostname, or String representation of the address.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getHostString" type="String" line="178">
                <scope line="180"/>
            </method>
            <javadoc line="186">
                Checks whether the address has been resolved or not.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the hostname couldn&apos;t be resolved into
                      an &lt;code&gt;InetAddress&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="isUnresolved" type="boolean" line="191"/>
            <javadoc line="194">
                Constructs a string representation of this InetSocketAddress.
                  This String is constructed by calling toString() on the InetAddress
                  and concatenating the port number (with a colon). If the address
                  is unresolved then the part before the colon will only contain the hostname.                
                <return>
                    a string representation of this object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="201">
                <scope line="202"/>
                <scope line="205"/>
            </method>
            <javadoc line="209">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is
                  not &lt;code&gt;null&lt;/code&gt; and it represents the same address as
                  this object.
                  &lt;p&gt;
                  Two instances of &lt;code&gt;InetSocketAddress&lt;/code&gt; represent the same
                  address if both the InetAddresses (or hostnames if it is unresolved) and port
                  numbers are equal.
                  If both addresses are unresolved, then the hostname &amp; the port number
                  are compared.
                  Note: Hostnames are case insensitive. e.g. &quot;FooBar&quot; and &quot;foobar&quot; are
                  considered equal.                
                <param>
                    obj   the object to compare against.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are the same;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.net.InetAddress#equals(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="227">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="sockAddr" type="InetSocketAddress" line="229"/>
                <declaration name="sameIP" type="boolean" line="230"/>
            </method>
            <javadoc line="236">
                Returns a hashcode for this socket address.                
                <return>
                    a hash code value for this socket address.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="240"/>
        </class>
    </source>