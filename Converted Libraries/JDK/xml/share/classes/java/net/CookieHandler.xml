<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.io.IOException"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="CookieHandler" line="6">
            <javadoc line="6">
                A CookieHandler object provides a callback mechanism to hook up a
                  HTTP state management policy implementation into the HTTP protocol
                  handler. The HTTP state management mechanism specifies a way to
                  create a stateful session with HTTP requests and responses.
                  &lt;p&gt;A system-wide CookieHandler that to used by the HTTP protocol
                  handler can be registered by doing a
                  CookieHandler.setDefault(CookieHandler). The currently registered
                  CookieHandler can be retrieved by calling
                  CookieHandler.getDefault().
                  For more information on HTTP state management, see &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2965.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2965: HTTP
                  State Management Mechanism&lt;/i&gt;&lt;/a&gt;                
                <author>
                    Yingxian Wang                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="cookieHandler" type="CookieHandler" line="23"/>
            <javadoc line="23">
                The system-wide cookie handler that will apply cookies to the
                  request headers and manage cookies from the response headers.                
                <see>
                    setDefault(CookieHandler)                    
                </see>
                <see>
                    getDefault()                    
                </see>
            </javadoc>
            <javadoc line="30">
                Gets the system-wide cookie handler.                
                <return>
                    the system-wide cookie handler; A null return means
                      there is no system-wide cookie handler currently set.                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link NetPermission}&lt;tt&gt;(&quot;getCookieHandler&quot;)&lt;/tt&gt;                    
                </throws>
                <see>
                    #setDefault(CookieHandler)                    
                </see>
            </javadoc>
            <method name="getDefault" type="CookieHandler" line="37">
                <declaration name="sm" type="SecurityManager" line="38"/>
                <scope line="39"/>
            </method>
            <javadoc line="44">
                Sets (or unsets) the system-wide cookie handler.
                  Note: non-standard http protocol handlers may ignore this setting.                
                <param>
                    cHandler The HTTP cookie handler, or
                      &lt;code&gt;null&lt;/code&gt; to unset.                    
                </param>
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link NetPermission}&lt;tt&gt;(&quot;setCookieHandler&quot;)&lt;/tt&gt;                    
                </throws>
                <see>
                    #getDefault()                    
                </see>
            </javadoc>
            <method name="setDefault" type="void" line="52">
                <params>
                    <param name="cHandler" type="CookieHandler"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="53"/>
                <scope line="54"/>
            </method>
            <method name="get" type="Map&lt;String,List&lt;String&gt;&gt;" line="59"/>
            <javadoc line="59">
                Gets all the applicable cookies from a cookie cache for the
                  specified uri in the request header.
                  &lt;P&gt;The {@code URI} passed as an argument specifies the intended use for
                  the cookies. In particular the scheme should reflect whether the cookies
                  will be sent over http, https or used in another context like javascript.
                  The host part should reflect either the destination of the cookies or
                  their origin in the case of javascript.&lt;/P&gt;
                  &lt;P&gt;It is up to the implementation to take into account the {@code URI} and
                  the cookies attributes and security settings to determine which ones
                  should be returned.&lt;/P&gt;
                  &lt;P&gt;HTTP protocol implementers should make sure that this method is
                  called after all request headers related to choosing cookies
                  are added, and before the request is sent.&lt;/P&gt;                
                <param>
                    uri a &lt;code&gt;URI&lt;/code&gt; representing the intended use for the
                      cookies                    
                </param>
                <param>
                    requestHeaders - a Map from request header
                      field names to lists of field values representing
                      the current request headers                    
                </param>
                <return>
                    an immutable map from state management headers, with
                      field names &quot;Cookie&quot; or &quot;Cookie2&quot; to a list of
                      cookies containing state information                    
                </return>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if either argument is null                    
                </throws>
                <see>
                    #put(URI,Map)                    
                </see>
            </javadoc>
            <method name="put" type="void" line="86"/>
            <javadoc line="86">
                Sets all the applicable cookies, examples are response header
                  fields that are named Set-Cookie2, present in the response
                  headers into a cookie cache.                
                <param>
                    uri a &lt;code&gt;URI&lt;/code&gt; where the cookies come from                    
                </param>
                <param>
                    responseHeaders an immutable map from field names to
                      lists of field values representing the response
                      header fields returned                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if either argument is null                    
                </throws>
                <see>
                    #get(URI,Map)                    
                </see>
            </javadoc>
        </class>
    </source>