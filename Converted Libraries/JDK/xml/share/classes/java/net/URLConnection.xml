<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Date"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.security.Permission"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.net.www.MessageHeader"/>
        <class name="URLConnection" line="15">
            <javadoc line="15">
                The abstract class &lt;code&gt;URLConnection&lt;/code&gt; is the superclass
                  of all classes that represent a communications link between the
                  application and a URL. Instances of this class can be used both to
                  read from and to write to the resource referenced by the URL. In
                  general, creating a connection to a URL is a multistep process:
                  &lt;p&gt;
                  &lt;center&gt;&lt;table border=2 summary=&quot;Describes the process of creating a connection to a URL: openConnection() and connect() over time.&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;&lt;code&gt;openConnection()&lt;/code&gt;&lt;/th&gt;
                  &lt;th&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;Manipulate parameters that affect the connection to the remote
                  resource.&lt;/td&gt;
                  &lt;td&gt;Interact with the resource; query header fields and
                  contents.&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  ----------------------------&amp;gt;
                  &lt;br&gt;time&lt;/center&gt;
                  &lt;ol&gt;
                  &lt;li&gt;The connection object is created by invoking the
                  &lt;code&gt;openConnection&lt;/code&gt; method on a URL.
                  &lt;li&gt;The setup parameters and general request properties are manipulated.
                  &lt;li&gt;The actual connection to the remote object is made, using the
                  &lt;code&gt;connect&lt;/code&gt; method.
                  &lt;li&gt;The remote object becomes available. The header fields and the contents
                  of the remote object can be accessed.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  The setup parameters are modified using the following methods:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;setAllowUserInteraction&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;setDoInput&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;setDoOutput&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;setIfModifiedSince&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;setUseCaches&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  and the general request properties are modified using the method:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;setRequestProperty&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Default values for the &lt;code&gt;AllowUserInteraction&lt;/code&gt; and
                  &lt;code&gt;UseCaches&lt;/code&gt; parameters can be set using the methods
                  &lt;code&gt;setDefaultAllowUserInteraction&lt;/code&gt; and
                  &lt;code&gt;setDefaultUseCaches&lt;/code&gt;.
                  &lt;p&gt;
                  Each of the above &lt;code&gt;set&lt;/code&gt; methods has a corresponding
                  &lt;code&gt;get&lt;/code&gt; method to retrieve the value of the parameter or
                  general request property. The specific parameters and general
                  request properties that are applicable are protocol specific.
                  &lt;p&gt;
                  The following methods are used to access the header fields and
                  the contents after the connection is made to the remote object:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;getContent&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getHeaderField&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getInputStream&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getOutputStream&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Certain header fields are accessed frequently. The methods:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;getContentEncoding&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getContentLength&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getContentType&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getDate&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getExpiration&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getLastModifed&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  provide convenient access to these fields. The
                  &lt;code&gt;getContentType&lt;/code&gt; method is used by the
                  &lt;code&gt;getContent&lt;/code&gt; method to determine the type of the remote
                  object; subclasses may find it convenient to override the
                  &lt;code&gt;getContentType&lt;/code&gt; method.
                  &lt;p&gt;
                  In the common case, all of the pre-connection parameters and
                  general request properties can be ignored: the pre-connection
                  parameters and request properties default to sensible values. For
                  most clients of this interface, there are only two interesting
                  methods: &lt;code&gt;getInputStream&lt;/code&gt; and &lt;code&gt;getContent&lt;/code&gt;,
                  which are mirrored in the &lt;code&gt;URL&lt;/code&gt; class by convenience methods.
                  &lt;p&gt;
                  More information on the request properties and header fields of
                  an &lt;code&gt;http&lt;/code&gt; connection can be found at:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;http://www.ietf.org/rfc/rfc2616.txt&lt;/a&gt;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  Note about &lt;code&gt;fileNameMap&lt;/code&gt;: In versions prior to JDK 1.1.6,
                  field &lt;code&gt;fileNameMap&lt;/code&gt; of &lt;code&gt;URLConnection&lt;/code&gt; was public.
                  In JDK 1.1.6 and later, &lt;code&gt;fileNameMap&lt;/code&gt; is private; accessor
                  and mutator methods {@link #getFileNameMap() getFileNameMap} and{@link #setFileNameMap(java.net.FileNameMap) setFileNameMap} are added
                  to access it.  This change is also described on the &lt;a href=
                  &quot;http://java.sun.com/products/jdk/1.2/compatibility.html&quot;&gt;
                  Compatibility&lt;/a&gt; page.
                  Invoking the &lt;tt&gt;close()&lt;/tt&gt; methods on the &lt;tt&gt;InputStream&lt;/tt&gt; or &lt;tt&gt;OutputStream&lt;/tt&gt; of an
                  &lt;tt&gt;URLConnection&lt;/tt&gt; after a request may free network resources associated with this
                  instance, unless particular protocol specifications specify different behaviours
                  for it.                
                <author>
                    James Gosling                    
                </author>
                <see>
                    java.net.URL#openConnection()                    
                </see>
                <see>
                    java.net.URLConnection#connect()                    
                </see>
                <see>
                    java.net.URLConnection#getContent()                    
                </see>
                <see>
                    java.net.URLConnection#getContentEncoding()                    
                </see>
                <see>
                    java.net.URLConnection#getContentLength()                    
                </see>
                <see>
                    java.net.URLConnection#getContentType()                    
                </see>
                <see>
                    java.net.URLConnection#getDate()                    
                </see>
                <see>
                    java.net.URLConnection#getExpiration()                    
                </see>
                <see>
                    java.net.URLConnection#getHeaderField(int)                    
                </see>
                <see>
                    java.net.URLConnection#getHeaderField(java.lang.String)                    
                </see>
                <see>
                    java.net.URLConnection#getInputStream()                    
                </see>
                <see>
                    java.net.URLConnection#getLastModified()                    
                </see>
                <see>
                    java.net.URLConnection#getOutputStream()                    
                </see>
                <see>
                    java.net.URLConnection#setAllowUserInteraction(boolean)                    
                </see>
                <see>
                    java.net.URLConnection#setDefaultUseCaches(boolean)                    
                </see>
                <see>
                    java.net.URLConnection#setDoInput(boolean)                    
                </see>
                <see>
                    java.net.URLConnection#setDoOutput(boolean)                    
                </see>
                <see>
                    java.net.URLConnection#setIfModifiedSince(long)                    
                </see>
                <see>
                    java.net.URLConnection#setRequestProperty(java.lang.String,java.lang.String)                    
                </see>
                <see>
                    java.net.URLConnection#setUseCaches(boolean)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="url" type="URL" line="138"/>
            <javadoc line="138">
                The URL represents the remote object on the World Wide Web to
                  which this connection is opened.
                  &lt;p&gt;
                  The value of this field can be accessed by the
                  &lt;code&gt;getURL&lt;/code&gt; method.
                  &lt;p&gt;
                  The default value of this variable is the value of the URL
                  argument in the &lt;code&gt;URLConnection&lt;/code&gt; constructor.                
                <see>
                    java.net.URLConnection#getURL()                    
                </see>
                <see>
                    java.net.URLConnection#url                    
                </see>
            </javadoc>
            <declaration name="doInput" type="boolean" line="151"/>
            <javadoc line="151">
                This variable is set by the &lt;code&gt;setDoInput&lt;/code&gt; method. Its
                  value is returned by the &lt;code&gt;getDoInput&lt;/code&gt; method.
                  &lt;p&gt;
                  A URL connection can be used for input and/or output. Setting the
                  &lt;code&gt;doInput&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; indicates that
                  the application intends to read data from the URL connection.
                  &lt;p&gt;
                  The default value of this field is &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    java.net.URLConnection#getDoInput()                    
                </see>
                <see>
                    java.net.URLConnection#setDoInput(boolean)                    
                </see>
            </javadoc>
            <declaration name="doOutput" type="boolean" line="164"/>
            <javadoc line="164">
                This variable is set by the &lt;code&gt;setDoOutput&lt;/code&gt; method. Its
                  value is returned by the &lt;code&gt;getDoOutput&lt;/code&gt; method.
                  &lt;p&gt;
                  A URL connection can be used for input and/or output. Setting the
                  &lt;code&gt;doOutput&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; indicates
                  that the application intends to write data to the URL connection.
                  &lt;p&gt;
                  The default value of this field is &lt;code&gt;false&lt;/code&gt;.                
                <see>
                    java.net.URLConnection#getDoOutput()                    
                </see>
                <see>
                    java.net.URLConnection#setDoOutput(boolean)                    
                </see>
            </javadoc>
            <declaration name="defaultAllowUserInteraction" type="boolean" line="177"/>
            <declaration name="allowUserInteraction" type="boolean" line="178"/>
            <javadoc line="178">
                If &lt;code&gt;true&lt;/code&gt;, this &lt;code&gt;URL&lt;/code&gt; is being examined in
                  a context in which it makes sense to allow user interactions such
                  as popping up an authentication dialog. If &lt;code&gt;false&lt;/code&gt;,
                  then no user interaction is allowed.
                  &lt;p&gt;
                  The value of this field can be set by the
                  &lt;code&gt;setAllowUserInteraction&lt;/code&gt; method.
                  Its value is returned by the
                  &lt;code&gt;getAllowUserInteraction&lt;/code&gt; method.
                  Its default value is the value of the argument in the last invocation
                  of the &lt;code&gt;setDefaultAllowUserInteraction&lt;/code&gt; method.                
                <see>
                    java.net.URLConnection#getAllowUserInteraction()                    
                </see>
                <see>
                    java.net.URLConnection#setAllowUserInteraction(boolean)                    
                </see>
                <see>
                    java.net.URLConnection#setDefaultAllowUserInteraction(boolean)                    
                </see>
            </javadoc>
            <declaration name="defaultUseCaches" type="boolean" line="195"/>
            <declaration name="useCaches" type="boolean" line="196"/>
            <javadoc line="196">
                If &lt;code&gt;true&lt;/code&gt;, the protocol is allowed to use caching
                  whenever it can. If &lt;code&gt;false&lt;/code&gt;, the protocol must always
                  try to get a fresh copy of the object.
                  &lt;p&gt;
                  This field is set by the &lt;code&gt;setUseCaches&lt;/code&gt; method. Its
                  value is returned by the &lt;code&gt;getUseCaches&lt;/code&gt; method.
                  &lt;p&gt;
                  Its default value is the value given in the last invocation of the
                  &lt;code&gt;setDefaultUseCaches&lt;/code&gt; method.                
                <see>
                    java.net.URLConnection#setUseCaches(boolean)                    
                </see>
                <see>
                    java.net.URLConnection#getUseCaches()                    
                </see>
                <see>
                    java.net.URLConnection#setDefaultUseCaches(boolean)                    
                </see>
            </javadoc>
            <declaration name="ifModifiedSince" type="long" line="211"/>
            <javadoc line="211">
                Some protocols support skipping the fetching of the object unless
                  the object has been modified more recently than a certain time.
                  &lt;p&gt;
                  A nonzero value gives a time as the number of milliseconds since
                  January 1, 1970, GMT. The object is fetched only if it has been
                  modified more recently than that time.
                  &lt;p&gt;
                  This variable is set by the &lt;code&gt;setIfModifiedSince&lt;/code&gt;
                  method. Its value is returned by the
                  &lt;code&gt;getIfModifiedSince&lt;/code&gt; method.
                  &lt;p&gt;
                  The default value of this field is &lt;code&gt;0&lt;/code&gt;, indicating
                  that the fetching must always occur.                
                <see>
                    java.net.URLConnection#getIfModifiedSince()                    
                </see>
                <see>
                    java.net.URLConnection#setIfModifiedSince(long)                    
                </see>
            </javadoc>
            <declaration name="connected" type="boolean" line="229"/>
            <javadoc line="229">
                If &lt;code&gt;false&lt;/code&gt;, this connection object has not created a
                  communications link to the specified URL. If &lt;code&gt;true&lt;/code&gt;,
                  the communications link has been established.                
            </javadoc>
            <declaration name="connectTimeout" type="int" line="235"/>
            <javadoc line="235">
                @since 1.5                
            </javadoc>
            <declaration name="readTimeout" type="int" line="239"/>
            <declaration name="requests" type="MessageHeader" line="240"/>
            <javadoc line="240">
                @since 1.6                
            </javadoc>
            <declaration name="fileNameMap" type="FileNameMap" line="244"/>
            <javadoc line="244">
                @since   JDK1.1                
            </javadoc>
            <declaration name="fileNameMapLoaded" type="boolean" line="248"/>
            <javadoc line="248">
                @since 1.2.2                
            </javadoc>
            <javadoc line="252">
                Loads filename map (a mimetable) from a data file. It will
                  first try to load the user-specific table, defined
                  by &amp;quot;content.types.user.table&amp;quot; property. If that fails,
                  it tries to load the default built-in table at
                  lib/content-types.properties under java home.                
                <return>
                    the FileNameMap                    
                </return>
                <since>
                    1.2                    
                </since>
                <see>
                    #setFileNameMap(java.net.FileNameMap)                    
                </see>
            </javadoc>
            <method name="getFileNameMap" type="FileNameMap" line="262">
                <scope line="263"/>
                <anonymous_class line="267">
                    <declaration name="map" type="FileNameMap" line="268"/>
                    <method name="getContentTypeFor" type="String" line="269">
                        <params>
                            <param name="fileName" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="275">
                Sets the FileNameMap.
                  &lt;p&gt;
                  If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkSetFactory&lt;/code&gt; method
                  to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    map the FileNameMap to be set                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSetFactory</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkSetFactory                    
                </see>
                <see>
                    #getFileNameMap()                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setFileNameMap" type="void" line="289">
                <params>
                    <param name="map" type="FileNameMap"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="290"/>
            </method>
            <method name="connect" type="void" line="294"/>
            <javadoc line="294">
                Opens a communications link to the resource referenced by this
                  URL, if such a connection has not already been established.
                  &lt;p&gt;
                  If the &lt;code&gt;connect&lt;/code&gt; method is called when the connection
                  has already been opened (indicated by the &lt;code&gt;connected&lt;/code&gt;
                  field having the value &lt;code&gt;true&lt;/code&gt;), the call is ignored.
                  &lt;p&gt;
                  URLConnection objects go through two phases: first they are
                  created, then they are connected.  After being created, and
                  before being connected, various options can be specified
                  (e.g., doInput and UseCaches).  After connecting, it is an
                  error to try to set them.  Operations that depend on being
                  connected, like getContentLength, will implicitly perform the
                  connection, if necessary.                
                <throws>
                    SocketTimeoutException if the timeout expires before
                      the connection can be established                    
                </throws>
                <exception>
                    IOException  if an I/O error occurs while opening the
                      connection.                    
                </exception>
                <see>
                    java.net.URLConnection#connected                    
                </see>
                <see>
                    #getConnectTimeout()                    
                </see>
                <see>
                    #setConnectTimeout(int)                    
                </see>
            </javadoc>
            <javadoc line="318">
                Sets a specified timeout value, in milliseconds, to be used
                  when opening a communications link to the resource referenced
                  by this URLConnection.  If the timeout expires before the
                  connection can be established, a
                  java.net.SocketTimeoutException is raised. A timeout of zero is
                  interpreted as an infinite timeout.
                  &lt;p&gt; Some non-standard implmentation of this method may ignore
                  the specified timeout. To see the connect timeout set, please
                  call getConnectTimeout().                
                <param>
                    timeout an <code>int</code> that specifies the connect
                      timeout value in milliseconds                    
                </param>
                <throws>
                    IllegalArgumentException if the timeout parameter is negative                    
                </throws>
                <see>
                    #getConnectTimeout()                    
                </see>
                <see>
                    #connect()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setConnectTimeout" type="void" line="335">
                <params>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="336"/>
            </method>
            <javadoc line="341">
                Returns setting for connect timeout.
                  &lt;p&gt;
                  0 return implies that the option is disabled
                  (i.e., timeout of infinity).                
                <return>
                    an <code>int</code> that indicates the connect timeout
                      value in milliseconds                    
                </return>
                <see>
                    #setConnectTimeout(int)                    
                </see>
                <see>
                    #connect()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getConnectTimeout" type="int" line="352"/>
            <javadoc line="355">
                Sets the read timeout to a specified timeout, in
                  milliseconds. A non-zero value specifies the timeout when
                  reading from Input stream when a connection is established to a
                  resource. If the timeout expires before there is data available
                  for read, a java.net.SocketTimeoutException is raised. A
                  timeout of zero is interpreted as an infinite timeout.
                  &lt;p&gt; Some non-standard implementation of this method ignores the
                  specified timeout. To see the read timeout set, please call
                  getReadTimeout().                
                <param>
                    timeout an <code>int</code> that specifies the timeout
                      value to be used in milliseconds                    
                </param>
                <throws>
                    IllegalArgumentException if the timeout parameter is negative                    
                </throws>
                <see>
                    #getReadTimeout()                    
                </see>
                <see>
                    InputStream#read()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setReadTimeout" type="void" line="372">
                <params>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="373"/>
            </method>
            <javadoc line="378">
                Returns setting for read timeout. 0 return implies that the
                  option is disabled (i.e., timeout of infinity).                
                <return>
                    an <code>int</code> that indicates the read timeout
                      value in milliseconds                    
                </return>
                <see>
                    #setReadTimeout(int)                    
                </see>
                <see>
                    InputStream#read()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getReadTimeout" type="int" line="387"/>
            <javadoc line="390">
                Constructs a URL connection to the specified URL. A connection to
                  the object referenced by the URL is not created.                
                <param>
                    url   the specified URL.                    
                </param>
            </javadoc>
            <method name="URLConnection" type="constructor" line="395">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="398">
                Returns the value of this &lt;code&gt;URLConnection&lt;/code&gt;&apos;s &lt;code&gt;URL&lt;/code&gt;
                  field.                
                <return>
                    the value of this <code>URLConnection</code>'s <code>URL</code>
                      field.                    
                </return>
                <see>
                    java.net.URLConnection#url                    
                </see>
            </javadoc>
            <method name="getURL" type="URL" line="405"/>
            <javadoc line="408">
                Returns the value of the &lt;code&gt;content-length&lt;/code&gt; header field.
                  &lt;P&gt;
                  &lt;B&gt;Note&lt;/B&gt;: {@link #getContentLengthLong() getContentLengthLong()}should be preferred over this method, since it returns a {@code long}instead and is therefore more portable.&lt;/P&gt;                
                <return>
                    the content length of the resource that this connection's URL
                      references, {@code -1} if the content length is not known,
                      or if the content length is greater than Integer.MAX_VALUE.                    
                </return>
            </javadoc>
            <method name="getContentLength" type="int" line="416">
                <declaration name="l" type="long" line="417"/>
            </method>
            <javadoc line="421">
                Returns the value of the &lt;code&gt;content-length&lt;/code&gt; header field as a
                  long.                
                <return>
                    the content length of the resource that this connection's URL
                      references, or <code>-1</code> if the content length is
                      not known.                    
                </return>
                <since>
                    7.0                    
                </since>
            </javadoc>
            <method name="getContentLengthLong" type="long" line="429"/>
            <javadoc line="432">
                Returns the value of the &lt;code&gt;content-type&lt;/code&gt; header field.                
                <return>
                    the content type of the resource that the URL references,
                      or <code>null</code> if not known.                    
                </return>
                <see>
                    java.net.URLConnection#getHeaderField(java.lang.String)                    
                </see>
            </javadoc>
            <method name="getContentType" type="String" line="438"/>
            <javadoc line="441">
                Returns the value of the &lt;code&gt;content-encoding&lt;/code&gt; header field.                
                <return>
                    the content encoding of the resource that the URL references,
                      or <code>null</code> if not known.                    
                </return>
                <see>
                    java.net.URLConnection#getHeaderField(java.lang.String)                    
                </see>
            </javadoc>
            <method name="getContentEncoding" type="String" line="447"/>
            <javadoc line="450">
                Returns the value of the &lt;code&gt;expires&lt;/code&gt; header field.                
                <return>
                    the expiration date of the resource that this URL references,
                      or 0 if not known. The value is the number of milliseconds since
                      January 1, 1970 GMT.                    
                </return>
                <see>
                    java.net.URLConnection#getHeaderField(java.lang.String)                    
                </see>
            </javadoc>
            <method name="getExpiration" type="long" line="457"/>
            <javadoc line="460">
                Returns the value of the &lt;code&gt;date&lt;/code&gt; header field.                
                <return>
                    the sending date of the resource that the URL references,
                      or <code>0</code> if not known. The value returned is the
                      number of milliseconds since January 1, 1970 GMT.                    
                </return>
                <see>
                    java.net.URLConnection#getHeaderField(java.lang.String)                    
                </see>
            </javadoc>
            <method name="getDate" type="long" line="467"/>
            <javadoc line="470">
                Returns the value of the &lt;code&gt;last-modified&lt;/code&gt; header field.
                  The result is the number of milliseconds since January 1, 1970 GMT.                
                <return>
                    the date the resource referenced by this
                      <code>URLConnection</code> was last modified, or 0 if not known.                    
                </return>
                <see>
                    java.net.URLConnection#getHeaderField(java.lang.String)                    
                </see>
            </javadoc>
            <method name="getLastModified" type="long" line="477"/>
            <javadoc line="480">
                Returns the value of the named header field.
                  &lt;p&gt;
                  If called on a connection that sets the same header multiple times
                  with possibly different values, only the last value is returned.                
                <param>
                    name   the name of a header field.                    
                </param>
                <return>
                    the value of the named header field, or <code>null</code>
                      if there is no such field in the header.                    
                </return>
            </javadoc>
            <method name="getHeaderField" type="String" line="489">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="492">
                Returns an unmodifiable Map of the header fields.
                  The Map keys are Strings that represent the
                  response-header field names. Each Map value is an
                  unmodifiable List of Strings that represents
                  the corresponding field values.                
                <return>
                    a Map of header fields                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHeaderFields" type="Map<String,List<String>>" line="501"/>
            <javadoc line="504">
                Returns the value of the named field parsed as a number.
                  &lt;p&gt;
                  This form of &lt;code&gt;getHeaderField&lt;/code&gt; exists because some
                  connection types (e.g., &lt;code&gt;http-ng&lt;/code&gt;) have pre-parsed
                  headers. Classes for that connection type can override this method
                  and short-circuit the parsing.                
                <param>
                    name      the name of the header field.                    
                </param>
                <param>
                    Default   the default value.                    
                </param>
                <return>
                    the value of the named field, parsed as an integer. The
                      <code>Default</code> value is returned if the field is
                      missing or malformed.                    
                </return>
            </javadoc>
            <method name="getHeaderFieldInt" type="int" line="517">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="int"/>
                </params>
                <declaration name="value" type="String" line="518"/>
                <scope line="519"/>
                <scope line="522"/>
            </method>
            <javadoc line="526">
                Returns the value of the named field parsed as a number.
                  &lt;p&gt;
                  This form of &lt;code&gt;getHeaderField&lt;/code&gt; exists because some
                  connection types (e.g., &lt;code&gt;http-ng&lt;/code&gt;) have pre-parsed
                  headers. Classes for that connection type can override this method
                  and short-circuit the parsing.                
                <param>
                    name      the name of the header field.                    
                </param>
                <param>
                    Default   the default value.                    
                </param>
                <return>
                    the value of the named field, parsed as a long. The
                      <code>Default</code> value is returned if the field is
                      missing or malformed.                    
                </return>
                <since>
                    7.0                    
                </since>
            </javadoc>
            <method name="getHeaderFieldLong" type="long" line="540">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="long"/>
                </params>
                <declaration name="value" type="String" line="541"/>
                <scope line="542"/>
                <scope line="545"/>
            </method>
            <javadoc line="549">
                Returns the value of the named field parsed as date.
                  The result is the number of milliseconds since January 1, 1970 GMT
                  represented by the named field.
                  &lt;p&gt;
                  This form of &lt;code&gt;getHeaderField&lt;/code&gt; exists because some
                  connection types (e.g., &lt;code&gt;http-ng&lt;/code&gt;) have pre-parsed
                  headers. Classes for that connection type can override this method
                  and short-circuit the parsing.                
                <param>
                    name     the name of the header field.                    
                </param>
                <param>
                    Default   a default value.                    
                </param>
                <return>
                    the value of the field, parsed as a date. The value of the
                      <code>Default</code> argument is returned if the field is
                      missing or malformed.                    
                </return>
            </javadoc>
            <method name="getHeaderFieldDate" type="long" line="564">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="long"/>
                </params>
                <declaration name="value" type="String" line="565"/>
                <scope line="566"/>
                <scope line="569"/>
            </method>
            <javadoc line="573">
                Returns the key for the &lt;code&gt;n&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; header field.
                  It returns &lt;code&gt;null&lt;/code&gt; if there are fewer than &lt;code&gt;n+1&lt;/code&gt; fields.                
                <param>
                    n   an index, where n>=0                    
                </param>
                <return>
                    the key for the <code>n</code><sup>th</sup> header field,
                      or <code>null</code> if there are fewer than <code>n+1</code>
                      fields.                    
                </return>
            </javadoc>
            <method name="getHeaderFieldKey" type="String" line="581">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="584">
                Returns the value for the &lt;code&gt;n&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; header field.
                  It returns &lt;code&gt;null&lt;/code&gt; if there are fewer than
                  &lt;code&gt;n+1&lt;/code&gt;fields.
                  &lt;p&gt;
                  This method can be used in conjunction with the{@link #getHeaderFieldKey(int) getHeaderFieldKey} method to iterate through all
                  the headers in the message.                
                <param>
                    n   an index, where n>=0                    
                </param>
                <return>
                    the value of the <code>n</code><sup>th</sup> header field
                      or <code>null</code> if there are fewer than <code>n+1</code> fields                    
                </return>
                <see>
                    java.net.URLConnection#getHeaderFieldKey(int)                    
                </see>
            </javadoc>
            <method name="getHeaderField" type="String" line="596">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="599">
                Retrieves the contents of this URL connection.
                  &lt;p&gt;
                  This method first determines the content type of the object by
                  calling the &lt;code&gt;getContentType&lt;/code&gt; method. If this is
                  the first time that the application has seen that specific content
                  type, a content handler for that content type is created:
                  &lt;ol&gt;
                  &lt;li&gt;If the application has set up a content handler factory instance
                  using the &lt;code&gt;setContentHandlerFactory&lt;/code&gt; method, the
                  &lt;code&gt;createContentHandler&lt;/code&gt; method of that instance is called
                  with the content type as an argument; the result is a content
                  handler for that content type.
                  &lt;li&gt;If no content handler factory has yet been set up, or if the
                  factory&apos;s &lt;code&gt;createContentHandler&lt;/code&gt; method returns
                  &lt;code&gt;null&lt;/code&gt;, then the application loads the class named:
                  &lt;blockquote&gt;&lt;pre&gt;
                  sun.net.www.content.&amp;lt;&lt;i&gt;contentType&lt;/i&gt;&amp;gt;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  where &amp;lt;&lt;i&gt;contentType&lt;/i&gt;&amp;gt; is formed by taking the
                  content-type string, replacing all slash characters with a
                  &lt;code&gt;period&lt;/code&gt; (&apos;.&apos;), and all other non-alphanumeric characters
                  with the underscore character &apos;&lt;code&gt;_&lt;/code&gt;&apos;. The alphanumeric
                  characters are specifically the 26 uppercase ASCII letters
                  &apos;&lt;code&gt;A&lt;/code&gt;&apos; through &apos;&lt;code&gt;Z&lt;/code&gt;&apos;, the 26 lowercase ASCII
                  letters &apos;&lt;code&gt;a&lt;/code&gt;&apos; through &apos;&lt;code&gt;z&lt;/code&gt;&apos;, and the 10 ASCII
                  digits &apos;&lt;code&gt;0&lt;/code&gt;&apos; through &apos;&lt;code&gt;9&lt;/code&gt;&apos;. If the specified
                  class does not exist, or is not a subclass of
                  &lt;code&gt;ContentHandler&lt;/code&gt;, then an
                  &lt;code&gt;UnknownServiceException&lt;/code&gt; is thrown.
                  &lt;/ol&gt;                
                <return>
                    the object fetched. The <code>instanceof</code> operator
                      should be used to determine the specific kind of object
                      returned.                    
                </return>
                <exception>
                    IOException              if an I/O error occurs while
                      getting the content.                    
                </exception>
                <exception>
                    UnknownServiceException  if the protocol does not support
                      the content type.                    
                </exception>
                <see>
                    java.net.ContentHandlerFactory#createContentHandler(java.lang.String)                    
                </see>
                <see>
                    java.net.URLConnection#getContentType()                    
                </see>
                <see>
                    java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)                    
                </see>
            </javadoc>
            <method name="getContent" type="Object" line="641"/>
            <javadoc line="645">
                Retrieves the contents of this URL connection.                
                <param>
                    classes the <code>Class</code> array
                      indicating the requested types                    
                </param>
                <return>
                    the object fetched that is the first match of the type
                      specified in the classes array. null if none of
                      the requested types are supported.
                      The <code>instanceof</code> operator should be used to
                      determine the specific kind of object returned.                    
                </return>
                <exception>
                    IOException              if an I/O error occurs while
                      getting the content.                    
                </exception>
                <exception>
                    UnknownServiceException  if the protocol does not support
                      the content type.                    
                </exception>
                <see>
                    java.net.URLConnection#getContent()                    
                </see>
                <see>
                    java.net.ContentHandlerFactory#createContentHandler(java.lang.String)                    
                </see>
                <see>
                    java.net.URLConnection#getContent(java.lang.Class[])                    
                </see>
                <see>
                    java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getContent" type="Object" line="664">
                <params>
                    <param name="classes" type="Class[]"/>
                </params>
            </method>
            <javadoc line="668">
                Returns a permission object representing the permission
                  necessary to make the connection represented by this
                  object. This method returns null if no permission is
                  required to make the connection. By default, this method
                  returns &lt;code&gt;java.security.AllPermission&lt;/code&gt;. Subclasses
                  should override this method and return the permission
                  that best represents the permission required to make a
                  a connection to the URL. For example, a &lt;code&gt;URLConnection&lt;/code&gt;
                  representing a &lt;code&gt;file:&lt;/code&gt; URL would return a
                  &lt;code&gt;java.io.FilePermission&lt;/code&gt; object.
                  &lt;p&gt;The permission returned may dependent upon the state of the
                  connection. For example, the permission before connecting may be
                  different from that after connecting. For example, an HTTP
                  sever, say foo.com, may redirect the connection to a different
                  host, say bar.com. Before connecting the permission returned by
                  the connection will represent the permission needed to connect
                  to foo.com, while the permission returned after connecting will
                  be to bar.com.
                  &lt;p&gt;Permissions are generally used for two purposes: to protect
                  caches of objects obtained through URLConnections, and to check
                  the right of a recipient to learn about a particular URL. In
                  the first case, the permission should be obtained
                  &lt;em&gt;after&lt;/em&gt; the object has been obtained. For example, in an
                  HTTP connection, this will represent the permission to connect
                  to the host from which the data was ultimately fetched. In the
                  second case, the permission should be obtained and tested
                  &lt;em&gt;before&lt;/em&gt; connecting.                
                <return>
                    the permission object representing the permission
                      necessary to make the connection represented by this
                      URLConnection.                    
                </return>
                <exception>
                    IOException if the computation of the permission
                      requires network or file I/O and an exception occurs while
                      computing it.                    
                </exception>
            </javadoc>
            <method name="getPermission" type="Permission" line="703"/>
            <javadoc line="706">
                Returns an input stream that reads from this open connection.
                  A SocketTimeoutException can be thrown when reading from the
                  returned input stream if the read timeout expires before data
                  is available for read.                
                <return>
                    an input stream that reads from this open connection.                    
                </return>
                <exception>
                    IOException              if an I/O error occurs while
                      creating the input stream.                    
                </exception>
                <exception>
                    UnknownServiceException  if the protocol does not support
                      input.                    
                </exception>
                <see>
                    #setReadTimeout(int)                    
                </see>
                <see>
                    #getReadTimeout()                    
                </see>
            </javadoc>
            <method name="getInputStream" type="InputStream" line="719"/>
            <javadoc line="722">
                Returns an output stream that writes to this connection.                
                <return>
                    an output stream that writes to this connection.                    
                </return>
                <exception>
                    IOException              if an I/O error occurs while
                      creating the output stream.                    
                </exception>
                <exception>
                    UnknownServiceException  if the protocol does not support
                      output.                    
                </exception>
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="730"/>
            <javadoc line="733">
                Returns a &lt;code&gt;String&lt;/code&gt; representation of this URL connection.                
                <return>
                    a string representation of this <code>URLConnection</code>.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="737"/>
            <javadoc line="740">
                Sets the value of the &lt;code&gt;doInput&lt;/code&gt; field for this
                  &lt;code&gt;URLConnection&lt;/code&gt; to the specified value.
                  &lt;p&gt;
                  A URL connection can be used for input and/or output.  Set the DoInput
                  flag to true if you intend to use the URL connection for input,
                  false if not.  The default is true.                
                <param>
                    doinput   the new value.                    
                </param>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <see>
                    java.net.URLConnection#doInput                    
                </see>
                <see>
                    #getDoInput()                    
                </see>
            </javadoc>
            <method name="setDoInput" type="void" line="752">
                <params>
                    <param name="doinput" type="boolean"/>
                </params>
            </method>
            <javadoc line="756">
                Returns the value of this &lt;code&gt;URLConnection&lt;/code&gt;&apos;s
                  &lt;code&gt;doInput&lt;/code&gt; flag.                
                <return>
                    the value of this <code>URLConnection</code>'s
                      <code>doInput</code> flag.                    
                </return>
                <see>
                    #setDoInput(boolean)                    
                </see>
            </javadoc>
            <method name="getDoInput" type="boolean" line="763"/>
            <javadoc line="766">
                Sets the value of the &lt;code&gt;doOutput&lt;/code&gt; field for this
                  &lt;code&gt;URLConnection&lt;/code&gt; to the specified value.
                  &lt;p&gt;
                  A URL connection can be used for input and/or output.  Set the DoOutput
                  flag to true if you intend to use the URL connection for output,
                  false if not.  The default is false.                
                <param>
                    dooutput   the new value.                    
                </param>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <see>
                    #getDoOutput()                    
                </see>
            </javadoc>
            <method name="setDoOutput" type="void" line="777">
                <params>
                    <param name="dooutput" type="boolean"/>
                </params>
            </method>
            <javadoc line="781">
                Returns the value of this &lt;code&gt;URLConnection&lt;/code&gt;&apos;s
                  &lt;code&gt;doOutput&lt;/code&gt; flag.                
                <return>
                    the value of this <code>URLConnection</code>'s
                      <code>doOutput</code> flag.                    
                </return>
                <see>
                    #setDoOutput(boolean)                    
                </see>
            </javadoc>
            <method name="getDoOutput" type="boolean" line="788"/>
            <javadoc line="791">
                Set the value of the &lt;code&gt;allowUserInteraction&lt;/code&gt; field of
                  this &lt;code&gt;URLConnection&lt;/code&gt;.                
                <param>
                    allowuserinteraction   the new value.                    
                </param>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <see>
                    #getAllowUserInteraction()                    
                </see>
            </javadoc>
            <method name="setAllowUserInteraction" type="void" line="798">
                <params>
                    <param name="allowuserinteraction" type="boolean"/>
                </params>
            </method>
            <javadoc line="802">
                Returns the value of the &lt;code&gt;allowUserInteraction&lt;/code&gt; field for
                  this object.                
                <return>
                    the value of the <code>allowUserInteraction</code> field for
                      this object.                    
                </return>
                <see>
                    #setAllowUserInteraction(boolean)                    
                </see>
            </javadoc>
            <method name="getAllowUserInteraction" type="boolean" line="809"/>
            <javadoc line="812">
                Sets the default value of the
                  &lt;code&gt;allowUserInteraction&lt;/code&gt; field for all future
                  &lt;code&gt;URLConnection&lt;/code&gt; objects to the specified value.                
                <param>
                    defaultallowuserinteraction   the new value.                    
                </param>
                <see>
                    #getDefaultAllowUserInteraction()                    
                </see>
            </javadoc>
            <method name="setDefaultAllowUserInteraction" type="void" line="819">
                <params>
                    <param name="defaultallowuserinteraction" type="boolean"/>
                </params>
            </method>
            <javadoc line="822">
                Returns the default value of the &lt;code&gt;allowUserInteraction&lt;/code&gt;
                  field.
                  &lt;p&gt;
                  Ths default is &quot;sticky&quot;, being a part of the static state of all
                  URLConnections.  This flag applies to the next, and all following
                  URLConnections that are created.                
                <return>
                    the default value of the <code>allowUserInteraction</code>
                      field.                    
                </return>
                <see>
                    #setDefaultAllowUserInteraction(boolean)                    
                </see>
            </javadoc>
            <method name="getDefaultAllowUserInteraction" type="boolean" line="833"/>
            <javadoc line="836">
                Sets the value of the &lt;code&gt;useCaches&lt;/code&gt; field of this
                  &lt;code&gt;URLConnection&lt;/code&gt; to the specified value.
                  &lt;p&gt;
                  Some protocols do caching of documents.  Occasionally, it is important
                  to be able to &quot;tunnel through&quot; and ignore the caches (e.g., the
                  &quot;reload&quot; button in a browser).  If the UseCaches flag on a connection
                  is true, the connection is allowed to use whatever caches it can.
                  If false, caches are to be ignored.
                  The default value comes from DefaultUseCaches, which defaults to
                  true.                
                <param>
                    usecaches a <code>boolean</code> indicating whether
                      or not to allow caching                    
                </param>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <see>
                    #getUseCaches()                    
                </see>
            </javadoc>
            <method name="setUseCaches" type="void" line="852">
                <params>
                    <param name="usecaches" type="boolean"/>
                </params>
            </method>
            <javadoc line="856">
                Returns the value of this &lt;code&gt;URLConnection&lt;/code&gt;&apos;s
                  &lt;code&gt;useCaches&lt;/code&gt; field.                
                <return>
                    the value of this <code>URLConnection</code>'s
                      <code>useCaches</code> field.                    
                </return>
                <see>
                    #setUseCaches(boolean)                    
                </see>
            </javadoc>
            <method name="getUseCaches" type="boolean" line="863"/>
            <javadoc line="866">
                Sets the value of the &lt;code&gt;ifModifiedSince&lt;/code&gt; field of
                  this &lt;code&gt;URLConnection&lt;/code&gt; to the specified value.                
                <param>
                    ifmodifiedsince   the new value.                    
                </param>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <see>
                    #getIfModifiedSince()                    
                </see>
            </javadoc>
            <method name="setIfModifiedSince" type="void" line="873">
                <params>
                    <param name="ifmodifiedsince" type="long"/>
                </params>
            </method>
            <javadoc line="877">
                Returns the value of this object&apos;s &lt;code&gt;ifModifiedSince&lt;/code&gt; field.                
                <return>
                    the value of this object's <code>ifModifiedSince</code> field.                    
                </return>
                <see>
                    #setIfModifiedSince(long)                    
                </see>
            </javadoc>
            <method name="getIfModifiedSince" type="long" line="882"/>
            <javadoc line="885">
                Returns the default value of a &lt;code&gt;URLConnection&lt;/code&gt;&apos;s
                  &lt;code&gt;useCaches&lt;/code&gt; flag.
                  &lt;p&gt;
                  Ths default is &quot;sticky&quot;, being a part of the static state of all
                  URLConnections.  This flag applies to the next, and all following
                  URLConnections that are created.                
                <return>
                    the default value of a <code>URLConnection</code>'s
                      <code>useCaches</code> flag.                    
                </return>
                <see>
                    #setDefaultUseCaches(boolean)                    
                </see>
            </javadoc>
            <method name="getDefaultUseCaches" type="boolean" line="896"/>
            <javadoc line="899">
                Sets the default value of the &lt;code&gt;useCaches&lt;/code&gt; field to the
                  specified value.                
                <param>
                    defaultusecaches   the new value.                    
                </param>
                <see>
                    #getDefaultUseCaches()                    
                </see>
            </javadoc>
            <method name="setDefaultUseCaches" type="void" line="905">
                <params>
                    <param name="defaultusecaches" type="boolean"/>
                </params>
            </method>
            <javadoc line="908">
                Sets the general request property. If a property with the key already
                  exists, overwrite its value with the new value.
                  &lt;p&gt; NOTE: HTTP requires all request properties which can
                  legally have multiple instances with the same key
                  to use a comma-seperated list syntax which enables multiple
                  properties to be appended into a single property.                
                <param>
                    key     the keyword by which the request is known
                      (e.g., "<code>Accept</code>").                    
                </param>
                <param>
                    value   the value associated with it.                    
                </param>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <throws>
                    NullPointerException if key is <CODE>null</CODE>                    
                </throws>
                <see>
                    #getRequestProperty(java.lang.String)                    
                </see>
            </javadoc>
            <method name="setRequestProperty" type="void" line="922">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="928">
                Adds a general request property specified by a
                  key-value pair.  This method will not overwrite
                  existing values associated with the same key.                
                <param>
                    key     the keyword by which the request is known
                      (e.g., "<code>Accept</code>").                    
                </param>
                <param>
                    value  the value associated with it.                    
                </param>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <throws>
                    NullPointerException if key is null                    
                </throws>
                <see>
                    #getRequestProperties()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addRequestProperty" type="void" line="940">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="946">
                Returns the value of the named general request property for this
                  connection.                
                <param>
                    key the keyword by which the request is known (e.g., "Accept").                    
                </param>
                <return>
                    the value of the named general request property for this
                      connection. If key is null, then null is returned.                    
                </return>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <see>
                    #setRequestProperty(java.lang.String,java.lang.String)                    
                </see>
            </javadoc>
            <method name="getRequestProperty" type="String" line="955">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="960">
                Returns an unmodifiable Map of general request
                  properties for this connection. The Map keys
                  are Strings that represent the request-header
                  field names. Each Map value is a unmodifiable List
                  of Strings that represents the corresponding
                  field values.                
                <return>
                    a Map of the general request properties for this connection.                    
                </return>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRequestProperties" type="Map<String,List<String>>" line="971"/>
            <javadoc line="976">
                Sets the default value of a general request property. When a
                  &lt;code&gt;URLConnection&lt;/code&gt; is created, it is initialized with
                  these properties.                
                <param>
                    key     the keyword by which the request is known
                      (e.g., "<code>Accept</code>").                    
                </param>
                <param>
                    value   the value associated with the key.                    
                </param>
                <see>
                    java.net.URLConnection#setRequestProperty(java.lang.String,java.lang.String)                    
                </see>
                <deprecated>
                    The instance specific setRequestProperty method
                      should be used after an appropriate instance of URLConnection
                      is obtained. Invoking this method will have no effect.                    
                </deprecated>
                <see>
                    #getDefaultRequestProperty(java.lang.String)                    
                </see>
            </javadoc>
            <method name="setDefaultRequestProperty" type="void" line="989">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="991">
                Returns the value of the default request property. Default request
                  properties are set for every connection.                
                <param>
                    key the keyword by which the request is known (e.g., "Accept").                    
                </param>
                <return>
                    the value of the default request property
                      for the specified key.                    
                </return>
                <see>
                    java.net.URLConnection#getRequestProperty(java.lang.String)                    
                </see>
                <deprecated>
                    The instance specific getRequestProperty method
                      should be used after an appropriate instance of URLConnection
                      is obtained.                    
                </deprecated>
                <see>
                    #setDefaultRequestProperty(java.lang.String,java.lang.String)                    
                </see>
            </javadoc>
            <method name="getDefaultRequestProperty" type="String" line="1003">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <declaration name="factory" type="ContentHandlerFactory" line="1006"/>
            <javadoc line="1006">
                The ContentHandler factory.                
            </javadoc>
            <javadoc line="1010">
                Sets the &lt;code&gt;ContentHandlerFactory&lt;/code&gt; of an
                  application. It can be called at most once by an application.
                  &lt;p&gt;
                  The &lt;code&gt;ContentHandlerFactory&lt;/code&gt; instance is used to
                  construct a content handler from a content type
                  &lt;p&gt;
                  If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkSetFactory&lt;/code&gt; method
                  to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    fac   the desired factory.                    
                </param>
                <exception>
                    Error  if the factory has already been defined.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSetFactory</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    java.net.ContentHandlerFactory                    
                </see>
                <see>
                    java.net.URLConnection#getContent()                    
                </see>
                <see>
                    SecurityManager#checkSetFactory                    
                </see>
            </javadoc>
            <method name="setContentHandlerFactory" type="void" line="1029">
                <params>
                    <param name="fac" type="ContentHandlerFactory"/>
                </params>
                <scope line="1030"/>
                <declaration name="security" type="SecurityManager" line="1033"/>
                <scope line="1034"/>
            </method>
            <declaration name="handlers" type="Hashtable" line="1039"/>
            <javadoc line="1040">
                Gets the Content Handler appropriate for this connection.                
                <param>
                    connection the connection to use.                    
                </param>
            </javadoc>
            <method name="getContentHandler" type="ContentHandler" line="1044">
                <declaration name="contentType" type="String" line="1045"/>
                <declaration name="handler" type="ContentHandler" line="1046"/>
                <scope line="1048"/>
                <scope line="1052"/>
                <scope line="1055">
                    <scope line="1056"/>
                    <scope line="1059"/>
                </scope>
            </method>
            <method name="stripOffParameters" type="String" line="1067">
                <params>
                    <param name="contentType" type="String"/>
                </params>
                <declaration name="index" type="int" line="1069"/>
            </method>
            <declaration name="contentClassPrefix" type="String" line="1073"/>
            <declaration name="contentPathProp" type="String" line="1074"/>
            <javadoc line="1075">
                Looks for a content handler in a user-defineable set of places.
                  By default it looks in sun.net.www.content, but users can define a
                  vertical-bar delimited set of class prefixes to search through in
                  addition by defining the java.content.handler.pkgs property.
                  The class name must be of the form:
                  &lt;pre&gt;
                  {package-prefix}.{major}.{minor}
                  e.g.
                  YoyoDyne.experimental.text.plain
                  &lt;/pre&gt;                
            </javadoc>
            <method name="lookupContentHandlerClassFor" type="ContentHandler" line="1087">
                <params>
                    <param name="contentType" type="String"/>
                </params>
                <declaration name="contentHandlerClassName" type="String" line="1088"/>
                <declaration name="contentHandlerPkgPrefixes" type="String" line="1089"/>
                <declaration name="packagePrefixIter" type="StringTokenizer" line="1090"/>
                <scope line="1091">
                    <declaration name="packagePrefix" type="String" line="1092"/>
                    <scope line="1093">
                        <declaration name="clsName" type="String" line="1094"/>
                        <declaration name="cls" type="Class" line="1095"/>
                        <scope line="1096"/>
                        <scope line="1099">
                            <declaration name="cl" type="ClassLoader" line="1100"/>
                            <scope line="1101"/>
                        </scope>
                        <scope line="1105">
                            <declaration name="handler" type="ContentHandler" line="1106"/>
                        </scope>
                    </scope>
                    <scope line="1110"/>
                </scope>
            </method>
            <javadoc line="1115">
                Utility function to map a MIME content type into an equivalent
                  pair of class name components.  For example: &quot;text/html&quot; would
                  be returned as &quot;text.html&quot;                
            </javadoc>
            <method name="typeToPackageName" type="String" line="1120">
                <params>
                    <param name="contentType" type="String"/>
                </params>
                <declaration name="len" type="int" line="1122"/>
                <declaration name="nm" type="char" line="1123"/>
                <scope line="1125">
                    <declaration name="c" type="char" line="1126"/>
                    <scope line="1127"/>
                    <scope line="1130"/>
                </scope>
            </method>
            <javadoc line="1136">
                Returns a vertical bar separated list of package prefixes for potential
                  content handlers.  Tries to get the java.content.handler.pkgs property
                  to use as a set of package prefixes to search.  Whether or not
                  that property has been defined, the sun.net.www.content is always
                  the last one on the returned package list.                
            </javadoc>
            <method name="getContentHandlerPkgPrefixes" type="String" line="1143">
                <declaration name="packagePrefixList" type="String" line="1144"/>
                <scope line="1145"/>
            </method>
            <javadoc line="1150">
                Tries to determine the content type of an object, based
                  on the specified &quot;file&quot; component of a URL.
                  This is a convenience method that can be used by
                  subclasses that override the &lt;code&gt;getContentType&lt;/code&gt; method.                
                <param>
                    fname   a filename.                    
                </param>
                <return>
                    a guess as to what the content type of the object is,
                      based upon its file name.                    
                </return>
                <see>
                    java.net.URLConnection#getContentType()                    
                </see>
            </javadoc>
            <method name="guessContentTypeFromName" type="String" line="1160">
                <params>
                    <param name="fname" type="String"/>
                </params>
            </method>
            <javadoc line="1163">
                Tries to determine the type of an input stream based on the
                  characters at the beginning of the input stream. This method can
                  be used by subclasses that override the
                  &lt;code&gt;getContentType&lt;/code&gt; method.
                  &lt;p&gt;
                  Ideally, this routine would not be needed. But many
                  &lt;code&gt;http&lt;/code&gt; servers return the incorrect content type; in
                  addition, there are many nonstandard extensions. Direct inspection
                  of the bytes to determine the content type is often more accurate
                  than believing the content type claimed by the &lt;code&gt;http&lt;/code&gt; server.                
                <param>
                    is   an input stream that supports marks.                    
                </param>
                <return>
                    a guess at the content type, or <code>null</code> if none
                      can be determined.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs while reading the
                      input stream.                    
                </exception>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.InputStream#markSupported()                    
                </see>
                <see>
                    java.net.URLConnection#getContentType()                    
                </see>
            </javadoc>
            <method name="guessContentTypeFromStream" type="String" line="1183">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <declaration name="c1" type="int" line="1186"/>
                <declaration name="c2" type="int" line="1187"/>
                <declaration name="c3" type="int" line="1188"/>
                <declaration name="c4" type="int" line="1189"/>
                <declaration name="c5" type="int" line="1190"/>
                <declaration name="c6" type="int" line="1191"/>
                <declaration name="c7" type="int" line="1192"/>
                <declaration name="c8" type="int" line="1193"/>
                <declaration name="c9" type="int" line="1194"/>
                <declaration name="c10" type="int" line="1195"/>
                <declaration name="c11" type="int" line="1196"/>
                <declaration name="c12" type="int" line="1197"/>
                <declaration name="c13" type="int" line="1198"/>
                <declaration name="c14" type="int" line="1199"/>
                <declaration name="c15" type="int" line="1200"/>
                <declaration name="c16" type="int" line="1201"/>
                <scope line="1203"/>
                <scope line="1206"/>
                <scope line="1209">
                    <scope line="1210"/>
                    <scope line="1213"/>
                </scope>
                <scope line="1217">
                    <scope line="1218"/>
                </scope>
                <scope line="1222">
                    <scope line="1223"/>
                </scope>
                <scope line="1227">
                    <scope line="1228"/>
                </scope>
                <scope line="1232">
                    <scope line="1233"/>
                </scope>
                <scope line="1237">
                    <scope line="1238"/>
                </scope>
                <scope line="1242"/>
                <scope line="1245"/>
                <scope line="1248"/>
                <scope line="1251"/>
                <scope line="1254">
                    <scope line="1255"/>
                    <scope line="1258"/>
                    <scope line="1261"/>
                </scope>
                <scope line="1265">
                    <scope line="1266"/>
                </scope>
                <scope line="1270"/>
                <scope line="1273"/>
                <scope line="1276"/>
            </method>
            <javadoc line="1281">
                Check for FlashPix image data in InputStream is.  Return true if
                  the stream has FlashPix data, false otherwise.  Before calling this
                  method, the stream should have already been checked to be sure it
                  contains Microsoft Structured Storage data.                
            </javadoc>
            <method name="checkfpx" type="boolean" line="1287">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <declaration name="toSkip" type="long" line="1289"/>
                <declaration name="posn" type="long" line="1290"/>
                <scope line="1291"/>
                <declaration name="c" type="int" line="1295"/>
                <scope line="1296"/>
                <declaration name="byteOrder" type="int" line="1300"/>
                <declaration name="uSectorShift" type="int" line="1302"/>
                <scope line="1303"/>
                <scope line="1307"/>
                <scope line="1311"/>
                <declaration name="skipped" type="long" line="1317"/>
                <scope line="1318"/>
                <scope line="1323"/>
                <declaration name="sectDirStart" type="int" line="1327"/>
                <scope line="1328"/>
                <scope line="1334"/>
                <scope line="1343"/>
                <scope line="1347"/>
                <scope line="1351"/>
                <scope line="1355"/>
                <scope line="1359"/>
            </method>
            <javadoc line="1366">
                Tries to read the specified number of bytes from the stream
                  Returns -1, If EOF is reached before len bytes are read, returns 0
                  otherwise                
            </javadoc>
            <method name="readBytes" type="int" line="1371">
                <params>
                    <param name="c" type="int"/>
                    <param name="len" type="int"/>
                    <param name="is" type="InputStream"/>
                </params>
                <declaration name="buf" type="byte" line="1372"/>
                <scope line="1373"/>
                <scope line="1376"/>
            </method>
            <javadoc line="1381">
                Skips through the specified number of bytes from the stream
                  until either EOF is reached, or the specified
                  number of bytes have been skipped                
            </javadoc>
            <method name="skipForward" type="long" line="1386">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="toSkip" type="long"/>
                </params>
                <declaration name="eachSkip" type="long" line="1387"/>
                <declaration name="skipped" type="long" line="1388"/>
                <scope line="1389">
                    <scope line="1391">
                        <scope line="1392"/>
                        <scope line="1395"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="UnknownContentHandler" line="1404">
            <extends class="ContentHandler"/>
            <declaration name="INSTANCE" type="ContentHandler" line="1405"/>
            <method name="getContent" type="Object" line="1406">
                <params>
                    <param name="uc" type="URLConnection"/>
                </params>
            </method>
        </class>
    </source>