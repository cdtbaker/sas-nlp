<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.InterruptedIOException"/>
        <import package="java.util.Enumeration"/>
        <class name="MulticastSocket" line="5">
            <extends class="DatagramSocket"/>
            <javadoc line="5">
                The multicast datagram socket class is useful for sending
                  and receiving IP multicast packets.  A MulticastSocket is
                  a (UDP) DatagramSocket, with additional capabilities for
                  joining &quot;groups&quot; of other multicast hosts on the internet.
                  &lt;P&gt;
                  A multicast group is specified by a class D IP address
                  and by a standard UDP port number. Class D IP addresses
                  are in the range &lt;CODE&gt;224.0.0.0&lt;/CODE&gt; to &lt;CODE&gt;239.255.255.255&lt;/CODE&gt;,
                  inclusive. The address 224.0.0.0 is reserved and should not be used.
                  &lt;P&gt;
                  One would join a multicast group by first creating a MulticastSocket
                  with the desired port, then invoking the
                  &lt;CODE&gt;joinGroup(InetAddress groupAddr)&lt;/CODE&gt;
                  method:
                  &lt;PRE&gt;
                  // join a Multicast group and send the group salutations
                  ...
                  String msg = &quot;Hello&quot;;
                  InetAddress group = InetAddress.getByName(&quot;228.5.6.7&quot;);
                  MulticastSocket s = new MulticastSocket(6789);
                  s.joinGroup(group);
                  DatagramPacket hi = new DatagramPacket(msg.getBytes(), msg.length(),
                  group, 6789);
                  s.send(hi);
                  // get their responses!
                  byte[] buf = new byte[1000];
                  DatagramPacket recv = new DatagramPacket(buf, buf.length);
                  s.receive(recv);
                  ...
                  // OK, I&apos;m done talking - leave the group...
                  s.leaveGroup(group);
                  &lt;/PRE&gt;
                  When one sends a message to a multicast group, &lt;B&gt;all&lt;/B&gt; subscribing
                  recipients to that host and port receive the message (within the
                  time-to-live range of the packet, see below).  The socket needn&apos;t
                  be a member of the multicast group to send messages to it.
                  &lt;P&gt;
                  When a socket subscribes to a multicast group/port, it receives
                  datagrams sent by other hosts to the group/port, as do all other
                  members of the group and port.  A socket relinquishes membership
                  in a group by the leaveGroup(InetAddress addr) method.  &lt;B&gt;
                  Multiple MulticastSocket&apos;s&lt;/B&gt; may subscribe to a multicast group
                  and port concurrently, and they will all receive group datagrams.
                  &lt;P&gt;
                  Currently applets are not allowed to use multicast sockets.                
                <author>
                    Pavani Diwanji                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="55">
                Create a multicast socket.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with 0 as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.
                  &lt;p&gt;
                  When the socket is created the{@link DatagramSocket#setReuseAddress(boolean)} method is
                  called to enable the SO_REUSEADDR socket option.                
                <exception>
                    IOException if an I/O exception occurs
                      while creating the MulticastSocket                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkListen&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
                <see>
                    java.net.DatagramSocket#setReuseAddress(boolean)                    
                </see>
            </javadoc>
            <method name="MulticastSocket" type="constructor" line="71"/>
            <javadoc line="74">
                Create a multicast socket and bind it to a specific port.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with the &lt;code&gt;port&lt;/code&gt; argument
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.
                  &lt;p&gt;
                  When the socket is created the{@link DatagramSocket#setReuseAddress(boolean)} method is
                  called to enable the SO_REUSEADDR socket option.                
                <param>
                    port port to use                    
                </param>
                <exception>
                    IOException if an I/O exception occurs
                      while creating the MulticastSocket                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkListen&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
                <see>
                    java.net.DatagramSocket#setReuseAddress(boolean)                    
                </see>
            </javadoc>
            <method name="MulticastSocket" type="constructor" line="92">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Create a MulticastSocket bound to the specified socket address.
                  &lt;p&gt;
                  Or, if the address is &lt;code&gt;null&lt;/code&gt;, create an unbound socket.
                  &lt;p&gt;
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with the SocketAddress port as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.
                  &lt;p&gt;
                  When the socket is created the{@link DatagramSocket#setReuseAddress(boolean)} method is
                  called to enable the SO_REUSEADDR socket option.                
                <param>
                    bindaddr Socket address to bind to, or &lt;code&gt;null&lt;/code&gt; for
                      an unbound socket.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs
                      while creating the MulticastSocket                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkListen&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
                <see>
                    java.net.DatagramSocket#setReuseAddress(boolean)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="MulticastSocket" type="constructor" line="117">
                <params>
                    <param name="bindaddr" type="SocketAddress"/>
                </params>
                <scope line="120"/>
            </method>
            <declaration name="ttlLock" type="Object" line="124"/>
            <javadoc line="124">
                The lock on the socket&apos;s TTL. This is for set/getTTL and
                  send(packet,ttl).                
            </javadoc>
            <declaration name="infLock" type="Object" line="129"/>
            <javadoc line="129">
                The lock on the socket&apos;s interface - used by setInterface
                  and getInterface                
            </javadoc>
            <declaration name="infAddress" type="InetAddress" line="134"/>
            <javadoc line="134">
                The &quot;last&quot; interface set by setInterface on this MulticastSocket                
            </javadoc>
            <javadoc line="138">
                Set the default time-to-live for multicast packets sent out
                  on this &lt;code&gt;MulticastSocket&lt;/code&gt; in order to control the
                  scope of the multicasts.
                  &lt;p&gt;The ttl is an &lt;b&gt;unsigned&lt;/b&gt; 8-bit quantity, and so &lt;B&gt;must&lt;/B&gt; be
                  in the range &lt;code&gt; 0 &lt;= ttl &lt;= 0xFF &lt;/code&gt;.                
                <param>
                    ttl the time-to-live                    
                </param>
                <exception>
                    IOException if an I/O exception occurs
                      while setting the default time-to-live value                    
                </exception>
                <deprecated>
                    use the setTimeToLive method instead, which uses
                      &lt;b&gt;int&lt;/b&gt; instead of &lt;b&gt;byte&lt;/b&gt; as the type for ttl.                    
                </deprecated>
                <see>
                    #getTTL()                    
                </see>
            </javadoc>
            <method name="setTTL" type="void" line="151">
                <params>
                    <param name="ttl" type="byte"/>
                </params>
            </method>
            <javadoc line="155">
                Set the default time-to-live for multicast packets sent out
                  on this {@code MulticastSocket} in order to control the
                  scope of the multicasts.
                  &lt;P&gt; The ttl &lt;B&gt;must&lt;/B&gt; be in the range {@code  0 &lt;= ttl &lt;=
                  255} or an {@code IllegalArgumentException} will be thrown.
                  Multicast packets sent with a TTL of {@code 0} are not transmitted
                  on the network but may be delivered locally.                
                <param>
                    ttlthe time-to-live                    
                </param>
                <throws>
                    IOExceptionif an I/O exception occurs while setting the
                      default time-to-live value                    
                </throws>
                <see>
                    #getTimeToLive()                    
                </see>
            </javadoc>
            <method name="setTimeToLive" type="void" line="168">
                <params>
                    <param name="ttl" type="int"/>
                </params>
                <scope line="169"/>
            </method>
            <javadoc line="175">
                Get the default time-to-live for multicast packets sent out on
                  the socket.                
                <exception>
                    IOException if an I/O exception occurs
                      while getting the default time-to-live value                    
                </exception>
                <return>
                    the default time-to-live value                    
                </return>
                <deprecated>
                    use the getTimeToLive method instead, which returns
                      an &lt;b&gt;int&lt;/b&gt; instead of a &lt;b&gt;byte&lt;/b&gt;.                    
                </deprecated>
                <see>
                    #setTTL(byte)                    
                </see>
            </javadoc>
            <method name="getTTL" type="byte" line="185"/>
            <javadoc line="189">
                Get the default time-to-live for multicast packets sent out on
                  the socket.                
                <exception>
                    IOException if an I/O exception occurs while
                      getting the default time-to-live value                    
                </exception>
                <return>
                    the default time-to-live value                    
                </return>
                <see>
                    #setTimeToLive(int)                    
                </see>
            </javadoc>
            <method name="getTimeToLive" type="int" line="197"/>
            <javadoc line="201">
                Joins a multicast group. Its behavior may be affected by
                  &lt;code&gt;setInterface&lt;/code&gt; or &lt;code&gt;setNetworkInterface&lt;/code&gt;.
                  &lt;p&gt;If there is a security manager, this method first
                  calls its &lt;code&gt;checkMulticast&lt;/code&gt; method
                  with the &lt;code&gt;mcastaddr&lt;/code&gt; argument
                  as its argument.                
                <param>
                    mcastaddr is the multicast address to join                    
                </param>
                <exception>
                    IOException if there is an error joining
                      or when the address is not a multicast address.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkMulticast&lt;/code&gt; method doesn&apos;t allow the join.                    
                </exception>
                <see>
                    SecurityManager#checkMulticast(InetAddress)                    
                </see>
            </javadoc>
            <method name="joinGroup" type="void" line="215">
                <params>
                    <param name="mcastaddr" type="InetAddress"/>
                </params>
                <scope line="216"/>
                <declaration name="security" type="SecurityManager" line="220"/>
                <scope line="221"/>
                <scope line="224"/>
            </method>
            <javadoc line="229">
                Leave a multicast group. Its behavior may be affected by
                  &lt;code&gt;setInterface&lt;/code&gt; or &lt;code&gt;setNetworkInterface&lt;/code&gt;.
                  &lt;p&gt;If there is a security manager, this method first
                  calls its &lt;code&gt;checkMulticast&lt;/code&gt; method
                  with the &lt;code&gt;mcastaddr&lt;/code&gt; argument
                  as its argument.                
                <param>
                    mcastaddr is the multicast address to leave                    
                </param>
                <exception>
                    IOException if there is an error leaving
                      or when the address is not a multicast address.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkMulticast&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkMulticast(InetAddress)                    
                </see>
            </javadoc>
            <method name="leaveGroup" type="void" line="243">
                <params>
                    <param name="mcastaddr" type="InetAddress"/>
                </params>
                <scope line="244"/>
                <declaration name="security" type="SecurityManager" line="248"/>
                <scope line="249"/>
                <scope line="252"/>
            </method>
            <javadoc line="257">
                Joins the specified multicast group at the specified interface.
                  &lt;p&gt;If there is a security manager, this method first
                  calls its &lt;code&gt;checkMulticast&lt;/code&gt; method
                  with the &lt;code&gt;mcastaddr&lt;/code&gt; argument
                  as its argument.                
                <param>
                    mcastaddr is the multicast address to join                    
                </param>
                <param>
                    netIf specifies the local interface to receive multicast
                      datagram packets, or &lt;i&gt;null&lt;/i&gt; to defer to the interface set by{@link MulticastSocket#setInterface(InetAddress)} or{@link MulticastSocket#setNetworkInterface(NetworkInterface)}                    
                </param>
                <exception>
                    IOException if there is an error joining
                      or when the address is not a multicast address.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkMulticast&lt;/code&gt; method doesn&apos;t allow the join.                    
                </exception>
                <throws>
                    IllegalArgumentException if mcastaddr is null or is a
                      SocketAddress subclass not supported by this socket                    
                </throws>
                <see>
                    SecurityManager#checkMulticast(InetAddress)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="joinGroup" type="void" line="275">
                <params>
                    <param name="mcastaddr" type="SocketAddress"/>
                    <param name="netIf" type="NetworkInterface"/>
                </params>
                <declaration name="security" type="SecurityManager" line="280"/>
                <scope line="281"/>
                <scope line="284"/>
            </method>
            <javadoc line="289">
                Leave a multicast group on a specified local interface.
                  &lt;p&gt;If there is a security manager, this method first
                  calls its &lt;code&gt;checkMulticast&lt;/code&gt; method
                  with the &lt;code&gt;mcastaddr&lt;/code&gt; argument
                  as its argument.                
                <param>
                    mcastaddr is the multicast address to leave                    
                </param>
                <param>
                    netIf specifies the local interface or &lt;i&gt;null&lt;/i&gt; to defer
                      to the interface set by{@link MulticastSocket#setInterface(InetAddress)} or{@link MulticastSocket#setNetworkInterface(NetworkInterface)}                    
                </param>
                <exception>
                    IOException if there is an error leaving
                      or when the address is not a multicast address.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkMulticast&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <throws>
                    IllegalArgumentException if mcastaddr is null or is a
                      SocketAddress subclass not supported by this socket                    
                </throws>
                <see>
                    SecurityManager#checkMulticast(InetAddress)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="leaveGroup" type="void" line="307">
                <params>
                    <param name="mcastaddr" type="SocketAddress"/>
                    <param name="netIf" type="NetworkInterface"/>
                </params>
                <declaration name="security" type="SecurityManager" line="312"/>
                <scope line="313"/>
                <scope line="316"/>
            </method>
            <javadoc line="321">
                Set the multicast network interface used by methods
                  whose behavior would be affected by the value of the
                  network interface. Useful for multihomed hosts.                
                <param>
                    inf the InetAddress                    
                </param>
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as a TCP error.                    
                </exception>
                <see>
                    #getInterface()                    
                </see>
            </javadoc>
            <method name="setInterface" type="void" line="330">
                <params>
                    <param name="inf" type="InetAddress"/>
                </params>
                <scope line="331"/>
                <scope line="335"/>
            </method>
            <javadoc line="340">
                Retrieve the address of the network interface used for
                  multicast packets.                
                <return>
                    An &lt;code&gt;InetAddress&lt;/code&gt; representing
                      the address of the network interface used for
                      multicast packets.                    
                </return>
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as a TCP error.                    
                </exception>
                <see>
                    #setInterface(java.net.InetAddress)                    
                </see>
            </javadoc>
            <method name="getInterface" type="InetAddress" line="350">
                <scope line="351"/>
                <scope line="354">
                    <declaration name="ia" type="InetAddress" line="355"/>
                    <scope line="356"/>
                    <scope line="359"/>
                    <scope line="362">
                        <declaration name="ni" type="NetworkInterface" line="363"/>
                        <declaration name="addrs" type="Enumeration" line="364"/>
                        <scope line="365">
                            <declaration name="addr" type="InetAddress" line="366"/>
                            <scope line="367"/>
                        </scope>
                    </scope>
                    <scope line="374"/>
                </scope>
            </method>
            <javadoc line="379">
                Specify the network interface for outgoing multicast datagrams
                  sent on this socket.                
                <param>
                    netIf the interface                    
                </param>
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as a TCP error.                    
                </exception>
                <see>
                    #getNetworkInterface()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNetworkInterface" type="void" line="388">
                <params>
                    <param name="netIf" type="NetworkInterface"/>
                </params>
                <scope line="389"/>
            </method>
            <javadoc line="394">
                Get the multicast network interface set.                
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as a TCP error.                    
                </exception>
                <return>
                    the multicast &lt;code&gt;NetworkInterface&lt;/code&gt; currently set                    
                </return>
                <see>
                    #setNetworkInterface(NetworkInterface)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getNetworkInterface" type="NetworkInterface" line="402">
                <declaration name="ni" type="NetworkInterface" line="403"/>
                <scope line="404">
                    <declaration name="addrs" type="InetAddress[]" line="405"/>
                </scope>
                <scope line="409"/>
            </method>
            <javadoc line="413">
                Disable/Enable local loopback of multicast datagrams
                  The option is used by the platform&apos;s networking code as a hint
                  for setting whether multicast data will be looped back to
                  the local socket.
                  &lt;p&gt;Because this option is a hint, applications that want to
                  verify what loopback mode is set to should call{@link #getLoopbackMode()}                
                <param>
                    disable &lt;code&gt;true&lt;/code&gt; to disable the LoopbackMode                    
                </param>
                <throws>
                    SocketException if an error occurs while setting the value                    
                </throws>
                <since>
                    1.4                    
                </since>
                <see>
                    #getLoopbackMode                    
                </see>
            </javadoc>
            <method name="setLoopbackMode" type="void" line="425">
                <params>
                    <param name="disable" type="boolean"/>
                </params>
            </method>
            <javadoc line="428">
                Get the setting for local loopback of multicast datagrams.                
                <throws>
                    SocketException  if an error occurs while getting the value                    
                </throws>
                <return>
                    true if the LoopbackMode has been disabled                    
                </return>
                <since>
                    1.4                    
                </since>
                <see>
                    #setLoopbackMode                    
                </see>
            </javadoc>
            <method name="getLoopbackMode" type="boolean" line="435"/>
            <javadoc line="438">
                Sends a datagram packet to the destination, with a TTL (time-
                  to-live) other than the default for the socket.  This method
                  need only be used in instances where a particular TTL is desired;
                  otherwise it is preferable to set a TTL once on the socket, and
                  use that default TTL for all packets.  This method does &lt;B&gt;not
                  &lt;/B&gt; alter the default TTL for the socket. Its behavior may be
                  affected by &lt;code&gt;setInterface&lt;/code&gt;.
                  &lt;p&gt;If there is a security manager, this method first performs some
                  security checks. First, if &lt;code&gt;p.getAddress().isMulticastAddress()&lt;/code&gt;
                  is true, this method calls the
                  security manager&apos;s &lt;code&gt;checkMulticast&lt;/code&gt; method
                  with &lt;code&gt;p.getAddress()&lt;/code&gt; and &lt;code&gt;ttl&lt;/code&gt; as its arguments.
                  If the evaluation of that expression is false,
                  this method instead calls the security manager&apos;s
                  &lt;code&gt;checkConnect&lt;/code&gt; method with arguments
                  &lt;code&gt;p.getAddress().getHostAddress()&lt;/code&gt; and
                  &lt;code&gt;p.getPort()&lt;/code&gt;. Each call to a security manager method
                  could result in a SecurityException if the operation is not allowed.                
                <param>
                    p is the packet to be sent. The packet should contain
                      the destination multicast ip address and the data to be sent.
                      One does not need to be the member of the group to send
                      packets to a destination multicast address.                    
                </param>
                <param>
                    ttl optional time to live for multicast packet.
                      default ttl is 1.                    
                </param>
                <exception>
                    IOException is raised if an error occurs i.e
                      error while setting ttl.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkMulticast&lt;/code&gt; or &lt;code&gt;checkConnect&lt;/code&gt;
                      method doesn&apos;t allow the send.                    
                </exception>
                <deprecated>
                    Use the following code or its equivalent instead:
                      ......
                      int ttl = mcastSocket.getTimeToLive();
                      mcastSocket.setTimeToLive(newttl);
                      mcastSocket.send(p);
                      mcastSocket.setTimeToLive(ttl);
                      ......                    
                </deprecated>
                <see>
                    DatagramSocket#send                    
                </see>
                <see>
                    DatagramSocket#receive                    
                </see>
                <see>
                    SecurityManager#checkMulticast(java.net.InetAddress,byte)                    
                </see>
                <see>
                    SecurityManager#checkConnect                    
                </see>
            </javadoc>
            <method name="send" type="void" line="480">
                <params>
                    <param name="p" type="DatagramPacket"/>
                    <param name="ttl" type="byte"/>
                </params>
                <scope line="483">
                    <scope line="484">
                        <scope line="485">
                            <declaration name="security" type="SecurityManager" line="486"/>
                            <scope line="487">
                                <scope line="488"/>
                                <scope line="491"/>
                            </scope>
                        </scope>
                        <scope line="496">
                            <declaration name="packetAddress" type="InetAddress" line="497"/>
                            <scope line="499"/>
                            <scope line="503"/>
                        </scope>
                        <declaration name="dttl" type="byte" line="507"/>
                        <scope line="508">
                            <scope line="509"/>
                        </scope>
                        <scope line="514">
                            <scope line="515"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>