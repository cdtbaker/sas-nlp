<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.channels.FileChannel"/>
        <import package="sun.net.ConnectionResetException"/>
        <class name="SocketInputStream" line="7">
            <extends class="FileInputStream"/>
            <javadoc line="7">
                This stream extends FileInputStream to implement a
                  SocketInputStream. Note that this class should &lt;b&gt;NOT&lt;/b&gt; be
                  public.                
                <author>
                    Jonathan Payne                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <scope line="15"/>
            <declaration name="eof" type="boolean" line="18"/>
            <declaration name="impl" type="AbstractPlainSocketImpl" line="19"/>
            <declaration name="temp" type="byte" line="20"/>
            <declaration name="socket" type="Socket" line="21"/>
            <javadoc line="22">
                Creates a new SocketInputStream. Can only be called
                  by a Socket. This method needs to hang on to the owner Socket so
                  that the fd will not be closed.                
                <param>
                    impl the implemented socket input stream                    
                </param>
            </javadoc>
            <method name="SocketInputStream" type="constructor" line="28">
                <params>
                    <param name="impl" type="AbstractPlainSocketImpl"/>
                </params>
            </method>
            <javadoc line="33">
                Returns the unique {@link java.nio.channels.FileChannel FileChannel}object associated with this file input stream.&lt;/p&gt;
                  The &lt;code&gt;getChannel&lt;/code&gt; method of &lt;code&gt;SocketInputStream&lt;/code&gt;
                  returns &lt;code&gt;null&lt;/code&gt; since it is a socket based stream.&lt;/p&gt;                
                <return>
                    the file channel associated with this file input stream                    
                </return>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getChannel" type="FileChannel" line="41"/>
            <method name="socketRead0" type="int" line="44"/>
            <javadoc line="44">
                Reads into an array of bytes at the specified offset using
                  the received socket primitive.                
                <param>
                    fd the FileDescriptor                    
                </param>
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <param>
                    timeout the read timeout in ms                    
                </param>
                <return>
                    the actual number of bytes read, -1 is
                      returned when the end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <javadoc line="57">
                Reads into a byte array data from the socket.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <return>
                    the actual number of bytes read, -1 is
                      returned when the end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="64">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="67">
                Reads into a byte array &lt;i&gt;b&lt;/i&gt; at offset &lt;i&gt;off&lt;/i&gt;,
                  &lt;i&gt;length&lt;/i&gt; bytes of data.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, -1 is
                      returned when the end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="77">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="read" type="int" line="80">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="length" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
                <declaration name="n" type="int" line="81"/>
                <scope line="82"/>
                <scope line="85"/>
                <scope line="88">
                    <scope line="89"/>
                </scope>
                <declaration name="gotReset" type="boolean" line="94"/>
                <declaration name="fd" type="FileDescriptor" line="95"/>
                <scope line="96">
                    <scope line="98"/>
                </scope>
                <scope line="102"/>
                <scope line="105"/>
                <scope line="108">
                    <scope line="111">
                        <scope line="113"/>
                    </scope>
                    <scope line="117"/>
                    <scope line="119"/>
                </scope>
                <scope line="123"/>
                <scope line="126"/>
                <scope line="129"/>
            </method>
            <javadoc line="135">
                Reads a single byte from the socket.                
            </javadoc>
            <method name="read" type="int" line="138">
                <scope line="139"/>
                <declaration name="n" type="int" line="143"/>
                <scope line="144"/>
            </method>
            <javadoc line="149">
                Skips n bytes of input.                
                <param>
                    n the number of bytes to skip                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="155">
                <params>
                    <param name="numbytes" type="long"/>
                </params>
                <scope line="156"/>
                <declaration name="n" type="long" line="159"/>
                <declaration name="buflen" type="int" line="160"/>
                <declaration name="data" type="byte" line="161"/>
                <scope line="162">
                    <declaration name="r" type="int" line="163"/>
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="171">
                Returns the number of bytes that can be read without blocking.                
                <return>
                    the number of immediately available bytes                    
                </return>
            </javadoc>
            <method name="available" type="int" line="175"/>
            <declaration name="closing" type="boolean" line="178"/>
            <javadoc line="178">
                Closes the stream.                
            </javadoc>
            <method name="close" type="void" line="182">
                <scope line="185"/>
            </method>
            <method name="setEOF" type="void" line="191">
                <params>
                    <param name="eof" type="boolean"/>
                </params>
            </method>
            <javadoc line="194">
                Overrides finalize, the fd is closed by the Socket.                
            </javadoc>
            <method name="finalize" type="void" line="197"/>
            <method name="init" type="void" line="199"/>
            <javadoc line="199">
                Perform class load-time initializations.                
            </javadoc>
        </class>
    </source>