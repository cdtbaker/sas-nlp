<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.channels.FileChannel"/>
        <import package="sun.net.ConnectionResetException"/>
        <class name="SocketInputStream" line="35">
            <extends class="FileInputStream"/>
            <javadoc line="35">
                This stream extends FileInputStream to implement a
                  SocketInputStream. Note that this class should &lt;b&gt;NOT&lt;/b&gt; be
                  public.                
                <author>
                    Jonathan Payne                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <scope line="45"/>
            <declaration name="eof" type="boolean" line="49"/>
            <declaration name="impl" type="AbstractPlainSocketImpl" line="50"/>
            <declaration name="temp" type="byte" line="51"/>
            <declaration name="socket" type="Socket" line="52"/>
            <javadoc line="54">
                Creates a new SocketInputStream. Can only be called
                  by a Socket. This method needs to hang on to the owner Socket so
                  that the fd will not be closed.                
                <param>
                    impl the implemented socket input stream                    
                </param>
            </javadoc>
            <method name="SocketInputStream" type="constructor" line="60">
                <params>
                    <param name="impl" type="AbstractPlainSocketImpl"/>
                </params>
            </method>
            <javadoc line="66">
                Returns the unique {@link java.nio.channels.FileChannel FileChannel}object associated with this file input stream.&lt;/p&gt;
                  The &lt;code&gt;getChannel&lt;/code&gt; method of &lt;code&gt;SocketInputStream&lt;/code&gt;
                  returns &lt;code&gt;null&lt;/code&gt; since it is a socket based stream.&lt;/p&gt;                
                <return>
                    the file channel associated with this file input stream                    
                </return>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getChannel" type="FileChannel" line="78"/>
            <method name="socketRead0" type="int" line="82"/>
            <javadoc line="82">
                Reads into an array of bytes at the specified offset using
                  the received socket primitive.                
                <param>
                    fd the FileDescriptor                    
                </param>
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <param>
                    timeout the read timeout in ms                    
                </param>
                <return>
                    the actual number of bytes read, -1 is
                      returned when the end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <javadoc line="99">
                Reads into a byte array data from the socket.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <return>
                    the actual number of bytes read, -1 is
                      returned when the end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="106">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="110">
                Reads into a byte array &lt;i&gt;b&lt;/i&gt; at offset &lt;i&gt;off&lt;/i&gt;,
                  &lt;i&gt;length&lt;/i&gt; bytes of data.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, -1 is
                      returned when the end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="120">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="read" type="int" line="124">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="length" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
                <comment line="127">
                    EOF already encountered                    
                </comment>
                <comment line="132">
                    connection reset                    
                </comment>
                <comment line="137">
                    bounds check                    
                </comment>
                <comment line="147">
                    acquire file descriptor and do the read                    
                </comment>
                <comment line="160">
                    We receive a &quot;connection reset&quot; but there may be bytes still
                     buffered on the socket                    
                </comment>
                <comment line="178">
                    If we get here we are at EOF, the socket has been closed,
                     or the connection has been reset.                    
                </comment>
                <declaration name="n" type="int" line="125"/>
                <scope line="128"/>
                <scope line="133"/>
                <scope line="138">
                    <scope line="139"/>
                </scope>
                <declaration name="gotReset" type="boolean" line="145"/>
                <declaration name="fd" type="FileDescriptor" line="148"/>
                <scope line="149">
                    <scope line="151"/>
                </scope>
                <scope line="154"/>
                <scope line="156"/>
                <scope line="164">
                    <scope line="167">
                        <scope line="169"/>
                    </scope>
                    <scope line="172"/>
                    <scope line="173"/>
                </scope>
                <scope line="182"/>
                <scope line="185"/>
                <scope line="188"/>
            </method>
            <javadoc line="195">
                Reads a single byte from the socket.                
            </javadoc>
            <method name="read" type="int" line="198">
                <scope line="199"/>
                <declaration name="n" type="int" line="203"/>
                <scope line="204"/>
            </method>
            <javadoc line="210">
                Skips n bytes of input.                
                <param>
                    n the number of bytes to skip                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="216">
                <params>
                    <param name="numbytes" type="long"/>
                </params>
                <scope line="217"/>
                <declaration name="n" type="long" line="220"/>
                <declaration name="buflen" type="int" line="221"/>
                <declaration name="data" type="byte" line="222"/>
                <scope line="223">
                    <declaration name="r" type="int" line="224"/>
                    <scope line="225"/>
                </scope>
            </method>
            <javadoc line="233">
                Returns the number of bytes that can be read without blocking.                
                <return>
                    the number of immediately available bytes                    
                </return>
            </javadoc>
            <method name="available" type="int" line="237"/>
            <declaration name="closing" type="boolean" line="241"/>
            <javadoc line="241">
                Closes the stream.                
            </javadoc>
            <method name="close" type="void" line="245">
                <comment line="246">
                    Prevent recursion. See BugId 4484411                    
                </comment>
                <scope line="250"/>
            </method>
            <method name="setEOF" type="void" line="258">
                <params>
                    <param name="eof" type="boolean"/>
                </params>
            </method>
            <javadoc line="262">
                Overrides finalize, the fd is closed by the Socket.                
            </javadoc>
            <method name="finalize" type="void" line="265"/>
            <method name="init" type="void" line="267"/>
            <javadoc line="267">
                Perform class load-time initializations.                
            </javadoc>
        </class>
    </source>