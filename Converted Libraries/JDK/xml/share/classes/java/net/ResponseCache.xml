<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="ResponseCache" line="6">
            <javadoc line="6">
                Represents implementations of URLConnection caches. An instance of
                  such a class can be registered with the system by doing
                  ResponseCache.setDefault(ResponseCache), and the system will call
                  this object in order to:
                  &lt;ul&gt;&lt;li&gt;store resource data which has been retrieved from an
                  external source into the cache&lt;/li&gt;
                  &lt;li&gt;try to fetch a requested resource that may have been
                  stored in the cache&lt;/li&gt;
                  &lt;/ul&gt;
                  The ResponseCache implementation decides which resources
                  should be cached, and for how long they should be cached. If a
                  request resource cannot be retrieved from the cache, then the
                  protocol handlers will fetch the resource from its original
                  location.
                  The settings for URLConnection#useCaches controls whether the
                  protocol is allowed to use a cached response.
                  For more information on HTTP caching, see &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;&lt;i&gt;RFC&amp;nbsp;2616: Hypertext
                  Transfer Protocol -- HTTP/1.1&lt;/i&gt;&lt;/a&gt;                
                <author>
                    Yingxian Wang                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="theResponseCache" type="ResponseCache" line="30"/>
            <javadoc line="30">
                The system wide cache that provides access to a url
                  caching mechanism.                
                <see>
                    #setDefault(ResponseCache)                    
                </see>
                <see>
                    #getDefault()                    
                </see>
            </javadoc>
            <javadoc line="37">
                Gets the system-wide response cache.                
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link NetPermission}&lt;tt&gt;(&quot;getResponseCache&quot;)&lt;/tt&gt;                    
                </throws>
                <see>
                    #setDefault(ResponseCache)                    
                </see>
                <return>
                    the system-wide &lt;code&gt;ResponseCache&lt;/code&gt;                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getDefault" type="ResponseCache" line="44">
                <declaration name="sm" type="SecurityManager" line="45"/>
                <scope line="46"/>
            </method>
            <javadoc line="51">
                Sets (or unsets) the system-wide cache.
                  Note: non-standard procotol handlers may ignore this setting.                
                <param>
                    responseCache The response cache, or
                      &lt;code&gt;null&lt;/code&gt; to unset the cache.                    
                </param>
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link NetPermission}&lt;tt&gt;(&quot;setResponseCache&quot;)&lt;/tt&gt;                    
                </throws>
                <see>
                    #getDefault()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setDefault" type="void" line="60">
                <params>
                    <param name="responseCache" type="ResponseCache"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="61"/>
                <scope line="62"/>
            </method>
            <method name="get" type="CacheResponse" line="67"/>
            <javadoc line="67">
                Retrieve the cached response based on the requesting uri,
                  request method and request headers. Typically this method is
                  called by the protocol handler before it sends out the request
                  to get the network resource. If a cached response is returned,
                  that resource is used instead.                
                <param>
                    uri a &lt;code&gt;URI&lt;/code&gt; used to reference the requested
                      network resource                    
                </param>
                <param>
                    rqstMethod a &lt;code&gt;String&lt;/code&gt; representing the request
                      method                    
                </param>
                <param>
                    rqstHeaders - a Map from request header
                      field names to lists of field values representing
                      the current request headers                    
                </param>
                <return>
                    a &lt;code&gt;CacheResponse&lt;/code&gt; instance if available
                      from cache, or null otherwise                    
                </return>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if any one of the arguments is null                    
                </throws>
                <see>
                    java.net.URLConnection#setUseCaches(boolean)                    
                </see>
                <see>
                    java.net.URLConnection#getUseCaches()                    
                </see>
                <see>
                    java.net.URLConnection#setDefaultUseCaches(boolean)                    
                </see>
                <see>
                    java.net.URLConnection#getDefaultUseCaches()                    
                </see>
            </javadoc>
            <method name="put" type="CacheRequest" line="90"/>
            <javadoc line="90">
                The protocol handler calls this method after a resource has
                  been retrieved, and the ResponseCache must decide whether or
                  not to store the resource in its cache. If the resource is to
                  be cached, then put() must return a CacheRequest object which
                  contains an OutputStream that the protocol handler will
                  use to write the resource into the cache. If the resource is
                  not to be cached, then put must return null.                
                <param>
                    uri a &lt;code&gt;URI&lt;/code&gt; used to reference the requested
                      network resource                    
                </param>
                <param>
                    conn - a URLConnection instance that is used to fetch
                      the response to be cached                    
                </param>
                <return>
                    a &lt;code&gt;CacheRequest&lt;/code&gt; for recording the
                      response to be cached. Null return indicates that
                      the caller does not intend to cache the response.                    
                </return>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if any one of the arguments is
                      null                    
                </throws>
            </javadoc>
        </class>
    </source>