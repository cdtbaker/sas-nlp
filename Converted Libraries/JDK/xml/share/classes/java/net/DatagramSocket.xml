<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InterruptedIOException"/>
        <import package="java.nio.channels.DatagramChannel"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <class name="DatagramSocket" line="35">
            <comment line="79">
                The implementation of this DatagramSocket.                
            </comment>
            <comment line="89">
                Connection state:
                 ST_NOT_CONNECTED = socket not connected
                 ST_CONNECTED = socket connected
                 ST_CONNECTED_NO_IMPL = socket connected but not at impl level                
            </comment>
            <comment line="101">
                Connected address &amp; port                
            </comment>
            <implements interface="java.io.Closeable"/>
            <javadoc line="35">
                This class represents a socket for sending and receiving datagram packets.
                  &lt;p&gt;A datagram socket is the sending or receiving point for a packet
                  delivery service. Each packet sent or received on a datagram socket
                  is individually addressed and routed. Multiple packets sent from
                  one machine to another may be routed differently, and may arrive in
                  any order.
                  &lt;p&gt; Where possible, a newly constructed {@code DatagramSocket} has the{@link SocketOptions#SO_BROADCAST SO_BROADCAST} socket option enabled so as
                  to allow the transmission of broadcast datagrams. In order to receive
                  broadcast packets a DatagramSocket should be bound to the wildcard address.
                  In some implementations, broadcast packets may also be received when
                  a DatagramSocket is bound to a more specific address.
                  &lt;p&gt;
                  Example:
                  &lt;code&gt;
                  DatagramSocket s = new DatagramSocket(null);
                  s.bind(new InetSocketAddress(8888));
                  &lt;/code&gt;
                  Which is equivalent to:
                  &lt;code&gt;
                  DatagramSocket s = new DatagramSocket(8888);
                  &lt;/code&gt;
                  Both cases will create a DatagramSocket able to receive broadcasts on
                  UDP port 8888.                
                <author>
                    Pavani Diwanji                    
                </author>
                <see>
                    java.net.DatagramPacket                    
                </see>
                <see>
                    java.nio.channels.DatagramChannel                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="created" type="boolean" line="70"/>
            <javadoc line="70">
                Various states of this socket.                
            </javadoc>
            <declaration name="bound" type="boolean" line="74"/>
            <declaration name="closed" type="boolean" line="75"/>
            <declaration name="closeLock" type="Object" line="76"/>
            <declaration name="impl" type="DatagramSocketImpl" line="81"/>
            <declaration name="oldImpl" type="boolean" line="83"/>
            <javadoc line="83">
                Are we using an older DatagramSocketImpl?                
            </javadoc>
            <declaration name="ST_NOT_CONNECTED" type="int" line="94"/>
            <declaration name="ST_CONNECTED" type="int" line="95"/>
            <declaration name="ST_CONNECTED_NO_IMPL" type="int" line="96"/>
            <declaration name="connectState" type="int" line="98"/>
            <declaration name="connectedAddress" type="InetAddress" line="103"/>
            <declaration name="connectedPort" type="int" line="104"/>
            <javadoc line="106">
                Connects this socket to a remote socket address (IP address + port number).
                  Binds socket if not already bound.
                  &lt;p&gt;                
                <param>
                    addr    The remote address.                    
                </param>
                <param>
                    port    The remote port                    
                </param>
                <throws>
                    SocketException if binding the socket fails.                    
                </throws>
            </javadoc>
            <method name="connectInternal" type="void" line="114">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <comment line="138">
                    old impls do not support connect/disconnect                    
                </comment>
                <comment line="145">
                    socket is now connected by the impl                    
                </comment>
                <comment line="149">
                    connection will be emulated by DatagramSocket                    
                </comment>
                <scope line="115"/>
                <scope line="118"/>
                <declaration name="security" type="SecurityManager" line="124"/>
                <scope line="125">
                    <scope line="126"/>
                    <scope line="128"/>
                </scope>
                <scope line="138"/>
                <scope line="140">
                    <scope line="141"/>
                    <scope line="146"/>
                </scope>
            </method>
            <javadoc line="158">
                Constructs a datagram socket and binds it to any available port
                  on the local host machine.  The socket will be bound to the{@link InetAddress#isAnyLocalAddress wildcard} address,
                  an IP address chosen by the kernel.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with 0 as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <exception>
                    SocketException  if the socket could not be opened,
                      or the socket could not bind to the specified local port.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkListen</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="176">
                <comment line="178">
                    create a datagram socket.                    
                </comment>
                <scope line="179"/>
                <scope line="181"/>
                <scope line="183"/>
            </method>
            <javadoc line="188">
                Creates an unbound datagram socket with the specified
                  DatagramSocketImpl.                
                <param>
                    impl an instance of a <B>DatagramSocketImpl</B>
                      the subclass wishes to use on the DatagramSocket.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="196">
                <params>
                    <param name="impl" type="DatagramSocketImpl"/>
                </params>
            </method>
            <javadoc line="203">
                Creates a datagram socket, bound to the specified local
                  socket address.
                  &lt;p&gt;
                  If, if the address is &lt;code&gt;null&lt;/code&gt;, creates an unbound socket.
                  &lt;p&gt;
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with the port from the socket address
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    bindaddr local socket address to bind, or <code>null</code>
                      for an unbound socket.                    
                </param>
                <exception>
                    SocketException  if the socket could not be opened,
                      or the socket could not bind to the specified local port.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkListen</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="226">
                <params>
                    <param name="bindaddr" type="SocketAddress"/>
                </params>
                <comment line="228">
                    create a datagram socket.                    
                </comment>
                <scope line="229"/>
            </method>
            <javadoc line="234">
                Constructs a datagram socket and binds it to the specified port
                  on the local host machine.  The socket will be bound to the{@link InetAddress#isAnyLocalAddress wildcard} address,
                  an IP address chosen by the kernel.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with the &lt;code&gt;port&lt;/code&gt; argument
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    port port to use.                    
                </param>
                <exception>
                    SocketException  if the socket could not be opened,
                      or the socket could not bind to the specified local port.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkListen</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="254">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="258">
                Creates a datagram socket, bound to the specified local
                  address.  The local port must be between 0 and 65535 inclusive.
                  If the IP address is 0.0.0.0, the socket will be bound to the{@link InetAddress#isAnyLocalAddress wildcard} address,
                  an IP address chosen by the kernel.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with the &lt;code&gt;port&lt;/code&gt; argument
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    port local port to use                    
                </param>
                <param>
                    laddr local address to bind                    
                </param>
                <exception>
                    SocketException  if the socket could not be opened,
                      or the socket could not bind to the specified local port.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkListen</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="282">
                <params>
                    <param name="port" type="int"/>
                    <param name="laddr" type="InetAddress"/>
                </params>
            </method>
            <method name="checkOldImpl" type="void" line="286">
                <comment line="290">
                    DatagramSocketImpl.peekdata() is a protected method, therefore we need to use
                     getDeclaredMethod, therefore we need permission to access the member                    
                </comment>
                <scope line="291">
                    <anonymous_class line="293">
                        <method name="run" type="Void" line="294">
                            <declaration name="cl" type="Class[]" line="295"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="301"/>
            </method>
            <declaration name="implClass" type="Class" line="306"/>
            <method name="createImpl" type="void" line="308">
                <comment line="321">
                    creates a udp socket                    
                </comment>
                <scope line="309">
                    <scope line="310"/>
                    <scope line="313">
                        <declaration name="isMulticast" type="boolean" line="314"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="325">
                Get the &lt;code&gt;DatagramSocketImpl&lt;/code&gt; attached to this socket,
                  creating it if necessary.                
                <return>
                    the <code>DatagramSocketImpl</code> attached to that
                      DatagramSocket                    
                </return>
                <throws>
                    SocketException if creation fails.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getImpl" type="DatagramSocketImpl" line="334"/>
            <javadoc line="340">
                Binds this DatagramSocket to a specific address &amp; port.
                  &lt;p&gt;
                  If the address is &lt;code&gt;null&lt;/code&gt;, then the system will pick up
                  an ephemeral port and a valid local address to bind the socket.
                  &lt;p&gt;                
                <param>
                    addr The address & port to bind to.                    
                </param>
                <throws>
                    SocketException if any error happens during the bind, or if the
                      socket is already bound.                    
                </throws>
                <throws>
                    SecurityException  if a security manager exists and its
                      <code>checkListen</code> method doesn't allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if addr is a SocketAddress subclass
                      not supported by this socket.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="bind" type="void" line="355">
                <params>
                    <param name="addr" type="SocketAddress"/>
                </params>
                <declaration name="epoint" type="InetSocketAddress" line="364"/>
                <declaration name="iaddr" type="InetAddress" line="367"/>
                <declaration name="port" type="int" line="368"/>
                <declaration name="sec" type="SecurityManager" line="370"/>
                <scope line="371"/>
                <scope line="374"/>
                <scope line="376"/>
            </method>
            <method name="checkAddress" type="void" line="383">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="op" type="String"/>
                </params>
                <scope line="384"/>
                <scope line="387"/>
            </method>
            <javadoc line="392">
                Connects the socket to a remote address for this socket. When a
                  socket is connected to a remote address, packets may only be
                  sent to or received from that address. By default a datagram
                  socket is not connected.
                  &lt;p&gt;If the remote destination to which the socket is connected does not
                  exist, or is otherwise unreachable, and if an ICMP destination unreachable
                  packet has been received for that address, then a subsequent call to
                  send or receive may throw a PortUnreachableException. Note, there is no
                  guarantee that the exception will be thrown.
                  &lt;p&gt; If a security manager has been installed then it is invoked to check
                  access to the remote address. Specifically, if the given {@code address}is a {@link InetAddress#isMulticastAddress multicast address},
                  the security manager&apos;s {@link java.lang.SecurityManager#checkMulticast(InetAddress)checkMulticast} method is invoked with the given {@code address}.
                  Otherwise, the security manager&apos;s {@link java.lang.SecurityManager#checkConnect(String,int) checkConnect}and {@link java.lang.SecurityManager#checkAccept checkAccept} methods
                  are invoked, with the given {@code address} and {@code port}, to
                  verify that datagrams are permitted to be sent and received
                  respectively.
                  &lt;p&gt; When a socket is connected, {@link #receive receive} and{@link #send send} &lt;b&gt;will not perform any security checks&lt;/b&gt;
                  on incoming and outgoing packets, other than matching the packet&apos;s
                  and the socket&apos;s address and port. On a send operation, if the
                  packet&apos;s address is set and the packet&apos;s address and the socket&apos;s
                  address do not match, an {@code IllegalArgumentException} will be
                  thrown. A socket connected to a multicast address may only be used
                  to send packets.                
                <param>
                    address the remote address for the socket                    
                </param>
                <param>
                    port the remote port for the socket.                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the address is null, or the port is out of range.                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager has been installed and it does
                      not permit access to the given remote address                    
                </throws>
                <see>
                    #disconnect                    
                </see>
            </javadoc>
            <method name="connect" type="void" line="439">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="440"/>
                <scope line="442"/>
            </method>
            <javadoc line="447">
                Connects this socket to a remote socket address (IP address + port number).
                  &lt;p&gt; If given an {@link InetSocketAddress InetSocketAddress}, this method
                  behaves as if invoking {@link #connect(InetAddress,int) connect(InetAddress,int)}with the the given socket addresses IP address and port number.                
                <param>
                    addr    The remote address.                    
                </param>
                <throws>
                    SocketExceptionif the connect fails                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code addr} is {@code null}, or {@code addr} is a SocketAddress
                      subclass not supported by this socket                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager has been installed and it does
                      not permit access to the given remote address                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="connect" type="void" line="469">
                <params>
                    <param name="addr" type="SocketAddress"/>
                </params>
                <declaration name="epoint" type="InetSocketAddress" line="474"/>
            </method>
            <javadoc line="480">
                Disconnects the socket. If the socket is closed or not connected,
                  then this method has no effect.                
                <see>
                    #connect                    
                </see>
            </javadoc>
            <method name="disconnect" type="void" line="486">
                <scope line="487">
                    <scope line="490"/>
                </scope>
            </method>
            <javadoc line="499">
                Returns the binding state of the socket.
                  &lt;p&gt;
                  If the socket was bound prior to being {@link #close closed},
                  then this method will continue to return &lt;code&gt;true&lt;/code&gt;
                  after the socket is closed.                
                <return>
                    true if the socket successfully bound to an address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isBound" type="boolean" line="509"/>
            <javadoc line="513">
                Returns the connection state of the socket.
                  &lt;p&gt;
                  If the socket was connected prior to being {@link #close closed},
                  then this method will continue to return &lt;code&gt;true&lt;/code&gt;
                  after the socket is closed.                
                <return>
                    true if the socket successfully connected to a server                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isConnected" type="boolean" line="523"/>
            <javadoc line="527">
                Returns the address to which this socket is connected. Returns
                  &lt;code&gt;null&lt;/code&gt; if the socket is not connected.
                  &lt;p&gt;
                  If the socket was connected prior to being {@link #close closed},
                  then this method will continue to return the connected address
                  after the socket is closed.                
                <return>
                    the address to which this socket is connected.                    
                </return>
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="537"/>
            <javadoc line="541">
                Returns the port number to which this socket is connected.
                  Returns &lt;code&gt;-1&lt;/code&gt; if the socket is not connected.
                  &lt;p&gt;
                  If the socket was connected prior to being {@link #close closed},
                  then this method will continue to return the connected port number
                  after the socket is closed.                
                <return>
                    the port number to which this socket is connected.                    
                </return>
            </javadoc>
            <method name="getPort" type="int" line="551"/>
            <javadoc line="555">
                Returns the address of the endpoint this socket is connected to, or
                  &lt;code&gt;null&lt;/code&gt; if it is unconnected.
                  &lt;p&gt;
                  If the socket was connected prior to being {@link #close closed},
                  then this method will continue to return the connected address
                  after the socket is closed.                
                <return>
                    a <code>SocketAddress</code> representing the remote
                      endpoint of this socket, or <code>null</code> if it is
                      not connected yet.                    
                </return>
                <see>
                    #getInetAddress()                    
                </see>
                <see>
                    #getPort()                    
                </see>
                <see>
                    #connect(SocketAddress)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRemoteSocketAddress" type="SocketAddress" line="571"/>
            <javadoc line="577">
                Returns the address of the endpoint this socket is bound to.                
                <return>
                    a <code>SocketAddress</code> representing the local endpoint of this
                      socket, or <code>null</code> if it is closed or not bound yet.                    
                </return>
                <see>
                    #getLocalAddress()                    
                </see>
                <see>
                    #getLocalPort()                    
                </see>
                <see>
                    #bind(SocketAddress)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getLocalSocketAddress" type="SocketAddress" line="588"/>
            <javadoc line="596">
                Sends a datagram packet from this socket. The
                  &lt;code&gt;DatagramPacket&lt;/code&gt; includes information indicating the
                  data to be sent, its length, the IP address of the remote host,
                  and the port number on the remote host.
                  &lt;p&gt;If there is a security manager, and the socket is not currently
                  connected to a remote address, this method first performs some
                  security checks. First, if &lt;code&gt;p.getAddress().isMulticastAddress()&lt;/code&gt;
                  is true, this method calls the
                  security manager&apos;s &lt;code&gt;checkMulticast&lt;/code&gt; method
                  with &lt;code&gt;p.getAddress()&lt;/code&gt; as its argument.
                  If the evaluation of that expression is false,
                  this method instead calls the security manager&apos;s
                  &lt;code&gt;checkConnect&lt;/code&gt; method with arguments
                  &lt;code&gt;p.getAddress().getHostAddress()&lt;/code&gt; and
                  &lt;code&gt;p.getPort()&lt;/code&gt;. Each call to a security manager method
                  could result in a SecurityException if the operation is not allowed.                
                <param>
                    p   the <code>DatagramPacket</code> to be sent.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkMulticast</code> or <code>checkConnect</code>
                      method doesn't allow the send.                    
                </exception>
                <exception>
                    PortUnreachableException may be thrown if the socket is connected
                      to a currently unreachable destination. Note, there is no
                      guarantee that the exception will be thrown.                    
                </exception>
                <exception>
                    java.nio.channels.IllegalBlockingModeExceptionif this socket has an associated channel,
                      and the channel is in non-blocking mode.                    
                </exception>
                <exception>
                    IllegalArgumentException if the socket is connected,
                      and connected address and packet address differ.                    
                </exception>
                <see>
                    java.net.DatagramPacket                    
                </see>
                <see>
                    SecurityManager#checkMulticast(InetAddress)                    
                </see>
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="send" type="void" line="636">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <comment line="644">
                    check the address is ok wiht the security manager on every send.                    
                </comment>
                <comment line="647">
                    The reason you want to synchronize on datagram packet
                     is because you dont want an applet to change the address
                     while you are trying to send the packet for example
                     after the security check but before the send.                    
                </comment>
                <comment line="660">
                    we&apos;re connected                    
                </comment>
                <comment line="672">
                    Check whether the socket is bound                    
                </comment>
                <comment line="675">
                    call the  method to send                    
                </comment>
                <declaration name="packetAddress" type="InetAddress" line="637"/>
                <scope line="638">
                    <scope line="642">
                        <declaration name="security" type="SecurityManager" line="644"/>
                        <scope line="650">
                            <scope line="651"/>
                            <scope line="653"/>
                        </scope>
                    </scope>
                    <scope line="658">
                        <scope line="661"/>
                        <scope line="665"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="679">
                Receives a datagram packet from this socket. When this method
                  returns, the &lt;code&gt;DatagramPacket&lt;/code&gt;&apos;s buffer is filled with
                  the data received. The datagram packet also contains the sender&apos;s
                  IP address, and the port number on the sender&apos;s machine.
                  &lt;p&gt;
                  This method blocks until a datagram is received. The
                  &lt;code&gt;length&lt;/code&gt; field of the datagram packet object contains
                  the length of the received message. If the message is longer than
                  the packet&apos;s length, the message is truncated.
                  &lt;p&gt;
                  If there is a security manager, a packet cannot be received if the
                  security manager&apos;s &lt;code&gt;checkAccept&lt;/code&gt; method
                  does not allow it.                
                <param>
                    p   the <code>DatagramPacket</code> into which to place
                      the incoming data.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <exception>
                    SocketTimeoutException  if setSoTimeout was previously called
                      and the timeout has expired.                    
                </exception>
                <exception>
                    PortUnreachableException may be thrown if the socket is connected
                      to a currently unreachable destination. Note, there is no guarantee that the
                      exception will be thrown.                    
                </exception>
                <exception>
                    java.nio.channels.IllegalBlockingModeExceptionif this socket has an associated channel,
                      and the channel is in non-blocking mode.                    
                </exception>
                <see>
                    java.net.DatagramPacket                    
                </see>
                <see>
                    java.net.DatagramSocket                    
                </see>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="receive" type="void" line="710">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <comment line="716">
                    check the address is ok with the security manager before every recv.                    
                </comment>
                <comment line="722">
                    peek at the packet to see who it is from.                    
                </comment>
                <comment line="724">
                    We can use the new peekData() API                    
                </comment>
                <comment line="735">
                    security check succeeded - so now break
                     and recv the packet.                    
                </comment>
                <comment line="739">
                    Throw away the offending packet by consuming
                     it in a tmp buffer.                    
                </comment>
                <comment line="744">
                    silently discard the offending packet
                     and continue: unknown/malicious
                     entities on nets should not make
                     runtime throw security exception and
                     disrupt the applet by sending random
                     datagram packets.                    
                </comment>
                <comment line="752">
                    end of while                    
                </comment>
                <comment line="756">
                    We have to do the filtering the old fashioned way since
                     the native impl doesn&apos;t support connect or the connect
                     via the impl failed.                    
                </comment>
                <comment line="761">
                    peek at the packet to see who it is from.                    
                </comment>
                <comment line="766">
                    throw the packet away and silently continue                    
                </comment>
                <comment line="774">
                    If the security check succeeds, or the datagram is
                     connected then receive the packet                    
                </comment>
                <scope line="711">
                    <scope line="714">
                        <declaration name="security" type="SecurityManager" line="716"/>
                        <scope line="717">
                            <scope line="718">
                                <declaration name="peekAd" type="String" line="719"/>
                                <declaration name="peekPort" type="int" line="720"/>
                                <scope line="722">
                                    <declaration name="peekPacket" type="DatagramPacket" line="724"/>
                                </scope>
                                <scope line="727">
                                    <declaration name="adr" type="InetAddress" line="728"/>
                                </scope>
                                <scope line="732"/>
                                <scope line="737">
                                    <declaration name="tmp" type="DatagramPacket" line="740"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="754">
                        <declaration name="stop" type="boolean" line="758"/>
                        <scope line="759">
                            <declaration name="peekAddress" type="InetAddress" line="761"/>
                            <declaration name="peekPort" type="int" line="762"/>
                            <scope line="764">
                                <declaration name="tmp" type="DatagramPacket" line="766"/>
                            </scope>
                            <scope line="768"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="779">
                Gets the local address to which the socket is bound.
                  &lt;p&gt;If there is a security manager, its
                  &lt;code&gt;checkConnect&lt;/code&gt; method is first called
                  with the host address and &lt;code&gt;-1&lt;/code&gt;
                  as its arguments to see if the operation is allowed.                
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <return>
                    the local address to which the socket is bound,
                      <code>null</code> if the socket is closed, or
                      an <code>InetAddress</code> representing{@link InetAddress#isAnyLocalAddress wildcard}address if either the socket is not bound, or
                      the security manager <code>checkConnect</code>
                      method does not allow the operation                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getLocalAddress" type="InetAddress" line="797">
                <comment line="812">
                    &quot;0.0.0.0&quot;                    
                </comment>
                <declaration name="in" type="InetAddress" line="800"/>
                <scope line="801">
                    <scope line="803"/>
                    <declaration name="s" type="SecurityManager" line="806"/>
                    <scope line="807"/>
                </scope>
                <scope line="810"/>
            </method>
            <javadoc line="816">
                Returns the port number on the local host to which this socket
                  is bound.                
                <return>
                    the port number on the local host to which this socket is bound,
                      <code>-1</code> if the socket is closed, or
                      <code>0</code> if it is not bound yet.                    
                </return>
            </javadoc>
            <method name="getLocalPort" type="int" line="824">
                <scope line="827"/>
                <scope line="829"/>
            </method>
            <javadoc line="834">
                Enable/disable SO_TIMEOUT with the specified timeout, in
                  milliseconds. With this option set to a non-zero timeout,
                  a call to receive() for this DatagramSocket
                  will block for only this amount of time.  If the timeout expires,
                  a &lt;B&gt;java.net.SocketTimeoutException&lt;/B&gt; is raised, though the
                  DatagramSocket is still valid.  The option &lt;B&gt;must&lt;/B&gt; be enabled
                  prior to entering the blocking operation to have effect.  The
                  timeout must be &gt; 0.
                  A timeout of zero is interpreted as an infinite timeout.                
                <param>
                    timeout the specified timeout in milliseconds.                    
                </param>
                <throws>
                    SocketException if there is an error in the underlying protocol, such as an UDP error.                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #getSoTimeout()                    
                </see>
            </javadoc>
            <method name="setSoTimeout" type="void" line="849">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="855">
                Retrieve setting for SO_TIMEOUT.  0 returns implies that the
                  option is disabled (i.e., timeout of infinity).                
                <return>
                    the setting for SO_TIMEOUT                    
                </return>
                <throws>
                    SocketException if there is an error in the underlying protocol, such as an UDP error.                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #setSoTimeout(int)                    
                </see>
            </javadoc>
            <method name="getSoTimeout" type="int" line="864">
                <comment line="871">
                                        
                </comment>
                <declaration name="o" type="Object" line="869"/>
                <scope line="871"/>
                <scope line="873"/>
            </method>
            <javadoc line="878">
                Sets the SO_SNDBUF option to the specified value for this
                  &lt;tt&gt;DatagramSocket&lt;/tt&gt;. The SO_SNDBUF option is used by the
                  network implementation as a hint to size the underlying
                  network I/O buffers. The SO_SNDBUF setting may also be used
                  by the network implementation to determine the maximum size
                  of the packet that can be sent on this socket.
                  &lt;p&gt;
                  As SO_SNDBUF is a hint, applications that want to verify
                  what size the buffer is should call {@link #getSendBufferSize()}.
                  &lt;p&gt;
                  Increasing the buffer size may allow multiple outgoing packets
                  to be queued by the network implementation when the send rate
                  is high.
                  &lt;p&gt;
                  Note: If {@link #send(DatagramPacket)} is used to send a
                  &lt;code&gt;DatagramPacket&lt;/code&gt; that is larger than the setting
                  of SO_SNDBUF then it is implementation specific if the
                  packet is sent or discarded.                
                <param>
                    size the size to which to set the send buffer
                      size. This value must be greater than 0.                    
                </param>
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as an UDP error.                    
                </exception>
                <exception>
                    IllegalArgumentException if the value is 0 or is
                      negative.                    
                </exception>
                <see>
                    #getSendBufferSize()                    
                </see>
            </javadoc>
            <method name="setSendBufferSize" type="void" line="908">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="909"/>
            </method>
            <javadoc line="917">
                Get value of the SO_SNDBUF option for this &lt;tt&gt;DatagramSocket&lt;/tt&gt;, that is the
                  buffer size used by the platform for output on this &lt;tt&gt;DatagramSocket&lt;/tt&gt;.                
                <return>
                    the value of the SO_SNDBUF option for this <tt>DatagramSocket</tt>                    
                </return>
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as an UDP error.                    
                </exception>
                <see>
                    #setSendBufferSize                    
                </see>
            </javadoc>
            <method name="getSendBufferSize" type="int" line="926">
                <declaration name="result" type="int" line="929"/>
                <declaration name="o" type="Object" line="930"/>
                <scope line="931"/>
            </method>
            <javadoc line="937">
                Sets the SO_RCVBUF option to the specified value for this
                  &lt;tt&gt;DatagramSocket&lt;/tt&gt;. The SO_RCVBUF option is used by the
                  the network implementation as a hint to size the underlying
                  network I/O buffers. The SO_RCVBUF setting may also be used
                  by the network implementation to determine the maximum size
                  of the packet that can be received on this socket.
                  &lt;p&gt;
                  Because SO_RCVBUF is a hint, applications that want to
                  verify what size the buffers were set to should call{@link #getReceiveBufferSize()}.
                  &lt;p&gt;
                  Increasing SO_RCVBUF may allow the network implementation
                  to buffer multiple packets when packets arrive faster than
                  are being received using {@link #receive(DatagramPacket)}.
                  &lt;p&gt;
                  Note: It is implementation specific if a packet larger
                  than SO_RCVBUF can be received.                
                <param>
                    size the size to which to set the receive buffer
                      size. This value must be greater than 0.                    
                </param>
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as an UDP error.                    
                </exception>
                <exception>
                    IllegalArgumentException if the value is 0 or is
                      negative.                    
                </exception>
                <see>
                    #getReceiveBufferSize()                    
                </see>
            </javadoc>
            <method name="setReceiveBufferSize" type="void" line="966">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="967"/>
            </method>
            <javadoc line="975">
                Get value of the SO_RCVBUF option for this &lt;tt&gt;DatagramSocket&lt;/tt&gt;, that is the
                  buffer size used by the platform for input on this &lt;tt&gt;DatagramSocket&lt;/tt&gt;.                
                <return>
                    the value of the SO_RCVBUF option for this <tt>DatagramSocket</tt>                    
                </return>
                <exception>
                    SocketException if there is an error in the underlying protocol, such as an UDP error.                    
                </exception>
                <see>
                    #setReceiveBufferSize(int)                    
                </see>
            </javadoc>
            <method name="getReceiveBufferSize" type="int" line="984">
                <declaration name="result" type="int" line="987"/>
                <declaration name="o" type="Object" line="988"/>
                <scope line="989"/>
            </method>
            <javadoc line="995">
                Enable/disable the SO_REUSEADDR socket option.
                  &lt;p&gt;
                  For UDP sockets it may be necessary to bind more than one
                  socket to the same socket address. This is typically for the
                  purpose of receiving multicast packets
                  (See {@link java.net.MulticastSocket}). The
                  &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; socket option allows multiple
                  sockets to be bound to the same socket address if the
                  &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; socket option is enabled prior
                  to binding the socket using {@link #bind(SocketAddress)}.
                  &lt;p&gt;
                  Note: This functionality is not supported by all existing platforms,
                  so it is implementation specific whether this option will be ignored
                  or not. However, if it is not supported then{@link #getReuseAddress()} will always return &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt;
                  When a &lt;tt&gt;DatagramSocket&lt;/tt&gt; is created the initial setting
                  of &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; is disabled.
                  &lt;p&gt;
                  The behaviour when &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; is enabled or
                  disabled after a socket is bound (See {@link #isBound()})
                  is not defined.                
                <param>
                    on  whether to enable or disable the                    
                </param>
                <exception>
                    SocketException if an error occurs enabling or
                      disabling the <tt>SO_RESUEADDR</tt> socket option,
                      or the socket is closed.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #getReuseAddress()                    
                </see>
                <see>
                    #bind(SocketAddress)                    
                </see>
                <see>
                    #isBound()                    
                </see>
                <see>
                    #isClosed()                    
                </see>
            </javadoc>
            <method name="setReuseAddress" type="void" line="1029">
                <params>
                    <param name="on" type="boolean"/>
                </params>
                <comment line="1033">
                    Integer instead of Boolean for compatibility with older DatagramSocketImpl                    
                </comment>
            </method>
            <javadoc line="1039">
                Tests if SO_REUSEADDR is enabled.                
                <return>
                    a <code>boolean</code> indicating whether or not SO_REUSEADDR is enabled.                    
                </return>
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as an UDP error.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #setReuseAddress(boolean)                    
                </see>
            </javadoc>
            <method name="getReuseAddress" type="boolean" line="1048">
                <declaration name="o" type="Object" line="1051"/>
            </method>
            <javadoc line="1055">
                Enable/disable SO_BROADCAST.
                  &lt;p&gt; Some operating systems may require that the Java virtual machine be
                  started with implementation specific privileges to enable this option or
                  send broadcast datagrams.                
                <param>
                    onwhether or not to have broadcast turned on.                    
                </param>
                <throws>
                    SocketExceptionif there is an error in the underlying protocol, such as an UDP
                      error.                    
                </throws>
                <since>
                    1.4                    
                </since>
                <see>
                    #getBroadcast()                    
                </see>
            </javadoc>
            <method name="setBroadcast" type="void" line="1072">
                <params>
                    <param name="on" type="boolean"/>
                </params>
            </method>
            <javadoc line="1078">
                Tests if SO_BROADCAST is enabled.                
                <return>
                    a <code>boolean</code> indicating whether or not SO_BROADCAST is enabled.                    
                </return>
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as an UDP error.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #setBroadcast(boolean)                    
                </see>
            </javadoc>
            <method name="getBroadcast" type="boolean" line="1086"/>
            <javadoc line="1092">
                Sets traffic class or type-of-service octet in the IP
                  datagram header for datagrams sent from this DatagramSocket.
                  As the underlying network implementation may ignore this
                  value applications should consider it a hint.
                  &lt;P&gt; The tc &lt;B&gt;must&lt;/B&gt; be in the range &lt;code&gt; 0 &lt;= tc &lt;=
                  255&lt;/code&gt; or an IllegalArgumentException will be thrown.
                  &lt;p&gt;Notes:
                  &lt;p&gt;For Internet Protocol v4 the value consists of an
                  &lt;code&gt;integer&lt;/code&gt;, the least significant 8 bits of which
                  represent the value of the TOS octet in IP packets sent by
                  the socket.
                  RFC 1349 defines the TOS values as follows:
                  &lt;p&gt;
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;IPTOS_LOWCOST (0x02)&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;IPTOS_RELIABILITY (0x04)&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;IPTOS_THROUGHPUT (0x08)&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;IPTOS_LOWDELAY (0x10)&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;
                  The last low order bit is always ignored as this
                  corresponds to the MBZ (must be zero) bit.
                  &lt;p&gt;
                  Setting bits in the precedence field may result in a
                  SocketException indicating that the operation is not
                  permitted.
                  &lt;p&gt;
                  for Internet Protocol v6 &lt;code&gt;tc&lt;/code&gt; is the value that
                  would be placed into the sin6_flowinfo field of the IP header.                
                <param>
                    tc        an <code>int</code> value for the bitset.                    
                </param>
                <throws>
                    SocketException if there is an error setting the
                      traffic class or type-of-service                    
                </throws>
                <since>
                    1.4                    
                </since>
                <see>
                    #getTrafficClass                    
                </see>
            </javadoc>
            <method name="setTrafficClass" type="void" line="1129">
                <params>
                    <param name="tc" type="int"/>
                </params>
            </method>
            <javadoc line="1138">
                Gets traffic class or type-of-service in the IP datagram
                  header for packets sent from this DatagramSocket.
                  &lt;p&gt;
                  As the underlying network implementation may ignore the
                  traffic class or type-of-service set using {@link #setTrafficClass(int)}this method may return a different value than was previously
                  set using the {@link #setTrafficClass(int)} method on this
                  DatagramSocket.                
                <return>
                    the traffic class or type-of-service already set                    
                </return>
                <throws>
                    SocketException if there is an error obtaining the
                      traffic class or type-of-service value.                    
                </throws>
                <since>
                    1.4                    
                </since>
                <see>
                    #setTrafficClass(int)                    
                </see>
            </javadoc>
            <method name="getTrafficClass" type="int" line="1154"/>
            <javadoc line="1160">
                Closes this datagram socket.
                  &lt;p&gt;
                  Any thread currently blocked in {@link #receive} upon this socket
                  will throw a {@link SocketException}.
                  &lt;p&gt; If this socket has an associated channel then the channel is closed
                  as well.                
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="close" type="void" line="1172">
                <scope line="1173"/>
            </method>
            <javadoc line="1181">
                Returns whether the socket is closed or not.                
                <return>
                    true if the socket has been closed                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isClosed" type="boolean" line="1187">
                <scope line="1188"/>
            </method>
            <javadoc line="1193">
                Returns the unique {@link java.nio.channels.DatagramChannel} object
                  associated with this datagram socket, if any.
                  &lt;p&gt; A datagram socket will have a channel if, and only if, the channel
                  itself was created via the {@link java.nio.channels.DatagramChannel#openDatagramChannel.open} method.                
                <return>
                    the datagram channel associated with this datagram socket,
                      or <tt>null</tt> if this socket was not created for a channel                    
                </return>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getChannel" type="DatagramChannel" line="1207"/>
            <declaration name="factory" type="DatagramSocketImplFactory" line="1211"/>
            <javadoc line="1211">
                User defined factory for all datagram sockets.                
            </javadoc>
            <javadoc line="1216">
                Sets the datagram socket implementation factory for the
                  application. The factory can be specified only once.
                  &lt;p&gt;
                  When an application creates a new datagram socket, the socket
                  implementation factory&apos;s &lt;code&gt;createDatagramSocketImpl&lt;/code&gt; method is
                  called to create the actual datagram socket implementation.
                  &lt;p&gt;
                  Passing &lt;code&gt;null&lt;/code&gt; to the method is a no-op unless the factory
                  was already set.
                  &lt;p&gt;If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkSetFactory&lt;/code&gt; method
                  to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    fac   the desired factory.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when setting the
                      datagram socket factory.                    
                </exception>
                <exception>
                    SocketException  if the factory is already defined.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSetFactory</code> method doesn't allow the
                      operation.                    
                </exception>
                <see>
                    java.net.DatagramSocketImplFactory#createDatagramSocketImpl()                    
                </see>
                <see>
                    SecurityManager#checkSetFactory                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setDatagramSocketImplFactory" type="void" line="1247">
                <params>
                    <param name="fac" type="DatagramSocketImplFactory"/>
                </params>
                <scope line="1248"/>
                <declaration name="security" type="SecurityManager" line="1251"/>
                <scope line="1252"/>
            </method>
        </class>
    </source>