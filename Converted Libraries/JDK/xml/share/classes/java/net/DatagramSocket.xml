<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InterruptedIOException"/>
        <import package="java.nio.channels.DatagramChannel"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <class name="DatagramSocket" line="8">
            <implements interface="java.io.Closeable"/>
            <javadoc line="8">
                This class represents a socket for sending and receiving datagram packets.
                  &lt;p&gt;A datagram socket is the sending or receiving point for a packet
                  delivery service. Each packet sent or received on a datagram socket
                  is individually addressed and routed. Multiple packets sent from
                  one machine to another may be routed differently, and may arrive in
                  any order.
                  &lt;p&gt; Where possible, a newly constructed {@code DatagramSocket} has the{@link SocketOptions#SO_BROADCAST SO_BROADCAST} socket option enabled so as
                  to allow the transmission of broadcast datagrams. In order to receive
                  broadcast packets a DatagramSocket should be bound to the wildcard address.
                  In some implementations, broadcast packets may also be received when
                  a DatagramSocket is bound to a more specific address.
                  &lt;p&gt;
                  Example:
                  &lt;code&gt;
                  DatagramSocket s = new DatagramSocket(null);
                  s.bind(new InetSocketAddress(8888));
                  &lt;/code&gt;
                  Which is equivalent to:
                  &lt;code&gt;
                  DatagramSocket s = new DatagramSocket(8888);
                  &lt;/code&gt;
                  Both cases will create a DatagramSocket able to receive broadcasts on
                  UDP port 8888.                
                <author>
                    Pavani Diwanji                    
                </author>
                <see>
                    java.net.DatagramPacket                    
                </see>
                <see>
                    java.nio.channels.DatagramChannel                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="created" type="boolean" line="38"/>
            <javadoc line="38">
                Various states of this socket.                
            </javadoc>
            <declaration name="bound" type="boolean" line="42"/>
            <declaration name="closed" type="boolean" line="43"/>
            <declaration name="closeLock" type="Object" line="44"/>
            <declaration name="impl" type="DatagramSocketImpl" line="45"/>
            <declaration name="oldImpl" type="boolean" line="46"/>
            <javadoc line="46">
                Are we using an older DatagramSocketImpl?                
            </javadoc>
            <declaration name="ST_NOT_CONNECTED" type="int" line="50"/>
            <declaration name="ST_CONNECTED" type="int" line="51"/>
            <declaration name="ST_CONNECTED_NO_IMPL" type="int" line="52"/>
            <declaration name="connectState" type="int" line="53"/>
            <declaration name="connectedAddress" type="InetAddress" line="54"/>
            <declaration name="connectedPort" type="int" line="55"/>
            <javadoc line="56">
                Connects this socket to a remote socket address (IP address + port number).
                  Binds socket if not already bound.
                  &lt;p&gt;                
                <param>
                    addr    The remote address.                    
                </param>
                <param>
                    port    The remote port                    
                </param>
                <throws>
                    SocketException if binding the socket fails.                    
                </throws>
            </javadoc>
            <method name="connectInternal" type="void" line="64">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="65"/>
                <scope line="68"/>
                <declaration name="security" type="SecurityManager" line="73"/>
                <scope line="74">
                    <scope line="75"/>
                    <scope line="78"/>
                </scope>
                <scope line="84"/>
                <scope line="87">
                    <scope line="88"/>
                    <scope line="92"/>
                </scope>
            </method>
            <javadoc line="99">
                Constructs a datagram socket and binds it to any available port
                  on the local host machine.  The socket will be bound to the{@link InetAddress#isAnyLocalAddress wildcard} address,
                  an IP address chosen by the kernel.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with 0 as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <exception>
                    SocketException  if the socket could not be opened,
                      or the socket could not bind to the specified local port.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkListen&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="113">
                <scope line="115"/>
                <scope line="118"/>
                <scope line="121"/>
            </method>
            <javadoc line="125">
                Creates an unbound datagram socket with the specified
                  DatagramSocketImpl.                
                <param>
                    impl an instance of a &lt;B&gt;DatagramSocketImpl&lt;/B&gt;
                      the subclass wishes to use on the DatagramSocket.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="132">
                <params>
                    <param name="impl" type="DatagramSocketImpl"/>
                </params>
            </method>
            <javadoc line="137">
                Creates a datagram socket, bound to the specified local
                  socket address.
                  &lt;p&gt;
                  If, if the address is &lt;code&gt;null&lt;/code&gt;, creates an unbound socket.
                  &lt;p&gt;
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with the port from the socket address
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    bindaddr local socket address to bind, or &lt;code&gt;null&lt;/code&gt;
                      for an unbound socket.                    
                </param>
                <exception>
                    SocketException  if the socket could not be opened,
                      or the socket could not bind to the specified local port.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkListen&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="157">
                <params>
                    <param name="bindaddr" type="SocketAddress"/>
                </params>
                <scope line="159"/>
            </method>
            <javadoc line="163">
                Constructs a datagram socket and binds it to the specified port
                  on the local host machine.  The socket will be bound to the{@link InetAddress#isAnyLocalAddress wildcard} address,
                  an IP address chosen by the kernel.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with the &lt;code&gt;port&lt;/code&gt; argument
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    port port to use.                    
                </param>
                <exception>
                    SocketException  if the socket could not be opened,
                      or the socket could not bind to the specified local port.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkListen&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="179">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="182">
                Creates a datagram socket, bound to the specified local
                  address.  The local port must be between 0 and 65535 inclusive.
                  If the IP address is 0.0.0.0, the socket will be bound to the{@link InetAddress#isAnyLocalAddress wildcard} address,
                  an IP address chosen by the kernel.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkListen&lt;/code&gt; method is first called
                  with the &lt;code&gt;port&lt;/code&gt; argument
                  as its argument to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    port local port to use                    
                </param>
                <param>
                    laddr local address to bind                    
                </param>
                <exception>
                    SocketException  if the socket could not be opened,
                      or the socket could not bind to the specified local port.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkListen&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkListen                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="DatagramSocket" type="constructor" line="201">
                <params>
                    <param name="port" type="int"/>
                    <param name="laddr" type="InetAddress"/>
                </params>
            </method>
            <method name="checkOldImpl" type="void" line="204">
                <scope line="206">
                    <anonymous_class line="207">
                        <method name="run" type="Void" line="208">
                            <declaration name="cl" type="Class[]" line="209"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="217"/>
            </method>
            <declaration name="implClass" type="Class" line="221"/>
            <method name="createImpl" type="void" line="222">
                <scope line="223">
                    <scope line="224"/>
                    <scope line="228">
                        <declaration name="isMulticast" type="boolean" line="229"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="237">
                Get the &lt;code&gt;DatagramSocketImpl&lt;/code&gt; attached to this socket,
                  creating it if necessary.                
                <return>
                    the &lt;code&gt;DatagramSocketImpl&lt;/code&gt; attached to that
                      DatagramSocket                    
                </return>
                <throws>
                    SocketException if creation fails.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getImpl" type="DatagramSocketImpl" line="245"/>
            <javadoc line="249">
                Binds this DatagramSocket to a specific address &amp; port.
                  &lt;p&gt;
                  If the address is &lt;code&gt;null&lt;/code&gt;, then the system will pick up
                  an ephemeral port and a valid local address to bind the socket.
                  &lt;p&gt;                
                <param>
                    addr The address &amp; port to bind to.                    
                </param>
                <throws>
                    SocketException if any error happens during the bind, or if the
                      socket is already bound.                    
                </throws>
                <throws>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkListen&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if addr is a SocketAddress subclass
                      not supported by this socket.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="bind" type="void" line="264">
                <params>
                    <param name="addr" type="SocketAddress"/>
                </params>
                <declaration name="epoint" type="InetSocketAddress" line="269"/>
                <declaration name="iaddr" type="InetAddress" line="271"/>
                <declaration name="port" type="int" line="272"/>
                <declaration name="sec" type="SecurityManager" line="274"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <method name="checkAddress" type="void" line="287">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="op" type="String"/>
                </params>
                <scope line="288"/>
                <scope line="291"/>
            </method>
            <javadoc line="295">
                Connects the socket to a remote address for this socket. When a
                  socket is connected to a remote address, packets may only be
                  sent to or received from that address. By default a datagram
                  socket is not connected.
                  &lt;p&gt;If the remote destination to which the socket is connected does not
                  exist, or is otherwise unreachable, and if an ICMP destination unreachable
                  packet has been received for that address, then a subsequent call to
                  send or receive may throw a PortUnreachableException. Note, there is no
                  guarantee that the exception will be thrown.
                  &lt;p&gt; If a security manager has been installed then it is invoked to check
                  access to the remote address. Specifically, if the given {@code address}is a {@link InetAddress#isMulticastAddress multicast address},
                  the security manager&apos;s {@link java.lang.SecurityManager#checkMulticast(InetAddress)checkMulticast} method is invoked with the given {@code address}.
                  Otherwise, the security manager&apos;s {@link java.lang.SecurityManager#checkConnect(String,int) checkConnect}and {@link java.lang.SecurityManager#checkAccept checkAccept} methods
                  are invoked, with the given {@code address} and {@code port}, to
                  verify that datagrams are permitted to be sent and received
                  respectively.
                  &lt;p&gt; When a socket is connected, {@link #receive receive} and{@link #send send} &lt;b&gt;will not perform any security checks&lt;/b&gt;
                  on incoming and outgoing packets, other than matching the packet&apos;s
                  and the socket&apos;s address and port. On a send operation, if the
                  packet&apos;s address is set and the packet&apos;s address and the socket&apos;s
                  address do not match, an {@code IllegalArgumentException} will be
                  thrown. A socket connected to a multicast address may only be used
                  to send packets.                
                <param>
                    address the remote address for the socket                    
                </param>
                <param>
                    port the remote port for the socket.                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the address is null, or the port is out of range.                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager has been installed and it does
                      not permit access to the given remote address                    
                </throws>
                <see>
                    #disconnect                    
                </see>
            </javadoc>
            <method name="connect" type="void" line="326">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="327"/>
                <scope line="330"/>
            </method>
            <javadoc line="334">
                Connects this socket to a remote socket address (IP address + port number).
                  &lt;p&gt; If given an {@link InetSocketAddress InetSocketAddress}, this method
                  behaves as if invoking {@link #connect(InetAddress,int) connect(InetAddress,int)}with the the given socket addresses IP address and port number.                
                <param>
                    addr    The remote address.                    
                </param>
                <throws>
                    SocketExceptionif the connect fails                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code addr} is {@code null}, or {@code addr} is a SocketAddress
                      subclass not supported by this socket                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager has been installed and it does
                      not permit access to the given remote address                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="connect" type="void" line="346">
                <params>
                    <param name="addr" type="SocketAddress"/>
                </params>
                <declaration name="epoint" type="InetSocketAddress" line="349"/>
            </method>
            <javadoc line="353">
                Disconnects the socket. If the socket is closed or not connected,
                  then this method has no effect.                
                <see>
                    #connect                    
                </see>
            </javadoc>
            <method name="disconnect" type="void" line="358">
                <scope line="359">
                    <scope line="361"/>
                </scope>
            </method>
            <javadoc line="369">
                Returns the binding state of the socket.
                  &lt;p&gt;
                  If the socket was bound prior to being {@link #close closed},
                  then this method will continue to return &lt;code&gt;true&lt;/code&gt;
                  after the socket is closed.                
                <return>
                    true if the socket successfully bound to an address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isBound" type="boolean" line="378"/>
            <javadoc line="381">
                Returns the connection state of the socket.
                  &lt;p&gt;
                  If the socket was connected prior to being {@link #close closed},
                  then this method will continue to return &lt;code&gt;true&lt;/code&gt;
                  after the socket is closed.                
                <return>
                    true if the socket successfully connected to a server                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isConnected" type="boolean" line="390"/>
            <javadoc line="393">
                Returns the address to which this socket is connected. Returns
                  &lt;code&gt;null&lt;/code&gt; if the socket is not connected.
                  &lt;p&gt;
                  If the socket was connected prior to being {@link #close closed},
                  then this method will continue to return the connected address
                  after the socket is closed.                
                <return>
                    the address to which this socket is connected.                    
                </return>
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="402"/>
            <javadoc line="405">
                Returns the port number to which this socket is connected.
                  Returns &lt;code&gt;-1&lt;/code&gt; if the socket is not connected.
                  &lt;p&gt;
                  If the socket was connected prior to being {@link #close closed},
                  then this method will continue to return the connected port number
                  after the socket is closed.                
                <return>
                    the port number to which this socket is connected.                    
                </return>
            </javadoc>
            <method name="getPort" type="int" line="414"/>
            <javadoc line="417">
                Returns the address of the endpoint this socket is connected to, or
                  &lt;code&gt;null&lt;/code&gt; if it is unconnected.
                  &lt;p&gt;
                  If the socket was connected prior to being {@link #close closed},
                  then this method will continue to return the connected address
                  after the socket is closed.                
                <return>
                    a &lt;code&gt;SocketAddress&lt;/code&gt; representing the remote
                      endpoint of this socket, or &lt;code&gt;null&lt;/code&gt; if it is
                      not connected yet.                    
                </return>
                <see>
                    #getInetAddress()                    
                </see>
                <see>
                    #getPort()                    
                </see>
                <see>
                    #connect(SocketAddress)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRemoteSocketAddress" type="SocketAddress" line="432"/>
            <javadoc line="436">
                Returns the address of the endpoint this socket is bound to.                
                <return>
                    a &lt;code&gt;SocketAddress&lt;/code&gt; representing the local endpoint of this
                      socket, or &lt;code&gt;null&lt;/code&gt; if it is closed or not bound yet.                    
                </return>
                <see>
                    #getLocalAddress()                    
                </see>
                <see>
                    #getLocalPort()                    
                </see>
                <see>
                    #bind(SocketAddress)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getLocalSocketAddress" type="SocketAddress" line="445"/>
            <javadoc line="450">
                Sends a datagram packet from this socket. The
                  &lt;code&gt;DatagramPacket&lt;/code&gt; includes information indicating the
                  data to be sent, its length, the IP address of the remote host,
                  and the port number on the remote host.
                  &lt;p&gt;If there is a security manager, and the socket is not currently
                  connected to a remote address, this method first performs some
                  security checks. First, if &lt;code&gt;p.getAddress().isMulticastAddress()&lt;/code&gt;
                  is true, this method calls the
                  security manager&apos;s &lt;code&gt;checkMulticast&lt;/code&gt; method
                  with &lt;code&gt;p.getAddress()&lt;/code&gt; as its argument.
                  If the evaluation of that expression is false,
                  this method instead calls the security manager&apos;s
                  &lt;code&gt;checkConnect&lt;/code&gt; method with arguments
                  &lt;code&gt;p.getAddress().getHostAddress()&lt;/code&gt; and
                  &lt;code&gt;p.getPort()&lt;/code&gt;. Each call to a security manager method
                  could result in a SecurityException if the operation is not allowed.                
                <param>
                    p   the &lt;code&gt;DatagramPacket&lt;/code&gt; to be sent.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkMulticast&lt;/code&gt; or &lt;code&gt;checkConnect&lt;/code&gt;
                      method doesn&apos;t allow the send.                    
                </exception>
                <exception>
                    PortUnreachableException may be thrown if the socket is connected
                      to a currently unreachable destination. Note, there is no
                      guarantee that the exception will be thrown.                    
                </exception>
                <exception>
                    java.nio.channels.IllegalBlockingModeExceptionif this socket has an associated channel,
                      and the channel is in non-blocking mode.                    
                </exception>
                <exception>
                    IllegalArgumentException if the socket is connected,
                      and connected address and packet address differ.                    
                </exception>
                <see>
                    java.net.DatagramPacket                    
                </see>
                <see>
                    SecurityManager#checkMulticast(InetAddress)                    
                </see>
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="send" type="void" line="485">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <declaration name="packetAddress" type="InetAddress" line="486"/>
                <scope line="487">
                    <scope line="490">
                        <declaration name="security" type="SecurityManager" line="491"/>
                        <scope line="492">
                            <scope line="493"/>
                            <scope line="496"/>
                        </scope>
                    </scope>
                    <scope line="501">
                        <scope line="503"/>
                        <scope line="507"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="515">
                Receives a datagram packet from this socket. When this method
                  returns, the &lt;code&gt;DatagramPacket&lt;/code&gt;&apos;s buffer is filled with
                  the data received. The datagram packet also contains the sender&apos;s
                  IP address, and the port number on the sender&apos;s machine.
                  &lt;p&gt;
                  This method blocks until a datagram is received. The
                  &lt;code&gt;length&lt;/code&gt; field of the datagram packet object contains
                  the length of the received message. If the message is longer than
                  the packet&apos;s length, the message is truncated.
                  &lt;p&gt;
                  If there is a security manager, a packet cannot be received if the
                  security manager&apos;s &lt;code&gt;checkAccept&lt;/code&gt; method
                  does not allow it.                
                <param>
                    p   the &lt;code&gt;DatagramPacket&lt;/code&gt; into which to place
                      the incoming data.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <exception>
                    SocketTimeoutException  if setSoTimeout was previously called
                      and the timeout has expired.                    
                </exception>
                <exception>
                    PortUnreachableException may be thrown if the socket is connected
                      to a currently unreachable destination. Note, there is no guarantee that the
                      exception will be thrown.                    
                </exception>
                <exception>
                    java.nio.channels.IllegalBlockingModeExceptionif this socket has an associated channel,
                      and the channel is in non-blocking mode.                    
                </exception>
                <see>
                    java.net.DatagramPacket                    
                </see>
                <see>
                    java.net.DatagramSocket                    
                </see>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="receive" type="void" line="544">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <scope line="545">
                    <scope line="547">
                        <declaration name="security" type="SecurityManager" line="548"/>
                        <scope line="549">
                            <scope line="550">
                                <declaration name="peekAd" type="String" line="551"/>
                                <declaration name="peekPort" type="int" line="552"/>
                                <scope line="553">
                                    <declaration name="peekPacket" type="DatagramPacket" line="554"/>
                                </scope>
                                <scope line="558">
                                    <declaration name="adr" type="InetAddress" line="559"/>
                                </scope>
                                <scope line="563"/>
                                <scope line="567">
                                    <declaration name="tmp" type="DatagramPacket" line="568"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="575">
                        <declaration name="stop" type="boolean" line="576"/>
                        <scope line="577">
                            <declaration name="peekAddress" type="InetAddress" line="578"/>
                            <declaration name="peekPort" type="int" line="579"/>
                            <scope line="580">
                                <declaration name="tmp" type="DatagramPacket" line="581"/>
                            </scope>
                            <scope line="584"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="592">
                Gets the local address to which the socket is bound.
                  &lt;p&gt;If there is a security manager, its
                  &lt;code&gt;checkConnect&lt;/code&gt; method is first called
                  with the host address and &lt;code&gt;-1&lt;/code&gt;
                  as its arguments to see if the operation is allowed.                
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <return>
                    the local address to which the socket is bound,
                      &lt;code&gt;null&lt;/code&gt; if the socket is closed, or
                      an &lt;code&gt;InetAddress&lt;/code&gt; representing{@link InetAddress#isAnyLocalAddress wildcard}address if either the socket is not bound, or
                      the security manager &lt;code&gt;checkConnect&lt;/code&gt;
                      method does not allow the operation                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getLocalAddress" type="InetAddress" line="606">
                <declaration name="in" type="InetAddress" line="608"/>
                <scope line="609">
                    <scope line="611"/>
                    <declaration name="s" type="SecurityManager" line="614"/>
                    <scope line="615"/>
                </scope>
                <scope line="619"/>
            </method>
            <javadoc line="624">
                Returns the port number on the local host to which this socket
                  is bound.                
                <return>
                    the port number on the local host to which this socket is bound,
                      &lt;code&gt;-1&lt;/code&gt; if the socket is closed, or
                      &lt;code&gt;0&lt;/code&gt; if it is not bound yet.                    
                </return>
            </javadoc>
            <method name="getLocalPort" type="int" line="631">
                <scope line="633"/>
                <scope line="636"/>
            </method>
            <javadoc line="640">
                Enable/disable SO_TIMEOUT with the specified timeout, in
                  milliseconds. With this option set to a non-zero timeout,
                  a call to receive() for this DatagramSocket
                  will block for only this amount of time.  If the timeout expires,
                  a &lt;B&gt;java.net.SocketTimeoutException&lt;/B&gt; is raised, though the
                  DatagramSocket is still valid.  The option &lt;B&gt;must&lt;/B&gt; be enabled
                  prior to entering the blocking operation to have effect.  The
                  timeout must be &gt; 0.
                  A timeout of zero is interpreted as an infinite timeout.                
                <param>
                    timeout the specified timeout in milliseconds.                    
                </param>
                <throws>
                    SocketException if there is an error in the underlying protocol, such as an UDP error.                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #getSoTimeout()                    
                </see>
            </javadoc>
            <method name="setSoTimeout" type="void" line="655">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="659">
                Retrieve setting for SO_TIMEOUT.  0 returns implies that the
                  option is disabled (i.e., timeout of infinity).                
                <return>
                    the setting for SO_TIMEOUT                    
                </return>
                <throws>
                    SocketException if there is an error in the underlying protocol, such as an UDP error.                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #setSoTimeout(int)                    
                </see>
            </javadoc>
            <method name="getSoTimeout" type="int" line="667">
                <declaration name="o" type="Object" line="670"/>
                <scope line="671"/>
                <scope line="674"/>
            </method>
            <javadoc line="678">
                Sets the SO_SNDBUF option to the specified value for this
                  &lt;tt&gt;DatagramSocket&lt;/tt&gt;. The SO_SNDBUF option is used by the
                  network implementation as a hint to size the underlying
                  network I/O buffers. The SO_SNDBUF setting may also be used
                  by the network implementation to determine the maximum size
                  of the packet that can be sent on this socket.
                  &lt;p&gt;
                  As SO_SNDBUF is a hint, applications that want to verify
                  what size the buffer is should call {@link #getSendBufferSize()}.
                  &lt;p&gt;
                  Increasing the buffer size may allow multiple outgoing packets
                  to be queued by the network implementation when the send rate
                  is high.
                  &lt;p&gt;
                  Note: If {@link #send(DatagramPacket)} is used to send a
                  &lt;code&gt;DatagramPacket&lt;/code&gt; that is larger than the setting
                  of SO_SNDBUF then it is implementation specific if the
                  packet is sent or discarded.                
                <param>
                    size the size to which to set the send buffer
                      size. This value must be greater than 0.                    
                </param>
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as an UDP error.                    
                </exception>
                <exception>
                    IllegalArgumentException if the value is 0 or is
                      negative.                    
                </exception>
                <see>
                    #getSendBufferSize()                    
                </see>
            </javadoc>
            <method name="setSendBufferSize" type="void" line="705">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="706"/>
            </method>
            <javadoc line="712">
                Get value of the SO_SNDBUF option for this &lt;tt&gt;DatagramSocket&lt;/tt&gt;, that is the
                  buffer size used by the platform for output on this &lt;tt&gt;DatagramSocket&lt;/tt&gt;.                
                <return>
                    the value of the SO_SNDBUF option for this &lt;tt&gt;DatagramSocket&lt;/tt&gt;                    
                </return>
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as an UDP error.                    
                </exception>
                <see>
                    #setSendBufferSize                    
                </see>
            </javadoc>
            <method name="getSendBufferSize" type="int" line="720">
                <declaration name="result" type="int" line="722"/>
                <declaration name="o" type="Object" line="723"/>
                <scope line="724"/>
            </method>
            <javadoc line="729">
                Sets the SO_RCVBUF option to the specified value for this
                  &lt;tt&gt;DatagramSocket&lt;/tt&gt;. The SO_RCVBUF option is used by the
                  the network implementation as a hint to size the underlying
                  network I/O buffers. The SO_RCVBUF setting may also be used
                  by the network implementation to determine the maximum size
                  of the packet that can be received on this socket.
                  &lt;p&gt;
                  Because SO_RCVBUF is a hint, applications that want to
                  verify what size the buffers were set to should call{@link #getReceiveBufferSize()}.
                  &lt;p&gt;
                  Increasing SO_RCVBUF may allow the network implementation
                  to buffer multiple packets when packets arrive faster than
                  are being received using {@link #receive(DatagramPacket)}.
                  &lt;p&gt;
                  Note: It is implementation specific if a packet larger
                  than SO_RCVBUF can be received.                
                <param>
                    size the size to which to set the receive buffer
                      size. This value must be greater than 0.                    
                </param>
                <exception>
                    SocketException if there is an error in
                      the underlying protocol, such as an UDP error.                    
                </exception>
                <exception>
                    IllegalArgumentException if the value is 0 or is
                      negative.                    
                </exception>
                <see>
                    #getReceiveBufferSize()                    
                </see>
            </javadoc>
            <method name="setReceiveBufferSize" type="void" line="754">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="755"/>
            </method>
            <javadoc line="761">
                Get value of the SO_RCVBUF option for this &lt;tt&gt;DatagramSocket&lt;/tt&gt;, that is the
                  buffer size used by the platform for input on this &lt;tt&gt;DatagramSocket&lt;/tt&gt;.                
                <return>
                    the value of the SO_RCVBUF option for this &lt;tt&gt;DatagramSocket&lt;/tt&gt;                    
                </return>
                <exception>
                    SocketException if there is an error in the underlying protocol, such as an UDP error.                    
                </exception>
                <see>
                    #setReceiveBufferSize(int)                    
                </see>
            </javadoc>
            <method name="getReceiveBufferSize" type="int" line="768">
                <declaration name="result" type="int" line="770"/>
                <declaration name="o" type="Object" line="771"/>
                <scope line="772"/>
            </method>
            <javadoc line="777">
                Enable/disable the SO_REUSEADDR socket option.
                  &lt;p&gt;
                  For UDP sockets it may be necessary to bind more than one
                  socket to the same socket address. This is typically for the
                  purpose of receiving multicast packets
                  (See {@link java.net.MulticastSocket}). The
                  &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; socket option allows multiple
                  sockets to be bound to the same socket address if the
                  &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; socket option is enabled prior
                  to binding the socket using {@link #bind(SocketAddress)}.
                  &lt;p&gt;
                  Note: This functionality is not supported by all existing platforms,
                  so it is implementation specific whether this option will be ignored
                  or not. However, if it is not supported then{@link #getReuseAddress()} will always return &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt;
                  When a &lt;tt&gt;DatagramSocket&lt;/tt&gt; is created the initial setting
                  of &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; is disabled.
                  &lt;p&gt;
                  The behaviour when &lt;tt&gt;SO_REUSEADDR&lt;/tt&gt; is enabled or
                  disabled after a socket is bound (See {@link #isBound()})
                  is not defined.                
                <param>
                    on  whether to enable or disable the                    
                </param>
                <exception>
                    SocketException if an error occurs enabling or
                      disabling the &lt;tt&gt;SO_RESUEADDR&lt;/tt&gt; socket option,
                      or the socket is closed.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #getReuseAddress()                    
                </see>
                <see>
                    #bind(SocketAddress)                    
                </see>
                <see>
                    #isBound()                    
                </see>
                <see>
                    #isClosed()                    
                </see>
            </javadoc>
            <method name="setReuseAddress" type="void" line="809">
                <params>
                    <param name="on" type="boolean"/>
                </params>
            </method>
            <javadoc line="814">
                Tests if SO_REUSEADDR is enabled.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating whether or not SO_REUSEADDR is enabled.                    
                </return>
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as an UDP error.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #setReuseAddress(boolean)                    
                </see>
            </javadoc>
            <method name="getReuseAddress" type="boolean" line="822">
                <declaration name="o" type="Object" line="824"/>
            </method>
            <javadoc line="827">
                Enable/disable SO_BROADCAST.
                  &lt;p&gt; Some operating systems may require that the Java virtual machine be
                  started with implementation specific privileges to enable this option or
                  send broadcast datagrams.                
                <param>
                    onwhether or not to have broadcast turned on.                    
                </param>
                <throws>
                    SocketExceptionif there is an error in the underlying protocol, such as an UDP
                      error.                    
                </throws>
                <since>
                    1.4                    
                </since>
                <see>
                    #getBroadcast()                    
                </see>
            </javadoc>
            <method name="setBroadcast" type="void" line="838">
                <params>
                    <param name="on" type="boolean"/>
                </params>
            </method>
            <javadoc line="842">
                Tests if SO_BROADCAST is enabled.                
                <return>
                    a &lt;code&gt;boolean&lt;/code&gt; indicating whether or not SO_BROADCAST is enabled.                    
                </return>
                <exception>
                    SocketException if there is an error
                      in the underlying protocol, such as an UDP error.                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #setBroadcast(boolean)                    
                </see>
            </javadoc>
            <method name="getBroadcast" type="boolean" line="850"/>
            <javadoc line="854">
                Sets traffic class or type-of-service octet in the IP
                  datagram header for datagrams sent from this DatagramSocket.
                  As the underlying network implementation may ignore this
                  value applications should consider it a hint.
                  &lt;P&gt; The tc &lt;B&gt;must&lt;/B&gt; be in the range &lt;code&gt; 0 &lt;= tc &lt;=
                  255&lt;/code&gt; or an IllegalArgumentException will be thrown.
                  &lt;p&gt;Notes:
                  &lt;p&gt;For Internet Protocol v4 the value consists of an
                  &lt;code&gt;integer&lt;/code&gt;, the least significant 8 bits of which
                  represent the value of the TOS octet in IP packets sent by
                  the socket.
                  RFC 1349 defines the TOS values as follows:
                  &lt;p&gt;
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;IPTOS_LOWCOST (0x02)&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;IPTOS_RELIABILITY (0x04)&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;IPTOS_THROUGHPUT (0x08)&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;IPTOS_LOWDELAY (0x10)&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;
                  The last low order bit is always ignored as this
                  corresponds to the MBZ (must be zero) bit.
                  &lt;p&gt;
                  Setting bits in the precedence field may result in a
                  SocketException indicating that the operation is not
                  permitted.
                  &lt;p&gt;
                  for Internet Protocol v6 &lt;code&gt;tc&lt;/code&gt; is the value that
                  would be placed into the sin6_flowinfo field of the IP header.                
                <param>
                    tc        an &lt;code&gt;int&lt;/code&gt; value for the bitset.                    
                </param>
                <throws>
                    SocketException if there is an error setting the
                      traffic class or type-of-service                    
                </throws>
                <since>
                    1.4                    
                </since>
                <see>
                    #getTrafficClass                    
                </see>
            </javadoc>
            <method name="setTrafficClass" type="void" line="889">
                <params>
                    <param name="tc" type="int"/>
                </params>
            </method>
            <javadoc line="894">
                Gets traffic class or type-of-service in the IP datagram
                  header for packets sent from this DatagramSocket.
                  &lt;p&gt;
                  As the underlying network implementation may ignore the
                  traffic class or type-of-service set using {@link #setTrafficClass(int)}this method may return a different value than was previously
                  set using the {@link #setTrafficClass(int)} method on this
                  DatagramSocket.                
                <return>
                    the traffic class or type-of-service already set                    
                </return>
                <throws>
                    SocketException if there is an error obtaining the
                      traffic class or type-of-service value.                    
                </throws>
                <since>
                    1.4                    
                </since>
                <see>
                    #setTrafficClass(int)                    
                </see>
            </javadoc>
            <method name="getTrafficClass" type="int" line="908"/>
            <javadoc line="912">
                Closes this datagram socket.
                  &lt;p&gt;
                  Any thread currently blocked in {@link #receive} upon this socket
                  will throw a {@link SocketException}.
                  &lt;p&gt; If this socket has an associated channel then the channel is closed
                  as well.                
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="close" type="void" line="922">
                <scope line="923"/>
            </method>
            <javadoc line="929">
                Returns whether the socket is closed or not.                
                <return>
                    true if the socket has been closed                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isClosed" type="boolean" line="934">
                <scope line="935"/>
            </method>
            <javadoc line="939">
                Returns the unique {@link java.nio.channels.DatagramChannel} object
                  associated with this datagram socket, if any.
                  &lt;p&gt; A datagram socket will have a channel if, and only if, the channel
                  itself was created via the {@link java.nio.channels.DatagramChannel#openDatagramChannel} method.                
                <return>
                    the datagram channel associated with this datagram socket,
                      or &lt;tt&gt;null&lt;/tt&gt; if this socket was not created for a channel                    
                </return>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getChannel" type="DatagramChannel" line="949"/>
            <declaration name="factory" type="DatagramSocketImplFactory" line="952"/>
            <javadoc line="952">
                User defined factory for all datagram sockets.                
            </javadoc>
            <javadoc line="956">
                Sets the datagram socket implementation factory for the
                  application. The factory can be specified only once.
                  &lt;p&gt;
                  When an application creates a new datagram socket, the socket
                  implementation factory&apos;s &lt;code&gt;createDatagramSocketImpl&lt;/code&gt; method is
                  called to create the actual datagram socket implementation.
                  &lt;p&gt;
                  Passing &lt;code&gt;null&lt;/code&gt; to the method is a no-op unless the factory
                  was already set.
                  &lt;p&gt;If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkSetFactory&lt;/code&gt; method
                  to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    fac   the desired factory.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when setting the
                      datagram socket factory.                    
                </exception>
                <exception>
                    SocketException  if the factory is already defined.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkSetFactory&lt;/code&gt; method doesn&apos;t allow the
                      operation.                    
                </exception>
                <see>
                    java.net.DatagramSocketImplFactory#createDatagramSocketImpl()                    
                </see>
                <see>
                    SecurityManager#checkSetFactory                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setDatagramSocketImplFactory" type="void" line="981">
                <params>
                    <param name="fac" type="DatagramSocketImplFactory"/>
                </params>
                <scope line="982"/>
                <declaration name="security" type="SecurityManager" line="985"/>
                <scope line="986"/>
            </method>
        </class>
    </source>