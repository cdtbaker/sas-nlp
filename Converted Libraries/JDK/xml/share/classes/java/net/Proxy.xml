<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <class name="Proxy" line="2">
            <javadoc line="2">
                This class represents a proxy setting, typically a type (http, socks) and
                  a socket address.
                  A &lt;code&gt;Proxy&lt;/code&gt; is an immutable object.                
                <see>
                    java.net.ProxySelector                    
                </see>
                <author>
                    Yingxian Wang                    
                </author>
                <author>
                    Jean-Christophe Collet                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="Type" type="enum" line="12"/>
            <javadoc line="12">
                Represents the proxy type.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <scope line="16"/>
            <declaration name="type" type="Type" line="26"/>
            <javadoc line="22">
                Represents a SOCKS (V4 or V5) proxy.                
            </javadoc>
            <declaration name="sa" type="SocketAddress" line="27"/>
            <declaration name="NO_PROXY" type="Proxy" line="28"/>
            <javadoc line="28">
                A proxy setting that represents a &lt;code&gt;DIRECT&lt;/code&gt; connection,
                  basically telling the protocol handler not to use any proxying.
                  Used, for instance, to create sockets bypassing any other global
                  proxy settings (like SOCKS):
                  &lt;P&gt;
                  &lt;code&gt;Socket s = new Socket(Proxy.NO_PROXY);&lt;/code&gt;&lt;br&gt;
                  &lt;P&gt;                
            </javadoc>
            <method name="Proxy" type="constructor" line="38"/>
            <javadoc line="42">
                Creates an entry representing a PROXY connection.
                  Certain combinations are illegal. For instance, for types Http, and
                  Socks, a SocketAddress &lt;b&gt;must&lt;/b&gt; be provided.
                  &lt;P&gt;
                  Use the &lt;code&gt;Proxy.NO_PROXY&lt;/code&gt; constant
                  for representing a direct connection.                
                <param>
                    type the <code>Type</code> of the proxy                    
                </param>
                <param>
                    sa the <code>SocketAddress</code> for that proxy                    
                </param>
                <throws>
                    IllegalArgumentException when the type and the address are
                      incompatible                    
                </throws>
            </javadoc>
            <method name="Proxy" type="constructor" line="54">
                <params>
                    <param name="type" type="Type"/>
                    <param name="sa" type="SocketAddress"/>
                </params>
            </method>
            <javadoc line="59">
                Returns the proxy type.                
                <return>
                    a Type representing the proxy type                    
                </return>
            </javadoc>
            <method name="type" type="Type" line="63"/>
            <javadoc line="66">
                Returns the socket address of the proxy, or
                  &lt;code&gt;null&lt;/code&gt; if its a direct connection.                
                <return>
                    a <code>SocketAddress</code> representing the socket end
                      point of the proxy                    
                </return>
            </javadoc>
            <method name="address" type="SocketAddress" line="72"/>
            <javadoc line="75">
                Constructs a string representation of this Proxy.
                  This String is constructed by calling toString() on its type
                  and concatenating &quot; @ &quot; and the toString() result from its address
                  if its type is not &lt;code&gt;DIRECT&lt;/code&gt;.                
                <return>
                    a string representation of this object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="82"/>
            <javadoc line="86">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is
                  not &lt;code&gt;null&lt;/code&gt; and it represents the same proxy as
                  this object.
                  &lt;p&gt;
                  Two instances of &lt;code&gt;Proxy&lt;/code&gt; represent the same
                  address if both the SocketAddresses and type are equal.                
                <param>
                    obj   the object to compare against.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.net.InetSocketAddress#equals(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="99">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="p" type="Proxy" line="101"/>
                <scope line="102">
                    <scope line="103"/>
                </scope>
            </method>
            <javadoc line="110">
                Returns a hashcode for this Proxy.                
                <return>
                    a hash code value for this Proxy.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="114"/>
        </class>
    </source>