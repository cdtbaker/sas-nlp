<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.security.Permission"/>
        <import package="java.util.Date"/>
        <class name="HttpURLConnection" line="6">
            <extends class="URLConnection"/>
            <javadoc line="6">
                A URLConnection with support for HTTP-specific features. See
                  &lt;A HREF=&quot;http://www.w3.org/pub/WWW/Protocols/&quot;&gt; the spec &lt;/A&gt; for
                  details.
                  &lt;p&gt;
                  Each HttpURLConnection instance is used to make a single request
                  but the underlying network connection to the HTTP server may be
                  transparently shared by other instances. Calling the close() methods
                  on the InputStream or OutputStream of an HttpURLConnection
                  after a request may free network resources associated with this
                  instance but has no effect on any shared persistent connection.
                  Calling the disconnect() method may close the underlying socket
                  if a persistent connection is otherwise idle at that time.
                  &lt;P&gt;The HTTP protocol handler has a few settings that can be accessed through
                  System Properties. This covers
                  &lt;a href=&quot;doc-files/net-properties.html#Proxies&quot;&gt;Proxy settings&lt;/a&gt; as well as
                  &lt;a href=&quot;doc-files/net-properties.html#MiscHTTP&quot;&gt; various other settings&lt;/a&gt;.
                  &lt;/P&gt;                
                <see>
                    java.net.HttpURLConnection#disconnect()                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="method" type="String" line="28"/>
            <javadoc line="28">
                The HTTP method (GET,POST,PUT,etc.).                
            </javadoc>
            <declaration name="chunkLength" type="int" line="32"/>
            <javadoc line="32">
                The chunk-length when using chunked encoding streaming mode for output.
                  A value of &lt;code&gt;-1&lt;/code&gt; means chunked encoding is disabled for output.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="fixedContentLength" type="int" line="38"/>
            <javadoc line="38">
                The fixed content-length when using fixed-length streaming mode.
                  A value of &lt;code&gt;-1&lt;/code&gt; means fixed-length streaming mode is disabled
                  for output.
                  &lt;P&gt; &lt;B&gt;NOTE:&lt;/B&gt; {@link #fixedContentLengthLong} is recommended instead
                  of this field, as it allows larger content lengths to be set.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="fixedContentLengthLong" type="long" line="47"/>
            <javadoc line="47">
                The fixed content-length when using fixed-length streaming mode.
                  A value of {@code -1} means fixed-length streaming mode is disabled
                  for output.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="54">
                Returns the key for the &lt;code&gt;n&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; header field.
                  Some implementations may treat the &lt;code&gt;0&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt;
                  header field as special, i.e. as the status line returned by the HTTP
                  server. In this case, {@link #getHeaderField(int) getHeaderField(0)} returns the status
                  line, but &lt;code&gt;getHeaderFieldKey(0)&lt;/code&gt; returns null.                
                <param>
                    n   an index, where n >=0.                    
                </param>
                <return>
                    the key for the <code>n</code><sup>th</sup> header field,
                      or <code>null</code> if the key does not exist.                    
                </return>
            </javadoc>
            <method name="getHeaderFieldKey" type="String" line="64">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                This method is used to enable streaming of a HTTP request body
                  without internal buffering, when the content length is known in
                  advance.
                  &lt;p&gt;
                  An exception will be thrown if the application
                  attempts to write more data than the indicated
                  content-length, or if the application closes the OutputStream
                  before writing the indicated amount.
                  &lt;p&gt;
                  When output streaming is enabled, authentication
                  and redirection cannot be handled automatically.
                  A HttpRetryException will be thrown when reading
                  the response if authentication or redirection are required.
                  This exception can be queried for the details of the error.
                  &lt;p&gt;
                  This method must be called before the URLConnection is connected.
                  &lt;p&gt;
                  &lt;B&gt;NOTE:&lt;/B&gt; {@link #setFixedLengthStreamingMode(long)} is recommended
                  instead of this method as it allows larger content lengths to be set.                
                <param>
                    contentLength The number of bytes which will be written
                      to the OutputStream.                    
                </param>
                <throws>
                    IllegalStateException if URLConnection is already connected
                      or if a different streaming mode is already enabled.                    
                </throws>
                <throws>
                    IllegalArgumentException if a content length less than
                      zero is specified.                    
                </throws>
                <see>
                    #setChunkedStreamingMode(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setFixedLengthStreamingMode" type="void" line="96">
                <params>
                    <param name="contentLength" type="int"/>
                </params>
                <scope line="97"/>
                <scope line="100"/>
                <scope line="103"/>
            </method>
            <javadoc line="108">
                This method is used to enable streaming of a HTTP request body
                  without internal buffering, when the content length is known in
                  advance.
                  &lt;P&gt; An exception will be thrown if the application attempts to write
                  more data than the indicated content-length, or if the application
                  closes the OutputStream before writing the indicated amount.
                  &lt;P&gt; When output streaming is enabled, authentication and redirection
                  cannot be handled automatically. A {@linkplain HttpRetryException} will
                  be thrown when reading the response if authentication or redirection
                  are required. This exception can be queried for the details of the
                  error.
                  &lt;P&gt; This method must be called before the URLConnection is connected.
                  &lt;P&gt; The content length set by invoking this method takes precedence
                  over any value set by {@link #setFixedLengthStreamingMode(int)}.                
                <param>
                    contentLengthThe number of bytes which will be written to the OutputStream.                    
                </param>
                <throws>
                    IllegalStateExceptionif URLConnection is already connected or if a different
                      streaming mode is already enabled.                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif a content length less than zero is specified.                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setFixedLengthStreamingMode" type="void" line="129">
                <params>
                    <param name="contentLength" type="long"/>
                </params>
                <scope line="130"/>
                <scope line="133"/>
                <scope line="136"/>
            </method>
            <declaration name="DEFAULT_CHUNK_SIZE" type="int" line="141"/>
            <javadoc line="142">
                This method is used to enable streaming of a HTTP request body
                  without internal buffering, when the content length is &lt;b&gt;not&lt;/b&gt;
                  known in advance. In this mode, chunked transfer encoding
                  is used to send the request body. Note, not all HTTP servers
                  support this mode.
                  &lt;p&gt;
                  When output streaming is enabled, authentication
                  and redirection cannot be handled automatically.
                  A HttpRetryException will be thrown when reading
                  the response if authentication or redirection are required.
                  This exception can be queried for the details of the error.
                  &lt;p&gt;
                  This method must be called before the URLConnection is connected.                
                <param>
                    chunklen The number of bytes to write in each chunk.
                      If chunklen is less than or equal to zero, a default
                      value will be used.                    
                </param>
                <throws>
                    IllegalStateException if URLConnection is already connected
                      or if a different streaming mode is already enabled.                    
                </throws>
                <see>
                    #setFixedLengthStreamingMode(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setChunkedStreamingMode" type="void" line="164">
                <params>
                    <param name="chunklen" type="int"/>
                </params>
                <scope line="165"/>
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Returns the value for the &lt;code&gt;n&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; header field.
                  Some implementations may treat the &lt;code&gt;0&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt;
                  header field as special, i.e. as the status line returned by the HTTP
                  server.
                  &lt;p&gt;
                  This method can be used in conjunction with the{@link #getHeaderFieldKey getHeaderFieldKey} method to iterate through all
                  the headers in the message.                
                <param>
                    n   an index, where n>=0.                    
                </param>
                <return>
                    the value of the <code>n</code><sup>th</sup> header field,
                      or <code>null</code> if the value does not exist.                    
                </return>
                <see>
                    java.net.HttpURLConnection#getHeaderFieldKey(int)                    
                </see>
            </javadoc>
            <method name="getHeaderField" type="String" line="186">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <declaration name="responseCode" type="int" line="189"/>
            <javadoc line="189">
                An &lt;code&gt;int&lt;/code&gt; representing the three digit HTTP Status-Code.
                  &lt;ul&gt;
                  &lt;li&gt; 1xx: Informational
                  &lt;li&gt; 2xx: Success
                  &lt;li&gt; 3xx: Redirection
                  &lt;li&gt; 4xx: Client Error
                  &lt;li&gt; 5xx: Server Error
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="responseMessage" type="String" line="200"/>
            <javadoc line="200">
                The HTTP response message.                
            </javadoc>
            <declaration name="followRedirects" type="boolean" line="204"/>
            <declaration name="instanceFollowRedirects" type="boolean" line="205"/>
            <javadoc line="205">
                If &lt;code&gt;true&lt;/code&gt;, the protocol will automatically follow redirects.
                  If &lt;code&gt;false&lt;/code&gt;, the protocol will not automatically follow
                  redirects.
                  &lt;p&gt;
                  This field is set by the &lt;code&gt;setInstanceFollowRedirects&lt;/code&gt;
                  method. Its value is returned by the &lt;code&gt;getInstanceFollowRedirects&lt;/code&gt;
                  method.
                  &lt;p&gt;
                  Its default value is based on the value of the static followRedirects
                  at HttpURLConnection construction time.                
                <see>
                    java.net.HttpURLConnection#setInstanceFollowRedirects(boolean)                    
                </see>
                <see>
                    java.net.HttpURLConnection#getInstanceFollowRedirects()                    
                </see>
                <see>
                    java.net.HttpURLConnection#setFollowRedirects(boolean)                    
                </see>
            </javadoc>
            <declaration name="methods" type="String[]" line="221"/>
            <javadoc line="222">
                Constructor for the HttpURLConnection.                
                <param>
                    u the URL                    
                </param>
            </javadoc>
            <method name="HttpURLConnection" type="constructor" line="226">
                <params>
                    <param name="u" type="URL"/>
                </params>
            </method>
            <javadoc line="229">
                Sets whether HTTP redirects  (requests with response code 3xx) should
                  be automatically followed by this class.  True by default.  Applets
                  cannot change this variable.
                  &lt;p&gt;
                  If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkSetFactory&lt;/code&gt; method
                  to ensure the operation is allowed.
                  This could result in a SecurityException.                
                <param>
                    set a <code>boolean</code> indicating whether or not
                      to follow HTTP redirects.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSetFactory</code> method doesn't
                      allow the operation.                    
                </exception>
                <see>
                    SecurityManager#checkSetFactory                    
                </see>
                <see>
                    #getFollowRedirects()                    
                </see>
            </javadoc>
            <method name="setFollowRedirects" type="void" line="246">
                <params>
                    <param name="set" type="boolean"/>
                </params>
                <declaration name="sec" type="SecurityManager" line="247"/>
                <scope line="248"/>
            </method>
            <javadoc line="253">
                Returns a &lt;code&gt;boolean&lt;/code&gt; indicating
                  whether or not HTTP redirects (3xx) should
                  be automatically followed.                
                <return>
                    <code>true</code> if HTTP redirects should
                      be automatically followed, <tt>false</tt> if not.                    
                </return>
                <see>
                    #setFollowRedirects(boolean)                    
                </see>
            </javadoc>
            <method name="getFollowRedirects" type="boolean" line="261"/>
            <javadoc line="264">
                Sets whether HTTP redirects (requests with response code 3xx) should
                  be automatically followed by this &lt;code&gt;HttpURLConnection&lt;/code&gt;
                  instance.
                  &lt;p&gt;
                  The default value comes from followRedirects, which defaults to
                  true.                
                <param>
                    followRedirects a <code>boolean</code> indicating
                      whether or not to follow HTTP redirects.                    
                </param>
                <see>
                    java.net.HttpURLConnection#instanceFollowRedirects                    
                </see>
                <see>
                    #getInstanceFollowRedirects                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setInstanceFollowRedirects" type="void" line="277">
                <params>
                    <param name="followRedirects" type="boolean"/>
                </params>
            </method>
            <javadoc line="280">
                Returns the value of this &lt;code&gt;HttpURLConnection&lt;/code&gt;&apos;s
                  &lt;code&gt;instanceFollowRedirects&lt;/code&gt; field.                
                <return>
                    the value of this <code>HttpURLConnection</code>'s
                      <code>instanceFollowRedirects</code> field.                    
                </return>
                <see>
                    java.net.HttpURLConnection#instanceFollowRedirects                    
                </see>
                <see>
                    #setInstanceFollowRedirects(boolean)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getInstanceFollowRedirects" type="boolean" line="289"/>
            <javadoc line="292">
                Set the method for the URL request, one of:
                  &lt;UL&gt;
                  &lt;LI&gt;GET
                  &lt;LI&gt;POST
                  &lt;LI&gt;HEAD
                  &lt;LI&gt;OPTIONS
                  &lt;LI&gt;PUT
                  &lt;LI&gt;DELETE
                  &lt;LI&gt;TRACE
                  &lt;/UL&gt; are legal, subject to protocol restrictions.  The default
                  method is GET.                
                <param>
                    method the HTTP method                    
                </param>
                <exception>
                    ProtocolException if the method cannot be reset or if
                      the requested method isn't valid for HTTP.                    
                </exception>
                <exception>
                    SecurityException if a security manager is set and the
                      method is "TRACE", but the "allowHttpTrace"
                      NetPermission is not granted.                    
                </exception>
                <see>
                    #getRequestMethod()                    
                </see>
            </javadoc>
            <method name="setRequestMethod" type="void" line="312">
                <params>
                    <param name="method" type="String"/>
                </params>
                <scope line="313"/>
                <scope line="316">
                    <scope line="317">
                        <scope line="318">
                            <declaration name="s" type="SecurityManager" line="319"/>
                            <scope line="320"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="330">
                Get the request method.                
                <return>
                    the HTTP request method                    
                </return>
                <see>
                    #setRequestMethod(java.lang.String)                    
                </see>
            </javadoc>
            <method name="getRequestMethod" type="String" line="335"/>
            <javadoc line="338">
                Gets the status code from an HTTP response message.
                  For example, in the case of the following status lines:
                  &lt;PRE&gt;
                  HTTP/1.0 200 OK
                  HTTP/1.0 401 Unauthorized
                  &lt;/PRE&gt;
                  It will return 200 and 401 respectively.
                  Returns -1 if no code can be discerned
                  from the response (i.e., the response is not valid HTTP).                
                <throws>
                    IOException if an error occurred connecting to the server.                    
                </throws>
                <return>
                    the HTTP Status-Code, or -1                    
                </return>
            </javadoc>
            <method name="getResponseCode" type="int" line="351">
                <scope line="352"/>
                <declaration name="exc" type="Exception" line="355"/>
                <scope line="356"/>
                <scope line="359"/>
                <declaration name="statusLine" type="String" line="362"/>
                <scope line="363">
                    <scope line="364"/>
                </scope>
                <scope line="370">
                    <declaration name="codePos" type="int" line="371"/>
                    <scope line="372">
                        <declaration name="phrasePos" type="int" line="373"/>
                        <scope line="374"/>
                        <scope line="378"/>
                        <scope line="382"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="388">
                Gets the HTTP response message, if any, returned along with the
                  response code from a server.  From responses like:
                  &lt;PRE&gt;
                  HTTP/1.0 200 OK
                  HTTP/1.0 404 Not Found
                  &lt;/PRE&gt;
                  Extracts the Strings &quot;OK&quot; and &quot;Not Found&quot; respectively.
                  Returns null if none could be discerned from the responses
                  (the result was not valid HTTP).                
                <throws>
                    IOException if an error occurred connecting to the server.                    
                </throws>
                <return>
                    the HTTP response message, or <code>null</code>                    
                </return>
            </javadoc>
            <method name="getResponseMessage" type="String" line="401"/>
            <method name="getHeaderFieldDate" type="long" line="405">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="long"/>
                </params>
                <declaration name="dateString" type="String" line="406"/>
                <scope line="407">
                    <scope line="408"/>
                </scope>
                <scope line="413"/>
            </method>
            <method name="disconnect" type="void" line="417"/>
            <javadoc line="417">
                Indicates that other requests to the server
                  are unlikely in the near future. Calling disconnect()
                  should not imply that this HttpURLConnection
                  instance can be reused for other requests.                
            </javadoc>
            <method name="usingProxy" type="boolean" line="424"/>
            <javadoc line="424">
                Indicates if the connection is going through a proxy.                
                <return>
                    a boolean indicating if the connection is
                      using a proxy.                    
                </return>
            </javadoc>
            <javadoc line="430">
                Returns a {@link SocketPermission} object representing the
                  permission necessary to connect to the destination host and port.                
                <exception>
                    IOException if an error occurs while computing
                      the permission.                    
                </exception>
                <return>
                    a <code>SocketPermission</code> object representing the
                      permission necessary to connect to the destination
                      host and port.                    
                </return>
            </javadoc>
            <method name="getPermission" type="Permission" line="439">
                <declaration name="port" type="int" line="440"/>
                <declaration name="host" type="String" line="442"/>
                <declaration name="permission" type="Permission" line="443"/>
            </method>
            <javadoc line="446">
                Returns the error stream if the connection failed
                  but the server sent useful data nonetheless. The
                  typical example is when an HTTP server responds
                  with a 404, which will cause a FileNotFoundException
                  to be thrown in connect, but the server sent an HTML
                  help page with suggestions as to what to do.
                  &lt;p&gt;This method will not cause a connection to be initiated.  If
                  the connection was not connected, or if the server did not have
                  an error while connecting or if the server had an error but
                  no error data was sent, this method will return null. This is
                  the default.                
                <return>
                    an error stream if any, null if there have been no
                      errors, the connection is not connected or the server sent no
                      useful data.                    
                </return>
            </javadoc>
            <method name="getErrorStream" type="InputStream" line="462"/>
            <declaration name="HTTP_OK" type="int" line="465"/>
            <javadoc line="465">
                HTTP Status-Code 200: OK.                
            </javadoc>
            <declaration name="HTTP_CREATED" type="int" line="469"/>
            <javadoc line="469">
                HTTP Status-Code 201: Created.                
            </javadoc>
            <declaration name="HTTP_ACCEPTED" type="int" line="473"/>
            <javadoc line="473">
                HTTP Status-Code 202: Accepted.                
            </javadoc>
            <declaration name="HTTP_NOT_AUTHORITATIVE" type="int" line="477"/>
            <javadoc line="477">
                HTTP Status-Code 203: Non-Authoritative Information.                
            </javadoc>
            <declaration name="HTTP_NO_CONTENT" type="int" line="481"/>
            <javadoc line="481">
                HTTP Status-Code 204: No Content.                
            </javadoc>
            <declaration name="HTTP_RESET" type="int" line="485"/>
            <javadoc line="485">
                HTTP Status-Code 205: Reset Content.                
            </javadoc>
            <declaration name="HTTP_PARTIAL" type="int" line="489"/>
            <javadoc line="489">
                HTTP Status-Code 206: Partial Content.                
            </javadoc>
            <declaration name="HTTP_MULT_CHOICE" type="int" line="493"/>
            <javadoc line="493">
                HTTP Status-Code 300: Multiple Choices.                
            </javadoc>
            <declaration name="HTTP_MOVED_PERM" type="int" line="497"/>
            <javadoc line="497">
                HTTP Status-Code 301: Moved Permanently.                
            </javadoc>
            <declaration name="HTTP_MOVED_TEMP" type="int" line="501"/>
            <javadoc line="501">
                HTTP Status-Code 302: Temporary Redirect.                
            </javadoc>
            <declaration name="HTTP_SEE_OTHER" type="int" line="505"/>
            <javadoc line="505">
                HTTP Status-Code 303: See Other.                
            </javadoc>
            <declaration name="HTTP_NOT_MODIFIED" type="int" line="509"/>
            <javadoc line="509">
                HTTP Status-Code 304: Not Modified.                
            </javadoc>
            <declaration name="HTTP_USE_PROXY" type="int" line="513"/>
            <javadoc line="513">
                HTTP Status-Code 305: Use Proxy.                
            </javadoc>
            <declaration name="HTTP_BAD_REQUEST" type="int" line="517"/>
            <javadoc line="517">
                HTTP Status-Code 400: Bad Request.                
            </javadoc>
            <declaration name="HTTP_UNAUTHORIZED" type="int" line="521"/>
            <javadoc line="521">
                HTTP Status-Code 401: Unauthorized.                
            </javadoc>
            <declaration name="HTTP_PAYMENT_REQUIRED" type="int" line="525"/>
            <javadoc line="525">
                HTTP Status-Code 402: Payment Required.                
            </javadoc>
            <declaration name="HTTP_FORBIDDEN" type="int" line="529"/>
            <javadoc line="529">
                HTTP Status-Code 403: Forbidden.                
            </javadoc>
            <declaration name="HTTP_NOT_FOUND" type="int" line="533"/>
            <javadoc line="533">
                HTTP Status-Code 404: Not Found.                
            </javadoc>
            <declaration name="HTTP_BAD_METHOD" type="int" line="537"/>
            <javadoc line="537">
                HTTP Status-Code 405: Method Not Allowed.                
            </javadoc>
            <declaration name="HTTP_NOT_ACCEPTABLE" type="int" line="541"/>
            <javadoc line="541">
                HTTP Status-Code 406: Not Acceptable.                
            </javadoc>
            <declaration name="HTTP_PROXY_AUTH" type="int" line="545"/>
            <javadoc line="545">
                HTTP Status-Code 407: Proxy Authentication Required.                
            </javadoc>
            <declaration name="HTTP_CLIENT_TIMEOUT" type="int" line="549"/>
            <javadoc line="549">
                HTTP Status-Code 408: Request Time-Out.                
            </javadoc>
            <declaration name="HTTP_CONFLICT" type="int" line="553"/>
            <javadoc line="553">
                HTTP Status-Code 409: Conflict.                
            </javadoc>
            <declaration name="HTTP_GONE" type="int" line="557"/>
            <javadoc line="557">
                HTTP Status-Code 410: Gone.                
            </javadoc>
            <declaration name="HTTP_LENGTH_REQUIRED" type="int" line="561"/>
            <javadoc line="561">
                HTTP Status-Code 411: Length Required.                
            </javadoc>
            <declaration name="HTTP_PRECON_FAILED" type="int" line="565"/>
            <javadoc line="565">
                HTTP Status-Code 412: Precondition Failed.                
            </javadoc>
            <declaration name="HTTP_ENTITY_TOO_LARGE" type="int" line="569"/>
            <javadoc line="569">
                HTTP Status-Code 413: Request Entity Too Large.                
            </javadoc>
            <declaration name="HTTP_REQ_TOO_LONG" type="int" line="573"/>
            <javadoc line="573">
                HTTP Status-Code 414: Request-URI Too Large.                
            </javadoc>
            <declaration name="HTTP_UNSUPPORTED_TYPE" type="int" line="577"/>
            <javadoc line="577">
                HTTP Status-Code 415: Unsupported Media Type.                
            </javadoc>
            <declaration name="HTTP_SERVER_ERROR" type="int" line="581"/>
            <javadoc line="581">
                HTTP Status-Code 500: Internal Server Error.                
                <deprecated>
                    it is misplaced and shouldn't have existed.                    
                </deprecated>
            </javadoc>
            <declaration name="HTTP_INTERNAL_ERROR" type="int" line="586"/>
            <javadoc line="586">
                HTTP Status-Code 500: Internal Server Error.                
            </javadoc>
            <declaration name="HTTP_NOT_IMPLEMENTED" type="int" line="590"/>
            <javadoc line="590">
                HTTP Status-Code 501: Not Implemented.                
            </javadoc>
            <declaration name="HTTP_BAD_GATEWAY" type="int" line="594"/>
            <javadoc line="594">
                HTTP Status-Code 502: Bad Gateway.                
            </javadoc>
            <declaration name="HTTP_UNAVAILABLE" type="int" line="598"/>
            <javadoc line="598">
                HTTP Status-Code 503: Service Unavailable.                
            </javadoc>
            <declaration name="HTTP_GATEWAY_TIMEOUT" type="int" line="602"/>
            <javadoc line="602">
                HTTP Status-Code 504: Gateway Timeout.                
            </javadoc>
            <declaration name="HTTP_VERSION" type="int" line="606"/>
            <javadoc line="606">
                HTTP Status-Code 505: HTTP Version Not Supported.                
            </javadoc>
        </class>
    </source>