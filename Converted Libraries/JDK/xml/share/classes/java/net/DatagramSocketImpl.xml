<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InterruptedIOException"/>
        <class name="DatagramSocketImpl" line="32">
            <implements interface="SocketOptions"/>
            <javadoc line="32">
                Abstract datagram and multicast socket implementation base class.                
                <author>
                    Pavani Diwanji                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="localPort" type="int" line="40"/>
            <javadoc line="40">
                The local port number.                
            </javadoc>
            <declaration name="fd" type="FileDescriptor" line="45"/>
            <javadoc line="45">
                The file descriptor object.                
            </javadoc>
            <method name="create" type="void" line="50"/>
            <javadoc line="50">
                Creates a datagram socket.                
                <exception>
                    SocketException if there is an error in the
                      underlying protocol, such as a TCP error.                    
                </exception>
            </javadoc>
            <method name="bind" type="void" line="57"/>
            <javadoc line="57">
                Binds a datagram socket to a local port and address.                
                <param>
                    lport the local port                    
                </param>
                <param>
                    laddr the local address                    
                </param>
                <exception>
                    SocketException if there is an error in the
                      underlying protocol, such as a TCP error.                    
                </exception>
            </javadoc>
            <method name="send" type="void" line="66"/>
            <javadoc line="66">
                Sends a datagram packet. The packet contains the data and the
                  destination address to send the packet to.                
                <param>
                    p the packet to be sent.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs while sending the
                      datagram packet.                    
                </exception>
                <exception>
                    PortUnreachableException may be thrown if the socket is connected
                      to a currently unreachable destination. Note, there is no guarantee that
                      the exception will be thrown.                    
                </exception>
            </javadoc>
            <javadoc line="78">
                Connects a datagram socket to a remote destination. This associates the remote
                  address with the local socket so that datagrams may only be sent to this destination
                  and received from this destination. This may be overridden to call a native
                  system connect.
                  &lt;p&gt;If the remote destination to which the socket is connected does not
                  exist, or is otherwise unreachable, and if an ICMP destination unreachable
                  packet has been received for that address, then a subsequent call to
                  send or receive may throw a PortUnreachableException.
                  Note, there is no guarantee that the exception will be thrown.                
                <param>
                    address the remote InetAddress to connect to                    
                </param>
                <param>
                    port the remote port number                    
                </param>
                <exception>
                    SocketException may be thrown if the socket cannot be
                      connected to the remote destination                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="connect" type="void" line="95">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Disconnects a datagram socket from its remote destination.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="disconnect" type="void" line="101"/>
            <method name="peek" type="int" line="103"/>
            <javadoc line="103">
                Peek at the packet to see who it is from. Updates the specified &lt;code&gt;InetAddress&lt;/code&gt;
                  to the address which the packet came from.                
                <param>
                    i an InetAddress object                    
                </param>
                <return>
                    the port number which the packet came from.                    
                </return>
                <exception>
                    IOException if an I/O exception occurs                    
                </exception>
                <exception>
                    PortUnreachableException may be thrown if the socket is connected
                      to a currently unreachable destination. Note, there is no guarantee that the
                      exception will be thrown.                    
                </exception>
            </javadoc>
            <method name="peekData" type="int" line="115"/>
            <javadoc line="115">
                Peek at the packet to see who it is from. The data is copied into the specified
                  &lt;code&gt;DatagramPacket&lt;/code&gt;. The data is returned,
                  but not consumed, so that a subsequent peekData/receive operation
                  will see the same data.                
                <param>
                    p the Packet Received.                    
                </param>
                <return>
                    the port number which the packet came from.                    
                </return>
                <exception>
                    IOException if an I/O exception occurs                    
                </exception>
                <exception>
                    PortUnreachableException may be thrown if the socket is connected
                      to a currently unreachable destination. Note, there is no guarantee that the
                      exception will be thrown.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="receive" type="void" line="129"/>
            <javadoc line="129">
                Receive the datagram packet.                
                <param>
                    p the Packet Received.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs
                      while receiving the datagram packet.                    
                </exception>
                <exception>
                    PortUnreachableException may be thrown if the socket is connected
                      to a currently unreachable destination. Note, there is no guarantee that the
                      exception will be thrown.                    
                </exception>
            </javadoc>
            <method name="setTTL" type="void" line="140"/>
            <javadoc line="140">
                Set the TTL (time-to-live) option.                
                <param>
                    ttl a byte specifying the TTL value                    
                </param>
                <deprecated>
                    use setTimeToLive instead.                    
                </deprecated>
                <exception>
                    IOException if an I/O exception occurs while setting
                      the time-to-live option.                    
                </exception>
                <see>
                    #getTTL()                    
                </see>
            </javadoc>
            <method name="getTTL" type="byte" line="152"/>
            <javadoc line="152">
                Retrieve the TTL (time-to-live) option.                
                <exception>
                    IOException if an I/O exception occurs
                      while retrieving the time-to-live option                    
                </exception>
                <deprecated>
                    use getTimeToLive instead.                    
                </deprecated>
                <return>
                    a byte representing the TTL value                    
                </return>
                <see>
                    #setTTL(byte)                    
                </see>
            </javadoc>
            <method name="setTimeToLive" type="void" line="164"/>
            <javadoc line="164">
                Set the TTL (time-to-live) option.                
                <param>
                    ttl an &lt;tt&gt;int&lt;/tt&gt; specifying the time-to-live value                    
                </param>
                <exception>
                    IOException if an I/O exception occurs
                      while setting the time-to-live option.                    
                </exception>
                <see>
                    #getTimeToLive()                    
                </see>
            </javadoc>
            <method name="getTimeToLive" type="int" line="173"/>
            <javadoc line="173">
                Retrieve the TTL (time-to-live) option.                
                <exception>
                    IOException if an I/O exception occurs
                      while retrieving the time-to-live option                    
                </exception>
                <return>
                    an &lt;tt&gt;int&lt;/tt&gt; representing the time-to-live value                    
                </return>
                <see>
                    #setTimeToLive(int)                    
                </see>
            </javadoc>
            <method name="join" type="void" line="182"/>
            <javadoc line="182">
                Join the multicast group.                
                <param>
                    inetaddr multicast address to join.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs
                      while joining the multicast group.                    
                </exception>
            </javadoc>
            <method name="leave" type="void" line="190"/>
            <javadoc line="190">
                Leave the multicast group.                
                <param>
                    inetaddr multicast address to leave.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs
                      while leaving the multicast group.                    
                </exception>
            </javadoc>
            <method name="joinGroup" type="void" line="198"/>
            <javadoc line="198">
                Join the multicast group.                
                <param>
                    mcastaddr address to join.                    
                </param>
                <param>
                    netIf specifies the local interface to receive multicast
                      datagram packets                    
                </param>
                <throws>
                    IOException if an I/O exception occurs while joining
                      the multicast group                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="leaveGroup" type="void" line="211"/>
            <javadoc line="211">
                Leave the multicast group.                
                <param>
                    mcastaddr address to leave.                    
                </param>
                <param>
                    netIf specified the local interface to leave the group at                    
                </param>
                <throws>
                    IOException if an I/O exception occurs while leaving
                      the multicast group                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="close" type="void" line="223"/>
            <javadoc line="223">
                Close the socket.                
            </javadoc>
            <javadoc line="228">
                Gets the local port.                
                <return>
                    an &lt;tt&gt;int&lt;/tt&gt; representing the local port value                    
                </return>
            </javadoc>
            <method name="getLocalPort" type="int" line="232"/>
            <javadoc line="236">
                Gets the datagram socket file descriptor.                
                <return>
                    a &lt;tt&gt;FileDescriptor&lt;/tt&gt; object representing the datagram socket
                      file descriptor                    
                </return>
            </javadoc>
            <method name="getFileDescriptor" type="FileDescriptor" line="241"/>
        </class>
    </source>