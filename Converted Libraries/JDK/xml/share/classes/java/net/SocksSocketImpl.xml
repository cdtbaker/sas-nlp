<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="sun.net.SocksProxy"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="SocksSocketImpl" line="10">
            <extends class="PlainSocketImpl"/>
            <implements interface="SocksConsts"/>
            <javadoc line="10">
                SOCKS (V4 &amp; V5) TCP socket implementation (RFC 1928).
                  This is a subclass of PlainSocketImpl.
                  Note this class should &lt;b&gt;NOT&lt;/b&gt; be public.                
            </javadoc>
            <declaration name="server" type="String" line="16"/>
            <declaration name="serverPort" type="int" line="17"/>
            <declaration name="external_address" type="InetSocketAddress" line="18"/>
            <declaration name="useV4" type="boolean" line="19"/>
            <declaration name="cmdsock" type="Socket" line="20"/>
            <declaration name="cmdIn" type="InputStream" line="21"/>
            <declaration name="cmdOut" type="OutputStream" line="22"/>
            <declaration name="applicationSetProxy" type="boolean" line="23"/>
            <method name="SocksSocketImpl" type="constructor" line="24"/>
            <method name="SocksSocketImpl" type="constructor" line="26">
                <params>
                    <param name="server" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="SocksSocketImpl" type="constructor" line="30">
                <params>
                    <param name="proxy" type="Proxy"/>
                </params>
                <declaration name="a" type="SocketAddress" line="31"/>
                <scope line="32">
                    <declaration name="ad" type="InetSocketAddress" line="33"/>
                </scope>
            </method>
            <method name="setV4" type="void" line="38"/>
            <method name="privilegedConnect" type="void" line="41">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="42">
                    <anonymous_class line="43">
                        <method name="run" type="Void" line="44"/>
                    </anonymous_class>
                </scope>
                <scope line="53"/>
            </method>
            <method name="superConnectServer" type="void" line="57">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="remainingMillis" type="int" line="60">
                <params>
                    <param name="deadlineMillis" type="long"/>
                </params>
                <declaration name="remaining" type="long" line="62"/>
            </method>
            <method name="readSocksReply" type="int" line="66">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="readSocksReply" type="int" line="69">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="data" type="byte[]"/>
                    <param name="deadlineMillis" type="long"/>
                </params>
                <declaration name="len" type="int" line="70"/>
                <declaration name="received" type="int" line="71"/>
                <scope line="72">
                    <declaration name="count" type="int" line="73"/>
                    <scope line="74"/>
                    <scope line="77"/>
                </scope>
            </method>
            <javadoc line="85">
                Provides the authentication machanism required by the proxy.                
            </javadoc>
            <method name="authenticate" type="boolean" line="88">
                <params>
                    <param name="method" type="byte"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="BufferedOutputStream"/>
                </params>
            </method>
            <method name="authenticate" type="boolean" line="91">
                <params>
                    <param name="method" type="byte"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="BufferedOutputStream"/>
                    <param name="deadlineMillis" type="long"/>
                </params>
            </method>
            <method name="connectV4" type="void" line="141">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                    <param name="endpoint" type="InetSocketAddress"/>
                    <param name="deadlineMillis" type="long"/>
                </params>
            </method>
            <javadoc line="187">
                Connects the Socks Socket to the specified endpoint. It will first
                  connect to the SOCKS proxy and negotiate the access. If the proxy
                  grants the connections, then the connect is successful and all
                  further traffic will go to the &quot;real&quot; endpoint.                
                <param>
                    endpoint        the <code>SocketAddress</code> to connect to.                    
                </param>
                <param>
                    timeout         the timeout value in milliseconds                    
                </param>
                <throws>
                    IOException     if the connection can't be established.                    
                </throws>
                <throws>
                    SecurityException if there is a security manager and it
                      doesn't allow the connection                    
                </throws>
                <throws>
                    IllegalArgumentException if endpoint is null or a
                      SocketAddress subclass not supported by this socket                    
                </throws>
            </javadoc>
            <method name="connect" type="void" line="200">
                <params>
                    <param name="endpoint" type="SocketAddress"/>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="bindV4" type="void" line="408">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                    <param name="baddr" type="InetAddress"/>
                    <param name="lport" type="int"/>
                </params>
            </method>
            <javadoc line="461">
                Sends the Bind request to the SOCKS proxy. In the SOCKS protocol, bind
                  means &quot;accept incoming connection from&quot;, so the SocketAddress is the
                  the one of the host we do accept connection from.                
                <param>
                    addr   the Socket address of the remote host.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when binding this socket.                    
                </exception>
            </javadoc>
            <method name="socksBind" type="void" line="468">
                <params>
                    <param name="saddr" type="InetSocketAddress"/>
                </params>
            </method>
            <javadoc line="693">
                Accepts a connection from a specific host.                
                <param>
                    s   the accepted connection.                    
                </param>
                <param>
                    saddr the socket address of the host we do accept
                      connection from                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when accepting the
                      connection.                    
                </exception>
            </javadoc>
            <method name="acceptFrom" type="void" line="701">
                <params>
                    <param name="s" type="SocketImpl"/>
                    <param name="saddr" type="InetSocketAddress"/>
                </params>
                <scope line="702"/>
                <declaration name="in" type="InputStream" line="705"/>
                <declaration name="i" type="int" line="708"/>
                <declaration name="ex" type="SocketException" line="710"/>
                <declaration name="nport" type="int" line="711"/>
                <declaration name="addr" type="byte[]" line="712"/>
                <declaration name="real_end" type="InetSocketAddress" line="713"/>
                <declaration name="len" type="int" line="726"/>
                <scope line="767"/>
                <scope line="774"/>
                <scope line="777">
                    <declaration name="psi" type="PlainSocketImpl" line="778"/>
                </scope>
                <scope line="785"/>
            </method>
            <javadoc line="793">
                Returns the value of this socket&apos;s &lt;code&gt;address&lt;/code&gt; field.                
                <return>
                    the value of this socket's <code>address</code> field.                    
                </return>
                <see>
                    java.net.SocketImpl#address                    
                </see>
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="798"/>
            <javadoc line="802">
                Returns the value of this socket&apos;s &lt;code&gt;port&lt;/code&gt; field.                
                <return>
                    the value of this socket's <code>port</code> field.                    
                </return>
                <see>
                    java.net.SocketImpl#port                    
                </see>
            </javadoc>
            <method name="getPort" type="int" line="807"/>
            <method name="getLocalPort" type="int" line="811"/>
            <method name="close" type="void" line="816"/>
            <method name="getUserName" type="String" line="821">
                <declaration name="userName" type="String" line="822"/>
                <scope line="823">
                    <scope line="824"/>
                    <scope line="827"/>
                </scope>
                <scope line="830"/>
            </method>
        </class>
    </source>