<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="sun.net.SocksProxy"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="SocksSocketImpl" line="36">
            <extends class="PlainSocketImpl"/>
            <comment line="51">
                                
            </comment>
            <comment line="52">
                                
            </comment>
            <implements interface="SocksConsts"/>
            <javadoc line="36">
                SOCKS (V4 &amp; V5) TCP socket implementation (RFC 1928).
                  This is a subclass of PlainSocketImpl.
                  Note this class should &lt;b&gt;NOT&lt;/b&gt; be public.                
            </javadoc>
            <declaration name="server" type="String" line="43"/>
            <declaration name="serverPort" type="int" line="44"/>
            <declaration name="external_address" type="InetSocketAddress" line="45"/>
            <declaration name="useV4" type="boolean" line="46"/>
            <declaration name="cmdsock" type="Socket" line="47"/>
            <declaration name="cmdIn" type="InputStream" line="48"/>
            <declaration name="cmdOut" type="OutputStream" line="49"/>
            <declaration name="applicationSetProxy" type="boolean" line="51"/>
            <method name="SocksSocketImpl" type="constructor" line="54">
                <comment line="55">
                    Nothing needed                    
                </comment>
            </method>
            <method name="SocksSocketImpl" type="constructor" line="58">
                <params>
                    <param name="server" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="SocksSocketImpl" type="constructor" line="63">
                <params>
                    <param name="proxy" type="Proxy"/>
                </params>
                <comment line="67">
                    Use getHostString() to avoid reverse lookups                    
                </comment>
                <declaration name="a" type="SocketAddress" line="64"/>
                <scope line="65">
                    <declaration name="ad" type="InetSocketAddress" line="66"/>
                </scope>
            </method>
            <method name="setV4" type="void" line="73"/>
            <method name="privilegedConnect" type="void" line="81">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="82">
                    <anonymous_class line="84">
                        <method name="run" type="Void" line="85"/>
                    </anonymous_class>
                </scope>
                <scope line="92"/>
            </method>
            <method name="superConnectServer" type="void" line="98">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="remainingMillis" type="int" line="102">
                <params>
                    <param name="deadlineMillis" type="long"/>
                </params>
                <declaration name="remaining" type="long" line="106"/>
            </method>
            <method name="readSocksReply" type="int" line="113">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="readSocksReply" type="int" line="117">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="data" type="byte[]"/>
                    <param name="deadlineMillis" type="long"/>
                </params>
                <declaration name="len" type="int" line="118"/>
                <declaration name="received" type="int" line="119"/>
                <scope line="120">
                    <declaration name="count" type="int" line="121"/>
                    <scope line="122"/>
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="134">
                Provides the authentication machanism required by the proxy.                
            </javadoc>
            <method name="authenticate" type="boolean" line="138">
                <params>
                    <param name="method" type="byte"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="BufferedOutputStream"/>
                </params>
            </method>
            <method name="authenticate" type="boolean" line="144">
                <params>
                    <param name="method" type="byte"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="BufferedOutputStream"/>
                    <param name="deadlineMillis" type="long"/>
                </params>
                <comment line="145">
                    No Authentication required. We&apos;re done then!                    
                </comment>
                <comment line="148">
                    UserPassword authentication. Try, in that order :
                     - The application provided Authenticator, if any
                     - the user.name &amp; no password (backward compatibility behavior).                    
                </comment>
                <comment line="194">
                    RFC 1929 specifies that the connection MUST be closed if                    
                </comment>
                <comment line="200">
                                        
                </comment>
                <comment line="203">
                    GSSAPI authentication mechanism.
                     Unfortunately the RFC seems out of sync with the Reference
                     implementation. I&apos;ll leave this in for future completion.                    
                </comment>
                <comment line="208">
                    if (method == GSSAPI) {                    
                </comment>
                <comment line="209">
                    try {                    
                </comment>
                <comment line="210">
                    GSSManager manager = GSSManager.getInstance();                    
                </comment>
                <comment line="211">
                    GSSName name = manager.createName(&quot;SERVICE:socks@&quot;+server,                    
                </comment>
                <comment line="212">
                    null);                    
                </comment>
                <comment line="213">
                    GSSContext context = manager.createContext(name, null, null,                    
                </comment>
                <comment line="214">
                    GSSContext.DEFAULT_LIFETIME);                    
                </comment>
                <comment line="215">
                    context.requestMutualAuth(true);                    
                </comment>
                <comment line="216">
                    context.requestReplayDet(true);                    
                </comment>
                <comment line="217">
                    context.requestSequenceDet(true);                    
                </comment>
                <comment line="218">
                    context.requestCredDeleg(true);                    
                </comment>
                <comment line="219">
                    byte []inToken = new byte[0];                    
                </comment>
                <comment line="220">
                    while (!context.isEstablished()) {                    
                </comment>
                <comment line="221">
                    byte[] outToken                    
                </comment>
                <comment line="222">
                    = context.initSecContext(inToken, 0, inToken.length);                    
                </comment>
                <comment line="223">
                    // send the output token if generated                    
                </comment>
                <comment line="224">
                    if (outToken != null) {                    
                </comment>
                <comment line="225">
                    out.write(1);                    
                </comment>
                <comment line="226">
                    out.write(1);                    
                </comment>
                <comment line="227">
                    out.writeShort(outToken.length);                    
                </comment>
                <comment line="228">
                    out.write(outToken);                    
                </comment>
                <comment line="229">
                    out.flush();                    
                </comment>
                <comment line="230">
                    data = new byte[2];                    
                </comment>
                <comment line="231">
                    i = readSocksReply(in, data, deadlineMillis);                    
                </comment>
                <comment line="232">
                    if (i != 2 || data[1] == 0xff) {                    
                </comment>
                <comment line="233">
                    in.close();                    
                </comment>
                <comment line="234">
                    out.close();                    
                </comment>
                <comment line="235">
                    return false;                    
                </comment>
                <comment line="236">
                    }                    
                </comment>
                <comment line="237">
                    i = readSocksReply(in, data, deadlineMillis);                    
                </comment>
                <comment line="238">
                    int len = 0;                    
                </comment>
                <comment line="239">
                    len = ((int)data[0] &amp; 0xff) &lt;&lt; 8;                    
                </comment>
                <comment line="240">
                    len += data[1];                    
                </comment>
                <comment line="241">
                    data = new byte[len];                    
                </comment>
                <comment line="242">
                    i = readSocksReply(in, data, deadlineMillis);                    
                </comment>
                <comment line="243">
                    if (i == len)                    
                </comment>
                <comment line="244">
                    return true;                    
                </comment>
                <comment line="245">
                    in.close();                    
                </comment>
                <comment line="246">
                    out.close();                    
                </comment>
                <comment line="247">
                    }                    
                </comment>
                <comment line="248">
                    }                    
                </comment>
                <comment line="249">
                    } catch (GSSException e) {                    
                </comment>
                <comment line="250">
                    /* RFC 1961 states that if Context initialisation fails the connection                    
                </comment>
                <comment line="251">
                    MUST be closed */                    
                </comment>
                <comment line="252">
                    e.printStackTrace();                    
                </comment>
                <comment line="253">
                    in.close();                    
                </comment>
                <comment line="254">
                    out.close();                    
                </comment>
                <comment line="255">
                    }                    
                </comment>
                <comment line="256">
                    }                    
                </comment>
                <scope line="153">
                    <declaration name="userName" type="String" line="154"/>
                    <declaration name="password" type="String" line="155"/>
                    <declaration name="addr" type="InetAddress" line="156"/>
                    <anonymous_class line="159">
                        <method name="run" type="PasswordAuthentication" line="160"/>
                    </anonymous_class>
                    <declaration name="pw" type="PasswordAuthentication" line="157"/>
                    <scope line="165"/>
                    <scope line="168"/>
                    <scope line="176"/>
                    <scope line="178"/>
                    <scope line="181">
                        <scope line="183"/>
                        <scope line="185"/>
                    </scope>
                    <declaration name="data" type="byte[]" line="191"/>
                    <declaration name="i" type="int" line="192"/>
                    <scope line="193"/>
                </scope>
            </method>
            <method name="connectV4" type="void" line="262">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                    <param name="endpoint" type="InetSocketAddress"/>
                    <param name="deadlineMillis" type="long"/>
                </params>
                <comment line="288">
                    Success!                    
                </comment>
                <scope line="263"/>
                <declaration name="userName" type="String" line="271"/>
                <scope line="272"/>
                <scope line="274"/>
                <declaration name="data" type="byte[]" line="279"/>
                <declaration name="n" type="int" line="280"/>
                <declaration name="ex" type="SocketException" line="285"/>
                <scope line="304"/>
            </method>
            <javadoc line="311">
                Connects the Socks Socket to the specified endpoint. It will first
                  connect to the SOCKS proxy and negotiate the access. If the proxy
                  grants the connections, then the connect is successful and all
                  further traffic will go to the &quot;real&quot; endpoint.                
                <param>
                    endpoint        the <code>SocketAddress</code> to connect to.                    
                </param>
                <param>
                    timeout         the timeout value in milliseconds                    
                </param>
                <throws>
                    IOException     if the connection can't be established.                    
                </throws>
                <throws>
                    SecurityException if there is a security manager and it
                      doesn't allow the connection                    
                </throws>
                <throws>
                    IllegalArgumentException if endpoint is null or a
                      SocketAddress subclass not supported by this socket                    
                </throws>
            </javadoc>
            <method name="connect" type="void" line="326">
                <params>
                    <param name="endpoint" type="SocketAddress"/>
                    <param name="timeout" type="int"/>
                </params>
                <comment line="349">
                    This is the general case                    
                </comment>
                <comment line="350">
                    server is not null only when the socket was created with a                    
                </comment>
                <comment line="351">
                    specified proxy in which case it does bypass the ProxySelector                    
                </comment>
                <comment line="359">
                    No default proxySelector --&gt; direct connection                    
                </comment>
                <comment line="366">
                    Use getHostString() to avoid reverse lookups                    
                </comment>
                <comment line="368">
                    IPv6 litteral?                    
                </comment>
                <comment line="376">
                    This shouldn&apos;t happen                    
                </comment>
                <comment line="398">
                    Use getHostString() to avoid reverse lookups                    
                </comment>
                <comment line="407">
                    Connects to the SOCKS server                    
                </comment>
                <comment line="410">
                    Worked, let&apos;s get outta here                    
                </comment>
                <comment line="413">
                    Ooops, let&apos;s notify the ProxySelector                    
                </comment>
                <comment line="418">
                    Will continue the while loop and try the next proxy                    
                </comment>
                <comment line="422">
                    If server is still null at this point, none of the proxy
                     worked                    
                </comment>
                <comment line="431">
                    Connects to the SOCKS server                    
                </comment>
                <comment line="439">
                    cmdIn &amp; cmdOut were intialized during the privilegedConnect() call                    
                </comment>
                <comment line="444">
                    SOCKS Protocol version 4 doesn&apos;t know how to deal with                    
                </comment>
                <comment line="445">
                    DOMAIN type of addresses (unresolved addresses here)                    
                </comment>
                <comment line="452">
                    This is SOCKS V5                    
                </comment>
                <comment line="461">
                    Maybe it&apos;s not a V5 sever after all                    
                </comment>
                <comment line="462">
                    Let&apos;s try V4 before we give up                    
                </comment>
                <comment line="463">
                    SOCKS Protocol version 4 doesn&apos;t know how to deal with                    
                </comment>
                <comment line="464">
                    DOMAIN type of addresses (unresolved addresses here)                    
                </comment>
                <comment line="478">
                                        
                </comment>
                <comment line="510">
                    success!                    
                </comment>
                <declaration name="deadlineMillis" type="long" line="327"/>
                <scope line="329"/>
                <scope line="331">
                    <declaration name="finish" type="long" line="332"/>
                </scope>
                <declaration name="security" type="SecurityManager" line="336"/>
                <declaration name="epoint" type="InetSocketAddress" line="339"/>
                <scope line="340"/>
                <scope line="348">
                    <anonymous_class line="353">
                        <method name="run" type="ProxySelector" line="354"/>
                    </anonymous_class>
                    <declaration name="sel" type="ProxySelector" line="352"/>
                    <scope line="358"/>
                    <declaration name="uri" type="URI" line="365"/>
                    <declaration name="host" type="String" line="367"/>
                    <scope line="370"/>
                    <scope line="373"/>
                    <scope line="375"/>
                    <declaration name="p" type="Proxy" line="380"/>
                    <declaration name="savedExc" type="IOException" line="381"/>
                    <declaration name="iProxy" type="java.util.Iterator&lt;Proxy&gt;" line="382"/>
                    <scope line="384"/>
                    <scope line="388">
                        <scope line="390"/>
                        <scope line="401">
                            <scope line="402"/>
                        </scope>
                        <scope line="408"/>
                        <scope line="412"/>
                    </scope>
                    <scope line="426"/>
                </scope>
                <scope line="430">
                    <scope line="432"/>
                    <scope line="434"/>
                </scope>
                <declaration name="out" type="BufferedOutputStream" line="440"/>
                <declaration name="in" type="InputStream" line="441"/>
                <scope line="443"/>
                <declaration name="data" type="byte[]" line="458"/>
                <declaration name="i" type="int" line="459"/>
                <scope line="460"/>
                <scope line="472"/>
                <scope line="479">
                    <scope line="482"/>
                    <scope line="484"/>
                </scope>
                <scope line="489"/>
                <scope line="494"/>
                <declaration name="ex" type="SocketException" line="505"/>
                <declaration name="len" type="int" line="506"/>
                <declaration name="addr" type="byte[]" line="507"/>
                <declaration name="host" type="byte[]" line="524"/>
                <scope line="574"/>
            </method>
            <method name="bindV4" type="void" line="584">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                    <param name="baddr" type="InetAddress"/>
                    <param name="lport" type="int"/>
                </params>
                <comment line="590">
                                        
                </comment>
                <comment line="618">
                    Success!                    
                </comment>
                <scope line="585"/>
                <declaration name="addr1" type="byte[]" line="589"/>
                <declaration name="naddr" type="InetAddress" line="591"/>
                <scope line="592"/>
                <declaration name="userName" type="String" line="601"/>
                <scope line="602"/>
                <scope line="604"/>
                <declaration name="data" type="byte[]" line="609"/>
                <declaration name="n" type="int" line="610"/>
                <declaration name="ex" type="SocketException" line="615"/>
                <scope line="634"/>
            </method>
            <javadoc line="642">
                Sends the Bind request to the SOCKS proxy. In the SOCKS protocol, bind
                  means &quot;accept incoming connection from&quot;, so the SocketAddress is the
                  the one of the host we do accept connection from.                
                <param>
                    addr   the Socket address of the remote host.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when binding this socket.                    
                </exception>
            </javadoc>
            <method name="socksBind" type="void" line="650">
                <params>
                    <param name="saddr" type="InetSocketAddress"/>
                </params>
                <comment line="652">
                    this is a client socket, not a server socket, don&apos;t                    
                </comment>
                <comment line="653">
                    call the SOCKS proxy for a bind!                    
                </comment>
                <comment line="657">
                    Connects to the SOCKS server                    
                </comment>
                <comment line="660">
                    This is the general case                    
                </comment>
                <comment line="661">
                    server is not null only when the socket was created with a                    
                </comment>
                <comment line="662">
                    specified proxy in which case it does bypass the ProxySelector                    
                </comment>
                <comment line="670">
                    No default proxySelector --&gt; direct connection                    
                </comment>
                <comment line="676">
                    Use getHostString() to avoid reverse lookups                    
                </comment>
                <comment line="678">
                    IPv6 litteral?                    
                </comment>
                <comment line="686">
                    This shouldn&apos;t happen                    
                </comment>
                <comment line="706">
                    Use getHostString() to avoid reverse lookups                    
                </comment>
                <comment line="715">
                    Connects to the SOCKS server                    
                </comment>
                <comment line="728">
                    Ooops, let&apos;s notify the ProxySelector                    
                </comment>
                <comment line="734">
                    Will continue the while loop and try the next proxy                    
                </comment>
                <comment line="738">
                    If server is still null at this point, none of the proxy
                     worked                    
                </comment>
                <comment line="776">
                    Maybe it&apos;s not a V5 sever after all                    
                </comment>
                <comment line="777">
                    Let&apos;s try V4 before we give up                    
                </comment>
                <comment line="786">
                    We&apos;re OK. Let&apos;s issue the BIND command.                    
                </comment>
                <comment line="826">
                    success!                    
                </comment>
                <scope line="651"/>
                <scope line="659">
                    <anonymous_class line="664">
                        <method name="run" type="ProxySelector" line="665"/>
                    </anonymous_class>
                    <declaration name="sel" type="ProxySelector" line="663"/>
                    <scope line="669"/>
                    <declaration name="uri" type="URI" line="675"/>
                    <declaration name="host" type="String" line="677"/>
                    <scope line="680"/>
                    <scope line="683"/>
                    <scope line="685"/>
                    <declaration name="p" type="Proxy" line="690"/>
                    <declaration name="savedExc" type="Exception" line="691"/>
                    <declaration name="iProxy" type="java.util.Iterator&lt;Proxy&gt;" line="692"/>
                    <scope line="694"/>
                    <scope line="697">
                        <scope line="699"/>
                        <scope line="709">
                            <scope line="710"/>
                        </scope>
                        <scope line="716">
                            <anonymous_class line="718">
                                <method name="run" type="Void" line="719"/>
                            </anonymous_class>
                        </scope>
                        <scope line="727"/>
                    </scope>
                    <scope line="742"/>
                </scope>
                <scope line="746">
                    <scope line="747">
                        <anonymous_class line="749">
                            <method name="run" type="Void" line="750"/>
                        </anonymous_class>
                    </scope>
                    <scope line="758"/>
                </scope>
                <declaration name="out" type="BufferedOutputStream" line="762"/>
                <declaration name="in" type="InputStream" line="763"/>
                <scope line="764"/>
                <declaration name="data" type="byte[]" line="773"/>
                <declaration name="i" type="int" line="774"/>
                <scope line="775"/>
                <scope line="783"/>
                <declaration name="lport" type="int" line="790"/>
                <scope line="791">
                    <scope line="794"/>
                    <scope line="796"/>
                </scope>
                <scope line="801">
                    <declaration name="addr1" type="byte[]" line="802"/>
                </scope>
                <scope line="808">
                    <declaration name="addr1" type="byte[]" line="809"/>
                </scope>
                <scope line="815"/>
                <declaration name="ex" type="SocketException" line="821"/>
                <declaration name="len" type="int" line="822"/>
                <declaration name="addr" type="byte[]" line="823"/>
                <declaration name="host" type="byte[]" line="844"/>
                <scope line="898"/>
            </method>
            <javadoc line="909">
                Accepts a connection from a specific host.                
                <param>
                    s   the accepted connection.                    
                </param>
                <param>
                    saddr the socket address of the host we do accept
                      connection from                    
                </param>
                <exception>
                    IOException  if an I/O error occurs when accepting the
                      connection.                    
                </exception>
            </javadoc>
            <method name="acceptFrom" type="void" line="918">
                <params>
                    <param name="s" type="SocketImpl"/>
                    <param name="saddr" type="InetSocketAddress"/>
                </params>
                <comment line="920">
                    Not a Socks ServerSocket.                    
                </comment>
                <comment line="924">
                    Sends the &quot;SOCKS BIND&quot; request.                    
                </comment>
                <comment line="935">
                    success!                    
                </comment>
                <comment line="997">
                    This is where we have to do some fancy stuff.
                     The datastream from the socket &quot;accepted&quot; by the proxy will
                     come through the cmdSocket. So we have to swap the socketImpls                    
                </comment>
                <comment line="1019">
                    Need to do that so that the socket won&apos;t be closed                    
                </comment>
                <comment line="1020">
                    when the ServerSocket is closed by the user.                    
                </comment>
                <comment line="1021">
                    It kinds of detaches the Socket because it is now                    
                </comment>
                <comment line="1022">
                    used elsewhere.                    
                </comment>
                <scope line="919"/>
                <declaration name="in" type="InputStream" line="923"/>
                <declaration name="i" type="int" line="927"/>
                <declaration name="ex" type="SocketException" line="929"/>
                <declaration name="nport" type="int" line="930"/>
                <declaration name="addr" type="byte[]" line="931"/>
                <declaration name="real_end" type="InetSocketAddress" line="932"/>
                <declaration name="len" type="int" line="947"/>
                <scope line="989"/>
                <scope line="1002"/>
                <scope line="1005">
                    <declaration name="psi" type="PlainSocketImpl" line="1006"/>
                </scope>
                <scope line="1012"/>
            </method>
            <javadoc line="1027">
                Returns the value of this socket&apos;s &lt;code&gt;address&lt;/code&gt; field.                
                <return>
                    the value of this socket's <code>address</code> field.                    
                </return>
                <see>
                    java.net.SocketImpl#address                    
                </see>
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="1034"/>
            <javadoc line="1041">
                Returns the value of this socket&apos;s &lt;code&gt;port&lt;/code&gt; field.                
                <return>
                    the value of this socket's <code>port</code> field.                    
                </return>
                <see>
                    java.net.SocketImpl#port                    
                </see>
            </javadoc>
            <method name="getPort" type="int" line="1048"/>
            <method name="getLocalPort" type="int" line="1056"/>
            <method name="close" type="void" line="1066"/>
            <method name="getUserName" type="String" line="1073">
                <comment line="1078">
                                        
                </comment>
                <declaration name="userName" type="String" line="1074"/>
                <scope line="1075">
                    <scope line="1076"/>
                    <scope line="1078"/>
                </scope>
                <scope line="1079"/>
            </method>
        </class>
    </source>