<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InvalidObjectException"/>
        <import package="java.util.Enumeration"/>
        <class name="Inet6Address" line="6">
            <extends class="InetAddress"/>
            <javadoc line="6">
                This class represents an Internet Protocol version 6 (IPv6) address.
                  Defined by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;
                  &lt;i&gt;RFC&amp;nbsp;2373: IP Version 6 Addressing Architecture&lt;/i&gt;&lt;/a&gt;.
                  &lt;h4&gt; &lt;A NAME=&quot;format&quot;&gt;Textual representation of IP addresses&lt;/a&gt; &lt;/h4&gt;
                  Textual representation of IPv6 address used as input to methods
                  takes one of the following forms:
                  &lt;ol&gt;
                  &lt;li&gt;&lt;p&gt; &lt;A NAME=&quot;lform&quot;&gt;The preferred form&lt;/a&gt; is x:x:x:x:x:x:x:x,
                  where the &apos;x&apos;s are
                  the hexadecimal values of the eight 16-bit pieces of the
                  address. This is the full form.  For example,
                  &lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;1080:0:0:0:8:800:200C:417A&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Note that it is not necessary to write the leading zeros in
                  an individual field. However, there must be at least one numeral
                  in every field, except as described below.&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; Due to some methods of allocating certain styles of IPv6
                  addresses, it will be common for addresses to contain long
                  strings of zero bits. In order to make writing addresses
                  containing zero bits easier, a special syntax is available to
                  compress the zeros. The use of &quot;::&quot; indicates multiple groups
                  of 16-bits of zeros. The &quot;::&quot; can only appear once in an address.
                  The &quot;::&quot; can also be used to compress the leading and/or trailing
                  zeros in an address. For example,
                  &lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;1080::8:800:200C:417A&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;li&gt;&lt;p&gt; An alternative form that is sometimes more convenient
                  when dealing with a mixed environment of IPv4 and IPv6 nodes is
                  x:x:x:x:x:x:d.d.d.d, where the &apos;x&apos;s are the hexadecimal values
                  of the six high-order 16-bit pieces of the address, and the &apos;d&apos;s
                  are the decimal values of the four low-order 8-bit pieces of the
                  standard IPv4 representation address, for example,
                  &lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;::FFFF:129.144.52.38&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;::129.144.52.38&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt; where &quot;::FFFF:d.d.d.d&quot; and &quot;::d.d.d.d&quot; are, respectively, the
                  general forms of an IPv4-mapped IPv6 address and an
                  IPv4-compatible IPv6 address. Note that the IPv4 portion must be
                  in the &quot;d.d.d.d&quot; form. The following forms are invalid:
                  &lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;::FFFF:d.d.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;::FFFF:d.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;::d.d.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;::d.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The following form:
                  &lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;::FFFF:d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt; is valid, however it is an unconventional representation of
                  the IPv4-compatible IPv6 address,
                  &lt;blockquote&gt;&lt;table cellpadding=0 cellspacing=0 summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;tt&gt;::255.255.0.d&lt;/tt&gt;&lt;td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt; while &quot;::d&quot; corresponds to the general IPv6 address
                  &quot;0:0:0:0:0:0:0:d&quot;.&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; For methods that return a textual representation as output
                  value, the full form is used. Inet6Address will return the full
                  form because it is unambiguous when used in combination with other
                  textual data.
                  &lt;h4&gt; Special IPv6 address &lt;/h4&gt;
                  &lt;blockquote&gt;
                  &lt;table cellspacing=2 summary=&quot;Description of IPv4-mapped address&quot;&gt; &lt;tr&gt;&lt;th valign=top&gt;&lt;i&gt;IPv4-mapped address&lt;/i&gt;&lt;/th&gt;
                  &lt;td&gt;Of the form::ffff:w.x.y.z, this IPv6 address is used to
                  represent an IPv4 address. It allows the native program to
                  use the same address data structure and also the same
                  socket when communicating with both IPv4 and IPv6 nodes.
                  &lt;p&gt;In InetAddress and Inet6Address, it is used for internal
                  representation; it has no functional role. Java will never
                  return an IPv4-mapped address.  These classes can take an
                  IPv4-mapped address as input, both in byte array and text
                  representation. However, it will be converted into an IPv4
                  address.&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  &lt;h4&gt; &lt;A NAME=&quot;scoped&quot;&gt;Textual representation of IPv6 scoped addresses&lt;/a&gt; &lt;/h4&gt;
                  &lt;p&gt;
                  The textual representation of IPv6 addresses as described above can be extended
                  to specify IPv6 scoped addresses. This extension to the basic addressing architecture
                  is described in [draft-ietf-ipngwg-scoping-arch-04.txt].
                  &lt;p&gt;
                  Because link-local and site-local addresses are non-global, it is possible that different hosts
                  may have the same destination address and may be reachable through different interfaces on the
                  same originating system. In this case, the originating system is said to be connected
                  to multiple zones of the same scope. In order to disambiguate which is the intended destination
                  zone, it is possible to append a zone identifier (or &lt;i&gt;scope_id&lt;/i&gt;) to an IPv6 address.
                  &lt;p&gt;
                  The general format for specifying the &lt;i&gt;scope_id&lt;/i&gt; is the following:
                  &lt;p&gt;&lt;blockquote&gt;&lt;i&gt;IPv6-address&lt;/i&gt;%&lt;i&gt;scope_id&lt;/i&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The IPv6-address is a literal IPv6 address as described above.
                  The &lt;i&gt;scope_id&lt;/i&gt; refers to an interface on the local system, and it can be specified
                  in two ways.
                  &lt;p&gt;&lt;ol&gt;&lt;li&gt;&lt;i&gt;As a numeric identifier.&lt;/i&gt; This must be a positive integer that identifies the
                  particular interface and scope as understood by the system. Usually, the numeric
                  values can be determined through administration tools on the system. Each interface may
                  have multiple values, one for each scope. If the scope is unspecified, then the default value
                  used is zero.&lt;/li&gt;&lt;p&gt;
                  &lt;li&gt;&lt;i&gt;As a string.&lt;/i&gt; This must be the exact string that is returned by{@link java.net.NetworkInterface#getName()} for the particular interface in question.
                  When an Inet6Address is created in this way, the numeric scope-id is determined at the time
                  the object is created by querying the relevant NetworkInterface.&lt;/li&gt;
                  &lt;/ol&gt;&lt;p&gt;
                  Note also, that the numeric &lt;i&gt;scope_id&lt;/i&gt; can be retrieved from Inet6Address instances returned from the
                  NetworkInterface class. This can be used to find out the current scope ids configured on the system.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="INADDRSZ" type="int" line="117"/>
            <declaration name="cached_scope_id" type="int" line="118"/>
            <declaration name="ipaddress" type="byte[]" line="119"/>
            <javadoc line="119">
                Holds a 128-bit (16 bytes) IPv6 address.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="scope_id" type="int" line="124"/>
            <javadoc line="124">
                scope_id. The scope specified when the object is created. If the object is created
                  with an interface name, then the scope_id is not determined until the time it is needed.                
            </javadoc>
            <declaration name="scope_id_set" type="boolean" line="129"/>
            <javadoc line="129">
                This will be set to true when the scope_id field contains a valid
                  integer scope_id.                
            </javadoc>
            <declaration name="scope_ifname" type="NetworkInterface" line="134"/>
            <javadoc line="134">
                scoped interface. scope_id is derived from this as the scope_id of the first
                  address whose scope is the same as this address for the named interface.                
            </javadoc>
            <declaration name="scope_ifname_set" type="boolean" line="139"/>
            <javadoc line="139">
                set if the object is constructed with a scoped interface instead of a
                  numeric scope id.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="144"/>
            <scope line="145"/>
            <method name="Inet6Address" type="constructor" line="148"/>
            <method name="Inet6Address" type="constructor" line="154">
                <params>
                    <param name="hostName" type="String"/>
                    <param name="addr" type="byte"/>
                    <param name="scope_id" type="int"/>
                </params>
                <scope line="156"/>
                <scope line="160"/>
            </method>
            <method name="Inet6Address" type="constructor" line="165">
                <params>
                    <param name="hostName" type="String"/>
                    <param name="addr" type="byte"/>
                </params>
                <scope line="166"/>
                <scope line="169"/>
            </method>
            <method name="Inet6Address" type="constructor" line="172">
                <params>
                    <param name="hostName" type="String"/>
                    <param name="addr" type="byte"/>
                    <param name="nif" type="NetworkInterface"/>
                </params>
            </method>
            <method name="Inet6Address" type="constructor" line="175">
                <params>
                    <param name="hostName" type="String"/>
                    <param name="addr" type="byte"/>
                    <param name="ifname" type="String"/>
                </params>
            </method>
            <javadoc line="178">
                Create an Inet6Address in the exact manner of {@link InetAddress#getByAddress(String,byte[])}except that the IPv6 scope_id is set to the value corresponding to the given interface
                  for the address type specified in &lt;code&gt;addr&lt;/code&gt;.
                  The call will fail with an UnknownHostException if the given interface does not have a numeric
                  scope_id assigned for the given address type (eg. link-local or site-local).
                  See &lt;a href=&quot;Inet6Address.html#scoped&quot;&gt;here&lt;/a&gt; for a description of IPv6
                  scoped addresses.                
                <param>
                    host the specified host                    
                </param>
                <param>
                    addr the raw IP address in network byte order                    
                </param>
                <param>
                    nif an interface this address must be associated with.                    
                </param>
                <return>
                    an Inet6Address object created from the raw IP address.                    
                </return>
                <exception>
                    UnknownHostException  if IP address is of illegal length, or if the interface
                      does not have a numeric scope_id assigned for the given address type.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getByAddress" type="Inet6Address" line="193">
                <params>
                    <param name="host" type="String"/>
                    <param name="addr" type="byte[]"/>
                    <param name="nif" type="NetworkInterface"/>
                </params>
                <scope line="194">
                    <scope line="195"/>
                </scope>
                <scope line="199">
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="206">
                Create an Inet6Address in the exact manner of {@link InetAddress#getByAddress(String,byte[])}except that the IPv6 scope_id is set to the given numeric value.
                  The scope_id is not checked to determine if it corresponds to any interface on the system.
                  See &lt;a href=&quot;Inet6Address.html#scoped&quot;&gt;here&lt;/a&gt; for a description of IPv6
                  scoped addresses.                
                <param>
                    host the specified host                    
                </param>
                <param>
                    addr the raw IP address in network byte order                    
                </param>
                <param>
                    scope_id the numeric scope_id for the address.                    
                </param>
                <return>
                    an Inet6Address object created from the raw IP address.                    
                </return>
                <exception>
                    UnknownHostException  if IP address is of illegal length.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getByAddress" type="Inet6Address" line="218">
                <params>
                    <param name="host" type="String"/>
                    <param name="addr" type="byte[]"/>
                    <param name="scope_id" type="int"/>
                </params>
                <scope line="219">
                    <scope line="220"/>
                </scope>
                <scope line="224">
                    <scope line="225"/>
                </scope>
            </method>
            <method name="initstr" type="void" line="231">
                <params>
                    <param name="hostName" type="String"/>
                    <param name="addr" type="byte"/>
                    <param name="ifname" type="String"/>
                </params>
                <scope line="232">
                    <declaration name="nif" type="NetworkInterface" line="233"/>
                    <scope line="234"/>
                </scope>
                <scope line="239"/>
            </method>
            <method name="initif" type="void" line="243">
                <params>
                    <param name="hostName" type="String"/>
                    <param name="addr" type="byte"/>
                    <param name="nif" type="NetworkInterface"/>
                </params>
                <scope line="245"/>
                <scope line="249"/>
            </method>
            <method name="differentLocalAddressTypes" type="boolean" line="256">
                <params>
                    <param name="other" type="Inet6Address"/>
                </params>
                <scope line="257"/>
                <scope line="260"/>
            </method>
            <method name="deriveNumericScope" type="int" line="265">
                <params>
                    <param name="ifc" type="NetworkInterface"/>
                </params>
                <declaration name="addresses" type="Enumeration&lt;InetAddress&gt;" line="266"/>
                <scope line="267">
                    <declaration name="addr" type="InetAddress" line="268"/>
                    <scope line="269"/>
                    <declaration name="ia6_addr" type="Inet6Address" line="272"/>
                    <scope line="273"/>
                </scope>
            </method>
            <method name="deriveNumericScope" type="int" line="280">
                <params>
                    <param name="ifname" type="String"/>
                </params>
                <declaration name="en" type="Enumeration&lt;NetworkInterface&gt;" line="281"/>
                <scope line="282"/>
                <scope line="285"/>
                <scope line="288">
                    <declaration name="ifc" type="NetworkInterface" line="289"/>
                    <scope line="290">
                        <declaration name="addresses" type="Enumeration" line="291"/>
                        <scope line="292">
                            <declaration name="addr" type="InetAddress" line="293"/>
                            <scope line="294"/>
                            <declaration name="ia6_addr" type="Inet6Address" line="297"/>
                            <scope line="298"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="307">
                restore the state of this object from stream
                  including the scope information, only if the
                  scoped interface name is valid on this system                
            </javadoc>
            <method name="readObject" type="void" line="312">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="316">
                    <scope line="317">
                        <scope line="319"/>
                        <scope line="324">
                            <scope line="325"/>
                            <scope line="328"/>
                        </scope>
                    </scope>
                    <scope line="332"/>
                </scope>
                <scope line="336"/>
                <scope line="339"/>
            </method>
            <javadoc line="343">
                Utility routine to check if the InetAddress is an IP multicast
                  address. 11111111 at the start of the address identifies the
                  address as being a multicast address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      an IP multicast address                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isMulticastAddress" type="boolean" line="351"/>
            <javadoc line="354">
                Utility routine to check if the InetAddress in a wildcard address.                
                <return>
                    a <code>boolean</code> indicating if the Inetaddress is
                      a wildcard address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isAnyLocalAddress" type="boolean" line="360">
                <declaration name="test" type="byte" line="361"/>
                <scope line="362"/>
            </method>
            <javadoc line="367">
                Utility routine to check if the InetAddress is a loopback address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      a loopback address; or false otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isLoopbackAddress" type="boolean" line="373">
                <declaration name="test" type="byte" line="374"/>
                <scope line="375"/>
            </method>
            <javadoc line="380">
                Utility routine to check if the InetAddress is an link local address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      a link local address; or false if address is not a link local unicast address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isLinkLocalAddress" type="boolean" line="386"/>
            <javadoc line="389">
                Utility routine to check if the InetAddress is a site local address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      a site local address; or false if address is not a site local unicast address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isSiteLocalAddress" type="boolean" line="395"/>
            <javadoc line="398">
                Utility routine to check if the multicast address has global scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of global scope, false if it is not
                      of global scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCGlobal" type="boolean" line="405"/>
            <javadoc line="408">
                Utility routine to check if the multicast address has node scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of node-local scope, false if it is not
                      of node-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCNodeLocal" type="boolean" line="415"/>
            <javadoc line="418">
                Utility routine to check if the multicast address has link scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of link-local scope, false if it is not
                      of link-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCLinkLocal" type="boolean" line="425"/>
            <javadoc line="428">
                Utility routine to check if the multicast address has site scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of site-local scope, false if it is not
                      of site-local scope or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCSiteLocal" type="boolean" line="435"/>
            <javadoc line="438">
                Utility routine to check if the multicast address has organization scope.                
                <return>
                    a <code>boolean</code> indicating if the address has
                      is a multicast address of organization-local scope,
                      false if it is not of organization-local scope
                      or it is not a multicast address                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMCOrgLocal" type="boolean" line="446"/>
            <javadoc line="449">
                Returns the raw IP address of this &lt;code&gt;InetAddress&lt;/code&gt;
                  object. The result is in network byte order: the highest order
                  byte of the address is in &lt;code&gt;getAddress()[0]&lt;/code&gt;.                
                <return>
                    the raw IP address of this object.                    
                </return>
            </javadoc>
            <method name="getAddress" type="byte[]" line="455"/>
            <javadoc line="458">
                Returns the numeric scopeId, if this instance is associated with
                  an interface. If no scoped_id is set, the returned value is zero.                
                <return>
                    the scopeId, or zero if not set.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getScopeId" type="int" line="464"/>
            <javadoc line="467">
                Returns the scoped interface, if this instance was created with
                  with a scoped interface.                
                <return>
                    the scoped interface, or null if not set.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getScopedInterface" type="NetworkInterface" line="473"/>
            <javadoc line="476">
                Returns the IP address string in textual presentation. If the instance was created
                  specifying a scope identifier then the scope id is appended to the IP address preceded by
                  a &quot;%&quot; (per-cent) character. This can be either a numeric value or a string, depending on which
                  was used to createthe instance.                
                <return>
                    the raw IP address in a string format.                    
                </return>
            </javadoc>
            <method name="getHostAddress" type="String" line="483">
                <declaration name="s" type="String" line="484"/>
                <scope line="485"/>
                <scope line="488"/>
            </method>
            <javadoc line="493">
                Returns a hashcode for this IP address.                
                <return>
                    a hash code value for this IP address.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="497">
                <scope line="498">
                    <declaration name="hash" type="int" line="499"/>
                    <declaration name="i" type="int" line="500"/>
                    <scope line="501">
                        <declaration name="j" type="int" line="502"/>
                        <declaration name="component" type="int" line="503"/>
                        <scope line="504"/>
                    </scope>
                </scope>
                <scope line="513"/>
            </method>
            <javadoc line="517">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is
                  not &lt;code&gt;null&lt;/code&gt; and it represents the same IP address as
                  this object.
                  &lt;p&gt;
                  Two instances of &lt;code&gt;InetAddress&lt;/code&gt; represent the same IP
                  address if the length of the byte arrays returned by
                  &lt;code&gt;getAddress&lt;/code&gt; is the same for both, and each of the
                  array components is the same for the byte arrays.                
                <param>
                    obj   the object to compare against.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.net.InetAddress#getAddress()                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="532">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="inetAddr" type="Inet6Address" line="534"/>
                <scope line="535"/>
            </method>
            <javadoc line="540">
                Utility routine to check if the InetAddress is an
                  IPv4 compatible IPv6 address.                
                <return>
                    a <code>boolean</code> indicating if the InetAddress is
                      an IPv4 compatible IPv6 address; or false if address is IPv4 address.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isIPv4CompatibleAddress" type="boolean" line="547">
                <scope line="548"/>
            </method>
            <declaration name="INT16SZ" type="int" line="553"/>
            <method name="numericToTextFormat" type="String" line="554">
                <params>
                    <param name="src" type="byte[]"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="555"/>
                <scope line="556">
                    <scope line="558"/>
                </scope>
            </method>
            <method name="init" type="void" line="564"/>
            <javadoc line="564">
                Perform class load-time initializations.                
            </javadoc>
            <declaration name="ifname" type="String" line="568"/>
            <javadoc line="568">
                Following field is only used during (de)/serialization                
            </javadoc>
            <javadoc line="572">
                default behavior is overridden in order to write the
                  scope_ifname field as a String, rather than a NetworkInterface
                  which is not serializable                
            </javadoc>
            <method name="writeObject" type="void" line="577">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <scope line="578"/>
            </method>
        </class>
    </source>