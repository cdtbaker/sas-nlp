<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.ref"/>
        <import package="java.io"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLConnection"/>
        <import package="java.net.URLStreamHandlerFactory"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.util.jar.Attributes"/>
        <import package="java.util.jar.Attributes.Name"/>
        <import package="java.security.CodeSigner"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.SecureClassLoader"/>
        <import package="java.security.CodeSource"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="sun.misc.Resource"/>
        <import package="sun.misc.URLClassPath"/>
        <import package="sun.net.www.ParseUtil"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="URLClassLoader" line="55">
            <extends class="SecureClassLoader"/>
            <comment line="73">
                                
            </comment>
            <comment line="76">
                                
            </comment>
            <comment line="194">
                A map (used as a set) to keep track of closeable local resources
                 (either JarFiles or FileInputStreams). We don&apos;t care about
                 Http resources since they don&apos;t need to be closed.
                
                 If the resource is coming from a jar file
                 we keep a (weak) reference to the JarFile object which can
                 be closed if URLClassLoader.close() called. Due to jar file
                 caching there will typically be only one JarFile object
                 per underlying jar file.
                
                 For file resources, which is probably a less common situation
                 we have to keep a weak reference to each stream.                
            </comment>
            <comment line="376">
                Retrieve the package using the specified package name.
                 If non-null, verify the package using the specified code
                 source and manifest.                
            </comment>
            <comment line="405">
                Defines a Class using the class bytes obtained from the specified
                 Resource. The resulting Class must be resolved before it can be
                 used.                
            </comment>
            <comment line="519">
                Returns true if the specified package name is sealed according to the
                 given manifest.                
            </comment>
            <implements interface="Closeable"/>
            <javadoc line="55">
                This class loader is used to load classes and resources from a search
                  path of URLs referring to both JAR files and directories. Any URL that
                  ends with a &apos;/&apos; is assumed to refer to a directory. Otherwise, the URL
                  is assumed to refer to a JAR file which will be opened as needed.
                  &lt;p&gt;
                  The AccessControlContext of the thread that created the instance of
                  URLClassLoader will be used when subsequently loading classes and
                  resources.
                  &lt;p&gt;
                  The classes that are loaded are by default granted permission only to
                  access the URLs specified when the URLClassLoader was created.                
                <author>
                    David Connelly                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="ucp" type="URLClassPath" line="73"/>
            <declaration name="acc" type="AccessControlContext" line="76"/>
            <javadoc line="78">
                Constructs a new URLClassLoader for the given URLs. The URLs will be
                  searched in the order specified for classes and resources after first
                  searching in the specified parent class loader. Any URL that ends with
                  a &apos;/&apos; is assumed to refer to a directory. Otherwise, the URL is assumed
                  to refer to a JAR file which will be downloaded and opened as needed.
                  &lt;p&gt;If there is a security manager, this method first
                  calls the security manager&apos;s {@code checkCreateClassLoader} method
                  to ensure creation of a class loader is allowed.                
                <param>
                    urls the URLs from which to load classes and resources                    
                </param>
                <param>
                    parent the parent class loader for delegation                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its{@code checkCreateClassLoader} method doesn&apos;t allow
                      creation of a class loader.                    
                </exception>
                <see>
                    SecurityManager#checkCreateClassLoader                    
                </see>
            </javadoc>
            <method name="URLClassLoader" type="constructor" line="96">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                </params>
                <comment line="99">
                    this is to make the stack depth consistent with 1.1                    
                </comment>
                <declaration name="security" type="SecurityManager" line="99"/>
                <scope line="100"/>
            </method>
            <method name="URLClassLoader" type="constructor" line="108">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <comment line="111">
                    this is to make the stack depth consistent with 1.1                    
                </comment>
                <declaration name="security" type="SecurityManager" line="111"/>
                <scope line="112"/>
            </method>
            <javadoc line="119">
                Constructs a new URLClassLoader for the specified URLs using the
                  default delegation parent &lt;code&gt;ClassLoader&lt;/code&gt;. The URLs will
                  be searched in the order specified for classes and resources after
                  first searching in the parent class loader. Any URL that ends with
                  a &apos;/&apos; is assumed to refer to a directory. Otherwise, the URL is
                  assumed to refer to a JAR file which will be downloaded and opened
                  as needed.
                  &lt;p&gt;If there is a security manager, this method first
                  calls the security manager&apos;s &lt;code&gt;checkCreateClassLoader&lt;/code&gt; method
                  to ensure creation of a class loader is allowed.                
                <param>
                    urls the URLs from which to load classes and resources                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkCreateClassLoader&lt;/code&gt; method doesn&apos;t allow
                      creation of a class loader.                    
                </exception>
                <see>
                    SecurityManager#checkCreateClassLoader                    
                </see>
            </javadoc>
            <method name="URLClassLoader" type="constructor" line="139">
                <params>
                    <param name="urls" type="URL[]"/>
                </params>
                <comment line="142">
                    this is to make the stack depth consistent with 1.1                    
                </comment>
                <declaration name="security" type="SecurityManager" line="142"/>
                <scope line="143"/>
            </method>
            <method name="URLClassLoader" type="constructor" line="150">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <comment line="153">
                    this is to make the stack depth consistent with 1.1                    
                </comment>
                <declaration name="security" type="SecurityManager" line="153"/>
                <scope line="154"/>
            </method>
            <javadoc line="161">
                Constructs a new URLClassLoader for the specified URLs, parent
                  class loader, and URLStreamHandlerFactory. The parent argument
                  will be used as the parent class loader for delegation. The
                  factory argument will be used as the stream handler factory to
                  obtain protocol handlers when creating new jar URLs.
                  &lt;p&gt;If there is a security manager, this method first
                  calls the security manager&apos;s &lt;code&gt;checkCreateClassLoader&lt;/code&gt; method
                  to ensure creation of a class loader is allowed.                
                <param>
                    urls the URLs from which to load classes and resources                    
                </param>
                <param>
                    parent the parent class loader for delegation                    
                </param>
                <param>
                    factory the URLStreamHandlerFactory to use when creating URLs                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkCreateClassLoader&lt;/code&gt; method doesn&apos;t allow
                      creation of a class loader.                    
                </exception>
                <see>
                    SecurityManager#checkCreateClassLoader                    
                </see>
            </javadoc>
            <method name="URLClassLoader" type="constructor" line="182">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                    <param name="factory" type="URLStreamHandlerFactory"/>
                </params>
                <comment line="185">
                    this is to make the stack depth consistent with 1.1                    
                </comment>
                <declaration name="security" type="SecurityManager" line="185"/>
                <scope line="186"/>
            </method>
            <declaration name="closeables" type="WeakHashMap&lt;Closeable,Void&gt;" line="207"/>
            <javadoc line="210">
                Returns an input stream for reading the specified resource.
                  If this loader is closed, then any resources opened by this method
                  will be closed.
                  &lt;p&gt; The search order is described in the documentation for {@link #getResource(String)}.  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    An input stream for reading the resource, or &lt;tt&gt;null&lt;/tt&gt;
                      if the resource could not be found                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="226">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="url" type="URL" line="227"/>
                <scope line="228">
                    <scope line="229"/>
                    <declaration name="urlc" type="URLConnection" line="232"/>
                    <declaration name="is" type="InputStream" line="233"/>
                    <scope line="234">
                        <declaration name="juc" type="JarURLConnection" line="235"/>
                        <declaration name="jar" type="JarFile" line="236"/>
                        <scope line="237">
                            <scope line="238"/>
                        </scope>
                    </scope>
                    <scope line="242">
                        <scope line="243"/>
                    </scope>
                </scope>
                <scope line="248"/>
            </method>
            <javadoc line="253">
                Closes this URLClassLoader, so that it can no longer be used to load
                  new classes or resources that are defined by this loader.
                  Classes and resources defined by any of this loader&apos;s parents in the
                  delegation hierarchy are still accessible. Also, any classes or resources
                  that are already loaded, are still accessible.
                  &lt;p&gt;
                  In the case of jar: and file: URLs, it also closes any files
                  that were opened by it. If another thread is loading a
                  class when the {@code close} method is invoked, then the result of
                  that load is undefined.
                  &lt;p&gt;
                  The method makes a best effort attempt to close all opened files,
                  by catching {@link IOException}s internally. Unchecked exceptions
                  and errors are not caught. Calling close on an already closed
                  loader has no effect.
                  &lt;p&gt;                
                <throws>
                    IOException if closing any file opened by this class loader
                      resulted in an IOException. Any such exceptions are caught internally.
                      If only one is caught, then it is re-thrown. If more than one exception
                      is caught, then the second and following exceptions are added
                      as suppressed exceptions of the first one caught, which is then re-thrown.                    
                </throws>
                <throws>
                    SecurityException if a security manager is set, and it denies{@link RuntimePermission}&lt;tt&gt;(&quot;closeClassLoader&quot;)&lt;/tt&gt;                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="close" type="void" line="281">
                <comment line="289">
                    now close any remaining streams.                    
                </comment>
                <comment line="309">
                    Suppress any remaining exceptions                    
                </comment>
                <declaration name="security" type="SecurityManager" line="282"/>
                <scope line="283"/>
                <declaration name="errors" type="List&lt;IOException&gt;" line="286"/>
                <scope line="290">
                    <declaration name="keys" type="Set&lt;Closeable&gt;" line="291"/>
                    <scope line="292">
                        <scope line="293"/>
                        <scope line="295"/>
                    </scope>
                </scope>
                <scope line="302"/>
                <declaration name="firstex" type="IOException" line="306"/>
                <scope line="310"/>
            </method>
            <javadoc line="316">
                Appends the specified URL to the list of URLs to search for
                  classes and resources.
                  &lt;p&gt;
                  If the URL specified is &lt;code&gt;null&lt;/code&gt; or is already in the
                  list of URLs, or if this loader is closed, then invoking this
                  method has no effect.                
                <param>
                    url the URL to be added to the search path of URLs                    
                </param>
            </javadoc>
            <method name="addURL" type="void" line="326">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="330">
                Returns the search path of URLs for loading classes and resources.
                  This includes the original list of URLs specified to the constructor,
                  along with any URLs subsequently appended by the addURL() method.                
                <return>
                    the search path of URLs for loading classes and resources.                    
                </return>
            </javadoc>
            <method name="getURLs" type="URL[]" line="336"/>
            <javadoc line="340">
                Finds and loads the class with the specified name from the URL search
                  path. Any URLs referring to JAR files are loaded and opened as needed
                  until the class is found.                
                <param>
                    name the name of the class                    
                </param>
                <return>
                    the resulting class                    
                </return>
                <exception>
                    ClassNotFoundException if the class could not be found,
                      or if the loader is closed.                    
                </exception>
            </javadoc>
            <method name="findClass" type="Class<?>" line="352">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="353">
                    <anonymous_class line="355">
                        <method name="run" type="Class" line="356">
                            <declaration name="path" type="String" line="357"/>
                            <declaration name="res" type="Resource" line="358"/>
                            <scope line="359">
                                <scope line="360"/>
                                <scope line="362"/>
                            </scope>
                            <scope line="365"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="370"/>
            </method>
            <method name="getAndVerifyPackage" type="Package" line="381">
                <params>
                    <param name="pkgname" type="String"/>
                    <param name="man" type="Manifest"/>
                    <param name="url" type="URL"/>
                </params>
                <comment line="385">
                    Package found, so check package sealing.                    
                </comment>
                <comment line="387">
                    Verify that code source URL is the same.                    
                </comment>
                <comment line="393">
                    Make sure we are not attempting to seal the package
                     at this code source URL.                    
                </comment>
                <declaration name="pkg" type="Package" line="382"/>
                <scope line="383">
                    <scope line="385">
                        <scope line="387"/>
                    </scope>
                    <scope line="391">
                        <scope line="394"/>
                    </scope>
                </scope>
            </method>
            <method name="defineClass" type="Class" line="409">
                <params>
                    <param name="name" type="String"/>
                    <param name="res" type="Resource"/>
                </params>
                <comment line="416">
                    Check if package already loaded.                    
                </comment>
                <comment line="426">
                    parallel-capable class loaders: re-verify in case of a
                     race condition                    
                </comment>
                <comment line="429">
                    Should never happen                    
                </comment>
                <comment line="436">
                    Now read the class bytes and define the class                    
                </comment>
                <comment line="439">
                    Use (direct) ByteBuffer:                    
                </comment>
                <comment line="446">
                    must read certificates AFTER reading bytes.                    
                </comment>
                <declaration name="t0" type="long" line="410"/>
                <declaration name="i" type="int" line="411"/>
                <declaration name="url" type="URL" line="412"/>
                <scope line="413">
                    <declaration name="pkgname" type="String" line="414"/>
                    <declaration name="man" type="Manifest" line="416"/>
                    <scope line="417">
                        <scope line="418">
                            <scope line="419"/>
                            <scope line="421"/>
                        </scope>
                        <scope line="424">
                            <scope line="427"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="bb" type="java.nio.ByteBuffer" line="436"/>
                <scope line="437">
                    <declaration name="signers" type="CodeSigner[]" line="439"/>
                    <declaration name="cs" type="CodeSource" line="440"/>
                </scope>
                <scope line="443">
                    <declaration name="b" type="byte[]" line="444"/>
                    <declaration name="signers" type="CodeSigner[]" line="446"/>
                    <declaration name="cs" type="CodeSource" line="447"/>
                </scope>
            </method>
            <javadoc line="453">
                Defines a new package by name in this ClassLoader. The attributes
                  contained in the specified Manifest will be used to obtain package
                  version and sealing information. For sealed packages, the additional
                  URL specifies the code source URL from which the package was loaded.                
                <param>
                    name  the package name                    
                </param>
                <param>
                    man   the Manifest containing package version and sealing
                      information                    
                </param>
                <param>
                    url   the code source url for the package, or null if none                    
                </param>
                <exception>
                    IllegalArgumentException if the package name duplicates
                      an existing package either in this class loader or one
                      of its ancestors                    
                </exception>
                <return>
                    the newly defined Package object                    
                </return>
            </javadoc>
            <method name="definePackage" type="Package" line="470">
                <params>
                    <param name="name" type="String"/>
                    <param name="man" type="Manifest"/>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="path" type="String" line="471"/>
                <declaration name="specTitle" type="String" line="472"/>
                <declaration name="implTitle" type="String" line="473"/>
                <declaration name="sealed" type="String" line="474"/>
                <declaration name="sealBase" type="URL" line="475"/>
                <declaration name="attr" type="Attributes" line="477"/>
                <scope line="478"/>
                <scope line="488">
                    <scope line="489"/>
                    <scope line="492"/>
                    <scope line="495"/>
                    <scope line="498"/>
                    <scope line="501"/>
                    <scope line="504"/>
                    <scope line="507"/>
                </scope>
                <scope line="511"/>
            </method>
            <method name="isSealed" type="boolean" line="522">
                <params>
                    <param name="name" type="String"/>
                    <param name="man" type="Manifest"/>
                </params>
                <declaration name="path" type="String" line="523"/>
                <declaration name="attr" type="Attributes" line="524"/>
                <declaration name="sealed" type="String" line="525"/>
                <scope line="526"/>
                <scope line="529">
                    <scope line="530"/>
                </scope>
            </method>
            <javadoc line="537">
                Finds the resource with the specified name on the URL search path.                
                <param>
                    name the name of the resource                    
                </param>
                <return>
                    a &lt;code&gt;URL&lt;/code&gt; for the resource, or &lt;code&gt;null&lt;/code&gt;
                      if the resource could not be found, or if the loader is closed.                    
                </return>
            </javadoc>
            <method name="findResource" type="URL" line="544">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="546">
                    The same restriction to finding classes applies to resources                    
                </comment>
                <anonymous_class line="549">
                    <method name="run" type="URL" line="550"/>
                </anonymous_class>
                <declaration name="url" type="URL" line="548"/>
            </method>
            <javadoc line="558">
                Returns an Enumeration of URLs representing all of the resources
                  on the URL search path having the specified name.                
                <param>
                    name the resource name                    
                </param>
                <exception>
                    IOException if an I/O exception occurs                    
                </exception>
                <return>
                    an &lt;code&gt;Enumeration&lt;/code&gt; of &lt;code&gt;URL&lt;/code&gt;s
                      If the loader is closed, the Enumeration will be empty.                    
                </return>
            </javadoc>
            <method name="findResources" type="Enumeration<URL>" line="569">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="e" type="Enumeration&lt;URL&gt;" line="570"/>
                <anonymous_class line="572">
                    <declaration name="url" type="URL" line="573"/>
                    <method name="next" type="boolean" line="575">
                        <scope line="576"/>
                        <scope line="579">
                            <anonymous_class line="581">
                                <method name="run" type="URL" line="582"/>
                            </anonymous_class>
                            <declaration name="u" type="URL" line="580"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="URL" line="595">
                        <scope line="596"/>
                        <declaration name="u" type="URL" line="599"/>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="604"/>
                </anonymous_class>
            </method>
            <javadoc line="610">
                Returns the permissions for the given codesource object.
                  The implementation of this method first calls super.getPermissions
                  and then adds permissions based on the URL of the codesource.
                  &lt;p&gt;
                  If the protocol of this URL is &quot;jar&quot;, then the permission granted
                  is based on the permission that is required by the URL of the Jar
                  file.
                  &lt;p&gt;
                  If the protocol is &quot;file&quot; and there is an authority component, then
                  permission to connect to and accept connections from that authority
                  may be granted. If the protocol is &quot;file&quot;
                  and the path specifies a file, then permission to read that
                  file is granted. If protocol is &quot;file&quot; and the path is
                  a directory, permission is granted to read all files
                  and (recursively) all files and subdirectories contained in
                  that directory.
                  &lt;p&gt;
                  If the protocol is not &quot;file&quot;, then permission
                  to connect to and accept connections from the URL&apos;s host is granted.                
                <param>
                    codesource the codesource                    
                </param>
                <return>
                    the permissions granted to the codesource                    
                </return>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="634">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
                <comment line="652">
                    if the permission has a separator char on the end,
                     it means the codebase is a directory, and we need
                     to add an additional permission to read recursively                    
                </comment>
                <comment line="667">
                    Not loading from a &apos;file:&apos; URL so we want to give the class
                     permission to connect to and accept from the remote host
                     after we&apos;ve made sure the host is the correct one and is valid.                    
                </comment>
                <comment line="682">
                    make sure the person that created this class loader
                     would have this permission                    
                </comment>
                <declaration name="perms" type="PermissionCollection" line="635"/>
                <declaration name="url" type="URL" line="637"/>
                <declaration name="p" type="Permission" line="639"/>
                <declaration name="urlConnection" type="URLConnection" line="640"/>
                <scope line="642"/>
                <scope line="645"/>
                <scope line="650">
                    <declaration name="path" type="String" line="654"/>
                    <scope line="655"/>
                </scope>
                <scope line="659">
                    <declaration name="path" type="String" line="660"/>
                </scope>
                <scope line="665">
                    <declaration name="locUrl" type="URL" line="671"/>
                    <scope line="672"/>
                    <declaration name="host" type="String" line="675"/>
                </scope>
                <scope line="684">
                    <declaration name="sm" type="SecurityManager" line="685"/>
                    <scope line="686">
                        <declaration name="fp" type="Permission" line="687"/>
                        <anonymous_class line="688">
                            <method name="run" type="Void" line="689"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <javadoc line="700">
                Creates a new instance of URLClassLoader for the specified
                  URLs and parent class loader. If a security manager is
                  installed, the &lt;code&gt;loadClass&lt;/code&gt; method of the URLClassLoader
                  returned by this method will invoke the
                  &lt;code&gt;SecurityManager.checkPackageAccess&lt;/code&gt; method before
                  loading the class.                
                <param>
                    urls the URLs to search for classes and resources                    
                </param>
                <param>
                    parent the parent class loader for delegation                    
                </param>
                <return>
                    the resulting class loader                    
                </return>
            </javadoc>
            <method name="newInstance" type="URLClassLoader" line="713">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                </params>
                <comment line="715">
                    Save the caller&apos;s context                    
                </comment>
                <comment line="717">
                    Need a privileged block to create the class loader                    
                </comment>
                <declaration name="acc" type="AccessControlContext" line="715"/>
                <anonymous_class line="718">
                    <method name="run" type="URLClassLoader" line="719"/>
                </anonymous_class>
                <declaration name="ucl" type="URLClassLoader" line="717"/>
            </method>
            <javadoc line="726">
                Creates a new instance of URLClassLoader for the specified
                  URLs and default parent class loader. If a security manager is
                  installed, the &lt;code&gt;loadClass&lt;/code&gt; method of the URLClassLoader
                  returned by this method will invoke the
                  &lt;code&gt;SecurityManager.checkPackageAccess&lt;/code&gt; before
                  loading the class.                
                <param>
                    urls the URLs to search for classes and resources                    
                </param>
                <return>
                    the resulting class loader                    
                </return>
            </javadoc>
            <method name="newInstance" type="URLClassLoader" line="737">
                <params>
                    <param name="urls" type="URL[]"/>
                </params>
                <comment line="739">
                    Save the caller&apos;s context                    
                </comment>
                <comment line="741">
                    Need a privileged block to create the class loader                    
                </comment>
                <declaration name="acc" type="AccessControlContext" line="739"/>
                <anonymous_class line="742">
                    <method name="run" type="URLClassLoader" line="743"/>
                </anonymous_class>
                <declaration name="ucl" type="URLClassLoader" line="741"/>
            </method>
            <scope line="750">
                <anonymous_class line="752">
                    <method name="getURLClassPath" type="URLClassPath" line="753">
                        <params>
                            <param name="u" type="URLClassLoader"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
        </class>
        <class name="FactoryURLClassLoader" line="762">
            <extends class="URLClassLoader"/>
            <comment line="73">
                                
            </comment>
            <comment line="76">
                                
            </comment>
            <comment line="194">
                A map (used as a set) to keep track of closeable local resources
                 (either JarFiles or FileInputStreams). We don&apos;t care about
                 Http resources since they don&apos;t need to be closed.
                
                 If the resource is coming from a jar file
                 we keep a (weak) reference to the JarFile object which can
                 be closed if URLClassLoader.close() called. Due to jar file
                 caching there will typically be only one JarFile object
                 per underlying jar file.
                
                 For file resources, which is probably a less common situation
                 we have to keep a weak reference to each stream.                
            </comment>
            <comment line="376">
                Retrieve the package using the specified package name.
                 If non-null, verify the package using the specified code
                 source and manifest.                
            </comment>
            <comment line="405">
                Defines a Class using the class bytes obtained from the specified
                 Resource. The resulting Class must be resolved before it can be
                 used.                
            </comment>
            <comment line="519">
                Returns true if the specified package name is sealed according to the
                 given manifest.                
            </comment>
            <scope line="764"/>
            <method name="FactoryURLClassLoader" type="constructor" line="769">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
            </method>
            <method name="FactoryURLClassLoader" type="constructor" line="773">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
            </method>
            <method name="loadClass" type="Class" line="779">
                <params>
                    <param name="name" type="String"/>
                    <param name="resolve" type="boolean"/>
                </params>
                <comment line="781">
                    First check if we have permission to access the package. This
                     should go away once we&apos;ve added support for exported packages.                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="782"/>
                <scope line="783">
                    <declaration name="i" type="int" line="784"/>
                    <scope line="785"/>
                </scope>
            </method>
        </class>
    </source>