<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.FileDescriptor"/>
        <import package="sun.net.ConnectionResetException"/>
        <import package="sun.net.NetHooks"/>
        <import package="sun.net.ResourceManager"/>
        <class name="AbstractPlainSocketImpl" line="37">
            <extends class="SocketImpl"/>
            <comment line="47">
                                
            </comment>
            <comment line="48">
                timeout in millisec                
            </comment>
            <comment line="49">
                traffic class                
            </comment>
            <comment line="57">
                                
            </comment>
            <comment line="60">
                                
            </comment>
            <comment line="63">
                                
            </comment>
            <comment line="66">
                                
            </comment>
            <comment line="73">
                whether this Socket is a stream (TCP) socket or not (UDP)                
            </comment>
            <comment line="590">
                &quot;Acquires&quot; and returns the FileDescriptor for this impl
                
                 A corresponding releaseFD is required to &quot;release&quot; the
                 FileDescriptor.                
            </comment>
            <comment line="603">
                &quot;Release&quot; the FileDescriptor for this impl.
                
                 If the use count goes to -1 then the socket is closed.                
            </comment>
            <comment line="651">
                Return true if already closed or close is pending                
            </comment>
            <comment line="668">
                Return the current value of SO_TIMEOUT                
            </comment>
            <comment line="675">
                &quot;Pre-close&quot; a socket by dup&apos;ing the file descriptor - this enables
                 the socket to be closed without releasing the file descriptor.                
            </comment>
            <comment line="683">
                Close the socket (and release the file descriptor).                
            </comment>
            <javadoc line="37">
                Default Socket Implementation. This implementation does
                  not implement any security checks.
                  Note this class should &lt;b&gt;NOT&lt;/b&gt; be public.                
                <author>
                    Steven B. Byrne                    
                </author>
            </javadoc>
            <declaration name="timeout" type="int" line="47"/>
            <declaration name="trafficClass" type="int" line="49"/>
            <declaration name="shut_rd" type="boolean" line="51"/>
            <declaration name="shut_wr" type="boolean" line="52"/>
            <declaration name="socketInputStream" type="SocketInputStream" line="54"/>
            <declaration name="fdUseCount" type="int" line="57"/>
            <declaration name="fdLock" type="Object" line="60"/>
            <declaration name="closePending" type="boolean" line="63"/>
            <declaration name="CONNECTION_NOT_RESET" type="int" line="66"/>
            <declaration name="CONNECTION_RESET_PENDING" type="int" line="67"/>
            <declaration name="CONNECTION_RESET" type="int" line="68"/>
            <declaration name="resetState" type="int" line="69"/>
            <declaration name="resetLock" type="Object" line="70"/>
            <declaration name="stream" type="boolean" line="74"/>
            <javadoc line="76">
                Load net library into runtime.                
            </javadoc>
            <scope line="79"/>
            <javadoc line="84">
                Creates a socket with a boolean that specifies whether this
                  is a stream socket (true) or an unconnected UDP socket (false).                
            </javadoc>
            <method name="create" type="void" line="88">
                <params>
                    <param name="stream" type="boolean"/>
                </params>
                <scope line="91">
                    <scope line="93"/>
                    <scope line="95"/>
                </scope>
                <scope line="100"/>
            </method>
            <javadoc line="109">
                Creates a socket and connects it to the specified port on
                  the specified host.                
                <param>
                    host the specified host                    
                </param>
                <param>
                    port the specified port                    
                </param>
            </javadoc>
            <method name="connect" type="void" line="117">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <comment line="131">
                    Do nothing. If connect threw an exception then                    
                </comment>
                <declaration name="connected" type="boolean" line="118"/>
                <scope line="119">
                    <declaration name="address" type="InetAddress" line="120"/>
                </scope>
                <scope line="126">
                    <scope line="127">
                        <scope line="128"/>
                        <scope line="130"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="138">
                Creates a socket and connects it to the specified address on
                  the specified port.                
                <param>
                    address the address                    
                </param>
                <param>
                    port the specified port                    
                </param>
            </javadoc>
            <method name="connect" type="void" line="144">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <comment line="152">
                    everything failed                    
                </comment>
                <scope line="148"/>
                <scope line="151"/>
            </method>
            <javadoc line="158">
                Creates a socket and connects it to the specified address on
                  the specified port.                
                <param>
                    address the address                    
                </param>
                <param>
                    timeout the timeout value in milliseconds, or zero for no timeout.                    
                </param>
                <throws>
                    IOException if connection fails                    
                </throws>
                <throws>
                    IllegalArgumentException if address is null or is a
                      SocketAddress subclass not supported by this socket                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="connect" type="void" line="169">
                <params>
                    <param name="address" type="SocketAddress"/>
                    <param name="timeout" type="int"/>
                </params>
                <comment line="187">
                    Do nothing. If connect threw an exception then                    
                </comment>
                <declaration name="connected" type="boolean" line="170"/>
                <scope line="171">
                    <declaration name="addr" type="InetSocketAddress" line="174"/>
                </scope>
                <scope line="182">
                    <scope line="183">
                        <scope line="184"/>
                        <scope line="186"/>
                    </scope>
                </scope>
            </method>
            <method name="connectToAddress" type="void" line="194">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="195"/>
                <scope line="197"/>
            </method>
            <method name="setOption" type="void" line="202">
                <params>
                    <param name="opt" type="int"/>
                    <param name="val" type="Object"/>
                </params>
                <comment line="208">
                    check type safety b4 going native.  These should never
                     fail, since only java.Socket has access to
                     PlainSocketImpl.setOption().                    
                </comment>
                <comment line="216">
                                        
                </comment>
                <scope line="203"/>
                <declaration name="on" type="boolean" line="206"/>
                <scope line="215"/>
                <declaration name="tmp" type="int" line="223"/>
                <scope line="229"/>
                <scope line="244"/>
            </method>
            <method name="getOption" type="Object" line="269">
                <params>
                    <param name="opt" type="int"/>
                </params>
                <comment line="277">
                    The native socketGetOption() knows about 3 options.
                     The 32 bit value it returns will be interpreted according
                     to what we&apos;re asking.  A return of -1 means it understands
                     the option but its turned off.  It will raise a SocketException
                     if &quot;opt&quot; isn&apos;t one it understands.                    
                </comment>
                <comment line="308">
                    ipv6 tos                    
                </comment>
                <comment line="316">
                    should never get here                    
                </comment>
                <scope line="270"/>
                <scope line="273"/>
                <declaration name="ret" type="int" line="276"/>
                <declaration name="in" type="InetAddressContainer" line="299"/>
                <scope line="308"/>
                <scope line="310"/>
            </method>
            <javadoc line="322">
                The workhorse of the connection operation.  Tries several times to
                  establish a connection to the given &lt;host, port&gt;.  If unsuccessful,
                  throws an IOException indicating what went wrong.                
            </javadoc>
            <method name="doConnect" type="void" line="328">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
                <comment line="338">
                                        
                </comment>
                <comment line="344">
                    If we have a ref. to the Socket, then sets the flags                    
                </comment>
                <comment line="345">
                    created, bound &amp; connected to true.                    
                </comment>
                <comment line="346">
                    This is normally done in Socket.connect() but some                    
                </comment>
                <comment line="347">
                    subclasses of Socket may call impl.connect() directly!                    
                </comment>
                <scope line="329">
                    <scope line="330"/>
                </scope>
                <scope line="334">
                    <scope line="336">
                        <scope line="339">
                            <scope line="340"/>
                        </scope>
                        <scope line="348"/>
                    </scope>
                    <scope line="352"/>
                </scope>
                <scope line="355"/>
            </method>
            <javadoc line="361">
                Binds the socket to the specified address of the specified local port.                
                <param>
                    address the address                    
                </param>
                <param>
                    port the port                    
                </param>
            </javadoc>
            <method name="bind" type="void" line="368">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="lport" type="int"/>
                </params>
                <scope line="369">
                    <scope line="370"/>
                </scope>
            </method>
            <javadoc line="381">
                Listens, for a specified amount of time, for connections.                
                <param>
                    count the amount of time to listen for connections                    
                </param>
            </javadoc>
            <method name="listen" type="void" line="385">
                <params>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="389">
                Accepts connections.                
                <param>
                    s the connection                    
                </param>
            </javadoc>
            <method name="accept" type="void" line="393">
                <params>
                    <param name="s" type="SocketImpl"/>
                </params>
                <scope line="395"/>
                <scope line="397"/>
            </method>
            <javadoc line="402">
                Gets an InputStream for this socket.                
            </javadoc>
            <method name="getInputStream" type="InputStream" line="405">
                <scope line="406"/>
                <scope line="409"/>
                <scope line="412"/>
            </method>
            <method name="setInputStream" type="void" line="418">
                <params>
                    <param name="in" type="SocketInputStream"/>
                </params>
            </method>
            <javadoc line="422">
                Gets an OutputStream for this socket.                
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="425">
                <scope line="426"/>
                <scope line="429"/>
            </method>
            <method name="setFileDescriptor" type="void" line="435">
                <params>
                    <param name="fd" type="FileDescriptor"/>
                </params>
            </method>
            <method name="setAddress" type="void" line="439">
                <params>
                    <param name="address" type="InetAddress"/>
                </params>
            </method>
            <method name="setPort" type="void" line="443">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="setLocalPort" type="void" line="447">
                <params>
                    <param name="localport" type="int"/>
                </params>
            </method>
            <javadoc line="451">
                Returns the number of bytes that can be read without blocking.                
            </javadoc>
            <method name="available" type="int" line="454">
                <comment line="459">
                    If connection has been reset then return 0 to indicate
                     there are no buffered bytes.                    
                </comment>
                <comment line="467">
                    If no bytes available and we were previously notified
                     of a connection reset then we move to the reset state.
                    
                     If are notified of a connection reset then check
                     again if there are bytes buffered on the socket.                    
                </comment>
                <scope line="455"/>
                <scope line="463"/>
                <declaration name="n" type="int" line="474"/>
                <scope line="475">
                    <scope line="477"/>
                </scope>
                <scope line="480">
                    <scope line="482">
                        <scope line="484"/>
                    </scope>
                    <scope line="487"/>
                </scope>
            </method>
            <javadoc line="493">
                Closes the socket.                
            </javadoc>
            <method name="close" type="void" line="496">
                <comment line="507">
                    We close the FileDescriptor in two-steps - first the
                     &quot;pre-close&quot; which closes the socket but doesn&apos;t
                     release the underlying file descriptor. This operation
                     may be lengthy due to untransmitted data and a long
                     linger interval. Once the pre-close is done we do the
                     actual socket to release the fd.                    
                </comment>
                <comment line="523">
                    If a thread has acquired the fd and a close
                     isn&apos;t pending then use a deferred close.
                     Also decrement fdUseCount to signal the last
                     thread that releases the fd to close it.                    
                </comment>
                <scope line="497">
                    <scope line="498">
                        <scope line="499"/>
                        <scope line="502">
                            <scope line="503"/>
                            <scope line="515"/>
                            <scope line="517"/>
                        </scope>
                        <scope line="522">
                            <scope line="529"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="reset" type="void" line="539">
                <scope line="540"/>
            </method>
            <javadoc line="548">
                Shutdown read-half of the socket connection;                
            </javadoc>
            <method name="shutdownInput" type="void" line="551">
                <scope line="552">
                    <scope line="554"/>
                </scope>
            </method>
            <javadoc line="561">
                Shutdown write-half of the socket connection;                
            </javadoc>
            <method name="shutdownOutput" type="void" line="564">
                <scope line="565"/>
            </method>
            <method name="supportsUrgentData" type="boolean" line="571"/>
            <method name="sendUrgentData" type="void" line="575">
                <params>
                    <param name="data" type="int"/>
                </params>
                <scope line="576"/>
            </method>
            <javadoc line="582">
                Cleans up if the user forgets to close it.                
            </javadoc>
            <method name="finalize" type="void" line="585"/>
            <method name="acquireFD" type="FileDescriptor" line="595">
                <scope line="596"/>
            </method>
            <method name="releaseFD" type="void" line="607">
                <scope line="608">
                    <scope line="610">
                        <scope line="611">
                            <scope line="612"/>
                            <scope line="614"/>
                            <scope line="615"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isConnectionReset" type="boolean" line="623">
                <scope line="624"/>
            </method>
            <method name="isConnectionResetPending" type="boolean" line="629">
                <scope line="630"/>
            </method>
            <method name="setConnectionReset" type="void" line="635">
                <scope line="636"/>
            </method>
            <method name="setConnectionResetPending" type="void" line="641">
                <scope line="642">
                    <scope line="643"/>
                </scope>
            </method>
            <method name="isClosedOrPending" type="boolean" line="653">
                <comment line="654">
                    Lock on fdLock to ensure that we wait if a
                     close is in progress.                    
                </comment>
                <scope line="658">
                    <scope line="659"/>
                    <scope line="661"/>
                </scope>
            </method>
            <method name="getTimeout" type="int" line="670"/>
            <method name="socketPreClose" type="void" line="678"/>
            <method name="socketClose" type="void" line="685"/>
            <method name="socketCreate" type="void" line="689"/>
            <method name="socketConnect" type="void" line="690"/>
            <method name="socketBind" type="void" line="692"/>
            <method name="socketListen" type="void" line="694"/>
            <method name="socketAccept" type="void" line="696"/>
            <method name="socketAvailable" type="int" line="698"/>
            <method name="socketClose0" type="void" line="700"/>
            <method name="socketShutdown" type="void" line="702"/>
            <method name="socketSetOption" type="void" line="704"/>
            <method name="socketGetOption" type="int" line="706"/>
            <method name="socketSendUrgentData" type="void" line="707"/>
            <declaration name="SHUT_RD" type="int" line="710"/>
            <declaration name="SHUT_WR" type="int" line="711"/>
        </class>
        <class name="InetAddressContainer" line="714">
            <comment line="47">
                                
            </comment>
            <comment line="48">
                timeout in millisec                
            </comment>
            <comment line="49">
                traffic class                
            </comment>
            <comment line="57">
                                
            </comment>
            <comment line="60">
                                
            </comment>
            <comment line="63">
                                
            </comment>
            <comment line="66">
                                
            </comment>
            <comment line="73">
                whether this Socket is a stream (TCP) socket or not (UDP)                
            </comment>
            <comment line="590">
                &quot;Acquires&quot; and returns the FileDescriptor for this impl
                
                 A corresponding releaseFD is required to &quot;release&quot; the
                 FileDescriptor.                
            </comment>
            <comment line="603">
                &quot;Release&quot; the FileDescriptor for this impl.
                
                 If the use count goes to -1 then the socket is closed.                
            </comment>
            <comment line="651">
                Return true if already closed or close is pending                
            </comment>
            <comment line="668">
                Return the current value of SO_TIMEOUT                
            </comment>
            <comment line="675">
                &quot;Pre-close&quot; a socket by dup&apos;ing the file descriptor - this enables
                 the socket to be closed without releasing the file descriptor.                
            </comment>
            <comment line="683">
                Close the socket (and release the file descriptor).                
            </comment>
            <declaration name="addr" type="InetAddress" line="715"/>
        </class>
    </source>