<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.util.jar.JarEntry"/>
        <import package="java.util.jar.Attributes"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.security.Permission"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="JarURLConnection" line="9">
            <extends class="URLConnection"/>
            <javadoc line="9">
                A URL Connection to a Java ARchive (JAR) file or an entry in a JAR
                  file.
                  &lt;p&gt;The syntax of a JAR URL is:
                  &lt;pre&gt;
                  jar:&amp;lt;url&amp;gt;!/{entry}
                  &lt;/pre&gt;
                  &lt;p&gt;for example:
                  &lt;p&gt;&lt;code&gt;
                  jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class&lt;br&gt;
                  &lt;/code&gt;
                  &lt;p&gt;Jar URLs should be used to refer to a JAR file or entries in
                  a JAR file. The example above is a JAR URL which refers to a JAR
                  entry. If the entry name is omitted, the URL refers to the whole
                  JAR file:
                  &lt;code&gt;
                  jar:http://www.foo.com/bar/baz.jar!/
                  &lt;/code&gt;
                  &lt;p&gt;Users should cast the generic URLConnection to a
                  JarURLConnection when they know that the URL they created is a JAR
                  URL, and they need JAR-specific functionality. For example:
                  &lt;pre&gt;
                  URL url = new URL(&quot;jar:file:/home/duke/duke.jar!/&quot;);
                  JarURLConnection jarConnection = (JarURLConnection)url.openConnection();
                  Manifest manifest = jarConnection.getManifest();
                  &lt;/pre&gt;
                  &lt;p&gt;JarURLConnection instances can only be used to read from JAR files.
                  It is not possible to get a {@link java.io.OutputStream} to modify or write
                  to the underlying JAR file using this class.
                  &lt;p&gt;Examples:
                  &lt;dl&gt;
                  &lt;dt&gt;A Jar entry
                  &lt;dd&gt;&lt;code&gt;jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class&lt;/code&gt;
                  &lt;dt&gt;A Jar file
                  &lt;dd&gt;&lt;code&gt;jar:http://www.foo.com/bar/baz.jar!/&lt;/code&gt;
                  &lt;dt&gt;A Jar directory
                  &lt;dd&gt;&lt;code&gt;jar:http://www.foo.com/bar/baz.jar!/COM/foo/&lt;/code&gt;
                  &lt;/dl&gt;
                  &lt;p&gt;&lt;code&gt;!/&lt;/code&gt; is refered to as the &lt;em&gt;separator&lt;/em&gt;.
                  &lt;p&gt;When constructing a JAR url via &lt;code&gt;new URL(context, spec)&lt;/code&gt;,
                  the following rules apply:
                  &lt;ul&gt;
                  &lt;li&gt;if there is no context URL and the specification passed to the
                  URL constructor doesn&apos;t contain a separator, the URL is considered
                  to refer to a JarFile.
                  &lt;li&gt;if there is a context URL, the context URL is assumed to refer
                  to a JAR file or a Jar directory.
                  &lt;li&gt;if the specification begins with a &apos;/&apos;, the Jar directory is
                  ignored, and the spec is considered to be at the root of the Jar
                  file.
                  &lt;p&gt;Examples:
                  &lt;dl&gt;
                  &lt;dt&gt;context: &lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/&lt;/b&gt;,
                  spec:&lt;b&gt;baz/entry.txt&lt;/b&gt;
                  &lt;dd&gt;url:&lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt&lt;/b&gt;
                  &lt;dt&gt;context: &lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/baz&lt;/b&gt;,
                  spec:&lt;b&gt;entry.txt&lt;/b&gt;
                  &lt;dd&gt;url:&lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt&lt;/b&gt;
                  &lt;dt&gt;context: &lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/baz&lt;/b&gt;,
                  spec:&lt;b&gt;/entry.txt&lt;/b&gt;
                  &lt;dd&gt;url:&lt;b&gt;jar:http://www.foo.com/bar/jar.jar!/entry.txt&lt;/b&gt;
                  &lt;/dl&gt;
                  &lt;/ul&gt;                
                <see>
                    java.net.URL                    
                </see>
                <see>
                    java.net.URLConnection                    
                </see>
                <see>
                    java.util.jar.JarFile                    
                </see>
                <see>
                    java.util.jar.JarInputStream                    
                </see>
                <see>
                    java.util.jar.Manifest                    
                </see>
                <see>
                    java.util.zip.ZipEntry                    
                </see>
                <author>
                    Benjamin Renaud                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="jarFileURL" type="URL" line="82"/>
            <declaration name="entryName" type="String" line="83"/>
            <declaration name="jarFileURLConnection" type="URLConnection" line="84"/>
            <javadoc line="84">
                The connection to the JAR file URL, if the connection has been
                  initiated. This should be set by connect.                
            </javadoc>
            <javadoc line="89">
                Creates the new JarURLConnection to the specified URL.                
                <param>
                    url the URL                    
                </param>
                <throws>
                    MalformedURLException if no legal protocol
                      could be found in a specification string or the
                      string could not be parsed.                    
                </throws>
            </javadoc>
            <method name="JarURLConnection" type="constructor" line="96">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <method name="parseSpecs" type="void" line="100">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="spec" type="String" line="101"/>
                <declaration name="separator" type="int" line="102"/>
                <scope line="103"/>
                <scope line="108"/>
            </method>
            <javadoc line="113">
                Returns the URL for the Jar file for this connection.                
                <return>
                    the URL for the Jar file for this connection.                    
                </return>
            </javadoc>
            <method name="getJarFileURL" type="URL" line="117"/>
            <javadoc line="120">
                Return the entry name for this connection. This method
                  returns null if the JAR file URL corresponding to this
                  connection points to a JAR file and not a JAR file entry.                
                <return>
                    the entry name for this connection, if any.                    
                </return>
            </javadoc>
            <method name="getEntryName" type="String" line="126"/>
            <method name="getJarFile" type="JarFile" line="129"/>
            <javadoc line="129">
                Return the JAR file for this connection.                
                <return>
                    the JAR file for this connection. If the connection is
                      a connection to an entry of a JAR file, the JAR file object is
                      returned                    
                </return>
                <exception>
                    IOException if an IOException occurs while trying to
                      connect to the JAR file for this connection.                    
                </exception>
                <see>
                    #connect                    
                </see>
            </javadoc>
            <javadoc line="139">
                Returns the Manifest for this connection, or null if none.                
                <return>
                    the manifest object corresponding to the JAR file object
                      for this connection.                    
                </return>
                <exception>
                    IOException if getting the JAR file for this
                      connection causes an IOException to be trown.                    
                </exception>
                <see>
                    #getJarFile                    
                </see>
            </javadoc>
            <method name="getManifest" type="Manifest" line="147"/>
            <javadoc line="150">
                Return the JAR entry object for this connection, if any. This
                  method returns null if the JAR file URL corresponding to this
                  connection points to a JAR file and not a JAR file entry.                
                <return>
                    the JAR entry object for this connection, or null if
                      the JAR URL for this connection points to a JAR file.                    
                </return>
                <exception>
                    IOException if getting the JAR file for this
                      connection causes an IOException to be trown.                    
                </exception>
                <see>
                    #getJarFile                    
                </see>
                <see>
                    #getJarEntry                    
                </see>
            </javadoc>
            <method name="getJarEntry" type="JarEntry" line="161"/>
            <javadoc line="164">
                Return the Attributes object for this connection if the URL
                  for it points to a JAR file entry, null otherwise.                
                <return>
                    the Attributes object for this connection if the URL
                      for it points to a JAR file entry, null otherwise.                    
                </return>
                <exception>
                    IOException if getting the JAR entry causes an
                      IOException to be thrown.                    
                </exception>
                <see>
                    #getJarEntry                    
                </see>
            </javadoc>
            <method name="getAttributes" type="Attributes" line="173">
                <declaration name="e" type="JarEntry" line="174"/>
            </method>
            <javadoc line="177">
                Returns the main Attributes for the JAR file for this
                  connection.                
                <return>
                    the main Attributes for the JAR file for this
                      connection.                    
                </return>
                <exception>
                    IOException if getting the manifest causes an
                      IOException to be thrown.                    
                </exception>
                <see>
                    #getJarFile                    
                </see>
                <see>
                    #getManifest                    
                </see>
            </javadoc>
            <method name="getMainAttributes" type="Attributes" line="187">
                <declaration name="man" type="Manifest" line="188"/>
            </method>
            <javadoc line="191">
                Return the Certificate object for this connection if the URL
                  for it points to a JAR file entry, null otherwise. This method
                  can only be called once
                  the connection has been completely verified by reading
                  from the input stream until the end of the stream has been
                  reached. Otherwise, this method will return &lt;code&gt;null&lt;/code&gt;                
                <return>
                    the Certificate object for this connection if the URL
                      for it points to a JAR file entry, null otherwise.                    
                </return>
                <exception>
                    IOException if getting the JAR entry causes an
                      IOException to be thrown.                    
                </exception>
                <see>
                    #getJarEntry                    
                </see>
            </javadoc>
            <method name="getCertificates" type="java.security.cert.Certificate[]" line="204">
                <declaration name="e" type="JarEntry" line="205"/>
            </method>
        </class>
    </source>