<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.BufferedWriter"/>
        <import package="java.io.OutputStreamWriter"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.io.CharArrayWriter"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.IllegalCharsetNameException"/>
        <import package="java.nio.charset.UnsupportedCharsetException"/>
        <import package="java.util.BitSet"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="URLEncoder" line="43">
            <javadoc line="43">
                Utility class for HTML form encoding. This class contains static methods
                  for converting a String to the &lt;CODE&gt;application/x-www-form-urlencoded&lt;/CODE&gt; MIME
                  format. For more information about HTML form encoding, consult the HTML
                  &lt;A HREF=&quot;http://www.w3.org/TR/html4/&quot;&gt;specification&lt;/A&gt;.
                  &lt;p&gt;
                  When encoding a String, the following rules apply:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The alphanumeric characters &amp;quot;&lt;code&gt;a&lt;/code&gt;&amp;quot; through
                  &amp;quot;&lt;code&gt;z&lt;/code&gt;&amp;quot;, &amp;quot;&lt;code&gt;A&lt;/code&gt;&amp;quot; through
                  &amp;quot;&lt;code&gt;Z&lt;/code&gt;&amp;quot; and &amp;quot;&lt;code&gt;0&lt;/code&gt;&amp;quot;
                  through &amp;quot;&lt;code&gt;9&lt;/code&gt;&amp;quot; remain the same.
                  &lt;li&gt;The special characters &amp;quot;&lt;code&gt;.&lt;/code&gt;&amp;quot;,
                  &amp;quot;&lt;code&gt;-&lt;/code&gt;&amp;quot;, &amp;quot;&lt;code&gt;&lt;/code&gt;&amp;quot;, and
                  &amp;quot;&lt;code&gt;_&lt;/code&gt;&amp;quot; remain the same.
                  &lt;li&gt;The space character &amp;quot;&lt;code&gt;&amp;nbsp;&lt;/code&gt;&amp;quot; is
                  converted into a plus sign &amp;quot;&lt;code&gt;+&lt;/code&gt;&amp;quot;.
                  &lt;li&gt;All other characters are unsafe and are first converted into
                  one or more bytes using some encoding scheme. Then each byte is
                  represented by the 3-character string
                  &amp;quot;&lt;code&gt;%&lt;i&gt;xy&lt;/i&gt;&lt;/code&gt;&amp;quot;, where &lt;i&gt;xy&lt;/i&gt; is the
                  two-digit hexadecimal representation of the byte.
                  The recommended encoding scheme to use is UTF-8. However,
                  for compatibility reasons, if an encoding is not specified,
                  then the default encoding of the platform is used.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  For example using UTF-8 as the encoding scheme the string &amp;quot;The
                  string &amp;#252;@foo-bar&amp;quot; would get converted to
                  &amp;quot;The+string+%C3%BC%40foo-bar&amp;quot; because in UTF-8 the character
                  &amp;#252; is encoded as two bytes C3 (hex) and BC (hex), and the
                  character @ is encoded as one byte 40 (hex).                
                <author>
                    Herb Jellinek                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="dontNeedEncoding" type="BitSet" line="84"/>
            <declaration name="caseDiff" type="int" line="85"/>
            <declaration name="dfltEncName" type="String" line="86"/>
            <scope line="88">
                <declaration name="i" type="int" line="127"/>
                <scope line="128"/>
                <scope line="131"/>
                <scope line="134"/>
            </scope>
            <javadoc line="149">
                You can&apos;t call the constructor.                
            </javadoc>
            <method name="URLEncoder" type="constructor" line="152"/>
            <javadoc line="154">
                Translates a string into &lt;code&gt;x-www-form-urlencoded&lt;/code&gt;
                  format. This method uses the platform&apos;s default encoding
                  as the encoding scheme to obtain the bytes for unsafe characters.                
                <param>
                    s   <code>String</code> to be translated.                    
                </param>
                <deprecated>
                    The resulting string may vary depending on the platform's
                      default encoding. Instead, use the encode(String,String)
                      method to specify the encoding.                    
                </deprecated>
                <return>
                    the translated <code>String</code>.                    
                </return>
            </javadoc>
            <method name="encode" type="String" line="166">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="173">
                    The system should always have the platform default                    
                </comment>
                <declaration name="str" type="String" line="168"/>
                <scope line="170"/>
                <scope line="172"/>
            </method>
            <javadoc line="179">
                Translates a string into &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;
                  format using a specific encoding scheme. This method uses the
                  supplied encoding scheme to obtain the bytes for unsafe
                  characters.
                  &lt;p&gt;
                  &lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=
                  &quot;http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars&quot;&gt;
                  World Wide Web Consortium Recommendation&lt;/a&gt; states that
                  UTF-8 should be used. Not doing so may introduce
                  incompatibilites.&lt;/em&gt;                
                <param>
                    s   <code>String</code> to be translated.                    
                </param>
                <param>
                    enc   The name of a supported
                      <a href="../lang/package-summary.html#charenc">character
                      encoding</a>.                    
                </param>
                <return>
                    the translated <code>String</code>.                    
                </return>
                <exception>
                    UnsupportedEncodingExceptionIf the named encoding is not supported                    
                </exception>
                <see>
                    URLDecoder#decode(java.lang.String,java.lang.String)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="encode" type="String" line="202">
                <params>
                    <param name="s" type="String"/>
                    <param name="enc" type="String"/>
                </params>
                <comment line="222">
                    System.out.println(&quot;Examining character: &quot; + c);                    
                </comment>
                <comment line="228">
                    System.out.println(&quot;Storing: &quot; + c);                    
                </comment>
                <comment line="232">
                    convert to external encoding before hex conversion                    
                </comment>
                <comment line="235">
                    If this character represents the start of a Unicode
                     surrogate pair, then pass in two characters. It&apos;s not
                     clear what should be done if a bytes reserved in the
                     surrogate pairs range occurs outside of a legal
                     surrogate pair. For now, just treat it as if it were
                     any other character.                    
                </comment>
                <comment line="244">
                    System.out.println(Integer.toHexString(c)
                    + &quot; is high surrogate&quot;);                    
                </comment>
                <comment line="250">
                    System.out.println(&quot;\tExamining &quot;
                    + Integer.toHexString(d));                    
                </comment>
                <comment line="255">
                    System.out.println(&quot;\t&quot;
                    + Integer.toHexString(d)
                    + &quot; is low surrogate&quot;);                    
                </comment>
                <comment line="274">
                    converting to use uppercase letter as part of                    
                </comment>
                <comment line="275">
                    the hex value if ch is a letter.                    
                </comment>
                <declaration name="needToChange" type="boolean" line="204"/>
                <declaration name="out" type="StringBuffer" line="205"/>
                <declaration name="charset" type="Charset" line="206"/>
                <declaration name="charArrayWriter" type="CharArrayWriter" line="207"/>
                <scope line="212"/>
                <scope line="214"/>
                <scope line="216"/>
                <scope line="220">
                    <declaration name="c" type="int" line="221"/>
                    <scope line="223">
                        <scope line="224"/>
                    </scope>
                    <scope line="231">
                        <scope line="233">
                            <scope line="243">
                                <scope line="248">
                                    <declaration name="d" type="int" line="249"/>
                                    <scope line="254"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="str" type="String" line="269"/>
                        <declaration name="ba" type="byte[]" line="270"/>
                        <scope line="271">
                            <declaration name="ch" type="char" line="273"/>
                            <scope line="276"/>
                            <scope line="281"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>