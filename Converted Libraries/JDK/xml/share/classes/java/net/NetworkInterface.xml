<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.util.Enumeration"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="sun.security.action"/>
        <import package="java.security.AccessController"/>
        <class name="NetworkInterface" line="33">
            <javadoc line="33">
                This class represents a Network Interface made up of a name,
                  and a list of IP addresses assigned to this interface.
                  It is used to identify the local interface on which a multicast group
                  is joined.
                  Interfaces are normally known by names such as &quot;le0&quot;.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="name" type="String" line="44"/>
            <declaration name="displayName" type="String" line="45"/>
            <declaration name="index" type="int" line="46"/>
            <declaration name="addrs" type="InetAddress" line="47"/>
            <declaration name="bindings" type="InterfaceAddress" line="48"/>
            <declaration name="childs" type="NetworkInterface" line="49"/>
            <declaration name="parent" type="NetworkInterface" line="50"/>
            <declaration name="virtual" type="boolean" line="51"/>
            <scope line="53"/>
            <javadoc line="58">
                Returns an NetworkInterface object with index set to 0 and name to null.
                  Setting such an interface on a MulticastSocket will cause the
                  kernel to choose one interface for sending multicast packets.                
            </javadoc>
            <method name="NetworkInterface" type="constructor" line="64"/>
            <method name="NetworkInterface" type="constructor" line="67">
                <params>
                    <param name="name" type="String"/>
                    <param name="index" type="int"/>
                    <param name="addrs" type="InetAddress[]"/>
                </params>
            </method>
            <javadoc line="73">
                Get the name of this network interface.                
                <return>
                    the name of this network interface                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="78"/>
            <javadoc line="82">
                Convenience method to return an Enumeration with all or a
                  subset of the InetAddresses bound to this network interface.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt;
                  method is called for each InetAddress. Only InetAddresses where
                  the &lt;code&gt;checkConnect&lt;/code&gt; doesn&apos;t throw a SecurityException
                  will be returned in the Enumeration. However, if the caller has the{@link NetPermission}(&quot;getNetworkInformation&quot;) permission, then all
                  InetAddresses are returned.                
                <return>
                    an Enumeration object with all or a subset of the InetAddresses
                      bound to this network interface                    
                </return>
            </javadoc>
            <method name="getInetAddresses" type="Enumeration<InetAddress>" line="95">
                <class name="checkedAddresses" line="97">
                    <implements interface="Enumeration">
                        <type_params>
                            <type_param name="InetAddress"/>
                        </type_params>
                    </implements>
                    <declaration name="i" type="int" line="99"/>
                    <declaration name="local_addrs" type="InetAddress" line="100"/>
                    <method name="checkedAddresses" type="constructor" line="102">
                        <declaration name="trusted" type="boolean" line="104"/>
                        <declaration name="sec" type="SecurityManager" line="106"/>
                        <scope line="107">
                            <scope line="108"/>
                            <scope line="110"/>
                        </scope>
                        <scope line="114">
                            <scope line="115">
                                <scope line="116"/>
                            </scope>
                            <scope line="120"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="InetAddress" line="125">
                        <scope line="126"/>
                        <scope line="128"/>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="133"/>
                </class>
            </method>
            <javadoc line="141">
                Get a List of all or a subset of the &lt;code&gt;InterfaceAddresses&lt;/code&gt;
                  of this network interface.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt;
                  method is called with the InetAddress for each InterfaceAddress.
                  Only InterfaceAddresses where the &lt;code&gt;checkConnect&lt;/code&gt; doesn&apos;t throw
                  a SecurityException will be returned in the List.                
                <return>
                    a &lt;code&gt;List&lt;/code&gt; object with all or a subset of the
                      InterfaceAddresss of this network interface                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInterfaceAddresses" type="java.util.List<InterfaceAddress>" line="154">
                <declaration name="lst" type="java.util.List&lt;InterfaceAddress&gt;" line="155"/>
                <declaration name="sec" type="SecurityManager" line="156"/>
                <scope line="157">
                    <scope line="158">
                        <scope line="159"/>
                    </scope>
                    <scope line="163"/>
                </scope>
            </method>
            <javadoc line="168">
                Get an Enumeration with all the subinterfaces (also known as virtual
                  interfaces) attached to this network interface.
                  &lt;p&gt;
                  For instance eth0:1 will be a subinterface to eth0.                
                <return>
                    an Enumeration object with all of the subinterfaces
                      of this network interface                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getSubInterfaces" type="Enumeration<NetworkInterface>" line="178">
                <class name="subIFs" line="179">
                    <implements interface="Enumeration">
                        <type_params>
                            <type_param name="NetworkInterface"/>
                        </type_params>
                    </implements>
                    <declaration name="i" type="int" line="181"/>
                    <method name="subIFs" type="constructor" line="183"/>
                    <method name="nextElement" type="NetworkInterface" line="186">
                        <scope line="187"/>
                        <scope line="189"/>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="194"/>
                </class>
            </method>
            <javadoc line="202">
                Returns the parent NetworkInterface of this interface if this is
                  a subinterface, or &lt;code&gt;null&lt;/code&gt; if it is a physical
                  (non virtual) interface or has no parent.                
                <return>
                    The &lt;code&gt;NetworkInterface&lt;/code&gt; this interface is attached to.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getParent" type="NetworkInterface" line="210"/>
            <javadoc line="214">
                Returns the index of this network interface. The index is an integer greater
                  or equal to zero, or {@code -1} for unknown. This is a system specific value
                  and interfaces with the same name can have different indexes on different
                  machines.                
                <return>
                    the index of this network interface or {@code -1} if the index is
                      unknown                    
                </return>
                <see>
                    #getByIndex(int)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getIndex" type="int" line="225"/>
            <javadoc line="229">
                Get the display name of this network interface.
                  A display name is a human readable String describing the network
                  device.                
                <return>
                    a non-empty string representing the display name of this network
                      interface, or null if no display name is available.                    
                </return>
            </javadoc>
            <method name="getDisplayName" type="String" line="237">
                <comment line="239">
                                        
                </comment>
            </method>
            <javadoc line="242">
                Searches for the network interface with the specified name.                
                <param>
                    nameThe name of the network interface.                    
                </param>
                <return>
                    A &lt;tt&gt;NetworkInterface&lt;/tt&gt; with the specified name,
                      or &lt;tt&gt;null&lt;/tt&gt; if there is no network interface
                      with the specified name.                    
                </return>
                <throws>
                    SocketExceptionIf an I/O error occurs.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the specified name is &lt;tt&gt;null&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="getByName" type="NetworkInterface" line="258">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="264">
                Get a network interface given its index.                
                <param>
                    index an integer, the index of the interface                    
                </param>
                <return>
                    the NetworkInterface obtained from its index, or {@code null} if
                      there is no interface with such an index on the system                    
                </return>
                <throws>
                    SocketException  if an I/O error occurs.                    
                </throws>
                <throws>
                    IllegalArgumentException if index has a negative value                    
                </throws>
                <see>
                    #getIndex()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getByIndex" type="NetworkInterface" line="275">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="281">
                Convenience method to search for a network interface that
                  has the specified Internet Protocol (IP) address bound to
                  it.
                  &lt;p&gt;
                  If the specified IP address is bound to multiple network
                  interfaces it is not defined which network interface is
                  returned.                
                <param>
                    addrThe &lt;tt&gt;InetAddress&lt;/tt&gt; to search with.                    
                </param>
                <return>
                    A &lt;tt&gt;NetworkInterface&lt;/tt&gt;
                      or &lt;tt&gt;null&lt;/tt&gt; if there is no network interface
                      with the specified IP address.                    
                </return>
                <throws>
                    SocketExceptionIf an I/O error occurs.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the specified address is &lt;tt&gt;null&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="getByInetAddress" type="NetworkInterface" line="303">
                <params>
                    <param name="addr" type="InetAddress"/>
                </params>
                <scope line="304"/>
                <scope line="307"/>
            </method>
            <javadoc line="313">
                Returns all the interfaces on this machine. Returns null if no
                  network interfaces could be found on this machine.
                  NOTE: can use getNetworkInterfaces()+getInetAddresses()
                  to obtain all IP addresses for this node                
                <return>
                    an Enumeration of NetworkInterfaces found on this machine                    
                </return>
                <exception>
                    SocketException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="getNetworkInterfaces" type="Enumeration<NetworkInterface>" line="325">
                <comment line="329">
                    specified to return null if no network interfaces                    
                </comment>
                <declaration name="netifs" type="NetworkInterface[]" line="326"/>
                <anonymous_class line="332">
                    <declaration name="i" type="int" line="333"/>
                    <method name="nextElement" type="NetworkInterface" line="334">
                        <scope line="335">
                            <declaration name="netif" type="NetworkInterface" line="336"/>
                        </scope>
                        <scope line="338"/>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="343"/>
                </anonymous_class>
            </method>
            <method name="getAll" type="NetworkInterface[]" line="349"/>
            <method name="getByName0" type="NetworkInterface" line="352"/>
            <method name="getByIndex0" type="NetworkInterface" line="355"/>
            <method name="getByInetAddress0" type="NetworkInterface" line="358"/>
            <javadoc line="361">
                Returns whether a network interface is up and running.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the interface is up and running.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isUp" type="boolean" line="369"/>
            <javadoc line="373">
                Returns whether a network interface is a loopback interface.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the interface is a loopback interface.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isLoopback" type="boolean" line="381"/>
            <javadoc line="385">
                Returns whether a network interface is a point to point interface.
                  A typical point to point interface would be a PPP connection through
                  a modem.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the interface is a point to point
                      interface.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isPointToPoint" type="boolean" line="396"/>
            <javadoc line="400">
                Returns whether a network interface supports multicasting or not.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the interface supports Multicasting.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="supportsMulticast" type="boolean" line="408"/>
            <javadoc line="412">
                Returns the hardware address (usually MAC) of the interface if it
                  has one and if it can be accessed given the current privileges.
                  If a security manager is set, then the caller must have
                  the permission {@link NetPermission}(&quot;getNetworkInformation&quot;).                
                <return>
                    a byte array containing the address, or &lt;code&gt;null&lt;/code&gt; if
                      the address doesn&apos;t exist, is not accessible or a security
                      manager is set and the caller does not have the permission
                      NetPermission(&quot;getNetworkInformation&quot;)                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getHardwareAddress" type="byte[]" line="426">
                <comment line="434">
                    don&apos;t have connect permission to any local address                    
                </comment>
                <declaration name="sec" type="SecurityManager" line="427"/>
                <scope line="428">
                    <scope line="429"/>
                    <scope line="431">
                        <scope line="432"/>
                    </scope>
                </scope>
                <scope line="438">
                    <scope line="439"/>
                </scope>
            </method>
            <javadoc line="446">
                Returns the Maximum Transmission Unit (MTU) of this interface.                
                <return>
                    the value of the MTU for that interface.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getMTU" type="int" line="453"/>
            <javadoc line="457">
                Returns whether this interface is a virtual interface (also called
                  subinterface).
                  Virtual interfaces are, on some systems, interfaces created as a child
                  of a physical interface and given different settings (like address or
                  MTU). Usually the name of the interface will the name of the parent
                  followed by a colon (:) and a number identifying the child since there
                  can be several virtual interfaces attached to a single physical
                  interface.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this interface is a virtual interface.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isVirtual" type="boolean" line="470"/>
            <method name="isUp0" type="boolean" line="474"/>
            <method name="isLoopback0" type="boolean" line="475"/>
            <method name="supportsMulticast0" type="boolean" line="476"/>
            <method name="isP2P0" type="boolean" line="477"/>
            <method name="getMacAddr0" type="byte[]" line="478"/>
            <method name="getMTU0" type="int" line="479"/>
            <javadoc line="481">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is
                  not &lt;code&gt;null&lt;/code&gt; and it represents the same NetworkInterface
                  as this object.
                  &lt;p&gt;
                  Two instances of &lt;code&gt;NetworkInterface&lt;/code&gt; represent the same
                  NetworkInterface if both name and addrs are the same for both.                
                <param>
                    obj   the object to compare against.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are the same;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.net.InetAddress#getAddress()                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="495">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="517">
                                        
                </comment>
                <scope line="496"/>
                <declaration name="that" type="NetworkInterface" line="499"/>
                <scope line="500">
                    <scope line="501"/>
                </scope>
                <scope line="504">
                    <scope line="505"/>
                </scope>
                <scope line="510"/>
                <scope line="512"/>
                <scope line="518"/>
                <declaration name="thatAddrs" type="InetAddress[]" line="522"/>
                <declaration name="count" type="int" line="523"/>
                <scope line="525">
                    <declaration name="found" type="boolean" line="526"/>
                    <scope line="527">
                        <scope line="528"/>
                    </scope>
                    <scope line="533"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="540"/>
            <method name="toString" type="String" line="544">
                <declaration name="result" type="String" line="545"/>
                <scope line="547"/>
            </method>
            <method name="init" type="void" line="553"/>
        </class>
    </source>