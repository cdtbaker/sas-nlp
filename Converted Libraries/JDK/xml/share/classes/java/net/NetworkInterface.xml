<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.util.Enumeration"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="sun.security.action"/>
        <import package="java.security.AccessController"/>
        <class name="NetworkInterface" line="6">
            <javadoc line="6">
                This class represents a Network Interface made up of a name,
                  and a list of IP addresses assigned to this interface.
                  It is used to identify the local interface on which a multicast group
                  is joined.
                  Interfaces are normally known by names such as &quot;le0&quot;.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="name" type="String" line="15"/>
            <declaration name="displayName" type="String" line="16"/>
            <declaration name="index" type="int" line="17"/>
            <declaration name="addrs" type="InetAddress" line="18"/>
            <declaration name="bindings" type="InterfaceAddress" line="19"/>
            <declaration name="childs" type="NetworkInterface" line="20"/>
            <declaration name="parent" type="NetworkInterface" line="21"/>
            <declaration name="virtual" type="boolean" line="22"/>
            <scope line="23"/>
            <javadoc line="27">
                Returns an NetworkInterface object with index set to 0 and name to null.
                  Setting such an interface on a MulticastSocket will cause the
                  kernel to choose one interface for sending multicast packets.                
            </javadoc>
            <method name="NetworkInterface" type="constructor" line="32"/>
            <method name="NetworkInterface" type="constructor" line="34">
                <params>
                    <param name="name" type="String"/>
                    <param name="index" type="int"/>
                    <param name="addrs" type="InetAddress[]"/>
                </params>
            </method>
            <javadoc line="39">
                Get the name of this network interface.                
                <return>
                    the name of this network interface                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="43"/>
            <javadoc line="46">
                Convenience method to return an Enumeration with all or a
                  subset of the InetAddresses bound to this network interface.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt;
                  method is called for each InetAddress. Only InetAddresses where
                  the &lt;code&gt;checkConnect&lt;/code&gt; doesn&apos;t throw a SecurityException
                  will be returned in the Enumeration. However, if the caller has the{@link NetPermission}(&quot;getNetworkInformation&quot;) permission, then all
                  InetAddresses are returned.                
                <return>
                    an Enumeration object with all or a subset of the InetAddresses
                      bound to this network interface                    
                </return>
            </javadoc>
            <method name="getInetAddresses" type="Enumeration<InetAddress>" line="58">
                <class name="checkedAddresses" line="59">
                    <implements interface="Enumeration">
                        <type_params>
                            <type_param name="InetAddress"/>
                        </type_params>
                    </implements>
                    <declaration name="i" type="int" line="60"/>
                    <declaration name="local_addrs" type="InetAddress" line="61"/>
                    <method name="checkedAddresses" type="constructor" line="62">
                        <declaration name="trusted" type="boolean" line="64"/>
                        <declaration name="sec" type="SecurityManager" line="65"/>
                        <scope line="66">
                            <scope line="67"/>
                            <scope line="70"/>
                        </scope>
                        <scope line="74">
                            <scope line="75">
                                <scope line="76"/>
                            </scope>
                            <scope line="81"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="InetAddress" line="85">
                        <scope line="86"/>
                        <scope line="89"/>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="93"/>
                </class>
            </method>
            <javadoc line="99">
                Get a List of all or a subset of the &lt;code&gt;InterfaceAddresses&lt;/code&gt;
                  of this network interface.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt;
                  method is called with the InetAddress for each InterfaceAddress.
                  Only InterfaceAddresses where the &lt;code&gt;checkConnect&lt;/code&gt; doesn&apos;t throw
                  a SecurityException will be returned in the List.                
                <return>
                    a <code>List</code> object with all or a subset of the
                      InterfaceAddresss of this network interface                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInterfaceAddresses" type="java.util.List<InterfaceAddress>" line="111">
                <declaration name="lst" type="java.util.List&lt;InterfaceAddress&gt;" line="112"/>
                <declaration name="sec" type="SecurityManager" line="113"/>
                <scope line="114">
                    <scope line="115">
                        <scope line="116"/>
                    </scope>
                    <scope line="121"/>
                </scope>
            </method>
            <javadoc line="126">
                Get an Enumeration with all the subinterfaces (also known as virtual
                  interfaces) attached to this network interface.
                  &lt;p&gt;
                  For instance eth0:1 will be a subinterface to eth0.                
                <return>
                    an Enumeration object with all of the subinterfaces
                      of this network interface                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getSubInterfaces" type="Enumeration<NetworkInterface>" line="135">
                <class name="subIFs" line="136">
                    <implements interface="Enumeration">
                        <type_params>
                            <type_param name="NetworkInterface"/>
                        </type_params>
                    </implements>
                    <declaration name="i" type="int" line="137"/>
                    <method name="subIFs" type="constructor" line="138"/>
                    <method name="nextElement" type="NetworkInterface" line="140">
                        <scope line="141"/>
                        <scope line="144"/>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="148"/>
                </class>
            </method>
            <javadoc line="154">
                Returns the parent NetworkInterface of this interface if this is
                  a subinterface, or &lt;code&gt;null&lt;/code&gt; if it is a physical
                  (non virtual) interface or has no parent.                
                <return>
                    The <code>NetworkInterface</code> this interface is attached to.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getParent" type="NetworkInterface" line="161"/>
            <javadoc line="164">
                Returns the index of this network interface. The index is an integer greater
                  or equal to zero, or {@code -1} for unknown. This is a system specific value
                  and interfaces with the same name can have different indexes on different
                  machines.                
                <return>
                    the index of this network interface or {@code -1} if the index is
                      unknown                    
                </return>
                <see>
                    #getByIndex(int)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getIndex" type="int" line="174"/>
            <javadoc line="177">
                Get the display name of this network interface.
                  A display name is a human readable String describing the network
                  device.                
                <return>
                    a non-empty string representing the display name of this network
                      interface, or null if no display name is available.                    
                </return>
            </javadoc>
            <method name="getDisplayName" type="String" line="184"/>
            <javadoc line="187">
                Searches for the network interface with the specified name.                
                <param>
                    nameThe name of the network interface.                    
                </param>
                <return>
                    A <tt>NetworkInterface</tt> with the specified name,
                      or <tt>null</tt> if there is no network interface
                      with the specified name.                    
                </return>
                <throws>
                    SocketExceptionIf an I/O error occurs.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the specified name is <tt>null</tt>.                    
                </throws>
            </javadoc>
            <method name="getByName" type="NetworkInterface" line="196">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="200">
                Get a network interface given its index.                
                <param>
                    index an integer, the index of the interface                    
                </param>
                <return>
                    the NetworkInterface obtained from its index, or {@code null} if
                      there is no interface with such an index on the system                    
                </return>
                <throws>
                    SocketException  if an I/O error occurs.                    
                </throws>
                <throws>
                    IllegalArgumentException if index has a negative value                    
                </throws>
                <see>
                    #getIndex()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getByIndex" type="NetworkInterface" line="210">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="214">
                Convenience method to search for a network interface that
                  has the specified Internet Protocol (IP) address bound to
                  it.
                  &lt;p&gt;
                  If the specified IP address is bound to multiple network
                  interfaces it is not defined which network interface is
                  returned.                
                <param>
                    addrThe <tt>InetAddress</tt> to search with.                    
                </param>
                <return>
                    A <tt>NetworkInterface</tt>
                      or <tt>null</tt> if there is no network interface
                      with the specified IP address.                    
                </return>
                <throws>
                    SocketExceptionIf an I/O error occurs.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the specified address is <tt>null</tt>.                    
                </throws>
            </javadoc>
            <method name="getByInetAddress" type="NetworkInterface" line="229">
                <params>
                    <param name="addr" type="InetAddress"/>
                </params>
                <scope line="230"/>
                <scope line="233"/>
            </method>
            <javadoc line="238">
                Returns all the interfaces on this machine. Returns null if no
                  network interfaces could be found on this machine.
                  NOTE: can use getNetworkInterfaces()+getInetAddresses()
                  to obtain all IP addresses for this node                
                <return>
                    an Enumeration of NetworkInterfaces found on this machine                    
                </return>
                <exception>
                    SocketException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="getNetworkInterfaces" type="Enumeration<NetworkInterface>" line="246">
                <declaration name="netifs" type="NetworkInterface[]" line="247"/>
                <anonymous_class line="249">
                    <declaration name="i" type="int" line="250"/>
                    <method name="nextElement" type="NetworkInterface" line="251">
                        <scope line="252">
                            <declaration name="netif" type="NetworkInterface" line="253"/>
                        </scope>
                        <scope line="256"/>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="260"/>
                </anonymous_class>
            </method>
            <method name="getAll" type="NetworkInterface[]" line="266"/>
            <method name="getByName0" type="NetworkInterface" line="267"/>
            <method name="getByIndex0" type="NetworkInterface" line="268"/>
            <method name="getByInetAddress0" type="NetworkInterface" line="269"/>
            <javadoc line="270">
                Returns whether a network interface is up and running.                
                <return>
                    <code>true</code> if the interface is up and running.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isUp" type="boolean" line="276"/>
            <javadoc line="279">
                Returns whether a network interface is a loopback interface.                
                <return>
                    <code>true</code> if the interface is a loopback interface.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isLoopback" type="boolean" line="285"/>
            <javadoc line="288">
                Returns whether a network interface is a point to point interface.
                  A typical point to point interface would be a PPP connection through
                  a modem.                
                <return>
                    <code>true</code> if the interface is a point to point
                      interface.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isPointToPoint" type="boolean" line="297"/>
            <javadoc line="300">
                Returns whether a network interface supports multicasting or not.                
                <return>
                    <code>true</code> if the interface supports Multicasting.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="supportsMulticast" type="boolean" line="306"/>
            <javadoc line="309">
                Returns the hardware address (usually MAC) of the interface if it
                  has one and if it can be accessed given the current privileges.
                  If a security manager is set, then the caller must have
                  the permission {@link NetPermission}(&quot;getNetworkInformation&quot;).                
                <return>
                    a byte array containing the address, or <code>null</code> if
                      the address doesn't exist, is not accessible or a security
                      manager is set and the caller does not have the permission
                      NetPermission("getNetworkInformation")                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getHardwareAddress" type="byte[]" line="321">
                <declaration name="sec" type="SecurityManager" line="322"/>
                <scope line="323">
                    <scope line="324"/>
                    <scope line="327">
                        <scope line="328"/>
                    </scope>
                </scope>
                <scope line="333">
                    <scope line="334"/>
                </scope>
            </method>
            <javadoc line="340">
                Returns the Maximum Transmission Unit (MTU) of this interface.                
                <return>
                    the value of the MTU for that interface.                    
                </return>
                <exception>
                    SocketException if an I/O error occurs.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getMTU" type="int" line="346"/>
            <javadoc line="349">
                Returns whether this interface is a virtual interface (also called
                  subinterface).
                  Virtual interfaces are, on some systems, interfaces created as a child
                  of a physical interface and given different settings (like address or
                  MTU). Usually the name of the interface will the name of the parent
                  followed by a colon (:) and a number identifying the child since there
                  can be several virtual interfaces attached to a single physical
                  interface.                
                <return>
                    <code>true</code> if this interface is a virtual interface.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isVirtual" type="boolean" line="361"/>
            <method name="isUp0" type="boolean" line="364"/>
            <method name="isLoopback0" type="boolean" line="365"/>
            <method name="supportsMulticast0" type="boolean" line="366"/>
            <method name="isP2P0" type="boolean" line="367"/>
            <method name="getMacAddr0" type="byte[]" line="368"/>
            <method name="getMTU0" type="int" line="369"/>
            <javadoc line="370">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is
                  not &lt;code&gt;null&lt;/code&gt; and it represents the same NetworkInterface
                  as this object.
                  &lt;p&gt;
                  Two instances of &lt;code&gt;NetworkInterface&lt;/code&gt; represent the same
                  NetworkInterface if both name and addrs are the same for both.                
                <param>
                    obj   the object to compare against.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.net.InetAddress#getAddress()                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="383">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="384"/>
                <declaration name="that" type="NetworkInterface" line="387"/>
                <scope line="388">
                    <scope line="389"/>
                </scope>
                <scope line="393">
                    <scope line="394"/>
                </scope>
                <scope line="398"/>
                <scope line="401"/>
                <scope line="404"/>
                <declaration name="thatAddrs" type="InetAddress[]" line="407"/>
                <declaration name="count" type="int" line="408"/>
                <scope line="409">
                    <declaration name="found" type="boolean" line="410"/>
                    <scope line="411">
                        <scope line="412"/>
                    </scope>
                    <scope line="417"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="423"/>
            <method name="toString" type="String" line="426">
                <declaration name="result" type="String" line="427"/>
                <scope line="429"/>
            </method>
            <method name="init" type="void" line="434"/>
        </class>
    </source>