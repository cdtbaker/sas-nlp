<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.math.BigInteger"/>
        <import package="java.math.RoundingMode"/>
        <import package="java.text.spi.NumberFormatProvider"/>
        <import package="java.util.Currency"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="java.util.spi.LocaleServiceProvider"/>
        <import package="sun.util.LocaleServiceProviderPool"/>
        <import package="sun.util.resources.LocaleData"/>
        <class name="NumberFormat" line="60">
            <extends class="Format"/>
            <comment line="377">
                ============== Locale Stuff =====================                
            </comment>
            <comment line="741">
                =======================privates===============================                
            </comment>
            <comment line="850">
                Constants used by factory methods to specify a style of format.                
            </comment>
            <comment line="918">
                invariant, &gt;= minFractionDigits                
            </comment>
            <comment line="946">
                new fields for 1.2.  byte is too small for integer digits.                
            </comment>
            <comment line="979">
                invariant, &gt;= minFractionDigits                
            </comment>
            <comment line="1017">
                Removed &quot;implements Cloneable&quot; clause.  Needs to update serialization                
            </comment>
            <comment line="1018">
                ID for backward compatibility.                
            </comment>
            <comment line="1022">
                                
            </comment>
            <comment line="1023">
                class for AttributedCharacterIterator attributes                
            </comment>
            <comment line="1024">
                                
            </comment>
            <javadoc line="60">
                &lt;code&gt;NumberFormat&lt;/code&gt; is the abstract base class for all number
                  formats. This class provides the interface for formatting and parsing
                  numbers. &lt;code&gt;NumberFormat&lt;/code&gt; also provides methods for determining
                  which locales have number formats, and what their names are.
                  &lt;p&gt;
                  &lt;code&gt;NumberFormat&lt;/code&gt; helps you to format and parse numbers for any locale.
                  Your code can be completely independent of the locale conventions for
                  decimal points, thousands-separators, or even the particular decimal
                  digits used, or whether the number format is even decimal.
                  &lt;p&gt;
                  To format a number for the current Locale, use one of the factory
                  class methods:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  myString = NumberFormat.getInstance().format(myNumber);
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  If you are formatting multiple numbers, it is
                  more efficient to get the format and use it multiple times so that
                  the system doesn&apos;t have to fetch the information about the local
                  language and country conventions multiple times.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  NumberFormat nf = NumberFormat.getInstance();
                  for (int i = 0; i &lt; myNumber.length; ++i) {
                  output.println(nf.format(myNumber[i]) + &quot;; &quot;);
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  To format a number for a different Locale, specify it in the
                  call to &lt;code&gt;getInstance&lt;/code&gt;.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH);
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  You can also use a &lt;code&gt;NumberFormat&lt;/code&gt; to parse numbers:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  myNumber = nf.parse(myString);
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  Use &lt;code&gt;getInstance&lt;/code&gt; or &lt;code&gt;getNumberInstance&lt;/code&gt; to get the
                  normal number format. Use &lt;code&gt;getIntegerInstance&lt;/code&gt; to get an
                  integer number format. Use &lt;code&gt;getCurrencyInstance&lt;/code&gt; to get the
                  currency number format. And use &lt;code&gt;getPercentInstance&lt;/code&gt; to get a
                  format for displaying percentages. With this format, a fraction like
                  0.53 is displayed as 53%.
                  &lt;p&gt;
                  You can also control the display of numbers with such methods as
                  &lt;code&gt;setMinimumFractionDigits&lt;/code&gt;.
                  If you want even more control over the format or parsing,
                  or want to give your users more control,
                  you can try casting the &lt;code&gt;NumberFormat&lt;/code&gt; you get from the factory methods
                  to a &lt;code&gt;DecimalFormat&lt;/code&gt;. This will work for the vast majority
                  of locales; just remember to put it in a &lt;code&gt;try&lt;/code&gt; block in case you
                  encounter an unusual one.
                  &lt;p&gt;
                  NumberFormat and DecimalFormat are designed such that some controls
                  work for formatting and others work for parsing.  The following is
                  the detailed description for each these control methods,
                  &lt;p&gt;
                  setParseIntegerOnly : only affects parsing, e.g.
                  if true,  &quot;3456.78&quot; -&gt; 3456 (and leaves the parse position just after index 6)
                  if false, &quot;3456.78&quot; -&gt; 3456.78 (and leaves the parse position just after index 8)
                  This is independent of formatting.  If you want to not show a decimal point
                  where there might be no digits after the decimal point, use
                  setDecimalSeparatorAlwaysShown.
                  &lt;p&gt;
                  setDecimalSeparatorAlwaysShown : only affects formatting, and only where
                  there might be no digits after the decimal point, such as with a pattern
                  like &quot;#,##0.##&quot;, e.g.,
                  if true,  3456.00 -&gt; &quot;3,456.&quot;
                  if false, 3456.00 -&gt; &quot;3456&quot;
                  This is independent of parsing.  If you want parsing to stop at the decimal
                  point, use setParseIntegerOnly.
                  &lt;p&gt;
                  You can also use forms of the &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;format&lt;/code&gt;
                  methods with &lt;code&gt;ParsePosition&lt;/code&gt; and &lt;code&gt;FieldPosition&lt;/code&gt; to
                  allow you to:
                  &lt;ul&gt;
                  &lt;li&gt; progressively parse through pieces of a string
                  &lt;li&gt; align the decimal point and other areas
                  &lt;/ul&gt;
                  For example, you can align numbers in two ways:
                  &lt;ol&gt;
                  &lt;li&gt; If you are using a monospaced font with spacing for alignment,
                  you can pass the &lt;code&gt;FieldPosition&lt;/code&gt; in your format call, with
                  &lt;code&gt;field&lt;/code&gt; = &lt;code&gt;INTEGER_FIELD&lt;/code&gt;. On output,
                  &lt;code&gt;getEndIndex&lt;/code&gt; will be set to the offset between the
                  last character of the integer and the decimal. Add
                  (desiredSpaceCount - getEndIndex) spaces at the front of the string.
                  &lt;li&gt; If you are using proportional fonts,
                  instead of padding with spaces, measure the width
                  of the string in pixels from the start to &lt;code&gt;getEndIndex&lt;/code&gt;.
                  Then move the pen by
                  (desiredPixelWidth - widthToAlignmentPoint) before drawing the text.
                  It also works where there is no decimal, but possibly additional
                  characters at the end, e.g., with parentheses in negative
                  numbers: &quot;(12)&quot; for -12.
                  &lt;/ol&gt;
                  &lt;h4&gt;&lt;a name=&quot;synchronization&quot;&gt;Synchronization&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt;
                  Number formats are generally not synchronized.
                  It is recommended to create separate format instances for each thread.
                  If multiple threads access a format concurrently, it must be synchronized
                  externally.                
                <see>
                    DecimalFormat                    
                </see>
                <see>
                    ChoiceFormat                    
                </see>
                <author>
                    Mark Davis                    
                </author>
                <author>
                    Helena Shih                    
                </author>
            </javadoc>
            <declaration name="INTEGER_FIELD" type="int" line="184"/>
            <javadoc line="184">
                Field constant used to construct a FieldPosition object. Signifies that
                  the position of the integer part of a formatted number should be returned.                
                <see>
                    java.text.FieldPosition                    
                </see>
            </javadoc>
            <declaration name="FRACTION_FIELD" type="int" line="191"/>
            <javadoc line="191">
                Field constant used to construct a FieldPosition object. Signifies that
                  the position of the fraction part of a formatted number should be returned.                
                <see>
                    java.text.FieldPosition                    
                </see>
            </javadoc>
            <javadoc line="198">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="NumberFormat" type="constructor" line="202"/>
            <javadoc line="205">
                Formats a number and appends the resulting text to the given string
                  buffer.
                  The number can be of any subclass of {@link java.lang.Number}.
                  &lt;p&gt;
                  This implementation extracts the number&apos;s value using{@link java.lang.Number#longValue()} for all integral type values that
                  can be converted to &lt;code&gt;long&lt;/code&gt; without loss of information,
                  including &lt;code&gt;BigInteger&lt;/code&gt; values with a{@link java.math.BigInteger#bitLength() bit length} of less than 64,
                  and {@link java.lang.Number#doubleValue()} for all other types. It
                  then calls{@link #format(long,java.lang.StringBuffer,java.text.FieldPosition)}or {@link #format(double,java.lang.StringBuffer,java.text.FieldPosition)}.
                  This may result in loss of magnitude information and precision for
                  &lt;code&gt;BigInteger&lt;/code&gt; and &lt;code&gt;BigDecimal&lt;/code&gt; values.                
                <param>
                    number     the number to format                    
                </param>
                <param>
                    toAppendTo the <code>StringBuffer</code> to which the formatted
                      text is to be appended                    
                </param>
                <param>
                    pos        On input: an alignment field, if desired.
                      On output: the offsets of the alignment field.                    
                </param>
                <return>
                    the value passed in as <code>toAppendTo</code>                    
                </return>
                <exception>
                    IllegalArgumentException if <code>number</code> is
                      null or not an instance of <code>Number</code>.                    
                </exception>
                <exception>
                    NullPointerException if <code>toAppendTo</code> or
                      <code>pos</code> is null                    
                </exception>
                <exception>
                    ArithmeticException if rounding is needed with rounding
                      mode being set to RoundingMode.UNNECESSARY                    
                </exception>
                <see>
                    java.text.FieldPosition                    
                </see>
            </javadoc>
            <method name="format" type="StringBuffer" line="237">
                <params>
                    <param name="number" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <scope line="242"/>
                <scope line="244"/>
                <scope line="246"/>
            </method>
            <javadoc line="251">
                Parses text from a string to produce a &lt;code&gt;Number&lt;/code&gt;.
                  &lt;p&gt;
                  The method attempts to parse text starting at the index given by
                  &lt;code&gt;pos&lt;/code&gt;.
                  If parsing succeeds, then the index of &lt;code&gt;pos&lt;/code&gt; is updated
                  to the index after the last character used (parsing does not necessarily
                  use all characters up to the end of the string), and the parsed
                  number is returned. The updated &lt;code&gt;pos&lt;/code&gt; can be used to
                  indicate the starting point for the next call to this method.
                  If an error occurs, then the index of &lt;code&gt;pos&lt;/code&gt; is not
                  changed, the error index of &lt;code&gt;pos&lt;/code&gt; is set to the index of
                  the character where the error occurred, and null is returned.
                  &lt;p&gt;
                  See the {@link #parse(String,ParsePosition)} method for more information
                  on number parsing.                
                <param>
                    source A <code>String</code>, part of which should be parsed.                    
                </param>
                <param>
                    pos A <code>ParsePosition</code> object with index and error
                      index information as described above.                    
                </param>
                <return>
                    A <code>Number</code> parsed from the string. In case of
                      error, returns null.                    
                </return>
                <exception>
                    NullPointerException if <code>pos</code> is null.                    
                </exception>
            </javadoc>
            <method name="parseObject" type="Object" line="275">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
            </method>
            <javadoc line="279">
                Specialization of format.                
                <exception>
                    ArithmeticException if rounding is needed with rounding
                      mode being set to RoundingMode.UNNECESSARY                    
                </exception>
                <see>
                    java.text.Format#format                    
                </see>
            </javadoc>
            <method name="format" type="String" line="285">
                <params>
                    <param name="number" type="double"/>
                </params>
            </method>
            <javadoc line="290">
                Specialization of format.                
                <exception>
                    ArithmeticException if rounding is needed with rounding
                      mode being set to RoundingMode.UNNECESSARY                    
                </exception>
                <see>
                    java.text.Format#format                    
                </see>
            </javadoc>
            <method name="format" type="String" line="296">
                <params>
                    <param name="number" type="long"/>
                </params>
            </method>
            <method name="format" type="StringBuffer" line="301"/>
            <javadoc line="301">
                Specialization of format.                
                <exception>
                    ArithmeticException if rounding is needed with rounding
                      mode being set to RoundingMode.UNNECESSARY                    
                </exception>
                <see>
                    java.text.Format#format                    
                </see>
            </javadoc>
            <method name="format" type="StringBuffer" line="311"/>
            <javadoc line="311">
                Specialization of format.                
                <exception>
                    ArithmeticException if rounding is needed with rounding
                      mode being set to RoundingMode.UNNECESSARY                    
                </exception>
                <see>
                    java.text.Format#format                    
                </see>
            </javadoc>
            <method name="parse" type="Number" line="321"/>
            <javadoc line="321">
                Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,
                  Long.MAX_VALUE] and with no decimals), otherwise a Double.
                  If IntegerOnly is set, will stop at a decimal
                  point (or equivalent; e.g., for rational numbers &quot;1 2/3&quot;, will stop
                  after the 1).
                  Does not throw an exception; if no object can be parsed, index is
                  unchanged!                
                <see>
                    java.text.NumberFormat#isParseIntegerOnly                    
                </see>
                <see>
                    java.text.Format#parseObject                    
                </see>
            </javadoc>
            <javadoc line="334">
                Parses text from the beginning of the given string to produce a number.
                  The method may not use the entire text of the given string.
                  &lt;p&gt;
                  See the {@link #parse(String,ParsePosition)} method for more information
                  on number parsing.                
                <param>
                    source A <code>String</code> whose beginning should be parsed.                    
                </param>
                <return>
                    A <code>Number</code> parsed from the string.                    
                </return>
                <exception>
                    ParseException if the beginning of the specified string
                      cannot be parsed.                    
                </exception>
            </javadoc>
            <method name="parse" type="Number" line="346">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="parsePosition" type="ParsePosition" line="347"/>
                <declaration name="result" type="Number" line="348"/>
                <scope line="349"/>
            </method>
            <javadoc line="356">
                Returns true if this format will parse numbers as integers only.
                  For example in the English locale, with ParseIntegerOnly true, the
                  string &quot;1234.&quot; would be parsed as the integer value 1234 and parsing
                  would stop at the &quot;.&quot; character.  Of course, the exact format accepted
                  by the parse operation is locale dependant and determined by sub-classes
                  of NumberFormat.                
            </javadoc>
            <method name="isParseIntegerOnly" type="boolean" line="364"/>
            <javadoc line="368">
                Sets whether or not numbers should be parsed as integers only.                
                <see>
                    #isParseIntegerOnly                    
                </see>
            </javadoc>
            <method name="setParseIntegerOnly" type="void" line="372">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="378">
                Returns a general-purpose number format for the current default locale.
                  This is the same as calling{@link #getNumberInstance() getNumberInstance()}.                
            </javadoc>
            <method name="getInstance" type="NumberFormat" line="383"/>
            <javadoc line="387">
                Returns a general-purpose number format for the specified locale.
                  This is the same as calling{@link #getNumberInstance(java.util.Locale) getNumberInstance(inLocale)}.                
            </javadoc>
            <method name="getInstance" type="NumberFormat" line="392">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="396">
                Returns a general-purpose number format for the current default locale.                
            </javadoc>
            <method name="getNumberInstance" type="NumberFormat" line="399"/>
            <javadoc line="403">
                Returns a general-purpose number format for the specified locale.                
            </javadoc>
            <method name="getNumberInstance" type="NumberFormat" line="406">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="410">
                Returns an integer number format for the current default locale. The
                  returned number format is configured to round floating point numbers
                  to the nearest integer using half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,
                  and to parse only the integer part of an input string (see {@link #isParseIntegerOnly isParseIntegerOnly}).                
                <see>
                    #getRoundingMode()                    
                </see>
                <return>
                    a number format for integer values                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getIntegerInstance" type="NumberFormat" line="422"/>
            <javadoc line="426">
                Returns an integer number format for the specified locale. The
                  returned number format is configured to round floating point numbers
                  to the nearest integer using half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,
                  and to parse only the integer part of an input string (see {@link #isParseIntegerOnly isParseIntegerOnly}).                
                <see>
                    #getRoundingMode()                    
                </see>
                <return>
                    a number format for integer values                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getIntegerInstance" type="NumberFormat" line="438">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="442">
                Returns a currency format for the current default locale.                
            </javadoc>
            <method name="getCurrencyInstance" type="NumberFormat" line="445"/>
            <javadoc line="449">
                Returns a currency format for the specified locale.                
            </javadoc>
            <method name="getCurrencyInstance" type="NumberFormat" line="452">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="456">
                Returns a percentage format for the current default locale.                
            </javadoc>
            <method name="getPercentInstance" type="NumberFormat" line="459"/>
            <javadoc line="463">
                Returns a percentage format for the specified locale.                
            </javadoc>
            <method name="getPercentInstance" type="NumberFormat" line="466">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="470">
                Returns a scientific format for the current default locale.                
            </javadoc>
            <method name="getScientificInstance" type="NumberFormat" line="473">
                <comment line="473">
                                        
                </comment>
            </method>
            <javadoc line="477">
                Returns a scientific format for the specified locale.                
            </javadoc>
            <method name="getScientificInstance" type="NumberFormat" line="480">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
                <comment line="480">
                                        
                </comment>
            </method>
            <javadoc line="484">
                Returns an array of all locales for which the
                  &lt;code&gt;getInstance&lt;/code&gt; methods of this class can return
                  localized instances.
                  The returned array represents the union of locales supported by the Java
                  runtime and by installed{@link java.text.spi.NumberFormatProvider NumberFormatProvider} implementations.
                  It must contain at least a &lt;code&gt;Locale&lt;/code&gt; instance equal to{@link java.util.Locale#US Locale.US}.                
                <return>
                    An array of locales for which localized
                      <code>NumberFormat</code> instances are available.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="497">
                <declaration name="pool" type="LocaleServiceProviderPool" line="498"/>
            </method>
            <javadoc line="503">
                Overrides hashCode                
            </javadoc>
            <method name="hashCode" type="int" line="506">
                <comment line="508">
                    just enough fields for a reasonable distribution                    
                </comment>
            </method>
            <javadoc line="511">
                Overrides equals                
            </javadoc>
            <method name="equals" type="boolean" line="514">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="515"/>
                <scope line="518"/>
                <scope line="521"/>
                <declaration name="other" type="NumberFormat" line="524"/>
            </method>
            <javadoc line="533">
                Overrides Cloneable                
            </javadoc>
            <method name="clone" type="Object" line="536">
                <declaration name="other" type="NumberFormat" line="537"/>
            </method>
            <javadoc line="541">
                Returns true if grouping is used in this format. For example, in the
                  English locale, with grouping on, the number 1234567 might be formatted
                  as &quot;1,234,567&quot;. The grouping separator as well as the size of each group
                  is locale dependant and is determined by sub-classes of NumberFormat.                
                <see>
                    #setGroupingUsed                    
                </see>
            </javadoc>
            <method name="isGroupingUsed" type="boolean" line="548"/>
            <javadoc line="552">
                Set whether or not grouping will be used in this format.                
                <see>
                    #isGroupingUsed                    
                </see>
            </javadoc>
            <method name="setGroupingUsed" type="void" line="556">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
            <javadoc line="560">
                Returns the maximum number of digits allowed in the integer portion of a
                  number.                
                <see>
                    #setMaximumIntegerDigits                    
                </see>
            </javadoc>
            <method name="getMaximumIntegerDigits" type="int" line="565"/>
            <javadoc line="569">
                Sets the maximum number of digits allowed in the integer portion of a
                  number. maximumIntegerDigits must be &gt;= minimumIntegerDigits.  If the
                  new value for maximumIntegerDigits is less than the current value
                  of minimumIntegerDigits, then minimumIntegerDigits will also be set to
                  the new value.                
                <param>
                    newValue the maximum number of integer digits to be shown; if
                      less than zero, then zero is used. The concrete subclass may enforce an
                      upper limit to this value appropriate to the numeric type being formatted.                    
                </param>
                <see>
                    #getMaximumIntegerDigits                    
                </see>
            </javadoc>
            <method name="setMaximumIntegerDigits" type="void" line="580">
                <params>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="582"/>
            </method>
            <javadoc line="587">
                Returns the minimum number of digits allowed in the integer portion of a
                  number.                
                <see>
                    #setMinimumIntegerDigits                    
                </see>
            </javadoc>
            <method name="getMinimumIntegerDigits" type="int" line="592"/>
            <javadoc line="596">
                Sets the minimum number of digits allowed in the integer portion of a
                  number. minimumIntegerDigits must be &lt;= maximumIntegerDigits.  If the
                  new value for minimumIntegerDigits exceeds the current value
                  of maximumIntegerDigits, then maximumIntegerDigits will also be set to
                  the new value                
                <param>
                    newValue the minimum number of integer digits to be shown; if
                      less than zero, then zero is used. The concrete subclass may enforce an
                      upper limit to this value appropriate to the numeric type being formatted.                    
                </param>
                <see>
                    #getMinimumIntegerDigits                    
                </see>
            </javadoc>
            <method name="setMinimumIntegerDigits" type="void" line="607">
                <params>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="609"/>
            </method>
            <javadoc line="614">
                Returns the maximum number of digits allowed in the fraction portion of a
                  number.                
                <see>
                    #setMaximumFractionDigits                    
                </see>
            </javadoc>
            <method name="getMaximumFractionDigits" type="int" line="619"/>
            <javadoc line="623">
                Sets the maximum number of digits allowed in the fraction portion of a
                  number. maximumFractionDigits must be &gt;= minimumFractionDigits.  If the
                  new value for maximumFractionDigits is less than the current value
                  of minimumFractionDigits, then minimumFractionDigits will also be set to
                  the new value.                
                <param>
                    newValue the maximum number of fraction digits to be shown; if
                      less than zero, then zero is used. The concrete subclass may enforce an
                      upper limit to this value appropriate to the numeric type being formatted.                    
                </param>
                <see>
                    #getMaximumFractionDigits                    
                </see>
            </javadoc>
            <method name="setMaximumFractionDigits" type="void" line="634">
                <params>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="636"/>
            </method>
            <javadoc line="641">
                Returns the minimum number of digits allowed in the fraction portion of a
                  number.                
                <see>
                    #setMinimumFractionDigits                    
                </see>
            </javadoc>
            <method name="getMinimumFractionDigits" type="int" line="646"/>
            <javadoc line="650">
                Sets the minimum number of digits allowed in the fraction portion of a
                  number. minimumFractionDigits must be &lt;= maximumFractionDigits.  If the
                  new value for minimumFractionDigits exceeds the current value
                  of maximumFractionDigits, then maximumIntegerDigits will also be set to
                  the new value                
                <param>
                    newValue the minimum number of fraction digits to be shown; if
                      less than zero, then zero is used. The concrete subclass may enforce an
                      upper limit to this value appropriate to the numeric type being formatted.                    
                </param>
                <see>
                    #getMinimumFractionDigits                    
                </see>
            </javadoc>
            <method name="setMinimumFractionDigits" type="void" line="661">
                <params>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="663"/>
            </method>
            <javadoc line="668">
                Gets the currency used by this number format when formatting
                  currency values. The initial value is derived in a locale dependent
                  way. The returned value may be null if no valid
                  currency could be determined and no currency has been set using{@link #setCurrency(java.util.Currency) setCurrency}.
                  &lt;p&gt;
                  The default implementation throws
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <return>
                    the currency used by this number format, or <code>null</code>                    
                </return>
                <exception>
                    UnsupportedOperationException if the number format class
                      doesn't implement currency formatting                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCurrency" type="Currency" line="683"/>
            <javadoc line="687">
                Sets the currency used by this number format when formatting
                  currency values. This does not update the minimum or maximum
                  number of fraction digits used by the number format.
                  &lt;p&gt;
                  The default implementation throws
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    currency the new currency to be used by this number format                    
                </param>
                <exception>
                    UnsupportedOperationException if the number format class
                      doesn't implement currency formatting                    
                </exception>
                <exception>
                    NullPointerException if <code>currency</code> is null                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setCurrency" type="void" line="701">
                <params>
                    <param name="currency" type="Currency"/>
                </params>
            </method>
            <javadoc line="705">
                Gets the {@link java.math.RoundingMode} used in this NumberFormat.
                  The default implementation of this method in NumberFormat
                  always throws {@link java.lang.UnsupportedOperationException}.
                  Subclasses which handle different rounding modes should override
                  this method.                
                <exception>
                    UnsupportedOperationException The default implementation
                      always throws this exception                    
                </exception>
                <return>
                    The <code>RoundingMode</code> used for this NumberFormat.                    
                </return>
                <see>
                    #setRoundingMode(RoundingMode)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getRoundingMode" type="RoundingMode" line="718"/>
            <javadoc line="722">
                Sets the {@link java.math.RoundingMode} used in this NumberFormat.
                  The default implementation of this method in NumberFormat always
                  throws {@link java.lang.UnsupportedOperationException}.
                  Subclasses which handle different rounding modes should override
                  this method.                
                <exception>
                    UnsupportedOperationException The default implementation
                      always throws this exception                    
                </exception>
                <exception>
                    NullPointerException if <code>roundingMode</code> is null                    
                </exception>
                <param>
                    roundingMode The <code>RoundingMode</code> to be used                    
                </param>
                <see>
                    #getRoundingMode()                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRoundingMode" type="void" line="736">
                <params>
                    <param name="roundingMode" type="RoundingMode"/>
                </params>
            </method>
            <method name="getInstance" type="NumberFormat" line="743">
                <params>
                    <param name="desiredLocale" type="Locale"/>
                    <param name="choice" type="int"/>
                </params>
                <comment line="744">
                    Check whether a provider can provide an implementation that&apos;s closer                    
                </comment>
                <comment line="745">
                    to the requested locale than what the Java runtime itself can provide.                    
                </comment>
                <comment line="758">
                                        
                </comment>
                <comment line="760">
                                        
                </comment>
                <comment line="763">
                                        
                </comment>
                <declaration name="pool" type="LocaleServiceProviderPool" line="746"/>
                <scope line="748">
                    <declaration name="providersInstance" type="NumberFormat" line="749"/>
                    <scope line="753"/>
                </scope>
                <declaration name="numberPatterns" type="String[]" line="759"/>
                <scope line="760">
                    <declaration name="resource" type="ResourceBundle" line="761"/>
                </scope>
                <declaration name="symbols" type="DecimalFormatSymbols" line="767"/>
                <declaration name="entry" type="int" line="768"/>
                <declaration name="format" type="DecimalFormat" line="769"/>
                <scope line="771"/>
                <scope line="775"/>
            </method>
            <javadoc line="782">
                First, read in the default serializable data.
                  Then, if &lt;code&gt;serialVersionOnStream&lt;/code&gt; is less than 1, indicating that
                  the stream was written by JDK 1.1,
                  set the &lt;code&gt;int&lt;/code&gt; fields such as &lt;code&gt;maximumIntegerDigits&lt;/code&gt;
                  to be equal to the &lt;code&gt;byte&lt;/code&gt; fields such as &lt;code&gt;maxIntegerDigits&lt;/code&gt;,
                  since the &lt;code&gt;int&lt;/code&gt; fields were not present in JDK 1.1.
                  Finally, set serialVersionOnStream back to the maximum allowed value so that
                  default serialization will work properly if this object is streamed out again.
                  &lt;p&gt;If &lt;code&gt;minimumIntegerDigits&lt;/code&gt; is greater than
                  &lt;code&gt;maximumIntegerDigits&lt;/code&gt; or &lt;code&gt;minimumFractionDigits&lt;/code&gt;
                  is greater than &lt;code&gt;maximumFractionDigits&lt;/code&gt;, then the stream data
                  is invalid and this method throws an &lt;code&gt;InvalidObjectException&lt;/code&gt;.
                  In addition, if any of these values is negative, then this method throws
                  an &lt;code&gt;InvalidObjectException&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="804">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <comment line="807">
                    Didn&apos;t have additional int fields, reassign to use them.                    
                </comment>
                <scope line="806"/>
                <scope line="815"/>
            </method>
            <javadoc line="821">
                Write out the default serializable data, after first setting
                  the &lt;code&gt;byte&lt;/code&gt; fields such as &lt;code&gt;maxIntegerDigits&lt;/code&gt; to be
                  equal to the &lt;code&gt;int&lt;/code&gt; fields such as &lt;code&gt;maximumIntegerDigits&lt;/code&gt;
                  (or to &lt;code&gt;Byte.MAX_VALUE&lt;/code&gt;, whichever is smaller), for compatibility
                  with the JDK 1.1 version of the stream format.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="832">
                <params>
                    <param name="stream" type="ObjectOutputStream"/>
                </params>
            </method>
            <declaration name="cachedLocaleData" type="Hashtable" line="844"/>
            <javadoc line="844">
                Cache to hold the NumberPatterns of a Locale.                
            </javadoc>
            <declaration name="NUMBERSTYLE" type="int" line="850"/>
            <declaration name="CURRENCYSTYLE" type="int" line="851"/>
            <declaration name="PERCENTSTYLE" type="int" line="852"/>
            <declaration name="SCIENTIFICSTYLE" type="int" line="853"/>
            <declaration name="INTEGERSTYLE" type="int" line="854"/>
            <declaration name="groupingUsed" type="boolean" line="856"/>
            <javadoc line="856">
                True if the grouping (i.e. thousands) separator is used when
                  formatting and parsing numbers.                
                <serial>
                                        
                </serial>
                <see>
                    #isGroupingUsed                    
                </see>
            </javadoc>
            <declaration name="maxIntegerDigits" type="byte" line="865"/>
            <javadoc line="865">
                The maximum number of digits allowed in the integer portion of a
                  number.  &lt;code&gt;maxIntegerDigits&lt;/code&gt; must be greater than or equal to
                  &lt;code&gt;minIntegerDigits&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; This field exists only for serialization
                  compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
                  &lt;code&gt;int&lt;/code&gt; field &lt;code&gt;maximumIntegerDigits&lt;/code&gt; is used instead.
                  When writing to a stream, &lt;code&gt;maxIntegerDigits&lt;/code&gt; is set to
                  &lt;code&gt;maximumIntegerDigits&lt;/code&gt; or &lt;code&gt;Byte.MAX_VALUE&lt;/code&gt;,
                  whichever is smaller.  When reading from a stream, this field is used
                  only if &lt;code&gt;serialVersionOnStream&lt;/code&gt; is less than 1.                
                <serial>
                                        
                </serial>
                <see>
                    #getMaximumIntegerDigits                    
                </see>
            </javadoc>
            <declaration name="minIntegerDigits" type="byte" line="883"/>
            <javadoc line="883">
                The minimum number of digits allowed in the integer portion of a
                  number.  &lt;code&gt;minimumIntegerDigits&lt;/code&gt; must be less than or equal to
                  &lt;code&gt;maximumIntegerDigits&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; This field exists only for serialization
                  compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
                  &lt;code&gt;int&lt;/code&gt; field &lt;code&gt;minimumIntegerDigits&lt;/code&gt; is used instead.
                  When writing to a stream, &lt;code&gt;minIntegerDigits&lt;/code&gt; is set to
                  &lt;code&gt;minimumIntegerDigits&lt;/code&gt; or &lt;code&gt;Byte.MAX_VALUE&lt;/code&gt;,
                  whichever is smaller.  When reading from a stream, this field is used
                  only if &lt;code&gt;serialVersionOnStream&lt;/code&gt; is less than 1.                
                <serial>
                                        
                </serial>
                <see>
                    #getMinimumIntegerDigits                    
                </see>
            </javadoc>
            <declaration name="maxFractionDigits" type="byte" line="901"/>
            <javadoc line="901">
                The maximum number of digits allowed in the fractional portion of a
                  number.  &lt;code&gt;maximumFractionDigits&lt;/code&gt; must be greater than or equal to
                  &lt;code&gt;minimumFractionDigits&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; This field exists only for serialization
                  compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
                  &lt;code&gt;int&lt;/code&gt; field &lt;code&gt;maximumFractionDigits&lt;/code&gt; is used instead.
                  When writing to a stream, &lt;code&gt;maxFractionDigits&lt;/code&gt; is set to
                  &lt;code&gt;maximumFractionDigits&lt;/code&gt; or &lt;code&gt;Byte.MAX_VALUE&lt;/code&gt;,
                  whichever is smaller.  When reading from a stream, this field is used
                  only if &lt;code&gt;serialVersionOnStream&lt;/code&gt; is less than 1.                
                <serial>
                                        
                </serial>
                <see>
                    #getMaximumFractionDigits                    
                </see>
            </javadoc>
            <declaration name="minFractionDigits" type="byte" line="919"/>
            <javadoc line="919">
                The minimum number of digits allowed in the fractional portion of a
                  number.  &lt;code&gt;minimumFractionDigits&lt;/code&gt; must be less than or equal to
                  &lt;code&gt;maximumFractionDigits&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; This field exists only for serialization
                  compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
                  &lt;code&gt;int&lt;/code&gt; field &lt;code&gt;minimumFractionDigits&lt;/code&gt; is used instead.
                  When writing to a stream, &lt;code&gt;minFractionDigits&lt;/code&gt; is set to
                  &lt;code&gt;minimumFractionDigits&lt;/code&gt; or &lt;code&gt;Byte.MAX_VALUE&lt;/code&gt;,
                  whichever is smaller.  When reading from a stream, this field is used
                  only if &lt;code&gt;serialVersionOnStream&lt;/code&gt; is less than 1.                
                <serial>
                                        
                </serial>
                <see>
                    #getMinimumFractionDigits                    
                </see>
            </javadoc>
            <declaration name="parseIntegerOnly" type="boolean" line="937"/>
            <javadoc line="937">
                True if this format will parse numbers as integers only.                
                <serial>
                                        
                </serial>
                <see>
                    #isParseIntegerOnly                    
                </see>
            </javadoc>
            <declaration name="maximumIntegerDigits" type="int" line="947"/>
            <javadoc line="947">
                The maximum number of digits allowed in the integer portion of a
                  number.  &lt;code&gt;maximumIntegerDigits&lt;/code&gt; must be greater than or equal to
                  &lt;code&gt;minimumIntegerDigits&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
                <see>
                    #getMaximumIntegerDigits                    
                </see>
            </javadoc>
            <declaration name="minimumIntegerDigits" type="int" line="958"/>
            <javadoc line="958">
                The minimum number of digits allowed in the integer portion of a
                  number.  &lt;code&gt;minimumIntegerDigits&lt;/code&gt; must be less than or equal to
                  &lt;code&gt;maximumIntegerDigits&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
                <see>
                    #getMinimumIntegerDigits                    
                </see>
            </javadoc>
            <declaration name="maximumFractionDigits" type="int" line="969"/>
            <javadoc line="969">
                The maximum number of digits allowed in the fractional portion of a
                  number.  &lt;code&gt;maximumFractionDigits&lt;/code&gt; must be greater than or equal to
                  &lt;code&gt;minimumFractionDigits&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
                <see>
                    #getMaximumFractionDigits                    
                </see>
            </javadoc>
            <declaration name="minimumFractionDigits" type="int" line="980"/>
            <javadoc line="980">
                The minimum number of digits allowed in the fractional portion of a
                  number.  &lt;code&gt;minimumFractionDigits&lt;/code&gt; must be less than or equal to
                  &lt;code&gt;maximumFractionDigits&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
                <see>
                    #getMinimumFractionDigits                    
                </see>
            </javadoc>
            <declaration name="currentSerialVersion" type="int" line="991"/>
            <declaration name="serialVersionOnStream" type="int" line="993"/>
            <javadoc line="993">
                Describes the version of &lt;code&gt;NumberFormat&lt;/code&gt; present on the stream.
                  Possible values are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;b&gt;0&lt;/b&gt; (or uninitialized): the JDK 1.1 version of the stream format.
                  In this version, the &lt;code&gt;int&lt;/code&gt; fields such as
                  &lt;code&gt;maximumIntegerDigits&lt;/code&gt; were not present, and the &lt;code&gt;byte&lt;/code&gt;
                  fields such as &lt;code&gt;maxIntegerDigits&lt;/code&gt; are used instead.
                  &lt;li&gt;&lt;b&gt;1&lt;/b&gt;: the 1.2 version of the stream format.  The values of the
                  &lt;code&gt;byte&lt;/code&gt; fields such as &lt;code&gt;maxIntegerDigits&lt;/code&gt; are ignored,
                  and the &lt;code&gt;int&lt;/code&gt; fields such as &lt;code&gt;maximumIntegerDigits&lt;/code&gt;
                  are used instead.
                  &lt;/ul&gt;
                  When streaming out a &lt;code&gt;NumberFormat&lt;/code&gt;, the most recent format
                  (corresponding to the highest allowable &lt;code&gt;serialVersionOnStream&lt;/code&gt;)
                  is always written.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="1018"/>
            <class name="Field" line="1024">
                <extends class="Format.Field"/>
                <comment line="474">
                                        
                </comment>
                <comment line="481">
                                        
                </comment>
                <comment line="1035">
                    Proclaim serial compatibility with 1.4 FCS                    
                </comment>
                <comment line="1038">
                    table of all instances in this class, used by readResolve                    
                </comment>
                <javadoc line="1024">
                    Defines constants that are used as attribute keys in the
                      &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; returned
                      from &lt;code&gt;NumberFormat.formatToCharacterIterator&lt;/code&gt; and as
                      field identifiers in &lt;code&gt;FieldPosition&lt;/code&gt;.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1035"/>
                <declaration name="instanceMap" type="Map" line="1038"/>
                <javadoc line="1040">
                    Creates a Field instance with the specified
                      name.                    
                    <param>
                        name Name of the attribute                        
                    </param>
                </javadoc>
                <method name="Field" type="constructor" line="1046">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="1048"/>
                </method>
                <javadoc line="1053">
                    Resolves instances being deserialized to the predefined constants.                    
                    <throws>
                        InvalidObjectException if the constant could not be resolved.                        
                    </throws>
                    <return>
                        resolved NumberFormat.Field constant                        
                    </return>
                </javadoc>
                <method name="readResolve" type="Object" line="1059">
                    <scope line="1060"/>
                    <declaration name="instance" type="Object" line="1064"/>
                    <scope line="1065"/>
                    <scope line="1067"/>
                </method>
                <declaration name="INTEGER" type="Field" line="1072"/>
                <javadoc line="1072">
                    Constant identifying the integer field.                    
                </javadoc>
                <declaration name="FRACTION" type="Field" line="1077"/>
                <javadoc line="1077">
                    Constant identifying the fraction field.                    
                </javadoc>
                <declaration name="EXPONENT" type="Field" line="1082"/>
                <javadoc line="1082">
                    Constant identifying the exponent field.                    
                </javadoc>
                <declaration name="DECIMAL_SEPARATOR" type="Field" line="1087"/>
                <javadoc line="1087">
                    Constant identifying the decimal separator field.                    
                </javadoc>
                <declaration name="SIGN" type="Field" line="1093"/>
                <javadoc line="1093">
                    Constant identifying the sign field.                    
                </javadoc>
                <declaration name="GROUPING_SEPARATOR" type="Field" line="1098"/>
                <javadoc line="1098">
                    Constant identifying the grouping separator field.                    
                </javadoc>
                <declaration name="EXPONENT_SYMBOL" type="Field" line="1104"/>
                <javadoc line="1104">
                    Constant identifying the exponent symbol field.                    
                </javadoc>
                <declaration name="PERCENT" type="Field" line="1110"/>
                <javadoc line="1110">
                    Constant identifying the percent field.                    
                </javadoc>
                <declaration name="PERMILLE" type="Field" line="1115"/>
                <javadoc line="1115">
                    Constant identifying the permille field.                    
                </javadoc>
                <declaration name="CURRENCY" type="Field" line="1120"/>
                <javadoc line="1120">
                    Constant identifying the currency field.                    
                </javadoc>
                <declaration name="EXPONENT_SIGN" type="Field" line="1125"/>
                <javadoc line="1125">
                    Constant identifying the exponent sign field.                    
                </javadoc>
            </class>
            <class name="NumberFormatGetter" line="1131">
                <comment line="474">
                                        
                </comment>
                <comment line="481">
                                        
                </comment>
                <comment line="1035">
                    Proclaim serial compatibility with 1.4 FCS                    
                </comment>
                <comment line="1038">
                    table of all instances in this class, used by readResolve                    
                </comment>
                <implements interface="LocaleServiceProviderPool.LocalizedObjectGetter">
                    <type_params>
                        <type_param name="NumberFormatProvider"/>
                        <type_param name="NumberFormat"/>
                    </type_params>
                </implements>
                <javadoc line="1131">
                    Obtains a NumberFormat instance from a NumberFormatProvider implementation.                    
                </javadoc>
                <declaration name="INSTANCE" type="NumberFormatGetter" line="1137"/>
                <method name="getObject" type="NumberFormat" line="1142">
                    <params>
                        <param name="numberFormatProvider" type="NumberFormatProvider"/>
                        <param name="locale" type="Locale"/>
                        <param name="key" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                    <declaration name="choice" type="int" line="1144"/>
                </method>
            </class>
        </class>
    </source>