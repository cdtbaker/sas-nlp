<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <interface name="AttributedCharacterIterator">
            <implements interface="CharacterIterator"/>
            <javadoc line="34">
                An {@code AttributedCharacterIterator} allows iteration through both text and
                  related attribute information.
                  &lt;p&gt;
                  An attribute is a key/value pair, identified by the key.  No two
                  attributes on a given character can have the same key.
                  &lt;p&gt;The values for an attribute are immutable, or must not be mutated
                  by clients or storage.  They are always passed by reference, and not
                  cloned.
                  &lt;p&gt;A &lt;em&gt;run with respect to an attribute&lt;/em&gt; is a maximum text range for
                  which:
                  &lt;ul&gt;
                  &lt;li&gt;the attribute is undefined or {@code null} for the entire range, or
                  &lt;li&gt;the attribute value is defined and has the same non-{@code null} value for the
                  entire range.
                  &lt;/ul&gt;
                  &lt;p&gt;A &lt;em&gt;run with respect to a set of attributes&lt;/em&gt; is a maximum text range for
                  which this condition is met for each member attribute.
                  &lt;p&gt;When getting a run with no explicit attributes specified (i.e.,
                  calling {@link #getRunStart()} and {@link #getRunLimit()}), any
                  contiguous text segments having the same attributes (the same set
                  of attribute/value pairs) are treated as separate runs if the
                  attributes have been given to those text segments separately.
                  &lt;p&gt;The returned indexes are limited to the range of the iterator.
                  &lt;p&gt;The returned attribute information is limited to runs that contain
                  the current character.
                  &lt;p&gt;
                  Attribute keys are instances of {@link AttributedCharacterIterator.Attribute} and its
                  subclasses, such as {@link java.awt.font.TextAttribute}.                
                <see>
                    AttributedCharacterIterator.Attribute                    
                </see>
                <see>
                    java.awt.font.TextAttribute                    
                </see>
                <see>
                    AttributedString                    
                </see>
                <see>
                    Annotation                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <class name="Attribute" line="81">
                <comment line="100">
                    table of all instances in this class, used by readResolve                    
                </comment>
                <comment line="188">
                    make sure the serial version doesn&apos;t change between compiler versions                    
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="81">
                    Defines attribute keys that are used to identify text attributes. These
                      keys are used in {@code AttributedCharacterIterator} and {@code AttributedString}.                    
                    <see>
                        AttributedCharacterIterator                        
                    </see>
                    <see>
                        AttributedString                        
                    </see>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="name" type="String" line="91"/>
                <javadoc line="91">
                    The name of this {@code Attribute}. The name is used primarily by {@code readResolve}to look up the corresponding predefined instance when deserializing
                      an instance.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="instanceMap" type="Map" line="100"/>
                <javadoc line="102">
                    Constructs an {@code Attribute} with the given name.                    
                </javadoc>
                <method name="Attribute" type="constructor" line="105">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="107"/>
                </method>
                <javadoc line="112">
                    Compares two objects for equality. This version only returns true
                      for &lt;code&gt;x.equals(y)&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer
                      to the same object, and guarantees this for all subclasses.                    
                </javadoc>
                <method name="equals" type="boolean" line="117">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <javadoc line="121">
                    Returns a hash code value for the object. This version is identical to
                      the one in {@code Object}, but is also final.                    
                </javadoc>
                <method name="hashCode" type="int" line="125"/>
                <javadoc line="129">
                    Returns a string representation of the object. This version returns the
                      concatenation of class name, {@code &quot;(&quot;}, a name identifying the attribute
                      and {@code &quot;)&quot;}.                    
                </javadoc>
                <method name="toString" type="String" line="134"/>
                <javadoc line="138">
                    Returns the name of the attribute.                    
                </javadoc>
                <method name="getName" type="String" line="141"/>
                <javadoc line="145">
                    Resolves instances being deserialized to the predefined constants.                    
                </javadoc>
                <method name="readResolve" type="Object" line="148">
                    <scope line="149"/>
                    <declaration name="instance" type="Attribute" line="153"/>
                    <scope line="154"/>
                    <scope line="156"/>
                </method>
                <declaration name="LANGUAGE" type="Attribute" line="161"/>
                <javadoc line="161">
                    Attribute key for the language of some text.
                      &lt;p&gt; Values are instances of {@link java.util.Locale Locale}.                    
                    <see>
                        java.util.Locale                        
                    </see>
                </javadoc>
                <declaration name="READING" type="Attribute" line="168"/>
                <javadoc line="168">
                    Attribute key for the reading of some text. In languages where the written form
                      and the pronunciation of a word are only loosely related (such as Japanese),
                      it is often necessary to store the reading (pronunciation) along with the
                      written form.
                      &lt;p&gt;Values are instances of {@link Annotation} holding instances of {@link String}.                    
                    <see>
                        Annotation                        
                    </see>
                    <see>
                        java.lang.String                        
                    </see>
                </javadoc>
                <declaration name="INPUT_METHOD_SEGMENT" type="Attribute" line="179"/>
                <javadoc line="179">
                    Attribute key for input method segments. Input methods often break
                      up text into segments, which usually correspond to words.
                      &lt;p&gt;Values are instances of {@link Annotation} holding a {@code null} reference.                    
                    <see>
                        Annotation                        
                    </see>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="188"/>
            </class>
            <method name="getRunStart" type="int" line="192"/>
            <javadoc line="192">
                Returns the index of the first character of the run
                  with respect to all attributes containing the current character.
                  &lt;p&gt;Any contiguous text segments having the same attributes (the
                  same set of attribute/value pairs) are treated as separate runs
                  if the attributes have been given to those text segments separately.                
            </javadoc>
            <method name="getRunStart" type="int" line="202"/>
            <javadoc line="202">
                Returns the index of the first character of the run
                  with respect to the given {@code attribute} containing the current character.                
            </javadoc>
            <method name="getRunStart" type="int" line="208"/>
            <javadoc line="208">
                Returns the index of the first character of the run
                  with respect to the given {@code attributes} containing the current character.                
            </javadoc>
            <method name="getRunLimit" type="int" line="214"/>
            <javadoc line="214">
                Returns the index of the first character following the run
                  with respect to all attributes containing the current character.
                  &lt;p&gt;Any contiguous text segments having the same attributes (the
                  same set of attribute/value pairs) are treated as separate runs
                  if the attributes have been given to those text segments separately.                
            </javadoc>
            <method name="getRunLimit" type="int" line="224"/>
            <javadoc line="224">
                Returns the index of the first character following the run
                  with respect to the given {@code attribute} containing the current character.                
            </javadoc>
            <method name="getRunLimit" type="int" line="230"/>
            <javadoc line="230">
                Returns the index of the first character following the run
                  with respect to the given {@code attributes} containing the current character.                
            </javadoc>
            <method name="getAttributes" type="Map<Attribute,Object>" line="236"/>
            <javadoc line="236">
                Returns a map with the attributes defined on the current
                  character.                
            </javadoc>
            <method name="getAttribute" type="Object" line="242"/>
            <javadoc line="242">
                Returns the value of the named {@code attribute} for the current character.
                  Returns {@code null} if the {@code attribute} is not defined.                
            </javadoc>
            <method name="getAllAttributeKeys" type="Set<Attribute>" line="248"/>
            <javadoc line="248">
                Returns the keys of all attributes defined on the
                  iterator&apos;s text range. The set is empty if no
                  attributes are defined.                
            </javadoc>
        </interface>
    </source>