<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text.spi">
        <import package="java.text.NumberFormat"/>
        <import package="java.util.Locale"/>
        <import package="java.util.spi.LocaleServiceProvider"/>
        <class name="NumberFormatProvider" line="5">
            <extends class="LocaleServiceProvider"/>
            <javadoc line="5">
                An abstract class for service providers that
                  provide concrete implementations of the{@link java.text.NumberFormat NumberFormat} class.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="11">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="NumberFormatProvider" type="constructor" line="15"/>
            <method name="getCurrencyInstance" type="NumberFormat" line="17"/>
            <javadoc line="17">
                Returns a new &lt;code&gt;NumberFormat&lt;/code&gt; instance which formats
                  monetary values for the specified locale.                
                <param>
                    locale the desired locale.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;locale&lt;/code&gt; isn&apos;t
                      one of the locales returned from{@link java.util.spi.LocaleServiceProvider#getAvailableLocales()getAvailableLocales()}.                    
                </exception>
                <return>
                    a currency formatter                    
                </return>
                <see>
                    java.text.NumberFormat#getCurrencyInstance(java.util.Locale)                    
                </see>
            </javadoc>
            <method name="getIntegerInstance" type="NumberFormat" line="28"/>
            <javadoc line="28">
                Returns a new &lt;code&gt;NumberFormat&lt;/code&gt; instance which formats
                  integer values for the specified locale.
                  The returned number format is configured to
                  round floating point numbers to the nearest integer using
                  half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN HALF_EVEN})
                  for formatting, and to parse only the integer part of
                  an input string (see {@link java.text.NumberFormat#isParseIntegerOnly isParseIntegerOnly}).                
                <param>
                    locale the desired locale                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;locale&lt;/code&gt; isn&apos;t
                      one of the locales returned from{@link java.util.spi.LocaleServiceProvider#getAvailableLocales()getAvailableLocales()}.                    
                </exception>
                <return>
                    a number format for integer values                    
                </return>
                <see>
                    java.text.NumberFormat#getIntegerInstance(java.util.Locale)                    
                </see>
            </javadoc>
            <method name="getNumberInstance" type="NumberFormat" line="44"/>
            <javadoc line="44">
                Returns a new general-purpose &lt;code&gt;NumberFormat&lt;/code&gt; instance for
                  the specified locale.                
                <param>
                    locale the desired locale                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;locale&lt;/code&gt; isn&apos;t
                      one of the locales returned from{@link java.util.spi.LocaleServiceProvider#getAvailableLocales()getAvailableLocales()}.                    
                </exception>
                <return>
                    a general-purpose number formatter                    
                </return>
                <see>
                    java.text.NumberFormat#getNumberInstance(java.util.Locale)                    
                </see>
            </javadoc>
            <method name="getPercentInstance" type="NumberFormat" line="55"/>
            <javadoc line="55">
                Returns a new &lt;code&gt;NumberFormat&lt;/code&gt; instance which formats
                  percentage values for the specified locale.                
                <param>
                    locale the desired locale                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;locale&lt;/code&gt; isn&apos;t
                      one of the locales returned from{@link java.util.spi.LocaleServiceProvider#getAvailableLocales()getAvailableLocales()}.                    
                </exception>
                <return>
                    a percent formatter                    
                </return>
                <see>
                    java.text.NumberFormat#getPercentInstance(java.util.Locale)                    
                </see>
            </javadoc>
        </class>
    </source>