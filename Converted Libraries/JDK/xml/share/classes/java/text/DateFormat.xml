<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.io.InvalidObjectException"/>
        <import package="java.text.spi.DateFormatProvider"/>
        <import package="java.util.Calendar"/>
        <import package="java.util.Date"/>
        <import package="java.util.GregorianCalendar"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.TimeZone"/>
        <import package="java.util.spi.LocaleServiceProvider"/>
        <import package="sun.util.LocaleServiceProviderPool"/>
        <class name="DateFormat" line="15">
            <extends class="Format"/>
            <javadoc line="15">
                {@code DateFormat} is an abstract class for date/time formatting subclasses which
                  formats and parses dates or time in a language-independent manner.
                  The date/time formatting subclass, such as {@link SimpleDateFormat}, allows for
                  formatting (i.e., date -&gt; text), parsing (text -&gt; date), and
                  normalization.  The date is represented as a &lt;code&gt;Date&lt;/code&gt; object or
                  as the milliseconds since January 1, 1970, 00:00:00 GMT.
                  &lt;p&gt;{@code DateFormat} provides many class methods for obtaining default date/time
                  formatters based on the default or a given locale and a number of formatting
                  styles. The formatting styles include {@link #FULL}, {@link #LONG}, {@link #MEDIUM}, and {@link #SHORT}. More
                  detail and examples of using these styles are provided in the method
                  descriptions.
                  &lt;p&gt;{@code DateFormat} helps you to format and parse dates for any locale.
                  Your code can be completely independent of the locale conventions for
                  months, days of the week, or even the calendar format: lunar vs. solar.
                  &lt;p&gt;To format a date for the current Locale, use one of the
                  static factory methods:
                  &lt;pre&gt;
                  myString = DateFormat.getDateInstance().format(myDate);
                  &lt;/pre&gt;
                  &lt;p&gt;If you are formatting multiple dates, it is
                  more efficient to get the format and use it multiple times so that
                  the system doesn&apos;t have to fetch the information about the local
                  language and country conventions multiple times.
                  &lt;pre&gt;
                  DateFormat df = DateFormat.getDateInstance();
                  for (int i = 0; i &lt; myDate.length; ++i) {
                  output.println(df.format(myDate[i]) + &quot;; &quot;);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;To format a date for a different Locale, specify it in the
                  call to {@link #getDateInstance(int,Locale) getDateInstance()}.
                  &lt;pre&gt;
                  DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);
                  &lt;/pre&gt;
                  &lt;p&gt;You can use a DateFormat to parse also.
                  &lt;pre&gt;
                  myDate = df.parse(myString);
                  &lt;/pre&gt;
                  &lt;p&gt;Use {@code getDateInstance} to get the normal date format for that country.
                  There are other static factory methods available.
                  Use {@code getTimeInstance} to get the time format for that country.
                  Use {@code getDateTimeInstance} to get a date and time format. You can pass in
                  different options to these factory methods to control the length of the
                  result; from {@link #SHORT} to {@link #MEDIUM} to {@link #LONG} to {@link #FULL}. The exact result depends
                  on the locale, but generally:
                  &lt;ul&gt;&lt;li&gt;{@link #SHORT} is completely numeric, such as {@code 12.13.52} or {@code 3:30pm}&lt;li&gt;{@link #MEDIUM} is longer, such as {@code Jan 12, 1952}&lt;li&gt;{@link #LONG} is longer, such as {@code January 12, 1952} or {@code 3:30:32pm}&lt;li&gt;{@link #FULL} is pretty completely specified, such as{@code Tuesday, April 12, 1952 AD or 3:30:42pm PST}.
                  &lt;/ul&gt;
                  &lt;p&gt;You can also set the time zone on the format if you wish.
                  If you want even more control over the format or parsing,
                  (or want to give your users more control),
                  you can try casting the {@code DateFormat} you get from the factory methods
                  to a {@link SimpleDateFormat}. This will work for the majority
                  of countries; just remember to put it in a {@code try} block in case you
                  encounter an unusual one.
                  &lt;p&gt;You can also use forms of the parse and format methods with{@link ParsePosition} and {@link FieldPosition} to
                  allow you to
                  &lt;ul&gt;&lt;li&gt;progressively parse through pieces of a string.
                  &lt;li&gt;align any particular field, or find out where it is for selection
                  on the screen.
                  &lt;/ul&gt;
                  &lt;h4&gt;&lt;a name=&quot;synchronization&quot;&gt;Synchronization&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt;
                  Date formats are not synchronized.
                  It is recommended to create separate format instances for each thread.
                  If multiple threads access a format concurrently, it must be synchronized
                  externally.                
                <see>
                    Format                    
                </see>
                <see>
                    NumberFormat                    
                </see>
                <see>
                    SimpleDateFormat                    
                </see>
                <see>
                    java.util.Calendar                    
                </see>
                <see>
                    java.util.GregorianCalendar                    
                </see>
                <see>
                    java.util.TimeZone                    
                </see>
                <author>
                    Mark Davis, Chen-Lieh Huang, Alan Liu                    
                </author>
            </javadoc>
            <declaration name="calendar" type="Calendar" line="91"/>
            <javadoc line="91">
                The {@link Calendar} instance used for calculating the date-time fields
                  and the instant of time. This field is used for both formatting and
                  parsing.
                  &lt;p&gt;Subclasses should initialize this field to a {@link Calendar}appropriate for the {@link Locale} associated with this
                  &lt;code&gt;DateFormat&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="numberFormat" type="NumberFormat" line="100"/>
            <javadoc line="100">
                The number formatter that &lt;code&gt;DateFormat&lt;/code&gt; uses to format numbers
                  in dates and times.  Subclasses should initialize this to a number format
                  appropriate for the locale associated with this &lt;code&gt;DateFormat&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="ERA_FIELD" type="int" line="107"/>
            <javadoc line="107">
                Useful constant for ERA field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="YEAR_FIELD" type="int" line="112"/>
            <javadoc line="112">
                Useful constant for YEAR field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="MONTH_FIELD" type="int" line="117"/>
            <javadoc line="117">
                Useful constant for MONTH field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="DATE_FIELD" type="int" line="122"/>
            <javadoc line="122">
                Useful constant for DATE field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="HOUR_OF_DAY1_FIELD" type="int" line="127"/>
            <javadoc line="127">
                Useful constant for one-based HOUR_OF_DAY field alignment.
                  Used in FieldPosition of date/time formatting.
                  HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock.
                  For example, 23:59 + 01:00 results in 24:59.                
            </javadoc>
            <declaration name="HOUR_OF_DAY0_FIELD" type="int" line="134"/>
            <javadoc line="134">
                Useful constant for zero-based HOUR_OF_DAY field alignment.
                  Used in FieldPosition of date/time formatting.
                  HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock.
                  For example, 23:59 + 01:00 results in 00:59.                
            </javadoc>
            <declaration name="MINUTE_FIELD" type="int" line="141"/>
            <javadoc line="141">
                Useful constant for MINUTE field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="SECOND_FIELD" type="int" line="146"/>
            <javadoc line="146">
                Useful constant for SECOND field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="MILLISECOND_FIELD" type="int" line="151"/>
            <javadoc line="151">
                Useful constant for MILLISECOND field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="DAY_OF_WEEK_FIELD" type="int" line="156"/>
            <javadoc line="156">
                Useful constant for DAY_OF_WEEK field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="DAY_OF_YEAR_FIELD" type="int" line="161"/>
            <javadoc line="161">
                Useful constant for DAY_OF_YEAR field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="DAY_OF_WEEK_IN_MONTH_FIELD" type="int" line="166"/>
            <javadoc line="166">
                Useful constant for DAY_OF_WEEK_IN_MONTH field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="WEEK_OF_YEAR_FIELD" type="int" line="171"/>
            <javadoc line="171">
                Useful constant for WEEK_OF_YEAR field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="WEEK_OF_MONTH_FIELD" type="int" line="176"/>
            <javadoc line="176">
                Useful constant for WEEK_OF_MONTH field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="AM_PM_FIELD" type="int" line="181"/>
            <javadoc line="181">
                Useful constant for AM_PM field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="HOUR1_FIELD" type="int" line="186"/>
            <javadoc line="186">
                Useful constant for one-based HOUR field alignment.
                  Used in FieldPosition of date/time formatting.
                  HOUR1_FIELD is used for the one-based 12-hour clock.
                  For example, 11:30 PM + 1 hour results in 12:30 AM.                
            </javadoc>
            <declaration name="HOUR0_FIELD" type="int" line="193"/>
            <javadoc line="193">
                Useful constant for zero-based HOUR field alignment.
                  Used in FieldPosition of date/time formatting.
                  HOUR0_FIELD is used for the zero-based 12-hour clock.
                  For example, 11:30 PM + 1 hour results in 00:30 AM.                
            </javadoc>
            <declaration name="TIMEZONE_FIELD" type="int" line="200"/>
            <javadoc line="200">
                Useful constant for TIMEZONE field alignment.
                  Used in FieldPosition of date/time formatting.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="205"/>
            <javadoc line="206">
                Overrides Format.
                  Formats a time object into a time string. Examples of time objects
                  are a time value expressed in milliseconds and a Date object.                
                <param>
                    obj must be a Number or a Date.                    
                </param>
                <param>
                    toAppendTo the string buffer for the returning time string.                    
                </param>
                <return>
                    the string buffer passed in as toAppendTo, with formatted text appended.                    
                </return>
                <param>
                    fieldPosition keeps track of the position of the field
                      within the returned string.
                      On input: an alignment field,
                      if desired. On output: the offsets of the alignment field. For
                      example, given a time text &quot;1996.07.10 AD at 15:08:56 PDT&quot;,
                      if the given fieldPosition is DateFormat.YEAR_FIELD, the
                      begin index and end index of fieldPosition will be set to
                      0 and 4, respectively.
                      Notice that if the same time field appears
                      more than once in a pattern, the fieldPosition will be set for the first
                      occurrence of that time field. For instance, formatting a Date to
                      the time string &quot;1 PM PDT (Pacific Daylight Time)&quot; using the pattern
                      &quot;h a z (zzzz)&quot; and the alignment field DateFormat.TIMEZONE_FIELD,
                      the begin index and end index of fieldPosition will be set to
                      5 and 8, respectively, for the first occurrence of the timezone
                      pattern character &apos;z&apos;.                    
                </param>
                <see>
                    java.text.Format                    
                </see>
            </javadoc>
            <method name="format" type="StringBuffer" line="231">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="fieldPosition" type="FieldPosition"/>
                </params>
            </method>
            <method name="format" type="StringBuffer" line="236"/>
            <javadoc line="236">
                Formats a Date into a date/time string.                
                <param>
                    date a Date to be formatted into a date/time string.                    
                </param>
                <param>
                    toAppendTo the string buffer for the returning date/time string.                    
                </param>
                <param>
                    fieldPosition keeps track of the position of the field
                      within the returned string.
                      On input: an alignment field,
                      if desired. On output: the offsets of the alignment field. For
                      example, given a time text &quot;1996.07.10 AD at 15:08:56 PDT&quot;,
                      if the given fieldPosition is DateFormat.YEAR_FIELD, the
                      begin index and end index of fieldPosition will be set to
                      0 and 4, respectively.
                      Notice that if the same time field appears
                      more than once in a pattern, the fieldPosition will be set for the first
                      occurrence of that time field. For instance, formatting a Date to
                      the time string &quot;1 PM PDT (Pacific Daylight Time)&quot; using the pattern
                      &quot;h a z (zzzz)&quot; and the alignment field DateFormat.TIMEZONE_FIELD,
                      the begin index and end index of fieldPosition will be set to
                      5 and 8, respectively, for the first occurrence of the timezone
                      pattern character &apos;z&apos;.                    
                </param>
                <return>
                    the string buffer passed in as toAppendTo, with formatted text appended.                    
                </return>
            </javadoc>
            <javadoc line="259">
                Formats a Date into a date/time string.                
                <param>
                    date the time value to be formatted into a time string.                    
                </param>
                <return>
                    the formatted time string.                    
                </return>
            </javadoc>
            <method name="format" type="String" line="264">
                <params>
                    <param name="date" type="Date"/>
                </params>
            </method>
            <javadoc line="267">
                Parses text from the beginning of the given string to produce a date.
                  The method may not use the entire text of the given string.
                  &lt;p&gt;
                  See the {@link #parse(String,ParsePosition)} method for more information
                  on date parsing.                
                <param>
                    source A &lt;code&gt;String&lt;/code&gt; whose beginning should be parsed.                    
                </param>
                <return>
                    A &lt;code&gt;Date&lt;/code&gt; parsed from the string.                    
                </return>
                <exception>
                    ParseException if the beginning of the specified string
                      cannot be parsed.                    
                </exception>
            </javadoc>
            <method name="parse" type="Date" line="278">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="pos" type="ParsePosition" line="279"/>
                <declaration name="result" type="Date" line="280"/>
            </method>
            <method name="parse" type="Date" line="284"/>
            <javadoc line="284">
                Parse a date/time string according to the given parse position.  For
                  example, a time text {@code &quot;07/10/96 4:5 PM, PDT&quot;} will be parsed into a {@code Date}that is equivalent to {@code Date(837039900000L)}.
                  &lt;p&gt; By default, parsing is lenient: If the input is not in the form used
                  by this object&apos;s format method but can still be parsed as a date, then
                  the parse succeeds.  Clients may insist on strict adherence to the
                  format by calling {@link #setLenient(boolean) setLenient(false)}.
                  &lt;p&gt;This parsing operation uses the {@link #calendar} to produce
                  a {@code Date}. As a result, the {@code calendar}&apos;s date-time
                  fields and the {@code TimeZone} value may have been
                  overwritten, depending on subclass implementations. Any {@codeTimeZone} value that has previously been set by a call to{@link #setTimeZone(java.util.TimeZone) setTimeZone} may need
                  to be restored for further operations.                
                <param>
                    source  The date/time string to be parsed                    
                </param>
                <param>
                    pos   On input, the position at which to start parsing; on
                      output, the position at which parsing terminated, or the
                      start position if the parse failed.                    
                </param>
                <return>
                    A {@code Date}, or {@code null} if the input could not be parsed                    
                </return>
            </javadoc>
            <javadoc line="303">
                Parses text from a string to produce a &lt;code&gt;Date&lt;/code&gt;.
                  &lt;p&gt;
                  The method attempts to parse text starting at the index given by
                  &lt;code&gt;pos&lt;/code&gt;.
                  If parsing succeeds, then the index of &lt;code&gt;pos&lt;/code&gt; is updated
                  to the index after the last character used (parsing does not necessarily
                  use all characters up to the end of the string), and the parsed
                  date is returned. The updated &lt;code&gt;pos&lt;/code&gt; can be used to
                  indicate the starting point for the next call to this method.
                  If an error occurs, then the index of &lt;code&gt;pos&lt;/code&gt; is not
                  changed, the error index of &lt;code&gt;pos&lt;/code&gt; is set to the index of
                  the character where the error occurred, and null is returned.
                  &lt;p&gt;
                  See the {@link #parse(String,ParsePosition)} method for more information
                  on date parsing.                
                <param>
                    source A &lt;code&gt;String&lt;/code&gt;, part of which should be parsed.                    
                </param>
                <param>
                    pos A &lt;code&gt;ParsePosition&lt;/code&gt; object with index and error
                      index information as described above.                    
                </param>
                <return>
                    A &lt;code&gt;Date&lt;/code&gt; parsed from the string. In case of
                      error, returns null.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;pos&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="parseObject" type="Object" line="326">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
            </method>
            <declaration name="FULL" type="int" line="329"/>
            <javadoc line="329">
                Constant for full style pattern.                
            </javadoc>
            <declaration name="LONG" type="int" line="333"/>
            <javadoc line="333">
                Constant for long style pattern.                
            </javadoc>
            <declaration name="MEDIUM" type="int" line="337"/>
            <javadoc line="337">
                Constant for medium style pattern.                
            </javadoc>
            <declaration name="SHORT" type="int" line="341"/>
            <javadoc line="341">
                Constant for short style pattern.                
            </javadoc>
            <declaration name="DEFAULT" type="int" line="345"/>
            <javadoc line="345">
                Constant for default style pattern.  Its value is MEDIUM.                
            </javadoc>
            <javadoc line="349">
                Gets the time formatter with the default formatting style
                  for the default locale.                
                <return>
                    a time formatter.                    
                </return>
            </javadoc>
            <method name="getTimeInstance" type="DateFormat" line="354"/>
            <javadoc line="357">
                Gets the time formatter with the given formatting style
                  for the default locale.                
                <param>
                    style the given formatting style. For example,
                      SHORT for &quot;h:mm a&quot; in the US locale.                    
                </param>
                <return>
                    a time formatter.                    
                </return>
            </javadoc>
            <method name="getTimeInstance" type="DateFormat" line="364">
                <params>
                    <param name="style" type="int"/>
                </params>
            </method>
            <javadoc line="367">
                Gets the time formatter with the given formatting style
                  for the given locale.                
                <param>
                    style the given formatting style. For example,
                      SHORT for &quot;h:mm a&quot; in the US locale.                    
                </param>
                <param>
                    aLocale the given locale.                    
                </param>
                <return>
                    a time formatter.                    
                </return>
            </javadoc>
            <method name="getTimeInstance" type="DateFormat" line="375">
                <params>
                    <param name="style" type="int"/>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="378">
                Gets the date formatter with the default formatting style
                  for the default locale.                
                <return>
                    a date formatter.                    
                </return>
            </javadoc>
            <method name="getDateInstance" type="DateFormat" line="383"/>
            <javadoc line="386">
                Gets the date formatter with the given formatting style
                  for the default locale.                
                <param>
                    style the given formatting style. For example,
                      SHORT for &quot;M/d/yy&quot; in the US locale.                    
                </param>
                <return>
                    a date formatter.                    
                </return>
            </javadoc>
            <method name="getDateInstance" type="DateFormat" line="393">
                <params>
                    <param name="style" type="int"/>
                </params>
            </method>
            <javadoc line="396">
                Gets the date formatter with the given formatting style
                  for the given locale.                
                <param>
                    style the given formatting style. For example,
                      SHORT for &quot;M/d/yy&quot; in the US locale.                    
                </param>
                <param>
                    aLocale the given locale.                    
                </param>
                <return>
                    a date formatter.                    
                </return>
            </javadoc>
            <method name="getDateInstance" type="DateFormat" line="404">
                <params>
                    <param name="style" type="int"/>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="407">
                Gets the date/time formatter with the default formatting style
                  for the default locale.                
                <return>
                    a date/time formatter.                    
                </return>
            </javadoc>
            <method name="getDateTimeInstance" type="DateFormat" line="412"/>
            <javadoc line="415">
                Gets the date/time formatter with the given date and time
                  formatting styles for the default locale.                
                <param>
                    dateStyle the given date formatting style. For example,
                      SHORT for &quot;M/d/yy&quot; in the US locale.                    
                </param>
                <param>
                    timeStyle the given time formatting style. For example,
                      SHORT for &quot;h:mm a&quot; in the US locale.                    
                </param>
                <return>
                    a date/time formatter.                    
                </return>
            </javadoc>
            <method name="getDateTimeInstance" type="DateFormat" line="424">
                <params>
                    <param name="dateStyle" type="int"/>
                    <param name="timeStyle" type="int"/>
                </params>
            </method>
            <javadoc line="427">
                Gets the date/time formatter with the given formatting styles
                  for the given locale.                
                <param>
                    dateStyle the given date formatting style.                    
                </param>
                <param>
                    timeStyle the given time formatting style.                    
                </param>
                <param>
                    aLocale the given locale.                    
                </param>
                <return>
                    a date/time formatter.                    
                </return>
            </javadoc>
            <method name="getDateTimeInstance" type="DateFormat" line="435">
                <params>
                    <param name="dateStyle" type="int"/>
                    <param name="timeStyle" type="int"/>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="438">
                Get a default date/time formatter that uses the SHORT style for both the
                  date and the time.                
            </javadoc>
            <method name="getInstance" type="DateFormat" line="442"/>
            <javadoc line="445">
                Returns an array of all locales for which the
                  &lt;code&gt;getInstance&lt;/code&gt; methods of this class can return
                  localized instances.
                  The returned array represents the union of locales supported by the Java
                  runtime and by installed{@link java.text.spi.DateFormatProvider DateFormatProvider} implementations.
                  It must contain at least a &lt;code&gt;Locale&lt;/code&gt; instance equal to{@link java.util.Locale#US Locale.US}.                
                <return>
                    An array of locales for which localized
                      &lt;code&gt;DateFormat&lt;/code&gt; instances are available.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="455">
                <declaration name="pool" type="LocaleServiceProviderPool" line="456"/>
            </method>
            <javadoc line="459">
                Set the calendar to be used by this date format.  Initially, the default
                  calendar for the specified or default locale is used.
                  &lt;p&gt;Any {@link java.util.TimeZone TimeZone} and {@linkplain #isLenient() leniency} values that have previously been set are
                  overwritten by {@code newCalendar}&apos;s values.                
                <param>
                    newCalendar the new {@code Calendar} to be used by the date format                    
                </param>
            </javadoc>
            <method name="setCalendar" type="void" line="466">
                <params>
                    <param name="newCalendar" type="Calendar"/>
                </params>
            </method>
            <javadoc line="469">
                Gets the calendar associated with this date/time formatter.                
                <return>
                    the calendar associated with this date/time formatter.                    
                </return>
            </javadoc>
            <method name="getCalendar" type="Calendar" line="473"/>
            <javadoc line="476">
                Allows you to set the number formatter.                
                <param>
                    newNumberFormat the given new NumberFormat.                    
                </param>
            </javadoc>
            <method name="setNumberFormat" type="void" line="480">
                <params>
                    <param name="newNumberFormat" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="483">
                Gets the number formatter which this date/time formatter uses to
                  format and parse a time.                
                <return>
                    the number formatter which this date/time formatter uses.                    
                </return>
            </javadoc>
            <method name="getNumberFormat" type="NumberFormat" line="488"/>
            <javadoc line="491">
                Sets the time zone for the calendar of this {@code DateFormat} object.
                  This method is equivalent to the following call.
                  &lt;blockquote&gt;&lt;pre&gt;
                  getCalendar().setTimeZone(zone)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;The {@code TimeZone} set by this method is overwritten by a{@link #setCalendar(java.util.Calendar) setCalendar} call.
                  &lt;p&gt;The {@code TimeZone} set by this method may be overwritten as
                  a result of a call to the parse method.                
                <param>
                    zone the given new time zone.                    
                </param>
            </javadoc>
            <method name="setTimeZone" type="void" line="502">
                <params>
                    <param name="zone" type="TimeZone"/>
                </params>
            </method>
            <javadoc line="505">
                Gets the time zone.
                  This method is equivalent to the following call.
                  &lt;blockquote&gt;&lt;pre&gt;
                  getCalendar().getTimeZone()
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    the time zone associated with the calendar of DateFormat.                    
                </return>
            </javadoc>
            <method name="getTimeZone" type="TimeZone" line="513"/>
            <javadoc line="516">
                Specify whether or not date/time parsing is to be lenient.  With
                  lenient parsing, the parser may use heuristics to interpret inputs that
                  do not precisely match this object&apos;s format.  With strict parsing,
                  inputs must match this object&apos;s format.
                  &lt;p&gt;This method is equivalent to the following call.
                  &lt;blockquote&gt;&lt;pre&gt;
                  getCalendar().setLenient(lenient)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;This leniency value is overwritten by a call to {@link #setCalendar(java.util.Calendar) setCalendar()}.                
                <param>
                    lenient when {@code true}, parsing is lenient                    
                </param>
                <see>
                    java.util.Calendar#setLenient(boolean)                    
                </see>
            </javadoc>
            <method name="setLenient" type="void" line="529">
                <params>
                    <param name="lenient" type="boolean"/>
                </params>
            </method>
            <javadoc line="532">
                Tell whether date/time parsing is to be lenient.
                  This method is equivalent to the following call.
                  &lt;blockquote&gt;&lt;pre&gt;
                  getCalendar().isLenient()
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    {@code true} if the {@link #calendar} is lenient;{@code false} otherwise.                    
                </return>
                <see>
                    java.util.Calendar#isLenient()                    
                </see>
            </javadoc>
            <method name="isLenient" type="boolean" line="541"/>
            <javadoc line="544">
                Overrides hashCode                
            </javadoc>
            <method name="hashCode" type="int" line="547"/>
            <javadoc line="550">
                Overrides equals                
            </javadoc>
            <method name="equals" type="boolean" line="553">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="DateFormat" line="556"/>
            </method>
            <javadoc line="559">
                Overrides Cloneable                
            </javadoc>
            <method name="clone" type="Object" line="562">
                <declaration name="other" type="DateFormat" line="563"/>
            </method>
            <javadoc line="568">
                Creates a DateFormat with the given time and/or date style in the given
                  locale.                
                <param>
                    timeStyle a value from 0 to 3 indicating the time format,
                      ignored if flags is 2                    
                </param>
                <param>
                    dateStyle a value from 0 to 3 indicating the time format,
                      ignored if flags is 1                    
                </param>
                <param>
                    flags either 1 for a time format, 2 for a date format,
                      or 3 for a date/time format                    
                </param>
                <param>
                    loc the locale for the format                    
                </param>
            </javadoc>
            <method name="get" type="DateFormat" line="579">
                <params>
                    <param name="timeStyle" type="int"/>
                    <param name="dateStyle" type="int"/>
                    <param name="flags" type="int"/>
                    <param name="loc" type="Locale"/>
                </params>
                <scope line="580">
                    <scope line="581"/>
                </scope>
                <scope line="585"/>
                <scope line="588">
                    <scope line="589"/>
                </scope>
                <scope line="593"/>
                <scope line="596">
                    <declaration name="pool" type="LocaleServiceProviderPool" line="597"/>
                    <scope line="598">
                        <declaration name="providersInstance" type="DateFormat" line="599"/>
                        <scope line="600"/>
                    </scope>
                </scope>
                <scope line="606"/>
            </method>
            <javadoc line="610">
                Create a new date format.                
            </javadoc>
            <method name="DateFormat" type="constructor" line="613"/>
            <class name="Field" line="615">
                <extends class="Format.Field"/>
                <javadoc line="615">
                    Defines constants that are used as attribute keys in the
                      &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; returned
                      from &lt;code&gt;DateFormat.formatToCharacterIterator&lt;/code&gt; and as
                      field identifiers in &lt;code&gt;FieldPosition&lt;/code&gt;.
                      &lt;p&gt;
                      The class also provides two methods to map
                      between its constants and the corresponding Calendar constants.                    
                    <since>
                        1.4                        
                    </since>
                    <see>
                        java.util.Calendar                        
                    </see>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="627"/>
                <declaration name="instanceMap" type="Map" line="628"/>
                <declaration name="calendarToFieldMapping" type="Field[]" line="629"/>
                <declaration name="calendarField" type="int" line="630"/>
                <javadoc line="630">
                    Calendar field.                    
                </javadoc>
                <javadoc line="634">
                    Returns the &lt;code&gt;Field&lt;/code&gt; constant that corresponds to
                      the &lt;code&gt;Calendar&lt;/code&gt; constant &lt;code&gt;calendarField&lt;/code&gt;.
                      If there is no direct mapping between the &lt;code&gt;Calendar&lt;/code&gt;
                      constant and a &lt;code&gt;Field&lt;/code&gt;, null is returned.                    
                    <throws>
                        IllegalArgumentException if &lt;code&gt;calendarField&lt;/code&gt; is
                          not the value of a &lt;code&gt;Calendar&lt;/code&gt; field constant.                        
                    </throws>
                    <param>
                        calendarField Calendar field constant                        
                    </param>
                    <return>
                        Field instance representing calendarField.                        
                    </return>
                    <see>
                        java.util.Calendar                        
                    </see>
                </javadoc>
                <method name="ofCalendarField" type="Field" line="645">
                    <params>
                        <param name="calendarField" type="int"/>
                    </params>
                    <scope line="646"/>
                </method>
                <javadoc line="651">
                    Creates a &lt;code&gt;Field&lt;/code&gt;.                    
                    <param>
                        name the name of the &lt;code&gt;Field&lt;/code&gt;                        
                    </param>
                    <param>
                        calendarField the &lt;code&gt;Calendar&lt;/code&gt; constant this
                          &lt;code&gt;Field&lt;/code&gt; corresponds to; any value, even one
                          outside the range of legal &lt;code&gt;Calendar&lt;/code&gt; values may
                          be used, but &lt;code&gt;-1&lt;/code&gt; should be used for values
                          that don&apos;t correspond to legal &lt;code&gt;Calendar&lt;/code&gt; values                        
                    </param>
                </javadoc>
                <method name="Field" type="constructor" line="660">
                    <params>
                        <param name="name" type="String"/>
                        <param name="calendarField" type="int"/>
                    </params>
                    <scope line="663">
                        <scope line="665"/>
                    </scope>
                </method>
                <javadoc line="670">
                    Returns the &lt;code&gt;Calendar&lt;/code&gt; field associated with this
                      attribute. For example, if this represents the hours field of
                      a &lt;code&gt;Calendar&lt;/code&gt;, this would return
                      &lt;code&gt;Calendar.HOUR&lt;/code&gt;. If there is no corresponding
                      &lt;code&gt;Calendar&lt;/code&gt; constant, this will return -1.                    
                    <return>
                        Calendar constant for this field                        
                    </return>
                    <see>
                        java.util.Calendar                        
                    </see>
                </javadoc>
                <method name="getCalendarField" type="int" line="679"/>
                <javadoc line="682">
                    Resolves instances being deserialized to the predefined constants.                    
                    <throws>
                        InvalidObjectException if the constant could not be
                          resolved.                        
                    </throws>
                    <return>
                        resolved DateFormat.Field constant                        
                    </return>
                </javadoc>
                <method name="readResolve" type="Object" line="688">
                    <scope line="689"/>
                    <declaration name="instance" type="Object" line="692"/>
                    <scope line="693"/>
                    <scope line="696"/>
                </method>
                <declaration name="ERA" type="Field" line="700"/>
                <javadoc line="700">
                    Constant identifying the era field.                    
                </javadoc>
                <declaration name="YEAR" type="Field" line="704"/>
                <javadoc line="704">
                    Constant identifying the year field.                    
                </javadoc>
                <declaration name="MONTH" type="Field" line="708"/>
                <javadoc line="708">
                    Constant identifying the month field.                    
                </javadoc>
                <declaration name="DAY_OF_MONTH" type="Field" line="712"/>
                <javadoc line="712">
                    Constant identifying the day of month field.                    
                </javadoc>
                <declaration name="HOUR_OF_DAY1" type="Field" line="716"/>
                <javadoc line="716">
                    Constant identifying the hour of day field, where the legal values
                      are 1 to 24.                    
                </javadoc>
                <declaration name="HOUR_OF_DAY0" type="Field" line="721"/>
                <javadoc line="721">
                    Constant identifying the hour of day field, where the legal values
                      are 0 to 23.                    
                </javadoc>
                <declaration name="MINUTE" type="Field" line="726"/>
                <javadoc line="726">
                    Constant identifying the minute field.                    
                </javadoc>
                <declaration name="SECOND" type="Field" line="730"/>
                <javadoc line="730">
                    Constant identifying the second field.                    
                </javadoc>
                <declaration name="MILLISECOND" type="Field" line="734"/>
                <javadoc line="734">
                    Constant identifying the millisecond field.                    
                </javadoc>
                <declaration name="DAY_OF_WEEK" type="Field" line="738"/>
                <javadoc line="738">
                    Constant identifying the day of week field.                    
                </javadoc>
                <declaration name="DAY_OF_YEAR" type="Field" line="742"/>
                <javadoc line="742">
                    Constant identifying the day of year field.                    
                </javadoc>
                <declaration name="DAY_OF_WEEK_IN_MONTH" type="Field" line="746"/>
                <javadoc line="746">
                    Constant identifying the day of week field.                    
                </javadoc>
                <declaration name="WEEK_OF_YEAR" type="Field" line="750"/>
                <javadoc line="750">
                    Constant identifying the week of year field.                    
                </javadoc>
                <declaration name="WEEK_OF_MONTH" type="Field" line="754"/>
                <javadoc line="754">
                    Constant identifying the week of month field.                    
                </javadoc>
                <declaration name="AM_PM" type="Field" line="758"/>
                <javadoc line="758">
                    Constant identifying the time of day indicator
                      (e.g. &quot;a.m.&quot; or &quot;p.m.&quot;) field.                    
                </javadoc>
                <declaration name="HOUR1" type="Field" line="763"/>
                <javadoc line="763">
                    Constant identifying the hour field, where the legal values are
                      1 to 12.                    
                </javadoc>
                <declaration name="HOUR0" type="Field" line="768"/>
                <javadoc line="768">
                    Constant identifying the hour field, where the legal values are
                      0 to 11.                    
                </javadoc>
                <declaration name="TIME_ZONE" type="Field" line="773"/>
                <javadoc line="773">
                    Constant identifying the time zone field.                    
                </javadoc>
            </class>
            <class name="DateFormatGetter" line="778">
                <implements interface="LocaleServiceProviderPool.LocalizedObjectGetter">
                    <type_params>
                        <type_param name="DateFormatProvider"/>
                        <type_param name="DateFormat"/>
                    </type_params>
                </implements>
                <javadoc line="778">
                    Obtains a DateFormat instance from a DateFormatProvider
                      implementation.                    
                </javadoc>
                <declaration name="INSTANCE" type="DateFormatGetter" line="783"/>
                <method name="getObject" type="DateFormat" line="784">
                    <params>
                        <param name="dateFormatProvider" type="DateFormatProvider"/>
                        <param name="locale" type="Locale"/>
                        <param name="key" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
    </source>