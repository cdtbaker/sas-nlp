<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.lang.Character"/>
        <import package="java.util.Vector"/>
        <import package="sun.text.CollatorUtilities"/>
        <import package="sun.text.normalizer.NormalizerBase"/>
        <class name="CollationElementIterator" line="46">
            <comment line="531">
                ============================================================                
            </comment>
            <comment line="532">
                privates                
            </comment>
            <comment line="533">
                ============================================================                
            </comment>
            <javadoc line="46">
                The &lt;code&gt;CollationElementIterator&lt;/code&gt; class is used as an iterator
                  to walk through each character of an international string. Use the iterator
                  to return the ordering priority of the positioned character. The ordering
                  priority of a character, which we refer to as a key, defines how a character
                  is collated in the given collation object.
                  &lt;p&gt;
                  For example, consider the following in Spanish:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  &quot;ca&quot; -&gt; the first key is key(&apos;c&apos;) and second key is key(&apos;a&apos;).
                  &quot;cha&quot; -&gt; the first key is key(&apos;ch&apos;) and second key is key(&apos;a&apos;).
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  And in German,
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  &quot;\u00e4b&quot;-&gt; the first key is key(&apos;a&apos;), the second key is key(&apos;e&apos;), and
                  the third key is key(&apos;b&apos;).
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  The key of a character is an integer composed of primary order(short),
                  secondary order(byte), and tertiary order(byte). Java strictly defines
                  the size and signedness of its primitive data types. Therefore, the static
                  functions &lt;code&gt;primaryOrder&lt;/code&gt;, &lt;code&gt;secondaryOrder&lt;/code&gt;, and
                  &lt;code&gt;tertiaryOrder&lt;/code&gt; return &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;,
                  and &lt;code&gt;short&lt;/code&gt; respectively to ensure the correctness of the key
                  value.
                  &lt;p&gt;
                  Example of the iterator usage,
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  String testString = &quot;This is a test&quot;;
                  Collator col = Collator.getInstance();
                  if (col instanceof RuleBasedCollator) {
                  RuleBasedCollator ruleBasedCollator = (RuleBasedCollator)col;
                  CollationElementIterator collationElementIterator = ruleBasedCollator.getCollationElementIterator(testString);
                  int primaryOrder = CollationElementIterator.primaryOrder(collationElementIterator.next());
                  :
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  &lt;code&gt;CollationElementIterator.next&lt;/code&gt; returns the collation order
                  of the next character. A collation order consists of primary order,
                  secondary order and tertiary order. The data type of the collation
                  order is &lt;strong&gt;int&lt;/strong&gt;. The first 16 bits of a collation order
                  is its primary order; the next 8 bits is the secondary order and the
                  last 8 bits is the tertiary order.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;CollationElementIterator&lt;/code&gt; is a part of
                  &lt;code&gt;RuleBasedCollator&lt;/code&gt; implementation. It is only usable
                  with &lt;code&gt;RuleBasedCollator&lt;/code&gt; instances.                
                <see>
                    Collator                    
                </see>
                <see>
                    RuleBasedCollator                    
                </see>
                <author>
                    Helena Shih, Laura Werner, Richard Gillam                    
                </author>
            </javadoc>
            <declaration name="NULLORDER" type="int" line="110"/>
            <javadoc line="110">
                Null order which indicates the end of string is reached by the
                  cursor.                
            </javadoc>
            <javadoc line="116">
                CollationElementIterator constructor.  This takes the source string and
                  the collation object.  The cursor will walk thru the source string based
                  on the predefined collation rules.  If the source string is empty,
                  NULLORDER will be returned on the calls to next().                
                <param>
                    sourceText the source string.                    
                </param>
                <param>
                    order the collation object.                    
                </param>
            </javadoc>
            <method name="CollationElementIterator" type="constructor" line="124">
                <params>
                    <param name="sourceText" type="String"/>
                    <param name="owner" type="RuleBasedCollator"/>
                </params>
                <scope line="127">
                    <declaration name="mode" type="NormalizerBase.Mode" line="128"/>
                </scope>
            </method>
            <javadoc line="134">
                CollationElementIterator constructor.  This takes the source string and
                  the collation object.  The cursor will walk thru the source string based
                  on the predefined collation rules.  If the source string is empty,
                  NULLORDER will be returned on the calls to next().                
                <param>
                    sourceText the source string.                    
                </param>
                <param>
                    order the collation object.                    
                </param>
            </javadoc>
            <method name="CollationElementIterator" type="constructor" line="142">
                <params>
                    <param name="sourceText" type="CharacterIterator"/>
                    <param name="owner" type="RuleBasedCollator"/>
                </params>
                <declaration name="mode" type="NormalizerBase.Mode" line="145"/>
            </method>
            <javadoc line="150">
                Resets the cursor to the beginning of the string.  The next call
                  to next() will return the first collation element in the string.                
            </javadoc>
            <method name="reset" type="void" line="155">
                <scope line="156">
                    <declaration name="mode" type="NormalizerBase.Mode" line="158"/>
                </scope>
            </method>
            <javadoc line="167">
                Get the next collation element in the string.  &lt;p&gt;This iterator iterates
                  over a sequence of collation elements that were built from the string.
                  Because there isn&apos;t necessarily a one-to-one mapping from characters to
                  collation elements, this doesn&apos;t mean the same thing as &quot;return the
                  collation element [or ordering priority] of the next character in the
                  string&quot;.&lt;/p&gt;
                  &lt;p&gt;This function returns the collation element that the iterator is currently
                  pointing to and then updates the internal pointer to point to the next element.
                  previous() updates the pointer first and then returns the element.  This
                  means that when you change direction while iterating (i.e., call next() and
                  then call previous(), or call previous() and then call next()), you&apos;ll get
                  back the same element twice.&lt;/p&gt;                
            </javadoc>
            <method name="next" type="int" line="182">
                <comment line="187">
                    convert the owner&apos;s mode to something the Normalizer understands                    
                </comment>
                <comment line="194">
                    if buffer contains any decomposed char values                    
                </comment>
                <comment line="195">
                    return their strength orders before continuing in                    
                </comment>
                <comment line="196">
                    the Normalizer&apos;s CharacterIterator.                    
                </comment>
                <comment line="216">
                    are we at the end of Normalizer&apos;s text?                    
                </comment>
                <scope line="183"/>
                <declaration name="textMode" type="NormalizerBase.Mode" line="186"/>
                <declaration name="ownerMode" type="NormalizerBase.Mode" line="188"/>
                <scope line="190"/>
                <scope line="197">
                    <scope line="198"/>
                    <scope line="200"/>
                </scope>
                <scope line="204">
                    <scope line="205">
                        <declaration name="chars" type="char[]" line="206"/>
                    </scope>
                    <declaration name="order" type="int" line="210"/>
                </scope>
                <declaration name="ch" type="int" line="214"/>
                <scope line="217"/>
                <declaration name="value" type="int" line="221"/>
                <scope line="222"/>
                <scope line="226"/>
                <scope line="229"/>
                <scope line="235">
                    <declaration name="consonant" type="int" line="236"/>
                    <scope line="237">
                        <scope line="239"/>
                        <scope line="243"/>
                    </scope>
                    <scope line="247">
                        <scope line="249"/>
                        <scope line="253"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="262">
                Get the previous collation element in the string.  &lt;p&gt;This iterator iterates
                  over a sequence of collation elements that were built from the string.
                  Because there isn&apos;t necessarily a one-to-one mapping from characters to
                  collation elements, this doesn&apos;t mean the same thing as &quot;return the
                  collation element [or ordering priority] of the previous character in the
                  string&quot;.&lt;/p&gt;
                  &lt;p&gt;This function updates the iterator&apos;s internal pointer to point to the
                  collation element preceding the one it&apos;s currently pointing to and then
                  returns that element, while next() returns the current element and then
                  updates the pointer.  This means that when you change direction while
                  iterating (i.e., call next() and then call previous(), or call previous()
                  and then call next()), you&apos;ll get back the same element twice.&lt;/p&gt;                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="previous" type="int" line="278">
                <comment line="283">
                    convert the owner&apos;s mode to something the Normalizer understands                    
                </comment>
                <scope line="279"/>
                <declaration name="textMode" type="NormalizerBase.Mode" line="282"/>
                <declaration name="ownerMode" type="NormalizerBase.Mode" line="284"/>
                <scope line="286"/>
                <scope line="289">
                    <scope line="290"/>
                    <scope line="292"/>
                </scope>
                <scope line="296">
                    <scope line="297">
                        <declaration name="chars" type="char[]" line="298"/>
                    </scope>
                    <declaration name="order" type="int" line="302"/>
                </scope>
                <declaration name="ch" type="int" line="306"/>
                <scope line="307"/>
                <declaration name="value" type="int" line="311"/>
                <scope line="313"/>
                <scope line="316"/>
                <scope line="319"/>
                <scope line="325">
                    <declaration name="vowel" type="int" line="326"/>
                    <scope line="327">
                        <scope line="329"/>
                        <scope line="333"/>
                    </scope>
                    <scope line="337">
                        <scope line="339"/>
                        <scope line="343"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="352">
                Return the primary component of a collation element.                
                <param>
                    order the collation element                    
                </param>
                <return>
                    the element's primary component                    
                </return>
            </javadoc>
            <method name="primaryOrder" type="int" line="358">
                <params>
                    <param name="order" type="int"/>
                </params>
            </method>
            <javadoc line="362">
                Return the secondary component of a collation element.                
                <param>
                    order the collation element                    
                </param>
                <return>
                    the element's secondary component                    
                </return>
            </javadoc>
            <method name="secondaryOrder" type="short" line="368">
                <params>
                    <param name="order" type="int"/>
                </params>
            </method>
            <javadoc line="372">
                Return the tertiary component of a collation element.                
                <param>
                    order the collation element                    
                </param>
                <return>
                    the element's tertiary component                    
                </return>
            </javadoc>
            <method name="tertiaryOrder" type="short" line="378">
                <params>
                    <param name="order" type="int"/>
                </params>
            </method>
            <javadoc line="382">
                Get the comparison order in the desired strength.  Ignore the other
                  differences.                
                <param>
                    order The order value                    
                </param>
            </javadoc>
            <method name="strengthOrder" type="int" line="388">
                <params>
                    <param name="order" type="int"/>
                </params>
                <declaration name="s" type="int" line="389"/>
                <scope line="391"/>
                <scope line="394"/>
            </method>
            <javadoc line="400">
                Sets the iterator to point to the collation element corresponding to
                  the specified character (the parameter is a CHARACTER offset in the
                  original string, not an offset into its corresponding sequence of
                  collation elements).  The value returned by the next call to next()
                  will be the collation element corresponding to the specified position
                  in the text.  If that position is in the middle of a contracting
                  character sequence, the result of the next call to next() is the
                  collation element for that sequence.  This means that getOffset()
                  is not guaranteed to return the same value as was passed to a preceding
                  call to setOffset().                
                <param>
                    newOffset The new character offset into the original text.                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setOffset" type="void" line="416">
                <params>
                    <param name="newOffset" type="int"/>
                </params>
                <comment line="424">
                    if the desired character isn&apos;t used in a contracting character                    
                </comment>
                <comment line="425">
                    sequence, bypass all the backing-up logic-- we&apos;re sitting on                    
                </comment>
                <comment line="426">
                    the right character already                    
                </comment>
                <comment line="428">
                    walk backwards through the string until we see a character                    
                </comment>
                <comment line="429">
                    that DOESN&apos;T participate in a contracting character sequence                    
                </comment>
                <comment line="433">
                    now walk forward using this object&apos;s next() method until                    
                </comment>
                <comment line="434">
                    we pass the starting point and set our current position                    
                </comment>
                <comment line="435">
                    to the beginning of the last &quot;character&quot; before or at                    
                </comment>
                <comment line="436">
                    our starting position                    
                </comment>
                <comment line="443">
                    we don&apos;t need this, since last is the last index                    
                </comment>
                <comment line="444">
                    that is the starting of the contraction which encompass                    
                </comment>
                <comment line="445">
                    newOffset                    
                </comment>
                <comment line="446">
                    text.previous();                    
                </comment>
                <scope line="417">
                    <scope line="419"/>
                    <scope line="421">
                        <declaration name="c" type="int" line="422"/>
                        <scope line="427">
                            <scope line="430"/>
                            <declaration name="last" type="int" line="437"/>
                            <scope line="438"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="455">
                Returns the character offset in the original text corresponding to the next
                  collation element.  (That is, getOffset() returns the position in the text
                  corresponding to the collation element that will be returned by the next
                  call to next().)  This value will always be the index of the FIRST character
                  corresponding to the collation element (a contracting character sequence is
                  when two or more characters all correspond to the same collation element).
                  This means if you do setOffset(x) followed immediately by getOffset(), getOffset()
                  won&apos;t necessarily return x.                
                <return>
                    The character offset in the original text corresponding to the collation
                      element that will be returned by the next call to next().                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getOffset" type="int" line="470"/>
            <javadoc line="475">
                Return the maximum length of any expansion sequences that end
                  with the specified comparison order.                
                <param>
                    order a collation order returned by previous or next.                    
                </param>
                <return>
                    the maximum length of any expansion sequences ending
                      with the specified order.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMaxExpansion" type="int" line="484">
                <params>
                    <param name="order" type="int"/>
                </params>
            </method>
            <javadoc line="488">
                Set a new string over which to iterate.                
                <param>
                    source  the new source text                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setText" type="void" line="495">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="mode" type="NormalizerBase.Mode" line="499"/>
                <scope line="501"/>
                <scope line="503"/>
            </method>
            <javadoc line="509">
                Set a new string over which to iterate.                
                <param>
                    source  the new source text.                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setText" type="void" line="516">
                <params>
                    <param name="source" type="CharacterIterator"/>
                </params>
                <declaration name="mode" type="NormalizerBase.Mode" line="520"/>
                <scope line="522"/>
                <scope line="524"/>
            </method>
            <javadoc line="534">
                Determine if a character is a Thai vowel (which sorts after
                  its base consonant).                
            </javadoc>
            <method name="isThaiPreVowel" type="boolean" line="538">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="542">
                Determine if a character is a Thai base consonant                
            </javadoc>
            <method name="isThaiBaseConsonant" type="boolean" line="545">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="549">
                Determine if a character is a Lao vowel (which sorts after
                  its base consonant).                
            </javadoc>
            <method name="isLaoPreVowel" type="boolean" line="553">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="557">
                Determine if a character is a Lao base consonant                
            </javadoc>
            <method name="isLaoBaseConsonant" type="boolean" line="560">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="564">
                This method produces a buffer which contains the collation
                  elements for the two characters, with colFirst&apos;s values preceding
                  another character&apos;s.  Presumably, the other character precedes colFirst
                  in logical order (otherwise you wouldn&apos;t need this method would you?).
                  The assumption is that the other char&apos;s value(s) have already been
                  computed.  If this char has a single element it is passed to this
                  method as lastValue, and lastExpansion is null.  If it has an
                  expansion it is passed in lastExpansion, and colLastValue is ignored.                
            </javadoc>
            <method name="makeReorderedBuffer" type="int[]" line="577">
                <params>
                    <param name="colFirst" type="int"/>
                    <param name="lastValue" type="int"/>
                    <param name="lastExpansion" type="int[]"/>
                    <param name="forward" type="boolean"/>
                </params>
                <declaration name="result" type="int[]" line="579"/>
                <declaration name="firstValue" type="int" line="581"/>
                <scope line="582"/>
                <declaration name="firstExpansion" type="int[]" line="586"/>
                <scope line="587"/>
                <scope line="591">
                    <declaration name="temp1" type="int" line="592"/>
                    <declaration name="temp2" type="int[]" line="595"/>
                </scope>
                <scope line="600"/>
                <scope line="605">
                    <declaration name="firstLength" type="int" line="606"/>
                    <declaration name="lastLength" type="int" line="607"/>
                    <scope line="610"/>
                    <scope line="613"/>
                    <scope line="617"/>
                    <scope line="620"/>
                </scope>
            </method>
            <javadoc line="628">
                Check if a comparison order is ignorable.                
                <return>
                    true if a character is ignorable, false otherwise.                    
                </return>
            </javadoc>
            <method name="isIgnorable" type="boolean" line="633">
                <params>
                    <param name="order" type="int"/>
                </params>
            </method>
            <javadoc line="637">
                Get the ordering priority of the next contracting character in the
                  string.                
                <param>
                    ch the starting character of a contracting character token                    
                </param>
                <return>
                    the next contracting character's ordering.  Returns NULLORDER
                      if the end of string is reached.                    
                </return>
            </javadoc>
            <method name="nextContractChar" type="int" line="645">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <comment line="646">
                    First get the ordering of this single character,                    
                </comment>
                <comment line="647">
                    which is always the first element in the list                    
                </comment>
                <comment line="652">
                    find out the length of the longest contracting character sequence in the list.                    
                </comment>
                <comment line="653">
                    There&apos;s logic in the builder code to make sure the longest sequence is always                    
                </comment>
                <comment line="654">
                    the last.                    
                </comment>
                <comment line="658">
                    (the Normalizer is cloned here so that the seeking we do in the next loop                    
                </comment>
                <comment line="659">
                    won&apos;t affect our real position in the text)                    
                </comment>
                <comment line="662">
                    extract the next maxLength characters in the string (we have to do this using the                    
                </comment>
                <comment line="663">
                    Normalizer to ensure that our offsets correspond to those the rest of the                    
                </comment>
                <comment line="664">
                    iterator is using) and store it in &quot;fragment&quot;.                    
                </comment>
                <comment line="679">
                    now that we have that fragment, iterate through this list looking for the                    
                </comment>
                <comment line="680">
                    longest sequence that matches the characters in the actual text.  (maxLength                    
                </comment>
                <comment line="681">
                    is used here to keep track of the length of the longest sequence)                    
                </comment>
                <comment line="682">
                    Upon exit from this loop, maxLength will contain the length of the matching                    
                </comment>
                <comment line="683">
                    sequence and order will contain the collation-element value corresponding                    
                </comment>
                <comment line="684">
                    to this sequence                    
                </comment>
                <comment line="698">
                    seek our current iteration position to the end of the matching sequence                    
                </comment>
                <comment line="699">
                    and return the appropriate collation-element value (if there was no matching                    
                </comment>
                <comment line="700">
                    sequence, we&apos;re already seeked to the right position and order already contains                    
                </comment>
                <comment line="701">
                    the correct collation-element value for the single character)                    
                </comment>
                <declaration name="list" type="Vector" line="648"/>
                <declaration name="pair" type="EntryPair" line="649"/>
                <declaration name="order" type="int" line="650"/>
                <declaration name="maxLength" type="int" line="656"/>
                <declaration name="tempText" type="NormalizerBase" line="660"/>
                <declaration name="c" type="int" line="667"/>
                <scope line="668">
                    <scope line="669"/>
                    <scope line="672"/>
                </scope>
                <declaration name="fragment" type="String" line="678"/>
                <scope line="686">
                    <scope line="692"/>
                </scope>
                <scope line="702"/>
            </method>
            <javadoc line="709">
                Get the ordering priority of the previous contracting character in the
                  string.                
                <param>
                    ch the starting character of a contracting character token                    
                </param>
                <return>
                    the next contracting character's ordering.  Returns NULLORDER
                      if the end of string is reached.                    
                </return>
            </javadoc>
            <method name="prevContractChar" type="int" line="717">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <comment line="718">
                    This function is identical to nextContractChar(), except that we&apos;ve                    
                </comment>
                <comment line="719">
                    switched things so that the next() and previous() calls on the Normalizer                    
                </comment>
                <comment line="720">
                    are switched and so that we skip entry pairs with the fwd flag turned on                    
                </comment>
                <comment line="721">
                    rather than off.  Notice that we still use append() and startsWith() when                    
                </comment>
                <comment line="722">
                    working on the fragment.  This is because the entry pairs that are used                    
                </comment>
                <comment line="723">
                    in reverse iteration have their names reversed already.                    
                </comment>
                <declaration name="list" type="Vector" line="724"/>
                <declaration name="pair" type="EntryPair" line="725"/>
                <declaration name="order" type="int" line="726"/>
                <declaration name="maxLength" type="int" line="729"/>
                <declaration name="tempText" type="NormalizerBase" line="731"/>
                <declaration name="c" type="int" line="735"/>
                <scope line="736">
                    <scope line="737"/>
                    <scope line="740"/>
                </scope>
                <declaration name="fragment" type="String" line="746"/>
                <scope line="749">
                    <scope line="755"/>
                </scope>
                <scope line="761"/>
            </method>
            <declaration name="UNMAPPEDCHARVALUE" type="int" line="768"/>
            <declaration name="text" type="NormalizerBase" line="770"/>
            <declaration name="buffer" type="int[]" line="771"/>
            <declaration name="expIndex" type="int" line="772"/>
            <declaration name="key" type="StringBuffer" line="773"/>
            <declaration name="swapOrder" type="int" line="774"/>
            <declaration name="ordering" type="RBCollationTables" line="775"/>
            <declaration name="owner" type="RuleBasedCollator" line="776"/>
        </class>
    </source>