<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.net.URL"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.text.CharacterIterator"/>
        <import package="java.text.StringCharacterIterator"/>
        <import package="java.text.spi.BreakIteratorProvider"/>
        <import package="java.util.Locale"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.spi.LocaleServiceProvider"/>
        <import package="sun.util.LocaleServiceProviderPool"/>
        <import package="sun.util.resources.LocaleData"/>
        <class name="BreakIterator" line="60">
            <implements interface="Cloneable"/>
            <javadoc line="60">
                The &lt;code&gt;BreakIterator&lt;/code&gt; class implements methods for finding
                  the location of boundaries in text. Instances of &lt;code&gt;BreakIterator&lt;/code&gt;
                  maintain a current position and scan over text
                  returning the index of characters where boundaries occur.
                  Internally, &lt;code&gt;BreakIterator&lt;/code&gt; scans text using a
                  &lt;code&gt;CharacterIterator&lt;/code&gt;, and is thus able to scan text held
                  by any object implementing that protocol. A &lt;code&gt;StringCharacterIterator&lt;/code&gt;
                  is used to scan &lt;code&gt;String&lt;/code&gt; objects passed to &lt;code&gt;setText&lt;/code&gt;.
                  &lt;p&gt;
                  You use the factory methods provided by this class to create
                  instances of various types of break iterators. In particular,
                  use &lt;code&gt;getWordInstance&lt;/code&gt;, &lt;code&gt;getLineInstance&lt;/code&gt;,
                  &lt;code&gt;getSentenceInstance&lt;/code&gt;, and &lt;code&gt;getCharacterInstance&lt;/code&gt;
                  to create &lt;code&gt;BreakIterator&lt;/code&gt;s that perform
                  word, line, sentence, and character boundary analysis respectively.
                  A single &lt;code&gt;BreakIterator&lt;/code&gt; can work only on one unit
                  (word, line, sentence, and so on). You must use a different iterator
                  for each unit boundary analysis you wish to perform.
                  &lt;p&gt;&lt;a name=&quot;line&quot;&gt;&lt;/a&gt;
                  Line boundary analysis determines where a text string can be
                  broken when line-wrapping. The mechanism correctly handles
                  punctuation and hyphenated words. Actual line breaking needs
                  to also consider the available line width and is handled by
                  higher-level software.
                  &lt;p&gt;&lt;a name=&quot;sentence&quot;&gt;&lt;/a&gt;
                  Sentence boundary analysis allows selection with correct interpretation
                  of periods within numbers and abbreviations, and trailing punctuation
                  marks such as quotation marks and parentheses.
                  &lt;p&gt;&lt;a name=&quot;word&quot;&gt;&lt;/a&gt;
                  Word boundary analysis is used by search and replace functions, as
                  well as within text editing applications that allow the user to
                  select words with a double click. Word selection provides correct
                  interpretation of punctuation marks within and following
                  words. Characters that are not part of a word, such as symbols
                  or punctuation marks, have word-breaks on both sides.
                  &lt;p&gt;&lt;a name=&quot;character&quot;&gt;&lt;/a&gt;
                  Character boundary analysis allows users to interact with characters
                  as they expect to, for example, when moving the cursor through a text
                  string. Character boundary analysis provides correct navigation
                  through character strings, regardless of how the character is stored.
                  The boundaries returned may be those of supplementary characters,
                  combining character sequences, or ligature clusters.
                  For example, an accented character might be stored as a base character
                  and a diacritical mark. What users consider to be a character can
                  differ between languages.
                  &lt;p&gt;
                  The &lt;code&gt;BreakIterator&lt;/code&gt; instances returned by the factory methods
                  of this class are intended for use with natural languages only, not for
                  programming language text. It is however possible to define subclasses
                  that tokenize a programming language.
                  &lt;P&gt;
                  &lt;strong&gt;Examples&lt;/strong&gt;:&lt;P&gt;
                  Creating and using text boundaries:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public static void main(String args[]) {
                  if (args.length == 1) {
                  String stringToExamine = args[0];
                  //print each word in order
                  BreakIterator boundary = BreakIterator.getWordInstance();
                  boundary.setText(stringToExamine);
                  printEachForward(boundary, stringToExamine);
                  //print each sentence in reverse order
                  boundary = BreakIterator.getSentenceInstance(Locale.US);
                  boundary.setText(stringToExamine);
                  printEachBackward(boundary, stringToExamine);
                  printFirst(boundary, stringToExamine);
                  printLast(boundary, stringToExamine);
                  }
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  Print each element in order:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public static void printEachForward(BreakIterator boundary, String source) {
                  int start = boundary.first();
                  for (int end = boundary.next();
                  end != BreakIterator.DONE;
                  start = end, end = boundary.next()) {
                  System.out.println(source.substring(start,end));
                  }
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  Print each element in reverse order:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public static void printEachBackward(BreakIterator boundary, String source) {
                  int end = boundary.last();
                  for (int start = boundary.previous();
                  start != BreakIterator.DONE;
                  end = start, start = boundary.previous()) {
                  System.out.println(source.substring(start,end));
                  }
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  Print first element:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public static void printFirst(BreakIterator boundary, String source) {
                  int start = boundary.first();
                  int end = boundary.next();
                  System.out.println(source.substring(start,end));
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  Print last element:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public static void printLast(BreakIterator boundary, String source) {
                  int end = boundary.last();
                  int start = boundary.previous();
                  System.out.println(source.substring(start,end));
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  Print the element at a specified position:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public static void printAt(BreakIterator boundary, int pos, String source) {
                  int end = boundary.following(pos);
                  int start = boundary.previous();
                  System.out.println(source.substring(start,end));
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  Find the next word:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public static int nextWordStartAfter(int pos, String text) {
                  BreakIterator wb = BreakIterator.getWordInstance();
                  wb.setText(text);
                  int last = wb.following(pos);
                  int current = wb.next();
                  while (current != BreakIterator.DONE) {
                  for (int p = last; p &lt; current; p++) {
                  if (Character.isLetter(text.codePointAt(p)))
                  return last;
                  }
                  last = current;
                  current = wb.next();
                  }
                  return BreakIterator.DONE;
                  }
                  &lt;/pre&gt;
                  (The iterator returned by BreakIterator.getWordInstance() is unique in that
                  the break positions it returns don&apos;t represent both the start and end of the
                  thing being iterated over.  That is, a sentence-break iterator returns breaks
                  that each represent the end of one sentence and the beginning of the next.
                  With the word-break iterator, the characters between two boundaries might be a
                  word, or they might be the punctuation or whitespace between two words.  The
                  above code uses a simple heuristic to determine which boundary is the beginning
                  of a word: If the characters between this boundary and the next boundary
                  include at least one letter (this can be an alphabetical letter, a CJK ideograph,
                  a Hangul syllable, a Kana character, etc.), then the text between this boundary
                  and the next is a word; otherwise, it&apos;s the material between words.)
                  &lt;/blockquote&gt;                
                <see>
                    CharacterIterator                    
                </see>
            </javadoc>
            <javadoc line="240">
                Constructor. BreakIterator is stateless and has no default behavior.                
            </javadoc>
            <method name="BreakIterator" type="constructor" line="244"/>
            <javadoc line="247">
                Create a copy of this iterator                
                <return>
                    A copy of this                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="252">
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <declaration name="DONE" type="int" line="261"/>
            <javadoc line="261">
                DONE is returned by previous(), next(), next(int), preceding(int)
                  and following(int) when either the first or last text boundary has been
                  reached.                
            </javadoc>
            <method name="first" type="int" line="268"/>
            <javadoc line="268">
                Returns the first boundary. The iterator&apos;s current position is set
                  to the first text boundary.                
                <return>
                    The character index of the first text boundary.                    
                </return>
            </javadoc>
            <method name="last" type="int" line="275"/>
            <javadoc line="275">
                Returns the last boundary. The iterator&apos;s current position is set
                  to the last text boundary.                
                <return>
                    The character index of the last text boundary.                    
                </return>
            </javadoc>
            <method name="next" type="int" line="282"/>
            <javadoc line="282">
                Returns the nth boundary from the current boundary. If either
                  the first or last text boundary has been reached, it returns
                  &lt;code&gt;BreakIterator.DONE&lt;/code&gt; and the current position is set to either
                  the first or last text boundary depending on which one is reached. Otherwise,
                  the iterator&apos;s current position is set to the new boundary.
                  For example, if the iterator&apos;s current position is the mth text boundary
                  and three more boundaries exist from the current boundary to the last text
                  boundary, the next(2) call will return m + 2. The new text position is set
                  to the (m + 2)th text boundary. A next(4) call would return
                  &lt;code&gt;BreakIterator.DONE&lt;/code&gt; and the last text boundary would become the
                  new text position.                
                <param>
                    n which boundary to return.  A value of 0
                      does nothing.  Negative values move to previous boundaries
                      and positive values move to later boundaries.                    
                </param>
                <return>
                    The character index of the nth boundary from the current position
                      or <code>BreakIterator.DONE</code> if either first or last text boundary
                      has been reached.                    
                </return>
            </javadoc>
            <method name="next" type="int" line="303"/>
            <javadoc line="303">
                Returns the boundary following the current boundary. If the current boundary
                  is the last text boundary, it returns &lt;code&gt;BreakIterator.DONE&lt;/code&gt; and
                  the iterator&apos;s current position is unchanged. Otherwise, the iterator&apos;s
                  current position is set to the boundary following the current boundary.                
                <return>
                    The character index of the next text boundary or
                      <code>BreakIterator.DONE</code> if the current boundary is the last text
                      boundary.
                      Equivalent to next(1).                    
                </return>
                <see>
                    #next(int)                    
                </see>
            </javadoc>
            <method name="previous" type="int" line="316"/>
            <javadoc line="316">
                Returns the boundary preceding the current boundary. If the current boundary
                  is the first text boundary, it returns &lt;code&gt;BreakIterator.DONE&lt;/code&gt; and
                  the iterator&apos;s current position is unchanged. Otherwise, the iterator&apos;s
                  current position is set to the boundary preceding the current boundary.                
                <return>
                    The character index of the previous text boundary or
                      <code>BreakIterator.DONE</code> if the current boundary is the first text
                      boundary.                    
                </return>
            </javadoc>
            <method name="following" type="int" line="327"/>
            <javadoc line="327">
                Returns the first boundary following the specified character offset. If the
                  specified offset equals to the last text boundary, it returns
                  &lt;code&gt;BreakIterator.DONE&lt;/code&gt; and the iterator&apos;s current position is unchanged.
                  Otherwise, the iterator&apos;s current position is set to the returned boundary.
                  The value returned is always greater than the offset or the value
                  &lt;code&gt;BreakIterator.DONE&lt;/code&gt;.                
                <param>
                    offset the character offset to begin scanning.                    
                </param>
                <return>
                    The first boundary after the specified offset or
                      <code>BreakIterator.DONE</code> if the last text boundary is passed in
                      as the offset.                    
                </return>
                <exception>
                    IllegalArgumentException if the specified offset is less than
                      the first text boundary or greater than the last text boundary.                    
                </exception>
            </javadoc>
            <javadoc line="343">
                Returns the last boundary preceding the specified character offset. If the
                  specified offset equals to the first text boundary, it returns
                  &lt;code&gt;BreakIterator.DONE&lt;/code&gt; and the iterator&apos;s current position is unchanged.
                  Otherwise, the iterator&apos;s current position is set to the returned boundary.
                  The value returned is always less than the offset or the value
                  &lt;code&gt;BreakIterator.DONE&lt;/code&gt;.                
                <param>
                    offset the characater offset to begin scanning.                    
                </param>
                <return>
                    The last boundary before the specified offset or
                      <code>BreakIterator.DONE</code> if the first text boundary is passed in
                      as the offset.                    
                </return>
                <exception>
                    IllegalArgumentException if the specified offset is less than
                      the first text boundary or greater than the last text boundary.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="preceding" type="int" line="358">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <comment line="360">
                    NOTE:  This implementation is here solely because we can&apos;t add new
                     abstract methods to an existing class.  There is almost ALWAYS a
                     better, faster way to do this.                    
                </comment>
                <declaration name="pos" type="int" line="362"/>
            </method>
            <javadoc line="368">
                Returns true if the specified character offset is a text boundary.                
                <param>
                    offset the character offset to check.                    
                </param>
                <return>
                    <code>true</code> if "offset" is a boundary position,
                      <code>false</code> otherwise.                    
                </return>
                <exception>
                    IllegalArgumentException if the specified offset is less than
                      the first text boundary or greater than the last text boundary.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isBoundary" type="boolean" line="377">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <comment line="379">
                    NOTE: This implementation probably is wrong for most situations
                     because it fails to take into account the possibility that a
                     CharacterIterator passed to setText() may not have a begin offset
                     of 0.  But since the abstract BreakIterator doesn&apos;t have that
                     knowledge, it assumes the begin offset is 0.  If you subclass
                     BreakIterator, copy the SimpleTextBoundary implementation of this
                     function into your subclass.  [This should have been abstract at
                     this level, but it&apos;s too late to fix that now.]                    
                </comment>
                <scope line="386"/>
                <declaration name="boundary" type="int" line="389"/>
                <scope line="390"/>
            </method>
            <method name="current" type="int" line="396"/>
            <javadoc line="396">
                Returns character index of the text boundary that was most
                  recently returned by next(), next(int), previous(), first(), last(),
                  following(int) or preceding(int). If any of these methods returns
                  &lt;code&gt;BreakIterator.DONE&lt;/code&gt; because either first or last text boundary
                  has been reached, it returns the first or last text boundary depending on
                  which one is reached.                
                <return>
                    The text boundary returned from the above methods, first or last
                      text boundary.                    
                </return>
                <see>
                    #next()                    
                </see>
                <see>
                    #next(int)                    
                </see>
                <see>
                    #previous()                    
                </see>
                <see>
                    #first()                    
                </see>
                <see>
                    #last()                    
                </see>
                <see>
                    #following(int)                    
                </see>
                <see>
                    #preceding(int)                    
                </see>
            </javadoc>
            <method name="getText" type="CharacterIterator" line="415"/>
            <javadoc line="415">
                Get the text being scanned                
                <return>
                    the text being scanned                    
                </return>
            </javadoc>
            <javadoc line="421">
                Set a new text string to be scanned.  The current scan
                  position is reset to first().                
                <param>
                    newText new text to scan.                    
                </param>
            </javadoc>
            <method name="setText" type="void" line="427">
                <params>
                    <param name="newText" type="String"/>
                </params>
            </method>
            <method name="setText" type="void" line="431"/>
            <javadoc line="431">
                Set a new text for scanning.  The current scan
                  position is reset to first().                
                <param>
                    newText new text to scan.                    
                </param>
            </javadoc>
            <declaration name="CHARACTER_INDEX" type="int" line="438"/>
            <declaration name="WORD_INDEX" type="int" line="439"/>
            <declaration name="LINE_INDEX" type="int" line="440"/>
            <declaration name="SENTENCE_INDEX" type="int" line="441"/>
            <declaration name="iterCache" type="SoftReference[]" line="442"/>
            <javadoc line="444">
                Returns a new &lt;code&gt;BreakIterator&lt;/code&gt; instance
                  for &lt;a href=&quot;#word&quot;&gt;word breaks&lt;/a&gt;
                  for the {@linkplain Locale#getDefault() default locale}.                
                <return>
                    A break iterator for word breaks                    
                </return>
            </javadoc>
            <method name="getWordInstance" type="BreakIterator" line="451"/>
            <javadoc line="455">
                Returns a new &lt;code&gt;BreakIterator&lt;/code&gt; instance
                  for &lt;a href=&quot;#word&quot;&gt;word breaks&lt;/a&gt;
                  for the given locale.                
                <param>
                    locale the desired locale                    
                </param>
                <return>
                    A break iterator for word breaks                    
                </return>
                <exception>
                    NullPointerException if <code>locale</code> is null                    
                </exception>
            </javadoc>
            <method name="getWordInstance" type="BreakIterator" line="464">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="471">
                Returns a new &lt;code&gt;BreakIterator&lt;/code&gt; instance
                  for &lt;a href=&quot;#line&quot;&gt;line breaks&lt;/a&gt;
                  for the {@linkplain Locale#getDefault() default locale}.                
                <return>
                    A break iterator for line breaks                    
                </return>
            </javadoc>
            <method name="getLineInstance" type="BreakIterator" line="478"/>
            <javadoc line="482">
                Returns a new &lt;code&gt;BreakIterator&lt;/code&gt; instance
                  for &lt;a href=&quot;#line&quot;&gt;line breaks&lt;/a&gt;
                  for the given locale.                
                <param>
                    locale the desired locale                    
                </param>
                <return>
                    A break iterator for line breaks                    
                </return>
                <exception>
                    NullPointerException if <code>locale</code> is null                    
                </exception>
            </javadoc>
            <method name="getLineInstance" type="BreakIterator" line="491">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="498">
                Returns a new &lt;code&gt;BreakIterator&lt;/code&gt; instance
                  for &lt;a href=&quot;#character&quot;&gt;character breaks&lt;/a&gt;
                  for the {@linkplain Locale#getDefault() default locale}.                
                <return>
                    A break iterator for character breaks                    
                </return>
            </javadoc>
            <method name="getCharacterInstance" type="BreakIterator" line="505"/>
            <javadoc line="509">
                Returns a new &lt;code&gt;BreakIterator&lt;/code&gt; instance
                  for &lt;a href=&quot;#character&quot;&gt;character breaks&lt;/a&gt;
                  for the given locale.                
                <param>
                    locale the desired locale                    
                </param>
                <return>
                    A break iterator for character breaks                    
                </return>
                <exception>
                    NullPointerException if <code>locale</code> is null                    
                </exception>
            </javadoc>
            <method name="getCharacterInstance" type="BreakIterator" line="518">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="525">
                Returns a new &lt;code&gt;BreakIterator&lt;/code&gt; instance
                  for &lt;a href=&quot;#sentence&quot;&gt;sentence breaks&lt;/a&gt;
                  for the {@linkplain Locale#getDefault() default locale}.                
                <return>
                    A break iterator for sentence breaks                    
                </return>
            </javadoc>
            <method name="getSentenceInstance" type="BreakIterator" line="532"/>
            <javadoc line="536">
                Returns a new &lt;code&gt;BreakIterator&lt;/code&gt; instance
                  for &lt;a href=&quot;#sentence&quot;&gt;sentence breaks&lt;/a&gt;
                  for the given locale.                
                <param>
                    locale the desired locale                    
                </param>
                <return>
                    A break iterator for sentence breaks                    
                </return>
                <exception>
                    NullPointerException if <code>locale</code> is null                    
                </exception>
            </javadoc>
            <method name="getSentenceInstance" type="BreakIterator" line="545">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="getBreakInstance" type="BreakIterator" line="555">
                <params>
                    <param name="locale" type="Locale"/>
                    <param name="type" type="int"/>
                    <param name="dataName" type="String"/>
                    <param name="dictionaryName" type="String"/>
                </params>
                <scope line="556">
                    <declaration name="cache" type="BreakIteratorCache" line="557"/>
                    <scope line="558">
                        <scope line="559"/>
                    </scope>
                </scope>
                <declaration name="result" type="BreakIterator" line="565"/>
                <declaration name="cache" type="BreakIteratorCache" line="569"/>
            </method>
            <method name="getBundle" type="ResourceBundle" line="574">
                <params>
                    <param name="baseName" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <anonymous_class line="575">
                    <method name="run" type="Object" line="576"/>
                </anonymous_class>
            </method>
            <method name="createBreakInstance" type="BreakIterator" line="585">
                <params>
                    <param name="locale" type="Locale"/>
                    <param name="type" type="int"/>
                    <param name="dataName" type="String"/>
                    <param name="dictionaryName" type="String"/>
                </params>
                <comment line="588">
                    Check whether a provider can provide an implementation that&apos;s closer
                     to the requested locale than what the Java runtime itself can provide.                    
                </comment>
                <declaration name="pool" type="LocaleServiceProviderPool" line="589"/>
                <scope line="591">
                    <declaration name="providersInstance" type="BreakIterator" line="592"/>
                    <scope line="595"/>
                </scope>
                <declaration name="bundle" type="ResourceBundle" line="600"/>
                <declaration name="classNames" type="String[]" line="602"/>
                <declaration name="dataFile" type="String" line="604"/>
                <scope line="606">
                    <scope line="607"/>
                    <scope line="610">
                        <declaration name="dictionaryFile" type="String" line="611"/>
                    </scope>
                    <scope line="614"/>
                </scope>
                <scope line="619"/>
            </method>
            <javadoc line="624">
                Returns an array of all locales for which the
                  &lt;code&gt;getInstance&lt;/code&gt; methods of this class can return
                  localized instances.
                  The returned array represents the union of locales supported by the Java
                  runtime and by installed{@link java.text.spi.BreakIteratorProvider BreakIteratorProvider} implementations.
                  It must contain at least a &lt;code&gt;Locale&lt;/code&gt;
                  instance equal to {@link java.util.Locale#US Locale.US}.                
                <return>
                    An array of locales for which localized
                      <code>BreakIterator</code> instances are available.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="638">
                <declaration name="pool" type="LocaleServiceProviderPool" line="639"/>
            </method>
            <class name="BreakIteratorCache" line="644">
                <declaration name="iter" type="BreakIterator" line="646"/>
                <declaration name="locale" type="Locale" line="647"/>
                <method name="BreakIteratorCache" type="constructor" line="649">
                    <params>
                        <param name="locale" type="Locale"/>
                        <param name="iter" type="BreakIterator"/>
                    </params>
                </method>
                <method name="getLocale" type="Locale" line="654"/>
                <method name="createBreakInstance" type="BreakIterator" line="658"/>
            </class>
            <method name="getLong" type="long" line="663">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="num" type="long" line="664"/>
                <scope line="665"/>
            </method>
            <method name="getInt" type="int" line="671">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="num" type="int" line="672"/>
                <scope line="673"/>
            </method>
            <method name="getShort" type="short" line="679">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="num" type="short" line="680"/>
            </method>
            <class name="BreakIteratorGetter" line="685">
                <implements interface="LocaleServiceProviderPool.LocalizedObjectGetter">
                    <type_params>
                        <type_param name="BreakIteratorProvider"/>
                        <type_param name="BreakIterator"/>
                    </type_params>
                </implements>
                <javadoc line="685">
                    Obtains a BreakIterator instance from a BreakIteratorProvider
                      implementation.                    
                </javadoc>
                <declaration name="INSTANCE" type="BreakIteratorGetter" line="691"/>
                <method name="getObject" type="BreakIterator" line="697">
                    <params>
                        <param name="breakIteratorProvider" type="BreakIteratorProvider"/>
                        <param name="locale" type="Locale"/>
                        <param name="key" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
    </source>