<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.util"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <class name="AttributedString" line="4">
            <javadoc line="4">
                An AttributedString holds text and related attribute information. It
                  may be used as the actual data storage in some cases where a text
                  reader wants to access attributed text through the AttributedCharacterIterator
                  interface.
                  &lt;p&gt;
                  An attribute is a key/value pair, identified by the key.  No two
                  attributes on a given character can have the same key.
                  &lt;p&gt;The values for an attribute are immutable, or must not be mutated
                  by clients or storage.  They are always passed by reference, and not
                  cloned.                
                <see>
                    AttributedCharacterIterator                    
                </see>
                <see>
                    Annotation                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="ARRAY_SIZE_INCREMENT" type="int" line="20"/>
            <declaration name="text" type="String" line="21"/>
            <declaration name="runArraySize" type="int" line="22"/>
            <declaration name="runCount" type="int" line="23"/>
            <declaration name="runStarts" type="int" line="24"/>
            <declaration name="runAttributes" type="Vector" line="25"/>
            <declaration name="runAttributeValues" type="Vector" line="26"/>
            <javadoc line="27">
                Constructs an AttributedString instance with the given
                  AttributedCharacterIterators.                
                <param>
                    iterators AttributedCharacterIterators to construct
                      AttributedString from.                    
                </param>
                <throws>
                    NullPointerException if iterators is null                    
                </throws>
            </javadoc>
            <method name="AttributedString" type="constructor" line="34">
                <params>
                    <param name="iterators" type="AttributedCharacterIterator[]"/>
                </params>
                <scope line="35"/>
                <scope line="38"/>
                <scope line="41">
                    <declaration name="buffer" type="StringBuffer" line="42"/>
                    <scope line="43"/>
                    <scope line="47">
                        <declaration name="offset" type="int" line="48"/>
                        <declaration name="last" type="Map" line="49"/>
                        <scope line="50">
                            <declaration name="iterator" type="AttributedCharacterIterator" line="51"/>
                            <declaration name="start" type="int" line="52"/>
                            <declaration name="end" type="int" line="53"/>
                            <declaration name="index" type="int" line="54"/>
                            <scope line="55">
                                <declaration name="attrs" type="Map" line="57"/>
                                <scope line="58"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="69">
                Constructs an AttributedString instance with the given text.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;text&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="AttributedString" type="constructor" line="74">
                <params>
                    <param name="text" type="String"/>
                </params>
                <scope line="75"/>
            </method>
            <javadoc line="80">
                Constructs an AttributedString instance with the given text and attributes.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <param>
                    attributes The attributes that apply to the entire string.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;text&lt;/code&gt; or
                      &lt;code&gt;attributes&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the text has length 0
                      and the attributes parameter is not an empty Map (attributes
                      cannot be applied to a 0-length range).                    
                </exception>
            </javadoc>
            <method name="AttributedString" type="constructor" line="90">
                <params>
                    <param name="text" type="String"/>
                    <param name="attributes" type="Map&lt;? extends Attribute,?&gt;"/>
                </params>
                <scope line="91"/>
                <scope line="95"/>
                <declaration name="attributeCount" type="int" line="99"/>
                <scope line="100">
                    <declaration name="newRunAttributes" type="Vector" line="102"/>
                    <declaration name="newRunAttributeValues" type="Vector" line="103"/>
                    <declaration name="iterator" type="Iterator" line="106"/>
                    <scope line="107">
                        <declaration name="entry" type="Map.Entry" line="108"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="114">
                Constructs an AttributedString instance with the given attributed
                  text represented by AttributedCharacterIterator.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;text&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="AttributedString" type="constructor" line="120">
                <params>
                    <param name="text" type="AttributedCharacterIterator"/>
                </params>
            </method>
            <javadoc line="123">
                Constructs an AttributedString instance with the subrange of
                  the given attributed text represented by
                  AttributedCharacterIterator. If the given range produces an
                  empty text, all attributes will be discarded.  Note that any
                  attributes wrapped by an Annotation object are discarded for a
                  subrange of the original attribute range.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <param>
                    beginIndex Index of the first character of the range.                    
                </param>
                <param>
                    endIndex Index of the character following the last character
                      of the range.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;text&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the subrange given by
                      beginIndex and endIndex is out of the text range.                    
                </exception>
                <see>
                    java.text.Annotation                    
                </see>
            </javadoc>
            <method name="AttributedString" type="constructor" line="139">
                <params>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
            </method>
            <javadoc line="142">
                Constructs an AttributedString instance with the subrange of
                  the given attributed text represented by
                  AttributedCharacterIterator.  Only attributes that match the
                  given attributes will be incorporated into the instance. If the
                  given range produces an empty text, all attributes will be
                  discarded. Note that any attributes wrapped by an Annotation
                  object are discarded for a subrange of the original attribute
                  range.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <param>
                    beginIndex Index of the first character of the range.                    
                </param>
                <param>
                    endIndex Index of the character following the last character
                      of the range.                    
                </param>
                <param>
                    attributes Specifies attributes to be extracted
                      from the text. If null is specified, all available attributes will
                      be used.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;text&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the subrange given by
                      beginIndex and endIndex is out of the text range.                    
                </exception>
                <see>
                    java.text.Annotation                    
                </see>
            </javadoc>
            <method name="AttributedString" type="constructor" line="163">
                <params>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                    <param name="attributes" type="Attribute[]"/>
                </params>
                <scope line="164"/>
                <declaration name="textBeginIndex" type="int" line="167"/>
                <declaration name="textEndIndex" type="int" line="168"/>
                <declaration name="textBuffer" type="StringBuffer" line="170"/>
                <declaration name="keys" type="HashSet" line="175"/>
                <scope line="176"/>
                <scope line="179"/>
                <declaration name="itr" type="Iterator" line="184"/>
                <scope line="185">
                    <declaration name="attributeKey" type="Attribute" line="186"/>
                    <scope line="188">
                        <declaration name="start" type="int" line="189"/>
                        <declaration name="limit" type="int" line="190"/>
                        <declaration name="value" type="Object" line="191"/>
                        <scope line="192">
                            <scope line="193">
                                <scope line="194"/>
                                <scope line="197"/>
                            </scope>
                            <scope line="201">
                                <scope line="203">
                                    <scope line="206"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="216">
                Adds an attribute to the entire string.                
                <param>
                    attribute the attribute key                    
                </param>
                <param>
                    value the value of the attribute; may be null                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;attribute&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the AttributedString has length 0
                      (attributes cannot be applied to a 0-length range).                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="224">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="225"/>
                <declaration name="len" type="int" line="228"/>
                <scope line="229"/>
            </method>
            <javadoc line="234">
                Adds an attribute to a subrange of the string.                
                <param>
                    attribute the attribute key                    
                </param>
                <param>
                    value The value of the attribute. May be null.                    
                </param>
                <param>
                    beginIndex Index of the first character of the range.                    
                </param>
                <param>
                    endIndex Index of the character following the last character of the range.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;attribute&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if beginIndex is less then 0, endIndex is
                      greater than the length of the string, or beginIndex and endIndex together don&apos;t
                      define a non-empty subrange of the string.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="245">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="value" type="Object"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="246"/>
                <scope line="249"/>
            </method>
            <javadoc line="254">
                Adds a set of attributes to a subrange of the string.                
                <param>
                    attributes The attributes to be added to the string.                    
                </param>
                <param>
                    beginIndex Index of the first character of the range.                    
                </param>
                <param>
                    endIndex Index of the character following the last
                      character of the range.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;attributes&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if beginIndex is less then
                      0, endIndex is greater than the length of the string, or
                      beginIndex and endIndex together don&apos;t define a non-empty
                      subrange of the string and the attributes parameter is not an
                      empty Map.                    
                </exception>
            </javadoc>
            <method name="addAttributes" type="void" line="267">
                <params>
                    <param name="attributes" type="Map&lt;? extends Attribute,?&gt;"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="268"/>
                <scope line="271"/>
                <scope line="274"/>
                <scope line="278"/>
                <declaration name="beginRunIndex" type="int" line="281"/>
                <declaration name="endRunIndex" type="int" line="282"/>
                <declaration name="iterator" type="Iterator" line="283"/>
                <scope line="284">
                    <declaration name="entry" type="Map.Entry" line="285"/>
                </scope>
            </method>
            <method name="addAttributeImpl" type="void" line="289">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="value" type="Object"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="290"/>
                <declaration name="beginRunIndex" type="int" line="293"/>
                <declaration name="endRunIndex" type="int" line="294"/>
            </method>
            <method name="createRunAttributeDataVectors" type="void" line="297">
                <declaration name="newRunStarts" type="int" line="298"/>
                <declaration name="newRunAttributes" type="Vector" line="299"/>
                <declaration name="newRunAttributeValues" type="Vector" line="300"/>
            </method>
            <method name="ensureRunBreak" type="int" line="307">
                <params>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="310">
                Ensures there is a run break at offset, returning the index of
                  the run. If this results in splitting a run, two things can happen:
                  &lt;ul&gt;
                  &lt;li&gt;If copyAttrs is true, the attributes from the existing run
                  will be placed in both of the newly created runs.
                  &lt;li&gt;If copyAttrs is false, the attributes from the existing run
                  will NOT be copied to the run to the right (&gt;= offset) of the break,
                  but will exist on the run to the left (&lt; offset).
                  &lt;/ul&gt;                
            </javadoc>
            <method name="ensureRunBreak" type="int" line="321">
                <params>
                    <param name="offset" type="int"/>
                    <param name="copyAttrs" type="boolean"/>
                </params>
                <scope line="322"/>
                <declaration name="runIndex" type="int" line="325"/>
                <scope line="326"/>
                <scope line="329"/>
                <scope line="332">
                    <declaration name="newArraySize" type="int" line="333"/>
                    <declaration name="newRunStarts" type="int" line="334"/>
                    <declaration name="newRunAttributes" type="Vector" line="335"/>
                    <declaration name="newRunAttributeValues" type="Vector" line="336"/>
                    <scope line="337"/>
                </scope>
                <declaration name="newRunAttributes" type="Vector" line="347"/>
                <declaration name="newRunAttributeValues" type="Vector" line="348"/>
                <scope line="349">
                    <declaration name="oldRunAttributes" type="Vector" line="350"/>
                    <declaration name="oldRunAttributeValues" type="Vector" line="351"/>
                    <scope line="352"/>
                    <scope line="355"/>
                </scope>
                <scope line="360"/>
            </method>
            <method name="addAttributeRunData" type="void" line="370">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="value" type="Object"/>
                    <param name="beginRunIndex" type="int"/>
                    <param name="endRunIndex" type="int"/>
                </params>
                <scope line="371">
                    <declaration name="keyValueIndex" type="int" line="372"/>
                    <scope line="373">
                        <declaration name="newRunAttributes" type="Vector" line="374"/>
                        <declaration name="newRunAttributeValues" type="Vector" line="375"/>
                    </scope>
                    <scope line="379"/>
                    <scope line="382">
                        <declaration name="oldSize" type="int" line="383"/>
                        <scope line="385"/>
                        <scope line="388"/>
                    </scope>
                    <scope line="393"/>
                </scope>
            </method>
            <javadoc line="398">
                Creates an AttributedCharacterIterator instance that provides access to the entire contents of
                  this string.                
                <return>
                    An iterator providing access to the text and its attributes.                    
                </return>
            </javadoc>
            <method name="getIterator" type="AttributedCharacterIterator" line="403"/>
            <javadoc line="406">
                Creates an AttributedCharacterIterator instance that provides access to
                  selected contents of this string.
                  Information about attributes not listed in attributes that the
                  implementor may have need not be made accessible through the iterator.
                  If the list is null, all available attribute information should be made
                  accessible.                
                <param>
                    attributes a list of attributes that the client is interested in                    
                </param>
                <return>
                    an iterator providing access to the entire text and its selected attributes                    
                </return>
            </javadoc>
            <method name="getIterator" type="AttributedCharacterIterator" line="416">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <javadoc line="419">
                Creates an AttributedCharacterIterator instance that provides access to
                  selected contents of this string.
                  Information about attributes not listed in attributes that the
                  implementor may have need not be made accessible through the iterator.
                  If the list is null, all available attribute information should be made
                  accessible.                
                <param>
                    attributes a list of attributes that the client is interested in                    
                </param>
                <param>
                    beginIndex the index of the first character                    
                </param>
                <param>
                    endIndex the index of the character following the last character                    
                </param>
                <return>
                    an iterator providing access to the text and its attributes                    
                </return>
                <exception>
                    IllegalArgumentException if beginIndex is less then 0,
                      endIndex is greater than the length of the string, or beginIndex is
                      greater than endIndex.                    
                </exception>
            </javadoc>
            <method name="getIterator" type="AttributedCharacterIterator" line="434">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
            </method>
            <method name="length" type="int" line="437"/>
            <method name="charAt" type="char" line="440">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getAttribute" type="Object" line="443">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="runIndex" type="int"/>
                </params>
                <declaration name="currentRunAttributes" type="Vector" line="444"/>
                <declaration name="currentRunAttributeValues" type="Vector" line="445"/>
                <scope line="446"/>
                <declaration name="attributeIndex" type="int" line="449"/>
                <scope line="450"/>
                <scope line="453"/>
            </method>
            <method name="getAttributeCheckRange" type="Object" line="457">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="runIndex" type="int"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <declaration name="value" type="Object" line="458"/>
                <scope line="459">
                    <scope line="460">
                        <declaration name="currIndex" type="int" line="461"/>
                        <declaration name="runStart" type="int" line="462"/>
                        <scope line="463"/>
                        <scope line="467"/>
                    </scope>
                    <declaration name="textLength" type="int" line="471"/>
                    <scope line="472">
                        <declaration name="currIndex" type="int" line="473"/>
                        <declaration name="runLimit" type="int" line="474"/>
                        <scope line="475"/>
                        <scope line="479"/>
                    </scope>
                </scope>
            </method>
            <method name="attributeValuesMatch" type="boolean" line="486">
                <params>
                    <param name="attributes" type="Set"/>
                    <param name="runIndex1" type="int"/>
                    <param name="runIndex2" type="int"/>
                </params>
                <declaration name="iterator" type="Iterator" line="487"/>
                <scope line="488">
                    <declaration name="key" type="Attribute" line="489"/>
                    <scope line="490"/>
                </scope>
            </method>
            <method name="valuesMatch" type="boolean" line="496">
                <params>
                    <param name="value1" type="Object"/>
                    <param name="value2" type="Object"/>
                </params>
                <scope line="497"/>
                <scope line="500"/>
            </method>
            <javadoc line="504">
                Appends the contents of the CharacterIterator iterator into the
                  StringBuffer buf.                
            </javadoc>
            <method name="appendContents" type="void" line="508">
                <params>
                    <param name="buf" type="StringBuffer"/>
                    <param name="iterator" type="CharacterIterator"/>
                </params>
                <declaration name="index" type="int" line="509"/>
                <declaration name="end" type="int" line="510"/>
                <scope line="511"/>
            </method>
            <javadoc line="516">
                Sets the attributes for the range from offset to the next run break
                  (typically the end of the text) to the ones specified in attrs.
                  This is only meant to be called from the constructor!                
            </javadoc>
            <method name="setAttributes" type="void" line="521">
                <params>
                    <param name="attrs" type="Map"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="522"/>
                <declaration name="index" type="int" line="525"/>
                <declaration name="size" type="int" line="526"/>
                <scope line="527">
                    <declaration name="runAttrs" type="Vector" line="528"/>
                    <declaration name="runValues" type="Vector" line="529"/>
                    <declaration name="iterator" type="Iterator" line="530"/>
                    <scope line="531">
                        <declaration name="entry" type="Map.Entry" line="532"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="540">
                Returns true if the attributes specified in last and attrs differ.                
            </javadoc>
            <method name="mapsDiffer" type="boolean" line="543">
                <params>
                    <param name="last" type="Map"/>
                    <param name="attrs" type="Map"/>
                </params>
                <scope line="544"/>
            </method>
            <class name="AttributedStringIterator" line="549">
                <implements interface="AttributedCharacterIterator"/>
                <declaration name="beginIndex" type="int" line="550"/>
                <declaration name="endIndex" type="int" line="551"/>
                <declaration name="relevantAttributes" type="Attribute[]" line="552"/>
                <declaration name="currentIndex" type="int" line="553"/>
                <declaration name="currentRunIndex" type="int" line="554"/>
                <declaration name="currentRunStart" type="int" line="555"/>
                <declaration name="currentRunLimit" type="int" line="556"/>
                <method name="AttributedStringIterator" type="constructor" line="557">
                    <params>
                        <param name="attributes" type="Attribute[]"/>
                        <param name="beginIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <scope line="558"/>
                    <scope line="565"/>
                </method>
                <method name="equals" type="boolean" line="569">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="570"/>
                    <scope line="573"/>
                    <declaration name="that" type="AttributedStringIterator" line="576"/>
                </method>
                <method name="hashCode" type="int" line="581"/>
                <method name="clone" type="Object" line="584">
                    <scope line="585">
                        <declaration name="other" type="AttributedStringIterator" line="586"/>
                    </scope>
                    <scope line="589"/>
                </method>
                <method name="first" type="char" line="593"/>
                <method name="last" type="char" line="596">
                    <scope line="597"/>
                    <scope line="600"/>
                </method>
                <method name="current" type="char" line="604">
                    <scope line="605"/>
                    <scope line="608"/>
                </method>
                <method name="next" type="char" line="612">
                    <scope line="613"/>
                    <scope line="616"/>
                </method>
                <method name="previous" type="char" line="620">
                    <scope line="621"/>
                    <scope line="624"/>
                </method>
                <method name="setIndex" type="char" line="628">
                    <params>
                        <param name="position" type="int"/>
                    </params>
                </method>
                <method name="getBeginIndex" type="int" line="632"/>
                <method name="getEndIndex" type="int" line="635"/>
                <method name="getIndex" type="int" line="638"/>
                <method name="getRunStart" type="int" line="641"/>
                <method name="getRunStart" type="int" line="644">
                    <params>
                        <param name="attribute" type="Attribute"/>
                    </params>
                    <scope line="645"/>
                    <scope line="648">
                        <declaration name="value" type="Object" line="649"/>
                        <declaration name="runStart" type="int" line="650"/>
                        <declaration name="runIndex" type="int" line="651"/>
                        <scope line="652"/>
                        <scope line="656"/>
                    </scope>
                </method>
                <method name="getRunStart" type="int" line="662">
                    <params>
                        <param name="attributes" type="Set&lt;? extends Attribute&gt;"/>
                    </params>
                    <scope line="663"/>
                    <scope line="666">
                        <declaration name="runStart" type="int" line="667"/>
                        <declaration name="runIndex" type="int" line="668"/>
                        <scope line="669"/>
                        <scope line="673"/>
                    </scope>
                </method>
                <method name="getRunLimit" type="int" line="679"/>
                <method name="getRunLimit" type="int" line="682">
                    <params>
                        <param name="attribute" type="Attribute"/>
                    </params>
                    <scope line="683"/>
                    <scope line="686">
                        <declaration name="value" type="Object" line="687"/>
                        <declaration name="runLimit" type="int" line="688"/>
                        <declaration name="runIndex" type="int" line="689"/>
                        <scope line="690"/>
                        <scope line="694"/>
                    </scope>
                </method>
                <method name="getRunLimit" type="int" line="700">
                    <params>
                        <param name="attributes" type="Set&lt;? extends Attribute&gt;"/>
                    </params>
                    <scope line="701"/>
                    <scope line="704">
                        <declaration name="runLimit" type="int" line="705"/>
                        <declaration name="runIndex" type="int" line="706"/>
                        <scope line="707"/>
                        <scope line="711"/>
                    </scope>
                </method>
                <method name="getAttributes" type="Map&lt;Attribute,Object&gt;" line="717">
                    <scope line="718"/>
                </method>
                <method name="getAllAttributeKeys" type="Set&lt;Attribute&gt;" line="723">
                    <scope line="724"/>
                    <scope line="727">
                        <declaration name="keys" type="Set" line="728"/>
                        <declaration name="i" type="int" line="729"/>
                        <scope line="730">
                            <scope line="731">
                                <declaration name="currentRunAttributes" type="Vector" line="732"/>
                                <scope line="733">
                                    <declaration name="j" type="int" line="734"/>
                                    <scope line="735"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="getAttribute" type="Object" line="745">
                    <params>
                        <param name="attribute" type="Attribute"/>
                    </params>
                    <declaration name="runIndex" type="int" line="746"/>
                    <scope line="747"/>
                </method>
                <method name="getString" type="AttributedString" line="752"/>
                <method name="internalSetIndex" type="char" line="755">
                    <params>
                        <param name="position" type="int"/>
                    </params>
                    <scope line="757"/>
                    <scope line="760"/>
                    <scope line="763"/>
                </method>
                <method name="updateRunInfo" type="void" line="767">
                    <scope line="768"/>
                    <scope line="772">
                        <scope line="773">
                            <declaration name="runIndex" type="int" line="774"/>
                            <scope line="777"/>
                            <scope line="781"/>
                            <scope line="784"/>
                            <scope line="788"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="AttributeMap" line="795">
                <extends class="AbstractMap">
                    <type_params>
                        <type_param name="Attribute"/>
                        <type_param name="Object"/>
                    </type_params>
                </extends>
                <declaration name="runIndex" type="int" line="796"/>
                <declaration name="beginIndex" type="int" line="797"/>
                <declaration name="endIndex" type="int" line="798"/>
                <method name="AttributeMap" type="constructor" line="799">
                    <params>
                        <param name="runIndex" type="int"/>
                        <param name="beginIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                </method>
                <method name="entrySet" type="Set" line="804">
                    <declaration name="set" type="HashSet" line="805"/>
                    <scope line="806">
                        <declaration name="size" type="int" line="807"/>
                        <scope line="808">
                            <declaration name="key" type="Attribute" line="809"/>
                            <declaration name="value" type="Object" line="810"/>
                            <scope line="811">
                                <scope line="813"/>
                            </scope>
                            <declaration name="entry" type="Map.Entry" line="817"/>
                        </scope>
                    </scope>
                </method>
                <method name="get" type="Object" line="823">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
        <class name="AttributeEntry" line="828">
            <implements interface="Map.Entry"/>
            <declaration name="key" type="Attribute" line="829"/>
            <declaration name="value" type="Object" line="830"/>
            <method name="AttributeEntry" type="constructor" line="831">
                <params>
                    <param name="key" type="Attribute"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="835">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="836"/>
                <declaration name="other" type="AttributeEntry" line="839"/>
            </method>
            <method name="getKey" type="Object" line="842"/>
            <method name="getValue" type="Object" line="845"/>
            <method name="setValue" type="Object" line="848">
                <params>
                    <param name="newValue" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="851"/>
            <method name="toString" type="String" line="854"/>
        </class>
    </source>