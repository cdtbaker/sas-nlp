<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.util"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <class name="AttributedString" line="31">
            <comment line="53">
                since there are no vectors of int, we have to use arrays.
                 We allocate them in chunks of 10 elements so we don&apos;t have to allocate all the time.                
            </comment>
            <comment line="57">
                field holding the text                
            </comment>
            <comment line="60">
                fields holding run attribute information
                 run attributes are organized by run                
            </comment>
            <comment line="62">
                current size of the arrays                
            </comment>
            <comment line="63">
                actual number of runs, &lt;= runArraySize                
            </comment>
            <comment line="64">
                start index for each run                
            </comment>
            <comment line="65">
                vector of attribute keys for each run                
            </comment>
            <comment line="66">
                parallel vector of attribute values for each run                
            </comment>
            <comment line="428">
                ensure there&apos;s a run break at offset, return the index of the run                
            </comment>
            <comment line="508">
                add the attribute attribute/value to all runs where beginRunIndex &lt;= runIndex &lt; endRunIndex                
            </comment>
            <comment line="587">
                all (with the exception of length) reading operations are private,
                 since AttributedString instances are accessed through iterators.                
            </comment>
            <comment line="590">
                length is package private so that CharacterIteratorFieldDelegate can
                 access it without creating an AttributedCharacterIterator.                
            </comment>
            <comment line="615">
                gets an attribute value, but returns an annotation only if it&apos;s range does not extend outside the range beginIndex..endIndex                
            </comment>
            <comment line="653">
                returns whether all specified attributes have equal values in the runs with the given indices                
            </comment>
            <comment line="665">
                returns whether the two objects are either both null or equal                
            </comment>
            <comment line="729">
                the iterator class associated with this string class                
            </comment>
            <comment line="1042">
                the map class associated with this string class, giving access to the attributes of one run                
            </comment>
            <javadoc line="31">
                An AttributedString holds text and related attribute information. It
                  may be used as the actual data storage in some cases where a text
                  reader wants to access attributed text through the AttributedCharacterIterator
                  interface.
                  &lt;p&gt;
                  An attribute is a key/value pair, identified by the key.  No two
                  attributes on a given character can have the same key.
                  &lt;p&gt;The values for an attribute are immutable, or must not be mutated
                  by clients or storage.  They are always passed by reference, and not
                  cloned.                
                <see>
                    AttributedCharacterIterator                    
                </see>
                <see>
                    Annotation                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="ARRAY_SIZE_INCREMENT" type="int" line="54"/>
            <declaration name="text" type="String" line="57"/>
            <declaration name="runArraySize" type="int" line="61"/>
            <declaration name="runCount" type="int" line="62"/>
            <declaration name="runStarts" type="int" line="63"/>
            <declaration name="runAttributes" type="Vector" line="64"/>
            <declaration name="runAttributeValues" type="Vector" line="65"/>
            <javadoc line="67">
                Constructs an AttributedString instance with the given
                  AttributedCharacterIterators.                
                <param>
                    iterators AttributedCharacterIterators to construct
                      AttributedString from.                    
                </param>
                <throws>
                    NullPointerException if iterators is null                    
                </throws>
            </javadoc>
            <method name="AttributedString" type="constructor" line="75">
                <params>
                    <param name="iterators" type="AttributedCharacterIterator[]"/>
                </params>
                <comment line="84">
                    Build the String contents                    
                </comment>
                <comment line="93">
                    Determine the runs, creating a new run when the attributes
                     differ.                    
                </comment>
                <scope line="76"/>
                <scope line="79"/>
                <scope line="82">
                    <declaration name="buffer" type="StringBuffer" line="84"/>
                    <scope line="85"/>
                    <scope line="91">
                        <declaration name="offset" type="int" line="94"/>
                        <declaration name="last" type="Map" line="95"/>
                        <scope line="97">
                            <declaration name="iterator" type="AttributedCharacterIterator" line="98"/>
                            <declaration name="start" type="int" line="99"/>
                            <declaration name="end" type="int" line="100"/>
                            <declaration name="index" type="int" line="101"/>
                            <scope line="103">
                                <declaration name="attrs" type="Map" line="106"/>
                                <scope line="108"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="120">
                Constructs an AttributedString instance with the given text.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <exception>
                    NullPointerException if <code>text</code> is null.                    
                </exception>
            </javadoc>
            <method name="AttributedString" type="constructor" line="125">
                <params>
                    <param name="text" type="String"/>
                </params>
                <scope line="126"/>
            </method>
            <javadoc line="132">
                Constructs an AttributedString instance with the given text and attributes.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <param>
                    attributes The attributes that apply to the entire string.                    
                </param>
                <exception>
                    NullPointerException if <code>text</code> or
                      <code>attributes</code> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the text has length 0
                      and the attributes parameter is not an empty Map (attributes
                      cannot be applied to a 0-length range).                    
                </exception>
            </javadoc>
            <method name="AttributedString" type="constructor" line="144">
                <params>
                    <param name="text" type="String"/>
                    <param name="attributes" type="Map<? extends Attribute,?>"/>
                </params>
                <scope line="145"/>
                <scope line="150"/>
                <declaration name="attributeCount" type="int" line="156"/>
                <scope line="157">
                    <declaration name="newRunAttributes" type="Vector" line="159"/>
                    <declaration name="newRunAttributeValues" type="Vector" line="160"/>
                    <declaration name="iterator" type="Iterator" line="163"/>
                    <scope line="164">
                        <declaration name="entry" type="Map.Entry" line="165"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="172">
                Constructs an AttributedString instance with the given attributed
                  text represented by AttributedCharacterIterator.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <exception>
                    NullPointerException if <code>text</code> is null.                    
                </exception>
            </javadoc>
            <method name="AttributedString" type="constructor" line="178">
                <params>
                    <param name="text" type="AttributedCharacterIterator"/>
                </params>
                <comment line="180">
                    If performance is critical, this constructor should be
                     implemented here rather than invoking the constructor for a
                     subrange. We can avoid some range checking in the loops.                    
                </comment>
            </method>
            <javadoc line="185">
                Constructs an AttributedString instance with the subrange of
                  the given attributed text represented by
                  AttributedCharacterIterator. If the given range produces an
                  empty text, all attributes will be discarded.  Note that any
                  attributes wrapped by an Annotation object are discarded for a
                  subrange of the original attribute range.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <param>
                    beginIndex Index of the first character of the range.                    
                </param>
                <param>
                    endIndex Index of the character following the last character
                      of the range.                    
                </param>
                <exception>
                    NullPointerException if <code>text</code> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the subrange given by
                      beginIndex and endIndex is out of the text range.                    
                </exception>
                <see>
                    java.text.Annotation                    
                </see>
            </javadoc>
            <method name="AttributedString" type="constructor" line="204">
                <params>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
            </method>
            <javadoc line="208">
                Constructs an AttributedString instance with the subrange of
                  the given attributed text represented by
                  AttributedCharacterIterator.  Only attributes that match the
                  given attributes will be incorporated into the instance. If the
                  given range produces an empty text, all attributes will be
                  discarded. Note that any attributes wrapped by an Annotation
                  object are discarded for a subrange of the original attribute
                  range.                
                <param>
                    text The text for this attributed string.                    
                </param>
                <param>
                    beginIndex Index of the first character of the range.                    
                </param>
                <param>
                    endIndex Index of the character following the last character
                      of the range.                    
                </param>
                <param>
                    attributes Specifies attributes to be extracted
                      from the text. If null is specified, all available attributes will
                      be used.                    
                </param>
                <exception>
                    NullPointerException if <code>text</code> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the subrange given by
                      beginIndex and endIndex is out of the text range.                    
                </exception>
                <see>
                    java.text.Annotation                    
                </see>
            </javadoc>
            <method name="AttributedString" type="constructor" line="233">
                <params>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                    <param name="attributes" type="Attribute[]"/>
                </params>
                <comment line="239">
                    Validate the given subrange                    
                </comment>
                <comment line="245">
                    Copy the given string                    
                </comment>
                <comment line="255">
                    Select attribute keys to be taken care of                    
                </comment>
                <comment line="267">
                    Get and set attribute runs for each attribute name. Need to
                     scan from the top of the text so that we can discard any
                     Annotation that is no longer applied to a subset text segment.                    
                </comment>
                <comment line="288">
                    if the run is beyond the given (subset) range, we
                     don&apos;t need to process further.                    
                </comment>
                <comment line="293">
                    attribute is applied to any subrange                    
                </comment>
                <scope line="234"/>
                <declaration name="textBeginIndex" type="int" line="239"/>
                <declaration name="textEndIndex" type="int" line="240"/>
                <declaration name="textBuffer" type="StringBuffer" line="245"/>
                <declaration name="keys" type="HashSet" line="255"/>
                <scope line="256"/>
                <scope line="258"/>
                <declaration name="itr" type="Iterator" line="269"/>
                <scope line="270">
                    <declaration name="attributeKey" type="Attribute" line="271"/>
                    <scope line="273">
                        <declaration name="start" type="int" line="274"/>
                        <declaration name="limit" type="int" line="275"/>
                        <declaration name="value" type="Object" line="276"/>
                        <scope line="278">
                            <scope line="279">
                                <scope line="280"/>
                                <scope line="282"/>
                            </scope>
                            <scope line="286">
                                <scope line="291">
                                    <scope line="297"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="308">
                Adds an attribute to the entire string.                
                <param>
                    attribute the attribute key                    
                </param>
                <param>
                    value the value of the attribute; may be null                    
                </param>
                <exception>
                    NullPointerException if <code>attribute</code> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the AttributedString has length 0
                      (attributes cannot be applied to a 0-length range).                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="316">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="318"/>
                <declaration name="len" type="int" line="322"/>
                <scope line="323"/>
            </method>
            <javadoc line="330">
                Adds an attribute to a subrange of the string.                
                <param>
                    attribute the attribute key                    
                </param>
                <param>
                    value The value of the attribute. May be null.                    
                </param>
                <param>
                    beginIndex Index of the first character of the range.                    
                </param>
                <param>
                    endIndex Index of the character following the last character of the range.                    
                </param>
                <exception>
                    NullPointerException if <code>attribute</code> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if beginIndex is less then 0, endIndex is
                      greater than the length of the string, or beginIndex and endIndex together don't
                      define a non-empty subrange of the string.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="342">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="value" type="Object"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="344"/>
                <scope line="348"/>
            </method>
            <javadoc line="355">
                Adds a set of attributes to a subrange of the string.                
                <param>
                    attributes The attributes to be added to the string.                    
                </param>
                <param>
                    beginIndex Index of the first character of the range.                    
                </param>
                <param>
                    endIndex Index of the character following the last
                      character of the range.                    
                </param>
                <exception>
                    NullPointerException if <code>attributes</code> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if beginIndex is less then
                      0, endIndex is greater than the length of the string, or
                      beginIndex and endIndex together don't define a non-empty
                      subrange of the string and the attributes parameter is not an
                      empty Map.                    
                </exception>
            </javadoc>
            <method name="addAttributes" type="void" line="370">
                <params>
                    <param name="attributes" type="Map<? extends Attribute,?>"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <comment line="385">
                    make sure we have run attribute data vectors                    
                </comment>
                <comment line="390">
                    break up runs if necessary                    
                </comment>
                <scope line="371"/>
                <scope line="375"/>
                <scope line="378"/>
                <scope line="385"/>
                <declaration name="beginRunIndex" type="int" line="390"/>
                <declaration name="endRunIndex" type="int" line="391"/>
                <declaration name="iterator" type="Iterator" line="393"/>
                <scope line="394">
                    <declaration name="entry" type="Map.Entry" line="395"/>
                </scope>
            </method>
            <method name="addAttributeImpl" type="void" line="401">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="value" type="Object"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <comment line="404">
                    make sure we have run attribute data vectors                    
                </comment>
                <comment line="409">
                    break up runs if necessary                    
                </comment>
                <scope line="404"/>
                <declaration name="beginRunIndex" type="int" line="409"/>
                <declaration name="endRunIndex" type="int" line="410"/>
            </method>
            <method name="createRunAttributeDataVectors" type="void" line="415">
                <comment line="417">
                    use temporary variables so things remain consistent in case of an exception                    
                </comment>
                <comment line="425">
                    assume initial run starting at index 0                    
                </comment>
                <declaration name="newRunStarts" type="int" line="417"/>
                <declaration name="newRunAttributes" type="Vector" line="418"/>
                <declaration name="newRunAttributeValues" type="Vector" line="419"/>
            </method>
            <method name="ensureRunBreak" type="int" line="428">
                <params>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="432">
                Ensures there is a run break at offset, returning the index of
                  the run. If this results in splitting a run, two things can happen:
                  &lt;ul&gt;
                  &lt;li&gt;If copyAttrs is true, the attributes from the existing run
                  will be placed in both of the newly created runs.
                  &lt;li&gt;If copyAttrs is false, the attributes from the existing run
                  will NOT be copied to the run to the right (&gt;= offset) of the break,
                  but will exist on the run to the left (&lt; offset).
                  &lt;/ul&gt;                
            </javadoc>
            <method name="ensureRunBreak" type="int" line="443">
                <params>
                    <param name="offset" type="int"/>
                    <param name="copyAttrs" type="boolean"/>
                </params>
                <comment line="449">
                    search for the run index where this offset should be                    
                </comment>
                <comment line="455">
                    if the offset is at a run start already, we&apos;re done                    
                </comment>
                <comment line="460">
                    we&apos;ll have to break up a run
                     first, make sure we have enough space in our arrays                    
                </comment>
                <comment line="478">
                    make copies of the attribute information of the old run that the new one used to be part of
                     use temporary variables so things remain consistent in case of an exception                    
                </comment>
                <comment line="494">
                    now actually break up the run                    
                </comment>
                <scope line="444"/>
                <declaration name="runIndex" type="int" line="449"/>
                <scope line="450"/>
                <scope line="455"/>
                <scope line="461">
                    <declaration name="newArraySize" type="int" line="462"/>
                    <declaration name="newRunStarts" type="int" line="463"/>
                    <declaration name="newRunAttributes" type="Vector" line="464"/>
                    <declaration name="newRunAttributeValues" type="Vector" line="465"/>
                    <scope line="466"/>
                </scope>
                <declaration name="newRunAttributes" type="Vector" line="479"/>
                <declaration name="newRunAttributeValues" type="Vector" line="480"/>
                <scope line="482">
                    <declaration name="oldRunAttributes" type="Vector" line="483"/>
                    <declaration name="oldRunAttributeValues" type="Vector" line="484"/>
                    <scope line="485"/>
                    <scope line="488"/>
                </scope>
                <scope line="495"/>
            </method>
            <method name="addAttributeRunData" type="void" line="509">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="value" type="Object"/>
                    <param name="beginRunIndex" type="int"/>
                    <param name="endRunIndex" type="int"/>
                </params>
                <comment line="513">
                    index of key and value in our vectors; assume we don&apos;t have an entry yet                    
                </comment>
                <comment line="520">
                    check whether we have an entry already                    
                </comment>
                <comment line="525">
                    create new entry                    
                </comment>
                <comment line="536">
                    update existing entry                    
                </comment>
                <scope line="511">
                    <declaration name="keyValueIndex" type="int" line="512"/>
                    <scope line="513">
                        <declaration name="newRunAttributes" type="Vector" line="514"/>
                        <declaration name="newRunAttributeValues" type="Vector" line="515"/>
                    </scope>
                    <scope line="518"/>
                    <scope line="523">
                        <declaration name="oldSize" type="int" line="525"/>
                        <scope line="527"/>
                        <scope line="530"/>
                    </scope>
                    <scope line="534"/>
                </scope>
            </method>
            <javadoc line="541">
                Creates an AttributedCharacterIterator instance that provides access to the entire contents of
                  this string.                
                <return>
                    An iterator providing access to the text and its attributes.                    
                </return>
            </javadoc>
            <method name="getIterator" type="AttributedCharacterIterator" line="547"/>
            <javadoc line="551">
                Creates an AttributedCharacterIterator instance that provides access to
                  selected contents of this string.
                  Information about attributes not listed in attributes that the
                  implementor may have need not be made accessible through the iterator.
                  If the list is null, all available attribute information should be made
                  accessible.                
                <param>
                    attributes a list of attributes that the client is interested in                    
                </param>
                <return>
                    an iterator providing access to the entire text and its selected attributes                    
                </return>
            </javadoc>
            <method name="getIterator" type="AttributedCharacterIterator" line="562">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <javadoc line="566">
                Creates an AttributedCharacterIterator instance that provides access to
                  selected contents of this string.
                  Information about attributes not listed in attributes that the
                  implementor may have need not be made accessible through the iterator.
                  If the list is null, all available attribute information should be made
                  accessible.                
                <param>
                    attributes a list of attributes that the client is interested in                    
                </param>
                <param>
                    beginIndex the index of the first character                    
                </param>
                <param>
                    endIndex the index of the character following the last character                    
                </param>
                <return>
                    an iterator providing access to the text and its attributes                    
                </return>
                <exception>
                    IllegalArgumentException if beginIndex is less then 0,
                      endIndex is greater than the length of the string, or beginIndex is
                      greater than endIndex.                    
                </exception>
            </javadoc>
            <method name="getIterator" type="AttributedCharacterIterator" line="582">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
            </method>
            <method name="length" type="int" line="591"/>
            <method name="charAt" type="char" line="595">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getAttribute" type="Object" line="599">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="runIndex" type="int"/>
                </params>
                <declaration name="currentRunAttributes" type="Vector" line="600"/>
                <declaration name="currentRunAttributeValues" type="Vector" line="601"/>
                <scope line="602"/>
                <declaration name="attributeIndex" type="int" line="605"/>
                <scope line="606"/>
                <scope line="609"/>
            </method>
            <method name="getAttributeCheckRange" type="Object" line="615">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="runIndex" type="int"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <comment line="619">
                    need to check whether the annotation&apos;s range extends outside the iterator&apos;s range                    
                </comment>
                <comment line="629">
                    annotation&apos;s range starts before iterator&apos;s range                    
                </comment>
                <comment line="643">
                    annotation&apos;s range ends after iterator&apos;s range                    
                </comment>
                <comment line="647">
                    annotation&apos;s range is subrange of iterator&apos;s range,
                     so we can return the value                    
                </comment>
                <declaration name="value" type="Object" line="616"/>
                <scope line="617">
                    <scope line="619">
                        <declaration name="currIndex" type="int" line="620"/>
                        <declaration name="runStart" type="int" line="621"/>
                        <scope line="623"/>
                        <scope line="627"/>
                    </scope>
                    <declaration name="textLength" type="int" line="632"/>
                    <scope line="633">
                        <declaration name="currIndex" type="int" line="634"/>
                        <declaration name="runLimit" type="int" line="635"/>
                        <scope line="637"/>
                        <scope line="641"/>
                    </scope>
                </scope>
            </method>
            <method name="attributeValuesMatch" type="boolean" line="653">
                <params>
                    <param name="attributes" type="Set"/>
                    <param name="runIndex1" type="int"/>
                    <param name="runIndex2" type="int"/>
                </params>
                <declaration name="iterator" type="Iterator" line="654"/>
                <scope line="655">
                    <declaration name="key" type="Attribute" line="656"/>
                    <scope line="657"/>
                </scope>
            </method>
            <method name="valuesMatch" type="boolean" line="665">
                <params>
                    <param name="value1" type="Object"/>
                    <param name="value2" type="Object"/>
                </params>
                <scope line="666"/>
                <scope line="668"/>
            </method>
            <javadoc line="673">
                Appends the contents of the CharacterIterator iterator into the
                  StringBuffer buf.                
            </javadoc>
            <method name="appendContents" type="void" line="678">
                <params>
                    <param name="buf" type="StringBuffer"/>
                    <param name="iterator" type="CharacterIterator"/>
                </params>
                <declaration name="index" type="int" line="679"/>
                <declaration name="end" type="int" line="680"/>
                <scope line="682"/>
            </method>
            <javadoc line="688">
                Sets the attributes for the range from offset to the next run break
                  (typically the end of the text) to the ones specified in attrs.
                  This is only meant to be called from the constructor!                
            </javadoc>
            <method name="setAttributes" type="void" line="693">
                <params>
                    <param name="attrs" type="Map"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="694"/>
                <declaration name="index" type="int" line="698"/>
                <declaration name="size" type="int" line="699"/>
                <scope line="701">
                    <declaration name="runAttrs" type="Vector" line="702"/>
                    <declaration name="runValues" type="Vector" line="703"/>
                    <declaration name="iterator" type="Iterator" line="704"/>
                    <scope line="706">
                        <declaration name="entry" type="Map.Entry" line="707"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="717">
                Returns true if the attributes specified in last and attrs differ.                
            </javadoc>
            <method name="mapsDiffer" type="boolean" line="720">
                <params>
                    <param name="last" type="Map"/>
                    <param name="attrs" type="Map"/>
                </params>
                <scope line="721"/>
            </method>
            <class name="AttributedStringIterator" line="730">
                <comment line="733">
                    note on synchronization:
                     we don&apos;t synchronize on the iterator, assuming that an iterator is only used in one thread.
                     we do synchronize access to the AttributedString however, since it&apos;s more likely to be shared between threads.                    
                </comment>
                <comment line="737">
                    start and end index for our iteration                    
                </comment>
                <comment line="741">
                    attributes that our client is interested in                    
                </comment>
                <comment line="744">
                    the current index for our iteration
                     invariant: beginIndex &lt;= currentIndex &lt;= endIndex                    
                </comment>
                <comment line="748">
                    information about the run that includes currentIndex                    
                </comment>
                <comment line="753">
                    constructor                    
                </comment>
                <comment line="769">
                    Object methods. See documentation in that class.                    
                </comment>
                <comment line="802">
                    CharacterIterator methods. See documentation in that interface.                    
                </comment>
                <comment line="860">
                    AttributedCharacterIterator methods. See documentation in that interface.                    
                </comment>
                <comment line="989">
                    internally used methods                    
                </comment>
                <comment line="995">
                    set the current index, update information about the current run if necessary,
                     return the character at the current index                    
                </comment>
                <comment line="1009">
                    update the information about the current run                    
                </comment>
                <implements interface="AttributedCharacterIterator"/>
                <declaration name="beginIndex" type="int" line="737"/>
                <declaration name="endIndex" type="int" line="738"/>
                <declaration name="relevantAttributes" type="Attribute[]" line="741"/>
                <declaration name="currentIndex" type="int" line="745"/>
                <declaration name="currentRunIndex" type="int" line="748"/>
                <declaration name="currentRunStart" type="int" line="749"/>
                <declaration name="currentRunLimit" type="int" line="750"/>
                <method name="AttributedStringIterator" type="constructor" line="753">
                    <params>
                        <param name="attributes" type="Attribute[]"/>
                        <param name="beginIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <scope line="755"/>
                    <scope line="763"/>
                </method>
                <method name="equals" type="boolean" line="770">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="771"/>
                    <scope line="774"/>
                    <declaration name="that" type="AttributedStringIterator" line="778"/>
                </method>
                <method name="hashCode" type="int" line="787"/>
                <method name="clone" type="Object" line="791">
                    <scope line="792">
                        <declaration name="other" type="AttributedStringIterator" line="793"/>
                    </scope>
                    <scope line="796"/>
                </method>
                <method name="first" type="char" line="803"/>
                <method name="last" type="char" line="807">
                    <scope line="808"/>
                    <scope line="810"/>
                </method>
                <method name="current" type="char" line="815">
                    <scope line="816"/>
                    <scope line="818"/>
                </method>
                <method name="next" type="char" line="823">
                    <scope line="824"/>
                    <scope line="827"/>
                </method>
                <method name="previous" type="char" line="832">
                    <scope line="833"/>
                    <scope line="836"/>
                </method>
                <method name="setIndex" type="char" line="841">
                    <params>
                        <param name="position" type="int"/>
                    </params>
                </method>
                <method name="getBeginIndex" type="int" line="847"/>
                <method name="getEndIndex" type="int" line="851"/>
                <method name="getIndex" type="int" line="855"/>
                <method name="getRunStart" type="int" line="861"/>
                <method name="getRunStart" type="int" line="865">
                    <params>
                        <param name="attribute" type="Attribute"/>
                    </params>
                    <scope line="866"/>
                    <scope line="868">
                        <declaration name="value" type="Object" line="869"/>
                        <declaration name="runStart" type="int" line="870"/>
                        <declaration name="runIndex" type="int" line="871"/>
                        <scope line="873"/>
                        <scope line="877"/>
                    </scope>
                </method>
                <method name="getRunStart" type="int" line="884">
                    <params>
                        <param name="attributes" type="Set<? extends Attribute>"/>
                    </params>
                    <scope line="885"/>
                    <scope line="887">
                        <declaration name="runStart" type="int" line="888"/>
                        <declaration name="runIndex" type="int" line="889"/>
                        <scope line="891"/>
                        <scope line="895"/>
                    </scope>
                </method>
                <method name="getRunLimit" type="int" line="902"/>
                <method name="getRunLimit" type="int" line="906">
                    <params>
                        <param name="attribute" type="Attribute"/>
                    </params>
                    <scope line="907"/>
                    <scope line="909">
                        <declaration name="value" type="Object" line="910"/>
                        <declaration name="runLimit" type="int" line="911"/>
                        <declaration name="runIndex" type="int" line="912"/>
                        <scope line="914"/>
                        <scope line="918"/>
                    </scope>
                </method>
                <method name="getRunLimit" type="int" line="925">
                    <params>
                        <param name="attributes" type="Set<? extends Attribute>"/>
                    </params>
                    <scope line="926"/>
                    <scope line="928">
                        <declaration name="runLimit" type="int" line="929"/>
                        <declaration name="runIndex" type="int" line="930"/>
                        <scope line="932"/>
                        <scope line="936"/>
                    </scope>
                </method>
                <method name="getAttributes" type="Map<Attribute,Object>" line="943">
                    <comment line="946">
                        ??? would be nice to return null, but current spec doesn&apos;t allow it
                         returning Hashtable saves AttributeMap from dealing with emptiness                        
                    </comment>
                    <scope line="944"/>
                </method>
                <method name="getAllAttributeKeys" type="Set<Attribute>" line="952">
                    <comment line="954">
                        ??? This should screen out attribute keys that aren&apos;t relevant to the client                        
                    </comment>
                    <comment line="956">
                        ??? would be nice to return null, but current spec doesn&apos;t allow it
                         returning HashSet saves us from dealing with emptiness                        
                    </comment>
                    <comment line="961">
                        ??? should try to create this only once, then update if necessary,
                         and give callers read-only view                        
                    </comment>
                    <scope line="954"/>
                    <scope line="959">
                        <declaration name="keys" type="Set" line="962"/>
                        <declaration name="i" type="int" line="963"/>
                        <scope line="964">
                            <scope line="965">
                                <declaration name="currentRunAttributes" type="Vector" line="966"/>
                                <scope line="967">
                                    <declaration name="j" type="int" line="968"/>
                                    <scope line="969"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="getAttribute" type="Object" line="980">
                    <params>
                        <param name="attribute" type="Attribute"/>
                    </params>
                    <declaration name="runIndex" type="int" line="981"/>
                    <scope line="982"/>
                </method>
                <method name="getString" type="AttributedString" line="990"/>
                <method name="internalSetIndex" type="char" line="996">
                    <params>
                        <param name="position" type="int"/>
                    </params>
                    <scope line="998"/>
                    <scope line="1001"/>
                    <scope line="1003"/>
                </method>
                <method name="updateRunInfo" type="void" line="1009">
                    <scope line="1010"/>
                    <scope line="1013">
                        <scope line="1014">
                            <declaration name="runIndex" type="int" line="1015"/>
                            <scope line="1019"/>
                            <scope line="1024"/>
                            <scope line="1027"/>
                            <scope line="1032"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="AttributeMap" line="1043">
                <extends class="AbstractMap">
                    <type_params>
                        <type_param name="Attribute"/>
                        <type_param name="Object"/>
                    </type_params>
                </extends>
                <comment line="733">
                    note on synchronization:
                     we don&apos;t synchronize on the iterator, assuming that an iterator is only used in one thread.
                     we do synchronize access to the AttributedString however, since it&apos;s more likely to be shared between threads.                    
                </comment>
                <comment line="737">
                    start and end index for our iteration                    
                </comment>
                <comment line="741">
                    attributes that our client is interested in                    
                </comment>
                <comment line="744">
                    the current index for our iteration
                     invariant: beginIndex &lt;= currentIndex &lt;= endIndex                    
                </comment>
                <comment line="748">
                    information about the run that includes currentIndex                    
                </comment>
                <comment line="753">
                    constructor                    
                </comment>
                <comment line="769">
                    Object methods. See documentation in that class.                    
                </comment>
                <comment line="802">
                    CharacterIterator methods. See documentation in that interface.                    
                </comment>
                <comment line="860">
                    AttributedCharacterIterator methods. See documentation in that interface.                    
                </comment>
                <comment line="989">
                    internally used methods                    
                </comment>
                <comment line="995">
                    set the current index, update information about the current run if necessary,
                     return the character at the current index                    
                </comment>
                <comment line="1009">
                    update the information about the current run                    
                </comment>
                <declaration name="runIndex" type="int" line="1045"/>
                <declaration name="beginIndex" type="int" line="1046"/>
                <declaration name="endIndex" type="int" line="1047"/>
                <method name="AttributeMap" type="constructor" line="1049">
                    <params>
                        <param name="runIndex" type="int"/>
                        <param name="beginIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                </method>
                <method name="entrySet" type="Set" line="1055">
                    <declaration name="set" type="HashSet" line="1056"/>
                    <scope line="1057">
                        <declaration name="size" type="int" line="1058"/>
                        <scope line="1059">
                            <declaration name="key" type="Attribute" line="1060"/>
                            <declaration name="value" type="Object" line="1061"/>
                            <scope line="1062">
                                <scope line="1065"/>
                            </scope>
                            <declaration name="entry" type="Map.Entry" line="1069"/>
                        </scope>
                    </scope>
                </method>
                <method name="get" type="Object" line="1076">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
        <class name="AttributeEntry" line="1082">
            <comment line="53">
                since there are no vectors of int, we have to use arrays.
                 We allocate them in chunks of 10 elements so we don&apos;t have to allocate all the time.                
            </comment>
            <comment line="57">
                field holding the text                
            </comment>
            <comment line="60">
                fields holding run attribute information
                 run attributes are organized by run                
            </comment>
            <comment line="62">
                current size of the arrays                
            </comment>
            <comment line="63">
                actual number of runs, &lt;= runArraySize                
            </comment>
            <comment line="64">
                start index for each run                
            </comment>
            <comment line="65">
                vector of attribute keys for each run                
            </comment>
            <comment line="66">
                parallel vector of attribute values for each run                
            </comment>
            <comment line="428">
                ensure there&apos;s a run break at offset, return the index of the run                
            </comment>
            <comment line="508">
                add the attribute attribute/value to all runs where beginRunIndex &lt;= runIndex &lt; endRunIndex                
            </comment>
            <comment line="587">
                all (with the exception of length) reading operations are private,
                 since AttributedString instances are accessed through iterators.                
            </comment>
            <comment line="590">
                length is package private so that CharacterIteratorFieldDelegate can
                 access it without creating an AttributedCharacterIterator.                
            </comment>
            <comment line="615">
                gets an attribute value, but returns an annotation only if it&apos;s range does not extend outside the range beginIndex..endIndex                
            </comment>
            <comment line="653">
                returns whether all specified attributes have equal values in the runs with the given indices                
            </comment>
            <comment line="665">
                returns whether the two objects are either both null or equal                
            </comment>
            <comment line="729">
                the iterator class associated with this string class                
            </comment>
            <comment line="1042">
                the map class associated with this string class, giving access to the attributes of one run                
            </comment>
            <implements interface="Map.Entry"/>
            <declaration name="key" type="Attribute" line="1084"/>
            <declaration name="value" type="Object" line="1085"/>
            <method name="AttributeEntry" type="constructor" line="1087">
                <params>
                    <param name="key" type="Attribute"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="1092">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="1093"/>
                <declaration name="other" type="AttributeEntry" line="1096"/>
            </method>
            <method name="getKey" type="Object" line="1101"/>
            <method name="getValue" type="Object" line="1105"/>
            <method name="setValue" type="Object" line="1109">
                <params>
                    <param name="newValue" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="1113"/>
            <method name="toString" type="String" line="1117"/>
        </class>
    </source>