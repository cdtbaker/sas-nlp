<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.text.spi.DateFormatSymbolsProvider"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.TimeZone"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.util.concurrent.ConcurrentMap"/>
        <import package="java.util.spi.LocaleServiceProvider"/>
        <import package="sun.util.LocaleServiceProviderPool"/>
        <import package="sun.util.TimeZoneNameUtility"/>
        <import package="sun.util.calendar.ZoneInfo"/>
        <import package="sun.util.resources.LocaleData"/>
        <class name="DateFormatSymbols" line="59">
            <comment line="233">
                G                
            </comment>
            <comment line="234">
                y                
            </comment>
            <comment line="235">
                M                
            </comment>
            <comment line="236">
                d                
            </comment>
            <comment line="237">
                k                
            </comment>
            <comment line="238">
                H                
            </comment>
            <comment line="239">
                m                
            </comment>
            <comment line="240">
                s                
            </comment>
            <comment line="241">
                S                
            </comment>
            <comment line="242">
                E                
            </comment>
            <comment line="243">
                D                
            </comment>
            <comment line="244">
                F                
            </comment>
            <comment line="245">
                w                
            </comment>
            <comment line="246">
                W                
            </comment>
            <comment line="247">
                a                
            </comment>
            <comment line="248">
                h                
            </comment>
            <comment line="249">
                K                
            </comment>
            <comment line="250">
                z                
            </comment>
            <comment line="251">
                Z                
            </comment>
            <comment line="252">
                Y                
            </comment>
            <comment line="253">
                u                
            </comment>
            <comment line="254">
                X                
            </comment>
            <comment line="276">
                                
            </comment>
            <comment line="638">
                =======================privates===============================                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="59">
                &lt;code&gt;DateFormatSymbols&lt;/code&gt; is a public class for encapsulating
                  localizable date-time formatting data, such as the names of the
                  months, the names of the days of the week, and the time zone data.
                  &lt;code&gt;DateFormat&lt;/code&gt; and &lt;code&gt;SimpleDateFormat&lt;/code&gt; both use
                  &lt;code&gt;DateFormatSymbols&lt;/code&gt; to encapsulate this information.
                  &lt;p&gt;
                  Typically you shouldn&apos;t use &lt;code&gt;DateFormatSymbols&lt;/code&gt; directly.
                  Rather, you are encouraged to create a date-time formatter with the
                  &lt;code&gt;DateFormat&lt;/code&gt; class&apos;s factory methods: &lt;code&gt;getTimeInstance&lt;/code&gt;,
                  &lt;code&gt;getDateInstance&lt;/code&gt;, or &lt;code&gt;getDateTimeInstance&lt;/code&gt;.
                  These methods automatically create a &lt;code&gt;DateFormatSymbols&lt;/code&gt; for
                  the formatter so that you don&apos;t have to. After the
                  formatter is created, you may modify its format pattern using the
                  &lt;code&gt;setPattern&lt;/code&gt; method. For more information about
                  creating formatters using &lt;code&gt;DateFormat&lt;/code&gt;&apos;s factory methods,
                  see {@link DateFormat}.
                  &lt;p&gt;
                  If you decide to create a date-time formatter with a specific
                  format pattern for a specific locale, you can do so with:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)).
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  &lt;code&gt;DateFormatSymbols&lt;/code&gt; objects are cloneable. When you obtain
                  a &lt;code&gt;DateFormatSymbols&lt;/code&gt; object, feel free to modify the
                  date-time formatting data. For instance, you can replace the localized
                  date-time format pattern characters with the ones that you feel easy
                  to remember. Or you can change the representative cities
                  to your favorite ones.
                  &lt;p&gt;
                  New &lt;code&gt;DateFormatSymbols&lt;/code&gt; subclasses may be added to support
                  &lt;code&gt;SimpleDateFormat&lt;/code&gt; for date-time formatting for additional locales.                
                <see>
                    DateFormat                    
                </see>
                <see>
                    SimpleDateFormat                    
                </see>
                <see>
                    java.util.SimpleTimeZone                    
                </see>
                <author>
                    Chen-Lieh Huang                    
                </author>
            </javadoc>
            <javadoc line="106">
                Construct a DateFormatSymbols object by loading format data from
                  resources for the default locale. This constructor can only
                  construct instances for the locales supported by the Java
                  runtime environment, not for those supported by installed{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}implementations. For full locale coverage, use the{@link #getInstance(Locale) getInstance} method.                
                <see>
                    #getInstance()                    
                </see>
                <exception>
                    java.util.MissingResourceExceptionif the resources for the default locale cannot be
                      found or cannot be loaded.                    
                </exception>
            </javadoc>
            <method name="DateFormatSymbols" type="constructor" line="121"/>
            <javadoc line="125">
                Construct a DateFormatSymbols object by loading format data from
                  resources for the given locale. This constructor can only
                  construct instances for the locales supported by the Java
                  runtime environment, not for those supported by installed{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}implementations. For full locale coverage, use the{@link #getInstance(Locale) getInstance} method.                
                <see>
                    #getInstance(Locale)                    
                </see>
                <exception>
                    java.util.MissingResourceExceptionif the resources for the specified locale cannot be
                      found or cannot be loaded.                    
                </exception>
            </javadoc>
            <method name="DateFormatSymbols" type="constructor" line="140">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <declaration name="eras" type="String" line="144"/>
            <javadoc line="144">
                Era strings. For example: &quot;AD&quot; and &quot;BC&quot;.  An array of 2 strings,
                  indexed by &lt;code&gt;Calendar.BC&lt;/code&gt; and &lt;code&gt;Calendar.AD&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="months" type="String" line="151"/>
            <javadoc line="151">
                Month strings. For example: &quot;January&quot;, &quot;February&quot;, etc.  An array
                  of 13 strings (some calendars have 13 months), indexed by
                  &lt;code&gt;Calendar.JANUARY&lt;/code&gt;, &lt;code&gt;Calendar.FEBRUARY&lt;/code&gt;, etc.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="shortMonths" type="String" line="159"/>
            <javadoc line="159">
                Short month strings. For example: &quot;Jan&quot;, &quot;Feb&quot;, etc.  An array of
                  13 strings (some calendars have 13 months), indexed by
                  &lt;code&gt;Calendar.JANUARY&lt;/code&gt;, &lt;code&gt;Calendar.FEBRUARY&lt;/code&gt;, etc.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="weekdays" type="String" line="168"/>
            <javadoc line="168">
                Weekday strings. For example: &quot;Sunday&quot;, &quot;Monday&quot;, etc.  An array
                  of 8 strings, indexed by &lt;code&gt;Calendar.SUNDAY&lt;/code&gt;,
                  &lt;code&gt;Calendar.MONDAY&lt;/code&gt;, etc.
                  The element &lt;code&gt;weekdays[0]&lt;/code&gt; is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="shortWeekdays" type="String" line="177"/>
            <javadoc line="177">
                Short weekday strings. For example: &quot;Sun&quot;, &quot;Mon&quot;, etc.  An array
                  of 8 strings, indexed by &lt;code&gt;Calendar.SUNDAY&lt;/code&gt;,
                  &lt;code&gt;Calendar.MONDAY&lt;/code&gt;, etc.
                  The element &lt;code&gt;shortWeekdays[0]&lt;/code&gt; is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="ampms" type="String" line="186"/>
            <javadoc line="186">
                AM and PM strings. For example: &quot;AM&quot; and &quot;PM&quot;.  An array of
                  2 strings, indexed by &lt;code&gt;Calendar.AM&lt;/code&gt; and
                  &lt;code&gt;Calendar.PM&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="zoneStrings" type="String" line="194"/>
            <javadoc line="194">
                Localized names of time zones in this locale.  This is a
                  two-dimensional array of strings of size &lt;em&gt;n&lt;/em&gt; by &lt;em&gt;m&lt;/em&gt;,
                  where &lt;em&gt;m&lt;/em&gt; is at least 5.  Each of the &lt;em&gt;n&lt;/em&gt; rows is an
                  entry containing the localized names for a single &lt;code&gt;TimeZone&lt;/code&gt;.
                  Each such row contains (with &lt;code&gt;i&lt;/code&gt; ranging from
                  0..&lt;em&gt;n&lt;/em&gt;-1):
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][0]&lt;/code&gt; - time zone ID&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][1]&lt;/code&gt; - long name of zone in standard
                  time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][2]&lt;/code&gt; - short name of zone in
                  standard time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][3]&lt;/code&gt; - long name of zone in daylight
                  saving time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][4]&lt;/code&gt; - short name of zone in daylight
                  saving time&lt;/li&gt;
                  &lt;/ul&gt;
                  The zone ID is &lt;em&gt;not&lt;/em&gt; localized; it&apos;s one of the valid IDs of
                  the {@link java.util.TimeZone TimeZone} class that are not
                  &lt;a href=&quot;../java/util/TimeZone.html#CustomID&quot;&gt;custom IDs&lt;/a&gt;.
                  All other entries are localized names.                
                <see>
                    java.util.TimeZone                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="isZoneStringsSet" type="boolean" line="221"/>
            <javadoc line="221">
                Indicates that zoneStrings is set externally with setZoneStrings() method.                
            </javadoc>
            <declaration name="patternChars" type="String" line="226"/>
            <javadoc line="226">
                Unlocalized date-time pattern characters. For example: &apos;y&apos;, &apos;d&apos;, etc.
                  All locales use the same these unlocalized pattern characters.                
            </javadoc>
            <declaration name="PATTERN_ERA" type="int" line="232"/>
            <declaration name="PATTERN_YEAR" type="int" line="233"/>
            <declaration name="PATTERN_MONTH" type="int" line="234"/>
            <declaration name="PATTERN_DAY_OF_MONTH" type="int" line="235"/>
            <declaration name="PATTERN_HOUR_OF_DAY1" type="int" line="236"/>
            <declaration name="PATTERN_HOUR_OF_DAY0" type="int" line="237"/>
            <declaration name="PATTERN_MINUTE" type="int" line="238"/>
            <declaration name="PATTERN_SECOND" type="int" line="239"/>
            <declaration name="PATTERN_MILLISECOND" type="int" line="240"/>
            <declaration name="PATTERN_DAY_OF_WEEK" type="int" line="241"/>
            <declaration name="PATTERN_DAY_OF_YEAR" type="int" line="242"/>
            <declaration name="PATTERN_DAY_OF_WEEK_IN_MONTH" type="int" line="243"/>
            <declaration name="PATTERN_WEEK_OF_YEAR" type="int" line="244"/>
            <declaration name="PATTERN_WEEK_OF_MONTH" type="int" line="245"/>
            <declaration name="PATTERN_AM_PM" type="int" line="246"/>
            <declaration name="PATTERN_HOUR1" type="int" line="247"/>
            <declaration name="PATTERN_HOUR0" type="int" line="248"/>
            <declaration name="PATTERN_ZONE_NAME" type="int" line="249"/>
            <declaration name="PATTERN_ZONE_VALUE" type="int" line="250"/>
            <declaration name="PATTERN_WEEK_YEAR" type="int" line="251"/>
            <declaration name="PATTERN_ISO_DAY_OF_WEEK" type="int" line="252"/>
            <declaration name="PATTERN_ISO_ZONE" type="int" line="253"/>
            <declaration name="localPatternChars" type="String" line="255"/>
            <javadoc line="255">
                Localized date-time pattern characters. For example, a locale may
                  wish to use &apos;u&apos; rather than &apos;y&apos; to represent years in its date format
                  pattern strings.
                  This string must be exactly 18 characters long, with the index of
                  the characters described by &lt;code&gt;DateFormat.ERA_FIELD&lt;/code&gt;,
                  &lt;code&gt;DateFormat.YEAR_FIELD&lt;/code&gt;, etc.  Thus, if the string were
                  &quot;Xz...&quot;, then localized patterns would use &apos;X&apos; for era and &apos;z&apos; for year.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="locale" type="Locale" line="267"/>
            <javadoc line="267">
                The locale which is used for initializing this DateFormatSymbols object.                
                <since>
                    1.6                    
                </since>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="276"/>
            <javadoc line="278">
                Returns an array of all locales for which the
                  &lt;code&gt;getInstance&lt;/code&gt; methods of this class can return
                  localized instances.
                  The returned array represents the union of locales supported by the
                  Java runtime and by installed{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}implementations.  It must contain at least a &lt;code&gt;Locale&lt;/code&gt;
                  instance equal to {@link java.util.Locale#US Locale.US}.                
                <return>
                    An array of locales for which localized
                      &lt;code&gt;DateFormatSymbols&lt;/code&gt; instances are available.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="292">
                <declaration name="pool" type="LocaleServiceProviderPool" line="293"/>
            </method>
            <javadoc line="298">
                Gets the &lt;code&gt;DateFormatSymbols&lt;/code&gt; instance for the default
                  locale.  This method provides access to &lt;code&gt;DateFormatSymbols&lt;/code&gt;
                  instances for locales supported by the Java runtime itself as well
                  as for those supported by installed{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}implementations.                
                <return>
                    a &lt;code&gt;DateFormatSymbols&lt;/code&gt; instance.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInstance" type="DateFormatSymbols" line="308"/>
            <javadoc line="312">
                Gets the &lt;code&gt;DateFormatSymbols&lt;/code&gt; instance for the specified
                  locale.  This method provides access to &lt;code&gt;DateFormatSymbols&lt;/code&gt;
                  instances for locales supported by the Java runtime itself as well
                  as for those supported by installed{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}implementations.                
                <param>
                    locale the given locale.                    
                </param>
                <return>
                    a &lt;code&gt;DateFormatSymbols&lt;/code&gt; instance.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInstance" type="DateFormatSymbols" line="324">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="dfs" type="DateFormatSymbols" line="325"/>
                <scope line="326"/>
            </method>
            <javadoc line="332">
                Returns a DateFormatSymbols provided by a provider or found in
                  the cache. Note that this method returns a cached instance,
                  not its clone. Therefore, the instance should never be given to
                  an application.                
            </javadoc>
            <method name="getInstanceRef" type="DateFormatSymbols" line="338">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="dfs" type="DateFormatSymbols" line="339"/>
                <scope line="340"/>
            </method>
            <method name="getProviderInstance" type="DateFormatSymbols" line="346">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="350">
                    Check whether a provider can provide an implementation that&apos;s closer
                     to the requested locale than what the Java runtime itself can provide.                    
                </comment>
                <declaration name="providersInstance" type="DateFormatSymbols" line="347"/>
                <declaration name="pool" type="LocaleServiceProviderPool" line="351"/>
                <scope line="353"/>
            </method>
            <javadoc line="360">
                Returns a cached DateFormatSymbols if it&apos;s found in the
                  cache. Otherwise, this method returns a newly cached instance
                  for the given locale.                
            </javadoc>
            <method name="getCachedInstance" type="DateFormatSymbols" line="365">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="378">
                    Replace the empty SoftReference with ref.                    
                </comment>
                <declaration name="ref" type="SoftReference&lt;DateFormatSymbols&gt;" line="366"/>
                <declaration name="dfs" type="DateFormatSymbols" line="367"/>
                <scope line="368">
                    <declaration name="x" type="SoftReference&lt;DateFormatSymbols&gt;" line="371"/>
                    <scope line="372">
                        <declaration name="y" type="DateFormatSymbols" line="373"/>
                        <scope line="374"/>
                        <scope line="376"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="385">
                Gets era strings. For example: &quot;AD&quot; and &quot;BC&quot;.                
                <return>
                    the era strings.                    
                </return>
            </javadoc>
            <method name="getEras" type="String[]" line="389"/>
            <javadoc line="393">
                Sets era strings. For example: &quot;AD&quot; and &quot;BC&quot;.                
                <param>
                    newEras the new era strings.                    
                </param>
            </javadoc>
            <method name="setEras" type="void" line="397">
                <params>
                    <param name="newEras" type="String[]"/>
                </params>
            </method>
            <javadoc line="401">
                Gets month strings. For example: &quot;January&quot;, &quot;February&quot;, etc.                
                <return>
                    the month strings.                    
                </return>
            </javadoc>
            <method name="getMonths" type="String[]" line="405"/>
            <javadoc line="409">
                Sets month strings. For example: &quot;January&quot;, &quot;February&quot;, etc.                
                <param>
                    newMonths the new month strings.                    
                </param>
            </javadoc>
            <method name="setMonths" type="void" line="413">
                <params>
                    <param name="newMonths" type="String[]"/>
                </params>
            </method>
            <javadoc line="417">
                Gets short month strings. For example: &quot;Jan&quot;, &quot;Feb&quot;, etc.                
                <return>
                    the short month strings.                    
                </return>
            </javadoc>
            <method name="getShortMonths" type="String[]" line="421"/>
            <javadoc line="425">
                Sets short month strings. For example: &quot;Jan&quot;, &quot;Feb&quot;, etc.                
                <param>
                    newShortMonths the new short month strings.                    
                </param>
            </javadoc>
            <method name="setShortMonths" type="void" line="429">
                <params>
                    <param name="newShortMonths" type="String[]"/>
                </params>
            </method>
            <javadoc line="433">
                Gets weekday strings. For example: &quot;Sunday&quot;, &quot;Monday&quot;, etc.                
                <return>
                    the weekday strings. Use &lt;code&gt;Calendar.SUNDAY&lt;/code&gt;,
                      &lt;code&gt;Calendar.MONDAY&lt;/code&gt;, etc. to index the result array.                    
                </return>
            </javadoc>
            <method name="getWeekdays" type="String[]" line="438"/>
            <javadoc line="442">
                Sets weekday strings. For example: &quot;Sunday&quot;, &quot;Monday&quot;, etc.                
                <param>
                    newWeekdays the new weekday strings. The array should
                      be indexed by &lt;code&gt;Calendar.SUNDAY&lt;/code&gt;,
                      &lt;code&gt;Calendar.MONDAY&lt;/code&gt;, etc.                    
                </param>
            </javadoc>
            <method name="setWeekdays" type="void" line="448">
                <params>
                    <param name="newWeekdays" type="String[]"/>
                </params>
            </method>
            <javadoc line="452">
                Gets short weekday strings. For example: &quot;Sun&quot;, &quot;Mon&quot;, etc.                
                <return>
                    the short weekday strings. Use &lt;code&gt;Calendar.SUNDAY&lt;/code&gt;,
                      &lt;code&gt;Calendar.MONDAY&lt;/code&gt;, etc. to index the result array.                    
                </return>
            </javadoc>
            <method name="getShortWeekdays" type="String[]" line="457"/>
            <javadoc line="461">
                Sets short weekday strings. For example: &quot;Sun&quot;, &quot;Mon&quot;, etc.                
                <param>
                    newShortWeekdays the new short weekday strings. The array should
                      be indexed by &lt;code&gt;Calendar.SUNDAY&lt;/code&gt;,
                      &lt;code&gt;Calendar.MONDAY&lt;/code&gt;, etc.                    
                </param>
            </javadoc>
            <method name="setShortWeekdays" type="void" line="467">
                <params>
                    <param name="newShortWeekdays" type="String[]"/>
                </params>
            </method>
            <javadoc line="471">
                Gets ampm strings. For example: &quot;AM&quot; and &quot;PM&quot;.                
                <return>
                    the ampm strings.                    
                </return>
            </javadoc>
            <method name="getAmPmStrings" type="String[]" line="475"/>
            <javadoc line="479">
                Sets ampm strings. For example: &quot;AM&quot; and &quot;PM&quot;.                
                <param>
                    newAmpms the new ampm strings.                    
                </param>
            </javadoc>
            <method name="setAmPmStrings" type="void" line="483">
                <params>
                    <param name="newAmpms" type="String[]"/>
                </params>
            </method>
            <javadoc line="487">
                Gets time zone strings.  Use of this method is discouraged; use{@link java.util.TimeZone#getDisplayName() TimeZone.getDisplayName()}instead.
                  &lt;p&gt;
                  The value returned is a
                  two-dimensional array of strings of size &lt;em&gt;n&lt;/em&gt; by &lt;em&gt;m&lt;/em&gt;,
                  where &lt;em&gt;m&lt;/em&gt; is at least 5.  Each of the &lt;em&gt;n&lt;/em&gt; rows is an
                  entry containing the localized names for a single &lt;code&gt;TimeZone&lt;/code&gt;.
                  Each such row contains (with &lt;code&gt;i&lt;/code&gt; ranging from
                  0..&lt;em&gt;n&lt;/em&gt;-1):
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][0]&lt;/code&gt; - time zone ID&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][1]&lt;/code&gt; - long name of zone in standard
                  time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][2]&lt;/code&gt; - short name of zone in
                  standard time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][3]&lt;/code&gt; - long name of zone in daylight
                  saving time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][4]&lt;/code&gt; - short name of zone in daylight
                  saving time&lt;/li&gt;
                  &lt;/ul&gt;
                  The zone ID is &lt;em&gt;not&lt;/em&gt; localized; it&apos;s one of the valid IDs of
                  the {@link java.util.TimeZone TimeZone} class that are not
                  &lt;a href=&quot;../util/TimeZone.html#CustomID&quot;&gt;custom IDs&lt;/a&gt;.
                  All other entries are localized names.  If a zone does not implement
                  daylight saving time, the daylight saving time names should not be used.
                  &lt;p&gt;
                  If {@link #setZoneStrings(String[][]) setZoneStrings} has been called
                  on this &lt;code&gt;DateFormatSymbols&lt;/code&gt; instance, then the strings
                  provided by that call are returned. Otherwise, the returned array
                  contains names provided by the Java runtime and by installed{@link java.util.spi.TimeZoneNameProvider TimeZoneNameProvider}implementations.                
                <return>
                    the time zone strings.                    
                </return>
                <see>
                    #setZoneStrings(String[][])                    
                </see>
            </javadoc>
            <method name="getZoneStrings" type="String[][]" line="525"/>
            <javadoc line="529">
                Sets time zone strings.  The argument must be a
                  two-dimensional array of strings of size &lt;em&gt;n&lt;/em&gt; by &lt;em&gt;m&lt;/em&gt;,
                  where &lt;em&gt;m&lt;/em&gt; is at least 5.  Each of the &lt;em&gt;n&lt;/em&gt; rows is an
                  entry containing the localized names for a single &lt;code&gt;TimeZone&lt;/code&gt;.
                  Each such row contains (with &lt;code&gt;i&lt;/code&gt; ranging from
                  0..&lt;em&gt;n&lt;/em&gt;-1):
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][0]&lt;/code&gt; - time zone ID&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][1]&lt;/code&gt; - long name of zone in standard
                  time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][2]&lt;/code&gt; - short name of zone in
                  standard time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][3]&lt;/code&gt; - long name of zone in daylight
                  saving time&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;zoneStrings[i][4]&lt;/code&gt; - short name of zone in daylight
                  saving time&lt;/li&gt;
                  &lt;/ul&gt;
                  The zone ID is &lt;em&gt;not&lt;/em&gt; localized; it&apos;s one of the valid IDs of
                  the {@link java.util.TimeZone TimeZone} class that are not
                  &lt;a href=&quot;../util/TimeZone.html#CustomID&quot;&gt;custom IDs&lt;/a&gt;.
                  All other entries are localized names.                
                <param>
                    newZoneStrings the new time zone strings.                    
                </param>
                <exception>
                    IllegalArgumentException if the length of any row in
                      &lt;code&gt;newZoneStrings&lt;/code&gt; is less than 5                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;newZoneStrings&lt;/code&gt; is null                    
                </exception>
                <see>
                    #getZoneStrings()                    
                </see>
            </javadoc>
            <method name="setZoneStrings" type="void" line="558">
                <params>
                    <param name="newZoneStrings" type="String[][]"/>
                </params>
                <declaration name="aCopy" type="String[][]" line="559"/>
                <scope line="560">
                    <declaration name="len" type="int" line="561"/>
                    <scope line="562"/>
                </scope>
            </method>
            <javadoc line="571">
                Gets localized date-time pattern characters. For example: &apos;u&apos;, &apos;t&apos;, etc.                
                <return>
                    the localized date-time pattern characters.                    
                </return>
            </javadoc>
            <method name="getLocalPatternChars" type="String" line="575"/>
            <javadoc line="579">
                Sets localized date-time pattern characters. For example: &apos;u&apos;, &apos;t&apos;, etc.                
                <param>
                    newLocalPatternChars the new localized date-time
                      pattern characters.                    
                </param>
            </javadoc>
            <method name="setLocalPatternChars" type="void" line="584">
                <params>
                    <param name="newLocalPatternChars" type="String"/>
                </params>
                <comment line="586">
                    Call toString() to throw an NPE in case the argument is null                    
                </comment>
            </method>
            <javadoc line="589">
                Overrides Cloneable                
            </javadoc>
            <method name="clone" type="Object" line="593">
                <scope line="595">
                    <declaration name="other" type="DateFormatSymbols" line="596"/>
                </scope>
                <scope line="599"/>
            </method>
            <javadoc line="604">
                Override hashCode.
                  Generates a hash code for the DateFormatSymbols object.                
            </javadoc>
            <method name="hashCode" type="int" line="608">
                <declaration name="hashcode" type="int" line="609"/>
                <declaration name="zoneStrings" type="String[][]" line="610"/>
            </method>
            <javadoc line="616">
                Override equals                
            </javadoc>
            <method name="equals" type="boolean" line="620">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="DateFormatSymbols" line="623"/>
            </method>
            <declaration name="millisPerHour" type="int" line="639"/>
            <javadoc line="639">
                Useful constant for defining time zone offsets.                
            </javadoc>
            <declaration name="cachedInstances" type="ConcurrentMap&lt;Locale,SoftReference&lt;DateFormatSymbols&gt;&gt;" line="644"/>
            <javadoc line="644">
                Cache to hold DateFormatSymbols instances per Locale.                
            </javadoc>
            <method name="initializeData" type="void" line="650">
                <params>
                    <param name="desiredLocale" type="Locale"/>
                </params>
                <comment line="654">
                    Copy values of a cached instance if any.                    
                </comment>
                <comment line="662">
                    Initialize the fields from the ResourceBundle for locale.                    
                </comment>
                <comment line="671">
                    Day of week names are stored in a 1-based array.                    
                </comment>
                <declaration name="ref" type="SoftReference&lt;DateFormatSymbols&gt;" line="654"/>
                <declaration name="dfs" type="DateFormatSymbols" line="655"/>
                <scope line="656"/>
                <declaration name="resource" type="ResourceBundle" line="662"/>
            </method>
            <method name="toOneBasedArray" type="String[]" line="675">
                <params>
                    <param name="src" type="String[]"/>
                </params>
                <declaration name="len" type="int" line="676"/>
                <declaration name="dst" type="String[]" line="677"/>
                <scope line="679"/>
            </method>
            <javadoc line="685">
                Package private: used by SimpleDateFormat
                  Gets the index for the given time zone ID to obtain the time zone
                  strings for formatting. The time zone ID is just for programmatic
                  lookup. NOT LOCALIZED!!!                
                <param>
                    ID the given time zone ID.                    
                </param>
                <return>
                    the index of the given time zone ID.  Returns -1 if
                      the given time zone ID can&apos;t be located in the DateFormatSymbols object.                    
                </return>
                <see>
                    java.util.SimpleTimeZone                    
                </see>
            </javadoc>
            <method name="getZoneIndex" type="int" line="696">
                <params>
                    <param name="ID" type="String"/>
                </params>
                <declaration name="zoneStrings" type="String[][]" line="697"/>
                <scope line="699"/>
            </method>
            <javadoc line="706">
                Wrapper method to the getZoneStrings(), which is called from inside
                  the java.text package and not to mutate the returned arrays, so that
                  it does not need to create a defensive copy.                
            </javadoc>
            <method name="getZoneStringsWrapper" type="String[][]" line="711">
                <scope line="712"/>
                <scope line="714"/>
            </method>
            <method name="getZoneStringsImpl" type="String[][]" line="719">
                <params>
                    <param name="needsCopy" type="boolean"/>
                </params>
                <scope line="720"/>
                <scope line="724"/>
                <declaration name="len" type="int" line="728"/>
                <declaration name="aCopy" type="String[][]" line="729"/>
                <scope line="730"/>
            </method>
            <method name="isSubclassObject" type="boolean" line="736"/>
            <javadoc line="740">
                Clones all the data members from the source DateFormatSymbols to
                  the target DateFormatSymbols. This is only for subclasses.                
                <param>
                    src the source DateFormatSymbols.                    
                </param>
                <param>
                    dst the target DateFormatSymbols.                    
                </param>
            </javadoc>
            <method name="copyMembers" type="void" line="747">
                <params>
                    <param name="src" type="DateFormatSymbols"/>
                    <param name="dst" type="DateFormatSymbols"/>
                </params>
                <scope line="754"/>
                <scope line="756"/>
            </method>
            <javadoc line="762">
                Write out the default serializable data, after ensuring the
                  &lt;code&gt;zoneStrings&lt;/code&gt; field is initialized in order to make
                  sure the backward compatibility.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="769">
                <params>
                    <param name="stream" type="ObjectOutputStream"/>
                </params>
                <scope line="770"/>
            </method>
            <class name="DateFormatSymbolsGetter" line="776">
                <implements interface="LocaleServiceProviderPool.LocalizedObjectGetter">
                    <type_params>
                        <type_param name="DateFormatSymbolsProvider"/>
                        <type_param name="DateFormatSymbols"/>
                    </type_params>
                </implements>
                <javadoc line="776">
                    Obtains a DateFormatSymbols instance from a DateFormatSymbolsProvider
                      implementation.                    
                </javadoc>
                <declaration name="INSTANCE" type="DateFormatSymbolsGetter" line="783"/>
                <method name="getObject" type="DateFormatSymbols" line="789">
                    <params>
                        <param name="dateFormatSymbolsProvider" type="DateFormatSymbolsProvider"/>
                        <param name="locale" type="Locale"/>
                        <param name="key" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
    </source>