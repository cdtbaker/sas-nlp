<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.util.Vector"/>
        <import package="sun.text.UCompactIntArray"/>
        <import package="sun.text.IntHashtable"/>
        <class name="RBCollationTables" line="45">
            <comment line="53">
                ===========================================================================================
                  The following diagram shows the data structure of the RBCollationTables object.
                  Suppose we have the rule, where &apos;o-umlaut&apos; is the unicode char 0x00F6.
                  &quot;a, A &lt; b, B &lt; c, C, ch, cH, Ch, CH &lt; d, D ... &lt; o, O; &apos;o-umlaut&apos;/E, &apos;O-umlaut&apos;/E ...&quot;.
                  What the rule says is, sorts &apos;ch&apos;ligatures and &apos;c&apos; only with tertiary difference and
                  sorts &apos;o-umlaut&apos; as if it&apos;s always expanded with &apos;e&apos;.
                
                 mapping table                     contracting list           expanding list
                 (contains all unicode char
                  entries)                   ___    ____________       _________________________
                  ________                +&gt;|_*_|-&gt;|&apos;c&apos; |v(&apos;c&apos;) |  +&gt;|v(&apos;o&apos;)|v(&apos;umlaut&apos;)|v(&apos;e&apos;)|
                 |_\u0001_|-&gt; v(&apos;\u0001&apos;) | |_:_|  |------------|  | |-------------------------|
                 |_\u0002_|-&gt; v(&apos;\u0002&apos;) | |_:_|  |&apos;ch&apos;|v(&apos;ch&apos;)|  | |             :           |
                 |____:___|               | |_:_|  |------------|  | |-------------------------|
                 |____:___|               |        |&apos;cH&apos;|v(&apos;cH&apos;)|  | |             :           |
                 |__&apos;a&apos;___|-&gt; v(&apos;a&apos;)      |        |------------|  | |-------------------------|
                 |__&apos;b&apos;___|-&gt; v(&apos;b&apos;)      |        |&apos;Ch&apos;|v(&apos;Ch&apos;)|  | |             :           |
                 |____:___|               |        |------------|  | |-------------------------|
                 |____:___|               |        |&apos;CH&apos;|v(&apos;CH&apos;)|  | |             :           |
                 |___&apos;c&apos;__|----------------         ------------   | |-------------------------|
                 |____:___|                                        | |             :           |
                 |o-umlaut|----------------------------------------  |_________________________|
                 |____:___|
                
                 Noted by Helena Shih on 6/23/97
                ============================================================================================                
            </comment>
            <comment line="150">
                ==============================================================
                 internal (for use by CollationElementIterator)
                 ==============================================================                
            </comment>
            <comment line="165">
                get contract values from contractTable by index                
            </comment>
            <comment line="274">
                ==============================================================
                 constants
                 ==============================================================
                sherman/Todo: is the value big enough?????                
            </comment>
            <comment line="278">
                Expand index follows                
            </comment>
            <comment line="279">
                contract indexes follow                
            </comment>
            <comment line="290">
                ==============================================================
                 instance variables
                 ==============================================================                
            </comment>
            <javadoc line="45">
                This class contains the static state of a RuleBasedCollator: The various
                  tables that are used by the collation routines.  Several RuleBasedCollators
                  can share a single RBCollationTables object, easing memory requirements and
                  improving performance.                
            </javadoc>
            <method name="RBCollationTables" type="constructor" line="79">
                <params>
                    <param name="rules" type="String"/>
                    <param name="decmp" type="int"/>
                </params>
                <comment line="84">
                    this object is filled in through                    
                </comment>
                <comment line="85">
                    the BuildAPI object                    
                </comment>
                <declaration name="builder" type="RBTableBuilder" line="82"/>
            </method>
            <class name="BuildAPI" line="87">
                <comment line="247">
                    shemran/Note: this is used for secondary order value reverse, no
                                  need to consider supplementary pair.                    
                </comment>
                <javadoc line="88">
                    Private constructor.  Prevents anyone else besides RBTableBuilder
                      from gaining direct access to the internals of this class.                    
                </javadoc>
                <method name="BuildAPI" type="constructor" line="92"/>
                <javadoc line="95">
                    This function is used by RBTableBuilder to fill in all the members of this
                      object.  (Effectively, the builder class functions as a &quot;friend&quot; of this
                      class, but to avoid changing too much of the logic, it carries around &quot;shadow&quot;
                      copies of all these variables until the end of the build process and then
                      copies them en masse into the actual tables object once all the construction
                      logic is complete.  This function does that &quot;copying en masse&quot;.                    
                    <param>
                        f2ary The value for frenchSec (the French-secondary flag)                        
                    </param>
                    <param>
                        swap The value for SE Asian swapping rule                        
                    </param>
                    <param>
                        map The collator&apos;s character-mapping table (the value for mapping)                        
                    </param>
                    <param>
                        cTbl The collator&apos;s contracting-character table (the value for contractTable)                        
                    </param>
                    <param>
                        eTbl The collator&apos;s expanding-character table (the value for expandTable)                        
                    </param>
                    <param>
                        cFlgs The hash table of characters that participate in contracting-
                          character sequences (the value for contractFlags)                        
                    </param>
                    <param>
                        mso The value for maxSecOrder                        
                    </param>
                    <param>
                        mto The value for maxTerOrder                        
                    </param>
                </javadoc>
                <method name="fillInTables" type="void" line="119">
                    <params>
                        <param name="f2ary" type="boolean"/>
                        <param name="swap" type="boolean"/>
                        <param name="map" type="UCompactIntArray"/>
                        <param name="cTbl" type="Vector"/>
                        <param name="eTbl" type="Vector"/>
                        <param name="cFlgs" type="IntHashtable"/>
                        <param name="mso" type="short"/>
                        <param name="mto" type="short"/>
                    </params>
                </method>
            </class>
            <javadoc line="131">
                Gets the table-based rules for the collation object.                
                <return>
                    returns the collation rules that the table collation object
                      was created from.                    
                </return>
            </javadoc>
            <method name="getRules" type="String" line="137"/>
            <method name="isFrenchSec" type="boolean" line="141"/>
            <method name="isSEAsianSwapping" type="boolean" line="145"/>
            <javadoc line="153">
                Get the entry of hash table of the contracting string in the collation
                  table.                
                <param>
                    ch the starting character of the contracting string                    
                </param>
            </javadoc>
            <method name="getContractValues" type="Vector" line="159">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <declaration name="index" type="int" line="160"/>
            </method>
            <method name="getContractValuesImpl" type="Vector" line="166">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="172">
                    not found                    
                </comment>
                <scope line="168"/>
                <scope line="172"/>
            </method>
            <javadoc line="177">
                Returns true if this character appears anywhere in a contracting
                  character sequence.  (Used by CollationElementIterator.setOffset().)                
            </javadoc>
            <method name="usedInContractSeq" type="boolean" line="181">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="185">
                Return the maximum length of any expansion sequences that end
                  with the specified comparison order.                
                <param>
                    order a collation order returned by previous or next.                    
                </param>
                <return>
                    the maximum length of any expansion seuences ending
                      with the specified order.                    
                </return>
                <see>
                    CollationElementIterator#getMaxExpansion                    
                </see>
            </javadoc>
            <method name="getMaxExpansion" type="int" line="196">
                <params>
                    <param name="order" type="int"/>
                </params>
                <comment line="201">
                    Right now this does a linear search through the entire
                     expandsion table.  If a collator had a large number of expansions,
                     this could cause a performance problem, but in practise that
                     rarely happens                    
                </comment>
                <declaration name="result" type="int" line="197"/>
                <scope line="199">
                    <scope line="204">
                        <declaration name="valueList" type="int[]" line="205"/>
                        <declaration name="length" type="int" line="206"/>
                        <scope line="208"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="217">
                Get the entry of hash table of the expanding string in the collation
                  table.                
                <param>
                    idx the index of the expanding string value list                    
                </param>
            </javadoc>
            <method name="getExpandValueList" type="int[]" line="222">
                <params>
                    <param name="order" type="int"/>
                </params>
            </method>
            <javadoc line="226">
                Get the comarison order of a character from the collation table.                
                <return>
                    the comparison order of a character.                    
                </return>
            </javadoc>
            <method name="getUnicodeOrder" type="int" line="231">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <method name="getMaxSecOrder" type="short" line="235"/>
            <method name="getMaxTerOrder" type="short" line="239"/>
            <javadoc line="243">
                Reverse a string.                
            </javadoc>
            <method name="reverse" type="void" line="249">
                <params>
                    <param name="result" type="StringBuffer"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <comment line="247">
                    shemran/Note: this is used for secondary order value reverse, no
                                  need to consider supplementary pair.                    
                </comment>
                <declaration name="i" type="int" line="250"/>
                <declaration name="swap" type="char" line="251"/>
                <declaration name="j" type="int" line="253"/>
                <scope line="254"/>
            </method>
            <method name="getEntry" type="int" line="263">
                <params>
                    <param name="list" type="Vector"/>
                    <param name="name" type="String"/>
                    <param name="fwd" type="boolean"/>
                </params>
                <scope line="264">
                    <declaration name="pair" type="EntryPair" line="265"/>
                    <scope line="266"/>
                </scope>
            </method>
            <declaration name="EXPANDCHARINDEX" type="int" line="277"/>
            <declaration name="CONTRACTCHARINDEX" type="int" line="278"/>
            <declaration name="UNMAPPED" type="int" line="279"/>
            <declaration name="PRIMARYORDERMASK" type="int" line="281"/>
            <declaration name="SECONDARYORDERMASK" type="int" line="282"/>
            <declaration name="TERTIARYORDERMASK" type="int" line="283"/>
            <declaration name="PRIMARYDIFFERENCEONLY" type="int" line="284"/>
            <declaration name="SECONDARYDIFFERENCEONLY" type="int" line="285"/>
            <declaration name="PRIMARYORDERSHIFT" type="int" line="286"/>
            <declaration name="SECONDARYORDERSHIFT" type="int" line="287"/>
            <declaration name="rules" type="String" line="292"/>
            <declaration name="frenchSec" type="boolean" line="293"/>
            <declaration name="seAsianSwapping" type="boolean" line="294"/>
            <declaration name="mapping" type="UCompactIntArray" line="296"/>
            <declaration name="contractTable" type="Vector" line="297"/>
            <declaration name="expandTable" type="Vector" line="298"/>
            <declaration name="contractFlags" type="IntHashtable" line="299"/>
            <declaration name="maxSecOrder" type="short" line="301"/>
            <declaration name="maxTerOrder" type="short" line="302"/>
        </class>
    </source>