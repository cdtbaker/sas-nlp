<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.text.spi.CollatorProvider"/>
        <import package="java.util.Locale"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.spi.LocaleServiceProvider"/>
        <import package="sun.misc.SoftCache"/>
        <import package="sun.util.resources.LocaleData"/>
        <import package="sun.util.LocaleServiceProviderPool"/>
        <class name="Collator" line="51">
            <comment line="506">
                FIXME: These three constants should be removed.                
            </comment>
            <implements interface="java.util.Comparator">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <javadoc line="51">
                The &lt;code&gt;Collator&lt;/code&gt; class performs locale-sensitive
                  &lt;code&gt;String&lt;/code&gt; comparison. You use this class to build
                  searching and sorting routines for natural language text.
                  &lt;p&gt;
                  &lt;code&gt;Collator&lt;/code&gt; is an abstract base class. Subclasses
                  implement specific collation strategies. One subclass,
                  &lt;code&gt;RuleBasedCollator&lt;/code&gt;, is currently provided with
                  the Java Platform and is applicable to a wide set of languages. Other
                  subclasses may be created to handle more specialized needs.
                  &lt;p&gt;
                  Like other locale-sensitive classes, you can use the static
                  factory method, &lt;code&gt;getInstance&lt;/code&gt;, to obtain the appropriate
                  &lt;code&gt;Collator&lt;/code&gt; object for a given locale. You will only need
                  to look at the subclasses of &lt;code&gt;Collator&lt;/code&gt; if you need
                  to understand the details of a particular collation strategy or
                  if you need to modify that strategy.
                  &lt;p&gt;
                  The following example shows how to compare two strings using
                  the &lt;code&gt;Collator&lt;/code&gt; for the default locale.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  // Compare two strings in the default locale
                  Collator myCollator = Collator.getInstance();
                  if( myCollator.compare(&quot;abc&quot;, &quot;ABC&quot;) &lt; 0 )
                  System.out.println(&quot;abc is less than ABC&quot;);
                  else
                  System.out.println(&quot;abc is greater than or equal to ABC&quot;);
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  You can set a &lt;code&gt;Collator&lt;/code&gt;&apos;s &lt;em&gt;strength&lt;/em&gt; property
                  to determine the level of difference considered significant in
                  comparisons. Four strengths are provided: &lt;code&gt;PRIMARY&lt;/code&gt;,
                  &lt;code&gt;SECONDARY&lt;/code&gt;, &lt;code&gt;TERTIARY&lt;/code&gt;, and &lt;code&gt;IDENTICAL&lt;/code&gt;.
                  The exact assignment of strengths to language features is
                  locale dependant.  For example, in Czech, &quot;e&quot; and &quot;f&quot; are considered
                  primary differences, while &quot;e&quot; and &quot;&amp;#283;&quot; are secondary differences,
                  &quot;e&quot; and &quot;E&quot; are tertiary differences and &quot;e&quot; and &quot;e&quot; are identical.
                  The following shows how both case and accents could be ignored for
                  US English.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  //Get the Collator for US English and set its strength to PRIMARY
                  Collator usCollator = Collator.getInstance(Locale.US);
                  usCollator.setStrength(Collator.PRIMARY);
                  if( usCollator.compare(&quot;abc&quot;, &quot;ABC&quot;) == 0 ) {
                  System.out.println(&quot;Strings are equivalent&quot;);
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  For comparing &lt;code&gt;String&lt;/code&gt;s exactly once, the &lt;code&gt;compare&lt;/code&gt;
                  method provides the best performance. When sorting a list of
                  &lt;code&gt;String&lt;/code&gt;s however, it is generally necessary to compare each
                  &lt;code&gt;String&lt;/code&gt; multiple times. In this case, &lt;code&gt;CollationKey&lt;/code&gt;s
                  provide better performance. The &lt;code&gt;CollationKey&lt;/code&gt; class converts
                  a &lt;code&gt;String&lt;/code&gt; to a series of bits that can be compared bitwise
                  against other &lt;code&gt;CollationKey&lt;/code&gt;s. A &lt;code&gt;CollationKey&lt;/code&gt; is
                  created by a &lt;code&gt;Collator&lt;/code&gt; object for a given &lt;code&gt;String&lt;/code&gt;.
                  &lt;br&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;CollationKey&lt;/code&gt;s from different
                  &lt;code&gt;Collator&lt;/code&gt;s can not be compared. See the class description
                  for {@link CollationKey}for an example using &lt;code&gt;CollationKey&lt;/code&gt;s.                
                <see>
                    RuleBasedCollator                    
                </see>
                <see>
                    CollationKey                    
                </see>
                <see>
                    CollationElementIterator                    
                </see>
                <see>
                    Locale                    
                </see>
                <author>
                    Helena Shih, Laura Werner, Richard Gillam                    
                </author>
            </javadoc>
            <declaration name="PRIMARY" type="int" line="131"/>
            <javadoc line="131">
                Collator strength value.  When set, only PRIMARY differences are
                  considered significant during comparison. The assignment of strengths
                  to language features is locale dependant. A common example is for
                  different base letters (&quot;a&quot; vs &quot;b&quot;) to be considered a PRIMARY difference.                
                <see>
                    java.text.Collator#setStrength                    
                </see>
                <see>
                    java.text.Collator#getStrength                    
                </see>
            </javadoc>
            <declaration name="SECONDARY" type="int" line="140"/>
            <javadoc line="140">
                Collator strength value.  When set, only SECONDARY and above differences are
                  considered significant during comparison. The assignment of strengths
                  to language features is locale dependant. A common example is for
                  different accented forms of the same base letter (&quot;a&quot; vs &quot;\u00E4&quot;) to be
                  considered a SECONDARY difference.                
                <see>
                    java.text.Collator#setStrength                    
                </see>
                <see>
                    java.text.Collator#getStrength                    
                </see>
            </javadoc>
            <declaration name="TERTIARY" type="int" line="150"/>
            <javadoc line="150">
                Collator strength value.  When set, only TERTIARY and above differences are
                  considered significant during comparison. The assignment of strengths
                  to language features is locale dependant. A common example is for
                  case differences (&quot;a&quot; vs &quot;A&quot;) to be considered a TERTIARY difference.                
                <see>
                    java.text.Collator#setStrength                    
                </see>
                <see>
                    java.text.Collator#getStrength                    
                </see>
            </javadoc>
            <declaration name="IDENTICAL" type="int" line="160"/>
            <javadoc line="160">
                Collator strength value.  When set, all differences are
                  considered significant during comparison. The assignment of strengths
                  to language features is locale dependant. A common example is for control
                  characters (&quot;&amp;#092;u0001&quot; vs &quot;&amp;#092;u0002&quot;) to be considered equal at the
                  PRIMARY, SECONDARY, and TERTIARY levels but different at the IDENTICAL
                  level.  Additionally, differences between pre-composed accents such as
                  &quot;&amp;#092;u00C0&quot; (A-grave) and combining accents such as &quot;A&amp;#092;u0300&quot;
                  (A, combining-grave) will be considered significant at the IDENTICAL
                  level if decomposition is set to NO_DECOMPOSITION.                
            </javadoc>
            <declaration name="NO_DECOMPOSITION" type="int" line="173"/>
            <javadoc line="173">
                Decomposition mode value. With NO_DECOMPOSITION
                  set, accented characters will not be decomposed for collation. This
                  is the default setting and provides the fastest collation but
                  will only produce correct results for languages that do not use accents.                
                <see>
                    java.text.Collator#getDecomposition                    
                </see>
                <see>
                    java.text.Collator#setDecomposition                    
                </see>
            </javadoc>
            <declaration name="CANONICAL_DECOMPOSITION" type="int" line="183"/>
            <javadoc line="183">
                Decomposition mode value. With CANONICAL_DECOMPOSITION
                  set, characters that are canonical variants according to Unicode
                  standard will be decomposed for collation. This should be used to get
                  correct collation of accented characters.
                  &lt;p&gt;
                  CANONICAL_DECOMPOSITION corresponds to Normalization Form D as
                  described in
                  &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr15/tr15-23.html&quot;&gt;Unicode
                  Technical Report #15&lt;/a&gt;.                
                <see>
                    java.text.Collator#getDecomposition                    
                </see>
                <see>
                    java.text.Collator#setDecomposition                    
                </see>
            </javadoc>
            <declaration name="FULL_DECOMPOSITION" type="int" line="198"/>
            <javadoc line="198">
                Decomposition mode value. With FULL_DECOMPOSITION
                  set, both Unicode canonical variants and Unicode compatibility variants
                  will be decomposed for collation.  This causes not only accented
                  characters to be collated, but also characters that have special formats
                  to be collated with their norminal form. For example, the half-width and
                  full-width ASCII and Katakana characters are then collated together.
                  FULL_DECOMPOSITION is the most complete and therefore the slowest
                  decomposition mode.
                  &lt;p&gt;
                  FULL_DECOMPOSITION corresponds to Normalization Form KD as
                  described in
                  &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr15/tr15-23.html&quot;&gt;Unicode
                  Technical Report #15&lt;/a&gt;.                
                <see>
                    java.text.Collator#getDecomposition                    
                </see>
                <see>
                    java.text.Collator#setDecomposition                    
                </see>
            </javadoc>
            <javadoc line="217">
                Gets the Collator for the current default locale.
                  The default locale is determined by java.util.Locale.getDefault.                
                <return>
                    the Collator for the default locale.(for example, en_US)                    
                </return>
                <see>
                    java.util.Locale#getDefault                    
                </see>
            </javadoc>
            <method name="getInstance" type="Collator" line="223"/>
            <javadoc line="227">
                Gets the Collator for the desired locale.                
                <param>
                    desiredLocale the desired locale.                    
                </param>
                <return>
                    the Collator for the desired locale.                    
                </return>
                <see>
                    java.util.Locale                    
                </see>
                <see>
                    java.util.ResourceBundle                    
                </see>
            </javadoc>
            <method name="getInstance" type="Collator" line="236">
                <params>
                    <param name="desiredLocale" type="Locale"/>
                </params>
                <comment line="240">
                    make the world safe                    
                </comment>
                <comment line="243">
                    Check whether a provider can provide an implementation that&apos;s closer
                     to the requested locale than what the Java runtime itself can provide.                    
                </comment>
                <comment line="257">
                    Load the resource of the desired locale from resource
                     manager.                    
                </comment>
                <comment line="265">
                    Use default values                    
                </comment>
                <comment line="275">
                    predefined tables should contain correct grammar                    
                </comment>
                <comment line="279">
                    do nothing                    
                </comment>
                <comment line="282">
                    Now that RuleBasedCollator adds expansions for pre-composed characters
                     into their decomposed equivalents, the default collators don&apos;t need
                     to have decomposition turned on.  Laura, 5/5/98, bug 4114077                    
                </comment>
                <declaration name="result" type="Collator" line="237"/>
                <scope line="238"/>
                <declaration name="pool" type="LocaleServiceProviderPool" line="244"/>
                <scope line="246">
                    <declaration name="providersInstance" type="Collator" line="247"/>
                    <scope line="251"/>
                </scope>
                <declaration name="colString" type="String" line="258"/>
                <scope line="259">
                    <declaration name="resource" type="ResourceBundle" line="260"/>
                </scope>
                <scope line="263"/>
                <scope line="267"/>
                <scope line="273">
                    <scope line="275"/>
                    <scope line="277"/>
                </scope>
            </method>
            <method name="compare" type="int" line="290"/>
            <javadoc line="290">
                Compares the source string to the target string according to the
                  collation rules for this Collator.  Returns an integer less than,
                  equal to or greater than zero depending on whether the source String is
                  less than, equal to or greater than the target string.  See the Collator
                  class description for an example of use.
                  &lt;p&gt;
                  For a one time comparison, this method has the best performance. If a
                  given String will be involved in multiple comparisons, CollationKey.compareTo
                  has the best performance. See the Collator class description for an example
                  using CollationKeys.                
                <param>
                    source the source string.                    
                </param>
                <param>
                    target the target string.                    
                </param>
                <return>
                    Returns an integer value. Value is less than zero if source is less than
                      target, value is zero if source and target are equal, value is greater than zero
                      if source is greater than target.                    
                </return>
                <see>
                    java.text.CollationKey                    
                </see>
                <see>
                    java.text.Collator#getCollationKey                    
                </see>
            </javadoc>
            <javadoc line="311">
                Compares its two arguments for order.  Returns a negative integer,
                  zero, or a positive integer as the first argument is less than, equal
                  to, or greater than the second.
                  &lt;p&gt;
                  This implementation merely returns
                  &lt;code&gt; compare((String)o1, (String)o2) &lt;/code&gt;.                
                <return>
                    a negative integer, zero, or a positive integer as the
                      first argument is less than, equal to, or greater than the
                      second.                    
                </return>
                <exception>
                    ClassCastException the arguments cannot be cast to Strings.                    
                </exception>
                <see>
                    java.util.Comparator                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="compare" type="int" line="326">
                <params>
                    <param name="o1" type="Object"/>
                    <param name="o2" type="Object"/>
                </params>
            </method>
            <method name="getCollationKey" type="CollationKey" line="330"/>
            <javadoc line="330">
                Transforms the String into a series of bits that can be compared bitwise
                  to other CollationKeys. CollationKeys provide better performance than
                  Collator.compare when Strings are involved in multiple comparisons.
                  See the Collator class description for an example using CollationKeys.                
                <param>
                    source the string to be transformed into a collation key.                    
                </param>
                <return>
                    the CollationKey for the given String based on this Collator's collation
                      rules. If the source String is null, a null CollationKey is returned.                    
                </return>
                <see>
                    java.text.CollationKey                    
                </see>
                <see>
                    java.text.Collator#compare                    
                </see>
            </javadoc>
            <javadoc line="343">
                Convenience method for comparing the equality of two strings based on
                  this Collator&apos;s collation rules.                
                <param>
                    source the source string to be compared with.                    
                </param>
                <param>
                    target the target string to be compared with.                    
                </param>
                <return>
                    true if the strings are equal according to the collation
                      rules.  false, otherwise.                    
                </return>
                <see>
                    java.text.Collator#compare                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="353">
                <params>
                    <param name="source" type="String"/>
                    <param name="target" type="String"/>
                </params>
            </method>
            <javadoc line="357">
                Returns this Collator&apos;s strength property.  The strength property determines
                  the minimum level of difference considered significant during comparison.
                  See the Collator class description for an example of use.                
                <return>
                    this Collator's current strength property.                    
                </return>
                <see>
                    java.text.Collator#setStrength                    
                </see>
                <see>
                    java.text.Collator#PRIMARY                    
                </see>
                <see>
                    java.text.Collator#SECONDARY                    
                </see>
                <see>
                    java.text.Collator#TERTIARY                    
                </see>
                <see>
                    java.text.Collator#IDENTICAL                    
                </see>
            </javadoc>
            <method name="getStrength" type="int" line="369"/>
            <javadoc line="373">
                Sets this Collator&apos;s strength property.  The strength property determines
                  the minimum level of difference considered significant during comparison.
                  See the Collator class description for an example of use.                
                <param>
                    newStrength  the new strength value.                    
                </param>
                <see>
                    java.text.Collator#getStrength                    
                </see>
                <see>
                    java.text.Collator#PRIMARY                    
                </see>
                <see>
                    java.text.Collator#SECONDARY                    
                </see>
                <see>
                    java.text.Collator#TERTIARY                    
                </see>
                <see>
                    java.text.Collator#IDENTICAL                    
                </see>
                <exception>
                    IllegalArgumentException If the new strength value is not one of
                      PRIMARY, SECONDARY, TERTIARY or IDENTICAL.                    
                </exception>
            </javadoc>
            <method name="setStrength" type="void" line="386">
                <params>
                    <param name="newStrength" type="int"/>
                </params>
            </method>
            <javadoc line="395">
                Get the decomposition mode of this Collator. Decomposition mode
                  determines how Unicode composed characters are handled. Adjusting
                  decomposition mode allows the user to select between faster and more
                  complete collation behavior.
                  &lt;p&gt;The three values for decomposition mode are:
                  &lt;UL&gt;
                  &lt;LI&gt;NO_DECOMPOSITION,
                  &lt;LI&gt;CANONICAL_DECOMPOSITION
                  &lt;LI&gt;FULL_DECOMPOSITION.
                  &lt;/UL&gt;
                  See the documentation for these three constants for a description
                  of their meaning.                
                <return>
                    the decomposition mode                    
                </return>
                <see>
                    java.text.Collator#setDecomposition                    
                </see>
                <see>
                    java.text.Collator#NO_DECOMPOSITION                    
                </see>
                <see>
                    java.text.Collator#CANONICAL_DECOMPOSITION                    
                </see>
                <see>
                    java.text.Collator#FULL_DECOMPOSITION                    
                </see>
            </javadoc>
            <method name="getDecomposition" type="int" line="415"/>
            <javadoc line="418">
                Set the decomposition mode of this Collator. See getDecomposition
                  for a description of decomposition mode.                
                <param>
                    decompositionMode  the new decomposition mode.                    
                </param>
                <see>
                    java.text.Collator#getDecomposition                    
                </see>
                <see>
                    java.text.Collator#NO_DECOMPOSITION                    
                </see>
                <see>
                    java.text.Collator#CANONICAL_DECOMPOSITION                    
                </see>
                <see>
                    java.text.Collator#FULL_DECOMPOSITION                    
                </see>
                <exception>
                    IllegalArgumentException If the given value is not a valid decomposition
                      mode.                    
                </exception>
            </javadoc>
            <method name="setDecomposition" type="void" line="429">
                <params>
                    <param name="decompositionMode" type="int"/>
                </params>
            </method>
            <javadoc line="437">
                Returns an array of all locales for which the
                  &lt;code&gt;getInstance&lt;/code&gt; methods of this class can return
                  localized instances.
                  The returned array represents the union of locales supported
                  by the Java runtime and by installed{@link java.text.spi.CollatorProvider CollatorProvider} implementations.
                  It must contain at least a Locale instance equal to{@link java.util.Locale#US Locale.US}.                
                <return>
                    An array of locales for which localized
                      <code>Collator</code> instances are available.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="450">
                <declaration name="pool" type="LocaleServiceProviderPool" line="451"/>
            </method>
            <javadoc line="456">
                Overrides Cloneable                
            </javadoc>
            <method name="clone" type="Object" line="460">
                <scope line="461"/>
                <scope line="463"/>
            </method>
            <javadoc line="468">
                Compares the equality of two Collators.                
                <param>
                    that the Collator to be compared with this.                    
                </param>
                <return>
                    true if this Collator is the same as that Collator;
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="475">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="other" type="Collator" line="479"/>
            </method>
            <method name="hashCode" type="int" line="484"/>
            <javadoc line="484">
                Generates the hash code for this Collator.                
            </javadoc>
            <javadoc line="489">
                Default constructor.  This constructor is
                  protected so subclasses can get access to it. Users typically create
                  a Collator sub-class by calling the factory method getInstance.                
                <see>
                    java.text.Collator#getInstance                    
                </see>
            </javadoc>
            <method name="Collator" type="constructor" line="496"/>
            <declaration name="strength" type="int" line="501"/>
            <declaration name="decmp" type="int" line="502"/>
            <declaration name="cache" type="SoftCache" line="503"/>
            <declaration name="LESS" type="int" line="508"/>
            <javadoc line="508">
                LESS is returned if source string is compared to be less than target
                  string in the compare() method.                
                <see>
                    java.text.Collator#compare                    
                </see>
            </javadoc>
            <declaration name="EQUAL" type="int" line="514"/>
            <javadoc line="514">
                EQUAL is returned if source string is compared to be equal to target
                  string in the compare() method.                
                <see>
                    java.text.Collator#compare                    
                </see>
            </javadoc>
            <declaration name="GREATER" type="int" line="520"/>
            <javadoc line="520">
                GREATER is returned if source string is compared to be greater than
                  target string in the compare() method.                
                <see>
                    java.text.Collator#compare                    
                </see>
            </javadoc>
            <class name="CollatorGetter" line="527">
                <implements interface="LocaleServiceProviderPool.LocalizedObjectGetter">
                    <type_params>
                        <type_param name="CollatorProvider"/>
                        <type_param name="Collator"/>
                    </type_params>
                </implements>
                <javadoc line="527">
                    Obtains a Collator instance from a CollatorProvider
                      implementation.                    
                </javadoc>
                <declaration name="INSTANCE" type="CollatorGetter" line="533"/>
                <method name="getObject" type="Collator" line="538">
                    <params>
                        <param name="collatorProvider" type="CollatorProvider"/>
                        <param name="locale" type="Locale"/>
                        <param name="key" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                    <comment line="543">
                        put this Collator instance in the cache for two locales, one
                         is for the desired locale, and the other is for the actual
                         locale where the provider is found, which may be a fall back locale.                        
                    </comment>
                    <declaration name="result" type="Collator" line="540"/>
                    <scope line="541"/>
                </method>
            </class>
        </class>
    </source>