<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="sun.text.bidi.BidiBase"/>
        <class name="Bidi" line="3">
            <javadoc line="3">
                This class implements the Unicode Bidirectional Algorithm.
                  &lt;p&gt;
                  A Bidi object provides information on the bidirectional reordering of the text
                  used to create it.  This is required, for example, to properly display Arabic
                  or Hebrew text.  These languages are inherently mixed directional, as they order
                  numbers from left-to-right while ordering most other text from right-to-left.
                  &lt;p&gt;
                  Once created, a Bidi object can be queried to see if the text it represents is
                  all left-to-right or all right-to-left.  Such objects are very lightweight and
                  this text is relatively easy to process.
                  &lt;p&gt;
                  If there are multiple runs of text, information about the runs can be accessed
                  by indexing to get the start, limit, and level of a run.  The level represents
                  both the direction and the &apos;nesting level&apos; of a directional run.  Odd levels
                  are right-to-left, while even levels are left-to-right.  So for example level
                  0 represents left-to-right text, while level 1 represents right-to-left text, and
                  level 2 represents left-to-right text embedded in a right-to-left run.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTION_LEFT_TO_RIGHT" type="int" line="24"/>
            <javadoc line="24">
                Constant indicating base direction is left-to-right.                
            </javadoc>
            <declaration name="DIRECTION_RIGHT_TO_LEFT" type="int" line="28"/>
            <javadoc line="28">
                Constant indicating base direction is right-to-left.                
            </javadoc>
            <declaration name="DIRECTION_DEFAULT_LEFT_TO_RIGHT" type="int" line="32"/>
            <javadoc line="32">
                Constant indicating that the base direction depends on the first strong
                  directional character in the text according to the Unicode
                  Bidirectional Algorithm.  If no strong directional character is present,
                  the base direction is left-to-right.                
            </javadoc>
            <declaration name="DIRECTION_DEFAULT_RIGHT_TO_LEFT" type="int" line="39"/>
            <javadoc line="39">
                Constant indicating that the base direction depends on the first strong
                  directional character in the text according to the Unicode
                  Bidirectional Algorithm.  If no strong directional character is present,
                  the base direction is right-to-left.                
            </javadoc>
            <declaration name="bidiBase" type="BidiBase" line="46"/>
            <javadoc line="47">
                Create Bidi from the given paragraph of text and base direction.                
                <param>
                    paragraph a paragraph of text                    
                </param>
                <param>
                    flags a collection of flags that control the algorithm.  The
                      algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,
                      DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.
                      Other values are reserved.                    
                </param>
            </javadoc>
            <method name="Bidi" type="constructor" line="55">
                <params>
                    <param name="paragraph" type="String"/>
                    <param name="flags" type="int"/>
                </params>
                <scope line="56"/>
            </method>
            <javadoc line="61">
                Create Bidi from the given paragraph of text.
                  &lt;p&gt;
                  The RUN_DIRECTION attribute in the text, if present, determines the base
                  direction (left-to-right or right-to-left).  If not present, the base
                  direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right
                  if there are no strong directional characters in the text.  This attribute, if
                  present, must be applied to all the text in the paragraph.
                  &lt;p&gt;
                  The BIDI_EMBEDDING attribute in the text, if present, represents embedding level
                  information.  Negative values from -1 to -62 indicate overrides at the absolute value
                  of the level.  Positive values from 1 to 62 indicate embeddings.  Where values are
                  zero or not defined, the base embedding level as determined by the base direction
                  is assumed.
                  &lt;p&gt;
                  The NUMERIC_SHAPING attribute in the text, if present, converts European digits to
                  other decimal digits before running the bidi algorithm.  This attribute, if present,
                  must be applied to all the text in the paragraph.                
                <param>
                    paragraph a paragraph of text with optional character and paragraph attribute information                    
                </param>
                <see>
                    java.awt.font.TextAttribute#BIDI_EMBEDDING                    
                </see>
                <see>
                    java.awt.font.TextAttribute#NUMERIC_SHAPING                    
                </see>
                <see>
                    java.awt.font.TextAttribute#RUN_DIRECTION                    
                </see>
            </javadoc>
            <method name="Bidi" type="constructor" line="84">
                <params>
                    <param name="paragraph" type="AttributedCharacterIterator"/>
                </params>
                <scope line="85"/>
            </method>
            <javadoc line="91">
                Create Bidi from the given text, embedding, and direction information.
                  The embeddings array may be null.  If present, the values represent embedding level
                  information.  Negative values from -1 to -61 indicate overrides at the absolute value
                  of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are
                  zero, the base embedding level as determined by the base direction is assumed.                
                <param>
                    text an array containing the paragraph of text to process.                    
                </param>
                <param>
                    textStart the index into the text array of the start of the paragraph.                    
                </param>
                <param>
                    embeddings an array containing embedding values for each character in the paragraph.
                      This can be null, in which case it is assumed that there is no external embedding information.                    
                </param>
                <param>
                    embStart the index into the embedding array of the start of the paragraph.                    
                </param>
                <param>
                    paragraphLength the length of the paragraph in the text and embeddings arrays.                    
                </param>
                <param>
                    flags a collection of flags that control the algorithm.  The
                      algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,
                      DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.
                      Other values are reserved.                    
                </param>
            </javadoc>
            <method name="Bidi" type="constructor" line="108">
                <params>
                    <param name="text" type="char[]"/>
                    <param name="textStart" type="int"/>
                    <param name="embeddings" type="byte[]"/>
                    <param name="embStart" type="int"/>
                    <param name="paragraphLength" type="int"/>
                    <param name="flags" type="int"/>
                </params>
                <scope line="109"/>
                <scope line="112"/>
                <scope line="115"/>
                <scope line="118"/>
            </method>
            <javadoc line="123">
                Create a Bidi object representing the bidi information on a line of text within
                  the paragraph represented by the current Bidi.  This call is not required if the
                  entire paragraph fits on one line.                
                <param>
                    lineStart the offset from the start of the paragraph to the start of the line.                    
                </param>
                <param>
                    lineLimit the offset from the start of the paragraph to the limit of the line.                    
                </param>
            </javadoc>
            <method name="createLineBidi" type="Bidi" line="130">
                <params>
                    <param name="lineStart" type="int"/>
                    <param name="lineLimit" type="int"/>
                </params>
                <declaration name="astr" type="AttributedString" line="131"/>
                <declaration name="newBidi" type="Bidi" line="132"/>
            </method>
            <javadoc line="135">
                Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right
                  and right-to-left text, or the base direction differs from the direction of the only run of text.                
                <return>
                    true if the line is not left-to-right or right-to-left.                    
                </return>
            </javadoc>
            <method name="isMixed" type="boolean" line="140"/>
            <javadoc line="143">
                Return true if the line is all left-to-right text and the base direction is left-to-right.                
                <return>
                    true if the line is all left-to-right text and the base direction is left-to-right                    
                </return>
            </javadoc>
            <method name="isLeftToRight" type="boolean" line="147"/>
            <javadoc line="150">
                Return true if the line is all right-to-left text, and the base direction is right-to-left.                
                <return>
                    true if the line is all right-to-left text, and the base direction is right-to-left                    
                </return>
            </javadoc>
            <method name="isRightToLeft" type="boolean" line="154"/>
            <javadoc line="157">
                Return the length of text in the line.                
                <return>
                    the length of text in the line                    
                </return>
            </javadoc>
            <method name="getLength" type="int" line="161"/>
            <javadoc line="164">
                Return true if the base direction is left-to-right.                
                <return>
                    true if the base direction is left-to-right                    
                </return>
            </javadoc>
            <method name="baseIsLeftToRight" type="boolean" line="168"/>
            <javadoc line="171">
                Return the base level (0 if left-to-right, 1 if right-to-left).                
                <return>
                    the base level                    
                </return>
            </javadoc>
            <method name="getBaseLevel" type="int" line="175"/>
            <javadoc line="178">
                Return the resolved level of the character at offset.  If offset is &lt;0 or &gt;=
                  the length of the line, return the base direction level.                
                <param>
                    offset the index of the character for which to return the level                    
                </param>
                <return>
                    the resolved level of the character at offset                    
                </return>
            </javadoc>
            <method name="getLevelAt" type="int" line="184">
                <params>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="187">
                Return the number of level runs.                
                <return>
                    the number of level runs                    
                </return>
            </javadoc>
            <method name="getRunCount" type="int" line="191"/>
            <javadoc line="194">
                Return the level of the nth logical run in this line.                
                <param>
                    run the index of the run, between 0 and <code>getRunCount()</code>                    
                </param>
                <return>
                    the level of the run                    
                </return>
            </javadoc>
            <method name="getRunLevel" type="int" line="199">
                <params>
                    <param name="run" type="int"/>
                </params>
            </method>
            <javadoc line="202">
                Return the index of the character at the start of the nth logical run in this line, as
                  an offset from the start of the line.                
                <param>
                    run the index of the run, between 0 and <code>getRunCount()</code>                    
                </param>
                <return>
                    the start of the run                    
                </return>
            </javadoc>
            <method name="getRunStart" type="int" line="208">
                <params>
                    <param name="run" type="int"/>
                </params>
            </method>
            <javadoc line="211">
                Return the index of the character past the end of the nth logical run in this line, as
                  an offset from the start of the line.  For example, this will return the length
                  of the line for the last run on the line.                
                <param>
                    run the index of the run, between 0 and <code>getRunCount()</code>                    
                </param>
                <return>
                    limit the limit of the run                    
                </return>
            </javadoc>
            <method name="getRunLimit" type="int" line="218">
                <params>
                    <param name="run" type="int"/>
                </params>
            </method>
            <javadoc line="221">
                Return true if the specified text requires bidi analysis.  If this returns false,
                  the text will display left-to-right.  Clients can then avoid constructing a Bidi object.
                  Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped
                  and ordered for display, and so will not cause this function to return true.                
                <param>
                    text the text containing the characters to test                    
                </param>
                <param>
                    start the start of the range of characters to test                    
                </param>
                <param>
                    limit the limit of the range of characters to test                    
                </param>
                <return>
                    true if the range of characters requires bidi analysis                    
                </return>
            </javadoc>
            <method name="requiresBidi" type="boolean" line="231">
                <params>
                    <param name="text" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <javadoc line="234">
                Reorder the objects in the array into visual order based on their levels.
                  This is a utility function to use when you have a collection of objects
                  representing runs of text in logical order, each run containing text
                  at a single level.  The elements at &lt;code&gt;index&lt;/code&gt; from
                  &lt;code&gt;objectStart&lt;/code&gt; up to &lt;code&gt;objectStart + count&lt;/code&gt;
                  in the objects array will be reordered into visual order assuming
                  each run of text has the level indicated by the corresponding element
                  in the levels array (at &lt;code&gt;index - objectStart + levelStart&lt;/code&gt;).                
                <param>
                    levels an array representing the bidi level of each object                    
                </param>
                <param>
                    levelStart the start position in the levels array                    
                </param>
                <param>
                    objects the array of objects to be reordered into visual order                    
                </param>
                <param>
                    objectStart the start position in the objects array                    
                </param>
                <param>
                    count the number of objects to reorder                    
                </param>
            </javadoc>
            <method name="reorderVisually" type="void" line="249">
                <params>
                    <param name="levels" type="byte[]"/>
                    <param name="levelStart" type="int"/>
                    <param name="objects" type="Object[]"/>
                    <param name="objectStart" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="252">
                Display the bidi internal state, used in debugging.                
            </javadoc>
            <method name="toString" type="String" line="255"/>
        </class>
    </source>