<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.io.Serializable"/>
        <class name="Format" line="43">
            <comment line="266">
                                
            </comment>
            <comment line="267">
                Convenience methods for creating AttributedCharacterIterators from                
            </comment>
            <comment line="268">
                different parameters.                
            </comment>
            <comment line="269">
                                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="43">
                &lt;code&gt;Format&lt;/code&gt; is an abstract base class for formatting locale-sensitive
                  information such as dates, messages, and numbers.
                  &lt;p&gt;
                  &lt;code&gt;Format&lt;/code&gt; defines the programming interface for formatting
                  locale-sensitive objects into &lt;code&gt;String&lt;/code&gt;s (the
                  &lt;code&gt;format&lt;/code&gt; method) and for parsing &lt;code&gt;String&lt;/code&gt;s back
                  into objects (the &lt;code&gt;parseObject&lt;/code&gt; method).
                  &lt;p&gt;
                  Generally, a format&apos;s &lt;code&gt;parseObject&lt;/code&gt; method must be able to parse
                  any string formatted by its &lt;code&gt;format&lt;/code&gt; method. However, there may
                  be exceptional cases where this is not possible. For example, a
                  &lt;code&gt;format&lt;/code&gt; method might create two adjacent integer numbers with
                  no separator in between, and in this case the &lt;code&gt;parseObject&lt;/code&gt; could
                  not tell which digits belong to which number.
                  &lt;h4&gt;Subclassing&lt;/h4&gt;
                  &lt;p&gt;
                  The Java Platform provides three specialized subclasses of &lt;code&gt;Format&lt;/code&gt;--
                  &lt;code&gt;DateFormat&lt;/code&gt;, &lt;code&gt;MessageFormat&lt;/code&gt;, and
                  &lt;code&gt;NumberFormat&lt;/code&gt;--for formatting dates, messages, and numbers,
                  respectively.
                  &lt;p&gt;
                  Concrete subclasses must implement three methods:
                  &lt;ol&gt;
                  &lt;li&gt; &lt;code&gt;format(Object obj, StringBuffer toAppendTo, FieldPosition pos)&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;formatToCharacterIterator(Object obj)&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;parseObject(String source, ParsePosition pos)&lt;/code&gt;
                  &lt;/ol&gt;
                  These general methods allow polymorphic parsing and formatting of objects
                  and are used, for example, by &lt;code&gt;MessageFormat&lt;/code&gt;.
                  Subclasses often also provide additional &lt;code&gt;format&lt;/code&gt; methods for
                  specific input types as well as &lt;code&gt;parse&lt;/code&gt; methods for specific
                  result types. Any &lt;code&gt;parse&lt;/code&gt; method that does not take a
                  &lt;code&gt;ParsePosition&lt;/code&gt; argument should throw &lt;code&gt;ParseException&lt;/code&gt;
                  when no text in the required format is at the beginning of the input text.
                  &lt;p&gt;
                  Most subclasses will also implement the following factory methods:
                  &lt;ol&gt;
                  &lt;li&gt;
                  &lt;code&gt;getInstance&lt;/code&gt; for getting a useful format object appropriate
                  for the current locale
                  &lt;li&gt;
                  &lt;code&gt;getInstance(Locale)&lt;/code&gt; for getting a useful format
                  object appropriate for the specified locale
                  &lt;/ol&gt;
                  In addition, some subclasses may also implement other
                  &lt;code&gt;getXxxxInstance&lt;/code&gt; methods for more specialized control. For
                  example, the &lt;code&gt;NumberFormat&lt;/code&gt; class provides
                  &lt;code&gt;getPercentInstance&lt;/code&gt; and &lt;code&gt;getCurrencyInstance&lt;/code&gt;
                  methods for getting specialized number formatters.
                  &lt;p&gt;
                  Subclasses of &lt;code&gt;Format&lt;/code&gt; that allow programmers to create objects
                  for locales (with &lt;code&gt;getInstance(Locale)&lt;/code&gt; for example)
                  must also implement the following class method:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public static Locale[] getAvailableLocales()
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  And finally subclasses may define a set of constants to identify the various
                  fields in the formatted output. These constants are used to create a FieldPosition
                  object which identifies what information is contained in the field and its
                  position in the formatted result. These constants should be named
                  &lt;code&gt;&lt;em&gt;item&lt;/em&gt;_FIELD&lt;/code&gt; where &lt;code&gt;&lt;em&gt;item&lt;/em&gt;&lt;/code&gt; identifies
                  the field. For examples of these constants, see &lt;code&gt;ERA_FIELD&lt;/code&gt; and its
                  friends in {@link DateFormat}.
                  &lt;h4&gt;&lt;a name=&quot;synchronization&quot;&gt;Synchronization&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt;
                  Formats are generally not synchronized.
                  It is recommended to create separate format instances for each thread.
                  If multiple threads access a format concurrently, it must be synchronized
                  externally.                
                <see>
                    java.text.ParsePosition                    
                </see>
                <see>
                    java.text.FieldPosition                    
                </see>
                <see>
                    java.text.NumberFormat                    
                </see>
                <see>
                    java.text.DateFormat                    
                </see>
                <see>
                    java.text.MessageFormat                    
                </see>
                <author>
                    Mark Davis                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="135"/>
            <javadoc line="137">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="Format" type="constructor" line="141"/>
            <javadoc line="144">
                Formats an object to produce a string. This is equivalent to
                  &lt;blockquote&gt;{@link #format(Object,StringBuffer,FieldPosition) format}&lt;code&gt;(obj,
                  new StringBuffer(), new FieldPosition(0)).toString();&lt;/code&gt;
                  &lt;/blockquote&gt;                
                <param>
                    obj    The object to format                    
                </param>
                <return>
                    Formatted string.                    
                </return>
                <exception>
                    IllegalArgumentException if the Format cannot format the given
                      object                    
                </exception>
            </javadoc>
            <method name="format" type="String" line="156">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="format" type="StringBuffer" line="160"/>
            <javadoc line="160">
                Formats an object and appends the resulting text to a given string
                  buffer.
                  If the &lt;code&gt;pos&lt;/code&gt; argument identifies a field used by the format,
                  then its indices are set to the beginning and end of the first such
                  field encountered.                
                <param>
                    obj    The object to format                    
                </param>
                <param>
                    toAppendTo    where the text is to be appended                    
                </param>
                <param>
                    pos    A <code>FieldPosition</code> identifying a field
                      in the formatted text                    
                </param>
                <return>
                    the string buffer passed in as <code>toAppendTo</code>,
                      with formatted text appended                    
                </return>
                <exception>
                    NullPointerException if <code>toAppendTo</code> or
                      <code>pos</code> is null                    
                </exception>
                <exception>
                    IllegalArgumentException if the Format cannot format the given
                      object                    
                </exception>
            </javadoc>
            <javadoc line="182">
                Formats an Object producing an &lt;code&gt;AttributedCharacterIterator&lt;/code&gt;.
                  You can use the returned &lt;code&gt;AttributedCharacterIterator&lt;/code&gt;
                  to build the resulting String, as well as to determine information
                  about the resulting String.
                  &lt;p&gt;
                  Each attribute key of the AttributedCharacterIterator will be of type
                  &lt;code&gt;Field&lt;/code&gt;. It is up to each &lt;code&gt;Format&lt;/code&gt; implementation
                  to define what the legal values are for each attribute in the
                  &lt;code&gt;AttributedCharacterIterator&lt;/code&gt;, but typically the attribute
                  key is also used as the attribute value.
                  &lt;p&gt;The default implementation creates an
                  &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; with no attributes. Subclasses
                  that support fields should override this and create an
                  &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; with meaningful attributes.                
                <exception>
                    NullPointerException if obj is null.                    
                </exception>
                <exception>
                    IllegalArgumentException when the Format cannot format the
                      given object.                    
                </exception>
                <param>
                    obj The object to format                    
                </param>
                <return>
                    AttributedCharacterIterator describing the formatted value.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="formatToCharacterIterator" type="AttributedCharacterIterator" line="205">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="parseObject" type="Object" line="209"/>
            <javadoc line="209">
                Parses text from a string to produce an object.
                  &lt;p&gt;
                  The method attempts to parse text starting at the index given by
                  &lt;code&gt;pos&lt;/code&gt;.
                  If parsing succeeds, then the index of &lt;code&gt;pos&lt;/code&gt; is updated
                  to the index after the last character used (parsing does not necessarily
                  use all characters up to the end of the string), and the parsed
                  object is returned. The updated &lt;code&gt;pos&lt;/code&gt; can be used to
                  indicate the starting point for the next call to this method.
                  If an error occurs, then the index of &lt;code&gt;pos&lt;/code&gt; is not
                  changed, the error index of &lt;code&gt;pos&lt;/code&gt; is set to the index of
                  the character where the error occurred, and null is returned.                
                <param>
                    source A <code>String</code>, part of which should be parsed.                    
                </param>
                <param>
                    pos A <code>ParsePosition</code> object with index and error
                      index information as described above.                    
                </param>
                <return>
                    An <code>Object</code> parsed from the string. In case of
                      error, returns null.                    
                </return>
                <exception>
                    NullPointerException if <code>pos</code> is null.                    
                </exception>
            </javadoc>
            <javadoc line="232">
                Parses text from the beginning of the given string to produce an object.
                  The method may not use the entire text of the given string.                
                <param>
                    source A <code>String</code> whose beginning should be parsed.                    
                </param>
                <return>
                    An <code>Object</code> parsed from the string.                    
                </return>
                <exception>
                    ParseException if the beginning of the specified string
                      cannot be parsed.                    
                </exception>
            </javadoc>
            <method name="parseObject" type="Object" line="241">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="pos" type="ParsePosition" line="242"/>
                <declaration name="result" type="Object" line="243"/>
                <scope line="244"/>
            </method>
            <javadoc line="251">
                Creates and returns a copy of this object.                
                <return>
                    a clone of this instance.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="256">
                <comment line="260">
                    will never happen                    
                </comment>
                <scope line="257"/>
                <scope line="259"/>
            </method>
            <javadoc line="270">
                Creates an &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; for the String
                  &lt;code&gt;s&lt;/code&gt;.                
                <param>
                    s String to create AttributedCharacterIterator from                    
                </param>
                <return>
                    AttributedCharacterIterator wrapping s                    
                </return>
            </javadoc>
            <method name="createAttributedCharacterIterator" type="AttributedCharacterIterator" line="277">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="as" type="AttributedString" line="278"/>
            </method>
            <javadoc line="283">
                Creates an &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; containg the
                  concatenated contents of the passed in
                  &lt;code&gt;AttributedCharacterIterator&lt;/code&gt;s.                
                <param>
                    iterators AttributedCharacterIterators used to create resulting
                      AttributedCharacterIterators                    
                </param>
                <return>
                    AttributedCharacterIterator wrapping passed in
                      AttributedCharacterIterators                    
                </return>
            </javadoc>
            <method name="createAttributedCharacterIterator" type="AttributedCharacterIterator" line="294">
                <params>
                    <param name="iterators" type="AttributedCharacterIterator[]"/>
                </params>
                <declaration name="as" type="AttributedString" line="295"/>
            </method>
            <javadoc line="300">
                Returns an AttributedCharacterIterator with the String
                  &lt;code&gt;string&lt;/code&gt; and additional key/value pair &lt;code&gt;key&lt;/code&gt;,
                  &lt;code&gt;value&lt;/code&gt;.                
                <param>
                    string String to create AttributedCharacterIterator from                    
                </param>
                <param>
                    key Key for AttributedCharacterIterator                    
                </param>
                <param>
                    value Value associated with key in AttributedCharacterIterator                    
                </param>
                <return>
                    AttributedCharacterIterator wrapping args                    
                </return>
            </javadoc>
            <method name="createAttributedCharacterIterator" type="AttributedCharacterIterator" line="312">
                <params>
                    <param name="string" type="String"/>
                    <param name="key" type="AttributedCharacterIterator.Attribute"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="as" type="AttributedString" line="313"/>
            </method>
            <javadoc line="319">
                Creates an AttributedCharacterIterator with the contents of
                  &lt;code&gt;iterator&lt;/code&gt; and the additional attribute &lt;code&gt;key&lt;/code&gt;
                  &lt;code&gt;value&lt;/code&gt;.                
                <param>
                    iterator Initial AttributedCharacterIterator to add arg to                    
                </param>
                <param>
                    key Key for AttributedCharacterIterator                    
                </param>
                <param>
                    value Value associated with key in AttributedCharacterIterator                    
                </param>
                <return>
                    AttributedCharacterIterator wrapping args                    
                </return>
            </javadoc>
            <method name="createAttributedCharacterIterator" type="AttributedCharacterIterator" line="331">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="key" type="AttributedCharacterIterator.Attribute"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="as" type="AttributedString" line="332"/>
            </method>
            <class name="Field" line="339">
                <extends class="AttributedCharacterIterator.Attribute"/>
                <comment line="350">
                    Proclaim serial compatibility with 1.4 FCS                    
                </comment>
                <javadoc line="339">
                    Defines constants that are used as attribute keys in the
                      &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; returned
                      from &lt;code&gt;Format.formatToCharacterIterator&lt;/code&gt; and as
                      field identifiers in &lt;code&gt;FieldPosition&lt;/code&gt;.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="350"/>
                <javadoc line="352">
                    Creates a Field with the specified name.                    
                    <param>
                        name Name of the attribute                        
                    </param>
                </javadoc>
                <method name="Field" type="constructor" line="357">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
            </class>
            <interface name="FieldDelegate">
                <comment line="350">
                    Proclaim serial compatibility with 1.4 FCS                    
                </comment>
                <javadoc line="363">
                    FieldDelegate is notified by the various &lt;code&gt;Format&lt;/code&gt;
                      implementations as they are formatting the Objects. This allows for
                      storage of the individual sections of the formatted String for
                      later use, such as in a &lt;code&gt;FieldPosition&lt;/code&gt; or for an
                      &lt;code&gt;AttributedCharacterIterator&lt;/code&gt;.
                      &lt;p&gt;
                      Delegates should NOT assume that the &lt;code&gt;Format&lt;/code&gt; will notify
                      the delegate of fields in any particular order.                    
                    <see>
                        FieldPosition.Delegate                        
                    </see>
                    <see>
                        CharacterIteratorFieldDelegate                        
                    </see>
                </javadoc>
                <method name="formatted" type="void" line="377"/>
                <javadoc line="377">
                    Notified when a particular region of the String is formatted. This
                      method will be invoked if there is no corresponding integer field id
                      matching &lt;code&gt;attr&lt;/code&gt;.                    
                    <param>
                        attr Identifies the field matched                        
                    </param>
                    <param>
                        value Value associated with the field                        
                    </param>
                    <param>
                        start Beginning location of the field, will be >= 0                        
                    </param>
                    <param>
                        end End of the field, will be >= start and <= buffer.length()                        
                    </param>
                    <param>
                        buffer Contains current formatted value, receiver should
                          NOT modify it.                        
                    </param>
                </javadoc>
                <method name="formatted" type="void" line="392"/>
                <javadoc line="392">
                    Notified when a particular region of the String is formatted.                    
                    <param>
                        fieldID Identifies the field by integer                        
                    </param>
                    <param>
                        attr Identifies the field matched                        
                    </param>
                    <param>
                        value Value associated with the field                        
                    </param>
                    <param>
                        start Beginning location of the field, will be >= 0                        
                    </param>
                    <param>
                        end End of the field, will be >= start and <= buffer.length()                        
                    </param>
                    <param>
                        buffer Contains current formatted value, receiver should
                          NOT modify it.                        
                    </param>
                </javadoc>
            </interface>
        </class>
    </source>