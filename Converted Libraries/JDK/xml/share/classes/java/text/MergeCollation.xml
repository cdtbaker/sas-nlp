<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.util.ArrayList"/>
        <class name="MergeCollation" line="43">
            <comment line="205">
                ============================================================
                 privates
                ============================================================                
            </comment>
            <comment line="208">
                a list of PatternEntries                
            </comment>
            <comment line="213">
                This is really used as a local variable inside fixEntry, but we cache
                 it here to avoid newing it up every time the method is called.                
            </comment>
            <comment line="217">
                When building a MergeCollation, we need to do lots of searches to see
                 whether a given entry is already in the table.  Since we&apos;re using an
                 array, this would make the algorithm O(N*N).  To speed things up, we
                 use this bit array to remember whether the array contains any entries
                 starting with each Unicode character.  If not, we can avoid the search.
                 Using BitSet would make this easier, but it&apos;s significantly slower.                
            </comment>
            <comment line="230">
                If the strength is RESET, then just change the lastEntry to
                be the current. (If the current is not in patterns, signal an error).
                If not, then remove the current entry, and add it after lastEntry
                (which is usually at the end).                
            </comment>
            <javadoc line="43">
                Utility class for normalizing and merging patterns for collation.
                  Patterns are strings of the form &lt;entry&gt;, where &lt;entry&gt; has the
                  form:
                  &lt;pattern&gt; := &lt;entry&gt;
                  &lt;entry&gt; := &lt;separator&gt;&lt;chars&gt;{&quot;/&quot;&lt;extension&gt;}
                  &lt;separator&gt; := &quot;=&quot;, &quot;,&quot;, &quot;;&quot;, &quot;&lt;&quot;, &quot;&amp;&quot;
                  &lt;chars&gt;, and &lt;extension&gt; are both arbitrary strings.
                  unquoted whitespaces are ignored.
                  &apos;xxx&apos; can be used to quote characters
                  One difference from Collator is that &amp; is used to reset to a current
                  point. Or, in other words, it introduces a new sequence which is to
                  be added to the old.
                  That is: &quot;a &lt; b &lt; c &lt; d&quot; is the same as &quot;a &lt; b &amp; b &lt; c &amp; c &lt; d&quot; OR
                  &quot;a &lt; b &lt; d &amp; b &lt; c&quot;
                  XXX: make &apos;&apos; be a single quote.                
                <see>
                    PatternEntry                    
                </see>
                <author>
                    Mark Davis, Helena Shih                    
                </author>
            </javadoc>
            <javadoc line="65">
                Creates from a pattern                
                <exception>
                    ParseException If the input pattern is incorrect.                    
                </exception>
            </javadoc>
            <method name="MergeCollation" type="constructor" line="70">
                <params>
                    <param name="pattern" type="String"/>
                </params>
            </method>
            <javadoc line="76">
                recovers current pattern                
            </javadoc>
            <method name="getPattern" type="String" line="79"/>
            <javadoc line="83">
                recovers current pattern.                
                <param>
                    withWhiteSpace puts spacing around the entries, and \n
                      before &amp; and &lt;                    
                </param>
            </javadoc>
            <method name="getPattern" type="String" line="88">
                <params>
                    <param name="withWhiteSpace" type="boolean"/>
                </params>
                <declaration name="result" type="StringBuffer" line="89"/>
                <declaration name="tmp" type="PatternEntry" line="90"/>
                <declaration name="extList" type="ArrayList" line="91"/>
                <declaration name="i" type="int" line="92"/>
                <scope line="93">
                    <declaration name="entry" type="PatternEntry" line="94"/>
                    <scope line="95"/>
                    <scope line="99">
                        <scope line="100">
                            <declaration name="last" type="PatternEntry" line="101"/>
                            <scope line="102"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="111">
                    <declaration name="last" type="PatternEntry" line="112"/>
                    <scope line="113"/>
                </scope>
            </method>
            <method name="findLastWithNoExtension" type="PatternEntry" line="122">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="123">
                    <declaration name="entry" type="PatternEntry" line="124"/>
                    <scope line="125"/>
                </scope>
            </method>
            <javadoc line="132">
                emits the pattern for collation builder.                
                <return>
                    emits the string in the format understable to the collation
                      builder.                    
                </return>
            </javadoc>
            <method name="emitPattern" type="String" line="137"/>
            <javadoc line="141">
                emits the pattern for collation builder.                
                <param>
                    withWhiteSpace puts spacing around the entries, and \n
                      before &amp; and &lt;                    
                </param>
                <return>
                    emits the string in the format understable to the collation
                      builder.                    
                </return>
            </javadoc>
            <method name="emitPattern" type="String" line="148">
                <params>
                    <param name="withWhiteSpace" type="boolean"/>
                </params>
                <declaration name="result" type="StringBuffer" line="149"/>
                <scope line="151">
                    <declaration name="entry" type="PatternEntry" line="152"/>
                    <scope line="153"/>
                </scope>
            </method>
            <javadoc line="160">
                sets the pattern.                
            </javadoc>
            <method name="setPattern" type="void" line="164">
                <params>
                    <param name="pattern" type="String"/>
                </params>
            </method>
            <javadoc line="169">
                adds a pattern to the current one.                
                <param>
                    pattern the new pattern to be added                    
                </param>
            </javadoc>
            <method name="addPattern" type="void" line="174">
                <params>
                    <param name="pattern" type="String"/>
                </params>
                <declaration name="parser" type="PatternEntry.Parser" line="178"/>
                <declaration name="entry" type="PatternEntry" line="180"/>
                <scope line="181"/>
            </method>
            <javadoc line="187">
                gets count of separate entries                
                <return>
                    the size of pattern entries                    
                </return>
            </javadoc>
            <method name="getCount" type="int" line="191"/>
            <javadoc line="195">
                gets count of separate entries                
                <param>
                    index the offset of the desired pattern entry                    
                </param>
                <return>
                    the requested pattern entry                    
                </return>
            </javadoc>
            <method name="getItemAt" type="PatternEntry" line="200">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <declaration name="patterns" type="ArrayList" line="207"/>
            <declaration name="saveEntry" type="PatternEntry" line="209"/>
            <declaration name="lastEntry" type="PatternEntry" line="210"/>
            <declaration name="excess" type="StringBuffer" line="214"/>
            <declaration name="statusArray" type="byte[]" line="224"/>
            <declaration name="BITARRAYMASK" type="byte" line="225"/>
            <declaration name="BYTEPOWER" type="int" line="226"/>
            <declaration name="BYTEMASK" type="int" line="227"/>
            <method name="fixEntry" type="void" line="236">
                <params>
                    <param name="newEntry" type="PatternEntry"/>
                </params>
                <comment line="238">
                    check to see whether the new entry has the same characters as the previous
                     entry did (this can happen when a pattern declaring a difference between two
                     strings that are canonically equivalent is normalized).  If so, and the strength
                     is anything other than IDENTICAL or RESET, throw an exception (you can&apos;t
                     declare a string to be unequal to itself).       --rtg 5/24/99                    
                </comment>
                <comment line="251">
                    otherwise, just skip this entry and behave as though you never saw it                    
                </comment>
                <comment line="270">
                    We&apos;re going to add an element that starts with this
                     character, so go ahead and set its bit.                    
                </comment>
                <scope line="243">
                    <scope line="245"/>
                    <scope line="249"/>
                </scope>
                <declaration name="changeLastEntry" type="boolean" line="255"/>
                <scope line="256">
                    <declaration name="oldIndex" type="int" line="257"/>
                    <scope line="259">
                        <declaration name="c" type="char" line="261"/>
                        <declaration name="statusIndex" type="int" line="262"/>
                        <declaration name="bitClump" type="byte" line="263"/>
                        <declaration name="setBit" type="byte" line="264"/>
                        <scope line="266"/>
                        <scope line="268"/>
                    </scope>
                    <scope line="273"/>
                    <scope line="276"/>
                    <declaration name="lastIndex" type="int" line="281"/>
                    <scope line="283">
                        <scope line="285"/>
                    </scope>
                    <scope line="290"/>
                    <scope line="293"/>
                </scope>
                <scope line="297"/>
            </method>
            <method name="findLastEntry" type="int" line="304">
                <params>
                    <param name="entry" type="PatternEntry"/>
                    <param name="excessChars" type="StringBuffer"/>
                </params>
                <comment line="310">
                    Search backwards for string that contains this one;
                     most likely entry is last one                    
                </comment>
                <scope line="308">
                    <declaration name="oldIndex" type="int" line="312"/>
                    <scope line="313">
                        <declaration name="index" type="int" line="314"/>
                        <scope line="316"/>
                    </scope>
                    <scope line="319"/>
                </scope>
                <scope line="326">
                    <declaration name="i" type="int" line="327"/>
                    <scope line="328">
                        <declaration name="e" type="PatternEntry" line="329"/>
                        <scope line="331"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>