<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.util.Vector"/>
        <import package="sun.text.UCompactIntArray"/>
        <import package="sun.text.IntHashtable"/>
        <import package="sun.text.ComposedCharIter"/>
        <import package="sun.text.CollatorUtilities"/>
        <import package="sun.text.normalizer.NormalizerImpl"/>
        <class name="RBTableBuilder" line="8">
            <javadoc line="8">
                This class contains all the code to parse a RuleBasedCollator pattern
                  and build a RBCollationTables object from it.  A particular instance
                  of tis class exists only during the actual build process-- once an
                  RBCollationTables object has been built, the RBTableBuilder object
                  goes away.  This object carries all of the state which is only needed
                  during the build process, plus a &quot;shadow&quot; copy of all of the state
                  that will go into the tables object itself.  This object communicates
                  with RBCollationTables through a separate class, RBCollationTables.BuildAPI,
                  this is an inner class of RBCollationTables and provides a separate
                  private API for communication with RBTableBuilder.
                  This class isn&apos;t just an inner class of RBCollationTables itself because
                  of its large size.  For source-code readability, it seemed better for the
                  builder to have its own source file.                
            </javadoc>
            <method name="RBTableBuilder" type="constructor" line="24">
                <params>
                    <param name="tables" type="RBCollationTables.BuildAPI"/>
                </params>
            </method>
            <javadoc line="27">
                Create a table-based collation object with the given rules.
                  This is the main function that actually builds the tables and
                  stores them back in the RBCollationTables object.  It is called
                  ONLY by the RBCollationTables constructor.                
                <see>
                    java.util.RuleBasedCollator#RuleBasedCollator                    
                </see>
                <exception>
                    ParseException If the rules format is incorrect.                    
                </exception>
            </javadoc>
            <method name="build" type="void" line="35">
                <params>
                    <param name="pattern" type="String"/>
                    <param name="decmp" type="int"/>
                </params>
                <declaration name="isSource" type="boolean" line="36"/>
                <declaration name="i" type="int" line="37"/>
                <declaration name="expChars" type="String" line="38"/>
                <declaration name="groupChars" type="String" line="39"/>
                <declaration name="order" type="int" line="44"/>
                <scope line="45">
                    <declaration name="entry" type="PatternEntry" line="46"/>
                    <scope line="47">
                        <scope line="49"/>
                        <scope line="63"/>
                        <scope line="66">
                            <declaration name="ch" type="char" line="67"/>
                            <scope line="68"/>
                            <scope line="71"/>
                        </scope>
                        <scope line="75">
                            <declaration name="ch" type="char" line="76"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="86">
                Add expanding entries for pre-composed unicode characters so that this
                  collator can be used reasonably well with decomposition turned off.                
            </javadoc>
            <method name="addComposedChars" type="void" line="90">
                <declaration name="iter" type="ComposedCharIter" line="91"/>
                <declaration name="c" type="int" line="92"/>
                <scope line="93">
                    <scope line="94">
                        <declaration name="s" type="String" line="95"/>
                        <scope line="96">
                            <declaration name="order" type="int" line="97"/>
                            <scope line="98"/>
                        </scope>
                        <scope line="103">
                            <declaration name="ch0" type="char" line="104"/>
                            <scope line="105">
                                <declaration name="order" type="int" line="106"/>
                                <scope line="107"/>
                            </scope>
                        </scope>
                        <declaration name="contractOrder" type="int" line="113"/>
                        <scope line="114"/>
                        <scope line="117">
                            <declaration name="allThere" type="boolean" line="118"/>
                            <scope line="119">
                                <scope line="120"/>
                            </scope>
                            <scope line="125"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                Look up for unmapped values in the expanded character table.
                  When the expanding character tables are built by addExpandOrder,
                  it doesn&apos;t know what the final ordering of each character
                  in the expansion will be.  Instead, it just puts the raw character
                  code into the table, adding CHARINDEX as a flag.  Now that we&apos;ve
                  finished building the mapping table, we can go back and look up
                  that character to see what its real collation order is and
                  stick that into the expansion table.  That lets us avoid doing
                  a two-stage lookup later.                
            </javadoc>
            <method name="commit" type="void" line="143">
                <scope line="144">
                    <scope line="145">
                        <declaration name="valueList" type="int[]" line="146"/>
                        <scope line="147">
                            <declaration name="order" type="int" line="148"/>
                            <scope line="149">
                                <declaration name="ch" type="int" line="150"/>
                                <declaration name="realValue" type="int" line="151"/>
                                <scope line="152"/>
                                <scope line="155"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="163">
                Increment of the last order based on the comparison level.                
            </javadoc>
            <method name="increment" type="int" line="166">
                <params>
                    <param name="aStrength" type="int"/>
                    <param name="lastValue" type="int"/>
                </params>
            </method>
            <javadoc line="185">
                Adds a character and its designated order into the collation table.                
            </javadoc>
            <method name="addOrder" type="void" line="188">
                <params>
                    <param name="ch" type="int"/>
                    <param name="anOrder" type="int"/>
                </params>
                <declaration name="order" type="int" line="189"/>
                <scope line="190">
                    <declaration name="length" type="int" line="191"/>
                    <scope line="192"/>
                    <scope line="195"/>
                </scope>
                <scope line="200"/>
            </method>
            <method name="addContractOrder" type="void" line="204">
                <params>
                    <param name="groupChars" type="String"/>
                    <param name="anOrder" type="int"/>
                </params>
            </method>
            <javadoc line="207">
                Adds the contracting string into the collation table.                
            </javadoc>
            <method name="addContractOrder" type="void" line="210">
                <params>
                    <param name="groupChars" type="String"/>
                    <param name="anOrder" type="int"/>
                    <param name="fwd" type="boolean"/>
                </params>
                <scope line="211"/>
                <declaration name="ch" type="int" line="214"/>
                <declaration name="entry" type="int" line="215"/>
                <declaration name="entryTable" type="Vector" line="216"/>
                <scope line="217">
                    <declaration name="tableIndex" type="int" line="218"/>
                </scope>
                <declaration name="index" type="int" line="224"/>
                <scope line="225">
                    <declaration name="pair" type="EntryPair" line="226"/>
                </scope>
                <scope line="229">
                    <declaration name="pair" type="EntryPair" line="230"/>
                    <scope line="231"/>
                    <scope line="234"/>
                </scope>
                <scope line="238"/>
            </method>
            <javadoc line="243">
                If the given string has been specified as a contracting string
                  in this collation table, return its ordering.
                  Otherwise return UNMAPPED.                
            </javadoc>
            <method name="getContractOrder" type="int" line="248">
                <params>
                    <param name="groupChars" type="String"/>
                </params>
                <declaration name="result" type="int" line="249"/>
                <scope line="250">
                    <declaration name="ch" type="int" line="251"/>
                    <declaration name="entryTable" type="Vector" line="252"/>
                    <scope line="253">
                        <declaration name="index" type="int" line="254"/>
                        <scope line="255">
                            <declaration name="pair" type="EntryPair" line="256"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getCharOrder" type="int" line="263">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <declaration name="order" type="int" line="264"/>
                <scope line="265">
                    <declaration name="groupList" type="Vector" line="266"/>
                    <declaration name="pair" type="EntryPair" line="267"/>
                </scope>
            </method>
            <javadoc line="272">
                Get the entry of hash table of the contracting string in the collation
                  table.                
                <param>
                    ch the starting character of the contracting string                    
                </param>
            </javadoc>
            <method name="getContractValues" type="Vector" line="277">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <declaration name="index" type="int" line="278"/>
            </method>
            <method name="getContractValuesImpl" type="Vector" line="281">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="282"/>
                <scope line="285"/>
            </method>
            <javadoc line="289">
                Adds the expanding string into the collation table.                
            </javadoc>
            <method name="addExpandOrder" type="void" line="292">
                <params>
                    <param name="contractChars" type="String"/>
                    <param name="expandChars" type="String"/>
                    <param name="anOrder" type="int"/>
                </params>
                <declaration name="tableIndex" type="int" line="293"/>
                <scope line="294">
                    <declaration name="ch" type="char" line="295"/>
                    <scope line="296">
                        <declaration name="ch2" type="char" line="297"/>
                        <scope line="298"/>
                    </scope>
                    <scope line="302"/>
                </scope>
                <scope line="306"/>
            </method>
            <method name="addExpandOrder" type="void" line="310">
                <params>
                    <param name="ch" type="int"/>
                    <param name="expandChars" type="String"/>
                    <param name="anOrder" type="int"/>
                </params>
                <declaration name="tableIndex" type="int" line="311"/>
            </method>
            <javadoc line="314">
                Create a new entry in the expansion table that contains the orderings
                  for the given characers.  If anOrder is valid, it is added to the
                  beginning of the expanded list of orders.                
            </javadoc>
            <method name="addExpansion" type="int" line="319">
                <params>
                    <param name="anOrder" type="int"/>
                    <param name="expandChars" type="String"/>
                </params>
                <scope line="320"/>
                <declaration name="offset" type="int" line="323"/>
                <declaration name="valueList" type="int[]" line="324"/>
                <scope line="325"/>
                <declaration name="j" type="int" line="328"/>
                <scope line="329">
                    <declaration name="ch0" type="char" line="330"/>
                    <declaration name="ch1" type="char" line="331"/>
                    <declaration name="ch" type="int" line="332"/>
                    <scope line="333">
                        <scope line="334"/>
                    </scope>
                    <scope line="339"/>
                    <declaration name="mapValue" type="int" line="342"/>
                    <scope line="343"/>
                    <scope line="346"/>
                </scope>
                <scope line="350">
                    <declaration name="tmpBuf" type="int[]" line="351"/>
                    <scope line="352"/>
                </scope>
                <declaration name="tableIndex" type="int" line="357"/>
            </method>
            <method name="addContractFlags" type="void" line="361">
                <params>
                    <param name="chars" type="String"/>
                </params>
                <declaration name="c0" type="char" line="362"/>
                <declaration name="c" type="int" line="363"/>
                <declaration name="len" type="int" line="364"/>
                <scope line="365"/>
            </method>
            <declaration name="CHARINDEX" type="int" line="371"/>
            <declaration name="IGNORABLEMASK" type="int" line="372"/>
            <declaration name="PRIMARYORDERINCREMENT" type="int" line="373"/>
            <declaration name="SECONDARYORDERINCREMENT" type="int" line="374"/>
            <declaration name="TERTIARYORDERINCREMENT" type="int" line="375"/>
            <declaration name="INITIALTABLESIZE" type="int" line="376"/>
            <declaration name="MAXKEYSIZE" type="int" line="377"/>
            <declaration name="tables" type="RBCollationTables.BuildAPI" line="378"/>
            <declaration name="mPattern" type="MergeCollation" line="379"/>
            <declaration name="isOverIgnore" type="boolean" line="380"/>
            <declaration name="keyBuf" type="char[]" line="381"/>
            <declaration name="contractFlags" type="IntHashtable" line="382"/>
            <declaration name="frenchSec" type="boolean" line="383"/>
            <declaration name="seAsianSwapping" type="boolean" line="384"/>
            <declaration name="mapping" type="UCompactIntArray" line="385"/>
            <declaration name="contractTable" type="Vector" line="386"/>
            <declaration name="expandTable" type="Vector" line="387"/>
            <declaration name="maxSecOrder" type="short" line="388"/>
            <declaration name="maxTerOrder" type="short" line="389"/>
        </class>
    </source>