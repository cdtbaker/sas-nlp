<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="sun.text.normalizer.NormalizerBase"/>
        <import package="sun.text.normalizer.NormalizerImpl"/>
        <class name="Normalizer" line="43">
            <javadoc line="43">
                This class provides the method &lt;code&gt;normalize&lt;/code&gt; which transforms Unicode
                  text into an equivalent composed or decomposed form, allowing for easier
                  sorting and searching of text.
                  The &lt;code&gt;normalize&lt;/code&gt; method supports the standard normalization forms
                  described in
                  &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr15/tr15-23.html&quot;&gt;
                  Unicode Standard Annex #15 &amp;mdash; Unicode Normalization Forms&lt;/a&gt;.
                  &lt;p&gt;
                  Characters with accents or other adornments can be encoded in
                  several different ways in Unicode.  For example, take the character A-acute.
                  In Unicode, this can be encoded as a single character (the &quot;composed&quot; form):
                  &lt;p&gt;&lt;pre&gt;
                  U+00C1    LATIN CAPITAL LETTER A WITH ACUTE&lt;/pre&gt;
                  &lt;/p&gt;
                  or as two separate characters (the &quot;decomposed&quot; form):
                  &lt;p&gt;&lt;pre&gt;
                  U+0041    LATIN CAPITAL LETTER A
                  U+0301    COMBINING ACUTE ACCENT&lt;/pre&gt;
                  &lt;/p&gt;
                  To a user of your program, however, both of these sequences should be
                  treated as the same &quot;user-level&quot; character &quot;A with acute accent&quot;.  When you
                  are searching or comparing text, you must ensure that these two sequences are
                  treated as equivalent.  In addition, you must handle characters with more than
                  one accent. Sometimes the order of a character&apos;s combining accents is
                  significant, while in other cases accent sequences in different orders are
                  really equivalent.
                  &lt;p&gt;
                  Similarly, the string &quot;ffi&quot; can be encoded as three separate letters:
                  &lt;p&gt;&lt;pre&gt;
                  U+0066    LATIN SMALL LETTER F
                  U+0066    LATIN SMALL LETTER F
                  U+0069    LATIN SMALL LETTER I&lt;/pre&gt;
                  &lt;/p&gt;
                  or as the single character
                  &lt;p&gt;&lt;pre&gt;
                  U+FB03    LATIN SMALL LIGATURE FFI&lt;/pre&gt;
                  &lt;/p&gt;
                  The ffi ligature is not a distinct semantic character, and strictly speaking
                  it shouldn&apos;t be in Unicode at all, but it was included for compatibility
                  with existing character sets that already provided it.  The Unicode standard
                  identifies such characters by giving them &quot;compatibility&quot; decompositions
                  into the corresponding semantic characters.  When sorting and searching, you
                  will often want to use these mappings.
                  &lt;p&gt;
                  The &lt;code&gt;normalize&lt;/code&gt; method helps solve these problems by transforming
                  text into the canonical composed and decomposed forms as shown in the first
                  example above. In addition, you can have it perform compatibility
                  decompositions so that you can treat compatibility characters the same as
                  their equivalents.
                  Finally, the &lt;code&gt;normalize&lt;/code&gt; method rearranges accents into the
                  proper canonical order, so that you do not have to worry about accent
                  rearrangement on your own.
                  &lt;p&gt;
                  The W3C generally recommends to exchange texts in NFC.
                  Note also that most legacy character encodings use only precomposed forms and
                  often do not encode any combining marks by themselves. For conversion to such
                  character encodings the Unicode text needs to be normalized to NFC.
                  For more usage examples, see the Unicode Standard Annex.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="Normalizer" type="constructor" line="115"/>
            <javadoc line="117">
                This enum provides constants of the four Unicode normalization forms
                  that are described in
                  &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr15/tr15-23.html&quot;&gt;
                  Unicode Standard Annex #15 &amp;mdash; Unicode Normalization Forms&lt;/a&gt;
                  and two methods to access them.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="128">
                Canonical decomposition.                
            </javadoc>
            <javadoc line="133">
                Canonical decomposition, followed by canonical composition.                
            </javadoc>
            <javadoc line="138">
                Compatibility decomposition.                
            </javadoc>
            <javadoc line="143">
                Compatibility decomposition, followed by canonical composition.                
            </javadoc>
            <javadoc line="149">
                Normalize a sequence of char values.
                  The sequence will be normalized according to the specified normalization
                  from.                
                <param>
                    src        The sequence of char values to normalize.                    
                </param>
                <param>
                    form       The normalization form; one of{@link java.text.Normalizer.Form#NFC},{@link java.text.Normalizer.Form#NFD},{@link java.text.Normalizer.Form#NFKC},{@link java.text.Normalizer.Form#NFKD}                    
                </param>
                <return>
                    The normalized String                    
                </return>
                <throws>
                    NullPointerException If &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;form&lt;/code&gt;
                      is null.                    
                </throws>
            </javadoc>
            <method name="normalize" type="String" line="163">
                <params>
                    <param name="src" type="CharSequence"/>
                    <param name="form" type="Form"/>
                </params>
            </method>
            <javadoc line="167">
                Determines if the given sequence of char values is normalized.                
                <param>
                    src        The sequence of char values to be checked.                    
                </param>
                <param>
                    form       The normalization form; one of{@link java.text.Normalizer.Form#NFC},{@link java.text.Normalizer.Form#NFD},{@link java.text.Normalizer.Form#NFKC},{@link java.text.Normalizer.Form#NFKD}                    
                </param>
                <return>
                    true if the sequence of char values is normalized;
                      false otherwise.                    
                </return>
                <throws>
                    NullPointerException If &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;form&lt;/code&gt;
                      is null.                    
                </throws>
            </javadoc>
            <method name="isNormalized" type="boolean" line="180">
                <params>
                    <param name="src" type="CharSequence"/>
                    <param name="form" type="Form"/>
                </params>
            </method>
        </class>
    </source>