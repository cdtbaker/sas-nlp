<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.text">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.text.spi.DecimalFormatSymbolsProvider"/>
        <import package="java.util.Currency"/>
        <import package="java.util.Locale"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="sun.util.LocaleServiceProviderPool"/>
        <import package="sun.util.resources.LocaleData"/>
        <class name="DecimalFormatSymbols" line="53">
            <comment line="421">
                ------------------------------------------------------------
                 BEGIN   Package Private methods ... to be made public later
                ------------------------------------------------------------                
            </comment>
            <comment line="471">
                ------------------------------------------------------------
                 END     Package Private methods ... to be made public later
                ------------------------------------------------------------                
            </comment>
            <comment line="742">
                Field new in JDK 1.1.6                
            </comment>
            <comment line="755">
                Field new in JDK 1.1.6                
            </comment>
            <comment line="767">
                Field new in JDK 1.6                
            </comment>
            <comment line="777">
                currency; only the ISO code is serialized.                
            </comment>
            <comment line="780">
                Proclaim JDK 1.1 FCS compatibility                
            </comment>
            <comment line="783">
                The internal serial version which says which version was written
                 - 0 (default) for version up to JDK 1.1.5
                 - 1 for version from JDK 1.1.6, which includes two new fields:
                     monetarySeparator and exponential.
                 - 2 for version from J2SE 1.4, which includes locale field.
                 - 3 for version from J2SE 1.6, which includes exponentialSeparator field.                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="53">
                This class represents the set of symbols (such as the decimal separator,
                  the grouping separator, and so on) needed by &lt;code&gt;DecimalFormat&lt;/code&gt;
                  to format numbers. &lt;code&gt;DecimalFormat&lt;/code&gt; creates for itself an instance of
                  &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; from its locale data.  If you need to change any
                  of these symbols, you can get the &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; object from
                  your &lt;code&gt;DecimalFormat&lt;/code&gt; and modify it.                
                <see>
                    java.util.Locale                    
                </see>
                <see>
                    DecimalFormat                    
                </see>
                <author>
                    Mark Davis                    
                </author>
                <author>
                    Alan Liu                    
                </author>
            </javadoc>
            <javadoc line="69">
                Create a DecimalFormatSymbols object for the default locale.
                  This constructor can only construct instances for the locales
                  supported by the Java runtime environment, not for those
                  supported by installed{@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}implementations. For full locale coverage, use the{@link #getInstance(Locale) getInstance} method.                
            </javadoc>
            <method name="DecimalFormatSymbols" type="constructor" line="78"/>
            <javadoc line="82">
                Create a DecimalFormatSymbols object for the given locale.
                  This constructor can only construct instances for the locales
                  supported by the Java runtime environment, not for those
                  supported by installed{@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}implementations. For full locale coverage, use the{@link #getInstance(Locale) getInstance} method.                
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
            </javadoc>
            <method name="DecimalFormatSymbols" type="constructor" line="93">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="97">
                Returns an array of all locales for which the
                  &lt;code&gt;getInstance&lt;/code&gt; methods of this class can return
                  localized instances.
                  The returned array represents the union of locales supported by the Java
                  runtime and by installed{@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}implementations.  It must contain at least a &lt;code&gt;Locale&lt;/code&gt;
                  instance equal to {@link java.util.Locale#US Locale.US}.                
                <return>
                    An array of locales for which localized
                      &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; instances are available.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="111">
                <declaration name="pool" type="LocaleServiceProviderPool" line="112"/>
            </method>
            <javadoc line="117">
                Gets the &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; instance for the default
                  locale.  This method provides access to &lt;code&gt;DecimalFormatSymbols&lt;/code&gt;
                  instances for locales supported by the Java runtime itself as well
                  as for those supported by installed{@link java.text.spi.DecimalFormatSymbolsProviderDecimalFormatSymbolsProvider} implementations.                
                <return>
                    a &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; instance.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInstance" type="DecimalFormatSymbols" line="127"/>
            <javadoc line="131">
                Gets the &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; instance for the specified
                  locale.  This method provides access to &lt;code&gt;DecimalFormatSymbols&lt;/code&gt;
                  instances for locales supported by the Java runtime itself as well
                  as for those supported by installed{@link java.text.spi.DecimalFormatSymbolsProviderDecimalFormatSymbolsProvider} implementations.                
                <param>
                    locale the desired locale.                    
                </param>
                <return>
                    a &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; instance.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInstance" type="DecimalFormatSymbols" line="143">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="146">
                    Check whether a provider can provide an implementation that&apos;s closer
                     to the requested locale than what the Java runtime itself can provide.                    
                </comment>
                <declaration name="pool" type="LocaleServiceProviderPool" line="147"/>
                <scope line="149">
                    <declaration name="providersInstance" type="DecimalFormatSymbols" line="150"/>
                    <scope line="152"/>
                </scope>
            </method>
            <javadoc line="160">
                Gets the character used for zero. Different for Arabic, etc.                
            </javadoc>
            <method name="getZeroDigit" type="char" line="163"/>
            <javadoc line="167">
                Sets the character used for zero. Different for Arabic, etc.                
            </javadoc>
            <method name="setZeroDigit" type="void" line="170">
                <params>
                    <param name="zeroDigit" type="char"/>
                </params>
            </method>
            <javadoc line="174">
                Gets the character used for thousands separator. Different for French, etc.                
            </javadoc>
            <method name="getGroupingSeparator" type="char" line="177"/>
            <javadoc line="181">
                Sets the character used for thousands separator. Different for French, etc.                
            </javadoc>
            <method name="setGroupingSeparator" type="void" line="184">
                <params>
                    <param name="groupingSeparator" type="char"/>
                </params>
            </method>
            <javadoc line="188">
                Gets the character used for decimal sign. Different for French, etc.                
            </javadoc>
            <method name="getDecimalSeparator" type="char" line="191"/>
            <javadoc line="195">
                Sets the character used for decimal sign. Different for French, etc.                
            </javadoc>
            <method name="setDecimalSeparator" type="void" line="198">
                <params>
                    <param name="decimalSeparator" type="char"/>
                </params>
            </method>
            <javadoc line="202">
                Gets the character used for per mille sign. Different for Arabic, etc.                
            </javadoc>
            <method name="getPerMill" type="char" line="205"/>
            <javadoc line="209">
                Sets the character used for per mille sign. Different for Arabic, etc.                
            </javadoc>
            <method name="setPerMill" type="void" line="212">
                <params>
                    <param name="perMill" type="char"/>
                </params>
            </method>
            <javadoc line="216">
                Gets the character used for percent sign. Different for Arabic, etc.                
            </javadoc>
            <method name="getPercent" type="char" line="219"/>
            <javadoc line="223">
                Sets the character used for percent sign. Different for Arabic, etc.                
            </javadoc>
            <method name="setPercent" type="void" line="226">
                <params>
                    <param name="percent" type="char"/>
                </params>
            </method>
            <javadoc line="230">
                Gets the character used for a digit in a pattern.                
            </javadoc>
            <method name="getDigit" type="char" line="233"/>
            <javadoc line="237">
                Sets the character used for a digit in a pattern.                
            </javadoc>
            <method name="setDigit" type="void" line="240">
                <params>
                    <param name="digit" type="char"/>
                </params>
            </method>
            <javadoc line="244">
                Gets the character used to separate positive and negative subpatterns
                  in a pattern.                
            </javadoc>
            <method name="getPatternSeparator" type="char" line="248"/>
            <javadoc line="252">
                Sets the character used to separate positive and negative subpatterns
                  in a pattern.                
            </javadoc>
            <method name="setPatternSeparator" type="void" line="256">
                <params>
                    <param name="patternSeparator" type="char"/>
                </params>
            </method>
            <javadoc line="260">
                Gets the string used to represent infinity. Almost always left
                  unchanged.                
            </javadoc>
            <method name="getInfinity" type="String" line="264"/>
            <javadoc line="268">
                Sets the string used to represent infinity. Almost always left
                  unchanged.                
            </javadoc>
            <method name="setInfinity" type="void" line="272">
                <params>
                    <param name="infinity" type="String"/>
                </params>
            </method>
            <javadoc line="276">
                Gets the string used to represent &quot;not a number&quot;. Almost always left
                  unchanged.                
            </javadoc>
            <method name="getNaN" type="String" line="280"/>
            <javadoc line="284">
                Sets the string used to represent &quot;not a number&quot;. Almost always left
                  unchanged.                
            </javadoc>
            <method name="setNaN" type="void" line="288">
                <params>
                    <param name="NaN" type="String"/>
                </params>
            </method>
            <javadoc line="292">
                Gets the character used to represent minus sign. If no explicit
                  negative format is specified, one is formed by prefixing
                  minusSign to the positive format.                
            </javadoc>
            <method name="getMinusSign" type="char" line="297"/>
            <javadoc line="301">
                Sets the character used to represent minus sign. If no explicit
                  negative format is specified, one is formed by prefixing
                  minusSign to the positive format.                
            </javadoc>
            <method name="setMinusSign" type="void" line="306">
                <params>
                    <param name="minusSign" type="char"/>
                </params>
            </method>
            <javadoc line="310">
                Returns the currency symbol for the currency of these
                  DecimalFormatSymbols in their locale.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCurrencySymbol" type="String" line="316"/>
            <javadoc line="320">
                Sets the currency symbol for the currency of these
                  DecimalFormatSymbols in their locale.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurrencySymbol" type="void" line="326">
                <params>
                    <param name="currency" type="String"/>
                </params>
            </method>
            <javadoc line="330">
                Returns the ISO 4217 currency code of the currency of these
                  DecimalFormatSymbols.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getInternationalCurrencySymbol" type="String" line="336"/>
            <javadoc line="340">
                Sets the ISO 4217 currency code of the currency of these
                  DecimalFormatSymbols.
                  If the currency code is valid (as defined by{@link java.util.Currency#getInstance(java.lang.String) Currency.getInstance}),
                  this also sets the currency attribute to the corresponding Currency
                  instance and the currency symbol attribute to the currency&apos;s symbol
                  in the DecimalFormatSymbols&apos; locale. If the currency code is not valid,
                  then the currency attribute is set to null and the currency symbol
                  attribute is not modified.                
                <see>
                    #setCurrency                    
                </see>
                <see>
                    #setCurrencySymbol                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setInternationalCurrencySymbol" type="void" line="356">
                <params>
                    <param name="currencyCode" type="String"/>
                </params>
                <scope line="359">
                    <scope line="360"/>
                    <scope line="363"/>
                </scope>
            </method>
            <javadoc line="368">
                Gets the currency of these DecimalFormatSymbols. May be null if the
                  currency symbol attribute was previously set to a value that&apos;s not
                  a valid ISO 4217 currency code.                
                <return>
                    the currency used, or null                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCurrency" type="Currency" line="376"/>
            <javadoc line="380">
                Sets the currency of these DecimalFormatSymbols.
                  This also sets the currency symbol attribute to the currency&apos;s symbol
                  in the DecimalFormatSymbols&apos; locale, and the international currency
                  symbol attribute to the currency&apos;s ISO 4217 currency code.                
                <param>
                    currency the new currency to be used                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;currency&lt;/code&gt; is null                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    #setCurrencySymbol                    
                </see>
                <see>
                    #setInternationalCurrencySymbol                    
                </see>
            </javadoc>
            <method name="setCurrency" type="void" line="392">
                <params>
                    <param name="currency" type="Currency"/>
                </params>
                <scope line="393"/>
            </method>
            <javadoc line="402">
                Returns the monetary decimal separator.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMonetaryDecimalSeparator" type="char" line="407"/>
            <javadoc line="411">
                Sets the monetary decimal separator.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMonetaryDecimalSeparator" type="void" line="416">
                <params>
                    <param name="sep" type="char"/>
                </params>
            </method>
            <javadoc line="424">
                Returns the character used to separate the mantissa from the exponent.                
            </javadoc>
            <method name="getExponentialSymbol" type="char" line="428"/>
            <javadoc line="431">
                Returns the string used to separate the mantissa from the exponent.
                  Examples: &quot;x10^&quot; for 1.23x10^4, &quot;E&quot; for 1.23E4.                
                <return>
                    the exponent separator string                    
                </return>
                <see>
                    #setExponentSeparator(java.lang.String)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getExponentSeparator" type="String" line="440"/>
            <javadoc line="444">
                Sets the character used to separate the mantissa from the exponent.                
            </javadoc>
            <method name="setExponentialSymbol" type="void" line="448">
                <params>
                    <param name="exp" type="char"/>
                </params>
            </method>
            <javadoc line="452">
                Sets the string used to separate the mantissa from the exponent.
                  Examples: &quot;x10^&quot; for 1.23x10^4, &quot;E&quot; for 1.23E4.                
                <param>
                    exp the exponent separator string                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;exp&lt;/code&gt; is null                    
                </exception>
                <see>
                    #getExponentSeparator()                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setExponentSeparator" type="void" line="462">
                <params>
                    <param name="exp" type="String"/>
                </params>
                <scope line="463"/>
            </method>
            <javadoc line="474">
                Standard override.                
            </javadoc>
            <method name="clone" type="Object" line="477">
                <comment line="481">
                    other fields are bit-copied                    
                </comment>
                <scope line="478"/>
                <scope line="481"/>
            </method>
            <javadoc line="486">
                Override equals.                
            </javadoc>
            <method name="equals" type="boolean" line="489">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="DecimalFormatSymbols" line="493"/>
            </method>
            <javadoc line="512">
                Override hashCode.                
            </javadoc>
            <method name="hashCode" type="int" line="515">
                <declaration name="result" type="int" line="516"/>
            </method>
            <javadoc line="522">
                Initializes the symbols from the FormatData resource bundle.                
            </javadoc>
            <method name="initialize" type="void" line="525">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="529">
                    get resource bundle data - try the cache first                    
                </comment>
                <comment line="532">
                                        
                </comment>
                <comment line="533">
                    When numbering system is thai (Locale&apos;s extension contains u-nu-thai),
                     we read the data from th_TH_TH.                    
                </comment>
                <comment line="552">
                    different for Arabic,etc.                    
                </comment>
                <comment line="556">
                    string representation new since 1.6                    
                </comment>
                <comment line="561">
                    Try to obtain the currency used in the locale&apos;s country.
                     Check for empty country string separately because it&apos;s a valid
                     country ID for Locale (and used for the C locale), but not a valid
                     ISO 3166 country code, and exceptions are expensive.                    
                </comment>
                <comment line="569">
                    use default values below for compatibility                    
                </comment>
                <comment line="583">
                    default values                    
                </comment>
                <comment line="591">
                    Currently the monetary decimal separator is the same as the
                     standard decimal separator for all locales that we support.
                     If that changes, add a new entry to NumberElements.                    
                </comment>
                <declaration name="needCacheUpdate" type="boolean" line="529"/>
                <declaration name="data" type="Object[]" line="530"/>
                <scope line="531">
                    <declaration name="lookupLocale" type="Locale" line="534"/>
                    <declaration name="numberType" type="String" line="535"/>
                    <scope line="536"/>
                    <declaration name="rb" type="ResourceBundle" line="540"/>
                </scope>
                <declaration name="numberElements" type="String[]" line="545"/>
                <scope line="564">
                    <scope line="565"/>
                    <scope line="567"/>
                </scope>
                <scope line="571">
                    <scope line="573"/>
                    <scope line="575"/>
                </scope>
                <scope line="581">
                    <scope line="584"/>
                    <scope line="586"/>
                </scope>
                <scope line="595"/>
            </method>
            <javadoc line="600">
                Reads the default serializable fields, provides default values for objects
                  in older serial versions, and initializes non-serializable fields.
                  If &lt;code&gt;serialVersionOnStream&lt;/code&gt;
                  is less than 1, initializes &lt;code&gt;monetarySeparator&lt;/code&gt; to be
                  the same as &lt;code&gt;decimalSeparator&lt;/code&gt; and &lt;code&gt;exponential&lt;/code&gt;
                  to be &apos;E&apos;.
                  If &lt;code&gt;serialVersionOnStream&lt;/code&gt; is less than 2,
                  initializes &lt;code&gt;locale&lt;/code&gt;to the root locale, and initializes
                  If &lt;code&gt;serialVersionOnStream&lt;/code&gt; is less than 3, it initializes
                  &lt;code&gt;exponentialSeparator&lt;/code&gt; using &lt;code&gt;exponential&lt;/code&gt;.
                  Sets &lt;code&gt;serialVersionOnStream&lt;/code&gt; back to the maximum allowed value so that
                  default serialization will work properly if this object is streamed out again.
                  Initializes the currency from the intlCurrencySymbol field.                
                <since>
                    JDK 1.1.6                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="618">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <comment line="622">
                    Didn&apos;t have monetarySeparator or exponential field;
                     use defaults.                    
                </comment>
                <comment line="628">
                    didn&apos;t have locale; use root locale                    
                </comment>
                <comment line="632">
                    didn&apos;t have exponentialSeparator. Create one using exponential                    
                </comment>
                <scope line="620"/>
                <scope line="626"/>
                <scope line="630"/>
                <scope line="636">
                    <scope line="637"/>
                    <scope line="639"/>
                </scope>
            </method>
            <declaration name="zeroDigit" type="char" line="644"/>
            <javadoc line="644">
                Character used for zero.                
                <serial>
                                        
                </serial>
                <see>
                    #getZeroDigit                    
                </see>
            </javadoc>
            <declaration name="groupingSeparator" type="char" line="652"/>
            <javadoc line="652">
                Character used for thousands separator.                
                <serial>
                                        
                </serial>
                <see>
                    #getGroupingSeparator                    
                </see>
            </javadoc>
            <declaration name="decimalSeparator" type="char" line="660"/>
            <javadoc line="660">
                Character used for decimal sign.                
                <serial>
                                        
                </serial>
                <see>
                    #getDecimalSeparator                    
                </see>
            </javadoc>
            <declaration name="perMill" type="char" line="668"/>
            <javadoc line="668">
                Character used for per mille sign.                
                <serial>
                                        
                </serial>
                <see>
                    #getPerMill                    
                </see>
            </javadoc>
            <declaration name="percent" type="char" line="676"/>
            <javadoc line="676">
                Character used for percent sign.                
                <serial>
                                        
                </serial>
                <see>
                    #getPercent                    
                </see>
            </javadoc>
            <declaration name="digit" type="char" line="683"/>
            <javadoc line="683">
                Character used for a digit in a pattern.                
                <serial>
                                        
                </serial>
                <see>
                    #getDigit                    
                </see>
            </javadoc>
            <declaration name="patternSeparator" type="char" line="691"/>
            <javadoc line="691">
                Character used to separate positive and negative subpatterns
                  in a pattern.                
                <serial>
                                        
                </serial>
                <see>
                    #getPatternSeparator                    
                </see>
            </javadoc>
            <declaration name="infinity" type="String" line="700"/>
            <javadoc line="700">
                String used to represent infinity.                
                <serial>
                                        
                </serial>
                <see>
                    #getInfinity                    
                </see>
            </javadoc>
            <declaration name="NaN" type="String" line="707"/>
            <javadoc line="707">
                String used to represent &quot;not a number&quot;.                
                <serial>
                                        
                </serial>
                <see>
                    #getNaN                    
                </see>
            </javadoc>
            <declaration name="minusSign" type="char" line="714"/>
            <javadoc line="714">
                Character used to represent minus sign.                
                <serial>
                                        
                </serial>
                <see>
                    #getMinusSign                    
                </see>
            </javadoc>
            <declaration name="currencySymbol" type="String" line="721"/>
            <javadoc line="721">
                String denoting the local currency, e.g. &quot;$&quot;.                
                <serial>
                                        
                </serial>
                <see>
                    #getCurrencySymbol                    
                </see>
            </javadoc>
            <declaration name="intlCurrencySymbol" type="String" line="728"/>
            <javadoc line="728">
                ISO 4217 currency code denoting the local currency, e.g. &quot;USD&quot;.                
                <serial>
                                        
                </serial>
                <see>
                    #getInternationalCurrencySymbol                    
                </see>
            </javadoc>
            <declaration name="monetarySeparator" type="char" line="735"/>
            <javadoc line="735">
                The decimal separator used when formatting currency values.                
                <serial>
                                        
                </serial>
                <since>
                    JDK 1.1.6                    
                </since>
                <see>
                    #getMonetaryDecimalSeparator                    
                </see>
            </javadoc>
            <declaration name="exponential" type="char" line="743"/>
            <javadoc line="743">
                The character used to distinguish the exponent in a number formatted
                  in exponential notation, e.g. &apos;E&apos; for a number such as &quot;1.23E45&quot;.
                  &lt;p&gt;
                  Note that the public API provides no way to set this field,
                  even though it is supported by the implementation and the stream format.
                  The intent is that this will be added to the API in the future.                
                <serial>
                                        
                </serial>
                <since>
                    JDK 1.1.6                    
                </since>
            </javadoc>
            <declaration name="exponentialSeparator" type="String" line="756"/>
            <javadoc line="756">
                The string used to separate the mantissa from the exponent.
                  Examples: &quot;x10^&quot; for 1.23x10^4, &quot;E&quot; for 1.23E4.
                  &lt;p&gt;
                  If both &lt;code&gt;exponential&lt;/code&gt; and &lt;code&gt;exponentialSeparator&lt;/code&gt;
                  exist, this &lt;code&gt;exponentialSeparator&lt;/code&gt; has the precedence.                
                <serial>
                                        
                </serial>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="locale" type="Locale" line="768"/>
            <javadoc line="768">
                The locale of these currency format symbols.                
                <serial>
                                        
                </serial>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="currency" type="Currency" line="777"/>
            <declaration name="serialVersionUID" type="long" line="780"/>
            <declaration name="currentSerialVersion" type="int" line="788"/>
            <declaration name="serialVersionOnStream" type="int" line="790"/>
            <javadoc line="790">
                Describes the version of &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; present on the stream.
                  Possible values are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;b&gt;0&lt;/b&gt; (or uninitialized): versions prior to JDK 1.1.6.
                  &lt;li&gt;&lt;b&gt;1&lt;/b&gt;: Versions written by JDK 1.1.6 or later, which include
                  two new fields: &lt;code&gt;monetarySeparator&lt;/code&gt; and &lt;code&gt;exponential&lt;/code&gt;.
                  &lt;li&gt;&lt;b&gt;2&lt;/b&gt;: Versions written by J2SE 1.4 or later, which include a
                  new &lt;code&gt;locale&lt;/code&gt; field.
                  &lt;li&gt;&lt;b&gt;3&lt;/b&gt;: Versions written by J2SE 1.6 or later, which include a
                  new &lt;code&gt;exponentialSeparator&lt;/code&gt; field.
                  &lt;/ul&gt;
                  When streaming out a &lt;code&gt;DecimalFormatSymbols&lt;/code&gt;, the most recent format
                  (corresponding to the highest allowable &lt;code&gt;serialVersionOnStream&lt;/code&gt;)
                  is always written.                
                <serial>
                                        
                </serial>
                <since>
                    JDK 1.1.6                    
                </since>
            </javadoc>
            <declaration name="cachedLocaleData" type="ConcurrentHashMap&lt;Locale,Object[]&gt;" line="812"/>
            <javadoc line="812">
                cache to hold the NumberElements and the Currency
                  of a Locale.                
            </javadoc>
            <class name="DecimalFormatSymbolsGetter" line="818">
                <implements interface="LocaleServiceProviderPool.LocalizedObjectGetter">
                    <type_params>
                        <type_param name="DecimalFormatSymbolsProvider"/>
                        <type_param name="DecimalFormatSymbols"/>
                    </type_params>
                </implements>
                <javadoc line="818">
                    Obtains a DecimalFormatSymbols instance from a DecimalFormatSymbolsProvider
                      implementation.                    
                </javadoc>
                <declaration name="INSTANCE" type="DecimalFormatSymbolsGetter" line="825"/>
                <method name="getObject" type="DecimalFormatSymbols" line="832">
                    <params>
                        <param name="decimalFormatSymbolsProvider" type="DecimalFormatSymbolsProvider"/>
                        <param name="locale" type="Locale"/>
                        <param name="key" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
    </source>