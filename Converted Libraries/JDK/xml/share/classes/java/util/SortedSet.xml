<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="SortedSet">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Set">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="2">
                A {@link Set} that further provides a &lt;i&gt;total ordering&lt;/i&gt; on its elements.
                  The elements are ordered using their {@linkplain Comparable natural
                  ordering}, or by a {@link Comparator} typically provided at sorted
                  set creation time.  The set&apos;s iterator will traverse the set in
                  ascending element order. Several additional operations are provided
                  to take advantage of the ordering.  (This interface is the set
                  analogue of {@link SortedMap}.)
                  &lt;p&gt;All elements inserted into a sorted set must implement the &lt;tt&gt;Comparable&lt;/tt&gt;
                  interface (or be accepted by the specified comparator).  Furthermore, all
                  such elements must be &lt;i&gt;mutually comparable&lt;/i&gt;: &lt;tt&gt;e1.compareTo(e2)&lt;/tt&gt;
                  (or &lt;tt&gt;comparator.compare(e1, e2)&lt;/tt&gt;) must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; in
                  the sorted set.  Attempts to violate this restriction will cause the
                  offending method or constructor invocation to throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt;.
                  &lt;p&gt;Note that the ordering maintained by a sorted set (whether or not an
                  explicit comparator is provided) must be &lt;i&gt;consistent with equals&lt;/i&gt; if
                  the sorted set is to correctly implement the &lt;tt&gt;Set&lt;/tt&gt; interface.  (See
                  the &lt;tt&gt;Comparable&lt;/tt&gt; interface or &lt;tt&gt;Comparator&lt;/tt&gt; interface for a
                  precise definition of &lt;i&gt;consistent with equals&lt;/i&gt;.)  This is so because
                  the &lt;tt&gt;Set&lt;/tt&gt; interface is defined in terms of the &lt;tt&gt;equals&lt;/tt&gt;
                  operation, but a sorted set performs all element comparisons using its
                  &lt;tt&gt;compareTo&lt;/tt&gt; (or &lt;tt&gt;compare&lt;/tt&gt;) method, so two elements that are
                  deemed equal by this method are, from the standpoint of the sorted set,
                  equal.  The behavior of a sorted set &lt;i&gt;is&lt;/i&gt; well-defined even if its
                  ordering is inconsistent with equals; it just fails to obey the general
                  contract of the &lt;tt&gt;Set&lt;/tt&gt; interface.
                  &lt;p&gt;All general-purpose sorted set implementation classes should
                  provide four &quot;standard&quot; constructors: 1) A void (no arguments)
                  constructor, which creates an empty sorted set sorted according to
                  the natural ordering of its elements.  2) A constructor with a
                  single argument of type &lt;tt&gt;Comparator&lt;/tt&gt;, which creates an empty
                  sorted set sorted according to the specified comparator.  3) A
                  constructor with a single argument of type &lt;tt&gt;Collection&lt;/tt&gt;,
                  which creates a new sorted set with the same elements as its
                  argument, sorted according to the natural ordering of the elements.
                  4) A constructor with a single argument of type &lt;tt&gt;SortedSet&lt;/tt&gt;,
                  which creates a new sorted set with the same elements and the same
                  ordering as the input sorted set.  There is no way to enforce this
                  recommendation, as interfaces cannot contain constructors.
                  &lt;p&gt;Note: several methods return subsets with restricted ranges.
                  Such ranges are &lt;i&gt;half-open&lt;/i&gt;, that is, they include their low
                  endpoint but not their high endpoint (where applicable).
                  If you need a &lt;i&gt;closed range&lt;/i&gt; (which includes both endpoints), and
                  the element type allows for calculation of the successor of a given
                  value, merely request the subrange from &lt;tt&gt;lowEndpoint&lt;/tt&gt; to
                  &lt;tt&gt;successor(highEndpoint)&lt;/tt&gt;.  For example, suppose that &lt;tt&gt;s&lt;/tt&gt;
                  is a sorted set of strings.  The following idiom obtains a view
                  containing all of the strings in &lt;tt&gt;s&lt;/tt&gt; from &lt;tt&gt;low&lt;/tt&gt; to
                  &lt;tt&gt;high&lt;/tt&gt;, inclusive:&lt;pre&gt;
                  SortedSet&amp;lt;String&amp;gt; sub = s.subSet(low, high+&quot;\0&quot;);&lt;/pre&gt;
                  A similar technique can be used to generate an &lt;i&gt;open range&lt;/i&gt; (which
                  contains neither endpoint).  The following idiom obtains a view
                  containing all of the Strings in &lt;tt&gt;s&lt;/tt&gt; from &lt;tt&gt;low&lt;/tt&gt; to
                  &lt;tt&gt;high&lt;/tt&gt;, exclusive:&lt;pre&gt;
                  SortedSet&amp;lt;String&amp;gt; sub = s.subSet(low+&quot;\0&quot;, high);&lt;/pre&gt;
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <E>
                      the type of elements maintained by this set                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Set                    
                </see>
                <see>
                    TreeSet                    
                </see>
                <see>
                    SortedMap                    
                </see>
                <see>
                    Collection                    
                </see>
                <see>
                    Comparable                    
                </see>
                <see>
                    Comparator                    
                </see>
                <see>
                    ClassCastException                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="comparator" type="Comparator<? super E>" line="75"/>
            <javadoc line="75">
                Returns the comparator used to order the elements in this set,
                  or &lt;tt&gt;null&lt;/tt&gt; if this set uses the {@linkplain Comparablenatural ordering} of its elements.                
                <return>
                    the comparator used to order the elements in this set,
                      or <tt>null</tt> if this set uses the natural ordering
                      of its elements                    
                </return>
            </javadoc>
            <method name="subSet" type="SortedSet<E>" line="83"/>
            <javadoc line="83">
                Returns a view of the portion of this set whose elements range
                  from &lt;tt&gt;fromElement&lt;/tt&gt;, inclusive, to &lt;tt&gt;toElement&lt;/tt&gt;,
                  exclusive.  (If &lt;tt&gt;fromElement&lt;/tt&gt; and &lt;tt&gt;toElement&lt;/tt&gt; are
                  equal, the returned set is empty.)  The returned set is backed
                  by this set, so changes in the returned set are reflected in
                  this set, and vice-versa.  The returned set supports all
                  optional set operations that this set supports.
                  &lt;p&gt;The returned set will throw an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;
                  on an attempt to insert an element outside its range.                
                <param>
                    fromElement low endpoint (inclusive) of the returned set                    
                </param>
                <param>
                    toElement high endpoint (exclusive) of the returned set                    
                </param>
                <return>
                    a view of the portion of this set whose elements range from
                      <tt>fromElement</tt>, inclusive, to <tt>toElement</tt>, exclusive                    
                </return>
                <throws>
                    ClassCastException if <tt>fromElement</tt> and
                      <tt>toElement</tt> cannot be compared to one another using this
                      set's comparator (or, if the set has no comparator, using
                      natural ordering).  Implementations may, but are not required
                      to, throw this exception if <tt>fromElement</tt> or
                      <tt>toElement</tt> cannot be compared to elements currently in
                      the set.                    
                </throws>
                <throws>
                    NullPointerException if <tt>fromElement</tt> or
                      <tt>toElement</tt> is null and this set does not permit null
                      elements                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromElement</tt> is
                      greater than <tt>toElement</tt>; or if this set itself
                      has a restricted range, and <tt>fromElement</tt> or
                      <tt>toElement</tt> lies outside the bounds of the range                    
                </throws>
            </javadoc>
            <method name="headSet" type="SortedSet<E>" line="113"/>
            <javadoc line="113">
                Returns a view of the portion of this set whose elements are
                  strictly less than &lt;tt&gt;toElement&lt;/tt&gt;.  The returned set is
                  backed by this set, so changes in the returned set are
                  reflected in this set, and vice-versa.  The returned set
                  supports all optional set operations that this set supports.
                  &lt;p&gt;The returned set will throw an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;
                  on an attempt to insert an element outside its range.                
                <param>
                    toElement high endpoint (exclusive) of the returned set                    
                </param>
                <return>
                    a view of the portion of this set whose elements are strictly
                      less than <tt>toElement</tt>                    
                </return>
                <throws>
                    ClassCastException if <tt>toElement</tt> is not compatible
                      with this set's comparator (or, if the set has no comparator,
                      if <tt>toElement</tt> does not implement {@link Comparable}).
                      Implementations may, but are not required to, throw this
                      exception if <tt>toElement</tt> cannot be compared to elements
                      currently in the set.                    
                </throws>
                <throws>
                    NullPointerException if <tt>toElement</tt> is null and
                      this set does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if this set itself has a
                      restricted range, and <tt>toElement</tt> lies outside the
                      bounds of the range                    
                </throws>
            </javadoc>
            <method name="tailSet" type="SortedSet<E>" line="137"/>
            <javadoc line="137">
                Returns a view of the portion of this set whose elements are
                  greater than or equal to &lt;tt&gt;fromElement&lt;/tt&gt;.  The returned
                  set is backed by this set, so changes in the returned set are
                  reflected in this set, and vice-versa.  The returned set
                  supports all optional set operations that this set supports.
                  &lt;p&gt;The returned set will throw an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;
                  on an attempt to insert an element outside its range.                
                <param>
                    fromElement low endpoint (inclusive) of the returned set                    
                </param>
                <return>
                    a view of the portion of this set whose elements are greater
                      than or equal to <tt>fromElement</tt>                    
                </return>
                <throws>
                    ClassCastException if <tt>fromElement</tt> is not compatible
                      with this set's comparator (or, if the set has no comparator,
                      if <tt>fromElement</tt> does not implement {@link Comparable}).
                      Implementations may, but are not required to, throw this
                      exception if <tt>fromElement</tt> cannot be compared to elements
                      currently in the set.                    
                </throws>
                <throws>
                    NullPointerException if <tt>fromElement</tt> is null
                      and this set does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if this set itself has a
                      restricted range, and <tt>fromElement</tt> lies outside the
                      bounds of the range                    
                </throws>
            </javadoc>
            <method name="first" type="E" line="161"/>
            <javadoc line="161">
                Returns the first (lowest) element currently in this set.                
                <return>
                    the first (lowest) element currently in this set                    
                </return>
                <throws>
                    NoSuchElementException if this set is empty                    
                </throws>
            </javadoc>
            <method name="last" type="E" line="167"/>
            <javadoc line="167">
                Returns the last (highest) element currently in this set.                
                <return>
                    the last (highest) element currently in this set                    
                </return>
                <throws>
                    NoSuchElementException if this set is empty                    
                </throws>
            </javadoc>
        </interface>
    </source>