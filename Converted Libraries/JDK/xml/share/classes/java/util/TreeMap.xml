<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="TreeMap" line="2">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <extends class="AbstractMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <implements interface="NavigableMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="2">
                A Red-Black tree based {@link NavigableMap} implementation.
                  The map is sorted according to the {@linkplain Comparable natural
                  ordering} of its keys, or by a {@link Comparator} provided at map
                  creation time, depending on which constructor is used.
                  &lt;p&gt;This implementation provides guaranteed log(n) time cost for the{@code containsKey}, {@code get}, {@code put} and {@code remove}operations.  Algorithms are adaptations of those in Cormen, Leiserson, and
                  Rivest&apos;s &lt;em&gt;Introduction to Algorithms&lt;/em&gt;.
                  &lt;p&gt;Note that the ordering maintained by a tree map, like any sorted map, and
                  whether or not an explicit comparator is provided, must be &lt;em&gt;consistent
                  with {@code equals}&lt;/em&gt; if this sorted map is to correctly implement the{@code Map} interface.  (See {@code Comparable} or {@code Comparator} for a
                  precise definition of &lt;em&gt;consistent with equals&lt;/em&gt;.)  This is so because
                  the {@code Map} interface is defined in terms of the {@code equals}operation, but a sorted map performs all key comparisons using its {@codecompareTo} (or {@code compare}) method, so two keys that are deemed equal by
                  this method are, from the standpoint of the sorted map, equal.  The behavior
                  of a sorted map &lt;em&gt;is&lt;/em&gt; well-defined even if its ordering is
                  inconsistent with {@code equals}; it just fails to obey the general contract
                  of the {@code Map} interface.
                  &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  If multiple threads access a map concurrently, and at least one of the
                  threads modifies the map structurally, it &lt;em&gt;must&lt;/em&gt; be synchronized
                  externally.  (A structural modification is any operation that adds or
                  deletes one or more mappings; merely changing the value associated
                  with an existing key is not a structural modification.)  This is
                  typically accomplished by synchronizing on some object that naturally
                  encapsulates the map.
                  If no such object exists, the map should be &quot;wrapped&quot; using the{@link Collections#synchronizedSortedMap Collections.synchronizedSortedMap}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access to the map: &lt;pre&gt;
                  SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));&lt;/pre&gt;
                  &lt;p&gt;The iterators returned by the {@code iterator} method of the collections
                  returned by all of this class&apos;s &quot;collection view methods&quot; are
                  &lt;em&gt;fail-fast&lt;/em&gt;: if the map is structurally modified at any time after
                  the iterator is created, in any way except through the iterator&apos;s own{@code remove} method, the iterator will throw a {@link ConcurrentModificationException}.  Thus, in the face of concurrent
                  modification, the iterator fails quickly and cleanly, rather than risking
                  arbitrary, non-deterministic behavior at an undetermined time in the future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw {@code ConcurrentModificationException} on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness:   &lt;em&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/em&gt;
                  &lt;p&gt;All {@code Map.Entry} pairs returned by methods in this class
                  and its views represent snapshots of mappings at the time they were
                  produced. They do &lt;strong&gt;not&lt;/strong&gt; support the {@code Entry.setValue}method. (Note however that it is possible to change mappings in the
                  associated map using {@code put}.)
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <K>
                      the type of keys maintained by this map                    
                </param>
                <param>
                    <V>
                      the type of mapped values                    
                </param>
                <author>
                    Josh Bloch and Doug Lea                    
                </author>
                <see>
                    Map                    
                </see>
                <see>
                    HashMap                    
                </see>
                <see>
                    Hashtable                    
                </see>
                <see>
                    Comparable                    
                </see>
                <see>
                    Comparator                    
                </see>
                <see>
                    Collection                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="comparator" type="Comparator&lt;? super K&gt;" line="63"/>
            <javadoc line="63">
                The comparator used to maintain order in this tree map, or
                  null if it uses the natural ordering of its keys.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="root" type="Entry&lt;K,V&gt;" line="69"/>
            <declaration name="size" type="int" line="70"/>
            <javadoc line="70">
                The number of entries in the tree                
            </javadoc>
            <declaration name="modCount" type="int" line="74"/>
            <javadoc line="74">
                The number of structural modifications to the tree.                
            </javadoc>
            <javadoc line="78">
                Constructs a new, empty tree map, using the natural ordering of its
                  keys.  All keys inserted into the map must implement the {@link Comparable} interface.  Furthermore, all such keys must be
                  &lt;em&gt;mutually comparable&lt;/em&gt;: {@code k1.compareTo(k2)} must not throw
                  a {@code ClassCastException} for any keys {@code k1} and{@code k2} in the map.  If the user attempts to put a key into the
                  map that violates this constraint (for example, the user attempts to
                  put a string key into a map whose keys are integers), the{@code put(Object key, Object value)} call will throw a{@code ClassCastException}.                
            </javadoc>
            <method name="TreeMap" type="constructor" line="86"/>
            <javadoc line="89">
                Constructs a new, empty tree map, ordered according to the given
                  comparator.  All keys inserted into the map must be &lt;em&gt;mutually
                  comparable&lt;/em&gt; by the given comparator: {@code comparator.compare(k1,
                  k2)} must not throw a {@code ClassCastException} for any keys{@code k1} and {@code k2} in the map.  If the user attempts to put
                  a key into the map that violates this constraint, the {@code put(Object
                  key, Object value)} call will throw a{@code ClassCastException}.                
                <param>
                    comparator the comparator that will be used to order this map.
                      If {@code null}, the {@linkplain Comparable natural
                      ordering} of the keys will be used.                    
                </param>
            </javadoc>
            <method name="TreeMap" type="constructor" line="100">
                <params>
                    <param name="comparator" type="Comparator<? super K>"/>
                </params>
            </method>
            <javadoc line="103">
                Constructs a new tree map containing the same mappings as the given
                  map, ordered according to the &lt;em&gt;natural ordering&lt;/em&gt; of its keys.
                  All keys inserted into the new map must implement the {@link Comparable} interface.  Furthermore, all such keys must be
                  &lt;em&gt;mutually comparable&lt;/em&gt;: {@code k1.compareTo(k2)} must not throw
                  a {@code ClassCastException} for any keys {@code k1} and{@code k2} in the map.  This method runs in nlog(n) time.                
                <param>
                    m the map whose mappings are to be placed in this map                    
                </param>
                <throws>
                    ClassCastException if the keys in m are not {@link Comparable},
                      or are not mutually comparable                    
                </throws>
                <throws>
                    NullPointerException if the specified map is null                    
                </throws>
            </javadoc>
            <method name="TreeMap" type="constructor" line="114">
                <params>
                    <param name="m" type="Map<? extends K,? extends V>"/>
                </params>
            </method>
            <javadoc line="118">
                Constructs a new tree map containing the same mappings and
                  using the same ordering as the specified sorted map.  This
                  method runs in linear time.                
                <param>
                    m the sorted map whose mappings are to be placed in this map,
                      and whose comparator is to be used to sort this map                    
                </param>
                <throws>
                    NullPointerException if the specified map is null                    
                </throws>
            </javadoc>
            <method name="TreeMap" type="constructor" line="126">
                <params>
                    <param name="m" type="SortedMap<K,? extends V>"/>
                </params>
                <scope line="128"/>
                <scope line="131"/>
                <scope line="133"/>
            </method>
            <javadoc line="136">
                Returns the number of key-value mappings in this map.                
                <return>
                    the number of key-value mappings in this map                    
                </return>
            </javadoc>
            <method name="size" type="int" line="140"/>
            <javadoc line="143">
                Returns {@code true} if this map contains a mapping for the specified
                  key.                
                <param>
                    key key whose presence in this map is to be tested                    
                </param>
                <return>
                    {@code true} if this map contains a mapping for the
                      specified key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
            </javadoc>
            <method name="containsKey" type="boolean" line="155">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="158">
                Returns {@code true} if this map maps one or more keys to the
                  specified value.  More formally, returns {@code true} if and only if
                  this map contains at least one mapping to a value {@code v} such
                  that {@code (value==null ? v==null : value.equals(v))}.  This
                  operation will probably require time linear in the map size for
                  most implementations.                
                <param>
                    value value whose presence in this map is to be tested                    
                </param>
                <return>
                    {@code true} if a mapping to {@code value} exists;{@code false} otherwise                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="containsValue" type="boolean" line="169">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="173">
                Returns the value to which the specified key is mapped,
                  or {@code null} if this map contains no mapping for the key.
                  &lt;p&gt;More formally, if this map contains a mapping from a key{@code k} to a value {@code v} such that {@code key} compares
                  equal to {@code k} according to the map&apos;s ordering, then this
                  method returns {@code v}; otherwise it returns {@code null}.
                  (There can be at most one such mapping.)
                  &lt;p&gt;A return value of {@code null} does not &lt;em&gt;necessarily&lt;/em&gt;
                  indicate that the map contains no mapping for the key; it&apos;s also
                  possible that the map explicitly maps the key to {@code null}.
                  The {@link #containsKey containsKey} operation may be used to
                  distinguish these two cases.                
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
            </javadoc>
            <method name="get" type="V" line="191">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="p" type="Entry&lt;K,V&gt;" line="192"/>
            </method>
            <method name="comparator" type="Comparator<? super K>" line="195"/>
            <javadoc line="198">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="firstKey" type="K" line="201"/>
            <javadoc line="204">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="lastKey" type="K" line="207"/>
            <javadoc line="210">
                Copies all of the mappings from the specified map to this map.
                  These mappings replace any mappings that this map had for any
                  of the keys currently in the specified map.                
                <param>
                    map mappings to be stored in this map                    
                </param>
                <throws>
                    ClassCastException if the class of a key or value in
                      the specified map prevents it from being stored in this map                    
                </throws>
                <throws>
                    NullPointerException if the specified map is null or
                      the specified map contains a null key and this map does not
                      permit null keys                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="221">
                <params>
                    <param name="map" type="Map<? extends K,? extends V>"/>
                </params>
                <declaration name="mapSize" type="int" line="222"/>
                <scope line="223">
                    <declaration name="c" type="Comparator" line="224"/>
                    <scope line="225">
                        <scope line="227"/>
                        <scope line="230"/>
                        <scope line="232"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="239">
                Returns this map&apos;s entry for the given key, or {@code null} if the map
                  does not contain an entry for the key.                
                <return>
                    this map's entry for the given key, or {@code null} if the map
                      does not contain an entry for the key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
            </javadoc>
            <method name="getEntry" type="Entry<K,V>" line="250">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="k" type="Comparable&lt;? super K&gt;" line="253"/>
                <declaration name="p" type="Entry&lt;K,V&gt;" line="254"/>
                <scope line="255">
                    <declaration name="cmp" type="int" line="256"/>
                </scope>
            </method>
            <javadoc line="263">
                Version of getEntry using comparator. Split off from getEntry
                  for performance. (This is not worth doing for most methods,
                  that are less dependent on comparator performance, but is
                  worthwhile here.)                
            </javadoc>
            <method name="getEntryUsingComparator" type="Entry<K,V>" line="269">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="k" type="K" line="270"/>
                <declaration name="cpr" type="Comparator&lt;? super K&gt;" line="271"/>
                <scope line="272">
                    <declaration name="p" type="Entry&lt;K,V&gt;" line="273"/>
                    <scope line="274">
                        <declaration name="cmp" type="int" line="275"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="283">
                Gets the entry corresponding to the specified key; if no such entry
                  exists, returns the entry for the least key greater than the specified
                  key; if no such entry exists (i.e., the greatest key in the Tree is less
                  than the specified key), returns {@code null}.                
            </javadoc>
            <method name="getCeilingEntry" type="Entry<K,V>" line="289">
                <params>
                    <param name="key" type="K"/>
                </params>
                <declaration name="p" type="Entry&lt;K,V&gt;" line="290"/>
                <scope line="291">
                    <declaration name="cmp" type="int" line="292"/>
                    <scope line="293"/>
                    <scope line="297">
                        <scope line="298"/>
                        <scope line="301">
                            <declaration name="parent" type="Entry&lt;K,V&gt;" line="302"/>
                            <declaration name="ch" type="Entry&lt;K,V&gt;" line="303"/>
                            <scope line="304"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="315">
                Gets the entry corresponding to the specified key; if no such entry
                  exists, returns the entry for the greatest key less than the specified
                  key; if no such entry exists, returns {@code null}.                
            </javadoc>
            <method name="getFloorEntry" type="Entry<K,V>" line="320">
                <params>
                    <param name="key" type="K"/>
                </params>
                <declaration name="p" type="Entry&lt;K,V&gt;" line="321"/>
                <scope line="322">
                    <declaration name="cmp" type="int" line="323"/>
                    <scope line="324"/>
                    <scope line="328">
                        <scope line="329"/>
                        <scope line="332">
                            <declaration name="parent" type="Entry&lt;K,V&gt;" line="333"/>
                            <declaration name="ch" type="Entry&lt;K,V&gt;" line="334"/>
                            <scope line="335"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="346">
                Gets the entry for the least key greater than the specified
                  key; if no such entry exists, returns the entry for the least
                  key greater than the specified key; if no such entry exists
                  returns {@code null}.                
            </javadoc>
            <method name="getHigherEntry" type="Entry<K,V>" line="352">
                <params>
                    <param name="key" type="K"/>
                </params>
                <declaration name="p" type="Entry&lt;K,V&gt;" line="353"/>
                <scope line="354">
                    <declaration name="cmp" type="int" line="355"/>
                    <scope line="356"/>
                    <scope line="360">
                        <scope line="361"/>
                        <scope line="364">
                            <declaration name="parent" type="Entry&lt;K,V&gt;" line="365"/>
                            <declaration name="ch" type="Entry&lt;K,V&gt;" line="366"/>
                            <scope line="367"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="377">
                Returns the entry for the greatest key less than the specified key; if
                  no such entry exists (i.e., the least key in the Tree is greater than
                  the specified key), returns {@code null}.                
            </javadoc>
            <method name="getLowerEntry" type="Entry<K,V>" line="382">
                <params>
                    <param name="key" type="K"/>
                </params>
                <declaration name="p" type="Entry&lt;K,V&gt;" line="383"/>
                <scope line="384">
                    <declaration name="cmp" type="int" line="385"/>
                    <scope line="386"/>
                    <scope line="390">
                        <scope line="391"/>
                        <scope line="394">
                            <declaration name="parent" type="Entry&lt;K,V&gt;" line="395"/>
                            <declaration name="ch" type="Entry&lt;K,V&gt;" line="396"/>
                            <scope line="397"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="407">
                Associates the specified value with the specified key in this map.
                  If the map previously contained a mapping for the key, the old
                  value is replaced.                
                <param>
                    key key with which the specified value is to be associated                    
                </param>
                <param>
                    value value to be associated with the specified key                    
                </param>
                <return>
                    the previous value associated with {@code key}, or{@code null} if there was no mapping for {@code key}.
                      (A {@code null} return can also indicate that the map
                      previously associated {@code null} with {@code key}.)                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
            </javadoc>
            <method name="put" type="V" line="422">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
                <declaration name="t" type="Entry&lt;K,V&gt;" line="423"/>
                <scope line="424"/>
                <declaration name="cmp" type="int" line="431"/>
                <declaration name="parent" type="Entry&lt;K,V&gt;" line="432"/>
                <declaration name="cpr" type="Comparator&lt;? super K&gt;" line="433"/>
                <scope line="434">
                    <scope line="435"/>
                </scope>
                <scope line="444">
                    <declaration name="k" type="Comparable&lt;? super K&gt;" line="446"/>
                    <scope line="447"/>
                </scope>
                <declaration name="e" type="Entry&lt;K,V&gt;" line="456"/>
            </method>
            <javadoc line="464">
                Removes the mapping for this key from this TreeMap if present.                
                <param>
                    key key for which mapping should be removed                    
                </param>
                <return>
                    the previous value associated with {@code key}, or{@code null} if there was no mapping for {@code key}.
                      (A {@code null} return can also indicate that the map
                      previously associated {@code null} with {@code key}.)                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
            </javadoc>
            <method name="remove" type="V" line="476">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="p" type="Entry&lt;K,V&gt;" line="477"/>
                <declaration name="oldValue" type="V" line="479"/>
            </method>
            <javadoc line="483">
                Removes all of the mappings from this map.
                  The map will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="487"/>
            <javadoc line="492">
                Returns a shallow copy of this {@code TreeMap} instance. (The keys and
                  values themselves are not cloned.)                
                <return>
                    a shallow copy of this map                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="497">
                <declaration name="clone" type="TreeMap&lt;K,V&gt;" line="498"/>
                <scope line="499"/>
                <scope line="502"/>
                <scope line="511"/>
                <scope line="514"/>
                <scope line="516"/>
            </method>
            <javadoc line="520">
                @since 1.6                
            </javadoc>
            <method name="firstEntry" type="Map.Entry<K,V>" line="523"/>
            <javadoc line="526">
                @since 1.6                
            </javadoc>
            <method name="lastEntry" type="Map.Entry<K,V>" line="529"/>
            <javadoc line="532">
                @since 1.6                
            </javadoc>
            <method name="pollFirstEntry" type="Map.Entry<K,V>" line="535">
                <declaration name="p" type="Entry&lt;K,V&gt;" line="536"/>
                <declaration name="result" type="Map.Entry&lt;K,V&gt;" line="537"/>
            </method>
            <javadoc line="541">
                @since 1.6                
            </javadoc>
            <method name="pollLastEntry" type="Map.Entry<K,V>" line="544">
                <declaration name="p" type="Entry&lt;K,V&gt;" line="545"/>
                <declaration name="result" type="Map.Entry&lt;K,V&gt;" line="546"/>
            </method>
            <javadoc line="550">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lowerEntry" type="Map.Entry<K,V>" line="557">
                <params>
                    <param name="key" type="K"/>
                </params>
            </method>
            <javadoc line="560">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lowerKey" type="K" line="567">
                <params>
                    <param name="key" type="K"/>
                </params>
            </method>
            <javadoc line="570">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="floorEntry" type="Map.Entry<K,V>" line="577">
                <params>
                    <param name="key" type="K"/>
                </params>
            </method>
            <javadoc line="580">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="floorKey" type="K" line="587">
                <params>
                    <param name="key" type="K"/>
                </params>
            </method>
            <javadoc line="590">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="ceilingEntry" type="Map.Entry<K,V>" line="597">
                <params>
                    <param name="key" type="K"/>
                </params>
            </method>
            <javadoc line="600">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="ceilingKey" type="K" line="607">
                <params>
                    <param name="key" type="K"/>
                </params>
            </method>
            <javadoc line="610">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="higherEntry" type="Map.Entry<K,V>" line="617">
                <params>
                    <param name="key" type="K"/>
                </params>
            </method>
            <javadoc line="620">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified key is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="higherKey" type="K" line="627">
                <params>
                    <param name="key" type="K"/>
                </params>
            </method>
            <declaration name="entrySet" type="EntrySet" line="630"/>
            <javadoc line="630">
                Fields initialized to contain an instance of the entry set view
                  the first time this view is requested.  Views are stateless, so
                  there&apos;s no reason to create more than one.                
            </javadoc>
            <declaration name="navigableKeySet" type="KeySet&lt;K&gt;" line="636"/>
            <declaration name="descendingMap" type="NavigableMap&lt;K,V&gt;" line="637"/>
            <javadoc line="638">
                Returns a {@link Set} view of the keys contained in this map.
                  The set&apos;s iterator returns the keys in ascending order.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own {@code remove} operation), the results of
                  the iteration are undefined.  The set supports element removal,
                  which removes the corresponding mapping from the map, via the{@code Iterator.remove}, {@code Set.remove},{@code removeAll}, {@code retainAll}, and {@code clear}operations.  It does not support the {@code add} or {@code addAll}operations.                
            </javadoc>
            <method name="keySet" type="Set<K>" line="648"/>
            <javadoc line="651">
                @since 1.6                
            </javadoc>
            <method name="navigableKeySet" type="NavigableSet<K>" line="654">
                <declaration name="nks" type="KeySet&lt;K&gt;" line="655"/>
            </method>
            <javadoc line="658">
                @since 1.6                
            </javadoc>
            <method name="descendingKeySet" type="NavigableSet<K>" line="661"/>
            <javadoc line="664">
                Returns a {@link Collection} view of the values contained in this map.
                  The collection&apos;s iterator returns the values in ascending order
                  of the corresponding keys.
                  The collection is backed by the map, so changes to the map are
                  reflected in the collection, and vice-versa.  If the map is
                  modified while an iteration over the collection is in progress
                  (except through the iterator&apos;s own {@code remove} operation),
                  the results of the iteration are undefined.  The collection
                  supports element removal, which removes the corresponding
                  mapping from the map, via the {@code Iterator.remove},{@code Collection.remove}, {@code removeAll},{@code retainAll} and {@code clear} operations.  It does not
                  support the {@code add} or {@code addAll} operations.                
            </javadoc>
            <method name="values" type="Collection<V>" line="677">
                <declaration name="vs" type="Collection&lt;V&gt;" line="678"/>
            </method>
            <javadoc line="681">
                Returns a {@link Set} view of the mappings contained in this map.
                  The set&apos;s iterator returns the entries in ascending key order.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own {@code remove} operation, or through the{@code setValue} operation on a map entry returned by the
                  iterator) the results of the iteration are undefined.  The set
                  supports element removal, which removes the corresponding
                  mapping from the map, via the {@code Iterator.remove},{@code Set.remove}, {@code removeAll}, {@code retainAll} and{@code clear} operations.  It does not support the{@code add} or {@code addAll} operations.                
            </javadoc>
            <method name="entrySet" type="Set<Map.Entry<K,V>>" line="692">
                <declaration name="es" type="EntrySet" line="693"/>
            </method>
            <javadoc line="696">
                @since 1.6                
            </javadoc>
            <method name="descendingMap" type="NavigableMap<K,V>" line="699">
                <declaration name="km" type="NavigableMap&lt;K,V&gt;" line="700"/>
            </method>
            <javadoc line="703">
                @throws ClassCastException       {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromKey} or {@code toKey} is
                      null and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="subMap" type="NavigableMap<K,V>" line="711">
                <params>
                    <param name="fromKey" type="K"/>
                    <param name="fromInclusive" type="boolean"/>
                    <param name="toKey" type="K"/>
                    <param name="toInclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="714">
                @throws ClassCastException       {@inheritDoc}                
                <throws>
                    NullPointerException if {@code toKey} is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="headMap" type="NavigableMap<K,V>" line="722">
                <params>
                    <param name="toKey" type="K"/>
                    <param name="inclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="725">
                @throws ClassCastException       {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromKey} is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="tailMap" type="NavigableMap<K,V>" line="733">
                <params>
                    <param name="fromKey" type="K"/>
                    <param name="inclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="736">
                @throws ClassCastException       {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromKey} or {@code toKey} is
                      null and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="subMap" type="SortedMap<K,V>" line="743">
                <params>
                    <param name="fromKey" type="K"/>
                    <param name="toKey" type="K"/>
                </params>
            </method>
            <javadoc line="746">
                @throws ClassCastException       {@inheritDoc}                
                <throws>
                    NullPointerException if {@code toKey} is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="headMap" type="SortedMap<K,V>" line="753">
                <params>
                    <param name="toKey" type="K"/>
                </params>
            </method>
            <javadoc line="756">
                @throws ClassCastException       {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromKey} is null
                      and this map uses natural ordering, or its comparator
                      does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="tailMap" type="SortedMap<K,V>" line="763">
                <params>
                    <param name="fromKey" type="K"/>
                </params>
            </method>
            <class name="Values" line="766">
                <extends class="AbstractCollection">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <method name="iterator" type="Iterator<V>" line="767"/>
                <method name="size" type="int" line="770"/>
                <method name="contains" type="boolean" line="773">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="776">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="777">
                        <scope line="778"/>
                    </scope>
                </method>
                <method name="clear" type="void" line="785"/>
            </class>
            <class name="EntrySet" line="789">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="Map.Entry<K,V>"/>
                    </type_params>
                </extends>
                <method name="iterator" type="Iterator<Map.Entry<K,V>>" line="790"/>
                <method name="contains" type="boolean" line="793">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="entry" type="Map.Entry&lt;K,V&gt;" line="795"/>
                    <declaration name="value" type="V" line="796"/>
                    <declaration name="p" type="Entry&lt;K,V&gt;" line="797"/>
                </method>
                <method name="remove" type="boolean" line="800">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="entry" type="Map.Entry&lt;K,V&gt;" line="802"/>
                    <declaration name="value" type="V" line="803"/>
                    <declaration name="p" type="Entry&lt;K,V&gt;" line="804"/>
                    <scope line="805"/>
                </method>
                <method name="size" type="int" line="811"/>
                <method name="clear" type="void" line="814"/>
            </class>
            <method name="keyIterator" type="Iterator<K>" line="818"/>
            <method name="descendingKeyIterator" type="Iterator<K>" line="821"/>
            <class name="KeySet" line="824">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </extends>
                <implements interface="NavigableSet">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="m" type="NavigableMap&lt;E,Object&gt;" line="825"/>
                <method name="KeySet" type="constructor" line="826">
                    <params>
                        <param name="map" type="NavigableMap<E,Object>"/>
                    </params>
                </method>
                <method name="iterator" type="Iterator<E>" line="829"/>
                <method name="descendingIterator" type="Iterator<E>" line="833"/>
                <method name="size" type="int" line="837"/>
                <method name="isEmpty" type="boolean" line="840"/>
                <method name="contains" type="boolean" line="843">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="clear" type="void" line="846"/>
                <method name="lower" type="E" line="849">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <method name="floor" type="E" line="852">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <method name="ceiling" type="E" line="855">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <method name="higher" type="E" line="858">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <method name="first" type="E" line="861"/>
                <method name="last" type="E" line="864"/>
                <method name="comparator" type="Comparator<? super E>" line="867"/>
                <method name="pollFirst" type="E" line="870">
                    <declaration name="e" type="Map.Entry&lt;E,Object&gt;" line="871"/>
                </method>
                <method name="pollLast" type="E" line="874">
                    <declaration name="e" type="Map.Entry&lt;E,Object&gt;" line="875"/>
                </method>
                <method name="remove" type="boolean" line="878">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="oldSize" type="int" line="879"/>
                </method>
                <method name="subSet" type="NavigableSet<E>" line="883">
                    <params>
                        <param name="fromElement" type="E"/>
                        <param name="fromInclusive" type="boolean"/>
                        <param name="toElement" type="E"/>
                        <param name="toInclusive" type="boolean"/>
                    </params>
                </method>
                <method name="headSet" type="NavigableSet<E>" line="886">
                    <params>
                        <param name="toElement" type="E"/>
                        <param name="inclusive" type="boolean"/>
                    </params>
                </method>
                <method name="tailSet" type="NavigableSet<E>" line="889">
                    <params>
                        <param name="fromElement" type="E"/>
                        <param name="inclusive" type="boolean"/>
                    </params>
                </method>
                <method name="subSet" type="SortedSet<E>" line="892">
                    <params>
                        <param name="fromElement" type="E"/>
                        <param name="toElement" type="E"/>
                    </params>
                </method>
                <method name="headSet" type="SortedSet<E>" line="895">
                    <params>
                        <param name="toElement" type="E"/>
                    </params>
                </method>
                <method name="tailSet" type="SortedSet<E>" line="898">
                    <params>
                        <param name="fromElement" type="E"/>
                    </params>
                </method>
                <method name="descendingSet" type="NavigableSet<E>" line="901"/>
            </class>
            <class name="PrivateEntryIterator" line="905">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <javadoc line="905">
                    Base class for TreeMap Iterators                    
                </javadoc>
                <declaration name="next" type="Entry&lt;K,V&gt;" line="909"/>
                <declaration name="lastReturned" type="Entry&lt;K,V&gt;" line="910"/>
                <declaration name="expectedModCount" type="int" line="911"/>
                <method name="PrivateEntryIterator" type="constructor" line="912">
                    <params>
                        <param name="first" type="Entry<K,V>"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="917"/>
                <method name="nextEntry" type="Entry<K,V>" line="920">
                    <declaration name="e" type="Entry&lt;K,V&gt;" line="921"/>
                </method>
                <method name="prevEntry" type="Entry<K,V>" line="928">
                    <declaration name="e" type="Entry&lt;K,V&gt;" line="929"/>
                </method>
                <method name="remove" type="void" line="936"/>
            </class>
            <class name="EntryIterator" line="945">
                <extends class="PrivateEntryIterator">
                    <type_params>
                        <type_param name="Map.Entry<K,V>"/>
                    </type_params>
                </extends>
                <method name="EntryIterator" type="constructor" line="946">
                    <params>
                        <param name="first" type="Entry<K,V>"/>
                    </params>
                </method>
                <method name="next" type="Map.Entry<K,V>" line="949"/>
            </class>
            <class name="ValueIterator" line="953">
                <extends class="PrivateEntryIterator">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <method name="ValueIterator" type="constructor" line="954">
                    <params>
                        <param name="first" type="Entry<K,V>"/>
                    </params>
                </method>
                <method name="next" type="V" line="957"/>
            </class>
            <class name="KeyIterator" line="961">
                <extends class="PrivateEntryIterator">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <method name="KeyIterator" type="constructor" line="962">
                    <params>
                        <param name="first" type="Entry<K,V>"/>
                    </params>
                </method>
                <method name="next" type="K" line="965"/>
            </class>
            <class name="DescendingKeyIterator" line="969">
                <extends class="PrivateEntryIterator">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <method name="DescendingKeyIterator" type="constructor" line="970">
                    <params>
                        <param name="first" type="Entry<K,V>"/>
                    </params>
                </method>
                <method name="next" type="K" line="973"/>
            </class>
            <javadoc line="977">
                Compares two keys using the correct comparison method for this TreeMap.                
            </javadoc>
            <method name="compare" type="int" line="980">
                <params>
                    <param name="k1" type="Object"/>
                    <param name="k2" type="Object"/>
                </params>
            </method>
            <javadoc line="983">
                Test two values for equality.  Differs from o1.equals(o2) only in
                  that it copes with {@code null} o1 properly.                
            </javadoc>
            <method name="valEquals" type="boolean" line="987">
                <params>
                    <param name="o1" type="Object"/>
                    <param name="o2" type="Object"/>
                </params>
            </method>
            <javadoc line="990">
                Return SimpleImmutableEntry for entry, or null if null                
            </javadoc>
            <method name="exportEntry" type="Map.Entry<K,V>" line="993">
                <params>
                    <param name="e" type="TreeMap.Entry<K,V>"/>
                </params>
            </method>
            <javadoc line="996">
                Return key for entry, or null if null                
            </javadoc>
            <method name="keyOrNull" type="K" line="999">
                <params>
                    <param name="e" type="TreeMap.Entry<K,V>"/>
                </params>
            </method>
            <javadoc line="1002">
                Returns the key corresponding to the specified Entry.                
                <throws>
                    NoSuchElementException if the Entry is null                    
                </throws>
            </javadoc>
            <method name="key" type="K" line="1006">
                <params>
                    <param name="e" type="Entry<K,?>"/>
                </params>
            </method>
            <declaration name="UNBOUNDED" type="Object" line="1010"/>
            <javadoc line="1010">
                Dummy value serving as unmatchable fence key for unbounded
                  SubMapIterators                
            </javadoc>
            <class name="NavigableSubMap" line="1015">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="AbstractMap">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <implements interface="NavigableMap">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </implements>
                <implements interface="java.io.Serializable"/>
                <javadoc line="1015">
                    @serial include                    
                </javadoc>
                <declaration name="m" type="TreeMap&lt;K,V&gt;" line="1019"/>
                <javadoc line="1019">
                    The backing map.                    
                </javadoc>
                <declaration name="lo" type="K" line="1023"/>
                <javadoc line="1023">
                    Endpoints are represented as triples (fromStart, lo,
                      loInclusive) and (toEnd, hi, hiInclusive). If fromStart is
                      true, then the low (absolute) bound is the start of the
                      backing map, and the other values are ignored. Otherwise,
                      if loInclusive is true, lo is the inclusive bound, else lo
                      is the exclusive bound. Similarly for the upper bound.                    
                </javadoc>
                <declaration name="fromStart" type="boolean" line="1032"/>
                <declaration name="loInclusive" type="boolean" line="1033"/>
                <method name="NavigableSubMap" type="constructor" line="1034">
                    <params>
                        <param name="m" type="TreeMap<K,V>"/>
                        <param name="fromStart" type="boolean"/>
                        <param name="lo" type="K"/>
                        <param name="loInclusive" type="boolean"/>
                        <param name="toEnd" type="boolean"/>
                        <param name="hi" type="K"/>
                        <param name="hiInclusive" type="boolean"/>
                    </params>
                    <scope line="1035"/>
                    <scope line="1038"/>
                </method>
                <method name="tooLow" type="boolean" line="1050">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="1051">
                        <declaration name="c" type="int" line="1052"/>
                    </scope>
                </method>
                <method name="tooHigh" type="boolean" line="1057">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="1058">
                        <declaration name="c" type="int" line="1059"/>
                    </scope>
                </method>
                <method name="inRange" type="boolean" line="1064">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="inClosedRange" type="boolean" line="1067">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="inRange" type="boolean" line="1070">
                    <params>
                        <param name="key" type="Object"/>
                        <param name="inclusive" type="boolean"/>
                    </params>
                </method>
                <method name="absLowest" type="TreeMap.Entry<K,V>" line="1073">
                    <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1074"/>
                </method>
                <method name="absHighest" type="TreeMap.Entry<K,V>" line="1077">
                    <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1078"/>
                </method>
                <method name="absCeiling" type="TreeMap.Entry<K,V>" line="1081">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                    <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1083"/>
                </method>
                <method name="absHigher" type="TreeMap.Entry<K,V>" line="1086">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                    <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1088"/>
                </method>
                <method name="absFloor" type="TreeMap.Entry<K,V>" line="1091">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                    <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1093"/>
                </method>
                <method name="absLower" type="TreeMap.Entry<K,V>" line="1096">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                    <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1098"/>
                </method>
                <javadoc line="1101">
                    Returns the absolute high fence for ascending traversal                    
                </javadoc>
                <method name="absHighFence" type="TreeMap.Entry<K,V>" line="1104"/>
                <javadoc line="1107">
                    Return the absolute low fence for descending traversal                    
                </javadoc>
                <method name="absLowFence" type="TreeMap.Entry<K,V>" line="1110"/>
                <method name="subLowest" type="TreeMap.Entry<K,V>" line="1113"/>
                <method name="subHighest" type="TreeMap.Entry<K,V>" line="1114"/>
                <method name="subCeiling" type="TreeMap.Entry<K,V>" line="1115"/>
                <method name="subHigher" type="TreeMap.Entry<K,V>" line="1116"/>
                <method name="subFloor" type="TreeMap.Entry<K,V>" line="1117"/>
                <method name="subLower" type="TreeMap.Entry<K,V>" line="1118"/>
                <method name="keyIterator" type="Iterator<K>" line="1119"/>
                <javadoc line="1119">
                    Returns ascending iterator from the perspective of this submap                    
                </javadoc>
                <method name="descendingKeyIterator" type="Iterator<K>" line="1123"/>
                <javadoc line="1123">
                    Returns descending iterator from the perspective of this submap                    
                </javadoc>
                <method name="isEmpty" type="boolean" line="1127"/>
                <method name="size" type="int" line="1130"/>
                <method name="containsKey" type="boolean" line="1133">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="put" type="V" line="1136">
                    <params>
                        <param name="key" type="K"/>
                        <param name="value" type="V"/>
                    </params>
                </method>
                <method name="get" type="V" line="1140">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="V" line="1143">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="ceilingEntry" type="Map.Entry<K,V>" line="1146">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="ceilingKey" type="K" line="1149">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="higherEntry" type="Map.Entry<K,V>" line="1152">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="higherKey" type="K" line="1155">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="floorEntry" type="Map.Entry<K,V>" line="1158">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="floorKey" type="K" line="1161">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="lowerEntry" type="Map.Entry<K,V>" line="1164">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="lowerKey" type="K" line="1167">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="firstKey" type="K" line="1170"/>
                <method name="lastKey" type="K" line="1173"/>
                <method name="firstEntry" type="Map.Entry<K,V>" line="1176"/>
                <method name="lastEntry" type="Map.Entry<K,V>" line="1179"/>
                <method name="pollFirstEntry" type="Map.Entry<K,V>" line="1182">
                    <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1183"/>
                    <declaration name="result" type="Map.Entry&lt;K,V&gt;" line="1184"/>
                </method>
                <method name="pollLastEntry" type="Map.Entry<K,V>" line="1188">
                    <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1189"/>
                    <declaration name="result" type="Map.Entry&lt;K,V&gt;" line="1190"/>
                </method>
                <declaration name="descendingMapView" type="NavigableMap&lt;K,V&gt;" line="1194"/>
                <declaration name="entrySetView" type="EntrySetView" line="1195"/>
                <declaration name="navigableKeySetView" type="KeySet&lt;K&gt;" line="1196"/>
                <method name="navigableKeySet" type="NavigableSet<K>" line="1197">
                    <declaration name="nksv" type="KeySet&lt;K&gt;" line="1198"/>
                </method>
                <method name="keySet" type="Set<K>" line="1201"/>
                <method name="descendingKeySet" type="NavigableSet<K>" line="1204"/>
                <method name="subMap" type="SortedMap<K,V>" line="1207">
                    <params>
                        <param name="fromKey" type="K"/>
                        <param name="toKey" type="K"/>
                    </params>
                </method>
                <method name="headMap" type="SortedMap<K,V>" line="1210">
                    <params>
                        <param name="toKey" type="K"/>
                    </params>
                </method>
                <method name="tailMap" type="SortedMap<K,V>" line="1213">
                    <params>
                        <param name="fromKey" type="K"/>
                    </params>
                </method>
                <class name="EntrySetView" line="1216">
                    <extends class="AbstractSet">
                        <type_params>
                            <type_param name="Map.Entry<K,V>"/>
                        </type_params>
                    </extends>
                    <declaration name="size" type="int" line="1217"/>
                    <method name="size" type="int" line="1218">
                        <scope line="1220">
                            <declaration name="i" type="Iterator" line="1223"/>
                            <scope line="1224"/>
                        </scope>
                    </method>
                    <method name="isEmpty" type="boolean" line="1231">
                        <declaration name="n" type="TreeMap.Entry&lt;K,V&gt;" line="1232"/>
                    </method>
                    <method name="contains" type="boolean" line="1235">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <declaration name="entry" type="Map.Entry&lt;K,V&gt;" line="1237"/>
                        <declaration name="key" type="K" line="1238"/>
                        <declaration name="node" type="TreeMap.Entry" line="1240"/>
                    </method>
                    <method name="remove" type="boolean" line="1243">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <declaration name="entry" type="Map.Entry&lt;K,V&gt;" line="1245"/>
                        <declaration name="key" type="K" line="1246"/>
                        <declaration name="node" type="TreeMap.Entry&lt;K,V&gt;" line="1248"/>
                        <scope line="1249"/>
                    </method>
                </class>
                <class name="SubMapIterator" line="1256">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                    <implements interface="Iterator">
                        <type_params>
                            <type_param name="T"/>
                        </type_params>
                    </implements>
                    <javadoc line="1256">
                        Iterators for SubMaps                        
                    </javadoc>
                    <declaration name="lastReturned" type="TreeMap.Entry&lt;K,V&gt;" line="1260"/>
                    <declaration name="next" type="TreeMap.Entry&lt;K,V&gt;" line="1261"/>
                    <declaration name="fenceKey" type="Object" line="1262"/>
                    <declaration name="expectedModCount" type="int" line="1263"/>
                    <method name="SubMapIterator" type="constructor" line="1264">
                        <params>
                            <param name="first" type="TreeMap.Entry<K,V>"/>
                            <param name="fence" type="TreeMap.Entry<K,V>"/>
                        </params>
                    </method>
                    <method name="hasNext" type="boolean" line="1270"/>
                    <method name="nextEntry" type="TreeMap.Entry<K,V>" line="1273">
                        <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1274"/>
                    </method>
                    <method name="prevEntry" type="TreeMap.Entry<K,V>" line="1281">
                        <declaration name="e" type="TreeMap.Entry&lt;K,V&gt;" line="1282"/>
                    </method>
                    <method name="removeAscending" type="void" line="1289"/>
                    <method name="removeDescending" type="void" line="1297"/>
                </class>
                <class name="SubMapEntryIterator" line="1305">
                    <extends class="SubMapIterator">
                        <type_params>
                            <type_param name="Map.Entry<K,V>"/>
                        </type_params>
                    </extends>
                    <method name="SubMapEntryIterator" type="constructor" line="1306">
                        <params>
                            <param name="first" type="TreeMap.Entry<K,V>"/>
                            <param name="fence" type="TreeMap.Entry<K,V>"/>
                        </params>
                    </method>
                    <method name="next" type="Map.Entry<K,V>" line="1309"/>
                    <method name="remove" type="void" line="1312"/>
                </class>
                <class name="SubMapKeyIterator" line="1316">
                    <extends class="SubMapIterator">
                        <type_params>
                            <type_param name="K"/>
                        </type_params>
                    </extends>
                    <method name="SubMapKeyIterator" type="constructor" line="1317">
                        <params>
                            <param name="first" type="TreeMap.Entry<K,V>"/>
                            <param name="fence" type="TreeMap.Entry<K,V>"/>
                        </params>
                    </method>
                    <method name="next" type="K" line="1320"/>
                    <method name="remove" type="void" line="1323"/>
                </class>
                <class name="DescendingSubMapEntryIterator" line="1327">
                    <extends class="SubMapIterator">
                        <type_params>
                            <type_param name="Map.Entry<K,V>"/>
                        </type_params>
                    </extends>
                    <method name="DescendingSubMapEntryIterator" type="constructor" line="1328">
                        <params>
                            <param name="last" type="TreeMap.Entry<K,V>"/>
                            <param name="fence" type="TreeMap.Entry<K,V>"/>
                        </params>
                    </method>
                    <method name="next" type="Map.Entry<K,V>" line="1331"/>
                    <method name="remove" type="void" line="1334"/>
                </class>
                <class name="DescendingSubMapKeyIterator" line="1338">
                    <extends class="SubMapIterator">
                        <type_params>
                            <type_param name="K"/>
                        </type_params>
                    </extends>
                    <method name="DescendingSubMapKeyIterator" type="constructor" line="1339">
                        <params>
                            <param name="last" type="TreeMap.Entry<K,V>"/>
                            <param name="fence" type="TreeMap.Entry<K,V>"/>
                        </params>
                    </method>
                    <method name="next" type="K" line="1342"/>
                    <method name="remove" type="void" line="1345"/>
                </class>
            </class>
            <class name="AscendingSubMap" line="1350">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="NavigableSubMap">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <javadoc line="1350">
                    @serial include                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1354"/>
                <method name="AscendingSubMap" type="constructor" line="1355">
                    <params>
                        <param name="m" type="TreeMap<K,V>"/>
                        <param name="fromStart" type="boolean"/>
                        <param name="lo" type="K"/>
                        <param name="loInclusive" type="boolean"/>
                        <param name="toEnd" type="boolean"/>
                        <param name="hi" type="K"/>
                        <param name="hiInclusive" type="boolean"/>
                    </params>
                </method>
                <method name="comparator" type="Comparator<? super K>" line="1358"/>
                <method name="subMap" type="NavigableMap<K,V>" line="1361">
                    <params>
                        <param name="fromKey" type="K"/>
                        <param name="fromInclusive" type="boolean"/>
                        <param name="toKey" type="K"/>
                        <param name="toInclusive" type="boolean"/>
                    </params>
                </method>
                <method name="headMap" type="NavigableMap<K,V>" line="1366">
                    <params>
                        <param name="toKey" type="K"/>
                        <param name="inclusive" type="boolean"/>
                    </params>
                </method>
                <method name="tailMap" type="NavigableMap<K,V>" line="1370">
                    <params>
                        <param name="fromKey" type="K"/>
                        <param name="inclusive" type="boolean"/>
                    </params>
                </method>
                <method name="descendingMap" type="NavigableMap<K,V>" line="1374">
                    <declaration name="mv" type="NavigableMap&lt;K,V&gt;" line="1375"/>
                </method>
                <method name="keyIterator" type="Iterator<K>" line="1378"/>
                <method name="descendingKeyIterator" type="Iterator<K>" line="1381"/>
                <class name="AscendingEntrySetView" line="1384">
                    <extends class="EntrySetView"/>
                    <method name="iterator" type="Iterator<Map.Entry<K,V>>" line="1385"/>
                </class>
                <method name="entrySet" type="Set<Map.Entry<K,V>>" line="1389">
                    <declaration name="es" type="EntrySetView" line="1390"/>
                </method>
                <method name="subLowest" type="TreeMap.Entry<K,V>" line="1393"/>
                <method name="subHighest" type="TreeMap.Entry<K,V>" line="1396"/>
                <method name="subCeiling" type="TreeMap.Entry<K,V>" line="1399">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="subHigher" type="TreeMap.Entry<K,V>" line="1402">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="subFloor" type="TreeMap.Entry<K,V>" line="1405">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="subLower" type="TreeMap.Entry<K,V>" line="1408">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
            </class>
            <class name="DescendingSubMap" line="1412">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="NavigableSubMap">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <javadoc line="1412">
                    @serial include                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1416"/>
                <method name="DescendingSubMap" type="constructor" line="1417">
                    <params>
                        <param name="m" type="TreeMap<K,V>"/>
                        <param name="fromStart" type="boolean"/>
                        <param name="lo" type="K"/>
                        <param name="loInclusive" type="boolean"/>
                        <param name="toEnd" type="boolean"/>
                        <param name="hi" type="K"/>
                        <param name="hiInclusive" type="boolean"/>
                    </params>
                </method>
                <declaration name="reverseComparator" type="Comparator&lt;? super K&gt;" line="1420"/>
                <method name="comparator" type="Comparator<? super K>" line="1421"/>
                <method name="subMap" type="NavigableMap<K,V>" line="1424">
                    <params>
                        <param name="fromKey" type="K"/>
                        <param name="fromInclusive" type="boolean"/>
                        <param name="toKey" type="K"/>
                        <param name="toInclusive" type="boolean"/>
                    </params>
                </method>
                <method name="headMap" type="NavigableMap<K,V>" line="1429">
                    <params>
                        <param name="toKey" type="K"/>
                        <param name="inclusive" type="boolean"/>
                    </params>
                </method>
                <method name="tailMap" type="NavigableMap<K,V>" line="1433">
                    <params>
                        <param name="fromKey" type="K"/>
                        <param name="inclusive" type="boolean"/>
                    </params>
                </method>
                <method name="descendingMap" type="NavigableMap<K,V>" line="1437">
                    <declaration name="mv" type="NavigableMap&lt;K,V&gt;" line="1438"/>
                </method>
                <method name="keyIterator" type="Iterator<K>" line="1441"/>
                <method name="descendingKeyIterator" type="Iterator<K>" line="1444"/>
                <class name="DescendingEntrySetView" line="1447">
                    <extends class="EntrySetView"/>
                    <method name="iterator" type="Iterator<Map.Entry<K,V>>" line="1448"/>
                </class>
                <method name="entrySet" type="Set<Map.Entry<K,V>>" line="1452">
                    <declaration name="es" type="EntrySetView" line="1453"/>
                </method>
                <method name="subLowest" type="TreeMap.Entry<K,V>" line="1456"/>
                <method name="subHighest" type="TreeMap.Entry<K,V>" line="1459"/>
                <method name="subCeiling" type="TreeMap.Entry<K,V>" line="1462">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="subHigher" type="TreeMap.Entry<K,V>" line="1465">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="subFloor" type="TreeMap.Entry<K,V>" line="1468">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
                <method name="subLower" type="TreeMap.Entry<K,V>" line="1471">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                </method>
            </class>
            <class name="SubMap" line="1475">
                <extends class="AbstractMap">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <implements interface="SortedMap">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </implements>
                <implements interface="java.io.Serializable"/>
                <javadoc line="1475">
                    This class exists solely for the sake of serialization
                      compatibility with previous releases of TreeMap that did not
                      support NavigableMap.  It translates an old-version SubMap into
                      a new-version AscendingSubMap. This class is never otherwise
                      used.                    
                    <serial>
                        include                        
                    </serial>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1484"/>
                <declaration name="fromStart" type="boolean" line="1485"/>
                <declaration name="fromKey" type="K" line="1486"/>
                <method name="readResolve" type="Object" line="1487"/>
                <method name="entrySet" type="Set<Map.Entry<K,V>>" line="1490"/>
                <method name="lastKey" type="K" line="1493"/>
                <method name="firstKey" type="K" line="1496"/>
                <method name="subMap" type="SortedMap<K,V>" line="1499">
                    <params>
                        <param name="fromKey" type="K"/>
                        <param name="toKey" type="K"/>
                    </params>
                </method>
                <method name="headMap" type="SortedMap<K,V>" line="1502">
                    <params>
                        <param name="toKey" type="K"/>
                    </params>
                </method>
                <method name="tailMap" type="SortedMap<K,V>" line="1505">
                    <params>
                        <param name="fromKey" type="K"/>
                    </params>
                </method>
                <method name="comparator" type="Comparator<? super K>" line="1508"/>
            </class>
            <declaration name="RED" type="boolean" line="1512"/>
            <declaration name="BLACK" type="boolean" line="1513"/>
            <class name="Entry" line="1514">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <implements interface="Map.Entry">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </implements>
                <javadoc line="1514">
                    Node in the Tree.  Doubles as a means to pass key-value pairs back to
                      user (see Map.Entry).                    
                </javadoc>
                <declaration name="key" type="K" line="1519"/>
                <declaration name="value" type="V" line="1520"/>
                <declaration name="left" type="Entry&lt;K,V&gt;" line="1521"/>
                <declaration name="right" type="Entry&lt;K,V&gt;" line="1522"/>
                <declaration name="parent" type="Entry&lt;K,V&gt;" line="1523"/>
                <declaration name="color" type="boolean" line="1524"/>
                <javadoc line="1525">
                    Make a new cell with given key, value, and parent, and with{@code null} child links, and BLACK color.                    
                </javadoc>
                <method name="Entry" type="constructor" line="1528">
                    <params>
                        <param name="key" type="K"/>
                        <param name="value" type="V"/>
                        <param name="parent" type="Entry<K,V>"/>
                    </params>
                </method>
                <javadoc line="1533">
                    Returns the key.                    
                    <return>
                        the key                        
                    </return>
                </javadoc>
                <method name="getKey" type="K" line="1537"/>
                <javadoc line="1540">
                    Returns the value associated with the key.                    
                    <return>
                        the value associated with the key                        
                    </return>
                </javadoc>
                <method name="getValue" type="V" line="1544"/>
                <javadoc line="1547">
                    Replaces the value currently associated with the key with the given
                      value.                    
                    <return>
                        the value associated with the key before this method was
                          called                        
                    </return>
                </javadoc>
                <method name="setValue" type="V" line="1553">
                    <params>
                        <param name="value" type="V"/>
                    </params>
                    <declaration name="oldValue" type="V" line="1554"/>
                </method>
                <method name="equals" type="boolean" line="1558">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry&lt;?,?&gt;" line="1560"/>
                </method>
                <method name="hashCode" type="int" line="1563">
                    <declaration name="keyHash" type="int" line="1564"/>
                    <declaration name="valueHash" type="int" line="1565"/>
                </method>
                <method name="toString" type="String" line="1568"/>
            </class>
            <javadoc line="1572">
                Returns the first Entry in the TreeMap (according to the TreeMap&apos;s
                  key-sort function).  Returns null if the TreeMap is empty.                
            </javadoc>
            <method name="getFirstEntry" type="Entry<K,V>" line="1576">
                <declaration name="p" type="Entry&lt;K,V&gt;" line="1577"/>
            </method>
            <javadoc line="1581">
                Returns the last Entry in the TreeMap (according to the TreeMap&apos;s
                  key-sort function).  Returns null if the TreeMap is empty.                
            </javadoc>
            <method name="getLastEntry" type="Entry<K,V>" line="1585">
                <declaration name="p" type="Entry&lt;K,V&gt;" line="1586"/>
            </method>
            <javadoc line="1590">
                Returns the successor of the specified Entry, or null if no such.                
            </javadoc>
            <method name="successor" type="TreeMap.Entry<K,V>" line="1593">
                <params>
                    <param name="t" type="Entry<K,V>"/>
                </params>
                <scope line="1595">
                    <declaration name="p" type="Entry&lt;K,V&gt;" line="1596"/>
                </scope>
                <scope line="1600">
                    <declaration name="p" type="Entry&lt;K,V&gt;" line="1601"/>
                    <declaration name="ch" type="Entry&lt;K,V&gt;" line="1602"/>
                    <scope line="1603"/>
                </scope>
            </method>
            <javadoc line="1610">
                Returns the predecessor of the specified Entry, or null if no such.                
            </javadoc>
            <method name="predecessor" type="Entry<K,V>" line="1613">
                <params>
                    <param name="t" type="Entry<K,V>"/>
                </params>
                <scope line="1615">
                    <declaration name="p" type="Entry&lt;K,V&gt;" line="1616"/>
                </scope>
                <scope line="1620">
                    <declaration name="p" type="Entry&lt;K,V&gt;" line="1621"/>
                    <declaration name="ch" type="Entry&lt;K,V&gt;" line="1622"/>
                    <scope line="1623"/>
                </scope>
            </method>
            <javadoc line="1630">
                Balancing operations.
                  Implementations of rebalancings during insertion and deletion are
                  slightly different than the CLR version.  Rather than using dummy
                  nilnodes, we use a set of accessors that deal properly with null.  They
                  are used to avoid messiness surrounding nullness checks in the main
                  algorithms.                
            </javadoc>
            <method name="colorOf" type="boolean" line="1638">
                <params>
                    <param name="p" type="Entry<K,V>"/>
                </params>
            </method>
            <method name="parentOf" type="Entry<K,V>" line="1641">
                <params>
                    <param name="p" type="Entry<K,V>"/>
                </params>
            </method>
            <method name="setColor" type="void" line="1644">
                <params>
                    <param name="p" type="Entry<K,V>"/>
                    <param name="c" type="boolean"/>
                </params>
            </method>
            <method name="leftOf" type="Entry<K,V>" line="1647">
                <params>
                    <param name="p" type="Entry<K,V>"/>
                </params>
            </method>
            <method name="rightOf" type="Entry<K,V>" line="1650">
                <params>
                    <param name="p" type="Entry<K,V>"/>
                </params>
            </method>
            <javadoc line="1653">
                From CLR                
            </javadoc>
            <method name="rotateLeft" type="void" line="1656">
                <params>
                    <param name="p" type="Entry<K,V>"/>
                </params>
                <scope line="1657">
                    <declaration name="r" type="Entry&lt;K,V&gt;" line="1658"/>
                </scope>
            </method>
            <javadoc line="1669">
                From CLR                
            </javadoc>
            <method name="rotateRight" type="void" line="1672">
                <params>
                    <param name="p" type="Entry<K,V>"/>
                </params>
                <scope line="1673">
                    <declaration name="l" type="Entry&lt;K,V&gt;" line="1674"/>
                </scope>
            </method>
            <javadoc line="1685">
                From CLR                
            </javadoc>
            <method name="fixAfterInsertion" type="void" line="1688">
                <params>
                    <param name="x" type="Entry<K,V>"/>
                </params>
                <scope line="1690">
                    <scope line="1691">
                        <declaration name="y" type="Entry&lt;K,V&gt;" line="1692"/>
                        <scope line="1693"/>
                        <scope line="1699">
                            <scope line="1700"/>
                        </scope>
                    </scope>
                    <scope line="1709">
                        <declaration name="y" type="Entry&lt;K,V&gt;" line="1710"/>
                        <scope line="1711"/>
                        <scope line="1717">
                            <scope line="1718"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1730">
                Delete node p, and then rebalance the tree.                
            </javadoc>
            <method name="deleteEntry" type="void" line="1733">
                <params>
                    <param name="p" type="Entry<K,V>"/>
                </params>
                <scope line="1736">
                    <declaration name="s" type="Entry&lt;K,V&gt;" line="1737"/>
                </scope>
                <declaration name="replacement" type="Entry&lt;K,V&gt;" line="1742"/>
                <scope line="1743"/>
                <scope line="1751"/>
                <scope line="1754">
                    <scope line="1756"/>
                </scope>
            </method>
            <javadoc line="1763">
                From CLR                
            </javadoc>
            <method name="fixAfterDeletion" type="void" line="1766">
                <params>
                    <param name="x" type="Entry<K,V>"/>
                </params>
                <scope line="1767">
                    <scope line="1768">
                        <declaration name="sib" type="Entry&lt;K,V&gt;" line="1769"/>
                        <scope line="1770"/>
                        <scope line="1776"/>
                        <scope line="1780">
                            <scope line="1781"/>
                        </scope>
                    </scope>
                    <scope line="1794">
                        <declaration name="sib" type="Entry&lt;K,V&gt;" line="1795"/>
                        <scope line="1796"/>
                        <scope line="1802"/>
                        <scope line="1806">
                            <scope line="1807"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="1823"/>
            <javadoc line="1824">
                Save the state of the {@code TreeMap} instance to a stream (i.e.,
                  serialize it).                
                <serialData>
                    The <em>size</em> of the TreeMap (the number of key-value
                      mappings) is emitted (int), followed by the key (Object)
                      and value (Object) for each key-value mapping represented
                      by the TreeMap. The key-value mappings are emitted in
                      key-order (as determined by the TreeMap's Comparator,
                      or by the keys' natural ordering if the TreeMap has no
                      Comparator).                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="1835">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <scope line="1838">
                    <declaration name="e" type="Map.Entry&lt;K,V&gt;" line="1839"/>
                </scope>
            </method>
            <javadoc line="1844">
                Reconstitute the {@code TreeMap} instance from a stream (i.e.,
                  deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="1848">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <declaration name="size" type="int" line="1850"/>
            </method>
            <javadoc line="1853">
                Intended to be called only from TreeSet.readObject                
            </javadoc>
            <method name="readTreeSet" type="void" line="1856">
                <params>
                    <param name="size" type="int"/>
                    <param name="s" type="java.io.ObjectInputStream"/>
                    <param name="defaultVal" type="V"/>
                </params>
            </method>
            <javadoc line="1859">
                Intended to be called only from TreeSet.addAll                
            </javadoc>
            <method name="addAllForTreeSet" type="void" line="1862">
                <params>
                    <param name="set" type="SortedSet<? extends K>"/>
                    <param name="defaultVal" type="V"/>
                </params>
                <scope line="1863"/>
                <scope line="1866"/>
                <scope line="1868"/>
            </method>
            <javadoc line="1871">
                Linear time tree building algorithm from sorted data.  Can accept keys
                  and/or values from iterator or stream. This leads to too many
                  parameters, but seems better than alternatives.  The four formats
                  that this method accepts are:
                  1) An iterator of Map.Entries.  (it != null, defaultVal == null).
                  2) An iterator of keys.         (it != null, defaultVal != null).
                  3) A stream of alternating serialized keys and values.
                  (it == null, defaultVal == null).
                  4) A stream of serialized keys. (it == null, defaultVal != null).
                  It is assumed that the comparator of the TreeMap is already set prior
                  to calling this method.                
                <param>
                    size the number of keys (or key-value pairs) to be read from
                      the iterator or stream                    
                </param>
                <param>
                    it If non-null, new entries are created from entries
                      or keys read from this iterator.                    
                </param>
                <param>
                    str If non-null, new entries are created from keys and
                      possibly values read from this stream in serialized form.
                      Exactly one of it and str should be non-null.                    
                </param>
                <param>
                    defaultVal if non-null, this default value is used for
                      each value in the map.  If null, each value is read from
                      iterator or stream, as described above.                    
                </param>
                <throws>
                    IOException propagated from stream reads. This cannot
                      occur if str is null.                    
                </throws>
                <throws>
                    ClassNotFoundException propagated from readObject.
                      This cannot occur if str is null.                    
                </throws>
            </javadoc>
            <method name="buildFromSorted" type="void" line="1898">
                <params>
                    <param name="size" type="int"/>
                    <param name="it" type="Iterator"/>
                    <param name="str" type="java.io.ObjectInputStream"/>
                    <param name="defaultVal" type="V"/>
                </params>
            </method>
            <javadoc line="1902">
                Recursive &quot;helper method&quot; that does the real work of the
                  previous method.  Identically named parameters have
                  identical definitions.  Additional parameters are documented below.
                  It is assumed that the comparator and size fields of the TreeMap are
                  already set prior to calling this method.  (It ignores both fields.)                
                <param>
                    level the current level of tree. Initial call should be 0.                    
                </param>
                <param>
                    lo the first element index of this subtree. Initial should be 0.                    
                </param>
                <param>
                    hi the last element index of this subtree.  Initial should be
                      size-1.                    
                </param>
                <param>
                    redLevel the level at which nodes should be red.
                      Must be equal to computeRedLevel for tree of this size.                    
                </param>
            </javadoc>
            <method name="buildFromSorted" type="Entry<K,V>" line="1915">
                <params>
                    <param name="level" type="int"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                    <param name="redLevel" type="int"/>
                    <param name="it" type="Iterator"/>
                    <param name="str" type="java.io.ObjectInputStream"/>
                    <param name="defaultVal" type="V"/>
                </params>
                <declaration name="mid" type="int" line="1917"/>
                <declaration name="left" type="Entry&lt;K,V&gt;" line="1918"/>
                <declaration name="key" type="K" line="1920"/>
                <declaration name="value" type="V" line="1921"/>
                <scope line="1922">
                    <scope line="1923">
                        <declaration name="entry" type="Map.Entry&lt;K,V&gt;" line="1924"/>
                    </scope>
                    <scope line="1928"/>
                </scope>
                <scope line="1933"/>
                <declaration name="middle" type="Entry&lt;K,V&gt;" line="1937"/>
                <scope line="1939"/>
                <scope line="1943">
                    <declaration name="right" type="Entry&lt;K,V&gt;" line="1944"/>
                </scope>
            </method>
            <javadoc line="1950">
                Find the level down to which to assign all nodes BLACK.  This is the
                  last `full&apos; level of the complete binary tree produced by
                  buildTree. The remaining nodes are colored RED. (This makes a `nice&apos;
                  set of color assignments wrt future insertions.) This level number is
                  computed by finding the number of splits needed to reach the zeroeth
                  node.  (The answer is ~lg(N), but in any case must be computed by same
                  quick O(lg(N)) loop.)                
            </javadoc>
            <method name="computeRedLevel" type="int" line="1959">
                <params>
                    <param name="sz" type="int"/>
                </params>
                <declaration name="level" type="int" line="1960"/>
            </method>
        </class>
    </source>