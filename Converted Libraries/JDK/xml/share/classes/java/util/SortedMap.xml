<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="SortedMap">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <implements interface="Map">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="2">
                A {@link Map} that further provides a &lt;em&gt;total ordering&lt;/em&gt; on its keys.
                  The map is ordered according to the {@linkplain Comparable natural
                  ordering} of its keys, or by a {@link Comparator} typically
                  provided at sorted map creation time.  This order is reflected when
                  iterating over the sorted map&apos;s collection views (returned by the{@code entrySet}, {@code keySet} and {@code values} methods).
                  Several additional operations are provided to take advantage of the
                  ordering.  (This interface is the map analogue of {@link SortedSet}.)
                  &lt;p&gt;All keys inserted into a sorted map must implement the {@code Comparable}interface (or be accepted by the specified comparator).  Furthermore, all
                  such keys must be &lt;em&gt;mutually comparable&lt;/em&gt;: {@code k1.compareTo(k2)} (or{@code comparator.compare(k1, k2)}) must not throw a{@code ClassCastException} for any keys {@code k1} and {@code k2} in
                  the sorted map.  Attempts to violate this restriction will cause the
                  offending method or constructor invocation to throw a{@code ClassCastException}.
                  &lt;p&gt;Note that the ordering maintained by a sorted map (whether or not an
                  explicit comparator is provided) must be &lt;em&gt;consistent with equals&lt;/em&gt; if
                  the sorted map is to correctly implement the {@code Map} interface.  (See
                  the {@code Comparable} interface or {@code Comparator} interface for a
                  precise definition of &lt;em&gt;consistent with equals&lt;/em&gt;.)  This is so because
                  the {@code Map} interface is defined in terms of the {@code equals}operation, but a sorted map performs all key comparisons using its{@code compareTo} (or {@code compare}) method, so two keys that are
                  deemed equal by this method are, from the standpoint of the sorted map,
                  equal.  The behavior of a tree map &lt;em&gt;is&lt;/em&gt; well-defined even if its
                  ordering is inconsistent with equals; it just fails to obey the general
                  contract of the {@code Map} interface.
                  &lt;p&gt;All general-purpose sorted map implementation classes should provide four
                  &quot;standard&quot; constructors. It is not possible to enforce this recommendation
                  though as required constructors cannot be specified by interfaces. The
                  expected &quot;standard&quot; constructors for all sorted map implementations are:
                  &lt;ol&gt;
                  &lt;li&gt;A void (no arguments) constructor, which creates an empty sorted map
                  sorted according to the natural ordering of its keys.&lt;/li&gt;
                  &lt;li&gt;A constructor with a single argument of type {@code Comparator}, which
                  creates an empty sorted map sorted according to the specified comparator.&lt;/li&gt;
                  &lt;li&gt;A constructor with a single argument of type {@code Map}, which creates
                  a new map with the same key-value mappings as its argument, sorted
                  according to the keys&apos; natural ordering.&lt;/li&gt;
                  &lt;li&gt;A constructor with a single argument of type {@code SortedMap}, which
                  creates a new sorted map with the same key-value mappings and the same
                  ordering as the input sorted map.&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: several methods return submaps with restricted key
                  ranges. Such ranges are &lt;em&gt;half-open&lt;/em&gt;, that is, they include their low
                  endpoint but not their high endpoint (where applicable).  If you need a
                  &lt;em&gt;closed range&lt;/em&gt; (which includes both endpoints), and the key type
                  allows for calculation of the successor of a given key, merely request
                  the subrange from {@code lowEndpoint} to{@code successor(highEndpoint)}.  For example, suppose that {@code m}is a map whose keys are strings.  The following idiom obtains a view
                  containing all of the key-value mappings in {@code m} whose keys are
                  between {@code low} and {@code high}, inclusive:&lt;pre&gt;
                  SortedMap&amp;lt;String, V&amp;gt; sub = m.subMap(low, high+&quot;\0&quot;);&lt;/pre&gt;
                  A similar technique can be used to generate an &lt;em&gt;open range&lt;/em&gt;
                  (which contains neither endpoint).  The following idiom obtains a
                  view containing all of the key-value mappings in {@code m} whose keys
                  are between {@code low} and {@code high}, exclusive:&lt;pre&gt;
                  SortedMap&amp;lt;String, V&amp;gt; sub = m.subMap(low+&quot;\0&quot;, high);&lt;/pre&gt;
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <K>
                      the type of keys maintained by this map                    
                </param>
                <param>
                    <V>
                      the type of mapped values                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Map                    
                </see>
                <see>
                    TreeMap                    
                </see>
                <see>
                    SortedSet                    
                </see>
                <see>
                    Comparator                    
                </see>
                <see>
                    Comparable                    
                </see>
                <see>
                    Collection                    
                </see>
                <see>
                    ClassCastException                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="comparator" type="Comparator<? super K>" line="72"/>
            <javadoc line="72">
                Returns the comparator used to order the keys in this map, or{@code null} if this map uses the {@linkplain Comparablenatural ordering} of its keys.                
                <return>
                    the comparator used to order the keys in this map,
                      or {@code null} if this map uses the natural ordering
                      of its keys                    
                </return>
            </javadoc>
            <method name="subMap" type="SortedMap<K,V>" line="79"/>
            <javadoc line="79">
                Returns a view of the portion of this map whose keys range from{@code fromKey}, inclusive, to {@code toKey}, exclusive.  (If{@code fromKey} and {@code toKey} are equal, the returned map
                  is empty.)  The returned map is backed by this map, so changes
                  in the returned map are reflected in this map, and vice-versa.
                  The returned map supports all optional map operations that this
                  map supports.
                  &lt;p&gt;The returned map will throw an {@code IllegalArgumentException}on an attempt to insert a key outside its range.                
                <param>
                    fromKey low endpoint (inclusive) of the keys in the returned map                    
                </param>
                <param>
                    toKey high endpoint (exclusive) of the keys in the returned map                    
                </param>
                <return>
                    a view of the portion of this map whose keys range from{@code fromKey}, inclusive, to {@code toKey}, exclusive                    
                </return>
                <throws>
                    ClassCastException if {@code fromKey} and {@code toKey}cannot be compared to one another using this map's comparator
                      (or, if the map has no comparator, using natural ordering).
                      Implementations may, but are not required to, throw this
                      exception if {@code fromKey} or {@code toKey}cannot be compared to keys currently in the map.                    
                </throws>
                <throws>
                    NullPointerException if {@code fromKey} or {@code toKey}is null and this map does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code fromKey} is greater than{@code toKey}; or if this map itself has a restricted
                      range, and {@code fromKey} or {@code toKey} lies
                      outside the bounds of the range                    
                </throws>
            </javadoc>
            <method name="headMap" type="SortedMap<K,V>" line="99"/>
            <javadoc line="99">
                Returns a view of the portion of this map whose keys are
                  strictly less than {@code toKey}.  The returned map is backed
                  by this map, so changes in the returned map are reflected in
                  this map, and vice-versa.  The returned map supports all
                  optional map operations that this map supports.
                  &lt;p&gt;The returned map will throw an {@code IllegalArgumentException}on an attempt to insert a key outside its range.                
                <param>
                    toKey high endpoint (exclusive) of the keys in the returned map                    
                </param>
                <return>
                    a view of the portion of this map whose keys are strictly
                      less than {@code toKey}                    
                </return>
                <throws>
                    ClassCastException if {@code toKey} is not compatible
                      with this map's comparator (or, if the map has no comparator,
                      if {@code toKey} does not implement {@link Comparable}).
                      Implementations may, but are not required to, throw this
                      exception if {@code toKey} cannot be compared to keys
                      currently in the map.                    
                </throws>
                <throws>
                    NullPointerException if {@code toKey} is null and
                      this map does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException if this map itself has a
                      restricted range, and {@code toKey} lies outside the
                      bounds of the range                    
                </throws>
            </javadoc>
            <method name="tailMap" type="SortedMap<K,V>" line="122"/>
            <javadoc line="122">
                Returns a view of the portion of this map whose keys are
                  greater than or equal to {@code fromKey}.  The returned map is
                  backed by this map, so changes in the returned map are
                  reflected in this map, and vice-versa.  The returned map
                  supports all optional map operations that this map supports.
                  &lt;p&gt;The returned map will throw an {@code IllegalArgumentException}on an attempt to insert a key outside its range.                
                <param>
                    fromKey low endpoint (inclusive) of the keys in the returned map                    
                </param>
                <return>
                    a view of the portion of this map whose keys are greater
                      than or equal to {@code fromKey}                    
                </return>
                <throws>
                    ClassCastException if {@code fromKey} is not compatible
                      with this map's comparator (or, if the map has no comparator,
                      if {@code fromKey} does not implement {@link Comparable}).
                      Implementations may, but are not required to, throw this
                      exception if {@code fromKey} cannot be compared to keys
                      currently in the map.                    
                </throws>
                <throws>
                    NullPointerException if {@code fromKey} is null and
                      this map does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException if this map itself has a
                      restricted range, and {@code fromKey} lies outside the
                      bounds of the range                    
                </throws>
            </javadoc>
            <method name="firstKey" type="K" line="145"/>
            <javadoc line="145">
                Returns the first (lowest) key currently in this map.                
                <return>
                    the first (lowest) key currently in this map                    
                </return>
                <throws>
                    NoSuchElementException if this map is empty                    
                </throws>
            </javadoc>
            <method name="lastKey" type="K" line="151"/>
            <javadoc line="151">
                Returns the last (highest) key currently in this map.                
                <return>
                    the last (highest) key currently in this map                    
                </return>
                <throws>
                    NoSuchElementException if this map is empty                    
                </throws>
            </javadoc>
            <method name="keySet" type="Set<K>" line="157"/>
            <javadoc line="157">
                Returns a {@link Set} view of the keys contained in this map.
                  The set&apos;s iterator returns the keys in ascending order.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own {@code remove} operation), the results of
                  the iteration are undefined.  The set supports element removal,
                  which removes the corresponding mapping from the map, via the{@code Iterator.remove}, {@code Set.remove},{@code removeAll}, {@code retainAll}, and {@code clear}operations.  It does not support the {@code add} or {@code addAll}operations.                
                <return>
                    a set view of the keys contained in this map, sorted in
                      ascending order                    
                </return>
            </javadoc>
            <method name="values" type="Collection<V>" line="170"/>
            <javadoc line="170">
                Returns a {@link Collection} view of the values contained in this map.
                  The collection&apos;s iterator returns the values in ascending order
                  of the corresponding keys.
                  The collection is backed by the map, so changes to the map are
                  reflected in the collection, and vice-versa.  If the map is
                  modified while an iteration over the collection is in progress
                  (except through the iterator&apos;s own {@code remove} operation),
                  the results of the iteration are undefined.  The collection
                  supports element removal, which removes the corresponding
                  mapping from the map, via the {@code Iterator.remove},{@code Collection.remove}, {@code removeAll},{@code retainAll} and {@code clear} operations.  It does not
                  support the {@code add} or {@code addAll} operations.                
                <return>
                    a collection view of the values contained in this map,
                      sorted in ascending key order                    
                </return>
            </javadoc>
            <method name="entrySet" type="Set<Map.Entry<K,V>>" line="186"/>
            <javadoc line="186">
                Returns a {@link Set} view of the mappings contained in this map.
                  The set&apos;s iterator returns the entries in ascending key order.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own {@code remove} operation, or through the{@code setValue} operation on a map entry returned by the
                  iterator) the results of the iteration are undefined.  The set
                  supports element removal, which removes the corresponding
                  mapping from the map, via the {@code Iterator.remove},{@code Set.remove}, {@code removeAll}, {@code retainAll} and{@code clear} operations.  It does not support the{@code add} or {@code addAll} operations.                
                <return>
                    a set view of the mappings contained in this map,
                      sorted in ascending key order                    
                </return>
            </javadoc>
        </interface>
    </source>