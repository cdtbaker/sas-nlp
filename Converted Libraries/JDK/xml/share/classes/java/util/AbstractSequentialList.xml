<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="AbstractSequentialList" line="28">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractList">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="182">
                Bulk Operations                
            </comment>
            <comment line="229">
                Iterators                
            </comment>
            <javadoc line="28">
                This class provides a skeletal implementation of the &lt;tt&gt;List&lt;/tt&gt;
                  interface to minimize the effort required to implement this interface
                  backed by a &quot;sequential access&quot; data store (such as a linked list).  For
                  random access data (such as an array), &lt;tt&gt;AbstractList&lt;/tt&gt; should be used
                  in preference to this class.&lt;p&gt;
                  This class is the opposite of the &lt;tt&gt;AbstractList&lt;/tt&gt; class in the sense
                  that it implements the &quot;random access&quot; methods (&lt;tt&gt;get(int index)&lt;/tt&gt;,
                  &lt;tt&gt;set(int index, E element)&lt;/tt&gt;, &lt;tt&gt;add(int index, E element)&lt;/tt&gt; and
                  &lt;tt&gt;remove(int index)&lt;/tt&gt;) on top of the list&apos;s list iterator, instead of
                  the other way around.&lt;p&gt;
                  To implement a list the programmer needs only to extend this class and
                  provide implementations for the &lt;tt&gt;listIterator&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;
                  methods.  For an unmodifiable list, the programmer need only implement the
                  list iterator&apos;s &lt;tt&gt;hasNext&lt;/tt&gt;, &lt;tt&gt;next&lt;/tt&gt;, &lt;tt&gt;hasPrevious&lt;/tt&gt;,
                  &lt;tt&gt;previous&lt;/tt&gt; and &lt;tt&gt;index&lt;/tt&gt; methods.&lt;p&gt;
                  For a modifiable list the programmer should additionally implement the list
                  iterator&apos;s &lt;tt&gt;set&lt;/tt&gt; method.  For a variable-size list the programmer
                  should additionally implement the list iterator&apos;s &lt;tt&gt;remove&lt;/tt&gt; and
                  &lt;tt&gt;add&lt;/tt&gt; methods.&lt;p&gt;
                  The programmer should generally provide a void (no argument) and collection
                  constructor, as per the recommendation in the &lt;tt&gt;Collection&lt;/tt&gt; interface
                  specification.&lt;p&gt;
                  This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    List                    
                </see>
                <see>
                    AbstractList                    
                </see>
                <see>
                    AbstractCollection                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="70">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="AbstractSequentialList" type="constructor" line="74"/>
            <javadoc line="77">
                Returns the element at the specified position in this list.
                  &lt;p&gt;This implementation first gets a list iterator pointing to the
                  indexed element (with &lt;tt&gt;listIterator(index)&lt;/tt&gt;).  Then, it gets
                  the element using &lt;tt&gt;ListIterator.next&lt;/tt&gt; and returns it.                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="get" type="E" line="86">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="87"/>
                <scope line="89"/>
            </method>
            <javadoc line="94">
                Replaces the element at the specified position in this list with the
                  specified element (optional operation).
                  &lt;p&gt;This implementation first gets a list iterator pointing to the
                  indexed element (with &lt;tt&gt;listIterator(index)&lt;/tt&gt;).  Then, it gets
                  the current element using &lt;tt&gt;ListIterator.next&lt;/tt&gt; and replaces it
                  with &lt;tt&gt;ListIterator.set&lt;/tt&gt;.
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the list iterator does not
                  implement the &lt;tt&gt;set&lt;/tt&gt; operation.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
                <throws>
                    IndexOutOfBoundsException     {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="set" type="E" line="113">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <scope line="114">
                    <declaration name="e" type="ListIterator&lt;E&gt;" line="115"/>
                    <declaration name="oldVal" type="E" line="116"/>
                </scope>
                <scope line="119"/>
            </method>
            <javadoc line="124">
                Inserts the specified element at the specified position in this list
                  (optional operation).  Shifts the element currently at that position
                  (if any) and any subsequent elements to the right (adds one to their
                  indices).
                  &lt;p&gt;This implementation first gets a list iterator pointing to the
                  indexed element (with &lt;tt&gt;listIterator(index)&lt;/tt&gt;).  Then, it
                  inserts the specified element with &lt;tt&gt;ListIterator.add&lt;/tt&gt;.
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the list iterator does not
                  implement the &lt;tt&gt;add&lt;/tt&gt; operation.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
                <throws>
                    IndexOutOfBoundsException     {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="144">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <scope line="145"/>
                <scope line="147"/>
            </method>
            <javadoc line="152">
                Removes the element at the specified position in this list (optional
                  operation).  Shifts any subsequent elements to the left (subtracts one
                  from their indices).  Returns the element that was removed from the
                  list.
                  &lt;p&gt;This implementation first gets a list iterator pointing to the
                  indexed element (with &lt;tt&gt;listIterator(index)&lt;/tt&gt;).  Then, it removes
                  the element with &lt;tt&gt;ListIterator.remove&lt;/tt&gt;.
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the list iterator does not
                  implement the &lt;tt&gt;remove&lt;/tt&gt; operation.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    IndexOutOfBoundsException     {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="169">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="170">
                    <declaration name="e" type="ListIterator&lt;E&gt;" line="171"/>
                    <declaration name="outCast" type="E" line="172"/>
                </scope>
                <scope line="175"/>
            </method>
            <javadoc line="183">
                Inserts all of the elements in the specified collection into this
                  list at the specified position (optional operation).  Shifts the
                  element currently at that position (if any) and any subsequent
                  elements to the right (increases their indices).  The new elements
                  will appear in this list in the order that they are returned by the
                  specified collection&apos;s iterator.  The behavior of this operation is
                  undefined if the specified collection is modified while the
                  operation is in progress.  (Note that this will occur if the specified
                  collection is this list, and it&apos;s nonempty.)
                  &lt;p&gt;This implementation gets an iterator over the specified collection and
                  a list iterator over this list pointing to the indexed element (with
                  &lt;tt&gt;listIterator(index)&lt;/tt&gt;).  Then, it iterates over the specified
                  collection, inserting the elements obtained from the iterator into this
                  list, one at a time, using &lt;tt&gt;ListIterator.add&lt;/tt&gt; followed by
                  &lt;tt&gt;ListIterator.next&lt;/tt&gt; (to skip over the added element).
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the list iterator returned by
                  the &lt;tt&gt;listIterator&lt;/tt&gt; method does not implement the &lt;tt&gt;add&lt;/tt&gt;
                  operation.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
                <throws>
                    IndexOutOfBoundsException     {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="212">
                <params>
                    <param name="index" type="int"/>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <scope line="213">
                    <declaration name="modified" type="boolean" line="214"/>
                    <declaration name="e1" type="ListIterator&lt;E&gt;" line="215"/>
                    <declaration name="e2" type="Iterator&lt;? extends E&gt;" line="216"/>
                    <scope line="217"/>
                </scope>
                <scope line="222"/>
            </method>
            <javadoc line="230">
                Returns an iterator over the elements in this list (in proper
                  sequence).&lt;p&gt;
                  This implementation merely returns a list iterator over the list.                
                <return>
                    an iterator over the elements in this list (in proper sequence)                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="238"/>
            <method name="listIterator" type="ListIterator<E>" line="242"/>
            <javadoc line="242">
                Returns a list iterator over the elements in this list (in proper
                  sequence).                
                <param>
                    index index of first element to be returned from the list
                      iterator (by a call to the <code>next</code> method)                    
                </param>
                <return>
                    a list iterator over the elements in this list (in proper
                      sequence)                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
        </class>
    </source>