<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.util.Map.Entry"/>
        <class name="AbstractMap" line="3">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <implements interface="Map">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="3">
                This class provides a skeletal implementation of the &lt;tt&gt;Map&lt;/tt&gt;
                  interface, to minimize the effort required to implement this interface.
                  &lt;p&gt;To implement an unmodifiable map, the programmer needs only to extend this
                  class and provide an implementation for the &lt;tt&gt;entrySet&lt;/tt&gt; method, which
                  returns a set-view of the map&apos;s mappings.  Typically, the returned set
                  will, in turn, be implemented atop &lt;tt&gt;AbstractSet&lt;/tt&gt;.  This set should
                  not support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;remove&lt;/tt&gt; methods, and its iterator
                  should not support the &lt;tt&gt;remove&lt;/tt&gt; method.
                  &lt;p&gt;To implement a modifiable map, the programmer must additionally override
                  this class&apos;s &lt;tt&gt;put&lt;/tt&gt; method (which otherwise throws an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;), and the iterator returned by
                  &lt;tt&gt;entrySet().iterator()&lt;/tt&gt; must additionally implement its
                  &lt;tt&gt;remove&lt;/tt&gt; method.
                  &lt;p&gt;The programmer should generally provide a void (no argument) and map
                  constructor, as per the recommendation in the &lt;tt&gt;Map&lt;/tt&gt; interface
                  specification.
                  &lt;p&gt;The documentation for each non-abstract method in this class describes its
                  implementation in detail.  Each of these methods may be overridden if the
                  map being implemented admits a more efficient implementation.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    &lt;K&gt;
                      the type of keys maintained by this map                    
                </param>
                <param>
                    &lt;V&gt;
                      the type of mapped values                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Map                    
                </see>
                <see>
                    Collection                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="37">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="AbstractMap" type="constructor" line="41"/>
            <javadoc line="43">
                {@inheritDoc}&lt;p&gt;This implementation returns &lt;tt&gt;entrySet().size()&lt;/tt&gt;.                
            </javadoc>
            <method name="size" type="int" line="46"/>
            <javadoc line="49">
                {@inheritDoc}&lt;p&gt;This implementation returns &lt;tt&gt;size() == 0&lt;/tt&gt;.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="52"/>
            <javadoc line="55">
                {@inheritDoc}&lt;p&gt;This implementation iterates over &lt;tt&gt;entrySet()&lt;/tt&gt; searching
                  for an entry with the specified value.  If such an entry is found,
                  &lt;tt&gt;true&lt;/tt&gt; is returned.  If the iteration terminates without
                  finding such an entry, &lt;tt&gt;false&lt;/tt&gt; is returned.  Note that this
                  implementation requires linear time in the size of the map.                
                <throws>
                    ClassCastException   {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="containsValue" type="boolean" line="64">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="i" type="Iterator&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="65"/>
                <scope line="66">
                    <scope line="67">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="68"/>
                    </scope>
                </scope>
                <scope line="72">
                    <scope line="73">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="74"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="80">
                {@inheritDoc}&lt;p&gt;This implementation iterates over &lt;tt&gt;entrySet()&lt;/tt&gt; searching
                  for an entry with the specified key.  If such an entry is found,
                  &lt;tt&gt;true&lt;/tt&gt; is returned.  If the iteration terminates without
                  finding such an entry, &lt;tt&gt;false&lt;/tt&gt; is returned.  Note that this
                  implementation requires linear time in the size of the map; many
                  implementations will override this method.                
                <throws>
                    ClassCastException   {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="containsKey" type="boolean" line="90">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="i" type="Iterator&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="91"/>
                <scope line="92">
                    <scope line="93">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="94"/>
                    </scope>
                </scope>
                <scope line="98">
                    <scope line="99">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="100"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="106">
                {@inheritDoc}&lt;p&gt;This implementation iterates over &lt;tt&gt;entrySet()&lt;/tt&gt; searching
                  for an entry with the specified key.  If such an entry is found,
                  the entry&apos;s value is returned.  If the iteration terminates without
                  finding such an entry, &lt;tt&gt;null&lt;/tt&gt; is returned.  Note that this
                  implementation requires linear time in the size of the map; many
                  implementations will override this method.                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="get" type="V" line="116">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="i" type="Iterator&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="117"/>
                <scope line="118">
                    <scope line="119">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="120"/>
                    </scope>
                </scope>
                <scope line="124">
                    <scope line="125">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="126"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                {@inheritDoc}&lt;p&gt;This implementation always throws an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="put" type="V" line="140">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
            </method>
            <javadoc line="143">
                {@inheritDoc}&lt;p&gt;This implementation iterates over &lt;tt&gt;entrySet()&lt;/tt&gt; searching for an
                  entry with the specified key.  If such an entry is found, its value is
                  obtained with its &lt;tt&gt;getValue&lt;/tt&gt; operation, the entry is removed
                  from the collection (and the backing map) with the iterator&apos;s
                  &lt;tt&gt;remove&lt;/tt&gt; operation, and the saved value is returned.  If the
                  iteration terminates without finding such an entry, &lt;tt&gt;null&lt;/tt&gt; is
                  returned.  Note that this implementation requires linear time in the
                  size of the map; many implementations will override this method.
                  &lt;p&gt;Note that this implementation throws an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the &lt;tt&gt;entrySet&lt;/tt&gt;
                  iterator does not support the &lt;tt&gt;remove&lt;/tt&gt; method and this map
                  contains a mapping for the specified key.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="remove" type="V" line="160">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="i" type="Iterator&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="161"/>
                <declaration name="correctEntry" type="Entry&amp;lt;K,V&amp;gt;" line="162"/>
                <scope line="163">
                    <scope line="164">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="165"/>
                    </scope>
                </scope>
                <scope line="169">
                    <scope line="170">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="171"/>
                    </scope>
                </scope>
                <declaration name="oldValue" type="V" line="175"/>
                <scope line="176"/>
            </method>
            <javadoc line="182">
                {@inheritDoc}&lt;p&gt;This implementation iterates over the specified map&apos;s
                  &lt;tt&gt;entrySet()&lt;/tt&gt; collection, and calls this map&apos;s &lt;tt&gt;put&lt;/tt&gt;
                  operation once for each entry returned by the iteration.
                  &lt;p&gt;Note that this implementation throws an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if this map does not support
                  the &lt;tt&gt;put&lt;/tt&gt; operation and the specified map is nonempty.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="194">
                <params>
                    <param name="m" type="Map&lt;? extends K,? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="197">
                {@inheritDoc}&lt;p&gt;This implementation calls &lt;tt&gt;entrySet().clear()&lt;/tt&gt;.
                  &lt;p&gt;Note that this implementation throws an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the &lt;tt&gt;entrySet&lt;/tt&gt;
                  does not support the &lt;tt&gt;clear&lt;/tt&gt; operation.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="clear" type="void" line="204"/>
            <declaration name="keySet" type="Set&amp;lt;K&amp;gt;" line="207"/>
            <javadoc line="207">
                Each of these fields are initialized to contain an instance of the
                  appropriate view the first time this view is requested.  The views are
                  stateless, so there&apos;s no reason to create more than one of each.                
            </javadoc>
            <declaration name="values" type="Collection&amp;lt;V&amp;gt;" line="213"/>
            <javadoc line="214">
                {@inheritDoc}&lt;p&gt;This implementation returns a set that subclasses {@link AbstractSet}.
                  The subclass&apos;s iterator method returns a &quot;wrapper object&quot; over this
                  map&apos;s &lt;tt&gt;entrySet()&lt;/tt&gt; iterator.  The &lt;tt&gt;size&lt;/tt&gt; method
                  delegates to this map&apos;s &lt;tt&gt;size&lt;/tt&gt; method and the
                  &lt;tt&gt;contains&lt;/tt&gt; method delegates to this map&apos;s
                  &lt;tt&gt;containsKey&lt;/tt&gt; method.
                  &lt;p&gt;The set is created the first time this method is called,
                  and returned in response to all subsequent calls.  No synchronization
                  is performed, so there is a slight chance that multiple calls to this
                  method will not all return the same set.                
            </javadoc>
            <method name="keySet" type="Set&lt;K&gt;" line="226">
                <scope line="227">
                    <anonymous_class line="228">
                        <method name="iterator" type="Iterator&lt;K&gt;" line="229">
                            <anonymous_class line="230">
                                <declaration name="i" type="Iterator&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="231"/>
                                <method name="hasNext" type="boolean" line="232"/>
                                <method name="next" type="K" line="235"/>
                                <method name="remove" type="void" line="238"/>
                            </anonymous_class>
                        </method>
                        <method name="size" type="int" line="244"/>
                        <method name="isEmpty" type="boolean" line="247"/>
                        <method name="clear" type="void" line="250"/>
                        <method name="contains" type="boolean" line="253">
                            <params>
                                <param name="k" type="Object"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="261">
                {@inheritDoc}&lt;p&gt;This implementation returns a collection that subclasses {@link AbstractCollection}.  The subclass&apos;s iterator method returns a
                  &quot;wrapper object&quot; over this map&apos;s &lt;tt&gt;entrySet()&lt;/tt&gt; iterator.
                  The &lt;tt&gt;size&lt;/tt&gt; method delegates to this map&apos;s &lt;tt&gt;size&lt;/tt&gt;
                  method and the &lt;tt&gt;contains&lt;/tt&gt; method delegates to this map&apos;s
                  &lt;tt&gt;containsValue&lt;/tt&gt; method.
                  &lt;p&gt;The collection is created the first time this method is called, and
                  returned in response to all subsequent calls.  No synchronization is
                  performed, so there is a slight chance that multiple calls to this
                  method will not all return the same collection.                
            </javadoc>
            <method name="values" type="Collection&lt;V&gt;" line="272">
                <scope line="273">
                    <anonymous_class line="274">
                        <method name="iterator" type="Iterator&lt;V&gt;" line="275">
                            <anonymous_class line="276">
                                <declaration name="i" type="Iterator&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="277"/>
                                <method name="hasNext" type="boolean" line="278"/>
                                <method name="next" type="V" line="281"/>
                                <method name="remove" type="void" line="284"/>
                            </anonymous_class>
                        </method>
                        <method name="size" type="int" line="290"/>
                        <method name="isEmpty" type="boolean" line="293"/>
                        <method name="clear" type="void" line="296"/>
                        <method name="contains" type="boolean" line="299">
                            <params>
                                <param name="v" type="Object"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="entrySet" type="Set&lt;Entry&lt;K,V&gt;&gt;" line="307"/>
            <javadoc line="308">
                Compares the specified object with this map for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the given object is also a map and the two maps
                  represent the same mappings.  More formally, two maps &lt;tt&gt;m1&lt;/tt&gt; and
                  &lt;tt&gt;m2&lt;/tt&gt; represent the same mappings if
                  &lt;tt&gt;m1.entrySet().equals(m2.entrySet())&lt;/tt&gt;.  This ensures that the
                  &lt;tt&gt;equals&lt;/tt&gt; method works properly across different implementations
                  of the &lt;tt&gt;Map&lt;/tt&gt; interface.
                  &lt;p&gt;This implementation first checks if the specified object is this map;
                  if so it returns &lt;tt&gt;true&lt;/tt&gt;.  Then, it checks if the specified
                  object is a map whose size is identical to the size of this map; if
                  not, it returns &lt;tt&gt;false&lt;/tt&gt;.  If so, it iterates over this map&apos;s
                  &lt;tt&gt;entrySet&lt;/tt&gt; collection, and checks that the specified map
                  contains each mapping that this map contains.  If the specified map
                  fails to contain such a mapping, &lt;tt&gt;false&lt;/tt&gt; is returned.  If the
                  iteration completes, &lt;tt&gt;true&lt;/tt&gt; is returned.                
                <param>
                    o object to be compared for equality with this map                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this map                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="327">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="m" type="Map&amp;lt;K,V&amp;gt;" line="330"/>
                <scope line="332">
                    <declaration name="i" type="Iterator&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="333"/>
                    <scope line="334">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="335"/>
                        <declaration name="key" type="K" line="336"/>
                        <declaration name="value" type="V" line="337"/>
                        <scope line="338"/>
                        <scope line="341"/>
                    </scope>
                </scope>
                <scope line="346"/>
                <scope line="349"/>
            </method>
            <javadoc line="354">
                Returns the hash code value for this map.  The hash code of a map is
                  defined to be the sum of the hash codes of each entry in the map&apos;s
                  &lt;tt&gt;entrySet()&lt;/tt&gt; view.  This ensures that &lt;tt&gt;m1.equals(m2)&lt;/tt&gt;
                  implies that &lt;tt&gt;m1.hashCode()==m2.hashCode()&lt;/tt&gt; for any two maps
                  &lt;tt&gt;m1&lt;/tt&gt; and &lt;tt&gt;m2&lt;/tt&gt;, as required by the general contract of{@link Object#hashCode}.
                  &lt;p&gt;This implementation iterates over &lt;tt&gt;entrySet()&lt;/tt&gt;, calling{@link Map.Entry#hashCode hashCode()} on each element (entry) in the
                  set, and adding up the results.                
                <return>
                    the hash code value for this map                    
                </return>
                <see>
                    Map.Entry#hashCode()                    
                </see>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    Set#equals(Object)                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="367">
                <declaration name="h" type="int" line="368"/>
                <declaration name="i" type="Iterator&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="369"/>
            </method>
            <javadoc line="373">
                Returns a string representation of this map.  The string representation
                  consists of a list of key-value mappings in the order returned by the
                  map&apos;s &lt;tt&gt;entrySet&lt;/tt&gt; view&apos;s iterator, enclosed in braces
                  (&lt;tt&gt;&quot;{}&quot;&lt;/tt&gt;).  Adjacent mappings are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).  Each key-value mapping is rendered as
                  the key followed by an equals sign (&lt;tt&gt;&quot;=&quot;&lt;/tt&gt;) followed by the
                  associated value.  Keys and values are converted to strings as by{@link String#valueOf(Object)}.                
                <return>
                    a string representation of this map                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="383">
                <declaration name="i" type="Iterator&amp;lt;Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="384"/>
                <declaration name="sb" type="StringBuilder" line="386"/>
                <scope line="388">
                    <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="389"/>
                    <declaration name="key" type="K" line="390"/>
                    <declaration name="value" type="V" line="391"/>
                </scope>
            </method>
            <javadoc line="399">
                Returns a shallow copy of this &lt;tt&gt;AbstractMap&lt;/tt&gt; instance: the keys
                  and values themselves are not cloned.                
                <return>
                    a shallow copy of this map                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="404">
                <declaration name="result" type="AbstractMap&amp;lt;K,V&amp;gt;" line="405"/>
            </method>
            <javadoc line="410">
                Utility method for SimpleEntry and SimpleImmutableEntry.
                  Test for equality, checking for nulls.                
            </javadoc>
            <method name="eq" type="boolean" line="414">
                <params>
                    <param name="o1" type="Object"/>
                    <param name="o2" type="Object"/>
                </params>
            </method>
            <class name="SimpleEntry" line="417">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <implements interface="Entry">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </implements>
                <implements interface="java.io.Serializable"/>
                <javadoc line="417">
                    An Entry maintaining a key and a value.  The value may be
                      changed using the &lt;tt&gt;setValue&lt;/tt&gt; method.  This class
                      facilitates the process of building custom map
                      implementations. For example, it may be convenient to return
                      arrays of &lt;tt&gt;SimpleEntry&lt;/tt&gt; instances in method
                      &lt;tt&gt;Map.entrySet().toArray&lt;/tt&gt;.                    
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="427"/>
                <declaration name="key" type="K" line="428"/>
                <declaration name="value" type="V" line="429"/>
                <javadoc line="430">
                    Creates an entry representing a mapping from the specified
                      key to the specified value.                    
                    <param>
                        key the key represented by this entry                        
                    </param>
                    <param>
                        value the value represented by this entry                        
                    </param>
                </javadoc>
                <method name="SimpleEntry" type="constructor" line="436">
                    <params>
                        <param name="key" type="K"/>
                        <param name="value" type="V"/>
                    </params>
                </method>
                <javadoc line="440">
                    Creates an entry representing the same mapping as the
                      specified entry.                    
                    <param>
                        entry the entry to copy                        
                    </param>
                </javadoc>
                <method name="SimpleEntry" type="constructor" line="445">
                    <params>
                        <param name="entry" type="Entry&lt;? extends K,? extends V&gt;"/>
                    </params>
                </method>
                <javadoc line="449">
                    Returns the key corresponding to this entry.                    
                    <return>
                        the key corresponding to this entry                        
                    </return>
                </javadoc>
                <method name="getKey" type="K" line="453"/>
                <javadoc line="456">
                    Returns the value corresponding to this entry.                    
                    <return>
                        the value corresponding to this entry                        
                    </return>
                </javadoc>
                <method name="getValue" type="V" line="460"/>
                <javadoc line="463">
                    Replaces the value corresponding to this entry with the specified
                      value.                    
                    <param>
                        value new value to be stored in this entry                        
                    </param>
                    <return>
                        the old value corresponding to the entry                        
                    </return>
                </javadoc>
                <method name="setValue" type="V" line="469">
                    <params>
                        <param name="value" type="V"/>
                    </params>
                    <declaration name="oldValue" type="V" line="470"/>
                </method>
                <javadoc line="474">
                    Compares the specified object with this entry for equality.
                      Returns {@code true} if the given object is also a map entry and
                      the two entries represent the same mapping.  More formally, two
                      entries {@code e1} and {@code e2} represent the same mapping
                      if&lt;pre&gt;
                      (e1.getKey()==null ?
                      e2.getKey()==null :
                      e1.getKey().equals(e2.getKey()))
                      &amp;amp;&amp;amp;
                      (e1.getValue()==null ?
                      e2.getValue()==null :
                      e1.getValue().equals(e2.getValue()))&lt;/pre&gt;
                      This ensures that the {@code equals} method works properly across
                      different implementations of the {@code Map.Entry} interface.                    
                    <param>
                        o object to be compared for equality with this map entry                        
                    </param>
                    <return>
                        {@code true} if the specified object is equal to this map
                          entry                        
                    </return>
                    <see>
                        #hashCode                        
                    </see>
                </javadoc>
                <method name="equals" type="boolean" line="494">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry" line="496"/>
                </method>
                <javadoc line="499">
                    Returns the hash code value for this map entry.  The hash code
                      of a map entry {@code e} is defined to be: &lt;pre&gt;
                      (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^
                      (e.getValue()==null ? 0 : e.getValue().hashCode())&lt;/pre&gt;
                      This ensures that {@code e1.equals(e2)} implies that{@code e1.hashCode()==e2.hashCode()} for any two Entries{@code e1} and {@code e2}, as required by the general
                      contract of {@link Object#hashCode}.                    
                    <return>
                        the hash code value for this map entry                        
                    </return>
                    <see>
                        #equals                        
                    </see>
                </javadoc>
                <method name="hashCode" type="int" line="509"/>
                <javadoc line="512">
                    Returns a String representation of this map entry.  This
                      implementation returns the string representation of this
                      entry&apos;s key followed by the equals character (&quot;&lt;tt&gt;=&lt;/tt&gt;&quot;)
                      followed by the string representation of this entry&apos;s value.                    
                    <return>
                        a String representation of this map entry                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="519"/>
            </class>
            <class name="SimpleImmutableEntry" line="523">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <implements interface="Entry">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </implements>
                <implements interface="java.io.Serializable"/>
                <javadoc line="523">
                    An Entry maintaining an immutable key and value.  This class
                      does not support method &lt;tt&gt;setValue&lt;/tt&gt;.  This class may be
                      convenient in methods that return thread-safe snapshots of
                      key-value mappings.                    
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="531"/>
                <declaration name="key" type="K" line="532"/>
                <declaration name="value" type="V" line="533"/>
                <javadoc line="534">
                    Creates an entry representing a mapping from the specified
                      key to the specified value.                    
                    <param>
                        key the key represented by this entry                        
                    </param>
                    <param>
                        value the value represented by this entry                        
                    </param>
                </javadoc>
                <method name="SimpleImmutableEntry" type="constructor" line="540">
                    <params>
                        <param name="key" type="K"/>
                        <param name="value" type="V"/>
                    </params>
                </method>
                <javadoc line="544">
                    Creates an entry representing the same mapping as the
                      specified entry.                    
                    <param>
                        entry the entry to copy                        
                    </param>
                </javadoc>
                <method name="SimpleImmutableEntry" type="constructor" line="549">
                    <params>
                        <param name="entry" type="Entry&lt;? extends K,? extends V&gt;"/>
                    </params>
                </method>
                <javadoc line="553">
                    Returns the key corresponding to this entry.                    
                    <return>
                        the key corresponding to this entry                        
                    </return>
                </javadoc>
                <method name="getKey" type="K" line="557"/>
                <javadoc line="560">
                    Returns the value corresponding to this entry.                    
                    <return>
                        the value corresponding to this entry                        
                    </return>
                </javadoc>
                <method name="getValue" type="V" line="564"/>
                <javadoc line="567">
                    Replaces the value corresponding to this entry with the specified
                      value (optional operation).  This implementation simply throws
                      &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;, as this class implements
                      an &lt;i&gt;immutable&lt;/i&gt; map entry.                    
                    <param>
                        value new value to be stored in this entry                        
                    </param>
                    <return>
                        (Does not return)                        
                    </return>
                    <throws>
                        UnsupportedOperationException always                        
                    </throws>
                </javadoc>
                <method name="setValue" type="V" line="576">
                    <params>
                        <param name="value" type="V"/>
                    </params>
                </method>
                <javadoc line="579">
                    Compares the specified object with this entry for equality.
                      Returns {@code true} if the given object is also a map entry and
                      the two entries represent the same mapping.  More formally, two
                      entries {@code e1} and {@code e2} represent the same mapping
                      if&lt;pre&gt;
                      (e1.getKey()==null ?
                      e2.getKey()==null :
                      e1.getKey().equals(e2.getKey()))
                      &amp;amp;&amp;amp;
                      (e1.getValue()==null ?
                      e2.getValue()==null :
                      e1.getValue().equals(e2.getValue()))&lt;/pre&gt;
                      This ensures that the {@code equals} method works properly across
                      different implementations of the {@code Map.Entry} interface.                    
                    <param>
                        o object to be compared for equality with this map entry                        
                    </param>
                    <return>
                        {@code true} if the specified object is equal to this map
                          entry                        
                    </return>
                    <see>
                        #hashCode                        
                    </see>
                </javadoc>
                <method name="equals" type="boolean" line="599">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry" line="601"/>
                </method>
                <javadoc line="604">
                    Returns the hash code value for this map entry.  The hash code
                      of a map entry {@code e} is defined to be: &lt;pre&gt;
                      (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^
                      (e.getValue()==null ? 0 : e.getValue().hashCode())&lt;/pre&gt;
                      This ensures that {@code e1.equals(e2)} implies that{@code e1.hashCode()==e2.hashCode()} for any two Entries{@code e1} and {@code e2}, as required by the general
                      contract of {@link Object#hashCode}.                    
                    <return>
                        the hash code value for this map entry                        
                    </return>
                    <see>
                        #equals                        
                    </see>
                </javadoc>
                <method name="hashCode" type="int" line="614"/>
                <javadoc line="617">
                    Returns a String representation of this map entry.  This
                      implementation returns the string representation of this
                      entry&apos;s key followed by the equals character (&quot;&lt;tt&gt;=&lt;/tt&gt;&quot;)
                      followed by the string representation of this entry&apos;s value.                    
                    <return>
                        a String representation of this map entry                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="624"/>
            </class>
        </class>
    </source>