<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="Queue">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Collection">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="38">
                A collection designed for holding elements prior to processing.
                  Besides basic {@link java.util.Collection Collection} operations,
                  queues provide additional insertion, extraction, and inspection
                  operations.  Each of these methods exists in two forms: one throws
                  an exception if the operation fails, the other returns a special
                  value (either &lt;tt&gt;null&lt;/tt&gt; or &lt;tt&gt;false&lt;/tt&gt;, depending on the
                  operation).  The latter form of the insert operation is designed
                  specifically for use with capacity-restricted &lt;tt&gt;Queue&lt;/tt&gt;
                  implementations; in most implementations, insert operations cannot
                  fail.
                  &lt;p&gt;
                  &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Returns special value&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Insert&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #add add(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offer offer(e)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Remove&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #remove remove()}&lt;/td&gt;
                  &lt;td&gt;{@link #poll poll()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Examine&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #element element()}&lt;/td&gt;
                  &lt;td&gt;{@link #peek peek()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;Queues typically, but do not necessarily, order elements in a
                  FIFO (first-in-first-out) manner.  Among the exceptions are
                  priority queues, which order elements according to a supplied
                  comparator, or the elements&apos; natural ordering, and LIFO queues (or
                  stacks) which order the elements LIFO (last-in-first-out).
                  Whatever the ordering used, the &lt;em&gt;head&lt;/em&gt; of the queue is that
                  element which would be removed by a call to {@link #remove() } or{@link #poll()}.  In a FIFO queue, all new elements are inserted at
                  the &lt;em&gt; tail&lt;/em&gt; of the queue. Other kinds of queues may use
                  different placement rules.  Every &lt;tt&gt;Queue&lt;/tt&gt; implementation
                  must specify its ordering properties.
                  &lt;p&gt;The {@link #offer offer} method inserts an element if possible,
                  otherwise returning &lt;tt&gt;false&lt;/tt&gt;.  This differs from the {@link java.util.Collection#add Collection.add} method, which can fail to
                  add an element only by throwing an unchecked exception.  The
                  &lt;tt&gt;offer&lt;/tt&gt; method is designed for use when failure is a normal,
                  rather than exceptional occurrence, for example, in fixed-capacity
                  (or &amp;quot;bounded&amp;quot;) queues.
                  &lt;p&gt;The {@link #remove()} and {@link #poll()} methods remove and
                  return the head of the queue.
                  Exactly which element is removed from the queue is a
                  function of the queue&apos;s ordering policy, which differs from
                  implementation to implementation. The &lt;tt&gt;remove()&lt;/tt&gt; and
                  &lt;tt&gt;poll()&lt;/tt&gt; methods differ only in their behavior when the
                  queue is empty: the &lt;tt&gt;remove()&lt;/tt&gt; method throws an exception,
                  while the &lt;tt&gt;poll()&lt;/tt&gt; method returns &lt;tt&gt;null&lt;/tt&gt;.
                  &lt;p&gt;The {@link #element()} and {@link #peek()} methods return, but do
                  not remove, the head of the queue.
                  &lt;p&gt;The &lt;tt&gt;Queue&lt;/tt&gt; interface does not define the &lt;i&gt;blocking queue
                  methods&lt;/i&gt;, which are common in concurrent programming.  These methods,
                  which wait for elements to appear or for space to become available, are
                  defined in the {@link java.util.concurrent.BlockingQueue} interface, which
                  extends this interface.
                  &lt;p&gt;&lt;tt&gt;Queue&lt;/tt&gt; implementations generally do not allow insertion
                  of &lt;tt&gt;null&lt;/tt&gt; elements, although some implementations, such as{@link LinkedList}, do not prohibit insertion of &lt;tt&gt;null&lt;/tt&gt;.
                  Even in the implementations that permit it, &lt;tt&gt;null&lt;/tt&gt; should
                  not be inserted into a &lt;tt&gt;Queue&lt;/tt&gt;, as &lt;tt&gt;null&lt;/tt&gt; is also
                  used as a special return value by the &lt;tt&gt;poll&lt;/tt&gt; method to
                  indicate that the queue contains no elements.
                  &lt;p&gt;&lt;tt&gt;Queue&lt;/tt&gt; implementations generally do not define
                  element-based versions of methods &lt;tt&gt;equals&lt;/tt&gt; and
                  &lt;tt&gt;hashCode&lt;/tt&gt; but instead inherit the identity based versions
                  from class &lt;tt&gt;Object&lt;/tt&gt;, because element-based equality is not
                  always well-defined for queues with the same elements but different
                  ordering properties.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <see>
                    java.util.Collection                    
                </see>
                <see>
                    LinkedList                    
                </see>
                <see>
                    PriorityQueue                    
                </see>
                <see>
                    java.util.concurrent.LinkedBlockingQueue                    
                </see>
                <see>
                    java.util.concurrent.BlockingQueue                    
                </see>
                <see>
                    java.util.concurrent.ArrayBlockingQueue                    
                </see>
                <see>
                    java.util.concurrent.LinkedBlockingQueue                    
                </see>
                <see>
                    java.util.concurrent.PriorityBlockingQueue                    
                </see>
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;E&gt;
                       the type of elements held in this collection                    
                </param>
            </javadoc>
            <method name="add" type="boolean" line="145"/>
            <javadoc line="145">
                Inserts the specified element into this queue if it is possible to do so
                  immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and throwing an &lt;tt&gt;IllegalStateException&lt;/tt&gt;
                  if no space is currently available.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to capacity restrictions                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and
                      this queue does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of this element
                      prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="164"/>
            <javadoc line="164">
                Inserts the specified element into this queue if it is possible to do
                  so immediately without violating capacity restrictions.
                  When using a capacity-restricted queue, this method is generally
                  preferable to {@link #add}, which can fail to insert an element only
                  by throwing an exception.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the element was added to this queue, else
                      &lt;tt&gt;false&lt;/tt&gt;                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and
                      this queue does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of this element
                      prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="183"/>
            <javadoc line="183">
                Retrieves and removes the head of this queue.  This method differs
                  from {@link #poll poll} only in that it throws an exception if this
                  queue is empty.                
                <return>
                    the head of this queue                    
                </return>
                <throws>
                    NoSuchElementException if this queue is empty                    
                </throws>
            </javadoc>
            <method name="poll" type="E" line="193"/>
            <javadoc line="193">
                Retrieves and removes the head of this queue,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this queue is empty.                
                <return>
                    the head of this queue, or &lt;tt&gt;null&lt;/tt&gt; if this queue is empty                    
                </return>
            </javadoc>
            <method name="element" type="E" line="201"/>
            <javadoc line="201">
                Retrieves, but does not remove, the head of this queue.  This method
                  differs from {@link #peek peek} only in that it throws an exception
                  if this queue is empty.                
                <return>
                    the head of this queue                    
                </return>
                <throws>
                    NoSuchElementException if this queue is empty                    
                </throws>
            </javadoc>
            <method name="peek" type="E" line="211"/>
            <javadoc line="211">
                Retrieves, but does not remove, the head of this queue,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this queue is empty.                
                <return>
                    the head of this queue, or &lt;tt&gt;null&lt;/tt&gt; if this queue is empty                    
                </return>
            </javadoc>
        </interface>
    </source>