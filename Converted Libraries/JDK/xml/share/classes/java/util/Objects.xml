<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="Objects" line="28">
            <javadoc line="28">
                This class consists of {@code static} utility methods for operating
                  on objects.  These utilities include {@code null}-safe or {@codenull}-tolerant methods for computing the hash code of an object,
                  returning a string for an object, and comparing two objects.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="Objects" type="constructor" line="37"/>
            <javadoc line="41">
                Returns {@code true} if the arguments are equal to each other
                  and {@code false} otherwise.
                  Consequently, if both arguments are {@code null}, {@code true}is returned and if exactly one argument is {@code null}, {@codefalse} is returned.  Otherwise, equality is determined by using
                  the {@link Object#equals equals} method of the first
                  argument.                
                <param>
                    a an object                    
                </param>
                <param>
                    b an object to be compared with {@code a} for equality                    
                </param>
                <return>
                    {@code true} if the arguments are equal to each other
                      and {@code false} otherwise                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="56">
                <params>
                    <param name="a" type="Object"/>
                    <param name="b" type="Object"/>
                </params>
            </method>
            <javadoc line="60">
                Returns {@code true} if the arguments are deeply equal to each other
                  and {@code false} otherwise.
                  Two {@code null} values are deeply equal.  If both arguments are
                  arrays, the algorithm in {@link Arrays#deepEquals(Object[],Object[]) Arrays.deepEquals} is used to determine equality.
                  Otherwise, equality is determined by using the {@link Object#equals equals} method of the first argument.                
                <param>
                    a an object                    
                </param>
                <param>
                    b an object to be compared with {@code a} for deep equality                    
                </param>
                <return>
                    {@code true} if the arguments are deeply equal to each other
                      and {@code false} otherwise                    
                </return>
                <see>
                    Arrays#deepEquals(Object[],Object[])                    
                </see>
                <see>
                    Objects#equals(Object,Object)                    
                </see>
            </javadoc>
            <method name="deepEquals" type="boolean" line="77">
                <params>
                    <param name="a" type="Object"/>
                    <param name="b" type="Object"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the hash code of a non-{@code null} argument and 0 for
                  a {@code null} argument.                
                <param>
                    o an object                    
                </param>
                <return>
                    the hash code of a non-{@code null} argument and 0 for
                      a {@code null} argument                    
                </return>
                <see>
                    Object#hashCode                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="95">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="99">
                Generates a hash code for a sequence of input values. The hash
                  code is generated as if all the input values were placed into an
                  array, and that array were hashed by calling {@link Arrays#hashCode(Object[])}.
                  &lt;p&gt;This method is useful for implementing {@link Object#hashCode()} on objects containing multiple fields. For
                  example, if an object that has three fields, {@code x}, {@codey}, and {@code z}, one could write:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &amp;#064;Override public int hashCode() {
                  return Objects.hash(x, y, z);
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;b&gt;Warning: When a single object reference is supplied, the returned
                  value does not equal the hash code of that object reference.&lt;/b&gt; This
                  value can be computed by calling {@link #hashCode(Object)}.                
                <param>
                    values the values to be hashed                    
                </param>
                <return>
                    a hash value of the sequence of input values                    
                </return>
                <see>
                    Arrays#hashCode(Object[])                    
                </see>
                <see>
                    List#hashCode                    
                </see>
            </javadoc>
            <method name="hash" type="int" line="125">
                <params>
                    <param name="values" type="Object"/>
                </params>
            </method>
            <javadoc line="129">
                Returns the result of calling {@code toString} for a non-{@codenull} argument and {@code &quot;null&quot;} for a {@code null} argument.                
                <param>
                    o an object                    
                </param>
                <return>
                    the result of calling {@code toString} for a non-{@codenull} argument and {@code "null"} for a {@code null} argument                    
                </return>
                <see>
                    Object#toString                    
                </see>
                <see>
                    String#valueOf(Object)                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="139">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="143">
                Returns the result of calling {@code toString} on the first
                  argument if the first argument is not {@code null} and returns
                  the second argument otherwise.                
                <param>
                    o an object                    
                </param>
                <param>
                    nullDefault string to return if the first argument is{@code null}                    
                </param>
                <return>
                    the result of calling {@code toString} on the first
                      argument if it is not {@code null} and the second argument
                      otherwise.                    
                </return>
                <see>
                    Objects#toString(Object)                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="156">
                <params>
                    <param name="o" type="Object"/>
                    <param name="nullDefault" type="String"/>
                </params>
            </method>
            <javadoc line="160">
                Returns 0 if the arguments are identical and {@codec.compare(a, b)} otherwise.
                  Consequently, if both arguments are {@code null} 0
                  is returned.
                  &lt;p&gt;Note that if one of the arguments is {@code null}, a {@codeNullPointerException} may or may not be thrown depending on
                  what ordering policy, if any, the {@link Comparator Comparator}chooses to have for {@code null} values.                
                <param>
                    <T>
                       the type of the objects being compared                    
                </param>
                <param>
                    a an object                    
                </param>
                <param>
                    b an object to be compared with {@code a}                    
                </param>
                <param>
                    c the {@code Comparator} to compare the first two arguments                    
                </param>
                <return>
                    0 if the arguments are identical and {@codec.compare(a, b)} otherwise.                    
                </return>
                <see>
                    Comparable                    
                </see>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="compare" type="int" line="180">
                <params>
                    <param name="a" type="T"/>
                    <param name="b" type="T"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="184">
                Checks that the specified object reference is not {@code null}. This
                  method is designed primarily for doing parameter validation in methods
                  and constructors, as demonstrated below:
                  &lt;blockquote&gt;&lt;pre&gt;
                  public Foo(Bar bar) {
                  this.bar = Objects.requireNonNull(bar);
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    obj the object reference to check for nullity                    
                </param>
                <param>
                    <T>
                       the type of the reference                    
                </param>
                <return>
                    {@code obj} if not {@code null}                    
                </return>
                <throws>
                    NullPointerException if {@code obj} is {@code null}                    
                </throws>
            </javadoc>
            <method name="requireNonNull" type="T" line="199">
                <params>
                    <param name="obj" type="T"/>
                </params>
            </method>
            <javadoc line="205">
                Checks that the specified object reference is not {@code null} and
                  throws a customized {@link NullPointerException} if it is. This method
                  is designed primarily for doing parameter validation in methods and
                  constructors with multiple parameters, as demonstrated below:
                  &lt;blockquote&gt;&lt;pre&gt;
                  public Foo(Bar bar, Baz baz) {
                  this.bar = Objects.requireNonNull(bar, &quot;bar must not be null&quot;);
                  this.baz = Objects.requireNonNull(baz, &quot;baz must not be null&quot;);
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    obj     the object reference to check for nullity                    
                </param>
                <param>
                    message detail message to be used in the event that a {@codeNullPointerException} is thrown                    
                </param>
                <param>
                    <T>
                       the type of the reference                    
                </param>
                <return>
                    {@code obj} if not {@code null}                    
                </return>
                <throws>
                    NullPointerException if {@code obj} is {@code null}                    
                </throws>
            </javadoc>
            <method name="requireNonNull" type="T" line="224">
                <params>
                    <param name="obj" type="T"/>
                    <param name="message" type="String"/>
                </params>
            </method>
        </class>
    </source>