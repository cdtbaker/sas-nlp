<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.spi">
        <import package="java.util.Locale"/>
        <class name="LocaleServiceProvider" line="30">
            <javadoc line="30">
                &lt;p&gt;
                  This is the super class of all the locale sensitive service provider
                  interfaces (SPIs).
                  &lt;p&gt;
                  Locale sensitive  service provider interfaces are interfaces that
                  correspond to locale sensitive classes in the &lt;code&gt;java.text&lt;/code&gt;
                  and &lt;code&gt;java.util&lt;/code&gt; packages. The interfaces enable the
                  construction of locale sensitive objects and the retrieval of
                  localized names for these packages. Locale sensitive factory methods
                  and methods for name retrieval in the &lt;code&gt;java.text&lt;/code&gt; and
                  &lt;code&gt;java.util&lt;/code&gt; packages use implementations of the provider
                  interfaces to offer support for locales beyond the set of locales
                  supported by the Java runtime environment itself.
                  &lt;p&gt;
                  &lt;h4&gt;Packaging of Locale Sensitive Service Provider Implementations&lt;/h4&gt;
                  Implementations of these locale sensitive services are packaged using the
                  &lt;a href=&quot;../../../../technotes/guides/extensions/index.html&quot;&gt;Java Extension Mechanism&lt;/a&gt;
                  as installed extensions.  A provider identifies itself with a
                  provider-configuration file in the resource directory META-INF/services,
                  using the fully qualified provider interface class name as the file name.
                  The file should contain a list of fully-qualified concrete provider class names,
                  one per line. A line is terminated by any one of a line feed (&apos;\n&apos;), a carriage
                  return (&apos;\r&apos;), or a carriage return followed immediately by a line feed. Space
                  and tab characters surrounding each name, as well as blank lines, are ignored.
                  The comment character is &apos;#&apos; (&apos;\u0023&apos;); on each line all characters following
                  the first comment character are ignored. The file must be encoded in UTF-8.
                  &lt;p&gt;
                  If a particular concrete provider class is named in more than one configuration
                  file, or is named in the same configuration file more than once, then the
                  duplicates will be ignored. The configuration file naming a particular provider
                  need not be in the same jar file or other distribution unit as the provider itself.
                  The provider must be accessible from the same class loader that was initially
                  queried to locate the configuration file; this is not necessarily the class loader
                  that loaded the file.
                  &lt;p&gt;
                  For example, an implementation of the{@link java.text.spi.DateFormatProvider DateFormatProvider} class should
                  take the form of a jar file which contains the file:
                  &lt;pre&gt;
                  META-INF/services/java.text.spi.DateFormatProvider
                  &lt;/pre&gt;
                  And the file &lt;code&gt;java.text.spi.DateFormatProvider&lt;/code&gt; should have
                  a line such as:
                  &lt;pre&gt;
                  &lt;code&gt;com.foo.DateFormatProviderImpl&lt;/code&gt;
                  &lt;/pre&gt;
                  which is the fully qualified class name of the class implementing
                  &lt;code&gt;DateFormatProvider&lt;/code&gt;.
                  &lt;h4&gt;Invocation of Locale Sensitive Services&lt;/h4&gt;
                  &lt;p&gt;
                  Locale sensitive factory methods and methods for name retrieval in the
                  &lt;code&gt;java.text&lt;/code&gt; and &lt;code&gt;java.util&lt;/code&gt; packages invoke
                  service provider methods when needed to support the requested locale.
                  The methods first check whether the Java runtime environment itself
                  supports the requested locale, and use its support if available.
                  Otherwise, they call the &lt;code&gt;getAvailableLocales()&lt;/code&gt; methods of
                  installed providers for the appropriate interface to find one that
                  supports the requested locale. If such a provider is found, its other
                  methods are called to obtain the requested object or name.  When checking
                  whether a locale is supported, the locale&apos;s extensions are ignored.
                  If neither the Java runtime environment itself nor an installed provider
                  supports the requested locale, the methods go through a list of candidate
                  locales and repeat the availability check for each until a match is found.
                  The algorithm used for creating a list of candidate locales is same as
                  the one used by &lt;code&gt;ResourceBunlde&lt;/code&gt; by default (see{@link java.util.ResourceBundle.Control#getCandidateLocales getCandidateLocales}for the details).  Even if a locale is resolved from the candidate list,
                  methods that return requested objects or names are invoked with the original
                  requested locale including extensions.  The Java runtime environment must
                  support the root locale for all locale sensitive services in order to
                  guarantee that this process terminates.
                  &lt;p&gt;
                  Providers of names (but not providers of other objects) are allowed to
                  return null for some name requests even for locales that they claim to
                  support by including them in their return value for
                  &lt;code&gt;getAvailableLocales&lt;/code&gt;. Similarly, the Java runtime
                  environment itself may not have all names for all locales that it
                  supports. This is because the sets of objects for which names are
                  requested can be large and vary over time, so that it&apos;s not always
                  feasible to cover them completely. If the Java runtime environment or a
                  provider returns null instead of a name, the lookup will proceed as
                  described above as if the locale was not supported.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="118">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="LocaleServiceProvider" type="constructor" line="122"/>
            <method name="getAvailableLocales" type="Locale[]" line="125"/>
            <javadoc line="125">
                Returns an array of all locales for which this locale service provider
                  can provide localized objects or names.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Extensions in a &lt;code&gt;Locale&lt;/code&gt; are ignored during
                  service provider lookup.  So the array returned by this method should
                  not include two or more &lt;code&gt;Locale&lt;/code&gt; objects only differing in
                  their extensions.                
                <return>
                    An array of all locales for which this locale service provider
                      can provide localized objects or names.                    
                </return>
            </javadoc>
        </class>
    </source>