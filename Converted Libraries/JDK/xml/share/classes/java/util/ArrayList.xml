<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="ArrayList" line="28">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractList">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="368">
                Positional Access Operations                
            </comment>
            <comment line="490">
                Private remove method that skips bounds checking and does not
                 return the value removed.                
            </comment>
            <implements interface="List">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="RandomAccess"/>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="28">
                Resizable-array implementation of the &lt;tt&gt;List&lt;/tt&gt; interface.  Implements
                  all optional list operations, and permits all elements, including
                  &lt;tt&gt;null&lt;/tt&gt;.  In addition to implementing the &lt;tt&gt;List&lt;/tt&gt; interface,
                  this class provides methods to manipulate the size of the array that is
                  used internally to store the list.  (This class is roughly equivalent to
                  &lt;tt&gt;Vector&lt;/tt&gt;, except that it is unsynchronized.)
                  &lt;p&gt;The &lt;tt&gt;size&lt;/tt&gt;, &lt;tt&gt;isEmpty&lt;/tt&gt;, &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;,
                  &lt;tt&gt;iterator&lt;/tt&gt;, and &lt;tt&gt;listIterator&lt;/tt&gt; operations run in constant
                  time.  The &lt;tt&gt;add&lt;/tt&gt; operation runs in &lt;i&gt;amortized constant time&lt;/i&gt;,
                  that is, adding n elements requires O(n) time.  All of the other operations
                  run in linear time (roughly speaking).  The constant factor is low compared
                  to that for the &lt;tt&gt;LinkedList&lt;/tt&gt; implementation.
                  &lt;p&gt;Each &lt;tt&gt;ArrayList&lt;/tt&gt; instance has a &lt;i&gt;capacity&lt;/i&gt;.  The capacity is
                  the size of the array used to store the elements in the list.  It is always
                  at least as large as the list size.  As elements are added to an ArrayList,
                  its capacity grows automatically.  The details of the growth policy are not
                  specified beyond the fact that adding an element has constant amortized
                  time cost.
                  &lt;p&gt;An application can increase the capacity of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance
                  before adding a large number of elements using the &lt;tt&gt;ensureCapacity&lt;/tt&gt;
                  operation.  This may reduce the amount of incremental reallocation.
                  &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  If multiple threads access an &lt;tt&gt;ArrayList&lt;/tt&gt; instance concurrently,
                  and at least one of the threads modifies the list structurally, it
                  &lt;i&gt;must&lt;/i&gt; be synchronized externally.  (A structural modification is
                  any operation that adds or deletes one or more elements, or explicitly
                  resizes the backing array; merely setting the value of an element is not
                  a structural modification.)  This is typically accomplished by
                  synchronizing on some object that naturally encapsulates the list.
                  If no such object exists, the list should be &quot;wrapped&quot; using the{@link Collections#synchronizedList Collections.synchronizedList}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access to the list:&lt;pre&gt;
                  List list = Collections.synchronizedList(new ArrayList(...));&lt;/pre&gt;
                  &lt;p&gt;&lt;a name=&quot;fail-fast&quot;/&gt;
                  The iterators returned by this class&apos;s {@link #iterator() iterator} and{@link #listIterator(int) listIterator} methods are &lt;em&gt;fail-fast&lt;/em&gt;:
                  if the list is structurally modified at any time after the iterator is
                  created, in any way except through the iterator&apos;s own{@link ListIterator#remove() remove} or{@link ListIterator#add(Object) add} methods, the iterator will throw a{@link ConcurrentModificationException}.  Thus, in the face of
                  concurrent modification, the iterator fails quickly and cleanly, rather
                  than risking arbitrary, non-deterministic behavior at an undetermined
                  time in the future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw {@code ConcurrentModificationException} on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness:  &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    List                    
                </see>
                <see>
                    LinkedList                    
                </see>
                <see>
                    Vector                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="105"/>
            <declaration name="elementData" type="Object[]" line="107"/>
            <javadoc line="107">
                The array buffer into which the elements of the ArrayList are stored.
                  The capacity of the ArrayList is the length of this array buffer.                
            </javadoc>
            <declaration name="size" type="int" line="113"/>
            <javadoc line="113">
                The size of the ArrayList (the number of elements it contains).                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="120">
                Constructs an empty list with the specified initial capacity.                
                <param>
                    initialCapacity  the initial capacity of the list                    
                </param>
                <throws>
                    IllegalArgumentException if the specified initial capacity
                      is negative                    
                </throws>
            </javadoc>
            <method name="ArrayList" type="constructor" line="127">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="135">
                Constructs an empty list with an initial capacity of ten.                
            </javadoc>
            <method name="ArrayList" type="constructor" line="138"/>
            <javadoc line="142">
                Constructs a list containing the elements of the specified
                  collection, in the order they are returned by the collection&apos;s
                  iterator.                
                <param>
                    c the collection whose elements are to be placed into this list                    
                </param>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="ArrayList" type="constructor" line="150">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <comment line="154">
                    c.toArray might (incorrectly) not return Object[] (see 6260652)                    
                </comment>
            </method>
            <javadoc line="158">
                Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the
                  list&apos;s current size.  An application can use this operation to minimize
                  the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.                
            </javadoc>
            <method name="trimToSize" type="void" line="163">
                <declaration name="oldCapacity" type="int" line="165"/>
                <scope line="166"/>
            </method>
            <javadoc line="171">
                Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if
                  necessary, to ensure that it can hold at least the number of elements
                  specified by the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="178">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
            </method>
            <method name="ensureCapacityInternal" type="void" line="183">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="186">
                    overflow-conscious code                    
                </comment>
            </method>
            <declaration name="MAX_ARRAY_SIZE" type="int" line="190"/>
            <javadoc line="190">
                The maximum size of array to allocate.
                  Some VMs reserve some header words in an array.
                  Attempts to allocate larger arrays may result in
                  OutOfMemoryError: Requested array size exceeds VM limit                
            </javadoc>
            <javadoc line="198">
                Increases the capacity to ensure that it can hold at least the
                  number of elements specified by the minimum capacity argument.                
                <param>
                    minCapacity the desired minimum capacity                    
                </param>
            </javadoc>
            <method name="grow" type="void" line="204">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="206">
                    overflow-conscious code                    
                </comment>
                <comment line="213">
                    minCapacity is usually close to size, so this is a win:                    
                </comment>
                <declaration name="oldCapacity" type="int" line="206"/>
                <declaration name="newCapacity" type="int" line="207"/>
            </method>
            <method name="hugeCapacity" type="int" line="216">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="218">
                    overflow                    
                </comment>
            </method>
            <javadoc line="224">
                Returns the number of elements in this list.                
                <return>
                    the number of elements in this list                    
                </return>
            </javadoc>
            <method name="size" type="int" line="229"/>
            <javadoc line="233">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="238"/>
            <javadoc line="242">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this list contains
                  at least one element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this list is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="251">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="255">
                Returns the index of the first occurrence of the specified element
                  in this list, or -1 if this list does not contain the element.
                  More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
                  or -1 if there is no such index.                
            </javadoc>
            <method name="indexOf" type="int" line="262">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="263"/>
                <scope line="267"/>
            </method>
            <javadoc line="275">
                Returns the index of the last occurrence of the specified element
                  in this list, or -1 if this list does not contain the element.
                  More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
                  or -1 if there is no such index.                
            </javadoc>
            <method name="lastIndexOf" type="int" line="282">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="283"/>
                <scope line="287"/>
            </method>
            <javadoc line="295">
                Returns a shallow copy of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance.  (The
                  elements themselves are not copied.)                
                <return>
                    a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="301">
                <comment line="310">
                    this shouldn&apos;t happen, since we are Cloneable                    
                </comment>
                <scope line="302">
                    <declaration name="v" type="ArrayList&lt;E&gt;" line="303"/>
                </scope>
                <scope line="308"/>
            </method>
            <javadoc line="314">
                Returns an array containing all of the elements in this list
                  in proper sequence (from first to last element).
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this list.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this list in
                      proper sequence                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="328"/>
            <javadoc line="332">
                Returns an array containing all of the elements in this list in proper
                  sequence (from first to last element); the runtime type of the returned
                  array is that of the specified array.  If the list fits in the
                  specified array, it is returned therein.  Otherwise, a new array is
                  allocated with the runtime type of the specified array and the size of
                  this list.
                  &lt;p&gt;If the list fits in the specified array with room to spare
                  (i.e., the array has more elements than the list), the element in
                  the array immediately following the end of the collection is set to
                  &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of the
                  list &lt;i&gt;only&lt;/i&gt; if the caller knows that the list does not contain
                  any null elements.)                
                <param>
                    a the array into which the elements of the list are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing the elements of the list                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this list                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="357">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <comment line="360">
                    Make a new array of a&apos;s runtime type, but my contents:                    
                </comment>
            </method>
            <method name="elementData" type="E" line="370">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="374">
                Returns the element at the specified position in this list.                
                <param>
                    index index of the element to return                    
                </param>
                <return>
                    the element at the specified position in this list                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="get" type="E" line="381">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="387">
                Replaces the element at the specified position in this list with
                  the specified element.                
                <param>
                    index index of the element to replace                    
                </param>
                <param>
                    element element to be stored at the specified position                    
                </param>
                <return>
                    the element previously at the specified position                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="set" type="E" line="396">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <declaration name="oldValue" type="E" line="399"/>
            </method>
            <javadoc line="404">
                Appends the specified element to the end of this list.                
                <param>
                    e element to be appended to this list                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})                    
                </return>
            </javadoc>
            <method name="add" type="boolean" line="410">
                <params>
                    <param name="e" type="E"/>
                </params>
                <comment line="412">
                    Increments modCount!!                    
                </comment>
            </method>
            <javadoc line="416">
                Inserts the specified element at the specified position in this
                  list. Shifts the element currently at that position (if any) and
                  any subsequent elements to the right (adds one to their indices).                
                <param>
                    index index at which the specified element is to be inserted                    
                </param>
                <param>
                    element element to be inserted                    
                </param>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="425">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <comment line="429">
                    Increments modCount!!                    
                </comment>
            </method>
            <javadoc line="435">
                Removes the element at the specified position in this list.
                  Shifts any subsequent elements to the left (subtracts one from their
                  indices).                
                <param>
                    index the index of the element to be removed                    
                </param>
                <return>
                    the element that was removed from the list                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="444">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="455">
                    Let gc do its work                    
                </comment>
                <declaration name="oldValue" type="E" line="448"/>
                <declaration name="numMoved" type="int" line="450"/>
            </method>
            <javadoc line="459">
                Removes the first occurrence of the specified element from this list,
                  if it is present.  If the list does not contain the element, it is
                  unchanged.  More formally, removes the element with the lowest index
                  &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;
                  (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list
                  contained the specified element (or equivalently, if this list
                  changed as a result of the call).                
                <param>
                    o element to be removed from this list, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="472">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="473">
                    <scope line="475"/>
                </scope>
                <scope line="479">
                    <scope line="481"/>
                </scope>
            </method>
            <method name="fastRemove" type="void" line="493">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="500">
                    Let gc do its work                    
                </comment>
                <declaration name="numMoved" type="int" line="495"/>
            </method>
            <javadoc line="502">
                Removes all of the elements from this list.  The list will
                  be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="506">
                <comment line="510">
                    Let gc do its work                    
                </comment>
            </method>
            <javadoc line="516">
                Appends all of the elements in the specified collection to the end of
                  this list, in the order that they are returned by the
                  specified collection&apos;s Iterator.  The behavior of this operation is
                  undefined if the specified collection is modified while the operation
                  is in progress.  (This implies that the behavior of this call is
                  undefined if the specified collection is this list, and this
                  list is nonempty.)                
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="529">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <comment line="533">
                    Increments modCount                    
                </comment>
                <declaration name="a" type="Object[]" line="530"/>
                <declaration name="numNew" type="int" line="531"/>
            </method>
            <javadoc line="538">
                Inserts all of the elements in the specified collection into this
                  list, starting at the specified position.  Shifts the element
                  currently at that position (if any) and any subsequent elements to
                  the right (increases their indices).  The new elements will appear
                  in the list in the order that they are returned by the
                  specified collection&apos;s iterator.                
                <param>
                    index index at which to insert the first element from the
                      specified collection                    
                </param>
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="553">
                <params>
                    <param name="index" type="int"/>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <comment line="559">
                    Increments modCount                    
                </comment>
                <declaration name="a" type="Object[]" line="556"/>
                <declaration name="numNew" type="int" line="557"/>
                <declaration name="numMoved" type="int" line="560"/>
            </method>
            <javadoc line="570">
                Removes from this list all of the elements whose index is between{@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
                  Shifts any succeeding elements to the left (reduces their index).
                  This call shortens the list by {@code (toIndex - fromIndex)} elements.
                  (If {@code toIndex==fromIndex}, this operation has no effect.)                
                <throws>
                    IndexOutOfBoundsException if {@code fromIndex} or{@code toIndex} is out of range
                      ({@code fromIndex &lt; 0 ||
                      fromIndex &gt;= size() ||
                      toIndex &gt; size() ||
                      toIndex &lt; fromIndex})                    
                </throws>
            </javadoc>
            <method name="removeRange" type="void" line="584">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <comment line="591">
                    Let gc do its work                    
                </comment>
                <declaration name="numMoved" type="int" line="586"/>
                <declaration name="newSize" type="int" line="591"/>
            </method>
            <javadoc line="596">
                Checks if the given index is in range.  If not, throws an appropriate
                  runtime exception.  This method does not check if the index is
                  negative: It is always used immediately prior to an array access,
                  which throws an ArrayIndexOutOfBoundsException if index is negative.                
            </javadoc>
            <method name="rangeCheck" type="void" line="602">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="607">
                A version of rangeCheck used by add and addAll.                
            </javadoc>
            <method name="rangeCheckForAdd" type="void" line="610">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="615">
                Constructs an IndexOutOfBoundsException detail message.
                  Of the many possible refactorings of the error handling code,
                  this &quot;outlining&quot; performs best with both server and client VMs.                
            </javadoc>
            <method name="outOfBoundsMsg" type="String" line="620">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="624">
                Removes from this list all of its elements that are contained in the
                  specified collection.                
                <param>
                    c collection containing elements to be removed from this list                    
                </param>
                <return>
                    {@code true} if this list changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of an element of this list
                      is incompatible with the specified collection
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if this list contains a null element and the
                      specified collection does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;),
                      or if the specified collection is null                    
                </throws>
                <see>
                    Collection#contains(Object)                    
                </see>
            </javadoc>
            <method name="removeAll" type="boolean" line="639">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="643">
                Retains only the elements in this list that are contained in the
                  specified collection.  In other words, removes from this list all
                  of its elements that are not contained in the specified collection.                
                <param>
                    c collection containing elements to be retained in this list                    
                </param>
                <return>
                    {@code true} if this list changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of an element of this list
                      is incompatible with the specified collection
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if this list contains a null element and the
                      specified collection does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;),
                      or if the specified collection is null                    
                </throws>
                <see>
                    Collection#contains(Object)                    
                </see>
            </javadoc>
            <method name="retainAll" type="boolean" line="659">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <method name="batchRemove" type="boolean" line="663">
                <params>
                    <param name="c" type="Collection<?>"/>
                    <param name="complement" type="boolean"/>
                </params>
                <comment line="673">
                    Preserve behavioral compatibility with AbstractCollection,
                     even if c.contains() throws.                    
                </comment>
                <declaration name="elementData" type="Object[]" line="664"/>
                <declaration name="r" type="int" line="665"/>
                <declaration name="modified" type="boolean" line="666"/>
                <scope line="667"/>
                <scope line="671">
                    <scope line="674"/>
                    <scope line="680"/>
                </scope>
            </method>
            <javadoc line="691">
                Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that
                  is, serialize it).                
                <serialData>
                    The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;
                      instance is emitted (int), followed by all of its elements
                      (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="700">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="702">
                    Write out element count, and any hidden stuff                    
                </comment>
                <comment line="706">
                    Write out array length                    
                </comment>
                <comment line="709">
                    Write out all elements in the proper order.                    
                </comment>
                <declaration name="expectedModCount" type="int" line="702"/>
                <scope line="712"/>
            </method>
            <javadoc line="718">
                Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,
                  deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="723">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="725">
                    Read in size, and any hidden stuff                    
                </comment>
                <comment line="728">
                    Read in array length and allocate array                    
                </comment>
                <comment line="732">
                    Read in all elements in the proper order.                    
                </comment>
                <declaration name="arrayLength" type="int" line="728"/>
                <declaration name="a" type="Object[]" line="729"/>
            </method>
            <javadoc line="736">
                Returns a list iterator over the elements in this list (in proper
                  sequence), starting at the specified position in the list.
                  The specified index indicates the first element that would be
                  returned by an initial call to {@link ListIterator#next next}.
                  An initial call to {@link ListIterator#previous previous} would
                  return the element with the specified index minus one.
                  &lt;p&gt;The returned list iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="748">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="754">
                Returns a list iterator over the elements in this list (in proper
                  sequence).
                  &lt;p&gt;The returned list iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.                
                <see>
                    #listIterator(int)                    
                </see>
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="762"/>
            <javadoc line="766">
                Returns an iterator over the elements in this list in proper sequence.
                  &lt;p&gt;The returned iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.                
                <return>
                    an iterator over the elements in this list in proper sequence                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="773"/>
            <class name="Itr" line="777">
                <comment line="782">
                    index of next element to return                    
                </comment>
                <comment line="783">
                    index of last element returned; -1 if no such                    
                </comment>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <javadoc line="777">
                    An optimized version of AbstractList.Itr                    
                </javadoc>
                <declaration name="cursor" type="int" line="781"/>
                <declaration name="lastRet" type="int" line="782"/>
                <declaration name="expectedModCount" type="int" line="783"/>
                <method name="hasNext" type="boolean" line="785"/>
                <method name="next" type="E" line="790">
                    <declaration name="i" type="int" line="792"/>
                    <declaration name="elementData" type="Object[]" line="795"/>
                </method>
                <method name="remove" type="void" line="802">
                    <scope line="807"/>
                    <scope line="812"/>
                </method>
                <method name="checkForComodification" type="void" line="817"/>
            </class>
            <class name="ListItr" line="823">
                <extends class="Itr"/>
                <comment line="782">
                    index of next element to return                    
                </comment>
                <comment line="783">
                    index of last element returned; -1 if no such                    
                </comment>
                <implements interface="ListIterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <javadoc line="823">
                    An optimized version of AbstractList.ListItr                    
                </javadoc>
                <method name="ListItr" type="constructor" line="827">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="hasPrevious" type="boolean" line="832"/>
                <method name="nextIndex" type="int" line="836"/>
                <method name="previousIndex" type="int" line="840"/>
                <method name="previous" type="E" line="845">
                    <declaration name="i" type="int" line="847"/>
                    <declaration name="elementData" type="Object[]" line="850"/>
                </method>
                <method name="set" type="void" line="857">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                    <scope line="862"/>
                    <scope line="864"/>
                </method>
                <method name="add" type="void" line="869">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                    <scope line="872">
                        <declaration name="i" type="int" line="873"/>
                    </scope>
                    <scope line="878"/>
                </method>
            </class>
            <javadoc line="884">
                Returns a view of the portion of this list between the specified{@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If{@code fromIndex} and {@code toIndex} are equal, the returned list is
                  empty.)  The returned list is backed by this list, so non-structural
                  changes in the returned list are reflected in this list, and vice-versa.
                  The returned list supports all of the optional list operations.
                  &lt;p&gt;This method eliminates the need for explicit range operations (of
                  the sort that commonly exist for arrays).  Any operation that expects
                  a list can be used as a range operation by passing a subList view
                  instead of a whole list.  For example, the following idiom
                  removes a range of elements from a list:
                  &lt;pre&gt;
                  list.subList(from, to).clear();
                  &lt;/pre&gt;
                  Similar idioms may be constructed for {@link #indexOf(Object)} and{@link #lastIndexOf(Object)}, and all of the algorithms in the{@link Collections} class can be applied to a subList.
                  &lt;p&gt;The semantics of the list returned by this method become undefined if
                  the backing list (i.e., this list) is &lt;i&gt;structurally modified&lt;/i&gt; in
                  any way other than via the returned list.  (Structural modifications are
                  those that change the size of this list, or otherwise perturb it in such
                  a fashion that iterations in progress may yield incorrect results.)                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="subList" type="List<E>" line="913">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <method name="subListRangeCheck" type="void" line="918">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <class name="SubList" line="928">
                <extends class="AbstractList">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </extends>
                <comment line="782">
                    index of next element to return                    
                </comment>
                <comment line="783">
                    index of last element returned; -1 if no such                    
                </comment>
                <implements interface="RandomAccess"/>
                <declaration name="parent" type="AbstractList&lt;E&gt;" line="929"/>
                <declaration name="parentOffset" type="int" line="930"/>
                <declaration name="offset" type="int" line="931"/>
                <declaration name="size" type="int" line="932"/>
                <method name="SubList" type="constructor" line="935">
                    <params>
                        <param name="parent" type="AbstractList<E>"/>
                        <param name="offset" type="int"/>
                        <param name="fromIndex" type="int"/>
                        <param name="toIndex" type="int"/>
                    </params>
                </method>
                <method name="set" type="E" line="943">
                    <params>
                        <param name="index" type="int"/>
                        <param name="e" type="E"/>
                    </params>
                    <declaration name="oldValue" type="E" line="946"/>
                </method>
                <method name="get" type="E" line="951">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="size" type="int" line="957"/>
                <method name="add" type="void" line="962">
                    <params>
                        <param name="index" type="int"/>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <method name="remove" type="E" line="970">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="result" type="E" line="973"/>
                </method>
                <method name="removeRange" type="void" line="979">
                    <params>
                        <param name="fromIndex" type="int"/>
                        <param name="toIndex" type="int"/>
                    </params>
                </method>
                <method name="addAll" type="boolean" line="987">
                    <params>
                        <param name="c" type="Collection<? extends E>"/>
                    </params>
                </method>
                <method name="addAll" type="boolean" line="991">
                    <params>
                        <param name="index" type="int"/>
                        <param name="c" type="Collection<? extends E>"/>
                    </params>
                    <declaration name="cSize" type="int" line="993"/>
                </method>
                <method name="iterator" type="Iterator<E>" line="1004"/>
                <method name="listIterator" type="ListIterator<E>" line="1008">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="offset" type="int" line="1011"/>
                    <anonymous_class line="1013">
                        <declaration name="cursor" type="int" line="1014"/>
                        <declaration name="lastRet" type="int" line="1015"/>
                        <declaration name="expectedModCount" type="int" line="1016"/>
                        <method name="hasNext" type="boolean" line="1018"/>
                        <method name="next" type="E" line="1023">
                            <declaration name="i" type="int" line="1025"/>
                            <declaration name="elementData" type="Object[]" line="1028"/>
                        </method>
                        <method name="hasPrevious" type="boolean" line="1035"/>
                        <method name="previous" type="E" line="1040">
                            <declaration name="i" type="int" line="1042"/>
                            <declaration name="elementData" type="Object[]" line="1045"/>
                        </method>
                        <method name="nextIndex" type="int" line="1052"/>
                        <method name="previousIndex" type="int" line="1056"/>
                        <method name="remove" type="void" line="1060">
                            <scope line="1065"/>
                            <scope line="1070"/>
                        </method>
                        <method name="set" type="void" line="1075">
                            <params>
                                <param name="e" type="E"/>
                            </params>
                            <scope line="1080"/>
                            <scope line="1082"/>
                        </method>
                        <method name="add" type="void" line="1087">
                            <params>
                                <param name="e" type="E"/>
                            </params>
                            <scope line="1090">
                                <declaration name="i" type="int" line="1091"/>
                            </scope>
                            <scope line="1096"/>
                        </method>
                        <method name="checkForComodification" type="void" line="1101"/>
                    </anonymous_class>
                </method>
                <method name="subList" type="List<E>" line="1108">
                    <params>
                        <param name="fromIndex" type="int"/>
                        <param name="toIndex" type="int"/>
                    </params>
                </method>
                <method name="rangeCheck" type="void" line="1113">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="rangeCheckForAdd" type="void" line="1118">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="outOfBoundsMsg" type="String" line="1123">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="checkForComodification" type="void" line="1127"/>
            </class>
        </class>
    </source>