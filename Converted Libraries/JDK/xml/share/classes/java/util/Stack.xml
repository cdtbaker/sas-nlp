<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="Stack" line="28">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="Vector">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <javadoc line="28">
                The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out
                  (LIFO) stack of objects. It extends class &lt;tt&gt;Vector&lt;/tt&gt; with five
                  operations that allow a vector to be treated as a stack. The usual
                  &lt;tt&gt;push&lt;/tt&gt; and &lt;tt&gt;pop&lt;/tt&gt; operations are provided, as well as a
                  method to &lt;tt&gt;peek&lt;/tt&gt; at the top item on the stack, a method to test
                  for whether the stack is &lt;tt&gt;empty&lt;/tt&gt;, and a method to &lt;tt&gt;search&lt;/tt&gt;
                  the stack for an item and discover how far it is from the top.
                  &lt;p&gt;
                  When a stack is first created, it contains no items.
                  &lt;p&gt;A more complete and consistent set of LIFO stack operations is
                  provided by the {@link Deque} interface and its implementations, which
                  should be used in preference to this class.  For example:
                  &lt;pre&gt;   {@codeDeque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();}&lt;/pre&gt;                
                <author>
                    Jonathan Payne                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <javadoc line="50">
                Creates an empty Stack.                
            </javadoc>
            <method name="Stack" type="constructor" line="53"/>
            <javadoc line="56">
                Pushes an item onto the top of this stack. This has exactly
                  the same effect as:
                  &lt;blockquote&gt;&lt;pre&gt;
                  addElement(item)&lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    item   the item to be pushed onto this stack.                    
                </param>
                <return>
                    the <code>item</code> argument.                    
                </return>
                <see>
                    java.util.Vector#addElement                    
                </see>
            </javadoc>
            <method name="push" type="E" line="66">
                <params>
                    <param name="item" type="E"/>
                </params>
            </method>
            <javadoc line="72">
                Removes the object at the top of this stack and returns that
                  object as the value of this function.                
                <return>
                    The object at the top of this stack (the last item
                      of the <tt>Vector</tt> object).                    
                </return>
                <throws>
                    EmptyStackException  if this stack is empty.                    
                </throws>
            </javadoc>
            <method name="pop" type="E" line="80">
                <declaration name="obj" type="E" line="81"/>
                <declaration name="len" type="int" line="82"/>
            </method>
            <javadoc line="90">
                Looks at the object at the top of this stack without removing it
                  from the stack.                
                <return>
                    the object at the top of this stack (the last item
                      of the <tt>Vector</tt> object).                    
                </return>
                <throws>
                    EmptyStackException  if this stack is empty.                    
                </throws>
            </javadoc>
            <method name="peek" type="E" line="98">
                <declaration name="len" type="int" line="99"/>
            </method>
            <javadoc line="106">
                Tests if this stack is empty.                
                <return>
                    <code>true</code> if and only if this stack contains
                      no items; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="empty" type="boolean" line="112"/>
            <javadoc line="116">
                Returns the 1-based position where an object is on this stack.
                  If the object &lt;tt&gt;o&lt;/tt&gt; occurs as an item in this stack, this
                  method returns the distance from the top of the stack of the
                  occurrence nearest the top of the stack; the topmost item on the
                  stack is considered to be at distance &lt;tt&gt;1&lt;/tt&gt;. The &lt;tt&gt;equals&lt;/tt&gt;
                  method is used to compare &lt;tt&gt;o&lt;/tt&gt; to the
                  items in this stack.                
                <param>
                    o   the desired object.                    
                </param>
                <return>
                    the 1-based position from the top of the stack where
                      the object is located; the return value <code>-1</code>
                      indicates that the object is not on the stack.                    
                </return>
            </javadoc>
            <method name="search" type="int" line="130">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="i" type="int" line="131"/>
                <scope line="133"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="139"/>
            <javadoc line="139">
                use serialVersionUID from JDK 1.0.2 for interoperability                
            </javadoc>
        </class>
    </source>