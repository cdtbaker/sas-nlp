<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="DualPivotQuicksort" line="28">
            <comment line="50">
                Tuning parameters.                
            </comment>
            <comment line="88">
                Sorting methods for seven primitive types.                
            </comment>
            <javadoc line="28">
                This class implements the Dual-Pivot Quicksort algorithm by
                  Vladimir Yaroslavskiy, Jon Bentley, and Josh Bloch. The algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <author>
                    Vladimir Yaroslavskiy                    
                </author>
                <author>
                    Jon Bentley                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <version>
                    2011.02.11 m765.827.12i:5\7pm                    
                </version>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="44">
                Prevents instantiation.                
            </javadoc>
            <method name="DualPivotQuicksort" type="constructor" line="47"/>
            <declaration name="MAX_RUN_COUNT" type="int" line="53"/>
            <javadoc line="53">
                The maximum number of runs in merge sort.                
            </javadoc>
            <declaration name="MAX_RUN_LENGTH" type="int" line="58"/>
            <javadoc line="58">
                The maximum length of run in merge sort.                
            </javadoc>
            <declaration name="QUICKSORT_THRESHOLD" type="int" line="63"/>
            <javadoc line="63">
                If the length of an array to be sorted is less than this
                  constant, Quicksort is used in preference to merge sort.                
            </javadoc>
            <declaration name="INSERTION_SORT_THRESHOLD" type="int" line="69"/>
            <javadoc line="69">
                If the length of an array to be sorted is less than this
                  constant, insertion sort is used in preference to Quicksort.                
            </javadoc>
            <declaration name="COUNTING_SORT_THRESHOLD_FOR_BYTE" type="int" line="75"/>
            <javadoc line="75">
                If the length of a byte array to be sorted is greater than this
                  constant, counting sort is used in preference to insertion sort.                
            </javadoc>
            <declaration name="COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR" type="int" line="81"/>
            <javadoc line="81">
                If the length of a short or char array to be sorted is greater
                  than this constant, counting sort is used in preference to Quicksort.                
            </javadoc>
            <javadoc line="91">
                Sorts the specified array.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="96">
                <params>
                    <param name="a" type="int[]"/>
                </params>
            </method>
            <javadoc line="100">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="107">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="109">
                    Use Quicksort on small arrays                    
                </comment>
                <comment line="115">
                    Index run[i] is the start of i-th run
                     (ascending or descending sequence).                    
                </comment>
                <comment line="122">
                    Check if the array is nearly sorted                    
                </comment>
                <comment line="124">
                    ascending                    
                </comment>
                <comment line="126">
                    descending                    
                </comment>
                <comment line="131">
                    equal                    
                </comment>
                <comment line="140">
                    The array is not highly structured,
                     use Quicksort instead of merge sort.                    
                </comment>
                <comment line="150">
                    Check special cases                    
                </comment>
                <comment line="151">
                    The last run contains one element                    
                </comment>
                <comment line="153">
                    The array is already sorted                    
                </comment>
                <comment line="157">
                    Create temporary array, which is used for merging.
                     Implementation note: variable &quot;right&quot; is increased by 1.                    
                </comment>
                <comment line="171">
                    Merging                    
                </comment>
                <scope line="109"/>
                <declaration name="run" type="int[]" line="118"/>
                <declaration name="count" type="int" line="119"/>
                <scope line="122">
                    <scope line="123"/>
                    <scope line="125">
                        <scope line="127">
                            <declaration name="t" type="int" line="128"/>
                        </scope>
                    </scope>
                    <scope line="130">
                        <scope line="131">
                            <scope line="132"/>
                        </scope>
                    </scope>
                    <scope line="143"/>
                </scope>
                <scope line="150"/>
                <scope line="152"/>
                <declaration name="b" type="int[]" line="160"/>
                <declaration name="odd" type="byte" line="160"/>
                <scope line="163"/>
                <scope line="166"/>
                <scope line="171">
                    <scope line="172">
                        <declaration name="hi" type="int" line="173"/>
                        <scope line="174">
                            <scope line="175"/>
                            <scope line="177"/>
                        </scope>
                    </scope>
                    <scope line="183"/>
                    <declaration name="t" type="int[]" line="189"/>
                </scope>
            </method>
            <javadoc line="193">
                Sorts the specified range of the array by Dual-Pivot Quicksort.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
                <param>
                    leftmost indicates if this part is the leftmost in the range                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="201">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                    <param name="leftmost" type="boolean"/>
                </params>
                <comment line="205">
                    Use insertion sort on tiny arrays                    
                </comment>
                <comment line="208">
                    Traditional (without sentinel) insertion sort,
                     optimized for server VM, is used in case of
                     the leftmost part.                    
                </comment>
                <comment line="224">
                    Skip the longest ascending sequence.                    
                </comment>
                <comment line="233">
                    Every element from adjoining part plays the role
                     of sentinel, therefore this allows us to avoid the
                     left range check on each iteration. Moreover, we use
                     the more optimized algorithm, so called pair insertion
                     sort, which is faster (in the context of Quicksort)
                     than traditional implementation of insertion sort.                    
                </comment>
                <comment line="267">
                    Inexpensive approximation of length / 7                    
                </comment>
                <comment line="270">
                    Sort five evenly spaced elements around (and including) the
                     center element in the range. These elements will be used for
                     pivot selection as described below. The choice for spacing
                     these elements was empirically determined to work well on
                     a wide variety of inputs.                    
                </comment>
                <comment line="277">
                    The midpoint                    
                </comment>
                <comment line="283">
                    Sort these elements using insertion sort                    
                </comment>
                <comment line="302">
                    Pointers                    
                </comment>
                <comment line="303">
                    The index of the first element of center part                    
                </comment>
                <comment line="304">
                    The index before the first element of right part                    
                </comment>
                <comment line="307">
                    Use the second and fourth of the five sorted elements as pivots.
                     These values are inexpensive approximations of the first and
                     second terciles of the array. Note that pivot1 &lt;= pivot2.                    
                </comment>
                <comment line="315">
                    The first and the last elements to be sorted are moved to the
                     locations formerly occupied by the pivots. When partitioning
                     is complete, the pivots are swapped back into their final
                     positions, and excluded from subsequent sorting.                    
                </comment>
                <comment line="324">
                    Skip elements, which are less or greater than pivot values.                    
                </comment>
                <comment line="330">
                    Partitioning:
                    
                       left part           center part                   right part
                     +--------------------------------------------------------------+
                     |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |
                     +--------------------------------------------------------------+
                                   ^                          ^       ^
                                   |                          |       |
                                  less                        k     great
                    
                     Invariants:
                    
                                  all in (left, less)   &lt; pivot1
                        pivot1 &lt;= all in [less, k)     &lt;= pivot2
                                  all in (great, right) &gt; pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="352">
                    Move a[k] to left part                    
                </comment>
                <comment line="354">
                    Here and below we use &quot;a[i] = b; i++;&quot; instead
                     of &quot;a[i++] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="360">
                    Move a[k] to right part                    
                </comment>
                <comment line="366">
                    a[great] &lt;= pivot2                    
                </comment>
                <comment line="370">
                    pivot1 &lt;= a[great] &lt;= pivot2                    
                </comment>
                <comment line="373">
                    Here and below we use &quot;a[i] = b; i--;&quot; instead
                     of &quot;a[i--] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="382">
                    Swap pivots into their final positions                    
                </comment>
                <comment line="386">
                    Sort left and right parts recursively, excluding known pivots                    
                </comment>
                <comment line="390">
                    If center part is too large (comprises &gt; 47 of the array),
                     swap internal pivot values to ends.                    
                </comment>
                <comment line="395">
                    Skip elements, which are equal to pivot values.                    
                </comment>
                <comment line="406">
                    Partitioning:
                    
                       left part         center part                  right part
                     +----------------------------------------------------------+
                     | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |
                     +----------------------------------------------------------+
                                  ^                        ^       ^
                                  |                        |       |
                                 less                      k     great
                    
                     Invariants:
                    
                                  all in (,  less) == pivot1
                         pivot1 &lt; all in [less,  k)  &lt; pivot2
                                  all in (great, ) == pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="428">
                    Move a[k] to left part                    
                </comment>
                <comment line="432">
                    Move a[k] to right part                    
                </comment>
                <comment line="438">
                    a[great] &lt; pivot2                    
                </comment>
                <comment line="440">
                    Even though a[great] equals to pivot1, the
                     assignment a[less] = pivot1 may be incorrect,
                     if a[great] and pivot1 are floating-point zeros
                     of different signs. Therefore in float and
                     double sorting methods we have to use more
                     accurate assignment a[less] = a[great].                    
                </comment>
                <comment line="450">
                    pivot1 &lt; a[great] &lt; pivot2                    
                </comment>
                <comment line="459">
                    Sort center part recursively                    
                </comment>
                <comment line="462">
                    Partitioning with one pivot                    
                </comment>
                <comment line="463">
                    Use the third of the five sorted elements as pivot.
                     This value is inexpensive approximation of the median.                    
                </comment>
                <comment line="469">
                    Partitioning degenerates to the traditional 3-way
                     (or &quot;Dutch National Flag&quot;) schema:
                    
                       left part    center part              right part
                     +-------------------------------------------------+
                     |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |
                     +-------------------------------------------------+
                                  ^              ^        ^
                                  |              |        |
                                 less            k      great
                    
                     Invariants:
                    
                       all in (left, less)   &lt; pivot
                       all in [less, k)     == pivot
                       all in (great, right) &gt; pivot
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="494">
                    Move a[k] to left part                    
                </comment>
                <comment line="498">
                    a[k] &gt; pivot - Move a[k] to right part                    
                </comment>
                <comment line="502">
                    a[great] &lt;= pivot                    
                </comment>
                <comment line="506">
                    a[great] == pivot                    
                </comment>
                <comment line="507">
                    Even though a[great] equals to pivot, the
                     assignment a[k] = pivot may be incorrect,
                     if a[great] and pivot are floating-point
                     zeros of different signs. Therefore in float
                     and double sorting methods we have to use
                     more accurate assignment a[k] = a[great].                    
                </comment>
                <comment line="522">
                    Sort left and right parts recursively.
                     All elements from center part are equal
                     and, therefore, already sorted.                    
                </comment>
                <declaration name="length" type="int" line="202"/>
                <scope line="205">
                    <scope line="206">
                        <scope line="212">
                            <declaration name="ai" type="int" line="213"/>
                            <scope line="214">
                                <scope line="216"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="222">
                        <scope line="226">
                            <scope line="227"/>
                        </scope>
                        <scope line="240">
                            <declaration name="a1" type="int" line="241"/>
                            <scope line="243"/>
                            <scope line="246"/>
                            <scope line="251"/>
                        </scope>
                        <declaration name="last" type="int" line="256"/>
                        <scope line="258"/>
                    </scope>
                </scope>
                <declaration name="seventh" type="int" line="267"/>
                <declaration name="e3" type="int" line="276"/>
                <declaration name="e2" type="int" line="277"/>
                <declaration name="e1" type="int" line="278"/>
                <declaration name="e4" type="int" line="279"/>
                <declaration name="e5" type="int" line="280"/>
                <scope line="283">
                    <declaration name="t" type="int" line="283"/>
                </scope>
                <scope line="285">
                    <declaration name="t" type="int" line="285"/>
                    <scope line="286"/>
                </scope>
                <scope line="288">
                    <declaration name="t" type="int" line="288"/>
                    <scope line="289">
                        <scope line="290"/>
                    </scope>
                </scope>
                <scope line="293">
                    <declaration name="t" type="int" line="293"/>
                    <scope line="294">
                        <scope line="295">
                            <scope line="296"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="less" type="int" line="302"/>
                <declaration name="great" type="int" line="303"/>
                <scope line="305">
                    <declaration name="pivot1" type="int" line="311"/>
                    <declaration name="pivot2" type="int" line="312"/>
                    <scope line="349">
                        <declaration name="ak" type="int" line="350"/>
                        <scope line="351"/>
                        <scope line="359">
                            <scope line="360">
                                <scope line="361"/>
                            </scope>
                            <scope line="365"/>
                            <scope line="369"/>
                        </scope>
                    </scope>
                    <scope line="393">
                        <scope line="397"/>
                        <scope line="401"/>
                        <scope line="425">
                            <declaration name="ak" type="int" line="426"/>
                            <scope line="427"/>
                            <scope line="431">
                                <scope line="432">
                                    <scope line="433"/>
                                </scope>
                                <scope line="437"/>
                                <scope line="449"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="461">
                    <declaration name="pivot" type="int" line="466"/>
                    <scope line="488">
                        <scope line="489"/>
                        <declaration name="ak" type="int" line="492"/>
                        <scope line="493"/>
                        <scope line="497">
                            <scope line="498"/>
                            <scope line="501"/>
                            <scope line="505"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="531">
                Sorts the specified array.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="536">
                <params>
                    <param name="a" type="long[]"/>
                </params>
            </method>
            <javadoc line="540">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="547">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="549">
                    Use Quicksort on small arrays                    
                </comment>
                <comment line="555">
                    Index run[i] is the start of i-th run
                     (ascending or descending sequence).                    
                </comment>
                <comment line="562">
                    Check if the array is nearly sorted                    
                </comment>
                <comment line="564">
                    ascending                    
                </comment>
                <comment line="566">
                    descending                    
                </comment>
                <comment line="571">
                    equal                    
                </comment>
                <comment line="580">
                    The array is not highly structured,
                     use Quicksort instead of merge sort.                    
                </comment>
                <comment line="590">
                    Check special cases                    
                </comment>
                <comment line="591">
                    The last run contains one element                    
                </comment>
                <comment line="593">
                    The array is already sorted                    
                </comment>
                <comment line="597">
                    Create temporary array, which is used for merging.
                     Implementation note: variable &quot;right&quot; is increased by 1.                    
                </comment>
                <comment line="611">
                    Merging                    
                </comment>
                <scope line="549"/>
                <declaration name="run" type="int[]" line="558"/>
                <declaration name="count" type="int" line="559"/>
                <scope line="562">
                    <scope line="563"/>
                    <scope line="565">
                        <scope line="567">
                            <declaration name="t" type="long" line="568"/>
                        </scope>
                    </scope>
                    <scope line="570">
                        <scope line="571">
                            <scope line="572"/>
                        </scope>
                    </scope>
                    <scope line="583"/>
                </scope>
                <scope line="590"/>
                <scope line="592"/>
                <declaration name="b" type="long[]" line="600"/>
                <declaration name="odd" type="byte" line="600"/>
                <scope line="603"/>
                <scope line="606"/>
                <scope line="611">
                    <scope line="612">
                        <declaration name="hi" type="int" line="613"/>
                        <scope line="614">
                            <scope line="615"/>
                            <scope line="617"/>
                        </scope>
                    </scope>
                    <scope line="623"/>
                    <declaration name="t" type="long[]" line="629"/>
                </scope>
            </method>
            <javadoc line="633">
                Sorts the specified range of the array by Dual-Pivot Quicksort.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
                <param>
                    leftmost indicates if this part is the leftmost in the range                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="641">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                    <param name="leftmost" type="boolean"/>
                </params>
                <comment line="645">
                    Use insertion sort on tiny arrays                    
                </comment>
                <comment line="648">
                    Traditional (without sentinel) insertion sort,
                     optimized for server VM, is used in case of
                     the leftmost part.                    
                </comment>
                <comment line="664">
                    Skip the longest ascending sequence.                    
                </comment>
                <comment line="673">
                    Every element from adjoining part plays the role
                     of sentinel, therefore this allows us to avoid the
                     left range check on each iteration. Moreover, we use
                     the more optimized algorithm, so called pair insertion
                     sort, which is faster (in the context of Quicksort)
                     than traditional implementation of insertion sort.                    
                </comment>
                <comment line="707">
                    Inexpensive approximation of length / 7                    
                </comment>
                <comment line="710">
                    Sort five evenly spaced elements around (and including) the
                     center element in the range. These elements will be used for
                     pivot selection as described below. The choice for spacing
                     these elements was empirically determined to work well on
                     a wide variety of inputs.                    
                </comment>
                <comment line="717">
                    The midpoint                    
                </comment>
                <comment line="723">
                    Sort these elements using insertion sort                    
                </comment>
                <comment line="742">
                    Pointers                    
                </comment>
                <comment line="743">
                    The index of the first element of center part                    
                </comment>
                <comment line="744">
                    The index before the first element of right part                    
                </comment>
                <comment line="747">
                    Use the second and fourth of the five sorted elements as pivots.
                     These values are inexpensive approximations of the first and
                     second terciles of the array. Note that pivot1 &lt;= pivot2.                    
                </comment>
                <comment line="755">
                    The first and the last elements to be sorted are moved to the
                     locations formerly occupied by the pivots. When partitioning
                     is complete, the pivots are swapped back into their final
                     positions, and excluded from subsequent sorting.                    
                </comment>
                <comment line="764">
                    Skip elements, which are less or greater than pivot values.                    
                </comment>
                <comment line="770">
                    Partitioning:
                    
                       left part           center part                   right part
                     +--------------------------------------------------------------+
                     |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |
                     +--------------------------------------------------------------+
                                   ^                          ^       ^
                                   |                          |       |
                                  less                        k     great
                    
                     Invariants:
                    
                                  all in (left, less)   &lt; pivot1
                        pivot1 &lt;= all in [less, k)     &lt;= pivot2
                                  all in (great, right) &gt; pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="792">
                    Move a[k] to left part                    
                </comment>
                <comment line="794">
                    Here and below we use &quot;a[i] = b; i++;&quot; instead
                     of &quot;a[i++] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="800">
                    Move a[k] to right part                    
                </comment>
                <comment line="806">
                    a[great] &lt;= pivot2                    
                </comment>
                <comment line="810">
                    pivot1 &lt;= a[great] &lt;= pivot2                    
                </comment>
                <comment line="813">
                    Here and below we use &quot;a[i] = b; i--;&quot; instead
                     of &quot;a[i--] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="822">
                    Swap pivots into their final positions                    
                </comment>
                <comment line="826">
                    Sort left and right parts recursively, excluding known pivots                    
                </comment>
                <comment line="830">
                    If center part is too large (comprises &gt; 47 of the array),
                     swap internal pivot values to ends.                    
                </comment>
                <comment line="835">
                    Skip elements, which are equal to pivot values.                    
                </comment>
                <comment line="846">
                    Partitioning:
                    
                       left part         center part                  right part
                     +----------------------------------------------------------+
                     | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |
                     +----------------------------------------------------------+
                                  ^                        ^       ^
                                  |                        |       |
                                 less                      k     great
                    
                     Invariants:
                    
                                  all in (,  less) == pivot1
                         pivot1 &lt; all in [less,  k)  &lt; pivot2
                                  all in (great, ) == pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="868">
                    Move a[k] to left part                    
                </comment>
                <comment line="872">
                    Move a[k] to right part                    
                </comment>
                <comment line="878">
                    a[great] &lt; pivot2                    
                </comment>
                <comment line="880">
                    Even though a[great] equals to pivot1, the
                     assignment a[less] = pivot1 may be incorrect,
                     if a[great] and pivot1 are floating-point zeros
                     of different signs. Therefore in float and
                     double sorting methods we have to use more
                     accurate assignment a[less] = a[great].                    
                </comment>
                <comment line="890">
                    pivot1 &lt; a[great] &lt; pivot2                    
                </comment>
                <comment line="899">
                    Sort center part recursively                    
                </comment>
                <comment line="902">
                    Partitioning with one pivot                    
                </comment>
                <comment line="903">
                    Use the third of the five sorted elements as pivot.
                     This value is inexpensive approximation of the median.                    
                </comment>
                <comment line="909">
                    Partitioning degenerates to the traditional 3-way
                     (or &quot;Dutch National Flag&quot;) schema:
                    
                       left part    center part              right part
                     +-------------------------------------------------+
                     |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |
                     +-------------------------------------------------+
                                  ^              ^        ^
                                  |              |        |
                                 less            k      great
                    
                     Invariants:
                    
                       all in (left, less)   &lt; pivot
                       all in [less, k)     == pivot
                       all in (great, right) &gt; pivot
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="934">
                    Move a[k] to left part                    
                </comment>
                <comment line="938">
                    a[k] &gt; pivot - Move a[k] to right part                    
                </comment>
                <comment line="942">
                    a[great] &lt;= pivot                    
                </comment>
                <comment line="946">
                    a[great] == pivot                    
                </comment>
                <comment line="947">
                    Even though a[great] equals to pivot, the
                     assignment a[k] = pivot may be incorrect,
                     if a[great] and pivot are floating-point
                     zeros of different signs. Therefore in float
                     and double sorting methods we have to use
                     more accurate assignment a[k] = a[great].                    
                </comment>
                <comment line="962">
                    Sort left and right parts recursively.
                     All elements from center part are equal
                     and, therefore, already sorted.                    
                </comment>
                <declaration name="length" type="int" line="642"/>
                <scope line="645">
                    <scope line="646">
                        <scope line="652">
                            <declaration name="ai" type="long" line="653"/>
                            <scope line="654">
                                <scope line="656"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="662">
                        <scope line="666">
                            <scope line="667"/>
                        </scope>
                        <scope line="680">
                            <declaration name="a1" type="long" line="681"/>
                            <scope line="683"/>
                            <scope line="686"/>
                            <scope line="691"/>
                        </scope>
                        <declaration name="last" type="long" line="696"/>
                        <scope line="698"/>
                    </scope>
                </scope>
                <declaration name="seventh" type="int" line="707"/>
                <declaration name="e3" type="int" line="716"/>
                <declaration name="e2" type="int" line="717"/>
                <declaration name="e1" type="int" line="718"/>
                <declaration name="e4" type="int" line="719"/>
                <declaration name="e5" type="int" line="720"/>
                <scope line="723">
                    <declaration name="t" type="long" line="723"/>
                </scope>
                <scope line="725">
                    <declaration name="t" type="long" line="725"/>
                    <scope line="726"/>
                </scope>
                <scope line="728">
                    <declaration name="t" type="long" line="728"/>
                    <scope line="729">
                        <scope line="730"/>
                    </scope>
                </scope>
                <scope line="733">
                    <declaration name="t" type="long" line="733"/>
                    <scope line="734">
                        <scope line="735">
                            <scope line="736"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="less" type="int" line="742"/>
                <declaration name="great" type="int" line="743"/>
                <scope line="745">
                    <declaration name="pivot1" type="long" line="751"/>
                    <declaration name="pivot2" type="long" line="752"/>
                    <scope line="789">
                        <declaration name="ak" type="long" line="790"/>
                        <scope line="791"/>
                        <scope line="799">
                            <scope line="800">
                                <scope line="801"/>
                            </scope>
                            <scope line="805"/>
                            <scope line="809"/>
                        </scope>
                    </scope>
                    <scope line="833">
                        <scope line="837"/>
                        <scope line="841"/>
                        <scope line="865">
                            <declaration name="ak" type="long" line="866"/>
                            <scope line="867"/>
                            <scope line="871">
                                <scope line="872">
                                    <scope line="873"/>
                                </scope>
                                <scope line="877"/>
                                <scope line="889"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="901">
                    <declaration name="pivot" type="long" line="906"/>
                    <scope line="928">
                        <scope line="929"/>
                        <declaration name="ak" type="long" line="932"/>
                        <scope line="933"/>
                        <scope line="937">
                            <scope line="938"/>
                            <scope line="941"/>
                            <scope line="945"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="971">
                Sorts the specified array.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="976">
                <params>
                    <param name="a" type="short[]"/>
                </params>
            </method>
            <javadoc line="980">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="987">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="989">
                    Use counting sort on large arrays                    
                </comment>
                <comment line="1005">
                    Use Dual-Pivot Quicksort on small arrays                    
                </comment>
                <scope line="989">
                    <declaration name="count" type="int[]" line="990"/>
                    <scope line="995">
                        <declaration name="value" type="short" line="997"/>
                        <declaration name="s" type="int" line="998"/>
                        <scope line="1000"/>
                    </scope>
                </scope>
                <scope line="1004"/>
            </method>
            <declaration name="NUM_SHORT_VALUES" type="int" line="1009"/>
            <javadoc line="1009">
                The number of distinct short values.                
            </javadoc>
            <javadoc line="1012">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="doSort" type="void" line="1019">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="1021">
                    Use Quicksort on small arrays                    
                </comment>
                <comment line="1027">
                    Index run[i] is the start of i-th run
                     (ascending or descending sequence).                    
                </comment>
                <comment line="1034">
                    Check if the array is nearly sorted                    
                </comment>
                <comment line="1036">
                    ascending                    
                </comment>
                <comment line="1038">
                    descending                    
                </comment>
                <comment line="1043">
                    equal                    
                </comment>
                <comment line="1052">
                    The array is not highly structured,
                     use Quicksort instead of merge sort.                    
                </comment>
                <comment line="1062">
                    Check special cases                    
                </comment>
                <comment line="1063">
                    The last run contains one element                    
                </comment>
                <comment line="1065">
                    The array is already sorted                    
                </comment>
                <comment line="1069">
                    Create temporary array, which is used for merging.
                     Implementation note: variable &quot;right&quot; is increased by 1.                    
                </comment>
                <comment line="1083">
                    Merging                    
                </comment>
                <scope line="1021"/>
                <declaration name="run" type="int[]" line="1030"/>
                <declaration name="count" type="int" line="1031"/>
                <scope line="1034">
                    <scope line="1035"/>
                    <scope line="1037">
                        <scope line="1039">
                            <declaration name="t" type="short" line="1040"/>
                        </scope>
                    </scope>
                    <scope line="1042">
                        <scope line="1043">
                            <scope line="1044"/>
                        </scope>
                    </scope>
                    <scope line="1055"/>
                </scope>
                <scope line="1062"/>
                <scope line="1064"/>
                <declaration name="b" type="short[]" line="1072"/>
                <declaration name="odd" type="byte" line="1072"/>
                <scope line="1075"/>
                <scope line="1078"/>
                <scope line="1083">
                    <scope line="1084">
                        <declaration name="hi" type="int" line="1085"/>
                        <scope line="1086">
                            <scope line="1087"/>
                            <scope line="1089"/>
                        </scope>
                    </scope>
                    <scope line="1095"/>
                    <declaration name="t" type="short[]" line="1101"/>
                </scope>
            </method>
            <javadoc line="1105">
                Sorts the specified range of the array by Dual-Pivot Quicksort.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
                <param>
                    leftmost indicates if this part is the leftmost in the range                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="1113">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                    <param name="leftmost" type="boolean"/>
                </params>
                <comment line="1117">
                    Use insertion sort on tiny arrays                    
                </comment>
                <comment line="1120">
                    Traditional (without sentinel) insertion sort,
                     optimized for server VM, is used in case of
                     the leftmost part.                    
                </comment>
                <comment line="1136">
                    Skip the longest ascending sequence.                    
                </comment>
                <comment line="1145">
                    Every element from adjoining part plays the role
                     of sentinel, therefore this allows us to avoid the
                     left range check on each iteration. Moreover, we use
                     the more optimized algorithm, so called pair insertion
                     sort, which is faster (in the context of Quicksort)
                     than traditional implementation of insertion sort.                    
                </comment>
                <comment line="1179">
                    Inexpensive approximation of length / 7                    
                </comment>
                <comment line="1182">
                    Sort five evenly spaced elements around (and including) the
                     center element in the range. These elements will be used for
                     pivot selection as described below. The choice for spacing
                     these elements was empirically determined to work well on
                     a wide variety of inputs.                    
                </comment>
                <comment line="1189">
                    The midpoint                    
                </comment>
                <comment line="1195">
                    Sort these elements using insertion sort                    
                </comment>
                <comment line="1214">
                    Pointers                    
                </comment>
                <comment line="1215">
                    The index of the first element of center part                    
                </comment>
                <comment line="1216">
                    The index before the first element of right part                    
                </comment>
                <comment line="1219">
                    Use the second and fourth of the five sorted elements as pivots.
                     These values are inexpensive approximations of the first and
                     second terciles of the array. Note that pivot1 &lt;= pivot2.                    
                </comment>
                <comment line="1227">
                    The first and the last elements to be sorted are moved to the
                     locations formerly occupied by the pivots. When partitioning
                     is complete, the pivots are swapped back into their final
                     positions, and excluded from subsequent sorting.                    
                </comment>
                <comment line="1236">
                    Skip elements, which are less or greater than pivot values.                    
                </comment>
                <comment line="1242">
                    Partitioning:
                    
                       left part           center part                   right part
                     +--------------------------------------------------------------+
                     |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |
                     +--------------------------------------------------------------+
                                   ^                          ^       ^
                                   |                          |       |
                                  less                        k     great
                    
                     Invariants:
                    
                                  all in (left, less)   &lt; pivot1
                        pivot1 &lt;= all in [less, k)     &lt;= pivot2
                                  all in (great, right) &gt; pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="1264">
                    Move a[k] to left part                    
                </comment>
                <comment line="1266">
                    Here and below we use &quot;a[i] = b; i++;&quot; instead
                     of &quot;a[i++] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="1272">
                    Move a[k] to right part                    
                </comment>
                <comment line="1278">
                    a[great] &lt;= pivot2                    
                </comment>
                <comment line="1282">
                    pivot1 &lt;= a[great] &lt;= pivot2                    
                </comment>
                <comment line="1285">
                    Here and below we use &quot;a[i] = b; i--;&quot; instead
                     of &quot;a[i--] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="1294">
                    Swap pivots into their final positions                    
                </comment>
                <comment line="1298">
                    Sort left and right parts recursively, excluding known pivots                    
                </comment>
                <comment line="1302">
                    If center part is too large (comprises &gt; 47 of the array),
                     swap internal pivot values to ends.                    
                </comment>
                <comment line="1307">
                    Skip elements, which are equal to pivot values.                    
                </comment>
                <comment line="1318">
                    Partitioning:
                    
                       left part         center part                  right part
                     +----------------------------------------------------------+
                     | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |
                     +----------------------------------------------------------+
                                  ^                        ^       ^
                                  |                        |       |
                                 less                      k     great
                    
                     Invariants:
                    
                                  all in (,  less) == pivot1
                         pivot1 &lt; all in [less,  k)  &lt; pivot2
                                  all in (great, ) == pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="1340">
                    Move a[k] to left part                    
                </comment>
                <comment line="1344">
                    Move a[k] to right part                    
                </comment>
                <comment line="1350">
                    a[great] &lt; pivot2                    
                </comment>
                <comment line="1352">
                    Even though a[great] equals to pivot1, the
                     assignment a[less] = pivot1 may be incorrect,
                     if a[great] and pivot1 are floating-point zeros
                     of different signs. Therefore in float and
                     double sorting methods we have to use more
                     accurate assignment a[less] = a[great].                    
                </comment>
                <comment line="1362">
                    pivot1 &lt; a[great] &lt; pivot2                    
                </comment>
                <comment line="1371">
                    Sort center part recursively                    
                </comment>
                <comment line="1374">
                    Partitioning with one pivot                    
                </comment>
                <comment line="1375">
                    Use the third of the five sorted elements as pivot.
                     This value is inexpensive approximation of the median.                    
                </comment>
                <comment line="1381">
                    Partitioning degenerates to the traditional 3-way
                     (or &quot;Dutch National Flag&quot;) schema:
                    
                       left part    center part              right part
                     +-------------------------------------------------+
                     |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |
                     +-------------------------------------------------+
                                  ^              ^        ^
                                  |              |        |
                                 less            k      great
                    
                     Invariants:
                    
                       all in (left, less)   &lt; pivot
                       all in [less, k)     == pivot
                       all in (great, right) &gt; pivot
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="1406">
                    Move a[k] to left part                    
                </comment>
                <comment line="1410">
                    a[k] &gt; pivot - Move a[k] to right part                    
                </comment>
                <comment line="1414">
                    a[great] &lt;= pivot                    
                </comment>
                <comment line="1418">
                    a[great] == pivot                    
                </comment>
                <comment line="1419">
                    Even though a[great] equals to pivot, the
                     assignment a[k] = pivot may be incorrect,
                     if a[great] and pivot are floating-point
                     zeros of different signs. Therefore in float
                     and double sorting methods we have to use
                     more accurate assignment a[k] = a[great].                    
                </comment>
                <comment line="1434">
                    Sort left and right parts recursively.
                     All elements from center part are equal
                     and, therefore, already sorted.                    
                </comment>
                <declaration name="length" type="int" line="1114"/>
                <scope line="1117">
                    <scope line="1118">
                        <scope line="1124">
                            <declaration name="ai" type="short" line="1125"/>
                            <scope line="1126">
                                <scope line="1128"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1134">
                        <scope line="1138">
                            <scope line="1139"/>
                        </scope>
                        <scope line="1152">
                            <declaration name="a1" type="short" line="1153"/>
                            <scope line="1155"/>
                            <scope line="1158"/>
                            <scope line="1163"/>
                        </scope>
                        <declaration name="last" type="short" line="1168"/>
                        <scope line="1170"/>
                    </scope>
                </scope>
                <declaration name="seventh" type="int" line="1179"/>
                <declaration name="e3" type="int" line="1188"/>
                <declaration name="e2" type="int" line="1189"/>
                <declaration name="e1" type="int" line="1190"/>
                <declaration name="e4" type="int" line="1191"/>
                <declaration name="e5" type="int" line="1192"/>
                <scope line="1195">
                    <declaration name="t" type="short" line="1195"/>
                </scope>
                <scope line="1197">
                    <declaration name="t" type="short" line="1197"/>
                    <scope line="1198"/>
                </scope>
                <scope line="1200">
                    <declaration name="t" type="short" line="1200"/>
                    <scope line="1201">
                        <scope line="1202"/>
                    </scope>
                </scope>
                <scope line="1205">
                    <declaration name="t" type="short" line="1205"/>
                    <scope line="1206">
                        <scope line="1207">
                            <scope line="1208"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="less" type="int" line="1214"/>
                <declaration name="great" type="int" line="1215"/>
                <scope line="1217">
                    <declaration name="pivot1" type="short" line="1223"/>
                    <declaration name="pivot2" type="short" line="1224"/>
                    <scope line="1261">
                        <declaration name="ak" type="short" line="1262"/>
                        <scope line="1263"/>
                        <scope line="1271">
                            <scope line="1272">
                                <scope line="1273"/>
                            </scope>
                            <scope line="1277"/>
                            <scope line="1281"/>
                        </scope>
                    </scope>
                    <scope line="1305">
                        <scope line="1309"/>
                        <scope line="1313"/>
                        <scope line="1337">
                            <declaration name="ak" type="short" line="1338"/>
                            <scope line="1339"/>
                            <scope line="1343">
                                <scope line="1344">
                                    <scope line="1345"/>
                                </scope>
                                <scope line="1349"/>
                                <scope line="1361"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1373">
                    <declaration name="pivot" type="short" line="1378"/>
                    <scope line="1400">
                        <scope line="1401"/>
                        <declaration name="ak" type="short" line="1404"/>
                        <scope line="1405"/>
                        <scope line="1409">
                            <scope line="1410"/>
                            <scope line="1413"/>
                            <scope line="1417"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1443">
                Sorts the specified array.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="1448">
                <params>
                    <param name="a" type="char[]"/>
                </params>
            </method>
            <javadoc line="1452">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="1459">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="1461">
                    Use counting sort on large arrays                    
                </comment>
                <comment line="1477">
                    Use Dual-Pivot Quicksort on small arrays                    
                </comment>
                <scope line="1461">
                    <declaration name="count" type="int[]" line="1462"/>
                    <scope line="1467">
                        <declaration name="value" type="char" line="1469"/>
                        <declaration name="s" type="int" line="1470"/>
                        <scope line="1472"/>
                    </scope>
                </scope>
                <scope line="1476"/>
            </method>
            <declaration name="NUM_CHAR_VALUES" type="int" line="1481"/>
            <javadoc line="1481">
                The number of distinct char values.                
            </javadoc>
            <javadoc line="1484">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="doSort" type="void" line="1491">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="1493">
                    Use Quicksort on small arrays                    
                </comment>
                <comment line="1499">
                    Index run[i] is the start of i-th run
                     (ascending or descending sequence).                    
                </comment>
                <comment line="1506">
                    Check if the array is nearly sorted                    
                </comment>
                <comment line="1508">
                    ascending                    
                </comment>
                <comment line="1510">
                    descending                    
                </comment>
                <comment line="1515">
                    equal                    
                </comment>
                <comment line="1524">
                    The array is not highly structured,
                     use Quicksort instead of merge sort.                    
                </comment>
                <comment line="1534">
                    Check special cases                    
                </comment>
                <comment line="1535">
                    The last run contains one element                    
                </comment>
                <comment line="1537">
                    The array is already sorted                    
                </comment>
                <comment line="1541">
                    Create temporary array, which is used for merging.
                     Implementation note: variable &quot;right&quot; is increased by 1.                    
                </comment>
                <comment line="1555">
                    Merging                    
                </comment>
                <scope line="1493"/>
                <declaration name="run" type="int[]" line="1502"/>
                <declaration name="count" type="int" line="1503"/>
                <scope line="1506">
                    <scope line="1507"/>
                    <scope line="1509">
                        <scope line="1511">
                            <declaration name="t" type="char" line="1512"/>
                        </scope>
                    </scope>
                    <scope line="1514">
                        <scope line="1515">
                            <scope line="1516"/>
                        </scope>
                    </scope>
                    <scope line="1527"/>
                </scope>
                <scope line="1534"/>
                <scope line="1536"/>
                <declaration name="b" type="char[]" line="1544"/>
                <declaration name="odd" type="byte" line="1544"/>
                <scope line="1547"/>
                <scope line="1550"/>
                <scope line="1555">
                    <scope line="1556">
                        <declaration name="hi" type="int" line="1557"/>
                        <scope line="1558">
                            <scope line="1559"/>
                            <scope line="1561"/>
                        </scope>
                    </scope>
                    <scope line="1567"/>
                    <declaration name="t" type="char[]" line="1573"/>
                </scope>
            </method>
            <javadoc line="1577">
                Sorts the specified range of the array by Dual-Pivot Quicksort.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
                <param>
                    leftmost indicates if this part is the leftmost in the range                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="1585">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                    <param name="leftmost" type="boolean"/>
                </params>
                <comment line="1589">
                    Use insertion sort on tiny arrays                    
                </comment>
                <comment line="1592">
                    Traditional (without sentinel) insertion sort,
                     optimized for server VM, is used in case of
                     the leftmost part.                    
                </comment>
                <comment line="1608">
                    Skip the longest ascending sequence.                    
                </comment>
                <comment line="1617">
                    Every element from adjoining part plays the role
                     of sentinel, therefore this allows us to avoid the
                     left range check on each iteration. Moreover, we use
                     the more optimized algorithm, so called pair insertion
                     sort, which is faster (in the context of Quicksort)
                     than traditional implementation of insertion sort.                    
                </comment>
                <comment line="1651">
                    Inexpensive approximation of length / 7                    
                </comment>
                <comment line="1654">
                    Sort five evenly spaced elements around (and including) the
                     center element in the range. These elements will be used for
                     pivot selection as described below. The choice for spacing
                     these elements was empirically determined to work well on
                     a wide variety of inputs.                    
                </comment>
                <comment line="1661">
                    The midpoint                    
                </comment>
                <comment line="1667">
                    Sort these elements using insertion sort                    
                </comment>
                <comment line="1686">
                    Pointers                    
                </comment>
                <comment line="1687">
                    The index of the first element of center part                    
                </comment>
                <comment line="1688">
                    The index before the first element of right part                    
                </comment>
                <comment line="1691">
                    Use the second and fourth of the five sorted elements as pivots.
                     These values are inexpensive approximations of the first and
                     second terciles of the array. Note that pivot1 &lt;= pivot2.                    
                </comment>
                <comment line="1699">
                    The first and the last elements to be sorted are moved to the
                     locations formerly occupied by the pivots. When partitioning
                     is complete, the pivots are swapped back into their final
                     positions, and excluded from subsequent sorting.                    
                </comment>
                <comment line="1708">
                    Skip elements, which are less or greater than pivot values.                    
                </comment>
                <comment line="1714">
                    Partitioning:
                    
                       left part           center part                   right part
                     +--------------------------------------------------------------+
                     |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |
                     +--------------------------------------------------------------+
                                   ^                          ^       ^
                                   |                          |       |
                                  less                        k     great
                    
                     Invariants:
                    
                                  all in (left, less)   &lt; pivot1
                        pivot1 &lt;= all in [less, k)     &lt;= pivot2
                                  all in (great, right) &gt; pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="1736">
                    Move a[k] to left part                    
                </comment>
                <comment line="1738">
                    Here and below we use &quot;a[i] = b; i++;&quot; instead
                     of &quot;a[i++] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="1744">
                    Move a[k] to right part                    
                </comment>
                <comment line="1750">
                    a[great] &lt;= pivot2                    
                </comment>
                <comment line="1754">
                    pivot1 &lt;= a[great] &lt;= pivot2                    
                </comment>
                <comment line="1757">
                    Here and below we use &quot;a[i] = b; i--;&quot; instead
                     of &quot;a[i--] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="1766">
                    Swap pivots into their final positions                    
                </comment>
                <comment line="1770">
                    Sort left and right parts recursively, excluding known pivots                    
                </comment>
                <comment line="1774">
                    If center part is too large (comprises &gt; 47 of the array),
                     swap internal pivot values to ends.                    
                </comment>
                <comment line="1779">
                    Skip elements, which are equal to pivot values.                    
                </comment>
                <comment line="1790">
                    Partitioning:
                    
                       left part         center part                  right part
                     +----------------------------------------------------------+
                     | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |
                     +----------------------------------------------------------+
                                  ^                        ^       ^
                                  |                        |       |
                                 less                      k     great
                    
                     Invariants:
                    
                                  all in (,  less) == pivot1
                         pivot1 &lt; all in [less,  k)  &lt; pivot2
                                  all in (great, ) == pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="1812">
                    Move a[k] to left part                    
                </comment>
                <comment line="1816">
                    Move a[k] to right part                    
                </comment>
                <comment line="1822">
                    a[great] &lt; pivot2                    
                </comment>
                <comment line="1824">
                    Even though a[great] equals to pivot1, the
                     assignment a[less] = pivot1 may be incorrect,
                     if a[great] and pivot1 are floating-point zeros
                     of different signs. Therefore in float and
                     double sorting methods we have to use more
                     accurate assignment a[less] = a[great].                    
                </comment>
                <comment line="1834">
                    pivot1 &lt; a[great] &lt; pivot2                    
                </comment>
                <comment line="1843">
                    Sort center part recursively                    
                </comment>
                <comment line="1846">
                    Partitioning with one pivot                    
                </comment>
                <comment line="1847">
                    Use the third of the five sorted elements as pivot.
                     This value is inexpensive approximation of the median.                    
                </comment>
                <comment line="1853">
                    Partitioning degenerates to the traditional 3-way
                     (or &quot;Dutch National Flag&quot;) schema:
                    
                       left part    center part              right part
                     +-------------------------------------------------+
                     |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |
                     +-------------------------------------------------+
                                  ^              ^        ^
                                  |              |        |
                                 less            k      great
                    
                     Invariants:
                    
                       all in (left, less)   &lt; pivot
                       all in [less, k)     == pivot
                       all in (great, right) &gt; pivot
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="1878">
                    Move a[k] to left part                    
                </comment>
                <comment line="1882">
                    a[k] &gt; pivot - Move a[k] to right part                    
                </comment>
                <comment line="1886">
                    a[great] &lt;= pivot                    
                </comment>
                <comment line="1890">
                    a[great] == pivot                    
                </comment>
                <comment line="1891">
                    Even though a[great] equals to pivot, the
                     assignment a[k] = pivot may be incorrect,
                     if a[great] and pivot are floating-point
                     zeros of different signs. Therefore in float
                     and double sorting methods we have to use
                     more accurate assignment a[k] = a[great].                    
                </comment>
                <comment line="1906">
                    Sort left and right parts recursively.
                     All elements from center part are equal
                     and, therefore, already sorted.                    
                </comment>
                <declaration name="length" type="int" line="1586"/>
                <scope line="1589">
                    <scope line="1590">
                        <scope line="1596">
                            <declaration name="ai" type="char" line="1597"/>
                            <scope line="1598">
                                <scope line="1600"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1606">
                        <scope line="1610">
                            <scope line="1611"/>
                        </scope>
                        <scope line="1624">
                            <declaration name="a1" type="char" line="1625"/>
                            <scope line="1627"/>
                            <scope line="1630"/>
                            <scope line="1635"/>
                        </scope>
                        <declaration name="last" type="char" line="1640"/>
                        <scope line="1642"/>
                    </scope>
                </scope>
                <declaration name="seventh" type="int" line="1651"/>
                <declaration name="e3" type="int" line="1660"/>
                <declaration name="e2" type="int" line="1661"/>
                <declaration name="e1" type="int" line="1662"/>
                <declaration name="e4" type="int" line="1663"/>
                <declaration name="e5" type="int" line="1664"/>
                <scope line="1667">
                    <declaration name="t" type="char" line="1667"/>
                </scope>
                <scope line="1669">
                    <declaration name="t" type="char" line="1669"/>
                    <scope line="1670"/>
                </scope>
                <scope line="1672">
                    <declaration name="t" type="char" line="1672"/>
                    <scope line="1673">
                        <scope line="1674"/>
                    </scope>
                </scope>
                <scope line="1677">
                    <declaration name="t" type="char" line="1677"/>
                    <scope line="1678">
                        <scope line="1679">
                            <scope line="1680"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="less" type="int" line="1686"/>
                <declaration name="great" type="int" line="1687"/>
                <scope line="1689">
                    <declaration name="pivot1" type="char" line="1695"/>
                    <declaration name="pivot2" type="char" line="1696"/>
                    <scope line="1733">
                        <declaration name="ak" type="char" line="1734"/>
                        <scope line="1735"/>
                        <scope line="1743">
                            <scope line="1744">
                                <scope line="1745"/>
                            </scope>
                            <scope line="1749"/>
                            <scope line="1753"/>
                        </scope>
                    </scope>
                    <scope line="1777">
                        <scope line="1781"/>
                        <scope line="1785"/>
                        <scope line="1809">
                            <declaration name="ak" type="char" line="1810"/>
                            <scope line="1811"/>
                            <scope line="1815">
                                <scope line="1816">
                                    <scope line="1817"/>
                                </scope>
                                <scope line="1821"/>
                                <scope line="1833"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1845">
                    <declaration name="pivot" type="char" line="1850"/>
                    <scope line="1872">
                        <scope line="1873"/>
                        <declaration name="ak" type="char" line="1876"/>
                        <scope line="1877"/>
                        <scope line="1881">
                            <scope line="1882"/>
                            <scope line="1885"/>
                            <scope line="1889"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="NUM_BYTE_VALUES" type="int" line="1915"/>
            <javadoc line="1915">
                The number of distinct byte values.                
            </javadoc>
            <javadoc line="1918">
                Sorts the specified array.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="1923">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <javadoc line="1927">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="1934">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="1936">
                    Use counting sort on large arrays                    
                </comment>
                <comment line="1952">
                    Use insertion sort on small arrays                    
                </comment>
                <scope line="1936">
                    <declaration name="count" type="int[]" line="1937"/>
                    <scope line="1942">
                        <declaration name="value" type="byte" line="1944"/>
                        <declaration name="s" type="int" line="1945"/>
                        <scope line="1947"/>
                    </scope>
                </scope>
                <scope line="1951">
                    <scope line="1952">
                        <declaration name="ai" type="byte" line="1953"/>
                        <scope line="1954">
                            <scope line="1956"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1965">
                Sorts the specified array.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="1970">
                <params>
                    <param name="a" type="float[]"/>
                </params>
            </method>
            <javadoc line="1974">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="1981">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="1983">
                    Phase 1: Move NaNs to the end of the array.                    
                </comment>
                <comment line="1991">
                    a[k] is NaN                    
                </comment>
                <comment line="1998">
                    Phase 2: Sort everything except NaNs (which are already in place).                    
                </comment>
                <comment line="2003">
                    Phase 3: Place negative zeros before positive zeros.                    
                </comment>
                <comment line="2008">
                    Find the first zero, or first positive, or last negative element.                    
                </comment>
                <comment line="2022">
                    Skip the last negative value (if any) or all leading negative zeros.                    
                </comment>
                <comment line="2029">
                    Move negative zeros to the beginning of the sub-range.
                    
                     Partitioning:
                    
                     +----------------------------------------------------+
                     |   &lt; 0.0   |   -0.0   |   0.0   |   ?  ( &gt;= 0.0 )   |
                     +----------------------------------------------------+
                                  ^          ^         ^
                                  |          |         |
                                 left        p         k
                    
                     Invariants:
                    
                       all in (,  left)  &lt;  0.0
                       all in [left,  p) == -0.0
                       all in [p,     k) ==  0.0
                       all in [k, right] &gt;=  0.0
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="2055">
                    ak is -0.0f                    
                </comment>
                <scope line="1985"/>
                <scope line="1988">
                    <declaration name="ak" type="float" line="1989"/>
                    <scope line="1990"/>
                </scope>
                <declaration name="hi" type="int" line="2005"/>
                <scope line="2010">
                    <declaration name="middle" type="int" line="2011"/>
                    <declaration name="middleValue" type="float" line="2012"/>
                    <scope line="2014"/>
                    <scope line="2016"/>
                </scope>
                <scope line="2024"/>
                <scope line="2049">
                    <declaration name="ak" type="float" line="2050"/>
                    <scope line="2051"/>
                    <scope line="2054"/>
                </scope>
            </method>
            <javadoc line="2061">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="doSort" type="void" line="2068">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="2070">
                    Use Quicksort on small arrays                    
                </comment>
                <comment line="2076">
                    Index run[i] is the start of i-th run
                     (ascending or descending sequence).                    
                </comment>
                <comment line="2083">
                    Check if the array is nearly sorted                    
                </comment>
                <comment line="2085">
                    ascending                    
                </comment>
                <comment line="2087">
                    descending                    
                </comment>
                <comment line="2092">
                    equal                    
                </comment>
                <comment line="2101">
                    The array is not highly structured,
                     use Quicksort instead of merge sort.                    
                </comment>
                <comment line="2111">
                    Check special cases                    
                </comment>
                <comment line="2112">
                    The last run contains one element                    
                </comment>
                <comment line="2114">
                    The array is already sorted                    
                </comment>
                <comment line="2118">
                    Create temporary array, which is used for merging.
                     Implementation note: variable &quot;right&quot; is increased by 1.                    
                </comment>
                <comment line="2132">
                    Merging                    
                </comment>
                <scope line="2070"/>
                <declaration name="run" type="int[]" line="2079"/>
                <declaration name="count" type="int" line="2080"/>
                <scope line="2083">
                    <scope line="2084"/>
                    <scope line="2086">
                        <scope line="2088">
                            <declaration name="t" type="float" line="2089"/>
                        </scope>
                    </scope>
                    <scope line="2091">
                        <scope line="2092">
                            <scope line="2093"/>
                        </scope>
                    </scope>
                    <scope line="2104"/>
                </scope>
                <scope line="2111"/>
                <scope line="2113"/>
                <declaration name="b" type="float[]" line="2121"/>
                <declaration name="odd" type="byte" line="2121"/>
                <scope line="2124"/>
                <scope line="2127"/>
                <scope line="2132">
                    <scope line="2133">
                        <declaration name="hi" type="int" line="2134"/>
                        <scope line="2135">
                            <scope line="2136"/>
                            <scope line="2138"/>
                        </scope>
                    </scope>
                    <scope line="2144"/>
                    <declaration name="t" type="float[]" line="2150"/>
                </scope>
            </method>
            <javadoc line="2154">
                Sorts the specified range of the array by Dual-Pivot Quicksort.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
                <param>
                    leftmost indicates if this part is the leftmost in the range                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="2162">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                    <param name="leftmost" type="boolean"/>
                </params>
                <comment line="2166">
                    Use insertion sort on tiny arrays                    
                </comment>
                <comment line="2169">
                    Traditional (without sentinel) insertion sort,
                     optimized for server VM, is used in case of
                     the leftmost part.                    
                </comment>
                <comment line="2185">
                    Skip the longest ascending sequence.                    
                </comment>
                <comment line="2194">
                    Every element from adjoining part plays the role
                     of sentinel, therefore this allows us to avoid the
                     left range check on each iteration. Moreover, we use
                     the more optimized algorithm, so called pair insertion
                     sort, which is faster (in the context of Quicksort)
                     than traditional implementation of insertion sort.                    
                </comment>
                <comment line="2228">
                    Inexpensive approximation of length / 7                    
                </comment>
                <comment line="2231">
                    Sort five evenly spaced elements around (and including) the
                     center element in the range. These elements will be used for
                     pivot selection as described below. The choice for spacing
                     these elements was empirically determined to work well on
                     a wide variety of inputs.                    
                </comment>
                <comment line="2238">
                    The midpoint                    
                </comment>
                <comment line="2244">
                    Sort these elements using insertion sort                    
                </comment>
                <comment line="2263">
                    Pointers                    
                </comment>
                <comment line="2264">
                    The index of the first element of center part                    
                </comment>
                <comment line="2265">
                    The index before the first element of right part                    
                </comment>
                <comment line="2268">
                    Use the second and fourth of the five sorted elements as pivots.
                     These values are inexpensive approximations of the first and
                     second terciles of the array. Note that pivot1 &lt;= pivot2.                    
                </comment>
                <comment line="2276">
                    The first and the last elements to be sorted are moved to the
                     locations formerly occupied by the pivots. When partitioning
                     is complete, the pivots are swapped back into their final
                     positions, and excluded from subsequent sorting.                    
                </comment>
                <comment line="2285">
                    Skip elements, which are less or greater than pivot values.                    
                </comment>
                <comment line="2291">
                    Partitioning:
                    
                       left part           center part                   right part
                     +--------------------------------------------------------------+
                     |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |
                     +--------------------------------------------------------------+
                                   ^                          ^       ^
                                   |                          |       |
                                  less                        k     great
                    
                     Invariants:
                    
                                  all in (left, less)   &lt; pivot1
                        pivot1 &lt;= all in [less, k)     &lt;= pivot2
                                  all in (great, right) &gt; pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="2313">
                    Move a[k] to left part                    
                </comment>
                <comment line="2315">
                    Here and below we use &quot;a[i] = b; i++;&quot; instead
                     of &quot;a[i++] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="2321">
                    Move a[k] to right part                    
                </comment>
                <comment line="2327">
                    a[great] &lt;= pivot2                    
                </comment>
                <comment line="2331">
                    pivot1 &lt;= a[great] &lt;= pivot2                    
                </comment>
                <comment line="2334">
                    Here and below we use &quot;a[i] = b; i--;&quot; instead
                     of &quot;a[i--] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="2343">
                    Swap pivots into their final positions                    
                </comment>
                <comment line="2347">
                    Sort left and right parts recursively, excluding known pivots                    
                </comment>
                <comment line="2351">
                    If center part is too large (comprises &gt; 47 of the array),
                     swap internal pivot values to ends.                    
                </comment>
                <comment line="2356">
                    Skip elements, which are equal to pivot values.                    
                </comment>
                <comment line="2367">
                    Partitioning:
                    
                       left part         center part                  right part
                     +----------------------------------------------------------+
                     | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |
                     +----------------------------------------------------------+
                                  ^                        ^       ^
                                  |                        |       |
                                 less                      k     great
                    
                     Invariants:
                    
                                  all in (,  less) == pivot1
                         pivot1 &lt; all in [less,  k)  &lt; pivot2
                                  all in (great, ) == pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="2389">
                    Move a[k] to left part                    
                </comment>
                <comment line="2393">
                    Move a[k] to right part                    
                </comment>
                <comment line="2399">
                    a[great] &lt; pivot2                    
                </comment>
                <comment line="2401">
                    Even though a[great] equals to pivot1, the
                     assignment a[less] = pivot1 may be incorrect,
                     if a[great] and pivot1 are floating-point zeros
                     of different signs. Therefore in float and
                     double sorting methods we have to use more
                     accurate assignment a[less] = a[great].                    
                </comment>
                <comment line="2411">
                    pivot1 &lt; a[great] &lt; pivot2                    
                </comment>
                <comment line="2420">
                    Sort center part recursively                    
                </comment>
                <comment line="2423">
                    Partitioning with one pivot                    
                </comment>
                <comment line="2424">
                    Use the third of the five sorted elements as pivot.
                     This value is inexpensive approximation of the median.                    
                </comment>
                <comment line="2430">
                    Partitioning degenerates to the traditional 3-way
                     (or &quot;Dutch National Flag&quot;) schema:
                    
                       left part    center part              right part
                     +-------------------------------------------------+
                     |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |
                     +-------------------------------------------------+
                                  ^              ^        ^
                                  |              |        |
                                 less            k      great
                    
                     Invariants:
                    
                       all in (left, less)   &lt; pivot
                       all in [less, k)     == pivot
                       all in (great, right) &gt; pivot
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="2455">
                    Move a[k] to left part                    
                </comment>
                <comment line="2459">
                    a[k] &gt; pivot - Move a[k] to right part                    
                </comment>
                <comment line="2463">
                    a[great] &lt;= pivot                    
                </comment>
                <comment line="2467">
                    a[great] == pivot                    
                </comment>
                <comment line="2468">
                    Even though a[great] equals to pivot, the
                     assignment a[k] = pivot may be incorrect,
                     if a[great] and pivot are floating-point
                     zeros of different signs. Therefore in float
                     and double sorting methods we have to use
                     more accurate assignment a[k] = a[great].                    
                </comment>
                <comment line="2483">
                    Sort left and right parts recursively.
                     All elements from center part are equal
                     and, therefore, already sorted.                    
                </comment>
                <declaration name="length" type="int" line="2163"/>
                <scope line="2166">
                    <scope line="2167">
                        <scope line="2173">
                            <declaration name="ai" type="float" line="2174"/>
                            <scope line="2175">
                                <scope line="2177"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2183">
                        <scope line="2187">
                            <scope line="2188"/>
                        </scope>
                        <scope line="2201">
                            <declaration name="a1" type="float" line="2202"/>
                            <scope line="2204"/>
                            <scope line="2207"/>
                            <scope line="2212"/>
                        </scope>
                        <declaration name="last" type="float" line="2217"/>
                        <scope line="2219"/>
                    </scope>
                </scope>
                <declaration name="seventh" type="int" line="2228"/>
                <declaration name="e3" type="int" line="2237"/>
                <declaration name="e2" type="int" line="2238"/>
                <declaration name="e1" type="int" line="2239"/>
                <declaration name="e4" type="int" line="2240"/>
                <declaration name="e5" type="int" line="2241"/>
                <scope line="2244">
                    <declaration name="t" type="float" line="2244"/>
                </scope>
                <scope line="2246">
                    <declaration name="t" type="float" line="2246"/>
                    <scope line="2247"/>
                </scope>
                <scope line="2249">
                    <declaration name="t" type="float" line="2249"/>
                    <scope line="2250">
                        <scope line="2251"/>
                    </scope>
                </scope>
                <scope line="2254">
                    <declaration name="t" type="float" line="2254"/>
                    <scope line="2255">
                        <scope line="2256">
                            <scope line="2257"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="less" type="int" line="2263"/>
                <declaration name="great" type="int" line="2264"/>
                <scope line="2266">
                    <declaration name="pivot1" type="float" line="2272"/>
                    <declaration name="pivot2" type="float" line="2273"/>
                    <scope line="2310">
                        <declaration name="ak" type="float" line="2311"/>
                        <scope line="2312"/>
                        <scope line="2320">
                            <scope line="2321">
                                <scope line="2322"/>
                            </scope>
                            <scope line="2326"/>
                            <scope line="2330"/>
                        </scope>
                    </scope>
                    <scope line="2354">
                        <scope line="2358"/>
                        <scope line="2362"/>
                        <scope line="2386">
                            <declaration name="ak" type="float" line="2387"/>
                            <scope line="2388"/>
                            <scope line="2392">
                                <scope line="2393">
                                    <scope line="2394"/>
                                </scope>
                                <scope line="2398"/>
                                <scope line="2410"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2422">
                    <declaration name="pivot" type="float" line="2427"/>
                    <scope line="2449">
                        <scope line="2450"/>
                        <declaration name="ak" type="float" line="2453"/>
                        <scope line="2454"/>
                        <scope line="2458">
                            <scope line="2459"/>
                            <scope line="2462"/>
                            <scope line="2466"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2492">
                Sorts the specified array.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="2497">
                <params>
                    <param name="a" type="double[]"/>
                </params>
            </method>
            <javadoc line="2501">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="2508">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="2510">
                    Phase 1: Move NaNs to the end of the array.                    
                </comment>
                <comment line="2518">
                    a[k] is NaN                    
                </comment>
                <comment line="2525">
                    Phase 2: Sort everything except NaNs (which are already in place).                    
                </comment>
                <comment line="2530">
                    Phase 3: Place negative zeros before positive zeros.                    
                </comment>
                <comment line="2535">
                    Find the first zero, or first positive, or last negative element.                    
                </comment>
                <comment line="2549">
                    Skip the last negative value (if any) or all leading negative zeros.                    
                </comment>
                <comment line="2556">
                    Move negative zeros to the beginning of the sub-range.
                    
                     Partitioning:
                    
                     +----------------------------------------------------+
                     |   &lt; 0.0   |   -0.0   |   0.0   |   ?  ( &gt;= 0.0 )   |
                     +----------------------------------------------------+
                                  ^          ^         ^
                                  |          |         |
                                 left        p         k
                    
                     Invariants:
                    
                       all in (,  left)  &lt;  0.0
                       all in [left,  p) == -0.0
                       all in [p,     k) ==  0.0
                       all in [k, right] &gt;=  0.0
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="2582">
                    ak is -0.0d                    
                </comment>
                <scope line="2512"/>
                <scope line="2515">
                    <declaration name="ak" type="double" line="2516"/>
                    <scope line="2517"/>
                </scope>
                <declaration name="hi" type="int" line="2532"/>
                <scope line="2537">
                    <declaration name="middle" type="int" line="2538"/>
                    <declaration name="middleValue" type="double" line="2539"/>
                    <scope line="2541"/>
                    <scope line="2543"/>
                </scope>
                <scope line="2551"/>
                <scope line="2576">
                    <declaration name="ak" type="double" line="2577"/>
                    <scope line="2578"/>
                    <scope line="2581"/>
                </scope>
            </method>
            <javadoc line="2588">
                Sorts the specified range of the array.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
            </javadoc>
            <method name="doSort" type="void" line="2595">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <comment line="2597">
                    Use Quicksort on small arrays                    
                </comment>
                <comment line="2603">
                    Index run[i] is the start of i-th run
                     (ascending or descending sequence).                    
                </comment>
                <comment line="2610">
                    Check if the array is nearly sorted                    
                </comment>
                <comment line="2612">
                    ascending                    
                </comment>
                <comment line="2614">
                    descending                    
                </comment>
                <comment line="2619">
                    equal                    
                </comment>
                <comment line="2628">
                    The array is not highly structured,
                     use Quicksort instead of merge sort.                    
                </comment>
                <comment line="2638">
                    Check special cases                    
                </comment>
                <comment line="2639">
                    The last run contains one element                    
                </comment>
                <comment line="2641">
                    The array is already sorted                    
                </comment>
                <comment line="2645">
                    Create temporary array, which is used for merging.
                     Implementation note: variable &quot;right&quot; is increased by 1.                    
                </comment>
                <comment line="2659">
                    Merging                    
                </comment>
                <scope line="2597"/>
                <declaration name="run" type="int[]" line="2606"/>
                <declaration name="count" type="int" line="2607"/>
                <scope line="2610">
                    <scope line="2611"/>
                    <scope line="2613">
                        <scope line="2615">
                            <declaration name="t" type="double" line="2616"/>
                        </scope>
                    </scope>
                    <scope line="2618">
                        <scope line="2619">
                            <scope line="2620"/>
                        </scope>
                    </scope>
                    <scope line="2631"/>
                </scope>
                <scope line="2638"/>
                <scope line="2640"/>
                <declaration name="b" type="double[]" line="2648"/>
                <declaration name="odd" type="byte" line="2648"/>
                <scope line="2651"/>
                <scope line="2654"/>
                <scope line="2659">
                    <scope line="2660">
                        <declaration name="hi" type="int" line="2661"/>
                        <scope line="2662">
                            <scope line="2663"/>
                            <scope line="2665"/>
                        </scope>
                    </scope>
                    <scope line="2671"/>
                    <declaration name="t" type="double[]" line="2677"/>
                </scope>
            </method>
            <javadoc line="2681">
                Sorts the specified range of the array by Dual-Pivot Quicksort.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    left the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    right the index of the last element, inclusive, to be sorted                    
                </param>
                <param>
                    leftmost indicates if this part is the leftmost in the range                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="2689">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                    <param name="leftmost" type="boolean"/>
                </params>
                <comment line="2693">
                    Use insertion sort on tiny arrays                    
                </comment>
                <comment line="2696">
                    Traditional (without sentinel) insertion sort,
                     optimized for server VM, is used in case of
                     the leftmost part.                    
                </comment>
                <comment line="2712">
                    Skip the longest ascending sequence.                    
                </comment>
                <comment line="2721">
                    Every element from adjoining part plays the role
                     of sentinel, therefore this allows us to avoid the
                     left range check on each iteration. Moreover, we use
                     the more optimized algorithm, so called pair insertion
                     sort, which is faster (in the context of Quicksort)
                     than traditional implementation of insertion sort.                    
                </comment>
                <comment line="2755">
                    Inexpensive approximation of length / 7                    
                </comment>
                <comment line="2758">
                    Sort five evenly spaced elements around (and including) the
                     center element in the range. These elements will be used for
                     pivot selection as described below. The choice for spacing
                     these elements was empirically determined to work well on
                     a wide variety of inputs.                    
                </comment>
                <comment line="2765">
                    The midpoint                    
                </comment>
                <comment line="2771">
                    Sort these elements using insertion sort                    
                </comment>
                <comment line="2790">
                    Pointers                    
                </comment>
                <comment line="2791">
                    The index of the first element of center part                    
                </comment>
                <comment line="2792">
                    The index before the first element of right part                    
                </comment>
                <comment line="2795">
                    Use the second and fourth of the five sorted elements as pivots.
                     These values are inexpensive approximations of the first and
                     second terciles of the array. Note that pivot1 &lt;= pivot2.                    
                </comment>
                <comment line="2803">
                    The first and the last elements to be sorted are moved to the
                     locations formerly occupied by the pivots. When partitioning
                     is complete, the pivots are swapped back into their final
                     positions, and excluded from subsequent sorting.                    
                </comment>
                <comment line="2812">
                    Skip elements, which are less or greater than pivot values.                    
                </comment>
                <comment line="2818">
                    Partitioning:
                    
                       left part           center part                   right part
                     +--------------------------------------------------------------+
                     |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |
                     +--------------------------------------------------------------+
                                   ^                          ^       ^
                                   |                          |       |
                                  less                        k     great
                    
                     Invariants:
                    
                                  all in (left, less)   &lt; pivot1
                        pivot1 &lt;= all in [less, k)     &lt;= pivot2
                                  all in (great, right) &gt; pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="2840">
                    Move a[k] to left part                    
                </comment>
                <comment line="2842">
                    Here and below we use &quot;a[i] = b; i++;&quot; instead
                     of &quot;a[i++] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="2848">
                    Move a[k] to right part                    
                </comment>
                <comment line="2854">
                    a[great] &lt;= pivot2                    
                </comment>
                <comment line="2858">
                    pivot1 &lt;= a[great] &lt;= pivot2                    
                </comment>
                <comment line="2861">
                    Here and below we use &quot;a[i] = b; i--;&quot; instead
                     of &quot;a[i--] = b;&quot; due to performance issue.                    
                </comment>
                <comment line="2870">
                    Swap pivots into their final positions                    
                </comment>
                <comment line="2874">
                    Sort left and right parts recursively, excluding known pivots                    
                </comment>
                <comment line="2878">
                    If center part is too large (comprises &gt; 47 of the array),
                     swap internal pivot values to ends.                    
                </comment>
                <comment line="2883">
                    Skip elements, which are equal to pivot values.                    
                </comment>
                <comment line="2894">
                    Partitioning:
                    
                       left part         center part                  right part
                     +----------------------------------------------------------+
                     | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |
                     +----------------------------------------------------------+
                                  ^                        ^       ^
                                  |                        |       |
                                 less                      k     great
                    
                     Invariants:
                    
                                  all in (,  less) == pivot1
                         pivot1 &lt; all in [less,  k)  &lt; pivot2
                                  all in (great, ) == pivot2
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="2916">
                    Move a[k] to left part                    
                </comment>
                <comment line="2920">
                    Move a[k] to right part                    
                </comment>
                <comment line="2926">
                    a[great] &lt; pivot2                    
                </comment>
                <comment line="2928">
                    Even though a[great] equals to pivot1, the
                     assignment a[less] = pivot1 may be incorrect,
                     if a[great] and pivot1 are floating-point zeros
                     of different signs. Therefore in float and
                     double sorting methods we have to use more
                     accurate assignment a[less] = a[great].                    
                </comment>
                <comment line="2938">
                    pivot1 &lt; a[great] &lt; pivot2                    
                </comment>
                <comment line="2947">
                    Sort center part recursively                    
                </comment>
                <comment line="2950">
                    Partitioning with one pivot                    
                </comment>
                <comment line="2951">
                    Use the third of the five sorted elements as pivot.
                     This value is inexpensive approximation of the median.                    
                </comment>
                <comment line="2957">
                    Partitioning degenerates to the traditional 3-way
                     (or &quot;Dutch National Flag&quot;) schema:
                    
                       left part    center part              right part
                     +-------------------------------------------------+
                     |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |
                     +-------------------------------------------------+
                                  ^              ^        ^
                                  |              |        |
                                 less            k      great
                    
                     Invariants:
                    
                       all in (left, less)   &lt; pivot
                       all in [less, k)     == pivot
                       all in (great, right) &gt; pivot
                    
                     Pointer k is the first index of ?-part.                    
                </comment>
                <comment line="2982">
                    Move a[k] to left part                    
                </comment>
                <comment line="2986">
                    a[k] &gt; pivot - Move a[k] to right part                    
                </comment>
                <comment line="2990">
                    a[great] &lt;= pivot                    
                </comment>
                <comment line="2994">
                    a[great] == pivot                    
                </comment>
                <comment line="2995">
                    Even though a[great] equals to pivot, the
                     assignment a[k] = pivot may be incorrect,
                     if a[great] and pivot are floating-point
                     zeros of different signs. Therefore in float
                     and double sorting methods we have to use
                     more accurate assignment a[k] = a[great].                    
                </comment>
                <comment line="3010">
                    Sort left and right parts recursively.
                     All elements from center part are equal
                     and, therefore, already sorted.                    
                </comment>
                <declaration name="length" type="int" line="2690"/>
                <scope line="2693">
                    <scope line="2694">
                        <scope line="2700">
                            <declaration name="ai" type="double" line="2701"/>
                            <scope line="2702">
                                <scope line="2704"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2710">
                        <scope line="2714">
                            <scope line="2715"/>
                        </scope>
                        <scope line="2728">
                            <declaration name="a1" type="double" line="2729"/>
                            <scope line="2731"/>
                            <scope line="2734"/>
                            <scope line="2739"/>
                        </scope>
                        <declaration name="last" type="double" line="2744"/>
                        <scope line="2746"/>
                    </scope>
                </scope>
                <declaration name="seventh" type="int" line="2755"/>
                <declaration name="e3" type="int" line="2764"/>
                <declaration name="e2" type="int" line="2765"/>
                <declaration name="e1" type="int" line="2766"/>
                <declaration name="e4" type="int" line="2767"/>
                <declaration name="e5" type="int" line="2768"/>
                <scope line="2771">
                    <declaration name="t" type="double" line="2771"/>
                </scope>
                <scope line="2773">
                    <declaration name="t" type="double" line="2773"/>
                    <scope line="2774"/>
                </scope>
                <scope line="2776">
                    <declaration name="t" type="double" line="2776"/>
                    <scope line="2777">
                        <scope line="2778"/>
                    </scope>
                </scope>
                <scope line="2781">
                    <declaration name="t" type="double" line="2781"/>
                    <scope line="2782">
                        <scope line="2783">
                            <scope line="2784"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="less" type="int" line="2790"/>
                <declaration name="great" type="int" line="2791"/>
                <scope line="2793">
                    <declaration name="pivot1" type="double" line="2799"/>
                    <declaration name="pivot2" type="double" line="2800"/>
                    <scope line="2837">
                        <declaration name="ak" type="double" line="2838"/>
                        <scope line="2839"/>
                        <scope line="2847">
                            <scope line="2848">
                                <scope line="2849"/>
                            </scope>
                            <scope line="2853"/>
                            <scope line="2857"/>
                        </scope>
                    </scope>
                    <scope line="2881">
                        <scope line="2885"/>
                        <scope line="2889"/>
                        <scope line="2913">
                            <declaration name="ak" type="double" line="2914"/>
                            <scope line="2915"/>
                            <scope line="2919">
                                <scope line="2920">
                                    <scope line="2921"/>
                                </scope>
                                <scope line="2925"/>
                                <scope line="2937"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2949">
                    <declaration name="pivot" type="double" line="2954"/>
                    <scope line="2976">
                        <scope line="2977"/>
                        <declaration name="ak" type="double" line="2980"/>
                        <scope line="2981"/>
                        <scope line="2985">
                            <scope line="2986"/>
                            <scope line="2989"/>
                            <scope line="2993"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>