<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="ListIterator">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Iterator">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="2">
                An iterator for lists that allows the programmer
                  to traverse the list in either direction, modify
                  the list during iteration, and obtain the iterator&apos;s
                  current position in the list. A {@code ListIterator}has no current element; its &lt;I&gt;cursor position&lt;/I&gt; always
                  lies between the element that would be returned by a call
                  to {@code previous()} and the element that would be
                  returned by a call to {@code next()}.
                  An iterator for a list of length {@code n} has {@code n+1} possible
                  cursor positions, as illustrated by the carets ({@code ^}) below:
                  &lt;PRE&gt;
                  Element(0)   Element(1)   Element(2)   ... Element(n-1)
                  cursor positions:  ^            ^            ^            ^                  ^
                  &lt;/PRE&gt;
                  Note that the {@link #remove} and {@link #set(Object)} methods are
                  &lt;i&gt;not&lt;/i&gt; defined in terms of the cursor position;  they are defined to
                  operate on the last element returned by a call to {@link #next} or{@link #previous()}.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    List                    
                </see>
                <see>
                    Iterator                    
                </see>
                <see>
                    Enumeration                    
                </see>
                <see>
                    List#listIterator()                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hasNext" type="boolean" line="31"/>
            <javadoc line="31">
                Returns {@code true} if this list iterator has more elements when
                  traversing the list in the forward direction. (In other words,
                  returns {@code true} if {@link #next} would return an element rather
                  than throwing an exception.)                
                <return>
                    {@code true} if the list iterator has more elements when
                      traversing the list in the forward direction                    
                </return>
            </javadoc>
            <method name="next" type="E" line="40"/>
            <javadoc line="40">
                Returns the next element in the list and advances the cursor position.
                  This method may be called repeatedly to iterate through the list,
                  or intermixed with calls to {@link #previous} to go back and forth.
                  (Note that alternating calls to {@code next} and {@code previous}will return the same element repeatedly.)                
                <return>
                    the next element in the list                    
                </return>
                <throws>
                    NoSuchElementException if the iteration has no next element                    
                </throws>
            </javadoc>
            <method name="hasPrevious" type="boolean" line="49"/>
            <javadoc line="49">
                Returns {@code true} if this list iterator has more elements when
                  traversing the list in the reverse direction.  (In other words,
                  returns {@code true} if {@link #previous} would return an element
                  rather than throwing an exception.)                
                <return>
                    {@code true} if the list iterator has more elements when
                      traversing the list in the reverse direction                    
                </return>
            </javadoc>
            <method name="previous" type="E" line="58"/>
            <javadoc line="58">
                Returns the previous element in the list and moves the cursor
                  position backwards.  This method may be called repeatedly to
                  iterate through the list backwards, or intermixed with calls to{@link #next} to go back and forth.  (Note that alternating calls
                  to {@code next} and {@code previous} will return the same
                  element repeatedly.)                
                <return>
                    the previous element in the list                    
                </return>
                <throws>
                    NoSuchElementException if the iteration has no previous
                      element                    
                </throws>
            </javadoc>
            <method name="nextIndex" type="int" line="69"/>
            <javadoc line="69">
                Returns the index of the element that would be returned by a
                  subsequent call to {@link #next}. (Returns list size if the list
                  iterator is at the end of the list.)                
                <return>
                    the index of the element that would be returned by a
                      subsequent call to {@code next}, or list size if the list
                      iterator is at the end of the list                    
                </return>
            </javadoc>
            <method name="previousIndex" type="int" line="78"/>
            <javadoc line="78">
                Returns the index of the element that would be returned by a
                  subsequent call to {@link #previous}. (Returns -1 if the list
                  iterator is at the beginning of the list.)                
                <return>
                    the index of the element that would be returned by a
                      subsequent call to {@code previous}, or -1 if the list
                      iterator is at the beginning of the list                    
                </return>
            </javadoc>
            <method name="remove" type="void" line="87"/>
            <javadoc line="87">
                Removes from the list the last element that was returned by {@link #next} or {@link #previous} (optional operation).  This call can
                  only be made once per call to {@code next} or {@code previous}.
                  It can be made only if {@link #add} has not been
                  called after the last call to {@code next} or {@code previous}.                
                <throws>
                    UnsupportedOperationException if the {@code remove}operation is not supported by this list iterator                    
                </throws>
                <throws>
                    IllegalStateException if neither {@code next} nor{@code previous} have been called, or {@code remove} or{@code add} have been called after the last call to{@code next} or {@code previous}                    
                </throws>
            </javadoc>
            <method name="set" type="void" line="96"/>
            <javadoc line="96">
                Replaces the last element returned by {@link #next} or{@link #previous} with the specified element (optional operation).
                  This call can be made only if neither {@link #remove} nor {@link #add} have been called after the last call to {@code next} or{@code previous}.                
                <param>
                    e the element with which to replace the last element returned by{@code next} or {@code previous}                    
                </param>
                <throws>
                    UnsupportedOperationException if the {@code set} operation
                      is not supported by this list iterator                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this list                    
                </throws>
                <throws>
                    IllegalArgumentException if some aspect of the specified
                      element prevents it from being added to this list                    
                </throws>
                <throws>
                    IllegalStateException if neither {@code next} nor{@code previous} have been called, or {@code remove} or{@code add} have been called after the last call to{@code next} or {@code previous}                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="109"/>
            <javadoc line="109">
                Inserts the specified element into the list (optional operation).
                  The element is inserted immediately before the element that
                  would be returned by {@link #next}, if any, and after the element
                  that would be returned by {@link #previous}, if any.  (If the
                  list contains no elements, the new element becomes the sole element
                  on the list.)  The new element is inserted before the implicit
                  cursor: a subsequent call to {@code next} would be unaffected, and a
                  subsequent call to {@code previous} would return the new element.
                  (This call increases by one the value that would be returned by a
                  call to {@code nextIndex} or {@code previousIndex}.)                
                <param>
                    e the element to insert                    
                </param>
                <throws>
                    UnsupportedOperationException if the {@code add} method is
                      not supported by this list iterator                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this list                    
                </throws>
                <throws>
                    IllegalArgumentException if some aspect of this element
                      prevents it from being added to this list                    
                </throws>
            </javadoc>
        </interface>
    </source>