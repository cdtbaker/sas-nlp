<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="AbstractQueue" line="2">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractCollection">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <implements interface="Queue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="2">
                This class provides skeletal implementations of some {@link Queue}operations. The implementations in this class are appropriate when
                  the base implementation does &lt;em&gt;not&lt;/em&gt; allow &lt;tt&gt;null&lt;/tt&gt;
                  elements.  Methods {@link #add add}, {@link #remove remove}, and{@link #element element} are based on {@link #offer offer}, {@link #poll poll}, and {@link #peek peek}, respectively, but throw
                  exceptions instead of indicating failure via &lt;tt&gt;false&lt;/tt&gt; or
                  &lt;tt&gt;null&lt;/tt&gt; returns.
                  &lt;p&gt;A &lt;tt&gt;Queue&lt;/tt&gt; implementation that extends this class must
                  minimally define a method {@link Queue#offer} which does not permit
                  insertion of &lt;tt&gt;null&lt;/tt&gt; elements, along with methods {@link Queue#peek}, {@link Queue#poll}, {@link Collection#size}, and{@link Collection#iterator}.  Typically, additional methods will be
                  overridden as well.  If these requirements cannot be met, consider
                  instead subclassing {@link AbstractCollection}.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;E&gt;
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <javadoc line="22">
                Constructor for use by subclasses.                
            </javadoc>
            <method name="AbstractQueue" type="constructor" line="25"/>
            <javadoc line="27">
                Inserts the specified element into this queue if it is possible to do so
                  immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and throwing an &lt;tt&gt;IllegalStateException&lt;/tt&gt;
                  if no space is currently available.
                  &lt;p&gt;This implementation returns &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;offer&lt;/tt&gt; succeeds,
                  else throws an &lt;tt&gt;IllegalStateException&lt;/tt&gt;.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to capacity restrictions                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and
                      this queue does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of this element
                      prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="45">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="49">
                Retrieves and removes the head of this queue.  This method differs
                  from {@link #poll poll} only in that it throws an exception if this
                  queue is empty.
                  &lt;p&gt;This implementation returns the result of &lt;tt&gt;poll&lt;/tt&gt;
                  unless the queue is empty.                
                <return>
                    the head of this queue                    
                </return>
                <throws>
                    NoSuchElementException if this queue is empty                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="58">
                <declaration name="x" type="E" line="59"/>
            </method>
            <javadoc line="63">
                Retrieves, but does not remove, the head of this queue.  This method
                  differs from {@link #peek peek} only in that it throws an exception if
                  this queue is empty.
                  &lt;p&gt;This implementation returns the result of &lt;tt&gt;peek&lt;/tt&gt;
                  unless the queue is empty.                
                <return>
                    the head of this queue                    
                </return>
                <throws>
                    NoSuchElementException if this queue is empty                    
                </throws>
            </javadoc>
            <method name="element" type="E" line="72">
                <declaration name="x" type="E" line="73"/>
            </method>
            <javadoc line="77">
                Removes all of the elements from this queue.
                  The queue will be empty after this call returns.
                  &lt;p&gt;This implementation repeatedly invokes {@link #poll poll} until it
                  returns &lt;tt&gt;null&lt;/tt&gt;.                
            </javadoc>
            <method name="clear" type="void" line="83"/>
            <javadoc line="86">
                Adds all of the elements in the specified collection to this
                  queue.  Attempts to addAll of a queue to itself result in
                  &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;. Further, the behavior of
                  this operation is undefined if the specified collection is
                  modified while the operation is in progress.
                  &lt;p&gt;This implementation iterates over the specified collection,
                  and adds each element returned by the iterator to this
                  queue, in turn.  A runtime exception encountered while
                  trying to add an element (including, in particular, a
                  &lt;tt&gt;null&lt;/tt&gt; element) may result in only some of the elements
                  having been successfully added when the associated exception is
                  thrown.                
                <param>
                    c collection containing elements to be added to this queue                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this queue changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of an element of the specified
                      collection prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified collection contains a
                      null element and this queue does not permit null elements,
                      or if the specified collection is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of an element of the
                      specified collection prevents it from being added to this
                      queue, or if the specified collection is this queue                    
                </throws>
                <throws>
                    IllegalStateException if not all the elements can be added at
                      this time due to insertion restrictions                    
                </throws>
                <see>
                    #add(Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="113">
                <params>
                    <param name="c" type="Collection&lt;? extends E&gt;"/>
                </params>
                <declaration name="modified" type="boolean" line="116"/>
            </method>
        </class>
    </source>