<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.lang.reflect"/>
        <class name="Arrays" line="3">
            <javadoc line="3">
                This class contains various methods for manipulating arrays (such as
                  sorting and searching). This class also contains a static factory
                  that allows arrays to be viewed as lists.
                  &lt;p&gt;The methods in this class all throw a {@code NullPointerException},
                  if the specified array reference is null, except where noted.
                  &lt;p&gt;The documentation for the methods contained in this class includes
                  briefs description of the &lt;i&gt;implementations&lt;/i&gt;. Such descriptions should
                  be regarded as &lt;i&gt;implementation notes&lt;/i&gt;, rather than parts of the
                  &lt;i&gt;specification&lt;/i&gt;. Implementors should feel free to substitute other
                  algorithms, so long as the specification itself is adhered to. (For
                  example, the algorithm used by {@code sort(Object[])} does not have to be
                  a MergeSort, but it does have to be &lt;i&gt;stable&lt;/i&gt;.)
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <author>
                    John Rose                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Arrays" type="constructor" line="25"/>
            <javadoc line="27">
                Sorts the specified array into ascending numerical order.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="36">
                <params>
                    <param name="a" type="int[]"/>
                </params>
            </method>
            <javadoc line="39">
                Sorts the specified range of the array into ascending order. The range
                  to be sorted extends from the index {@code fromIndex}, inclusive, to
                  the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
                  the range to be sorted is empty.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    toIndex the index of the last element, exclusive, to be sorted                    
                </param>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0} or {@code toIndex > a.length}                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="55">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="59">
                Sorts the specified array into ascending numerical order.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="68">
                <params>
                    <param name="a" type="long[]"/>
                </params>
            </method>
            <javadoc line="71">
                Sorts the specified range of the array into ascending order. The range
                  to be sorted extends from the index {@code fromIndex}, inclusive, to
                  the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
                  the range to be sorted is empty.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    toIndex the index of the last element, exclusive, to be sorted                    
                </param>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0} or {@code toIndex > a.length}                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="87">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="91">
                Sorts the specified array into ascending numerical order.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="100">
                <params>
                    <param name="a" type="short[]"/>
                </params>
            </method>
            <javadoc line="103">
                Sorts the specified range of the array into ascending order. The range
                  to be sorted extends from the index {@code fromIndex}, inclusive, to
                  the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
                  the range to be sorted is empty.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    toIndex the index of the last element, exclusive, to be sorted                    
                </param>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0} or {@code toIndex > a.length}                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="119">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="123">
                Sorts the specified array into ascending numerical order.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="132">
                <params>
                    <param name="a" type="char[]"/>
                </params>
            </method>
            <javadoc line="135">
                Sorts the specified range of the array into ascending order. The range
                  to be sorted extends from the index {@code fromIndex}, inclusive, to
                  the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
                  the range to be sorted is empty.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    toIndex the index of the last element, exclusive, to be sorted                    
                </param>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0} or {@code toIndex > a.length}                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="151">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                Sorts the specified array into ascending numerical order.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="164">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <javadoc line="167">
                Sorts the specified range of the array into ascending order. The range
                  to be sorted extends from the index {@code fromIndex}, inclusive, to
                  the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
                  the range to be sorted is empty.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    toIndex the index of the last element, exclusive, to be sorted                    
                </param>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0} or {@code toIndex > a.length}                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="183">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="187">
                Sorts the specified array into ascending numerical order.
                  &lt;p&gt;The {@code &lt;} relation does not provide a total order on all float
                  values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}value compares neither less than, greater than, nor equal to any value,
                  even itself. This method uses the total order imposed by the method{@link Float#compareTo}: {@code -0.0f} is treated as less than value{@code 0.0f} and {@code Float.NaN} is considered greater than any
                  other value and all {@code Float.NaN} values are considered equal.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="200">
                <params>
                    <param name="a" type="float[]"/>
                </params>
            </method>
            <javadoc line="203">
                Sorts the specified range of the array into ascending order. The range
                  to be sorted extends from the index {@code fromIndex}, inclusive, to
                  the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
                  the range to be sorted is empty.
                  &lt;p&gt;The {@code &lt;} relation does not provide a total order on all float
                  values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}value compares neither less than, greater than, nor equal to any value,
                  even itself. This method uses the total order imposed by the method{@link Float#compareTo}: {@code -0.0f} is treated as less than value{@code 0.0f} and {@code Float.NaN} is considered greater than any
                  other value and all {@code Float.NaN} values are considered equal.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    toIndex the index of the last element, exclusive, to be sorted                    
                </param>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0} or {@code toIndex > a.length}                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="223">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="227">
                Sorts the specified array into ascending numerical order.
                  &lt;p&gt;The {@code &lt;} relation does not provide a total order on all double
                  values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}value compares neither less than, greater than, nor equal to any value,
                  even itself. This method uses the total order imposed by the method{@link Double#compareTo}: {@code -0.0d} is treated as less than value{@code 0.0d} and {@code Double.NaN} is considered greater than any
                  other value and all {@code Double.NaN} values are considered equal.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="240">
                <params>
                    <param name="a" type="double[]"/>
                </params>
            </method>
            <javadoc line="243">
                Sorts the specified range of the array into ascending order. The range
                  to be sorted extends from the index {@code fromIndex}, inclusive, to
                  the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
                  the range to be sorted is empty.
                  &lt;p&gt;The {@code &lt;} relation does not provide a total order on all double
                  values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}value compares neither less than, greater than, nor equal to any value,
                  even itself. This method uses the total order imposed by the method{@link Double#compareTo}: {@code -0.0d} is treated as less than value{@code 0.0d} and {@code Double.NaN} is considered greater than any
                  other value and all {@code Double.NaN} values are considered equal.
                  &lt;p&gt;Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
                  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
                  offers O(n log(n)) performance on many data sets that cause other
                  quicksorts to degrade to quadratic performance, and is typically
                  faster than traditional (one-pivot) Quicksort implementations.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element, inclusive, to be sorted                    
                </param>
                <param>
                    toIndex the index of the last element, exclusive, to be sorted                    
                </param>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0} or {@code toIndex > a.length}                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="263">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <class name="LegacyMergeSort" line="267">
                <javadoc line="267">
                    Old merge sort implementation can be selected (for
                      compatibility with broken comparators) using a system property.
                      Cannot be a static boolean in the enclosing class due to
                      circular dependencies. To be removed in a future release.                    
                </javadoc>
                <declaration name="userRequested" type="boolean" line="274"/>
            </class>
            <javadoc line="276">
                Sorts the specified array of objects into ascending order, according
                  to the {@linkplain Comparable natural ordering} of its elements.
                  All elements in the array must implement the {@link Comparable}interface.  Furthermore, all elements in the array must be
                  &lt;i&gt;mutually comparable&lt;/i&gt; (that is, {@code e1.compareTo(e2)} must
                  not throw a {@code ClassCastException} for any elements {@code e1}and {@code e2} in the array).
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.
                  &lt;p&gt;Implementation note: This implementation is a stable, adaptive,
                  iterative mergesort that requires far fewer than n lg(n) comparisons
                  when the input array is partially sorted, while offering the
                  performance of a traditional mergesort when the input array is
                  randomly ordered.  If the input array is nearly sorted, the
                  implementation requires approximately n comparisons.  Temporary
                  storage requirements vary from a small constant for nearly sorted
                  input arrays to n/2 object references for randomly ordered input
                  arrays.
                  &lt;p&gt;The implementation takes equal advantage of ascending and
                  descending order in its input array, and can take advantage of
                  ascending and descending order in different parts of the the same
                  input array.  It is well-suited to merging two or more sorted arrays:
                  simply concatenate the arrays and sort the resulting array.
                  &lt;p&gt;The implementation was adapted from Tim Peters&apos;s list sort for Python
                  (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;
                  TimSort&lt;/a&gt;).  It uses techiques from Peter McIlroy&apos;s &quot;Optimistic
                  Sorting and Information Theoretic Complexity&quot;, in Proceedings of the
                  Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,
                  January 1993.                
                <param>
                    a the array to be sorted                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> (for example, strings and integers)                    
                </throws>
                <throws>
                    IllegalArgumentException (optional) if the natural
                      ordering of the array elements is found to violate the{@link Comparable} contract                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="310">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
            </method>
            <javadoc line="314">
                To be removed in a future release.                
            </javadoc>
            <method name="legacyMergeSort" type="void" line="317">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
                <declaration name="aux" type="Object[]" line="318"/>
            </method>
            <javadoc line="321">
                Sorts the specified range of the specified array of objects into
                  ascending order, according to the{@linkplain Comparable natural ordering} of its
                  elements.  The range to be sorted extends from index{@code fromIndex}, inclusive, to index {@code toIndex}, exclusive.
                  (If {@code fromIndex==toIndex}, the range to be sorted is empty.)  All
                  elements in this range must implement the {@link Comparable}interface.  Furthermore, all elements in this range must be &lt;i&gt;mutually
                  comparable&lt;/i&gt; (that is, {@code e1.compareTo(e2)} must not throw a{@code ClassCastException} for any elements {@code e1} and{@code e2} in the array).
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.
                  &lt;p&gt;Implementation note: This implementation is a stable, adaptive,
                  iterative mergesort that requires far fewer than n lg(n) comparisons
                  when the input array is partially sorted, while offering the
                  performance of a traditional mergesort when the input array is
                  randomly ordered.  If the input array is nearly sorted, the
                  implementation requires approximately n comparisons.  Temporary
                  storage requirements vary from a small constant for nearly sorted
                  input arrays to n/2 object references for randomly ordered input
                  arrays.
                  &lt;p&gt;The implementation takes equal advantage of ascending and
                  descending order in its input array, and can take advantage of
                  ascending and descending order in different parts of the the same
                  input array.  It is well-suited to merging two or more sorted arrays:
                  simply concatenate the arrays and sort the resulting array.
                  &lt;p&gt;The implementation was adapted from Tim Peters&apos;s list sort for Python
                  (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;
                  TimSort&lt;/a&gt;).  It uses techiques from Peter McIlroy&apos;s &quot;Optimistic
                  Sorting and Information Theoretic Complexity&quot;, in Proceedings of the
                  Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,
                  January 1993.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted                    
                </param>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex} or
                      (optional) if the natural ordering of the array elements is
                      found to violate the {@link Comparable} contract                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or{@code toIndex > a.length}                    
                </throws>
                <throws>
                    ClassCastException if the array contains elements that are
                      not <i>mutually comparable</i> (for example, strings and
                      integers).                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="362">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="366">
                To be removed in a future release.                
            </javadoc>
            <method name="legacyMergeSort" type="void" line="369">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="aux" type="Object[]" line="371"/>
            </method>
            <declaration name="INSERTIONSORT_THRESHOLD" type="int" line="374"/>
            <javadoc line="374">
                Tuning parameter: list size at or below which insertion sort will be
                  used in preference to mergesort.
                  To be removed in a future release.                
            </javadoc>
            <javadoc line="380">
                Src is the source array that starts at index 0
                  Dest is the (possibly larger) array destination with a possible offset
                  low is the index in dest to start sorting
                  high is the end index in dest to end sorting
                  off is the offset to generate corresponding low, high in src
                  To be removed in a future release.                
            </javadoc>
            <method name="mergeSort" type="void" line="388">
                <params>
                    <param name="src" type="Object[]"/>
                    <param name="dest" type="Object[]"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="off" type="int"/>
                </params>
                <declaration name="length" type="int" line="389"/>
                <scope line="390"/>
                <declaration name="destLow" type="int" line="394"/>
                <declaration name="destHigh" type="int" line="395"/>
                <declaration name="mid" type="int" line="398"/>
                <scope line="401"/>
                <scope line="405"/>
            </method>
            <javadoc line="410">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="413">
                <params>
                    <param name="x" type="Object[]"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="Object" line="414"/>
            </method>
            <javadoc line="418">
                Sorts the specified array of objects according to the order induced by
                  the specified comparator.  All elements in the array must be
                  &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator (that is,{@code c.compare(e1, e2)} must not throw a {@code ClassCastException}for any elements {@code e1} and {@code e2} in the array).
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.
                  &lt;p&gt;Implementation note: This implementation is a stable, adaptive,
                  iterative mergesort that requires far fewer than n lg(n) comparisons
                  when the input array is partially sorted, while offering the
                  performance of a traditional mergesort when the input array is
                  randomly ordered.  If the input array is nearly sorted, the
                  implementation requires approximately n comparisons.  Temporary
                  storage requirements vary from a small constant for nearly sorted
                  input arrays to n/2 object references for randomly ordered input
                  arrays.
                  &lt;p&gt;The implementation takes equal advantage of ascending and
                  descending order in its input array, and can take advantage of
                  ascending and descending order in different parts of the the same
                  input array.  It is well-suited to merging two or more sorted arrays:
                  simply concatenate the arrays and sort the resulting array.
                  &lt;p&gt;The implementation was adapted from Tim Peters&apos;s list sort for Python
                  (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;
                  TimSort&lt;/a&gt;).  It uses techiques from Peter McIlroy&apos;s &quot;Optimistic
                  Sorting and Information Theoretic Complexity&quot;, in Proceedings of the
                  Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,
                  January 1993.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    c the comparator to determine the order of the array.  A{@code null} value indicates that the elements'{@linkplain Comparable natural ordering} should be used.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are
                      not <i>mutually comparable</i> using the specified comparator                    
                </throws>
                <throws>
                    IllegalArgumentException (optional) if the comparator is
                      found to violate the {@link Comparator} contract                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="451">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="455">
                To be removed in a future release.                
            </javadoc>
            <method name="legacyMergeSort" type="void" line="458">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
                <declaration name="aux" type="T[]" line="459"/>
            </method>
            <javadoc line="463">
                Sorts the specified range of the specified array of objects according
                  to the order induced by the specified comparator.  The range to be
                  sorted extends from index {@code fromIndex}, inclusive, to index{@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the
                  range to be sorted is empty.)  All elements in the range must be
                  &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator (that is,{@code c.compare(e1, e2)} must not throw a {@code ClassCastException}for any elements {@code e1} and {@code e2} in the range).
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.
                  &lt;p&gt;Implementation note: This implementation is a stable, adaptive,
                  iterative mergesort that requires far fewer than n lg(n) comparisons
                  when the input array is partially sorted, while offering the
                  performance of a traditional mergesort when the input array is
                  randomly ordered.  If the input array is nearly sorted, the
                  implementation requires approximately n comparisons.  Temporary
                  storage requirements vary from a small constant for nearly sorted
                  input arrays to n/2 object references for randomly ordered input
                  arrays.
                  &lt;p&gt;The implementation takes equal advantage of ascending and
                  descending order in its input array, and can take advantage of
                  ascending and descending order in different parts of the the same
                  input array.  It is well-suited to merging two or more sorted arrays:
                  simply concatenate the arrays and sort the resulting array.
                  &lt;p&gt;The implementation was adapted from Tim Peters&apos;s list sort for Python
                  (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;
                  TimSort&lt;/a&gt;).  It uses techiques from Peter McIlroy&apos;s &quot;Optimistic
                  Sorting and Information Theoretic Complexity&quot;, in Proceedings of the
                  Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,
                  January 1993.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted                    
                </param>
                <param>
                    c the comparator to determine the order of the array.  A{@code null} value indicates that the elements'{@linkplain Comparable natural ordering} should be used.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code fromIndex > toIndex} or
                      (optional) if the comparator is found to violate the{@link Comparator} contract                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or{@code toIndex > a.length}                    
                </throws>
            </javadoc>
            <method name="sort" type="void" line="502">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="506">
                To be removed in a future release.                
            </javadoc>
            <method name="legacyMergeSort" type="void" line="509">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
                <declaration name="aux" type="T[]" line="511"/>
            </method>
            <javadoc line="515">
                Src is the source array that starts at index 0
                  Dest is the (possibly larger) array destination with a possible offset
                  low is the index in dest to start sorting
                  high is the end index in dest to end sorting
                  off is the offset into src corresponding to low in dest
                  To be removed in a future release.                
            </javadoc>
            <method name="mergeSort" type="void" line="523">
                <params>
                    <param name="src" type="Object[]"/>
                    <param name="dest" type="Object[]"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="off" type="int"/>
                    <param name="c" type="Comparator"/>
                </params>
                <declaration name="length" type="int" line="524"/>
                <scope line="525"/>
                <declaration name="destLow" type="int" line="529"/>
                <declaration name="destHigh" type="int" line="530"/>
                <declaration name="mid" type="int" line="533"/>
                <scope line="536"/>
                <scope line="540"/>
            </method>
            <javadoc line="545">
                Checks that {@code fromIndex} and {@code toIndex} are in
                  the range and throws an appropriate exception, if they aren&apos;t.                
            </javadoc>
            <method name="rangeCheck" type="void" line="549">
                <params>
                    <param name="length" type="int"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <scope line="550"/>
                <scope line="553"/>
                <scope line="556"/>
            </method>
            <javadoc line="560">
                Searches the specified array of longs for the specified value using the
                  binary search algorithm.  The array must be sorted (as
                  by the {@link #sort(long[])} method) prior to making this call.  If it
                  is not sorted, the results are undefined.  If the array contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
            </javadoc>
            <method name="binarySearch" type="int" line="578">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="key" type="long"/>
                </params>
            </method>
            <javadoc line="581">
                Searches a range of
                  the specified array of longs for the specified value using the
                  binary search algorithm.
                  The range must be sorted (as
                  by the {@link #sort(long[],int,int)} method)
                  prior to making this call.  If it
                  is not sorted, the results are undefined.  If the range contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="610">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="long"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="614">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="long"/>
                </params>
                <declaration name="low" type="int" line="615"/>
                <declaration name="high" type="int" line="616"/>
                <scope line="617">
                    <declaration name="mid" type="int" line="618"/>
                    <declaration name="midVal" type="long" line="619"/>
                </scope>
            </method>
            <javadoc line="626">
                Searches the specified array of ints for the specified value using the
                  binary search algorithm.  The array must be sorted (as
                  by the {@link #sort(int[])} method) prior to making this call.  If it
                  is not sorted, the results are undefined.  If the array contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
            </javadoc>
            <method name="binarySearch" type="int" line="644">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="647">
                Searches a range of
                  the specified array of ints for the specified value using the
                  binary search algorithm.
                  The range must be sorted (as
                  by the {@link #sort(int[],int,int)} method)
                  prior to making this call.  If it
                  is not sorted, the results are undefined.  If the range contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="676">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="int"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="680">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="int"/>
                </params>
                <declaration name="low" type="int" line="681"/>
                <declaration name="high" type="int" line="682"/>
                <scope line="683">
                    <declaration name="mid" type="int" line="684"/>
                    <declaration name="midVal" type="int" line="685"/>
                </scope>
            </method>
            <javadoc line="692">
                Searches the specified array of shorts for the specified value using
                  the binary search algorithm.  The array must be sorted
                  (as by the {@link #sort(short[])} method) prior to making this call.  If
                  it is not sorted, the results are undefined.  If the array contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
            </javadoc>
            <method name="binarySearch" type="int" line="710">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="key" type="short"/>
                </params>
            </method>
            <javadoc line="713">
                Searches a range of
                  the specified array of shorts for the specified value using
                  the binary search algorithm.
                  The range must be sorted
                  (as by the {@link #sort(short[],int,int)} method)
                  prior to making this call.  If
                  it is not sorted, the results are undefined.  If the range contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="742">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="short"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="746">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="short"/>
                </params>
                <declaration name="low" type="int" line="747"/>
                <declaration name="high" type="int" line="748"/>
                <scope line="749">
                    <declaration name="mid" type="int" line="750"/>
                    <declaration name="midVal" type="short" line="751"/>
                </scope>
            </method>
            <javadoc line="758">
                Searches the specified array of chars for the specified value using the
                  binary search algorithm.  The array must be sorted (as
                  by the {@link #sort(char[])} method) prior to making this call.  If it
                  is not sorted, the results are undefined.  If the array contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
            </javadoc>
            <method name="binarySearch" type="int" line="776">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="key" type="char"/>
                </params>
            </method>
            <javadoc line="779">
                Searches a range of
                  the specified array of chars for the specified value using the
                  binary search algorithm.
                  The range must be sorted (as
                  by the {@link #sort(char[],int,int)} method)
                  prior to making this call.  If it
                  is not sorted, the results are undefined.  If the range contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="808">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="char"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="812">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="char"/>
                </params>
                <declaration name="low" type="int" line="813"/>
                <declaration name="high" type="int" line="814"/>
                <scope line="815">
                    <declaration name="mid" type="int" line="816"/>
                    <declaration name="midVal" type="char" line="817"/>
                </scope>
            </method>
            <javadoc line="824">
                Searches the specified array of bytes for the specified value using the
                  binary search algorithm.  The array must be sorted (as
                  by the {@link #sort(byte[])} method) prior to making this call.  If it
                  is not sorted, the results are undefined.  If the array contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
            </javadoc>
            <method name="binarySearch" type="int" line="842">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="key" type="byte"/>
                </params>
            </method>
            <javadoc line="845">
                Searches a range of
                  the specified array of bytes for the specified value using the
                  binary search algorithm.
                  The range must be sorted (as
                  by the {@link #sort(byte[],int,int)} method)
                  prior to making this call.  If it
                  is not sorted, the results are undefined.  If the range contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="874">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="byte"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="878">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="byte"/>
                </params>
                <declaration name="low" type="int" line="879"/>
                <declaration name="high" type="int" line="880"/>
                <scope line="881">
                    <declaration name="mid" type="int" line="882"/>
                    <declaration name="midVal" type="byte" line="883"/>
                </scope>
            </method>
            <javadoc line="890">
                Searches the specified array of doubles for the specified value using
                  the binary search algorithm.  The array must be sorted
                  (as by the {@link #sort(double[])} method) prior to making this call.
                  If it is not sorted, the results are undefined.  If the array contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.  This method considers all NaN values to be
                  equivalent and equal.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
            </javadoc>
            <method name="binarySearch" type="int" line="909">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="key" type="double"/>
                </params>
            </method>
            <javadoc line="912">
                Searches a range of
                  the specified array of doubles for the specified value using
                  the binary search algorithm.
                  The range must be sorted
                  (as by the {@link #sort(double[],int,int)} method)
                  prior to making this call.
                  If it is not sorted, the results are undefined.  If the range contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found.  This method considers all NaN values to be
                  equivalent and equal.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="942">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="double"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="946">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="double"/>
                </params>
                <declaration name="low" type="int" line="947"/>
                <declaration name="high" type="int" line="948"/>
                <scope line="949">
                    <declaration name="mid" type="int" line="950"/>
                    <declaration name="midVal" type="double" line="951"/>
                    <scope line="954">
                        <declaration name="midBits" type="long" line="955"/>
                        <declaration name="keyBits" type="long" line="956"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="964">
                Searches the specified array of floats for the specified value using
                  the binary search algorithm. The array must be sorted
                  (as by the {@link #sort(float[])} method) prior to making this call. If
                  it is not sorted, the results are undefined. If the array contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found. This method considers all NaN values to be
                  equivalent and equal.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>. The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key. Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
            </javadoc>
            <method name="binarySearch" type="int" line="983">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="key" type="float"/>
                </params>
            </method>
            <javadoc line="986">
                Searches a range of
                  the specified array of floats for the specified value using
                  the binary search algorithm.
                  The range must be sorted
                  (as by the {@link #sort(float[],int,int)} method)
                  prior to making this call. If
                  it is not sorted, the results are undefined. If the range contains
                  multiple elements with the specified value, there is no guarantee which
                  one will be found. This method considers all NaN values to be
                  equivalent and equal.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>. The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key. Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="1016">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="float"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="1020">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="float"/>
                </params>
                <declaration name="low" type="int" line="1021"/>
                <declaration name="high" type="int" line="1022"/>
                <scope line="1023">
                    <declaration name="mid" type="int" line="1024"/>
                    <declaration name="midVal" type="float" line="1025"/>
                    <scope line="1028">
                        <declaration name="midBits" type="int" line="1029"/>
                        <declaration name="keyBits" type="int" line="1030"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1038">
                Searches the specified array for the specified object using the binary
                  search algorithm. The array must be sorted into ascending order
                  according to the{@linkplain Comparable natural ordering}of its elements (as by the{@link #sort(Object[])} method) prior to making this call.
                  If it is not sorted, the results are undefined.
                  (If the array contains elements that are not mutually comparable (for
                  example, strings and integers), it &lt;i&gt;cannot&lt;/i&gt; be sorted according
                  to the natural ordering of its elements, hence results are undefined.)
                  If the array contains multiple
                  elements equal to the specified object, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    ClassCastException if the search key is not comparable to the
                      elements of the array.                    
                </throws>
            </javadoc>
            <method name="binarySearch" type="int" line="1062">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="1065">
                Searches a range of
                  the specified array for the specified object using the binary
                  search algorithm.
                  The range must be sorted into ascending order
                  according to the{@linkplain Comparable natural ordering}of its elements (as by the{@link #sort(Object[],int,int)} method) prior to making this
                  call.  If it is not sorted, the results are undefined.
                  (If the range contains elements that are not mutually comparable (for
                  example, strings and integers), it &lt;i&gt;cannot&lt;/i&gt; be sorted according
                  to the natural ordering of its elements, hence results are undefined.)
                  If the range contains multiple
                  elements equal to the specified object, there is no guarantee which
                  one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    ClassCastException if the search key is not comparable to the
                      elements of the array within the specified range.                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="1099">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="1103">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="low" type="int" line="1104"/>
                <declaration name="high" type="int" line="1105"/>
                <scope line="1106">
                    <declaration name="mid" type="int" line="1107"/>
                    <declaration name="midVal" type="Comparable" line="1108"/>
                    <declaration name="cmp" type="int" line="1109"/>
                </scope>
            </method>
            <javadoc line="1116">
                Searches the specified array for the specified object using the binary
                  search algorithm.  The array must be sorted into ascending order
                  according to the specified comparator (as by the{@link #sort(Object[],Comparator) sort(T[], Comparator)}method) prior to making this call.  If it is
                  not sorted, the results are undefined.
                  If the array contains multiple
                  elements equal to the specified object, there is no guarantee which one
                  will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <param>
                    c the comparator by which the array is ordered.  A
                      <tt>null</tt> value indicates that the elements'{@linkplain Comparable natural ordering} should be used.                    
                </param>
                <return>
                    index of the search key, if it is contained in the array;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element greater than the key, or <tt>a.length</tt> if all
                      elements in the array are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator,
                      or the search key is not comparable to the
                      elements of the array using this comparator.                    
                </throws>
            </javadoc>
            <method name="binarySearch" type="int" line="1141">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="key" type="T"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="1144">
                Searches a range of
                  the specified array for the specified object using the binary
                  search algorithm.
                  The range must be sorted into ascending order
                  according to the specified comparator (as by the{@link #sort(Object[],int,int,Comparator)sort(T[], int, int, Comparator)}method) prior to making this call.
                  If it is not sorted, the results are undefined.
                  If the range contains multiple elements equal to the specified object,
                  there is no guarantee which one will be found.                
                <param>
                    a the array to be searched                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      searched                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be searched                    
                </param>
                <param>
                    key the value to be searched for                    
                </param>
                <param>
                    c the comparator by which the array is ordered.  A
                      <tt>null</tt> value indicates that the elements'{@linkplain Comparable natural ordering} should be used.                    
                </param>
                <return>
                    index of the search key, if it is contained in the array
                      within the specified range;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
                      <i>insertion point</i> is defined as the point at which the
                      key would be inserted into the array: the index of the first
                      element in the range greater than the key,
                      or <tt>toIndex</tt> if all
                      elements in the range are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <throws>
                    ClassCastException if the range contains elements that are not
                      <i>mutually comparable</i> using the specified comparator,
                      or the search key is not comparable to the
                      elements in the range using this comparator.                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code fromIndex > toIndex}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif {@code fromIndex < 0 or toIndex > a.length}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="binarySearch" type="int" line="1178">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="T"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <method name="binarySearch0" type="int" line="1182">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="key" type="T"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
                <scope line="1183"/>
                <declaration name="low" type="int" line="1186"/>
                <declaration name="high" type="int" line="1187"/>
                <scope line="1188">
                    <declaration name="mid" type="int" line="1189"/>
                    <declaration name="midVal" type="T" line="1190"/>
                    <declaration name="cmp" type="int" line="1191"/>
                </scope>
            </method>
            <javadoc line="1198">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of longs are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both
                  arrays contain the same number of elements, and all corresponding pairs
                  of elements in the two arrays are equal.  In other words, two arrays
                  are equal if they contain the same elements in the same order.  Also,
                  two array references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1209">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="a2" type="long[]"/>
                </params>
                <declaration name="length" type="int" line="1212"/>
            </method>
            <javadoc line="1217">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of ints are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both
                  arrays contain the same number of elements, and all corresponding pairs
                  of elements in the two arrays are equal.  In other words, two arrays
                  are equal if they contain the same elements in the same order.  Also,
                  two array references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1228">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="a2" type="int[]"/>
                </params>
                <declaration name="length" type="int" line="1231"/>
            </method>
            <javadoc line="1236">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of shorts are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both
                  arrays contain the same number of elements, and all corresponding pairs
                  of elements in the two arrays are equal.  In other words, two arrays
                  are equal if they contain the same elements in the same order.  Also,
                  two array references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1247">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="a2" type="short"/>
                </params>
                <declaration name="length" type="int" line="1250"/>
            </method>
            <javadoc line="1255">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of chars are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both
                  arrays contain the same number of elements, and all corresponding pairs
                  of elements in the two arrays are equal.  In other words, two arrays
                  are equal if they contain the same elements in the same order.  Also,
                  two array references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1266">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="a2" type="char[]"/>
                </params>
                <declaration name="length" type="int" line="1269"/>
            </method>
            <javadoc line="1274">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of bytes are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both
                  arrays contain the same number of elements, and all corresponding pairs
                  of elements in the two arrays are equal.  In other words, two arrays
                  are equal if they contain the same elements in the same order.  Also,
                  two array references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1285">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="a2" type="byte[]"/>
                </params>
                <declaration name="length" type="int" line="1288"/>
            </method>
            <javadoc line="1293">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of booleans are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both
                  arrays contain the same number of elements, and all corresponding pairs
                  of elements in the two arrays are equal.  In other words, two arrays
                  are equal if they contain the same elements in the same order.  Also,
                  two array references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1304">
                <params>
                    <param name="a" type="boolean[]"/>
                    <param name="a2" type="boolean[]"/>
                </params>
                <declaration name="length" type="int" line="1307"/>
            </method>
            <javadoc line="1312">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of doubles are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both
                  arrays contain the same number of elements, and all corresponding pairs
                  of elements in the two arrays are equal.  In other words, two arrays
                  are equal if they contain the same elements in the same order.  Also,
                  two array references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;
                  Two doubles &lt;tt&gt;d1&lt;/tt&gt; and &lt;tt&gt;d2&lt;/tt&gt; are considered equal if:
                  &lt;pre&gt;    &lt;tt&gt;new Double(d1).equals(new Double(d2))&lt;/tt&gt;&lt;/pre&gt;
                  (Unlike the &lt;tt&gt;==&lt;/tt&gt; operator, this method considers
                  &lt;tt&gt;NaN&lt;/tt&gt; equals to itself, and 0.0d unequal to -0.0d.)                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
                <see>
                    Double#equals(Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="1328">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="a2" type="double[]"/>
                </params>
                <declaration name="length" type="int" line="1331"/>
            </method>
            <javadoc line="1336">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of floats are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both
                  arrays contain the same number of elements, and all corresponding pairs
                  of elements in the two arrays are equal.  In other words, two arrays
                  are equal if they contain the same elements in the same order.  Also,
                  two array references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;
                  Two floats &lt;tt&gt;f1&lt;/tt&gt; and &lt;tt&gt;f2&lt;/tt&gt; are considered equal if:
                  &lt;pre&gt;    &lt;tt&gt;new Float(f1).equals(new Float(f2))&lt;/tt&gt;&lt;/pre&gt;
                  (Unlike the &lt;tt&gt;==&lt;/tt&gt; operator, this method considers
                  &lt;tt&gt;NaN&lt;/tt&gt; equals to itself, and 0.0f unequal to -0.0f.)                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
                <see>
                    Float#equals(Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="1352">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="a2" type="float[]"/>
                </params>
                <declaration name="length" type="int" line="1355"/>
            </method>
            <javadoc line="1360">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of Objects are
                  &lt;i&gt;equal&lt;/i&gt; to one another.  The two arrays are considered equal if
                  both arrays contain the same number of elements, and all corresponding
                  pairs of elements in the two arrays are equal.  Two objects &lt;tt&gt;e1&lt;/tt&gt;
                  and &lt;tt&gt;e2&lt;/tt&gt; are considered &lt;i&gt;equal&lt;/i&gt; if &lt;tt&gt;(e1==null ? e2==null
                  : e1.equals(e2))&lt;/tt&gt;.  In other words, the two arrays are equal if
                  they contain the same elements in the same order.  Also, two array
                  references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;                
                <param>
                    a one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1373">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="a2" type="Object[]"/>
                </params>
                <declaration name="length" type="int" line="1376"/>
                <scope line="1378">
                    <declaration name="o1" type="Object" line="1379"/>
                    <declaration name="o2" type="Object" line="1380"/>
                </scope>
            </method>
            <javadoc line="1385">
                Assigns the specified long value to each element of the specified array
                  of longs.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1391">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="val" type="long"/>
                </params>
            </method>
            <javadoc line="1394">
                Assigns the specified long value to each element of the specified
                  range of the specified array of longs.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1410">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="long"/>
                </params>
            </method>
            <javadoc line="1414">
                Assigns the specified int value to each element of the specified array
                  of ints.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1420">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="1423">
                Assigns the specified int value to each element of the specified
                  range of the specified array of ints.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1439">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="1443">
                Assigns the specified short value to each element of the specified array
                  of shorts.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1449">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="val" type="short"/>
                </params>
            </method>
            <javadoc line="1452">
                Assigns the specified short value to each element of the specified
                  range of the specified array of shorts.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1468">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="short"/>
                </params>
            </method>
            <javadoc line="1472">
                Assigns the specified char value to each element of the specified array
                  of chars.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1478">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="val" type="char"/>
                </params>
            </method>
            <javadoc line="1481">
                Assigns the specified char value to each element of the specified
                  range of the specified array of chars.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1497">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="char"/>
                </params>
            </method>
            <javadoc line="1501">
                Assigns the specified byte value to each element of the specified array
                  of bytes.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1507">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="val" type="byte"/>
                </params>
            </method>
            <javadoc line="1510">
                Assigns the specified byte value to each element of the specified
                  range of the specified array of bytes.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1526">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="byte"/>
                </params>
            </method>
            <javadoc line="1530">
                Assigns the specified boolean value to each element of the specified
                  array of booleans.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1536">
                <params>
                    <param name="a" type="boolean[]"/>
                    <param name="val" type="boolean"/>
                </params>
            </method>
            <javadoc line="1539">
                Assigns the specified boolean value to each element of the specified
                  range of the specified array of booleans.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1555">
                <params>
                    <param name="a" type="boolean[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="boolean"/>
                </params>
            </method>
            <javadoc line="1559">
                Assigns the specified double value to each element of the specified
                  array of doubles.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1565">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="val" type="double"/>
                </params>
            </method>
            <javadoc line="1568">
                Assigns the specified double value to each element of the specified
                  range of the specified array of doubles.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1584">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="double"/>
                </params>
            </method>
            <javadoc line="1588">
                Assigns the specified float value to each element of the specified array
                  of floats.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1594">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="val" type="float"/>
                </params>
            </method>
            <javadoc line="1597">
                Assigns the specified float value to each element of the specified
                  range of the specified array of floats.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1613">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="float"/>
                </params>
            </method>
            <javadoc line="1617">
                Assigns the specified Object reference to each element of the specified
                  array of Objects.                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    ArrayStoreException if the specified value is not of a
                      runtime type that can be stored in the specified array                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1625">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="val" type="Object"/>
                </params>
            </method>
            <javadoc line="1628">
                Assigns the specified Object reference to each element of the specified
                  range of the specified array of Objects.  The range to be filled
                  extends from index &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, to index
                  &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If &lt;tt&gt;fromIndex==toIndex&lt;/tt&gt;, the
                  range to be filled is empty.)                
                <param>
                    a the array to be filled                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be
                      filled with the specified value                    
                </param>
                <param>
                    val the value to be stored in all elements of the array                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <throws>
                    ArrayStoreException if the specified value is not of a
                      runtime type that can be stored in the specified array                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="1646">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="val" type="Object"/>
                </params>
            </method>
            <javadoc line="1650">
                Copies the specified array, truncating or padding with nulls (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;null&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.
                  The resulting array is of exactly the same class as the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with nulls
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="T[]" line="1667">
                <params>
                    <param name="original" type="T[]"/>
                    <param name="newLength" type="int"/>
                </params>
            </method>
            <javadoc line="1670">
                Copies the specified array, truncating or padding with nulls (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;null&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.
                  The resulting array is of the class &lt;tt&gt;newType&lt;/tt&gt;.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <param>
                    newType the class of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with nulls
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <throws>
                    ArrayStoreException if an element copied from
                      <tt>original</tt> is not of a runtime type that can be stored in
                      an array of class <tt>newType</tt>                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="T[]" line="1691">
                <params>
                    <param name="original" type="U[]"/>
                    <param name="newLength" type="int"/>
                    <param name="newType" type="Class<? extends T[]>"/>
                </params>
                <declaration name="copy" type="T[]" line="1692"/>
            </method>
            <javadoc line="1696">
                Copies the specified array, truncating or padding with zeros (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;(byte)0&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with zeros
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="byte[]" line="1712">
                <params>
                    <param name="original" type="byte[]"/>
                    <param name="newLength" type="int"/>
                </params>
                <declaration name="copy" type="byte[]" line="1713"/>
            </method>
            <javadoc line="1717">
                Copies the specified array, truncating or padding with zeros (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;(short)0&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with zeros
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="short[]" line="1733">
                <params>
                    <param name="original" type="short[]"/>
                    <param name="newLength" type="int"/>
                </params>
                <declaration name="copy" type="short[]" line="1734"/>
            </method>
            <javadoc line="1738">
                Copies the specified array, truncating or padding with zeros (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;0&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with zeros
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="int[]" line="1754">
                <params>
                    <param name="original" type="int[]"/>
                    <param name="newLength" type="int"/>
                </params>
                <declaration name="copy" type="int[]" line="1755"/>
            </method>
            <javadoc line="1759">
                Copies the specified array, truncating or padding with zeros (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;0L&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with zeros
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="long[]" line="1775">
                <params>
                    <param name="original" type="long[]"/>
                    <param name="newLength" type="int"/>
                </params>
                <declaration name="copy" type="long[]" line="1776"/>
            </method>
            <javadoc line="1780">
                Copies the specified array, truncating or padding with null characters (if necessary)
                  so the copy has the specified length.  For all indices that are valid
                  in both the original array and the copy, the two arrays will contain
                  identical values.  For any indices that are valid in the copy but not
                  the original, the copy will contain &lt;tt&gt;&apos;\\u000&apos;&lt;/tt&gt;.  Such indices
                  will exist if and only if the specified length is greater than that of
                  the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with null characters
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="char[]" line="1796">
                <params>
                    <param name="original" type="char[]"/>
                    <param name="newLength" type="int"/>
                </params>
                <declaration name="copy" type="char[]" line="1797"/>
            </method>
            <javadoc line="1801">
                Copies the specified array, truncating or padding with zeros (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;0f&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with zeros
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="float[]" line="1817">
                <params>
                    <param name="original" type="float[]"/>
                    <param name="newLength" type="int"/>
                </params>
                <declaration name="copy" type="float[]" line="1818"/>
            </method>
            <javadoc line="1822">
                Copies the specified array, truncating or padding with zeros (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;0d&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with zeros
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="double[]" line="1838">
                <params>
                    <param name="original" type="double[]"/>
                    <param name="newLength" type="int"/>
                </params>
                <declaration name="copy" type="double[]" line="1839"/>
            </method>
            <javadoc line="1843">
                Copies the specified array, truncating or padding with &lt;tt&gt;false&lt;/tt&gt; (if necessary)
                  so the copy has the specified length.  For all indices that are
                  valid in both the original array and the copy, the two arrays will
                  contain identical values.  For any indices that are valid in the
                  copy but not the original, the copy will contain &lt;tt&gt;false&lt;/tt&gt;.
                  Such indices will exist if and only if the specified length
                  is greater than that of the original array.                
                <param>
                    original the array to be copied                    
                </param>
                <param>
                    newLength the length of the copy to be returned                    
                </param>
                <return>
                    a copy of the original array, truncated or padded with false elements
                      to obtain the specified length                    
                </return>
                <throws>
                    NegativeArraySizeException if <tt>newLength</tt> is negative                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOf" type="boolean[]" line="1859">
                <params>
                    <param name="original" type="boolean[]"/>
                    <param name="newLength" type="int"/>
                </params>
                <declaration name="copy" type="boolean[]" line="1860"/>
            </method>
            <javadoc line="1864">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;null&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.
                  &lt;p&gt;
                  The resulting array is of exactly the same class as the original array.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with nulls to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="T[]" line="1890">
                <params>
                    <param name="original" type="T[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="1893">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;null&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.
                  The resulting array is of the class &lt;tt&gt;newType&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <param>
                    newType the class of the copy to be returned                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with nulls to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <throws>
                    ArrayStoreException if an element copied from
                      <tt>original</tt> is not of a runtime type that can be stored in
                      an array of class <tt>newType</tt>.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="T[]" line="1922">
                <params>
                    <param name="original" type="U[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="newType" type="Class<? extends T[]>"/>
                </params>
                <declaration name="newLength" type="int" line="1923"/>
                <declaration name="copy" type="T[]" line="1925"/>
            </method>
            <javadoc line="1929">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;(byte)0&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with zeros to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="byte[]" line="1953">
                <params>
                    <param name="original" type="byte[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="newLength" type="int" line="1954"/>
                <declaration name="copy" type="byte[]" line="1956"/>
            </method>
            <javadoc line="1960">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;(short)0&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with zeros to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="short[]" line="1984">
                <params>
                    <param name="original" type="short[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="newLength" type="int" line="1985"/>
                <declaration name="copy" type="short[]" line="1987"/>
            </method>
            <javadoc line="1991">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;0&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with zeros to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="int[]" line="2015">
                <params>
                    <param name="original" type="int[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="newLength" type="int" line="2016"/>
                <declaration name="copy" type="int[]" line="2018"/>
            </method>
            <javadoc line="2022">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;0L&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with zeros to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="long[]" line="2046">
                <params>
                    <param name="original" type="long[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="newLength" type="int" line="2047"/>
                <declaration name="copy" type="long[]" line="2049"/>
            </method>
            <javadoc line="2053">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;&apos;\\u000&apos;&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with null characters to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="char[]" line="2077">
                <params>
                    <param name="original" type="char[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="newLength" type="int" line="2078"/>
                <declaration name="copy" type="char[]" line="2080"/>
            </method>
            <javadoc line="2084">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;0f&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with zeros to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="float[]" line="2108">
                <params>
                    <param name="original" type="float[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="newLength" type="int" line="2109"/>
                <declaration name="copy" type="float[]" line="2111"/>
            </method>
            <javadoc line="2115">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;0d&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with zeros to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="double[]" line="2139">
                <params>
                    <param name="original" type="double[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="newLength" type="int" line="2140"/>
                <declaration name="copy" type="double[]" line="2142"/>
            </method>
            <javadoc line="2146">
                Copies the specified range of the specified array into a new array.
                  The initial index of the range (&lt;tt&gt;from&lt;/tt&gt;) must lie between zero
                  and &lt;tt&gt;original.length&lt;/tt&gt;, inclusive.  The value at
                  &lt;tt&gt;original[from]&lt;/tt&gt; is placed into the initial element of the copy
                  (unless &lt;tt&gt;from == original.length&lt;/tt&gt; or &lt;tt&gt;from == to&lt;/tt&gt;).
                  Values from subsequent elements in the original array are placed into
                  subsequent elements in the copy.  The final index of the range
                  (&lt;tt&gt;to&lt;/tt&gt;), which must be greater than or equal to &lt;tt&gt;from&lt;/tt&gt;,
                  may be greater than &lt;tt&gt;original.length&lt;/tt&gt;, in which case
                  &lt;tt&gt;false&lt;/tt&gt; is placed in all elements of the copy whose index is
                  greater than or equal to &lt;tt&gt;original.length - from&lt;/tt&gt;.  The length
                  of the returned array will be &lt;tt&gt;to - from&lt;/tt&gt;.                
                <param>
                    original the array from which a range is to be copied                    
                </param>
                <param>
                    from the initial index of the range to be copied, inclusive                    
                </param>
                <param>
                    to the final index of the range to be copied, exclusive.
                      (This index may lie outside the array.)                    
                </param>
                <return>
                    a new array containing the specified range from the original array,
                      truncated or padded with false elements to obtain the required length                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code from < 0}or {@code from > original.length}                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>from &gt; to</tt>                    
                </throws>
                <throws>
                    NullPointerException if <tt>original</tt> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copyOfRange" type="boolean[]" line="2170">
                <params>
                    <param name="original" type="boolean[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="newLength" type="int" line="2171"/>
                <declaration name="copy" type="boolean[]" line="2173"/>
            </method>
            <javadoc line="2177">
                Returns a fixed-size list backed by the specified array.  (Changes to
                  the returned list &quot;write through&quot; to the array.)  This method acts
                  as bridge between array-based and collection-based APIs, in
                  combination with {@link Collection#toArray}.  The returned list is
                  serializable and implements {@link RandomAccess}.
                  &lt;p&gt;This method also provides a convenient way to create a fixed-size
                  list initialized to contain several elements:
                  &lt;pre&gt;
                  List&amp;lt;String&amp;gt; stooges = Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);
                  &lt;/pre&gt;                
                <param>
                    a the array by which the list will be backed                    
                </param>
                <return>
                    a list view of the specified array                    
                </return>
            </javadoc>
            <method name="asList" type="List<T>" line="2191">
                <params>
                    <param name="a" type="T"/>
                </params>
            </method>
            <class name="ArrayList" line="2194">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <extends class="AbstractList">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </extends>
                <implements interface="RandomAccess"/>
                <implements interface="java.io.Serializable"/>
                <javadoc line="2194">
                    @serial include                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="2198"/>
                <declaration name="a" type="E[]" line="2199"/>
                <method name="ArrayList" type="constructor" line="2200">
                    <params>
                        <param name="array" type="E[]"/>
                    </params>
                </method>
                <method name="size" type="int" line="2204"/>
                <method name="toArray" type="Object[]" line="2207"/>
                <method name="toArray" type="T[]" line="2210">
                    <params>
                        <param name="a" type="T[]"/>
                    </params>
                    <declaration name="size" type="int" line="2211"/>
                </method>
                <method name="get" type="E" line="2217">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="set" type="E" line="2220">
                    <params>
                        <param name="index" type="int"/>
                        <param name="element" type="E"/>
                    </params>
                    <declaration name="oldValue" type="E" line="2221"/>
                </method>
                <method name="indexOf" type="int" line="2225">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="2226"/>
                    <scope line="2229"/>
                </method>
                <method name="contains" type="boolean" line="2234">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <javadoc line="2238">
                Returns a hash code based on the contents of the specified array.
                  For any two &lt;tt&gt;long&lt;/tt&gt; arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt;
                  such that &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is the same value that would be
                  obtained by invoking the {@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;}method on a {@link List} containing a sequence of {@link Long}instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.
                  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.                
                <param>
                    a the array whose hash value to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2250">
                <params>
                    <param name="a" type="long"/>
                </params>
                <declaration name="result" type="int" line="2252"/>
                <scope line="2253">
                    <declaration name="elementHash" type="int" line="2254"/>
                </scope>
            </method>
            <javadoc line="2259">
                Returns a hash code based on the contents of the specified array.
                  For any two non-null &lt;tt&gt;int&lt;/tt&gt; arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt;
                  such that &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is the same value that would be
                  obtained by invoking the {@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;}method on a {@link List} containing a sequence of {@link Integer}instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.
                  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.                
                <param>
                    a the array whose hash value to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2271">
                <params>
                    <param name="a" type="int"/>
                </params>
                <declaration name="result" type="int" line="2273"/>
            </method>
            <javadoc line="2277">
                Returns a hash code based on the contents of the specified array.
                  For any two &lt;tt&gt;short&lt;/tt&gt; arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt;
                  such that &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is the same value that would be
                  obtained by invoking the {@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;}method on a {@link List} containing a sequence of {@link Short}instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.
                  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.                
                <param>
                    a the array whose hash value to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2289">
                <params>
                    <param name="a" type="short"/>
                </params>
                <declaration name="result" type="int" line="2291"/>
            </method>
            <javadoc line="2295">
                Returns a hash code based on the contents of the specified array.
                  For any two &lt;tt&gt;char&lt;/tt&gt; arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt;
                  such that &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is the same value that would be
                  obtained by invoking the {@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;}method on a {@link List} containing a sequence of {@link Character}instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.
                  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.                
                <param>
                    a the array whose hash value to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2307">
                <params>
                    <param name="a" type="char"/>
                </params>
                <declaration name="result" type="int" line="2309"/>
            </method>
            <javadoc line="2313">
                Returns a hash code based on the contents of the specified array.
                  For any two &lt;tt&gt;byte&lt;/tt&gt; arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt;
                  such that &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is the same value that would be
                  obtained by invoking the {@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;}method on a {@link List} containing a sequence of {@link Byte}instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.
                  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.                
                <param>
                    a the array whose hash value to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2325">
                <params>
                    <param name="a" type="byte"/>
                </params>
                <declaration name="result" type="int" line="2327"/>
            </method>
            <javadoc line="2331">
                Returns a hash code based on the contents of the specified array.
                  For any two &lt;tt&gt;boolean&lt;/tt&gt; arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt;
                  such that &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is the same value that would be
                  obtained by invoking the {@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;}method on a {@link List} containing a sequence of {@link Boolean}instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.
                  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.                
                <param>
                    a the array whose hash value to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2343">
                <params>
                    <param name="a" type="boolean"/>
                </params>
                <declaration name="result" type="int" line="2345"/>
            </method>
            <javadoc line="2349">
                Returns a hash code based on the contents of the specified array.
                  For any two &lt;tt&gt;float&lt;/tt&gt; arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt;
                  such that &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is the same value that would be
                  obtained by invoking the {@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;}method on a {@link List} containing a sequence of {@link Float}instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.
                  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.                
                <param>
                    a the array whose hash value to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2361">
                <params>
                    <param name="a" type="float"/>
                </params>
                <declaration name="result" type="int" line="2363"/>
            </method>
            <javadoc line="2367">
                Returns a hash code based on the contents of the specified array.
                  For any two &lt;tt&gt;double&lt;/tt&gt; arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt;
                  such that &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is the same value that would be
                  obtained by invoking the {@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;}method on a {@link List} containing a sequence of {@link Double}instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.
                  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.                
                <param>
                    a the array whose hash value to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2379">
                <params>
                    <param name="a" type="double"/>
                </params>
                <declaration name="result" type="int" line="2381"/>
                <scope line="2382">
                    <declaration name="bits" type="long" line="2383"/>
                </scope>
            </method>
            <javadoc line="2388">
                Returns a hash code based on the contents of the specified array.  If
                  the array contains other arrays as elements, the hash code is based on
                  their identities rather than their contents.  It is therefore
                  acceptable to invoke this method on an array that contains itself as an
                  element,  either directly or indirectly through one or more levels of
                  arrays.
                  &lt;p&gt;For any two arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; such that
                  &lt;tt&gt;Arrays.equals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The value returned by this method is equal to the value that would
                  be returned by &lt;tt&gt;Arrays.asList(a).hashCode()&lt;/tt&gt;, unless &lt;tt&gt;a&lt;/tt&gt;
                  is &lt;tt&gt;null&lt;/tt&gt;, in which case &lt;tt&gt;0&lt;/tt&gt; is returned.                
                <param>
                    a the array whose content-based hash code to compute                    
                </param>
                <return>
                    a content-based hash code for <tt>a</tt>                    
                </return>
                <see>
                    #deepHashCode(Object[])                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="2406">
                <params>
                    <param name="a" type="Object"/>
                </params>
                <declaration name="result" type="int" line="2408"/>
            </method>
            <javadoc line="2412">
                Returns a hash code based on the &quot;deep contents&quot; of the specified
                  array.  If the array contains other arrays as elements, the
                  hash code is based on their contents and so on, ad infinitum.
                  It is therefore unacceptable to invoke this method on an array that
                  contains itself as an element, either directly or indirectly through
                  one or more levels of arrays.  The behavior of such an invocation is
                  undefined.
                  &lt;p&gt;For any two arrays &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; such that
                  &lt;tt&gt;Arrays.deepEquals(a, b)&lt;/tt&gt;, it is also the case that
                  &lt;tt&gt;Arrays.deepHashCode(a) == Arrays.deepHashCode(b)&lt;/tt&gt;.
                  &lt;p&gt;The computation of the value returned by this method is similar to
                  that of the value returned by {@link List#hashCode()} on a list
                  containing the same elements as &lt;tt&gt;a&lt;/tt&gt; in the same order, with one
                  difference: If an element &lt;tt&gt;e&lt;/tt&gt; of &lt;tt&gt;a&lt;/tt&gt; is itself an array,
                  its hash code is computed not by calling &lt;tt&gt;e.hashCode()&lt;/tt&gt;, but as
                  by calling the appropriate overloading of &lt;tt&gt;Arrays.hashCode(e)&lt;/tt&gt;
                  if &lt;tt&gt;e&lt;/tt&gt; is an array of a primitive type, or as by calling
                  &lt;tt&gt;Arrays.deepHashCode(e)&lt;/tt&gt; recursively if &lt;tt&gt;e&lt;/tt&gt; is an array
                  of a reference type.  If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method
                  returns 0.                
                <param>
                    a the array whose deep-content-based hash code to compute                    
                </param>
                <return>
                    a deep-content-based hash code for <tt>a</tt>                    
                </return>
                <see>
                    #hashCode(Object[])                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="deepHashCode" type="int" line="2438">
                <params>
                    <param name="a" type="Object"/>
                </params>
                <declaration name="result" type="int" line="2440"/>
                <scope line="2441">
                    <declaration name="elementHash" type="int" line="2442"/>
                </scope>
            </method>
            <javadoc line="2457">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays are &lt;i&gt;deeply
                  equal&lt;/i&gt; to one another.  Unlike the {@link #equals(Object[],Object[])}method, this method is appropriate for use with nested arrays of
                  arbitrary depth.
                  &lt;p&gt;Two array references are considered deeply equal if both
                  are &lt;tt&gt;null&lt;/tt&gt;, or if they refer to arrays that contain the same
                  number of elements and all corresponding pairs of elements in the two
                  arrays are deeply equal.
                  &lt;p&gt;Two possibly &lt;tt&gt;null&lt;/tt&gt; elements &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; are
                  deeply equal if any of the following conditions hold:
                  &lt;ul&gt;
                  &lt;li&gt; &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; are both arrays of object reference
                  types, and &lt;tt&gt;Arrays.deepEquals(e1, e2) would return true&lt;/tt&gt;
                  &lt;li&gt; &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; are arrays of the same primitive
                  type, and the appropriate overloading of
                  &lt;tt&gt;Arrays.equals(e1, e2)&lt;/tt&gt; would return true.
                  &lt;li&gt; &lt;tt&gt;e1 == e2&lt;/tt&gt;
                  &lt;li&gt; &lt;tt&gt;e1.equals(e2)&lt;/tt&gt; would return true.
                  &lt;/ul&gt;
                  Note that this definition permits &lt;tt&gt;null&lt;/tt&gt; elements at any depth.
                  &lt;p&gt;If either of the specified arrays contain themselves as elements
                  either directly or indirectly through one or more levels of arrays,
                  the behavior of this method is undefined.                
                <param>
                    a1 one array to be tested for equality                    
                </param>
                <param>
                    a2 the other array to be tested for equality                    
                </param>
                <return>
                    <tt>true</tt> if the two arrays are equal                    
                </return>
                <see>
                    #equals(Object[],Object[])                    
                </see>
                <see>
                    Objects#deepEquals(Object,Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="deepEquals" type="boolean" line="2487">
                <params>
                    <param name="a1" type="Object[]"/>
                    <param name="a2" type="Object[]"/>
                </params>
                <declaration name="length" type="int" line="2490"/>
                <scope line="2492">
                    <declaration name="e1" type="Object" line="2493"/>
                    <declaration name="e2" type="Object" line="2494"/>
                    <declaration name="eq" type="boolean" line="2497"/>
                </scope>
            </method>
            <method name="deepEquals0" type="boolean" line="2502">
                <params>
                    <param name="e1" type="Object"/>
                    <param name="e2" type="Object"/>
                </params>
            </method>
            <javadoc line="2517">
                Returns a string representation of the contents of the specified array.
                  The string representation consists of a list of the array&apos;s elements,
                  enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are
                  separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma followed by a
                  space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(long)&lt;/tt&gt;.  Returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if &lt;tt&gt;a&lt;/tt&gt;
                  is &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2529">
                <params>
                    <param name="a" type="long[]"/>
                </params>
                <declaration name="iMax" type="int" line="2531"/>
                <declaration name="b" type="StringBuilder" line="2533"/>
                <scope line="2535"/>
            </method>
            <javadoc line="2541">
                Returns a string representation of the contents of the specified array.
                  The string representation consists of a list of the array&apos;s elements,
                  enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are
                  separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma followed by a
                  space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(int)&lt;/tt&gt;.  Returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if &lt;tt&gt;a&lt;/tt&gt; is
                  &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2553">
                <params>
                    <param name="a" type="int[]"/>
                </params>
                <declaration name="iMax" type="int" line="2555"/>
                <declaration name="b" type="StringBuilder" line="2557"/>
                <scope line="2559"/>
            </method>
            <javadoc line="2565">
                Returns a string representation of the contents of the specified array.
                  The string representation consists of a list of the array&apos;s elements,
                  enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are
                  separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma followed by a
                  space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(short)&lt;/tt&gt;.  Returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if &lt;tt&gt;a&lt;/tt&gt;
                  is &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2577">
                <params>
                    <param name="a" type="short[]"/>
                </params>
                <declaration name="iMax" type="int" line="2579"/>
                <declaration name="b" type="StringBuilder" line="2581"/>
                <scope line="2583"/>
            </method>
            <javadoc line="2589">
                Returns a string representation of the contents of the specified array.
                  The string representation consists of a list of the array&apos;s elements,
                  enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are
                  separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma followed by a
                  space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(char)&lt;/tt&gt;.  Returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if &lt;tt&gt;a&lt;/tt&gt;
                  is &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2601">
                <params>
                    <param name="a" type="char[]"/>
                </params>
                <declaration name="iMax" type="int" line="2603"/>
                <declaration name="b" type="StringBuilder" line="2605"/>
                <scope line="2607"/>
            </method>
            <javadoc line="2613">
                Returns a string representation of the contents of the specified array.
                  The string representation consists of a list of the array&apos;s elements,
                  enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements
                  are separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma followed
                  by a space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(byte)&lt;/tt&gt;.  Returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if
                  &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2625">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
                <declaration name="iMax" type="int" line="2627"/>
                <declaration name="b" type="StringBuilder" line="2629"/>
                <scope line="2631"/>
            </method>
            <javadoc line="2637">
                Returns a string representation of the contents of the specified array.
                  The string representation consists of a list of the array&apos;s elements,
                  enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are
                  separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma followed by a
                  space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(boolean)&lt;/tt&gt;.  Returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if
                  &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2649">
                <params>
                    <param name="a" type="boolean[]"/>
                </params>
                <declaration name="iMax" type="int" line="2651"/>
                <declaration name="b" type="StringBuilder" line="2653"/>
                <scope line="2655"/>
            </method>
            <javadoc line="2661">
                Returns a string representation of the contents of the specified array.
                  The string representation consists of a list of the array&apos;s elements,
                  enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are
                  separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma followed by a
                  space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(float)&lt;/tt&gt;.  Returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if &lt;tt&gt;a&lt;/tt&gt;
                  is &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2673">
                <params>
                    <param name="a" type="float[]"/>
                </params>
                <declaration name="iMax" type="int" line="2675"/>
                <declaration name="b" type="StringBuilder" line="2677"/>
                <scope line="2679"/>
            </method>
            <javadoc line="2685">
                Returns a string representation of the contents of the specified array.
                  The string representation consists of a list of the array&apos;s elements,
                  enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are
                  separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma followed by a
                  space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(double)&lt;/tt&gt;.  Returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if &lt;tt&gt;a&lt;/tt&gt;
                  is &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2697">
                <params>
                    <param name="a" type="double[]"/>
                </params>
                <declaration name="iMax" type="int" line="2699"/>
                <declaration name="b" type="StringBuilder" line="2701"/>
                <scope line="2703"/>
            </method>
            <javadoc line="2709">
                Returns a string representation of the contents of the specified array.
                  If the array contains other arrays as elements, they are converted to
                  strings by the {@link Object#toString} method inherited from
                  &lt;tt&gt;Object&lt;/tt&gt;, which describes their &lt;i&gt;identities&lt;/i&gt; rather than
                  their contents.
                  &lt;p&gt;The value returned by this method is equal to the value that would
                  be returned by &lt;tt&gt;Arrays.asList(a).toString()&lt;/tt&gt;, unless &lt;tt&gt;a&lt;/tt&gt;
                  is &lt;tt&gt;null&lt;/tt&gt;, in which case &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; is returned.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <see>
                    #deepToString(Object[])                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="2723">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
                <declaration name="iMax" type="int" line="2725"/>
                <declaration name="b" type="StringBuilder" line="2727"/>
                <scope line="2729"/>
            </method>
            <javadoc line="2735">
                Returns a string representation of the &quot;deep contents&quot; of the specified
                  array.  If the array contains other arrays as elements, the string
                  representation contains their contents and so on.  This method is
                  designed for converting multidimensional arrays to strings.
                  &lt;p&gt;The string representation consists of a list of the array&apos;s
                  elements, enclosed in square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent
                  elements are separated by the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (a comma
                  followed by a space).  Elements are converted to strings as by
                  &lt;tt&gt;String.valueOf(Object)&lt;/tt&gt;, unless they are themselves
                  arrays.
                  &lt;p&gt;If an element &lt;tt&gt;e&lt;/tt&gt; is an array of a primitive type, it is
                  converted to a string as by invoking the appropriate overloading of
                  &lt;tt&gt;Arrays.toString(e)&lt;/tt&gt;.  If an element &lt;tt&gt;e&lt;/tt&gt; is an array of a
                  reference type, it is converted to a string as by invoking
                  this method recursively.
                  &lt;p&gt;To avoid infinite recursion, if the specified array contains itself
                  as an element, or contains an indirect reference to itself through one
                  or more levels of arrays, the self-reference is converted to the string
                  &lt;tt&gt;&quot;[...]&quot;&lt;/tt&gt;.  For example, an array containing only a reference
                  to itself would be rendered as &lt;tt&gt;&quot;[[...]]&quot;&lt;/tt&gt;.
                  &lt;p&gt;This method returns &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; if the specified array
                  is &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    a the array whose string representation to return                    
                </param>
                <return>
                    a string representation of <tt>a</tt>                    
                </return>
                <see>
                    #toString(Object[])                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="deepToString" type="String" line="2763">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
                <declaration name="bufLen" type="int" line="2765"/>
                <declaration name="buf" type="StringBuilder" line="2767"/>
            </method>
            <method name="deepToString" type="void" line="2771">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="buf" type="StringBuilder"/>
                    <param name="dejaVu" type="Set<Object[]>"/>
                </params>
                <scope line="2772"/>
                <declaration name="iMax" type="int" line="2776"/>
                <scope line="2777"/>
                <scope line="2783">
                    <declaration name="element" type="Object" line="2784"/>
                    <scope line="2785"/>
                    <scope line="2788">
                        <declaration name="eClass" type="Class" line="2789"/>
                        <scope line="2790">
                            <scope line="2799"/>
                        </scope>
                        <scope line="2804"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>