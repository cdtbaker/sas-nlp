<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io"/>
        <class name="IdentityHashMap" line="29">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <extends class="AbstractMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <comment line="912">
                Views                
            </comment>
            <implements interface="Map">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <implements interface="java.io.Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="29">
                This class implements the &lt;tt&gt;Map&lt;/tt&gt; interface with a hash table, using
                  reference-equality in place of object-equality when comparing keys (and
                  values).  In other words, in an &lt;tt&gt;IdentityHashMap&lt;/tt&gt;, two keys
                  &lt;tt&gt;k1&lt;/tt&gt; and &lt;tt&gt;k2&lt;/tt&gt; are considered equal if and only if
                  &lt;tt&gt;(k1==k2)&lt;/tt&gt;.  (In normal &lt;tt&gt;Map&lt;/tt&gt; implementations (like
                  &lt;tt&gt;HashMap&lt;/tt&gt;) two keys &lt;tt&gt;k1&lt;/tt&gt; and &lt;tt&gt;k2&lt;/tt&gt; are considered equal
                  if and only if &lt;tt&gt;(k1==null ? k2==null : k1.equals(k2))&lt;/tt&gt;.)
                  &lt;p&gt;&lt;b&gt;This class is &lt;i&gt;not&lt;/i&gt; a general-purpose &lt;tt&gt;Map&lt;/tt&gt;
                  implementation!  While this class implements the &lt;tt&gt;Map&lt;/tt&gt; interface, it
                  intentionally violates &lt;tt&gt;Map&apos;s&lt;/tt&gt; general contract, which mandates the
                  use of the &lt;tt&gt;equals&lt;/tt&gt; method when comparing objects.  This class is
                  designed for use only in the rare cases wherein reference-equality
                  semantics are required.&lt;/b&gt;
                  &lt;p&gt;A typical use of this class is &lt;i&gt;topology-preserving object graph
                  transformations&lt;/i&gt;, such as serialization or deep-copying.  To perform such
                  a transformation, a program must maintain a &quot;node table&quot; that keeps track
                  of all the object references that have already been processed.  The node
                  table must not equate distinct objects even if they happen to be equal.
                  Another typical use of this class is to maintain &lt;i&gt;proxy objects&lt;/i&gt;.  For
                  example, a debugging facility might wish to maintain a proxy object for
                  each object in the program being debugged.
                  &lt;p&gt;This class provides all of the optional map operations, and permits
                  &lt;tt&gt;null&lt;/tt&gt; values and the &lt;tt&gt;null&lt;/tt&gt; key.  This class makes no
                  guarantees as to the order of the map; in particular, it does not guarantee
                  that the order will remain constant over time.
                  &lt;p&gt;This class provides constant-time performance for the basic
                  operations (&lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;), assuming the system
                  identity hash function ({@link System#identityHashCode(Object)})
                  disperses elements properly among the buckets.
                  &lt;p&gt;This class has one tuning parameter (which affects performance but not
                  semantics): &lt;i&gt;expected maximum size&lt;/i&gt;.  This parameter is the maximum
                  number of key-value mappings that the map is expected to hold.  Internally,
                  this parameter is used to determine the number of buckets initially
                  comprising the hash table.  The precise relationship between the expected
                  maximum size and the number of buckets is unspecified.
                  &lt;p&gt;If the size of the map (the number of key-value mappings) sufficiently
                  exceeds the expected maximum size, the number of buckets is increased
                  Increasing the number of buckets (&quot;rehashing&quot;) may be fairly expensive, so
                  it pays to create identity hash maps with a sufficiently large expected
                  maximum size.  On the other hand, iteration over collection views requires
                  time proportional to the number of buckets in the hash table, so it
                  pays not to set the expected maximum size too high if you are especially
                  concerned with iteration performance or memory usage.
                  &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  If multiple threads access an identity hash map concurrently, and at
                  least one of the threads modifies the map structurally, it &lt;i&gt;must&lt;/i&gt;
                  be synchronized externally.  (A structural modification is any operation
                  that adds or deletes one or more mappings; merely changing the value
                  associated with a key that an instance already contains is not a
                  structural modification.)  This is typically accomplished by
                  synchronizing on some object that naturally encapsulates the map.
                  If no such object exists, the map should be &quot;wrapped&quot; using the{@link Collections#synchronizedMap Collections.synchronizedMap}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access to the map:&lt;pre&gt;
                  Map m = Collections.synchronizedMap(new IdentityHashMap(...));&lt;/pre&gt;
                  &lt;p&gt;The iterators returned by the &lt;tt&gt;iterator&lt;/tt&gt; method of the
                  collections returned by all of this class&apos;s &quot;collection view
                  methods&quot; are &lt;i&gt;fail-fast&lt;/i&gt;: if the map is structurally modified
                  at any time after the iterator is created, in any way except
                  through the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; method, the iterator
                  will throw a {@link ConcurrentModificationException}.  Thus, in the
                  face of concurrent modification, the iterator fails quickly and
                  cleanly, rather than risking arbitrary, non-deterministic behavior
                  at an undetermined time in the future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness: &lt;i&gt;fail-fast iterators should be used only
                  to detect bugs.&lt;/i&gt;
                  &lt;p&gt;Implementation note: This is a simple &lt;i&gt;linear-probe&lt;/i&gt; hash table,
                  as described for example in texts by Sedgewick and Knuth.  The array
                  alternates holding keys and values.  (This has better locality for large
                  tables than does using separate arrays.)  For many JRE implementations
                  and operation mixes, this class will yield better performance than{@link HashMap} (which uses &lt;i&gt;chaining&lt;/i&gt; rather than linear-probing).
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <see>
                    System#identityHashCode(Object)                    
                </see>
                <see>
                    Object#hashCode()                    
                </see>
                <see>
                    Collection                    
                </see>
                <see>
                    Map                    
                </see>
                <see>
                    HashMap                    
                </see>
                <see>
                    TreeMap                    
                </see>
                <author>
                    Doug Lea and Josh Bloch                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_CAPACITY" type="int" line="138"/>
            <javadoc line="138">
                The initial capacity used by the no-args constructor.
                  MUST be a power of two.  The value 32 corresponds to the
                  (specified) expected maximum size of 21, given a load factor
                  of 2/3.                
            </javadoc>
            <declaration name="MINIMUM_CAPACITY" type="int" line="146"/>
            <javadoc line="146">
                The minimum capacity, used if a lower value is implicitly specified
                  by either of the constructors with arguments.  The value 4 corresponds
                  to an expected maximum size of 2, given a load factor of 2/3.
                  MUST be a power of two.                
            </javadoc>
            <declaration name="MAXIMUM_CAPACITY" type="int" line="154"/>
            <javadoc line="154">
                The maximum capacity, used if a higher value is implicitly specified
                  by either of the constructors with arguments.
                  MUST be a power of two &lt;= 1&lt;&lt;29.                
            </javadoc>
            <declaration name="table" type="Object[]" line="161"/>
            <javadoc line="161">
                The table, resized as necessary. Length MUST always be a power of two.                
            </javadoc>
            <declaration name="size" type="int" line="166"/>
            <javadoc line="166">
                The number of key-value mappings contained in this identity hash map.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="modCount" type="int" line="173"/>
            <javadoc line="173">
                The number of modifications, to support fast-fail iterators                
            </javadoc>
            <declaration name="threshold" type="int" line="178"/>
            <javadoc line="178">
                The next size value at which to resize (capacity  load factor).                
            </javadoc>
            <declaration name="NULL_KEY" type="Object" line="183"/>
            <javadoc line="183">
                Value representing null keys inside tables.                
            </javadoc>
            <javadoc line="188">
                Use NULL_KEY for key if it is null.                
            </javadoc>
            <method name="maskNull" type="Object" line="191">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="195">
                Returns internal representation of null key back to caller as null.                
            </javadoc>
            <method name="unmaskNull" type="Object" line="198">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="202">
                Constructs a new, empty identity hash map with a default expected
                  maximum size (21).                
            </javadoc>
            <method name="IdentityHashMap" type="constructor" line="206"/>
            <javadoc line="210">
                Constructs a new, empty map with the specified expected maximum size.
                  Putting more than the expected number of key-value mappings into
                  the map may cause the internal data structure to grow, which may be
                  somewhat time-consuming.                
                <param>
                    expectedMaxSize the expected maximum size of the map                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;expectedMaxSize&lt;/tt&gt; is negative                    
                </throws>
            </javadoc>
            <method name="IdentityHashMap" type="constructor" line="219">
                <params>
                    <param name="expectedMaxSize" type="int"/>
                </params>
            </method>
            <javadoc line="226">
                Returns the appropriate capacity for the specified expected maximum
                  size.  Returns the smallest power of two between MINIMUM_CAPACITY
                  and MAXIMUM_CAPACITY, inclusive, that is greater than
                  (3  expectedMaxSize)/2, if such a number exists.  Otherwise
                  returns MAXIMUM_CAPACITY.  If (3  expectedMaxSize)/2 is negative, it
                  is assumed that overflow has occurred, and MAXIMUM_CAPACITY is returned.                
            </javadoc>
            <method name="capacity" type="int" line="234">
                <params>
                    <param name="expectedMaxSize" type="int"/>
                </params>
                <comment line="236">
                    Compute min capacity for expectedMaxSize given a load factor of 2/3                    
                </comment>
                <comment line="239">
                    Compute the appropriate capacity                    
                </comment>
                <declaration name="minCapacity" type="int" line="236"/>
                <declaration name="result" type="int" line="239"/>
                <scope line="240"/>
                <scope line="242"/>
            </method>
            <javadoc line="250">
                Initializes object to be an empty map with the specified initial
                  capacity, which is assumed to be a power of two between
                  MINIMUM_CAPACITY and MAXIMUM_CAPACITY inclusive.                
            </javadoc>
            <method name="init" type="void" line="255">
                <params>
                    <param name="initCapacity" type="int"/>
                </params>
                <comment line="257">
                    assert (initCapacity &amp; -initCapacity) == initCapacity; // power of 2
                     assert initCapacity &gt;= MINIMUM_CAPACITY;
                     assert initCapacity &lt;= MAXIMUM_CAPACITY;                    
                </comment>
            </method>
            <javadoc line="264">
                Constructs a new identity hash map containing the keys-value mappings
                  in the specified map.                
                <param>
                    m the map whose mappings are to be placed into this map                    
                </param>
                <throws>
                    NullPointerException if the specified map is null                    
                </throws>
            </javadoc>
            <method name="IdentityHashMap" type="constructor" line="271">
                <params>
                    <param name="m" type="Map<? extends K,? extends V>"/>
                </params>
                <comment line="273">
                    Allow for a bit of growth                    
                </comment>
            </method>
            <javadoc line="277">
                Returns the number of key-value mappings in this identity hash map.                
                <return>
                    the number of key-value mappings in this map                    
                </return>
            </javadoc>
            <method name="size" type="int" line="282"/>
            <javadoc line="286">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this identity hash map contains no key-value
                  mappings.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this identity hash map contains no key-value
                      mappings                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="293"/>
            <javadoc line="297">
                Returns index for Object x.                
            </javadoc>
            <method name="hash" type="int" line="300">
                <params>
                    <param name="x" type="Object"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="303">
                    Multiply by -127, and left-shift to use least bit as part of hash                    
                </comment>
                <declaration name="h" type="int" line="301"/>
            </method>
            <javadoc line="306">
                Circularly traverses table of size len.                
            </javadoc>
            <method name="nextKeyIndex" type="int" line="309">
                <params>
                    <param name="i" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="313">
                Returns the value to which the specified key is mapped,
                  or {@code null} if this map contains no mapping for the key.
                  &lt;p&gt;More formally, if this map contains a mapping from a key{@code k} to a value {@code v} such that {@code (key == k)},
                  then this method returns {@code v}; otherwise it returns{@code null}.  (There can be at most one such mapping.)
                  &lt;p&gt;A return value of {@code null} does not &lt;i&gt;necessarily&lt;/i&gt;
                  indicate that the map contains no mapping for the key; it&apos;s also
                  possible that the map explicitly maps the key to {@code null}.
                  The {@link #containsKey containsKey} operation may be used to
                  distinguish these two cases.                
                <see>
                    #put(Object,Object)                    
                </see>
            </javadoc>
            <method name="get" type="V" line="330">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="k" type="Object" line="331"/>
                <declaration name="tab" type="Object[]" line="332"/>
                <declaration name="len" type="int" line="333"/>
                <declaration name="i" type="int" line="334"/>
                <scope line="335">
                    <declaration name="item" type="Object" line="336"/>
                </scope>
            </method>
            <javadoc line="345">
                Tests whether the specified object reference is a key in this identity
                  hash map.                
                <param>
                    key   possible key                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified object reference is a key
                      in this map                    
                </return>
                <see>
                    #containsValue(Object)                    
                </see>
            </javadoc>
            <method name="containsKey" type="boolean" line="354">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="k" type="Object" line="355"/>
                <declaration name="tab" type="Object[]" line="356"/>
                <declaration name="len" type="int" line="357"/>
                <declaration name="i" type="int" line="358"/>
                <scope line="359">
                    <declaration name="item" type="Object" line="360"/>
                </scope>
            </method>
            <javadoc line="369">
                Tests whether the specified object reference is a value in this identity
                  hash map.                
                <param>
                    value value whose presence in this map is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the
                      specified object reference                    
                </return>
                <see>
                    #containsKey(Object)                    
                </see>
            </javadoc>
            <method name="containsValue" type="boolean" line="378">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="tab" type="Object[]" line="379"/>
            </method>
            <javadoc line="387">
                Tests if the specified key-value mapping is in the map.                
                <param>
                    key   possible key                    
                </param>
                <param>
                    value possible value                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if and only if the specified key-value
                      mapping is in the map                    
                </return>
            </javadoc>
            <method name="containsMapping" type="boolean" line="395">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="k" type="Object" line="396"/>
                <declaration name="tab" type="Object[]" line="397"/>
                <declaration name="len" type="int" line="398"/>
                <declaration name="i" type="int" line="399"/>
                <scope line="400">
                    <declaration name="item" type="Object" line="401"/>
                </scope>
            </method>
            <javadoc line="410">
                Associates the specified value with the specified key in this identity
                  hash map.  If the map previously contained a mapping for the key, the
                  old value is replaced.                
                <param>
                    key the key with which the specified value is to be associated                    
                </param>
                <param>
                    value the value to be associated with the specified key                    
                </param>
                <return>
                    the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or
                      &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.
                      (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map
                      previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    #get(Object)                    
                </see>
                <see>
                    #containsKey(Object)                    
                </see>
            </javadoc>
            <method name="put" type="V" line="425">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
                <comment line="446">
                    len == 2 * current capacity.                    
                </comment>
                <declaration name="k" type="Object" line="426"/>
                <declaration name="tab" type="Object[]" line="427"/>
                <declaration name="len" type="int" line="428"/>
                <declaration name="i" type="int" line="429"/>
                <declaration name="item" type="Object" line="431"/>
                <scope line="432">
                    <scope line="433">
                        <declaration name="oldValue" type="V" line="434"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="449">
                Resize the table to hold given capacity.                
                <param>
                    newCapacity the new capacity, must be a power of two.                    
                </param>
            </javadoc>
            <method name="resize" type="void" line="454">
                <params>
                    <param name="newCapacity" type="int"/>
                </params>
                <comment line="456">
                    assert (newCapacity &amp; -newCapacity) == newCapacity; // power of 2                    
                </comment>
                <comment line="461">
                    can&apos;t expand any further                    
                </comment>
                <comment line="464">
                    Gigantic map!                    
                </comment>
                <declaration name="newLength" type="int" line="456"/>
                <declaration name="oldTable" type="Object[]" line="458"/>
                <declaration name="oldLength" type="int" line="459"/>
                <scope line="460"/>
                <declaration name="newTable" type="Object[]" line="469"/>
                <scope line="472">
                    <declaration name="key" type="Object" line="473"/>
                    <scope line="474">
                        <declaration name="value" type="Object" line="475"/>
                        <declaration name="i" type="int" line="478"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="488">
                Copies all of the mappings from the specified map to this map.
                  These mappings will replace any mappings that this map had for
                  any of the keys currently in the specified map.                
                <param>
                    m mappings to be stored in this map                    
                </param>
                <throws>
                    NullPointerException if the specified map is null                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="496">
                <params>
                    <param name="m" type="Map<? extends K,? extends V>"/>
                </params>
                <comment line="501">
                    conservatively pre-expand                    
                </comment>
                <declaration name="n" type="int" line="497"/>
            </method>
            <javadoc line="507">
                Removes the mapping for this key from this map if present.                
                <param>
                    key key whose mapping is to be removed from the map                    
                </param>
                <return>
                    the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or
                      &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.
                      (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map
                      previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)                    
                </return>
            </javadoc>
            <method name="remove" type="V" line="516">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="k" type="Object" line="517"/>
                <declaration name="tab" type="Object[]" line="518"/>
                <declaration name="len" type="int" line="519"/>
                <declaration name="i" type="int" line="520"/>
                <scope line="522">
                    <declaration name="item" type="Object" line="523"/>
                    <scope line="524">
                        <declaration name="oldValue" type="V" line="527"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="540">
                Removes the specified key-value mapping from the map if it is present.                
                <param>
                    key   possible key                    
                </param>
                <param>
                    value possible value                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if and only if the specified key-value
                      mapping was in the map                    
                </return>
            </javadoc>
            <method name="removeMapping" type="boolean" line="548">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="k" type="Object" line="549"/>
                <declaration name="tab" type="Object[]" line="550"/>
                <declaration name="len" type="int" line="551"/>
                <declaration name="i" type="int" line="552"/>
                <scope line="554">
                    <declaration name="item" type="Object" line="555"/>
                    <scope line="556"/>
                </scope>
            </method>
            <javadoc line="572">
                Rehash all possibly-colliding entries following a
                  deletion. This preserves the linear-probe
                  collision properties required by get, put, etc.                
                <param>
                    d the index of a newly empty deleted slot                    
                </param>
            </javadoc>
            <method name="closeDeletion" type="void" line="579">
                <params>
                    <param name="d" type="int"/>
                </params>
                <comment line="581">
                    Adapted from Knuth Section 6.4 Algorithm R                    
                </comment>
                <comment line="585">
                    Look for items to swap into newly vacated slot
                     starting at index immediately following deletion,
                     and continuing until a null slot is seen, indicating
                     the end of a run of possibly-colliding keys.                    
                </comment>
                <comment line="592">
                    The following test triggers if the item at slot i (which
                     hashes to be at slot r) should take the spot vacated by d.
                     If so, we swap it in, and then continue with d now at the
                     newly vacated i.  This process will terminate when we hit
                     the null slot at the end of this run.
                     The test is messy because we are using a circular table.                    
                </comment>
                <declaration name="tab" type="Object[]" line="581"/>
                <declaration name="len" type="int" line="582"/>
                <declaration name="item" type="Object" line="588"/>
                <scope line="590">
                    <declaration name="r" type="int" line="597"/>
                    <scope line="598"/>
                </scope>
            </method>
            <javadoc line="608">
                Removes all of the mappings from this map.
                  The map will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="612">
                <declaration name="tab" type="Object[]" line="614"/>
            </method>
            <javadoc line="620">
                Compares the specified object with this map for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the given object is also a map and the two maps
                  represent identical object-reference mappings.  More formally, this
                  map is equal to another map &lt;tt&gt;m&lt;/tt&gt; if and only if
                  &lt;tt&gt;this.entrySet().equals(m.entrySet())&lt;/tt&gt;.
                  &lt;p&gt;&lt;b&gt;Owing to the reference-equality-based semantics of this map it is
                  possible that the symmetry and transitivity requirements of the
                  &lt;tt&gt;Object.equals&lt;/tt&gt; contract may be violated if this map is compared
                  to a normal map.  However, the &lt;tt&gt;Object.equals&lt;/tt&gt; contract is
                  guaranteed to hold among &lt;tt&gt;IdentityHashMap&lt;/tt&gt; instances.&lt;/b&gt;                
                <param>
                    o object to be compared for equality with this map                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this map                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="637">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <comment line="657">
                    o is not a Map                    
                </comment>
                <scope line="638"/>
                <scope line="640">
                    <declaration name="m" type="IdentityHashMap" line="641"/>
                    <declaration name="tab" type="Object[]" line="645"/>
                    <scope line="646">
                        <declaration name="k" type="Object" line="647"/>
                    </scope>
                </scope>
                <scope line="652">
                    <declaration name="m" type="Map" line="653"/>
                </scope>
                <scope line="655"/>
            </method>
            <javadoc line="660">
                Returns the hash code value for this map.  The hash code of a map is
                  defined to be the sum of the hash codes of each entry in the map&apos;s
                  &lt;tt&gt;entrySet()&lt;/tt&gt; view.  This ensures that &lt;tt&gt;m1.equals(m2)&lt;/tt&gt;
                  implies that &lt;tt&gt;m1.hashCode()==m2.hashCode()&lt;/tt&gt; for any two
                  &lt;tt&gt;IdentityHashMap&lt;/tt&gt; instances &lt;tt&gt;m1&lt;/tt&gt; and &lt;tt&gt;m2&lt;/tt&gt;, as
                  required by the general contract of {@link Object#hashCode}.
                  &lt;p&gt;&lt;b&gt;Owing to the reference-equality-based semantics of the
                  &lt;tt&gt;Map.Entry&lt;/tt&gt; instances in the set returned by this map&apos;s
                  &lt;tt&gt;entrySet&lt;/tt&gt; method, it is possible that the contractual
                  requirement of &lt;tt&gt;Object.hashCode&lt;/tt&gt; mentioned in the previous
                  paragraph will be violated if one of the two objects being compared is
                  an &lt;tt&gt;IdentityHashMap&lt;/tt&gt; instance and the other is a normal map.&lt;/b&gt;                
                <return>
                    the hash code value for this map                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    #equals(Object)                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="679">
                <declaration name="result" type="int" line="680"/>
                <declaration name="tab" type="Object[]" line="681"/>
                <scope line="682">
                    <declaration name="key" type="Object" line="683"/>
                    <scope line="684">
                        <declaration name="k" type="Object" line="685"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="693">
                Returns a shallow copy of this identity hash map: the keys and values
                  themselves are not cloned.                
                <return>
                    a shallow copy of this map                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="699">
                <scope line="700">
                    <declaration name="m" type="IdentityHashMap&lt;K,V&gt;" line="701"/>
                </scope>
                <scope line="705"/>
            </method>
            <class name="IdentityHashMapIterator" line="710">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <comment line="712">
                    current slot.                    
                </comment>
                <comment line="713">
                    to support fast-fail                    
                </comment>
                <comment line="714">
                    to allow remove()                    
                </comment>
                <comment line="715">
                    To avoid unnecessary next computation                    
                </comment>
                <comment line="716">
                    reference to main table or copy                    
                </comment>
                <comment line="982">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <comment line="1128">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <declaration name="index" type="int" line="711"/>
                <declaration name="expectedModCount" type="int" line="712"/>
                <declaration name="lastReturnedIndex" type="int" line="713"/>
                <declaration name="indexValid" type="boolean" line="714"/>
                <declaration name="traversalTable" type="Object[]" line="715"/>
                <method name="hasNext" type="boolean" line="717">
                    <declaration name="tab" type="Object[]" line="718"/>
                    <scope line="719">
                        <declaration name="key" type="Object" line="720"/>
                        <scope line="721"/>
                    </scope>
                </method>
                <method name="nextIndex" type="int" line="730"/>
                <method name="remove" type="void" line="742">
                    <comment line="752">
                        back up index to revisit new contents after deletion                        
                    </comment>
                    <comment line="756">
                        Removal code proceeds as in closeDeletion except that
                         it must catch the rare case where an element already
                         seen is swapped into a vacant slot that will be later
                         traversed by this iterator. We cannot allow future
                         next() calls to return it again.  The likelihood of
                         this occurring under 2/3 load factor is very slim, but
                         when it does happen, we must make a copy of the rest of
                         the table to use for the rest of the traversal. Since
                         this can only happen when we are near the end of the table,
                         even in these rare cases, this is not very expensive in
                         time or space.                        
                    </comment>
                    <comment line="773">
                        vacate the slot                        
                    </comment>
                    <comment line="776">
                        If traversing a copy, remove in real table.
                         We can skip gap-closure on copy.                        
                    </comment>
                    <comment line="790">
                        See closeDeletion for explanation of this conditional                        
                    </comment>
                    <comment line="794">
                        If we are about to swap an already-seen element
                         into a slot that may later be returned by next(),
                         then clone the rest of table for use in future
                         next() calls. It is OK that our copy will have
                         a gap in the &quot;wrong&quot; place, since it will never
                         be used for searching anyway.                        
                    </comment>
                    <declaration name="deletedSlot" type="int" line="749"/>
                    <declaration name="tab" type="Object[]" line="767"/>
                    <declaration name="len" type="int" line="768"/>
                    <declaration name="d" type="int" line="770"/>
                    <declaration name="key" type="K" line="771"/>
                    <scope line="777"/>
                    <declaration name="item" type="Object" line="785"/>
                    <scope line="787">
                        <declaration name="r" type="int" line="788"/>
                        <scope line="791">
                            <scope line="801">
                                <declaration name="remaining" type="int" line="802"/>
                                <declaration name="newTable" type="Object[]" line="803"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="KeyIterator" line="820">
                <extends class="IdentityHashMapIterator">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <comment line="712">
                    current slot.                    
                </comment>
                <comment line="713">
                    to support fast-fail                    
                </comment>
                <comment line="714">
                    to allow remove()                    
                </comment>
                <comment line="715">
                    To avoid unnecessary next computation                    
                </comment>
                <comment line="716">
                    reference to main table or copy                    
                </comment>
                <comment line="982">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <comment line="1128">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <method name="next" type="K" line="821"/>
            </class>
            <class name="ValueIterator" line="826">
                <extends class="IdentityHashMapIterator">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <comment line="712">
                    current slot.                    
                </comment>
                <comment line="713">
                    to support fast-fail                    
                </comment>
                <comment line="714">
                    to allow remove()                    
                </comment>
                <comment line="715">
                    To avoid unnecessary next computation                    
                </comment>
                <comment line="716">
                    reference to main table or copy                    
                </comment>
                <comment line="982">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <comment line="1128">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <method name="next" type="V" line="827"/>
            </class>
            <class name="EntryIterator" line="832">
                <extends class="IdentityHashMapIterator">
                    <type_params>
                        <type_param name="Map.Entry<K,V>"/>
                    </type_params>
                </extends>
                <comment line="712">
                    current slot.                    
                </comment>
                <comment line="713">
                    to support fast-fail                    
                </comment>
                <comment line="714">
                    to allow remove()                    
                </comment>
                <comment line="715">
                    To avoid unnecessary next computation                    
                </comment>
                <comment line="716">
                    reference to main table or copy                    
                </comment>
                <comment line="982">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <comment line="1128">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <declaration name="lastReturnedEntry" type="Entry" line="835"/>
                <method name="next" type="Map.Entry<K,V>" line="837"/>
                <method name="remove" type="void" line="842"/>
                <class name="Entry" line="850">
                    <implements interface="Map.Entry">
                        <type_params>
                            <type_param name="K"/>
                            <type_param name="V"/>
                        </type_params>
                    </implements>
                    <declaration name="index" type="int" line="851"/>
                    <method name="Entry" type="constructor" line="853">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                    </method>
                    <method name="getKey" type="K" line="857"/>
                    <method name="getValue" type="V" line="862"/>
                    <method name="setValue" type="V" line="867">
                        <params>
                            <param name="value" type="V"/>
                        </params>
                        <comment line="872">
                            if shadowing, force into main table                            
                        </comment>
                        <declaration name="oldValue" type="V" line="869"/>
                    </method>
                    <method name="equals" type="boolean" line="877">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <declaration name="e" type="Map.Entry" line="883"/>
                    </method>
                    <method name="hashCode" type="int" line="888"/>
                    <method name="toString" type="String" line="896"/>
                    <method name="checkIndexForEntryUse" type="void" line="904"/>
                </class>
            </class>
            <declaration name="entrySet" type="Set&lt;Map.Entry&lt;K,V&gt;&gt;" line="913"/>
            <javadoc line="913">
                This field is initialized to contain an instance of the entry set
                  view the first time this view is requested.  The view is stateless,
                  so there&apos;s no reason to create more than one.                
            </javadoc>
            <javadoc line="920">
                Returns an identity-based set view of the keys contained in this map.
                  The set is backed by the map, so changes to the map are reflected in
                  the set, and vice-versa.  If the map is modified while an iteration
                  over the set is in progress, the results of the iteration are
                  undefined.  The set supports element removal, which removes the
                  corresponding mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,
                  &lt;tt&gt;Set.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt;, and
                  &lt;tt&gt;clear&lt;/tt&gt; methods.  It does not support the &lt;tt&gt;add&lt;/tt&gt; or
                  &lt;tt&gt;addAll&lt;/tt&gt; methods.
                  &lt;p&gt;&lt;b&gt;While the object returned by this method implements the
                  &lt;tt&gt;Set&lt;/tt&gt; interface, it does &lt;i&gt;not&lt;/i&gt; obey &lt;tt&gt;Set&apos;s&lt;/tt&gt; general
                  contract.  Like its backing map, the set returned by this method
                  defines element equality as reference-equality rather than
                  object-equality.  This affects the behavior of its &lt;tt&gt;contains&lt;/tt&gt;,
                  &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;containsAll&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt;, and
                  &lt;tt&gt;hashCode&lt;/tt&gt; methods.&lt;/b&gt;
                  &lt;p&gt;&lt;b&gt;The &lt;tt&gt;equals&lt;/tt&gt; method of the returned set returns &lt;tt&gt;true&lt;/tt&gt;
                  only if the specified object is a set containing exactly the same
                  object references as the returned set.  The symmetry and transitivity
                  requirements of the &lt;tt&gt;Object.equals&lt;/tt&gt; contract may be violated if
                  the set returned by this method is compared to a normal set.  However,
                  the &lt;tt&gt;Object.equals&lt;/tt&gt; contract is guaranteed to hold among sets
                  returned by this method.&lt;/b&gt;
                  &lt;p&gt;The &lt;tt&gt;hashCode&lt;/tt&gt; method of the returned set returns the sum of
                  the &lt;i&gt;identity hashcodes&lt;/i&gt; of the elements in the set, rather than
                  the sum of their hashcodes.  This is mandated by the change in the
                  semantics of the &lt;tt&gt;equals&lt;/tt&gt; method, in order to enforce the
                  general contract of the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method among sets
                  returned by this method.                
                <return>
                    an identity-based set view of the keys contained in this map                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    System#identityHashCode(Object)                    
                </see>
            </javadoc>
            <method name="keySet" type="Set<K>" line="958">
                <declaration name="ks" type="Set&lt;K&gt;" line="959"/>
            </method>
            <class name="KeySet" line="966">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <comment line="712">
                    current slot.                    
                </comment>
                <comment line="713">
                    to support fast-fail                    
                </comment>
                <comment line="714">
                    to allow remove()                    
                </comment>
                <comment line="715">
                    To avoid unnecessary next computation                    
                </comment>
                <comment line="716">
                    reference to main table or copy                    
                </comment>
                <comment line="982">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <comment line="1128">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <method name="iterator" type="Iterator<K>" line="967"/>
                <method name="size" type="int" line="970"/>
                <method name="contains" type="boolean" line="973">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="976">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="oldSize" type="int" line="977"/>
                </method>
                <method name="removeAll" type="boolean" line="986">
                    <params>
                        <param name="c" type="Collection<?>"/>
                    </params>
                    <declaration name="modified" type="boolean" line="987"/>
                    <scope line="988">
                        <scope line="989"/>
                    </scope>
                </method>
                <method name="clear" type="void" line="996"/>
                <method name="hashCode" type="int" line="999">
                    <declaration name="result" type="int" line="1000"/>
                </method>
            </class>
            <javadoc line="1007">
                Returns a {@link Collection} view of the values contained in this map.
                  The collection is backed by the map, so changes to the map are
                  reflected in the collection, and vice-versa.  If the map is
                  modified while an iteration over the collection is in progress,
                  the results of the iteration are undefined.  The collection
                  supports element removal, which removes the corresponding
                  mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,
                  &lt;tt&gt;Collection.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;,
                  &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;clear&lt;/tt&gt; methods.  It does not
                  support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; methods.
                  &lt;p&gt;&lt;b&gt;While the object returned by this method implements the
                  &lt;tt&gt;Collection&lt;/tt&gt; interface, it does &lt;i&gt;not&lt;/i&gt; obey
                  &lt;tt&gt;Collection&apos;s&lt;/tt&gt; general contract.  Like its backing map,
                  the collection returned by this method defines element equality as
                  reference-equality rather than object-equality.  This affects the
                  behavior of its &lt;tt&gt;contains&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt; and
                  &lt;tt&gt;containsAll&lt;/tt&gt; methods.&lt;/b&gt;                
            </javadoc>
            <method name="values" type="Collection<V>" line="1027">
                <declaration name="vs" type="Collection&lt;V&gt;" line="1028"/>
            </method>
            <class name="Values" line="1035">
                <extends class="AbstractCollection">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <comment line="712">
                    current slot.                    
                </comment>
                <comment line="713">
                    to support fast-fail                    
                </comment>
                <comment line="714">
                    to allow remove()                    
                </comment>
                <comment line="715">
                    To avoid unnecessary next computation                    
                </comment>
                <comment line="716">
                    reference to main table or copy                    
                </comment>
                <comment line="982">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <comment line="1128">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <method name="iterator" type="Iterator<V>" line="1036"/>
                <method name="size" type="int" line="1039"/>
                <method name="contains" type="boolean" line="1042">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="1045">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="1046">
                        <scope line="1047"/>
                    </scope>
                </method>
                <method name="clear" type="void" line="1054"/>
            </class>
            <javadoc line="1059">
                Returns a {@link Set} view of the mappings contained in this map.
                  Each element in the returned set is a reference-equality-based
                  &lt;tt&gt;Map.Entry&lt;/tt&gt;.  The set is backed by the map, so changes
                  to the map are reflected in the set, and vice-versa.  If the
                  map is modified while an iteration over the set is in progress,
                  the results of the iteration are undefined.  The set supports
                  element removal, which removes the corresponding mapping from
                  the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;, &lt;tt&gt;Set.remove&lt;/tt&gt;,
                  &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;clear&lt;/tt&gt;
                  methods.  It does not support the &lt;tt&gt;add&lt;/tt&gt; or
                  &lt;tt&gt;addAll&lt;/tt&gt; methods.
                  &lt;p&gt;Like the backing map, the &lt;tt&gt;Map.Entry&lt;/tt&gt; objects in the set
                  returned by this method define key and value equality as
                  reference-equality rather than object-equality.  This affects the
                  behavior of the &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;hashCode&lt;/tt&gt; methods of these
                  &lt;tt&gt;Map.Entry&lt;/tt&gt; objects.  A reference-equality based &lt;tt&gt;Map.Entry
                  e&lt;/tt&gt; is equal to an object &lt;tt&gt;o&lt;/tt&gt; if and only if &lt;tt&gt;o&lt;/tt&gt; is a
                  &lt;tt&gt;Map.Entry&lt;/tt&gt; and &lt;tt&gt;e.getKey()==o.getKey() &amp;amp;&amp;amp;
                  e.getValue()==o.getValue()&lt;/tt&gt;.  To accommodate these equals
                  semantics, the &lt;tt&gt;hashCode&lt;/tt&gt; method returns
                  &lt;tt&gt;System.identityHashCode(e.getKey()) ^
                  System.identityHashCode(e.getValue())&lt;/tt&gt;.
                  &lt;p&gt;&lt;b&gt;Owing to the reference-equality-based semantics of the
                  &lt;tt&gt;Map.Entry&lt;/tt&gt; instances in the set returned by this method,
                  it is possible that the symmetry and transitivity requirements of
                  the {@link Object#equals(Object)} contract may be violated if any of
                  the entries in the set is compared to a normal map entry, or if
                  the set returned by this method is compared to a set of normal map
                  entries (such as would be returned by a call to this method on a normal
                  map).  However, the &lt;tt&gt;Object.equals&lt;/tt&gt; contract is guaranteed to
                  hold among identity-based map entries, and among sets of such entries.
                  &lt;/b&gt;                
                <return>
                    a set view of the identity-mappings contained in this map                    
                </return>
            </javadoc>
            <method name="entrySet" type="Set<Map.Entry<K,V>>" line="1097">
                <declaration name="es" type="Set&lt;Map.Entry&lt;K,V&gt;&gt;" line="1098"/>
            </method>
            <class name="EntrySet" line="1105">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="Map.Entry<K,V>"/>
                    </type_params>
                </extends>
                <comment line="712">
                    current slot.                    
                </comment>
                <comment line="713">
                    to support fast-fail                    
                </comment>
                <comment line="714">
                    to allow remove()                    
                </comment>
                <comment line="715">
                    To avoid unnecessary next computation                    
                </comment>
                <comment line="716">
                    reference to main table or copy                    
                </comment>
                <comment line="982">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <comment line="1128">
                    Must revert from AbstractSet&apos;s impl to AbstractCollection&apos;s, as
                     the former contains an optimization that results in incorrect
                     behavior when c is a smaller &quot;normal&quot; (non-identity-based) Set.                    
                </comment>
                <method name="iterator" type="Iterator<Map.Entry<K,V>>" line="1106"/>
                <method name="contains" type="boolean" line="1109">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="entry" type="Map.Entry" line="1112"/>
                </method>
                <method name="remove" type="boolean" line="1115">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="entry" type="Map.Entry" line="1118"/>
                </method>
                <method name="size" type="int" line="1121"/>
                <method name="clear" type="void" line="1124"/>
                <method name="removeAll" type="boolean" line="1132">
                    <params>
                        <param name="c" type="Collection<?>"/>
                    </params>
                    <declaration name="modified" type="boolean" line="1133"/>
                    <scope line="1134">
                        <scope line="1135"/>
                    </scope>
                </method>
                <method name="toArray" type="Object[]" line="1143">
                    <declaration name="size" type="int" line="1144"/>
                    <declaration name="result" type="Object[]" line="1145"/>
                    <declaration name="it" type="Iterator&lt;Map.Entry&lt;K,V&gt;&gt;" line="1146"/>
                </method>
                <method name="toArray" type="T[]" line="1153">
                    <params>
                        <param name="a" type="T[]"/>
                    </params>
                    <declaration name="size" type="int" line="1154"/>
                    <declaration name="it" type="Iterator&lt;Map.Entry&lt;K,V&gt;&gt;" line="1158"/>
                </method>
            </class>
            <declaration name="serialVersionUID" type="long" line="1168"/>
            <javadoc line="1170">
                Save the state of the &lt;tt&gt;IdentityHashMap&lt;/tt&gt; instance to a stream
                  (i.e., serialize it).                
                <serialData>
                    The &lt;i&gt;size&lt;/i&gt; of the HashMap (the number of key-value
                      mappings) (&lt;tt&gt;int&lt;/tt&gt;), followed by the key (Object) and
                      value (Object) for each key-value mapping represented by the
                      IdentityHashMap.  The key-value mappings are emitted in no
                      particular order.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="1181">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="1183">
                    Write out and any hidden stuff                    
                </comment>
                <comment line="1186">
                    Write out size (number of Mappings)                    
                </comment>
                <comment line="1189">
                    Write out keys and values (alternating)                    
                </comment>
                <declaration name="tab" type="Object[]" line="1189"/>
                <scope line="1190">
                    <declaration name="key" type="Object" line="1191"/>
                    <scope line="1192"/>
                </scope>
            </method>
            <javadoc line="1199">
                Reconstitute the &lt;tt&gt;IdentityHashMap&lt;/tt&gt; instance from a stream (i.e.,
                  deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="1204">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="1206">
                    Read in any hidden stuff                    
                </comment>
                <comment line="1209">
                    Read in size (number of Mappings)                    
                </comment>
                <comment line="1212">
                    Allow for 33% growth (i.e., capacity is &gt;= 2* size()).                    
                </comment>
                <comment line="1215">
                    Read the keys and values, and put the mappings in the table                    
                </comment>
                <declaration name="size" type="int" line="1209"/>
                <scope line="1215">
                    <declaration name="key" type="K" line="1216"/>
                    <declaration name="value" type="V" line="1217"/>
                </scope>
            </method>
            <javadoc line="1222">
                The put method for readObject.  It does not resize the table,
                  update modCount, etc.                
            </javadoc>
            <method name="putForCreate" type="void" line="1228">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
                <declaration name="k" type="K" line="1229"/>
                <declaration name="tab" type="Object[]" line="1230"/>
                <declaration name="len" type="int" line="1231"/>
                <declaration name="i" type="int" line="1232"/>
                <declaration name="item" type="Object" line="1234"/>
                <scope line="1235"/>
            </method>
        </class>
    </source>