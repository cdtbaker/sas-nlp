<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="Collection">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Iterable">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <comment line="129">
                Query Operations                
            </comment>
            <comment line="237">
                Modification Operations                
            </comment>
            <comment line="297">
                Bulk Operations                
            </comment>
            <comment line="404">
                Comparison and hashing                
            </comment>
            <javadoc line="28">
                The root interface in the &lt;i&gt;collection hierarchy&lt;/i&gt;.  A collection
                  represents a group of objects, known as its &lt;i&gt;elements&lt;/i&gt;.  Some
                  collections allow duplicate elements and others do not.  Some are ordered
                  and others unordered.  The JDK does not provide any &lt;i&gt;direct&lt;/i&gt;
                  implementations of this interface: it provides implementations of more
                  specific subinterfaces like &lt;tt&gt;Set&lt;/tt&gt; and &lt;tt&gt;List&lt;/tt&gt;.  This interface
                  is typically used to pass collections around and manipulate them where
                  maximum generality is desired.
                  &lt;p&gt;&lt;i&gt;Bags&lt;/i&gt; or &lt;i&gt;multisets&lt;/i&gt; (unordered collections that may contain
                  duplicate elements) should implement this interface directly.
                  &lt;p&gt;All general-purpose &lt;tt&gt;Collection&lt;/tt&gt; implementation classes (which
                  typically implement &lt;tt&gt;Collection&lt;/tt&gt; indirectly through one of its
                  subinterfaces) should provide two &quot;standard&quot; constructors: a void (no
                  arguments) constructor, which creates an empty collection, and a
                  constructor with a single argument of type &lt;tt&gt;Collection&lt;/tt&gt;, which
                  creates a new collection with the same elements as its argument.  In
                  effect, the latter constructor allows the user to copy any collection,
                  producing an equivalent collection of the desired implementation type.
                  There is no way to enforce this convention (as interfaces cannot contain
                  constructors) but all of the general-purpose &lt;tt&gt;Collection&lt;/tt&gt;
                  implementations in the Java platform libraries comply.
                  &lt;p&gt;The &quot;destructive&quot; methods contained in this interface, that is, the
                  methods that modify the collection on which they operate, are specified to
                  throw &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if this collection does not
                  support the operation.  If this is the case, these methods may, but are not
                  required to, throw an &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the
                  invocation would have no effect on the collection.  For example, invoking
                  the {@link #addAll(Collection)} method on an unmodifiable collection may,
                  but is not required to, throw the exception if the collection to be added
                  is empty.
                  &lt;p&gt;&lt;a name=&quot;optional-restrictions&quot;/&gt;
                  Some collection implementations have restrictions on the elements that
                  they may contain.  For example, some implementations prohibit null elements,
                  and some have restrictions on the types of their elements.  Attempting to
                  add an ineligible element throws an unchecked exception, typically
                  &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.  Attempting
                  to query the presence of an ineligible element may throw an exception,
                  or it may simply return false; some implementations will exhibit the former
                  behavior and some will exhibit the latter.  More generally, attempting an
                  operation on an ineligible element whose completion would not result in
                  the insertion of an ineligible element into the collection may throw an
                  exception or it may succeed, at the option of the implementation.
                  Such exceptions are marked as &quot;optional&quot; in the specification for this
                  interface.
                  &lt;p&gt;It is up to each collection to determine its own synchronization
                  policy.  In the absence of a stronger guarantee by the
                  implementation, undefined behavior may result from the invocation
                  of any method on a collection that is being mutated by another
                  thread; this includes direct invocations, passing the collection to
                  a method that might perform invocations, and using an existing
                  iterator to examine the collection.
                  &lt;p&gt;Many methods in Collections Framework interfaces are defined in
                  terms of the {@link Object#equals(Object) equals} method.  For example,
                  the specification for the {@link #contains(Object) contains(Object o)}method says: &quot;returns &lt;tt&gt;true&lt;/tt&gt; if and only if this collection
                  contains at least one element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null ? e==null : o.equals(e))&lt;/tt&gt;.&quot;  This specification should
                  &lt;i&gt;not&lt;/i&gt; be construed to imply that invoking &lt;tt&gt;Collection.contains&lt;/tt&gt;
                  with a non-null argument &lt;tt&gt;o&lt;/tt&gt; will cause &lt;tt&gt;o.equals(e)&lt;/tt&gt; to be
                  invoked for any element &lt;tt&gt;e&lt;/tt&gt;.  Implementations are free to implement
                  optimizations whereby the &lt;tt&gt;equals&lt;/tt&gt; invocation is avoided, for
                  example, by first comparing the hash codes of the two elements.  (The{@link Object#hashCode()} specification guarantees that two objects with
                  unequal hash codes cannot be equal.)  More generally, implementations of
                  the various Collections Framework interfaces are free to take advantage of
                  the specified behavior of underlying {@link Object} methods wherever the
                  implementor deems it appropriate.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <E>
                       the type of elements in this collection                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Set                    
                </see>
                <see>
                    List                    
                </see>
                <see>
                    Map                    
                </see>
                <see>
                    SortedSet                    
                </see>
                <see>
                    SortedMap                    
                </see>
                <see>
                    HashSet                    
                </see>
                <see>
                    TreeSet                    
                </see>
                <see>
                    ArrayList                    
                </see>
                <see>
                    LinkedList                    
                </see>
                <see>
                    Vector                    
                </see>
                <see>
                    Collections                    
                </see>
                <see>
                    Arrays                    
                </see>
                <see>
                    AbstractCollection                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="size" type="int" line="130"/>
            <javadoc line="130">
                Returns the number of elements in this collection.  If this collection
                  contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns
                  &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.                
                <return>
                    the number of elements in this collection                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="139"/>
            <javadoc line="139">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this collection contains no elements.                
                <return>
                    <tt>true</tt> if this collection contains no elements                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="146"/>
            <javadoc line="146">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this collection contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this collection
                  contains at least one element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this collection is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this collection contains the specified
                      element                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this collection
                      (<a href="#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      collection does not permit null elements
                      (<a href="#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="164"/>
            <javadoc line="164">
                Returns an iterator over the elements in this collection.  There are no
                  guarantees concerning the order in which the elements are returned
                  (unless this collection is an instance of some class that provides a
                  guarantee).                
                <return>
                    an <tt>Iterator</tt> over the elements in this collection                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="174"/>
            <javadoc line="174">
                Returns an array containing all of the elements in this collection.
                  If this collection makes any guarantees as to what order its elements
                  are returned by its iterator, this method must return the elements in
                  the same order.
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this collection.  (In other words, this method must
                  allocate a new array even if this collection is backed by an array).
                  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this collection                    
                </return>
            </javadoc>
            <method name="toArray" type="T[]" line="192"/>
            <javadoc line="192">
                Returns an array containing all of the elements in this collection;
                  the runtime type of the returned array is that of the specified array.
                  If the collection fits in the specified array, it is returned therein.
                  Otherwise, a new array is allocated with the runtime type of the
                  specified array and the size of this collection.
                  &lt;p&gt;If this collection fits in the specified array with room to spare
                  (i.e., the array has more elements than this collection), the element
                  in the array immediately following the end of the collection is set to
                  &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of this
                  collection &lt;i&gt;only&lt;/i&gt; if the caller knows that this collection does
                  not contain any &lt;tt&gt;null&lt;/tt&gt; elements.)
                  &lt;p&gt;If this collection makes any guarantees as to what order its elements
                  are returned by its iterator, this method must return the elements in
                  the same order.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a collection known to contain only strings.
                  The following code can be used to dump the collection into a newly
                  allocated array of &lt;tt&gt;String&lt;/tt&gt;:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of this collection are to be
                      stored, if it is big enough; otherwise, a new array of the same
                      runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing all of the elements in this collection                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this collection                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="238"/>
            <javadoc line="238">
                Ensures that this collection contains the specified element (optional
                  operation).  Returns &lt;tt&gt;true&lt;/tt&gt; if this collection changed as a
                  result of the call.  (Returns &lt;tt&gt;false&lt;/tt&gt; if this collection does
                  not permit duplicates and already contains the specified element.)&lt;p&gt;
                  Collections that support this operation may place limitations on what
                  elements may be added to this collection.  In particular, some
                  collections will refuse to add &lt;tt&gt;null&lt;/tt&gt; elements, and others will
                  impose restrictions on the type of elements that may be added.
                  Collection classes should clearly specify in their documentation any
                  restrictions on what elements may be added.&lt;p&gt;
                  If a collection refuses to add a particular element for any reason
                  other than that it already contains the element, it &lt;i&gt;must&lt;/i&gt; throw
                  an exception (rather than returning &lt;tt&gt;false&lt;/tt&gt;).  This preserves
                  the invariant that a collection always contains the specified element
                  after this call returns.                
                <param>
                    e element whose presence in this collection is to be ensured                    
                </param>
                <return>
                    <tt>true</tt> if this collection changed as a result of the
                      call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>add</tt> operation
                      is not supported by this collection                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this collection                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      collection does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the element
                      prevents it from being added to this collection                    
                </throws>
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to insertion restrictions                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="273"/>
            <javadoc line="273">
                Removes a single instance of the specified element from this
                  collection, if it is present (optional operation).  More formally,
                  removes an element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;, if
                  this collection contains one or more such elements.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if this collection contained the specified element (or
                  equivalently, if this collection changed as a result of the call).                
                <param>
                    o element to be removed from this collection, if present                    
                </param>
                <return>
                    <tt>true</tt> if an element was removed as a result of this call                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this collection
                      (<a href="#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      collection does not permit null elements
                      (<a href="#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    UnsupportedOperationException if the <tt>remove</tt> operation
                      is not supported by this collection                    
                </throws>
            </javadoc>
            <method name="containsAll" type="boolean" line="298"/>
            <javadoc line="298">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this collection contains all of the elements
                  in the specified collection.                
                <param>
                    c collection to be checked for containment in this collection                    
                </param>
                <return>
                    <tt>true</tt> if this collection contains all of the elements
                      in the specified collection                    
                </return>
                <throws>
                    ClassCastException if the types of one or more elements
                      in the specified collection are incompatible with this
                      collection
                      (<a href="#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified collection contains one
                      or more null elements and this collection does not permit null
                      elements
                      (<a href="#optional-restrictions">optional</a>),
                      or if the specified collection is null.                    
                </throws>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="318"/>
            <javadoc line="318">
                Adds all of the elements in the specified collection to this collection
                  (optional operation).  The behavior of this operation is undefined if
                  the specified collection is modified while the operation is in progress.
                  (This implies that the behavior of this call is undefined if the
                  specified collection is this collection, and this collection is
                  nonempty.)                
                <param>
                    c collection containing elements to be added to this collection                    
                </param>
                <return>
                    <tt>true</tt> if this collection changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>addAll</tt> operation
                      is not supported by this collection                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of the specified
                      collection prevents it from being added to this collection                    
                </throws>
                <throws>
                    NullPointerException if the specified collection contains a
                      null element and this collection does not permit null elements,
                      or if the specified collection is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of an element of the
                      specified collection prevents it from being added to this
                      collection                    
                </throws>
                <throws>
                    IllegalStateException if not all the elements can be added at
                      this time due to insertion restrictions                    
                </throws>
                <see>
                    #add(Object)                    
                </see>
            </javadoc>
            <method name="removeAll" type="boolean" line="344"/>
            <javadoc line="344">
                Removes all of this collection&apos;s elements that are also contained in the
                  specified collection (optional operation).  After this call returns,
                  this collection will contain no elements in common with the specified
                  collection.                
                <param>
                    c collection containing elements to be removed from this collection                    
                </param>
                <return>
                    <tt>true</tt> if this collection changed as a result of the
                      call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>removeAll</tt> method
                      is not supported by this collection                    
                </throws>
                <throws>
                    ClassCastException if the types of one or more elements
                      in this collection are incompatible with the specified
                      collection
                      (<a href="#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this collection contains one or more
                      null elements and the specified collection does not support
                      null elements
                      (<a href="#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="retainAll" type="boolean" line="369"/>
            <javadoc line="369">
                Retains only the elements in this collection that are contained in the
                  specified collection (optional operation).  In other words, removes from
                  this collection all of its elements that are not contained in the
                  specified collection.                
                <param>
                    c collection containing elements to be retained in this collection                    
                </param>
                <return>
                    <tt>true</tt> if this collection changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>retainAll</tt> operation
                      is not supported by this collection                    
                </throws>
                <throws>
                    ClassCastException if the types of one or more elements
                      in this collection are incompatible with the specified
                      collection
                      (<a href="#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this collection contains one or more
                      null elements and the specified collection does not permit null
                      elements
                      (<a href="#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="clear" type="void" line="393"/>
            <javadoc line="393">
                Removes all of the elements from this collection (optional operation).
                  The collection will be empty after this method returns.                
                <throws>
                    UnsupportedOperationException if the <tt>clear</tt> operation
                      is not supported by this collection                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="405"/>
            <javadoc line="405">
                Compares the specified object with this collection for equality. &lt;p&gt;
                  While the &lt;tt&gt;Collection&lt;/tt&gt; interface adds no stipulations to the
                  general contract for the &lt;tt&gt;Object.equals&lt;/tt&gt;, programmers who
                  implement the &lt;tt&gt;Collection&lt;/tt&gt; interface &quot;directly&quot; (in other words,
                  create a class that is a &lt;tt&gt;Collection&lt;/tt&gt; but is not a &lt;tt&gt;Set&lt;/tt&gt;
                  or a &lt;tt&gt;List&lt;/tt&gt;) must exercise care if they choose to override the
                  &lt;tt&gt;Object.equals&lt;/tt&gt;.  It is not necessary to do so, and the simplest
                  course of action is to rely on &lt;tt&gt;Object&lt;/tt&gt;&apos;s implementation, but
                  the implementor may wish to implement a &quot;value comparison&quot; in place of
                  the default &quot;reference comparison.&quot;  (The &lt;tt&gt;List&lt;/tt&gt; and
                  &lt;tt&gt;Set&lt;/tt&gt; interfaces mandate such value comparisons.)&lt;p&gt;
                  The general contract for the &lt;tt&gt;Object.equals&lt;/tt&gt; method states that
                  equals must be symmetric (in other words, &lt;tt&gt;a.equals(b)&lt;/tt&gt; if and
                  only if &lt;tt&gt;b.equals(a)&lt;/tt&gt;).  The contracts for &lt;tt&gt;List.equals&lt;/tt&gt;
                  and &lt;tt&gt;Set.equals&lt;/tt&gt; state that lists are only equal to other lists,
                  and sets to other sets.  Thus, a custom &lt;tt&gt;equals&lt;/tt&gt; method for a
                  collection class that implements neither the &lt;tt&gt;List&lt;/tt&gt; nor
                  &lt;tt&gt;Set&lt;/tt&gt; interface must return &lt;tt&gt;false&lt;/tt&gt; when this collection
                  is compared to any list or set.  (By the same logic, it is not possible
                  to write a class that correctly implements both the &lt;tt&gt;Set&lt;/tt&gt; and
                  &lt;tt&gt;List&lt;/tt&gt; interfaces.)                
                <param>
                    o object to be compared for equality with this collection                    
                </param>
                <return>
                    <tt>true</tt> if the specified object is equal to this
                      collection                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    Set#equals(Object)                    
                </see>
                <see>
                    List#equals(Object)                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="440"/>
            <javadoc line="440">
                Returns the hash code value for this collection.  While the
                  &lt;tt&gt;Collection&lt;/tt&gt; interface adds no stipulations to the general
                  contract for the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method, programmers should
                  take note that any class that overrides the &lt;tt&gt;Object.equals&lt;/tt&gt;
                  method must also override the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method in order
                  to satisfy the general contract for the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method.
                  In particular, &lt;tt&gt;c1.equals(c2)&lt;/tt&gt; implies that
                  &lt;tt&gt;c1.hashCode()==c2.hashCode()&lt;/tt&gt;.                
                <return>
                    the hash code value for this collection                    
                </return>
                <see>
                    Object#hashCode()                    
                </see>
                <see>
                    Object#equals(Object)                    
                </see>
            </javadoc>
        </interface>
    </source>