<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="AbstractSet" line="2">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractCollection">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <implements interface="Set">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="2">
                This class provides a skeletal implementation of the &lt;tt&gt;Set&lt;/tt&gt;
                  interface to minimize the effort required to implement this
                  interface. &lt;p&gt;
                  The process of implementing a set by extending this class is identical
                  to that of implementing a Collection by extending AbstractCollection,
                  except that all of the methods and constructors in subclasses of this
                  class must obey the additional constraints imposed by the &lt;tt&gt;Set&lt;/tt&gt;
                  interface (for instance, the add method must not permit addition of
                  multiple instances of an object to a set).&lt;p&gt;
                  Note that this class does not override any of the implementations from
                  the &lt;tt&gt;AbstractCollection&lt;/tt&gt; class.  It merely adds implementations
                  for &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;hashCode&lt;/tt&gt;.&lt;p&gt;
                  This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <E>
                      the type of elements maintained by this set                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    AbstractCollection                    
                </see>
                <see>
                    Set                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="28">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="AbstractSet" type="constructor" line="32"/>
            <javadoc line="34">
                Compares the specified object with this set for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the given object is also a set, the two sets have
                  the same size, and every member of the given set is contained in
                  this set.  This ensures that the &lt;tt&gt;equals&lt;/tt&gt; method works
                  properly across different implementations of the &lt;tt&gt;Set&lt;/tt&gt;
                  interface.&lt;p&gt;
                  This implementation first checks if the specified object is this
                  set; if so it returns &lt;tt&gt;true&lt;/tt&gt;.  Then, it checks if the
                  specified object is a set whose size is identical to the size of
                  this set; if not, it returns false.  If so, it returns
                  &lt;tt&gt;containsAll((Collection) o)&lt;/tt&gt;.                
                <param>
                    o object to be compared for equality with this set                    
                </param>
                <return>
                    <tt>true</tt> if the specified object is equal to this set                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="49">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="c" type="Collection" line="52"/>
                <scope line="54"/>
                <scope line="57"/>
                <scope line="60"/>
            </method>
            <javadoc line="64">
                Returns the hash code value for this set.  The hash code of a set is
                  defined to be the sum of the hash codes of the elements in the set,
                  where the hash code of a &lt;tt&gt;null&lt;/tt&gt; element is defined to be zero.
                  This ensures that &lt;tt&gt;s1.equals(s2)&lt;/tt&gt; implies that
                  &lt;tt&gt;s1.hashCode()==s2.hashCode()&lt;/tt&gt; for any two sets &lt;tt&gt;s1&lt;/tt&gt;
                  and &lt;tt&gt;s2&lt;/tt&gt;, as required by the general contract of{@link Object#hashCode}.
                  &lt;p&gt;This implementation iterates over the set, calling the
                  &lt;tt&gt;hashCode&lt;/tt&gt; method on each element in the set, and adding up
                  the results.                
                <return>
                    the hash code value for this set                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    Set#equals(Object)                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="78">
                <declaration name="h" type="int" line="79"/>
                <declaration name="i" type="Iterator&lt;E&gt;" line="80"/>
                <scope line="81">
                    <declaration name="obj" type="E" line="82"/>
                </scope>
            </method>
            <javadoc line="87">
                Removes from this set all of its elements that are contained in the
                  specified collection (optional operation).  If the specified
                  collection is also a set, this operation effectively modifies this
                  set so that its value is the &lt;i&gt;asymmetric set difference&lt;/i&gt; of
                  the two sets.
                  &lt;p&gt;This implementation determines which is the smaller of this set
                  and the specified collection, by invoking the &lt;tt&gt;size&lt;/tt&gt;
                  method on each.  If this set has fewer elements, then the
                  implementation iterates over this set, checking each element
                  returned by the iterator in turn to see if it is contained in
                  the specified collection.  If it is so contained, it is removed
                  from this set with the iterator&apos;s &lt;tt&gt;remove&lt;/tt&gt; method.  If
                  the specified collection has fewer elements, then the
                  implementation iterates over the specified collection, removing
                  from this set each element returned by the iterator, using this
                  set&apos;s &lt;tt&gt;remove&lt;/tt&gt; method.
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the iterator returned by the
                  &lt;tt&gt;iterator&lt;/tt&gt; method does not implement the &lt;tt&gt;remove&lt;/tt&gt; method.                
                <param>
                    c collection containing elements to be removed from this set                    
                </param>
                <return>
                    <tt>true</tt> if this set changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>removeAll</tt> operation
                      is not supported by this set                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of this set
                      is incompatible with the specified collection
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this set contains a null element and the
                      specified collection does not permit null elements
                      (<a href="Collection.html#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="removeAll" type="boolean" line="121">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="modified" type="boolean" line="122"/>
                <scope line="123"/>
                <scope line="126">
                    <scope line="127">
                        <scope line="128"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>