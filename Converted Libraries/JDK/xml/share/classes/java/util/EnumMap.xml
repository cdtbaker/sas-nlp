<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.util.Map.Entry"/>
        <import package="sun.misc.SharedSecrets"/>
        <class name="EnumMap" line="4">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <extends class="AbstractMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <implements interface="java.io.Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="4">
                A specialized {@link Map} implementation for use with enum type keys.  All
                  of the keys in an enum map must come from a single enum type that is
                  specified, explicitly or implicitly, when the map is created.  Enum maps
                  are represented internally as arrays.  This representation is extremely
                  compact and efficient.
                  &lt;p&gt;Enum maps are maintained in the &lt;i&gt;natural order&lt;/i&gt; of their keys
                  (the order in which the enum constants are declared).  This is reflected
                  in the iterators returned by the collections views ({@link #keySet()},{@link #entrySet()}, and {@link #values()}).
                  &lt;p&gt;Iterators returned by the collection views are &lt;i&gt;weakly consistent&lt;/i&gt;:
                  they will never throw {@link ConcurrentModificationException} and they may
                  or may not show the effects of any modifications to the map that occur while
                  the iteration is in progress.
                  &lt;p&gt;Null keys are not permitted.  Attempts to insert a null key will
                  throw {@link NullPointerException}.  Attempts to test for the
                  presence of a null key or to remove one will, however, function properly.
                  Null values are permitted.
                  &lt;P&gt;Like most collection implementations &lt;tt&gt;EnumMap&lt;/tt&gt; is not
                  synchronized. If multiple threads access an enum map concurrently, and at
                  least one of the threads modifies the map, it should be synchronized
                  externally.  This is typically accomplished by synchronizing on some
                  object that naturally encapsulates the enum map.  If no such object exists,
                  the map should be &quot;wrapped&quot; using the {@link Collections#synchronizedMap}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access:
                  &lt;pre&gt;
                  Map&amp;lt;EnumKey, V&amp;gt; m
                  = Collections.synchronizedMap(new EnumMap&amp;lt;EnumKey, V&amp;gt;(...));
                  &lt;/pre&gt;
                  &lt;p&gt;Implementation note: All basic operations execute in constant time.
                  They are likely (though not guaranteed) to be faster than their{@link HashMap} counterparts.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    EnumSet                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="keyType" type="Class&amp;lt;K&amp;gt;" line="42"/>
            <javadoc line="42">
                The &lt;tt&gt;Class&lt;/tt&gt; object for the enum type of all the keys of this map.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="keyUniverse" type="K[]" line="47"/>
            <javadoc line="47">
                All of the values comprising K.  (Cached for performance.)                
            </javadoc>
            <declaration name="vals" type="Object[]" line="51"/>
            <javadoc line="51">
                Array representation of this map.  The ith element is the value
                  to which universe[i] is currently mapped, or null if it isn&apos;t
                  mapped to anything, or NULL if it&apos;s mapped to null.                
            </javadoc>
            <declaration name="size" type="int" line="57"/>
            <javadoc line="57">
                The number of mappings in this map.                
            </javadoc>
            <declaration name="NULL" type="Object" line="61"/>
            <javadoc line="61">
                Distinguished non-null value for representing null values.                
            </javadoc>
            <method name="maskNull" type="Object" line="65">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="unmaskNull" type="V" line="68">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <declaration name="ZERO_LENGTH_ENUM_ARRAY" type="Enum[]" line="71"/>
            <javadoc line="72">
                Creates an empty enum map with the specified key type.                
                <param>
                    keyType the class object of the key type for this enum map                    
                </param>
                <throws>
                    NullPointerException if &lt;tt&gt;keyType&lt;/tt&gt; is null                    
                </throws>
            </javadoc>
            <method name="EnumMap" type="constructor" line="77">
                <params>
                    <param name="keyType" type="Class&lt;K&gt;"/>
                </params>
            </method>
            <javadoc line="82">
                Creates an enum map with the same key type as the specified enum
                  map, initially containing the same mappings (if any).                
                <param>
                    m the enum map from which to initialize this enum map                    
                </param>
                <throws>
                    NullPointerException if &lt;tt&gt;m&lt;/tt&gt; is null                    
                </throws>
            </javadoc>
            <method name="EnumMap" type="constructor" line="88">
                <params>
                    <param name="m" type="EnumMap&lt;K,? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="94">
                Creates an enum map initialized from the specified map.  If the
                  specified map is an &lt;tt&gt;EnumMap&lt;/tt&gt; instance, this constructor behaves
                  identically to {@link #EnumMap(EnumMap)}.  Otherwise, the specified map
                  must contain at least one mapping (in order to determine the new
                  enum map&apos;s key type).                
                <param>
                    m the map from which to initialize this enum map                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;m&lt;/tt&gt; is not an
                      &lt;tt&gt;EnumMap&lt;/tt&gt; instance and contains no mappings                    
                </throws>
                <throws>
                    NullPointerException if &lt;tt&gt;m&lt;/tt&gt; is null                    
                </throws>
            </javadoc>
            <method name="EnumMap" type="constructor" line="105">
                <params>
                    <param name="m" type="Map&lt;K,? extends V&gt;"/>
                </params>
                <scope line="106">
                    <declaration name="em" type="EnumMap&amp;lt;K,? extends V&amp;gt;" line="107"/>
                </scope>
                <scope line="113"/>
            </method>
            <javadoc line="121">
                Returns the number of key-value mappings in this map.                
                <return>
                    the number of key-value mappings in this map                    
                </return>
            </javadoc>
            <method name="size" type="int" line="125"/>
            <javadoc line="128">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the
                  specified value.                
                <param>
                    value the value whose presence in this map is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to this value                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="134">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="139">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified
                  key.                
                <param>
                    key the key whose presence in this map is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified
                      key                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="146">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="containsMapping" type="boolean" line="149">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="152">
                Returns the value to which the specified key is mapped,
                  or {@code null} if this map contains no mapping for the key.
                  &lt;p&gt;More formally, if this map contains a mapping from a key{@code k} to a value {@code v} such that {@code (key == k)},
                  then this method returns {@code v}; otherwise it returns{@code null}.  (There can be at most one such mapping.)
                  &lt;p&gt;A return value of {@code null} does not &lt;i&gt;necessarily&lt;/i&gt;
                  indicate that the map contains no mapping for the key; it&apos;s also
                  possible that the map explicitly maps the key to {@code null}.
                  The {@link #containsKey containsKey} operation may be used to
                  distinguish these two cases.                
            </javadoc>
            <method name="get" type="V" line="163">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="166">
                Associates the specified value with the specified key in this map.
                  If the map previously contained a mapping for this key, the old
                  value is replaced.                
                <param>
                    key the key with which the specified value is to be associated                    
                </param>
                <param>
                    value the value to be associated with the specified key                    
                </param>
                <return>
                    the previous value associated with specified key, or
                      &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for key.  (A &lt;tt&gt;null&lt;/tt&gt;
                      return can also indicate that the map previously associated
                      &lt;tt&gt;null&lt;/tt&gt; with the specified key.)                    
                </return>
                <throws>
                    NullPointerException if the specified key is null                    
                </throws>
            </javadoc>
            <method name="put" type="V" line="178">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
                <declaration name="index" type="int" line="180"/>
                <declaration name="oldValue" type="Object" line="181"/>
            </method>
            <javadoc line="186">
                Removes the mapping for this key from this map if present.                
                <param>
                    key the key whose mapping is to be removed from the map                    
                </param>
                <return>
                    the previous value associated with specified key, or
                      &lt;tt&gt;null&lt;/tt&gt; if there was no entry for key.  (A &lt;tt&gt;null&lt;/tt&gt;
                      return can also indicate that the map previously associated
                      &lt;tt&gt;null&lt;/tt&gt; with the specified key.)                    
                </return>
            </javadoc>
            <method name="remove" type="V" line="194">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="index" type="int" line="196"/>
                <declaration name="oldValue" type="Object" line="197"/>
            </method>
            <method name="removeMapping" type="boolean" line="202">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="index" type="int" line="204"/>
                <scope line="205"/>
            </method>
            <javadoc line="212">
                Returns true if key is of the proper type to be a key in this
                  enum map.                
            </javadoc>
            <method name="isValidKey" type="boolean" line="216">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="keyClass" type="Class" line="218"/>
            </method>
            <javadoc line="221">
                Copies all of the mappings from the specified map to this map.
                  These mappings will replace any mappings that this map had for
                  any of the keys currently in the specified map.                
                <param>
                    m the mappings to be stored in this map                    
                </param>
                <throws>
                    NullPointerException the specified map is null, or if
                      one or more keys in the specified map are null                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="229">
                <params>
                    <param name="m" type="Map&lt;? extends K,? extends V&gt;"/>
                </params>
                <scope line="230">
                    <declaration name="em" type="EnumMap&amp;lt;? extends K,? extends V&amp;gt;" line="231"/>
                    <scope line="232"/>
                    <scope line="236">
                        <declaration name="emValue" type="Object" line="237"/>
                        <scope line="238"/>
                    </scope>
                </scope>
                <scope line="244"/>
            </method>
            <javadoc line="248">
                Removes all mappings from this map.                
            </javadoc>
            <method name="clear" type="void" line="251"/>
            <declaration name="entrySet" type="Set&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="255"/>
            <javadoc line="255">
                This field is initialized to contain an instance of the entry set
                  view the first time this view is requested.  The view is stateless,
                  so there&apos;s no reason to create more than one.                
            </javadoc>
            <javadoc line="261">
                Returns a {@link Set} view of the keys contained in this map.
                  The returned set obeys the general contract outlined in{@link Map#keySet()}.  The set&apos;s iterator will return the keys
                  in their natural order (the order in which the enum constants
                  are declared).                
                <return>
                    a set view of the keys contained in this enum map                    
                </return>
            </javadoc>
            <method name="keySet" type="Set&lt;K&gt;" line="268">
                <declaration name="ks" type="Set&amp;lt;K&amp;gt;" line="269"/>
            </method>
            <class name="KeySet" line="273">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <method name="iterator" type="Iterator&lt;K&gt;" line="274"/>
                <method name="size" type="int" line="277"/>
                <method name="contains" type="boolean" line="280">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="283">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="oldSize" type="int" line="284"/>
                </method>
                <method name="clear" type="void" line="288"/>
            </class>
            <javadoc line="292">
                Returns a {@link Collection} view of the values contained in this map.
                  The returned collection obeys the general contract outlined in{@link Map#values()}.  The collection&apos;s iterator will return the
                  values in the order their corresponding keys appear in map,
                  which is their natural order (the order in which the enum constants
                  are declared).                
                <return>
                    a collection view of the values contained in this map                    
                </return>
            </javadoc>
            <method name="values" type="Collection&lt;V&gt;" line="300">
                <declaration name="vs" type="Collection&amp;lt;V&amp;gt;" line="301"/>
            </method>
            <class name="Values" line="305">
                <extends class="AbstractCollection">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <method name="iterator" type="Iterator&lt;V&gt;" line="306"/>
                <method name="size" type="int" line="309"/>
                <method name="contains" type="boolean" line="312">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="315">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="317">
                        <scope line="318"/>
                    </scope>
                </method>
                <method name="clear" type="void" line="326"/>
            </class>
            <javadoc line="330">
                Returns a {@link Set} view of the mappings contained in this map.
                  The returned set obeys the general contract outlined in{@link Map#keySet()}.  The set&apos;s iterator will return the
                  mappings in the order their keys appear in map, which is their
                  natural order (the order in which the enum constants are declared).                
                <return>
                    a set view of the mappings contained in this enum map                    
                </return>
            </javadoc>
            <method name="entrySet" type="Set&lt;Map.Entry&lt;K,V&gt;&gt;" line="337">
                <declaration name="es" type="Set&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="338"/>
            </method>
            <class name="EntrySet" line="342">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="Map.Entry&lt;K,V&gt;"/>
                    </type_params>
                </extends>
                <method name="iterator" type="Iterator&lt;Map.Entry&lt;K,V&gt;&gt;" line="343"/>
                <method name="contains" type="boolean" line="346">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="entry" type="Map.Entry" line="348"/>
                </method>
                <method name="remove" type="boolean" line="351">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="entry" type="Map.Entry" line="353"/>
                </method>
                <method name="size" type="int" line="356"/>
                <method name="clear" type="void" line="359"/>
                <method name="toArray" type="Object[]" line="362"/>
                <method name="toArray" type="T[]" line="365">
                    <params>
                        <param name="a" type="T[]"/>
                    </params>
                    <declaration name="size" type="int" line="366"/>
                </method>
                <method name="fillEntryArray" type="Object[]" line="371">
                    <params>
                        <param name="a" type="Object[]"/>
                    </params>
                    <declaration name="j" type="int" line="372"/>
                </method>
            </class>
            <class name="EnumMapIterator" line="377">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <declaration name="index" type="int" line="378"/>
                <declaration name="lastReturnedIndex" type="int" line="379"/>
                <method name="hasNext" type="boolean" line="380"/>
                <method name="remove" type="void" line="384">
                    <scope line="386"/>
                </method>
                <method name="checkLastReturnedIndex" type="void" line="392"/>
            </class>
            <class name="KeyIterator" line="396">
                <extends class="EnumMapIterator">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <method name="next" type="K" line="397"/>
            </class>
            <class name="ValueIterator" line="403">
                <extends class="EnumMapIterator">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <method name="next" type="V" line="404"/>
            </class>
            <class name="EntryIterator" line="410">
                <extends class="EnumMapIterator">
                    <type_params>
                        <type_param name="Map.Entry&lt;K,V&gt;"/>
                    </type_params>
                </extends>
                <declaration name="lastReturnedEntry" type="Entry" line="411"/>
                <method name="next" type="Map.Entry&lt;K,V&gt;" line="412"/>
                <method name="remove" type="void" line="417"/>
                <class name="Entry" line="423">
                    <implements interface="Map.Entry">
                        <type_params>
                            <type_param name="K"/>
                            <type_param name="V"/>
                        </type_params>
                    </implements>
                    <declaration name="index" type="int" line="424"/>
                    <method name="Entry" type="constructor" line="425">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                    </method>
                    <method name="getKey" type="K" line="428"/>
                    <method name="getValue" type="V" line="432"/>
                    <method name="setValue" type="V" line="436">
                        <params>
                            <param name="value" type="V"/>
                        </params>
                        <declaration name="oldValue" type="V" line="438"/>
                    </method>
                    <method name="equals" type="boolean" line="442">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <declaration name="e" type="Map.Entry" line="445"/>
                        <declaration name="ourValue" type="V" line="446"/>
                        <declaration name="hisValue" type="Object" line="447"/>
                    </method>
                    <method name="hashCode" type="int" line="450"/>
                    <method name="toString" type="String" line="454"/>
                    <method name="checkIndexForEntryUse" type="void" line="458"/>
                </class>
            </class>
            <javadoc line="463">
                Compares the specified object with this map for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the given object is also a map and the two maps
                  represent the same mappings, as specified in the {@link Map#equals(Object)} contract.                
                <param>
                    o the object to be compared for equality with this map                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this map                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="470">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="m" type="Map&amp;lt;K,V&amp;gt;" line="474"/>
                <scope line="476">
                    <scope line="477">
                        <declaration name="key" type="K" line="478"/>
                        <declaration name="value" type="V" line="479"/>
                        <scope line="480"/>
                        <scope line="483"/>
                    </scope>
                </scope>
            </method>
            <method name="equals" type="boolean" line="490">
                <params>
                    <param name="em" type="EnumMap"/>
                </params>
                <scope line="492">
                    <declaration name="ourValue" type="Object" line="493"/>
                    <declaration name="hisValue" type="Object" line="494"/>
                </scope>
            </method>
            <javadoc line="499">
                Returns the hash code value for this map.  The hash code of a map is
                  defined to be the sum of the hash codes of each entry in the map.                
            </javadoc>
            <method name="hashCode" type="int" line="503">
                <declaration name="h" type="int" line="504"/>
                <scope line="505">
                    <scope line="506"/>
                </scope>
            </method>
            <method name="entryHashCode" type="int" line="512">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="515">
                Returns a shallow copy of this enum map.  (The values themselves
                  are not cloned.                
                <return>
                    a shallow copy of this enum map                    
                </return>
            </javadoc>
            <method name="clone" type="EnumMap&lt;K,V&gt;" line="520">
                <declaration name="result" type="EnumMap&amp;lt;K,V&amp;gt;" line="521"/>
                <scope line="522"/>
                <scope line="525"/>
            </method>
            <javadoc line="531">
                Throws an exception if e is not of the correct type for this enum set.                
            </javadoc>
            <method name="typeCheck" type="void" line="534">
                <params>
                    <param name="key" type="K"/>
                </params>
                <declaration name="keyClass" type="Class" line="535"/>
            </method>
            <javadoc line="538">
                Returns all of the values comprising K.
                  The result is uncloned, cached, and shared by all callers.                
            </javadoc>
            <method name="getKeyUniverse" type="K[]" line="542">
                <params>
                    <param name="keyType" type="Class&lt;K&gt;"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="545"/>
            <javadoc line="546">
                Save the state of the &lt;tt&gt;EnumMap&lt;/tt&gt; instance to a stream (i.e.,
                  serialize it).                
                <serialData>
                    The &lt;i&gt;size&lt;/i&gt; of the enum map (the number of key-value
                      mappings) is emitted (int), followed by the key (Object)
                      and value (Object) for each key-value mapping represented
                      by the enum map.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="554">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <declaration name="entriesToBeWritten" type="int" line="557"/>
                <scope line="558">
                    <scope line="559"/>
                </scope>
            </method>
            <javadoc line="566">
                Reconstitute the &lt;tt&gt;EnumMap&lt;/tt&gt; instance from a stream (i.e.,
                  deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="570">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <declaration name="size" type="int" line="574"/>
                <scope line="575">
                    <declaration name="key" type="K" line="576"/>
                    <declaration name="value" type="V" line="577"/>
                </scope>
            </method>
        </class>
    </source>