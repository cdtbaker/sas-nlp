<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.security"/>
        <class name="UUID" line="30">
            <comment line="78">
                The most significant 64 bits of this UUID.
                
                 @serial                
            </comment>
            <comment line="85">
                The least significant 64 bits of this UUID.
                
                 @serial                
            </comment>
            <comment line="92">
                The random number generator used by this class to create random
                 based UUIDs.                
            </comment>
            <comment line="98">
                Constructors and Factories                
            </comment>
            <comment line="100">
                Private constructor which uses a byte array to construct the new UUID.                
            </comment>
            <comment line="213">
                Field Accessor Methods                
            </comment>
            <comment line="349">
                Object Inherited Methods                
            </comment>
            <comment line="419">
                Comparison Operations                
            </comment>
            <implements interface="java.io.Serializable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="UUID"/>
                </type_params>
            </implements>
            <javadoc line="30">
                A class that represents an immutable universally unique identifier (UUID).
                  A UUID represents a 128-bit value.
                  &lt;p&gt; There exist different variants of these global identifiers.  The methods
                  of this class are for manipulating the Leach-Salz variant, although the
                  constructors allow the creation of any variant of UUID (described below).
                  &lt;p&gt; The layout of a variant 2 (Leach-Salz) UUID is as follows:
                  The most significant long consists of the following unsigned fields:
                  &lt;pre&gt;
                  0xFFFFFFFF00000000 time_low
                  0x00000000FFFF0000 time_mid
                  0x000000000000F000 version
                  0x0000000000000FFF time_hi
                  &lt;/pre&gt;
                  The least significant long consists of the following unsigned fields:
                  &lt;pre&gt;
                  0xC000000000000000 variant
                  0x3FFF000000000000 clock_seq
                  0x0000FFFFFFFFFFFF node
                  &lt;/pre&gt;
                  &lt;p&gt; The variant field contains a value which identifies the layout of the{@code UUID}.  The bit layout described above is valid only for a {@codeUUID} with a variant value of 2, which indicates the Leach-Salz variant.
                  &lt;p&gt; The version field holds a value that describes the type of this {@codeUUID}.  There are four different basic types of UUIDs: time-based, DCE
                  security, name-based, and randomly generated UUIDs.  These types have a
                  version value of 1, 2, 3 and 4, respectively.
                  &lt;p&gt; For more information including algorithms used to create {@code UUID}s,
                  see &lt;a href=&quot;http://www.ietf.org/rfc/rfc4122.txt&quot;&gt; &lt;i&gt;RFC&amp;nbsp;4122: A
                  Universally Unique IDentifier (UUID) URN Namespace&lt;/i&gt;&lt;/a&gt;, section 4.2
                  &amp;quot;Algorithms for Creating a Time-Based UUID&amp;quot;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="72"/>
            <javadoc line="72">
                Explicit serialVersionUID for interoperability.                
            </javadoc>
            <declaration name="mostSigBits" type="long" line="82"/>
            <declaration name="leastSigBits" type="long" line="89"/>
            <declaration name="numberGenerator" type="SecureRandom" line="95"/>
            <method name="UUID" type="constructor" line="102">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="msb" type="long" line="103"/>
                <declaration name="lsb" type="long" line="104"/>
            </method>
            <javadoc line="114">
                Constructs a new {@code UUID} using the specified data.  {@codemostSigBits} is used for the most significant 64 bits of the {@codeUUID} and {@code leastSigBits} becomes the least significant 64 bits of
                  the {@code UUID}.                
                <param>
                    mostSigBitsThe most significant bits of the {@code UUID}                    
                </param>
                <param>
                    leastSigBitsThe least significant bits of the {@code UUID}                    
                </param>
            </javadoc>
            <method name="UUID" type="constructor" line="126">
                <params>
                    <param name="mostSigBits" type="long"/>
                    <param name="leastSigBits" type="long"/>
                </params>
            </method>
            <javadoc line="131">
                Static factory to retrieve a type 4 (pseudo randomly generated) UUID.
                  The {@code UUID} is generated using a cryptographically strong pseudo
                  random number generator.                
                <return>
                    A randomly generated {@code UUID}                    
                </return>
            </javadoc>
            <method name="randomUUID" type="UUID" line="139">
                <comment line="148">
                                        
                </comment>
                <comment line="149">
                                        
                </comment>
                <comment line="150">
                                        
                </comment>
                <comment line="151">
                                        
                </comment>
                <declaration name="ng" type="SecureRandom" line="140"/>
                <scope line="141"/>
                <declaration name="randomBytes" type="byte[]" line="145"/>
            </method>
            <javadoc line="154">
                Static factory to retrieve a type 3 (name based) {@code UUID} based on
                  the specified byte array.                
                <param>
                    nameA byte array to be used to construct a {@code UUID}                    
                </param>
                <return>
                    A {@code UUID} generated from the specified array                    
                </return>
            </javadoc>
            <method name="nameUUIDFromBytes" type="UUID" line="163">
                <params>
                    <param name="name" type="byte[]"/>
                </params>
                <comment line="172">
                                        
                </comment>
                <comment line="173">
                                        
                </comment>
                <comment line="174">
                                        
                </comment>
                <comment line="175">
                                        
                </comment>
                <declaration name="md" type="MessageDigest" line="164"/>
                <scope line="165"/>
                <scope line="167"/>
                <declaration name="md5Bytes" type="byte[]" line="170"/>
            </method>
            <javadoc line="178">
                Creates a {@code UUID} from the string standard representation as
                  described in the {@link #toString} method.                
                <param>
                    nameA string that specifies a {@code UUID}                    
                </param>
                <return>
                    A {@code UUID} with the specified value                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf name does not conform to the string representation as
                      described in {@link #toString}                    
                </throws>
            </javadoc>
            <method name="fromString" type="UUID" line="192">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="components" type="String[]" line="193"/>
                <declaration name="mostSigBits" type="long" line="199"/>
                <declaration name="leastSigBits" type="long" line="205"/>
            </method>
            <javadoc line="214">
                Returns the least significant 64 bits of this UUID&apos;s 128 bit value.                
                <return>
                    The least significant 64 bits of this UUID&apos;s 128 bit value                    
                </return>
            </javadoc>
            <method name="getLeastSignificantBits" type="long" line="219"/>
            <javadoc line="223">
                Returns the most significant 64 bits of this UUID&apos;s 128 bit value.                
                <return>
                    The most significant 64 bits of this UUID&apos;s 128 bit value                    
                </return>
            </javadoc>
            <method name="getMostSignificantBits" type="long" line="228"/>
            <javadoc line="232">
                The version number associated with this {@code UUID}.  The version
                  number describes how this {@code UUID} was generated.
                  The version number has the following meaning:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;1    Time-based UUID
                  &lt;li&gt;2    DCE security UUID
                  &lt;li&gt;3    Name-based UUID
                  &lt;li&gt;4    Randomly generated UUID
                  &lt;/ul&gt;                
                <return>
                    The version number of this {@code UUID}                    
                </return>
            </javadoc>
            <method name="version" type="int" line="246">
                <comment line="248">
                    Version is bits masked by 0x000000000000F000 in MS long                    
                </comment>
            </method>
            <javadoc line="251">
                The variant number associated with this {@code UUID}.  The variant
                  number describes the layout of the {@code UUID}.
                  The variant number has the following meaning:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;0    Reserved for NCS backward compatibility
                  &lt;li&gt;2    The Leach-Salz variant (used by this class)
                  &lt;li&gt;6    Reserved, Microsoft Corporation backward compatibility
                  &lt;li&gt;7    Reserved for future definition
                  &lt;/ul&gt;                
                <return>
                    The variant number of this {@code UUID}                    
                </return>
            </javadoc>
            <method name="variant" type="int" line="265">
                <comment line="267">
                    This field is composed of a varying number of bits.
                     0    -    -    Reserved for NCS backward compatibility
                     1    0    -    The Leach-Salz variant (used by this class)
                     1    1    0    Reserved, Microsoft backward compatibility
                     1    1    1    Reserved for future definition.                    
                </comment>
            </method>
            <javadoc line="275">
                The timestamp value associated with this UUID.
                  &lt;p&gt; The 60 bit timestamp value is constructed from the time_low,
                  time_mid, and time_hi fields of this {@code UUID}.  The resulting
                  timestamp is measured in 100-nanosecond units since midnight,
                  October 15, 1582 UTC.
                  &lt;p&gt; The timestamp value is only meaningful in a time-based UUID, which
                  has version type 1.  If this {@code UUID} is not a time-based UUID then
                  this method throws UnsupportedOperationException.                
                <throws>
                    UnsupportedOperationExceptionIf this UUID is not a version 1 UUID                    
                </throws>
            </javadoc>
            <method name="timestamp" type="long" line="290">
                <scope line="291"/>
            </method>
            <javadoc line="300">
                The clock sequence value associated with this UUID.
                  &lt;p&gt; The 14 bit clock sequence value is constructed from the clock
                  sequence field of this UUID.  The clock sequence field is used to
                  guarantee temporal uniqueness in a time-based UUID.
                  &lt;p&gt; The {@code clockSequence} value is only meaningful in a time-based
                  UUID, which has version type 1.  If this UUID is not a time-based UUID
                  then this method throws UnsupportedOperationException.                
                <return>
                    The clock sequence of this {@code UUID}                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf this UUID is not a version 1 UUID                    
                </throws>
            </javadoc>
            <method name="clockSequence" type="int" line="316">
                <scope line="317"/>
            </method>
            <javadoc line="324">
                The node value associated with this UUID.
                  &lt;p&gt; The 48 bit node value is constructed from the node field of this
                  UUID.  This field is intended to hold the IEEE 802 address of the machine
                  that generated this UUID to guarantee spatial uniqueness.
                  &lt;p&gt; The node value is only meaningful in a time-based UUID, which has
                  version type 1.  If this UUID is not a time-based UUID then this method
                  throws UnsupportedOperationException.                
                <return>
                    The node value of this {@code UUID}                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf this UUID is not a version 1 UUID                    
                </throws>
            </javadoc>
            <method name="node" type="long" line="340">
                <scope line="341"/>
            </method>
            <javadoc line="350">
                Returns a {@code String} object representing this {@code UUID}.
                  &lt;p&gt; The UUID string representation is as described by this BNF:
                  &lt;blockquote&gt;&lt;pre&gt;{@codeUUID                   = &lt;time_low&gt; &quot;-&quot; &lt;time_mid&gt; &quot;-&quot;
                  &lt;time_high_and_version&gt; &quot;-&quot;
                  &lt;variant_and_sequence&gt; &quot;-&quot;
                  &lt;node&gt;
                  time_low               = 4&lt;hexOctet&gt;
                  time_mid               = 2&lt;hexOctet&gt;
                  time_high_and_version  = 2&lt;hexOctet&gt;
                  variant_and_sequence   = 2&lt;hexOctet&gt;
                  node                   = 6&lt;hexOctet&gt;
                  hexOctet               = &lt;hexDigit&gt;&lt;hexDigit&gt;
                  hexDigit               =
                  &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot; | &quot;9&quot;
                  | &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot;
                  | &quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot;}&lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    A string representation of this {@code UUID}                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="374"/>
            <javadoc line="382">
                Returns val represented by the specified number of hex digits.                
            </javadoc>
            <method name="digits" type="String" line="383">
                <params>
                    <param name="val" type="long"/>
                    <param name="digits" type="int"/>
                </params>
                <declaration name="hi" type="long" line="384"/>
            </method>
            <javadoc line="388">
                Returns a hash code for this {@code UUID}.                
                <return>
                    A hash code value for this {@code UUID}                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="393">
                <declaration name="hilo" type="long" line="394"/>
            </method>
            <javadoc line="398">
                Compares this object to the specified object.  The result is {@codetrue} if and only if the argument is not {@code null}, is a {@code UUID}object, has the same variant, and contains the same value, bit for bit,
                  as this {@code UUID}.                
                <param>
                    objThe object to be compared                    
                </param>
                <return>
                    {@code true} if the objects are the same; {@code false}otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="410">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="id" type="UUID" line="413"/>
            </method>
            <javadoc line="420">
                Compares this UUID with the specified UUID.
                  &lt;p&gt; The first of two UUIDs is greater than the second if the most
                  significant field in which the UUIDs differ is greater for the first
                  UUID.                
                <param>
                    val {@code UUID} to which this {@code UUID} is to be compared                    
                </param>
                <return>
                    -1, 0 or 1 as this {@code UUID} is less than, equal to, or
                      greater than {@code val}                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="434">
                <params>
                    <param name="val" type="UUID"/>
                </params>
                <comment line="436">
                    The ordering is intentionally set up so that the UUIDs
                     can simply be numerically compared as two numbers                    
                </comment>
            </method>
        </class>
    </source>