<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="sun.util.calendar.BaseCalendar"/>
        <import package="sun.util.calendar.CalendarDate"/>
        <import package="sun.util.calendar.CalendarSystem"/>
        <import package="sun.util.calendar.CalendarUtils"/>
        <import package="sun.util.calendar.Era"/>
        <import package="sun.util.calendar.Gregorian"/>
        <import package="sun.util.calendar.LocalGregorianCalendar"/>
        <import package="sun.util.calendar.ZoneInfo"/>
        <import package="sun.util.resources.LocaleData"/>
        <class name="JapaneseImperialCalendar" line="40">
            <extends class="Calendar"/>
            <comment line="71">
                Implementation Notes
                
                 This implementation uses
                 sun.util.calendar.LocalGregorianCalendar to perform most of the
                 calendar calculations. LocalGregorianCalendar is configurable
                 and reads &lt;JRE_HOME&gt;libcalendars.properties at the start-up.                
            </comment>
            <comment line="105">
                Fixed date of January 1, 1970 (Gregorian)                
            </comment>
            <comment line="108">
                Useful millisecond constants.  Although ONE_DAY and ONE_WEEK can fit
                 into ints, they must be longs in order to prevent arithmetic overflow
                 when performing (bug 4173516).                
            </comment>
            <comment line="117">
                Reference to the sun.util.calendar.LocalGregorianCalendar instance (singleton).                
            </comment>
            <comment line="121">
                Gregorian calendar instance. This is required because era
                 transition dates are given in Gregorian dates.                
            </comment>
            <comment line="125">
                The Era instance representing &quot;before Meiji&quot;.                
            </comment>
            <comment line="128">
                Imperial eras. The sun.util.calendar.LocalGregorianCalendar
                 doesn&apos;t have an Era representing before Meiji, which is
                 inconvenient for a Calendar. So, era[0] is a reference to
                 BEFORE_MEIJI_ERA.                
            </comment>
            <comment line="134">
                Fixed date of the first date of each era.                
            </comment>
            <comment line="137">
                &lt;pre&gt;
                                                 Greatest       Least
                 Field name             Minimum   Minimum     Maximum     Maximum
                 ----------             -------   -------     -------     -------
                 ERA                          0         0           1           1
                 YEAR                -292275055         1           ?           ?
                 MONTH                        0         0          11          11
                 WEEK_OF_YEAR                 1         1          52         53
                 WEEK_OF_MONTH                0         0           4          6
                 DAY_OF_MONTH                 1         1          28         31
                 DAY_OF_YEAR                  1         1         365        366
                 DAY_OF_WEEK                  1         1           7           7
                 DAY_OF_WEEK_IN_MONTH        -1        -1           4          6
                 AM_PM                        0         0           1           1
                 HOUR                         0         0          11          11
                 HOUR_OF_DAY                  0         0          23          23
                 MINUTE                       0         0          59          59
                 SECOND                       0         0          59          59
                 MILLISECOND                  0         0         999         999
                 ZONE_OFFSET             -13:00    -13:00       14:00       14:00
                 DST_OFFSET                0:00      0:00        0:20        2:00
                 &lt;pre&gt;
                 : depends on eras                
            </comment>
            <comment line="220">
                Proclaim serialization compatibility with JDK 1.6                
            </comment>
            <javadoc line="40">
                &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; implements a Japanese
                  calendar system in which the imperial era-based year numbering is
                  supported from the Meiji era. The following are the eras supported
                  by this calendar system.
                  &lt;pre&gt;&lt;tt&gt;
                  ERA value   Era name    Since (in Gregorian)
                  ------------------------------------------------------
                  0       N/A         N/A
                  1       Meiji       1868-01-01 midnight local time
                  2       Taisho      1912-07-30 midnight local time
                  3       Showa       1926-12-25 midnight local time
                  4       Heisei      1989-01-08 midnight local time
                  ------------------------------------------------------
                  &lt;/tt&gt;&lt;/pre&gt;
                  &lt;p&gt;&lt;code&gt;ERA&lt;/code&gt; value 0 specifies the years before Meiji and
                  the Gregorian year values are used. Unlike {@link GregorianCalendar}, the Julian to Gregorian transition is not
                  supported because it doesn&apos;t make any sense to the Japanese
                  calendar systems used before Meiji. To represent the years before
                  Gregorian year 1, 0 and negative values are used. The Japanese
                  Imperial rescripts and government decrees don&apos;t specify how to deal
                  with time differences for applying the era transitions. This
                  calendar implementation assumes local time for all transitions.                
                <author>
                    Masayoshi Okutsu                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="BEFORE_MEIJI" type="int" line="79"/>
            <javadoc line="79">
                The ERA constant designating the era before Meiji.                
            </javadoc>
            <declaration name="MEIJI" type="int" line="84"/>
            <javadoc line="84">
                The ERA constant designating the Meiji era.                
            </javadoc>
            <declaration name="TAISHO" type="int" line="89"/>
            <javadoc line="89">
                The ERA constant designating the Taisho era.                
            </javadoc>
            <declaration name="SHOWA" type="int" line="94"/>
            <javadoc line="94">
                The ERA constant designating the Showa era.                
            </javadoc>
            <declaration name="HEISEI" type="int" line="99"/>
            <javadoc line="99">
                The ERA constant designating the Heisei era.                
            </javadoc>
            <declaration name="EPOCH_OFFSET" type="int" line="104"/>
            <declaration name="EPOCH_YEAR" type="int" line="105"/>
            <declaration name="ONE_SECOND" type="int" line="110"/>
            <declaration name="ONE_MINUTE" type="int" line="111"/>
            <declaration name="ONE_HOUR" type="int" line="112"/>
            <declaration name="ONE_DAY" type="long" line="113"/>
            <declaration name="ONE_WEEK" type="long" line="114"/>
            <declaration name="jcal" type="LocalGregorianCalendar" line="117"/>
            <declaration name="gcal" type="Gregorian" line="122"/>
            <declaration name="BEFORE_MEIJI_ERA" type="Era" line="125"/>
            <declaration name="eras" type="Era[]" line="131"/>
            <declaration name="sinceFixedDates" type="long[]" line="134"/>
            <declaration name="MIN_VALUES" type="int" line="161"/>
            <declaration name="LEAST_MAX_VALUES" type="int" line="180"/>
            <declaration name="MAX_VALUES" type="int" line="199"/>
            <declaration name="serialVersionUID" type="long" line="220"/>
            <scope line="222">
                <declaration name="es" type="Era[]" line="223"/>
                <declaration name="length" type="int" line="224"/>
                <declaration name="index" type="int" line="230"/>
                <scope line="233">
                    <declaration name="d" type="CalendarDate" line="234"/>
                </scope>
                <declaration name="year" type="int" line="244"/>
                <declaration name="dayOfYear" type="int" line="245"/>
                <declaration name="date" type="CalendarDate" line="246"/>
                <scope line="247">
                    <declaration name="fd" type="long" line="248"/>
                    <declaration name="transitionDate" type="CalendarDate" line="249"/>
                    <declaration name="fdd" type="long" line="251"/>
                    <declaration name="lgd" type="LocalGregorianCalendar.Date" line="257"/>
                    <declaration name="y" type="int" line="258"/>
                </scope>
            </scope>
            <declaration name="jdate" type="LocalGregorianCalendar.Date" line="271"/>
            <javadoc line="271">
                jdate always has a sun.util.calendar.LocalGregorianCalendar.Date instance to
                  avoid overhead of creating it for each calculation.                
            </javadoc>
            <declaration name="zoneOffsets" type="int[]" line="277"/>
            <javadoc line="277">
                Temporary int[2] to get time zone offsets. zoneOffsets[0] gets
                  the GMT offset value and zoneOffsets[1] gets the daylight saving
                  value.                
            </javadoc>
            <declaration name="originalFields" type="int[]" line="284"/>
            <javadoc line="284">
                Temporary storage for saving original fields[] values in
                  non-lenient mode.                
            </javadoc>
            <javadoc line="290">
                Constructs a &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; based on the current time
                  in the given time zone with the given locale.                
                <param>
                    zone the given time zone.                    
                </param>
                <param>
                    aLocale the given locale.                    
                </param>
            </javadoc>
            <method name="JapaneseImperialCalendar" type="constructor" line="297">
                <params>
                    <param name="zone" type="TimeZone"/>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="303">
                Compares this &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; to the specified
                  &lt;code&gt;Object&lt;/code&gt;. The result is &lt;code&gt;true&lt;/code&gt; if and
                  only if the argument is a &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; object
                  that represents the same time value (millisecond offset from
                  the &lt;a href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;) under the same
                  &lt;code&gt;Calendar&lt;/code&gt; parameters.                
                <param>
                    obj the object to compare with.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this object is equal to &lt;code&gt;obj&lt;/code&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    Calendar#compareTo(Calendar)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="316">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="321">
                Generates the hash code for this
                  &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; object.                
            </javadoc>
            <method name="hashCode" type="int" line="325"/>
            <javadoc line="329">
                Adds the specified (signed) amount of time to the given calendar field,
                  based on the calendar&apos;s rules.
                  &lt;p&gt;&lt;em&gt;Add rule 1&lt;/em&gt;. The value of &lt;code&gt;field&lt;/code&gt;
                  after the call minus the value of &lt;code&gt;field&lt;/code&gt; before the
                  call is &lt;code&gt;amount&lt;/code&gt;, modulo any overflow that has occurred in
                  &lt;code&gt;field&lt;/code&gt;. Overflow occurs when a field value exceeds its
                  range and, as a result, the next larger field is incremented or
                  decremented and the field value is adjusted back into its range.&lt;/p&gt;
                  &lt;p&gt;&lt;em&gt;Add rule 2&lt;/em&gt;. If a smaller field is expected to be
                  invariant, but it is impossible for it to be equal to its
                  prior value because of changes in its minimum or maximum after
                  &lt;code&gt;field&lt;/code&gt; is changed, then its value is adjusted to be as close
                  as possible to its expected value. A smaller field represents a
                  smaller unit of time. &lt;code&gt;HOUR&lt;/code&gt; is a smaller field than
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;. No adjustment is made to smaller fields
                  that are not expected to be invariant. The calendar system
                  determines what fields are expected to be invariant.&lt;/p&gt;                
                <param>
                    field the calendar field.                    
                </param>
                <param>
                    amount the amount of date or time to be added to the field.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;field&lt;/code&gt; is
                      &lt;code&gt;ZONE_OFFSET&lt;/code&gt;, &lt;code&gt;DST_OFFSET&lt;/code&gt;, or unknown,
                      or if any calendar fields have out-of-range values in
                      non-lenient mode.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="357">
                <params>
                    <param name="field" type="int"/>
                    <param name="amount" type="int"/>
                </params>
                <comment line="359">
                    If amount == 0, do nothing even the given field is out of
                     range. This is tested by JCK.                    
                </comment>
                <comment line="362">
                    Do nothing!                    
                </comment>
                <comment line="369">
                    Sync the time and calendar fields.                    
                </comment>
                <comment line="400">
                    Handle the time fields here. Convert the given
                     amount to milliseconds and call setTimeInMillis.                    
                </comment>
                <comment line="404">
                    hours to milliseconds                    
                </comment>
                <comment line="408">
                    minutes to milliseconds                    
                </comment>
                <comment line="412">
                    seconds to milliseconds                    
                </comment>
                <comment line="418">
                    Handle week, day and AM_PM fields which involves
                     time zone offset change adjustment. Convert the
                     given amount to the number of days.                    
                </comment>
                <comment line="427">
                    synonym of DATE                    
                </comment>
                <comment line="433">
                    Convert the amount to the number of days (delta)
                     and +12 or -12 hours (timeOfDay).                    
                </comment>
                <comment line="440">
                    The time fields don&apos;t require time zone offset change
                     adjustment.                    
                </comment>
                <comment line="447">
                    The rest of the fields (week, day or AM_PM fields)
                     require time zone offset (both GMT and DST) change
                     adjustment.                    
                </comment>
                <comment line="451">
                    Translate the current time to the fixed date and time
                     of the day.                    
                </comment>
                <comment line="469">
                    fd is the expected fixed date after the calculation                    
                </comment>
                <comment line="473">
                    If the time zone offset has changed, then adjust the difference.                    
                </comment>
                <comment line="477">
                    If the adjustment has changed the date, then take
                     the previous one.                    
                </comment>
                <scope line="360"/>
                <scope line="364"/>
                <scope line="371">
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="372"/>
                </scope>
                <scope line="379">
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="380"/>
                </scope>
                <scope line="387">
                    <declaration name="era" type="int" line="388"/>
                    <scope line="389"/>
                    <scope line="391"/>
                </scope>
                <scope line="395">
                    <declaration name="delta" type="long" line="396"/>
                    <declaration name="timeOfDay" type="long" line="397"/>
                    <scope line="441"/>
                    <declaration name="fd" type="long" line="452"/>
                    <scope line="460"/>
                    <scope line="463"/>
                    <declaration name="zoneOffset" type="int" line="469"/>
                    <scope line="473">
                        <declaration name="fd2" type="long" line="475"/>
                        <scope line="478"/>
                    </scope>
                </scope>
            </method>
            <method name="roll" type="void" line="485">
                <params>
                    <param name="field" type="int"/>
                    <param name="up" type="boolean"/>
                </params>
            </method>
            <javadoc line="489">
                Adds a signed amount to the specified calendar field without changing larger fields.
                  A negative roll amount means to subtract from field without changing
                  larger fields. If the specified amount is 0, this method performs nothing.
                  &lt;p&gt;This method calls {@link #complete()} before adding the
                  amount so that all the calendar fields are normalized. If there
                  is any calendar field having an out-of-range value in non-lenient mode, then an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.                
                <param>
                    field the calendar field.                    
                </param>
                <param>
                    amount the signed amount to add to &lt;code&gt;field&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;field&lt;/code&gt; is
                      &lt;code&gt;ZONE_OFFSET&lt;/code&gt;, &lt;code&gt;DST_OFFSET&lt;/code&gt;, or unknown,
                      or if any calendar fields have out-of-range values in
                      non-lenient mode.                    
                </exception>
                <see>
                    #roll(int,boolean)                    
                </see>
                <see>
                    #add(int,int)                    
                </see>
                <see>
                    #set(int,int)                    
                </see>
            </javadoc>
            <method name="roll" type="void" line="509">
                <params>
                    <param name="field" type="int"/>
                    <param name="amount" type="int"/>
                </params>
                <comment line="511">
                    If amount == 0, do nothing even the given field is out of
                     range. This is tested by JCK.                    
                </comment>
                <comment line="521">
                    Sync the time and calendar fields.                    
                </comment>
                <comment line="533">
                    These fields are handled simply, since they have fixed
                     minima and maxima. Other fields are complicated, since
                     the range within they must roll varies depending on the
                     date, a time zone and the era transitions.                    
                </comment>
                <comment line="542">
                    12 or 24 hours                    
                </comment>
                <comment line="550">
                    The day might have changed, which could happen if
                     the daylight saving time transition brings it to
                     the next day, although it&apos;s very unlikely. But we
                     have to make sure not to change the larger fields.                    
                </comment>
                <comment line="562">
                    restore PM                    
                </comment>
                <comment line="575">
                    Time zone offset and/or daylight saving might have changed.                    
                </comment>
                <comment line="589">
                    Rolling the month involves both pinning the final value to [0, 11]
                     and adjusting the DAY_OF_MONTH if necessary.  We only adjust the
                     DAY_OF_MONTH if, after updating the MONTH field, it is illegal.
                     E.g., &lt;jan31&gt;.roll(MONTH, 1) -&gt; &lt;feb28&gt; or &lt;feb29&gt;.                    
                </comment>
                <comment line="602">
                    To avoid overflow, use an equivalent year.                    
                </comment>
                <comment line="614">
                    Month may have changed by the normalization.                    
                </comment>
                <comment line="626">
                    To avoid underflow, use an equivalent year.                    
                </comment>
                <comment line="638">
                    Month may have changed by the normalization.                    
                </comment>
                <comment line="651">
                    Keep the day of month in the range.  We
                     don&apos;t want to spill over into the next
                     month; e.g., we don&apos;t want jan31 + 1 mo -&gt;
                     feb31 -&gt; mar3.                    
                </comment>
                <comment line="679">
                    The year has only one month. No need to
                     process further. (Showa Gan-nen (year 1)
                     and the last year have only one month.)                    
                </comment>
                <comment line="707">
                    update stamp[field]                    
                </comment>
                <comment line="723">
                    If the new value is in between min and max
                     (exclusive), then we can use the value.                    
                </comment>
                <comment line="730">
                    Make sure that the min week has the current DAY_OF_WEEK                    
                </comment>
                <comment line="743">
                    Make sure the same thing for the max week                    
                </comment>
                <comment line="751">
                    Handle transition here.                    
                </comment>
                <comment line="754">
                    Make sure that the min week has the current DAY_OF_WEEK                    
                </comment>
                <comment line="760">
                    Make sure the same thing for the max week                    
                </comment>
                <comment line="766">
                    value: the new WEEK_OF_YEAR which must be converted
                     to month and day of month.                    
                </comment>
                <comment line="778">
                    dow: relative day of week from the first day of week                    
                </comment>
                <comment line="785">
                    fixed date of the first day (usually 1) of the month                    
                </comment>
                <comment line="786">
                    actual month length                    
                </comment>
                <comment line="795">
                    the first day of week of the month.                    
                </comment>
                <comment line="798">
                    if the week has enough days to form a week, the
                     week starts from the previous month.                    
                </comment>
                <comment line="805">
                    value: the new WEEK_OF_MONTH value                    
                </comment>
                <comment line="808">
                    nfd: fixed date of the rolled date                    
                </comment>
                <comment line="811">
                    Unlike WEEK_OF_YEAR, we need to change day of week if the
                     nfd is out of the month.                    
                </comment>
                <comment line="829">
                    TODO: Need to change the spec to be usable DAY_OF_MONTH rolling...                    
                </comment>
                <comment line="831">
                    Transition handling. We can&apos;t change year and era
                     values here due to the Calendar roll spec!                    
                </comment>
                <comment line="835">
                    It may not be a regular month. Convert the date and range to
                     the relative values, perform the roll, and
                     convert the result back to the rolled date.                    
                </comment>
                <comment line="854">
                    Handle transition. We can&apos;t change year and era values
                     here due to the Calendar roll spec.                    
                </comment>
                <comment line="869">
                    If the week of year is in the same year, we can
                     just change DAY_OF_WEEK.                    
                </comment>
                <comment line="879">
                    We need to handle it in a different way around year
                     boundaries and in the transition year. Note that
                     changing era and year values violates the roll
                     rule: not changing larger calendar fields...                    
                </comment>
                <comment line="903">
                    after having normalized, min should be 1.                    
                </comment>
                <comment line="917">
                    Transition year handling.                    
                </comment>
                <scope line="512"/>
                <scope line="516"/>
                <declaration name="min" type="int" line="523"/>
                <declaration name="max" type="int" line="524"/>
                <scope line="540">
                    <declaration name="unit" type="int" line="541"/>
                    <declaration name="h" type="int" line="542"/>
                    <declaration name="nh" type="int" line="543"/>
                    <scope line="544"/>
                    <declaration name="d" type="CalendarDate" line="553"/>
                    <scope line="554">
                        <scope line="559"/>
                    </scope>
                    <declaration name="hourOfDay" type="int" line="565"/>
                    <scope line="567"/>
                    <scope line="569"/>
                    <declaration name="zoneOffset" type="int" line="575"/>
                    <declaration name="saving" type="int" line="576"/>
                </scope>
                <scope line="592">
                    <scope line="593">
                        <declaration name="year" type="int" line="594"/>
                        <scope line="595">
                            <declaration name="jd" type="CalendarDate" line="596"/>
                            <declaration name="d" type="CalendarDate" line="597"/>
                            <declaration name="n" type="int" line="599"/>
                            <scope line="600">
                                <scope line="604"/>
                                <scope line="609"/>
                            </scope>
                        </scope>
                        <scope line="619">
                            <declaration name="jd" type="CalendarDate" line="620"/>
                            <declaration name="d" type="CalendarDate" line="621"/>
                            <declaration name="n" type="int" line="623"/>
                            <scope line="624">
                                <scope line="628"/>
                                <scope line="633"/>
                            </scope>
                        </scope>
                        <scope line="643">
                            <declaration name="mon" type="int" line="644"/>
                            <scope line="645"/>
                            <declaration name="monthLen" type="int" line="654"/>
                            <scope line="655"/>
                        </scope>
                    </scope>
                    <scope line="659">
                        <declaration name="eraIndex" type="int" line="660"/>
                        <declaration name="transition" type="CalendarDate" line="661"/>
                        <scope line="662"/>
                        <scope line="665">
                            <scope line="666">
                                <scope line="668">
                                    <scope line="670"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="677"/>
                        <declaration name="n" type="int" line="683"/>
                        <scope line="685">
                            <scope line="687">
                                <scope line="688"/>
                            </scope>
                        </scope>
                        <scope line="692">
                            <declaration name="dom" type="int" line="693"/>
                            <scope line="694"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="703">
                    <declaration name="y" type="int" line="704"/>
                    <declaration name="woy" type="int" line="707"/>
                    <declaration name="value" type="int" line="708"/>
                    <scope line="709">
                        <declaration name="year" type="int" line="710"/>
                        <scope line="711"/>
                        <scope line="713">
                            <scope line="716"/>
                        </scope>
                        <scope line="724"/>
                        <declaration name="fd" type="long" line="728"/>
                        <declaration name="day1" type="long" line="730"/>
                        <scope line="731">
                            <scope line="732"/>
                        </scope>
                        <scope line="735">
                            <declaration name="d" type="CalendarDate" line="736"/>
                            <scope line="737"/>
                        </scope>
                        <scope line="744"/>
                    </scope>
                    <declaration name="fd" type="long" line="751"/>
                    <declaration name="day1" type="long" line="752"/>
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="754"/>
                    <scope line="755"/>
                    <scope line="762"/>
                </scope>
                <scope line="775">
                    <declaration name="isTransitionYear" type="boolean" line="776"/>
                    <declaration name="dow" type="int" line="778"/>
                    <scope line="779"/>
                    <declaration name="fd" type="long" line="783"/>
                    <declaration name="month1" type="long" line="784"/>
                    <declaration name="monthLength" type="int" line="785"/>
                    <scope line="786"/>
                    <scope line="789"/>
                    <declaration name="monthDay1st" type="long" line="795"/>
                    <scope line="799"/>
                    <declaration name="value" type="int" line="805"/>
                    <declaration name="nfd" type="long" line="808"/>
                    <scope line="812"/>
                    <scope line="814"/>
                </scope>
                <scope line="822">
                    <scope line="823"/>
                    <declaration name="month1" type="long" line="832"/>
                    <declaration name="value" type="int" line="837"/>
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="839"/>
                </scope>
                <scope line="847">
                    <scope line="849"/>
                    <declaration name="value" type="int" line="855"/>
                    <declaration name="jan0" type="long" line="856"/>
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="857"/>
                </scope>
                <scope line="865">
                    <declaration name="normalizedYear" type="int" line="866"/>
                    <scope line="867">
                        <declaration name="weekOfYear" type="int" line="870"/>
                        <scope line="871"/>
                    </scope>
                    <scope line="883"/>
                    <declaration name="fd" type="long" line="886"/>
                    <declaration name="dowFirst" type="long" line="887"/>
                    <scope line="889"/>
                    <scope line="891"/>
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="894"/>
                </scope>
                <scope line="901">
                    <scope line="903">
                        <declaration name="dom" type="int" line="904"/>
                        <declaration name="monthLength" type="int" line="905"/>
                        <declaration name="lastDays" type="int" line="906"/>
                        <declaration name="x" type="int" line="908"/>
                        <scope line="909"/>
                    </scope>
                    <declaration name="fd" type="long" line="917"/>
                    <declaration name="month1" type="long" line="918"/>
                    <declaration name="monthLength" type="int" line="919"/>
                    <declaration name="lastDays" type="int" line="920"/>
                    <declaration name="x" type="int" line="922"/>
                    <scope line="923"/>
                    <declaration name="value" type="int" line="926"/>
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="928"/>
                </scope>
            </method>
            <method name="getDisplayName" type="String" line="937">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="944">
                    &quot;GanNen&quot; is supported only in the LONG style.                    
                </comment>
                <comment line="961">
                    If the ERA value is out of range for strings, then
                     try to get its name or abbreviation from the Era instance.                    
                </comment>
                <scope line="939"/>
                <scope line="945"/>
                <declaration name="rb" type="ResourceBundle" line="949"/>
                <declaration name="name" type="String" line="950"/>
                <declaration name="key" type="String" line="951"/>
                <scope line="952">
                    <declaration name="strings" type="String[]" line="953"/>
                    <scope line="954">
                        <scope line="955"/>
                    </scope>
                    <scope line="958">
                        <declaration name="index" type="int" line="959"/>
                        <scope line="962">
                            <declaration name="era" type="Era" line="963"/>
                        </scope>
                        <scope line="965"/>
                    </scope>
                </scope>
            </method>
            <method name="getDisplayNames" type="Map<String,Integer>" line="975">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="997">
                    SHORT or LONG                    
                </comment>
                <scope line="977"/>
                <scope line="981">
                    <declaration name="shortNames" type="Map&lt;String,Integer&gt;" line="982"/>
                    <scope line="983"/>
                    <declaration name="longNames" type="Map&lt;String,Integer&gt;" line="986"/>
                    <scope line="987"/>
                    <scope line="990"/>
                </scope>
            </method>
            <method name="getDisplayNamesImpl" type="Map<String,Integer>" line="1000">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="1016">
                    If strings[] has fewer than eras[], get more names from eras[].                    
                </comment>
                <declaration name="rb" type="ResourceBundle" line="1001"/>
                <declaration name="key" type="String" line="1002"/>
                <declaration name="map" type="Map&lt;String,Integer&gt;" line="1003"/>
                <scope line="1004">
                    <declaration name="strings" type="String[]" line="1005"/>
                    <scope line="1006">
                        <scope line="1007"/>
                    </scope>
                    <scope line="1010">
                        <declaration name="base" type="int" line="1011"/>
                        <scope line="1012"/>
                        <scope line="1016">
                            <scope line="1017">
                                <declaration name="era" type="Era" line="1018"/>
                                <declaration name="name" type="String" line="1019"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getKey" type="String" line="1028">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                </params>
                <declaration name="className" type="String" line="1029"/>
                <declaration name="key" type="StringBuilder" line="1030"/>
                <scope line="1034"/>
            </method>
            <javadoc line="1059">
                Returns the minimum value for the given calendar field of this
                  &lt;code&gt;Calendar&lt;/code&gt; instance. The minimum value is
                  defined as the smallest value returned by the {@link Calendar#get(int) get} method for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the minimum value for the given calendar field.                    
                </return>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="1077">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1081">
                Returns the maximum value for the given calendar field of this
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The maximum value is
                  defined as the largest value returned by the {@link Calendar#get(int) get} method for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the maximum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="1099">
                <params>
                    <param name="field" type="int"/>
                </params>
                <comment line="1104">
                    The value should depend on the time zone of this calendar.                    
                </comment>
                <scope line="1102">
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="1104"/>
                </scope>
            </method>
            <javadoc line="1112">
                Returns the highest minimum value for the given calendar field
                  of this &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The highest
                  minimum value is defined as the largest value returned by{@link #getActualMinimum(int)} for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the highest minimum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getGreatestMinimum" type="int" line="1130">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1134">
                Returns the lowest maximum value for the given calendar field
                  of this &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The lowest
                  maximum value is defined as the smallest value returned by{@link #getActualMaximum(int)} for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the lowest maximum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getLeastMaximum" type="int" line="1152">
                <params>
                    <param name="field" type="int"/>
                </params>
                <scope line="1155"/>
            </method>
            <javadoc line="1162">
                Returns the minimum value that this calendar field could have,
                  taking into consideration the given time value and the current
                  values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the minimum of the given field for the time value of
                      this &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt;                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getActualMinimum" type="int" line="1179">
                <params>
                    <param name="field" type="int"/>
                </params>
                <comment line="1187">
                    Get a local date which includes time of day and time zone,
                     which are missing in jc.jdate.                    
                </comment>
                <comment line="1199">
                    Use the same year in jd to take care of leap
                     years. i.e., both jd and d must agree on leap
                     or common years.                    
                </comment>
                <comment line="1211">
                    Use an equvalent year of d.getYear() if
                     possible. Otherwise, ignore the leap year and
                     common year difference.                    
                </comment>
                <comment line="1229">
                    In Before Meiji and Meiji, January is the first month.                    
                </comment>
                <comment line="1245">
                    shift 400 years to avoid underflow                    
                </comment>
                <scope line="1180"/>
                <declaration name="value" type="int" line="1184"/>
                <declaration name="jc" type="JapaneseImperialCalendar" line="1185"/>
                <declaration name="jd" type="LocalGregorianCalendar.Date" line="1188"/>
                <declaration name="eraIndex" type="int" line="1190"/>
                <scope line="1193">
                    <scope line="1194">
                        <declaration name="since" type="long" line="1196"/>
                        <declaration name="d" type="CalendarDate" line="1197"/>
                        <scope line="1204"/>
                    </scope>
                    <scope line="1207">
                        <declaration name="d" type="CalendarDate" line="1209"/>
                        <declaration name="y" type="int" line="1213"/>
                        <scope line="1214"/>
                        <scope line="1219"/>
                    </scope>
                </scope>
                <scope line="1227">
                    <scope line="1229">
                        <declaration name="since" type="long" line="1230"/>
                        <declaration name="d" type="CalendarDate" line="1231"/>
                        <scope line="1233"/>
                    </scope>
                </scope>
                <scope line="1241">
                    <declaration name="d" type="CalendarDate" line="1243"/>
                    <declaration name="jan1" type="long" line="1251"/>
                    <declaration name="fd" type="long" line="1252"/>
                    <declaration name="woy" type="int" line="1253"/>
                    <declaration name="day1" type="long" line="1254"/>
                    <scope line="1257"/>
                </scope>
            </method>
            <javadoc line="1266">
                Returns the maximum value that this calendar field could have,
                  taking into consideration the given time value and the current
                  values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and{@link Calendar#getTimeZone() getTimeZone} methods.
                  For example, if the date of this instance is Heisei 16February 1,
                  the actual maximum value of the &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field
                  is 29 because Heisei 16 is a leap year, and if the date of this
                  instance is Heisei 17 February 1, it&apos;s 28.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the maximum of the given field for the time value of
                      this &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt;                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
            </javadoc>
            <method name="getActualMaximum" type="int" line="1288">
                <params>
                    <param name="field" type="int"/>
                </params>
                <comment line="1307">
                    TODO: there may be multiple transitions in a year.                    
                </comment>
                <comment line="1338">
                    Handle transition year.
                     TODO: there may be multiple transitions in a year.                    
                </comment>
                <comment line="1388">
                    shift 400 years to avoid underflow                    
                </comment>
                <comment line="1404">
                    Get the day of week of January 1 of the year                    
                </comment>
                <comment line="1408">
                    Normalize the day of week with the firstDayOfWeek value                    
                </comment>
                <comment line="1449">
                    # of days in the first week                    
                </comment>
                <comment line="1495">
                    Use an equivalent year for the
                     getYearOffsetInMillis call to avoid overflow.                    
                </comment>
                <comment line="1504">
                    Use the same year as d.getYear() to be
                     consistent with leap and common years.                    
                </comment>
                <declaration name="fieldsForFixedMax" type="int" line="1289"/>
                <scope line="1292"/>
                <declaration name="jc" type="JapaneseImperialCalendar" line="1296"/>
                <declaration name="date" type="LocalGregorianCalendar.Date" line="1297"/>
                <declaration name="normalizedYear" type="int" line="1298"/>
                <declaration name="value" type="int" line="1300"/>
                <scope line="1303">
                    <scope line="1305">
                        <declaration name="eraIndex" type="int" line="1307"/>
                        <scope line="1308"/>
                        <declaration name="transition" type="long" line="1312"/>
                        <declaration name="fd" type="long" line="1313"/>
                        <scope line="1314">
                            <declaration name="ldate" type="LocalGregorianCalendar.Date" line="1315"/>
                        </scope>
                    </scope>
                    <scope line="1320">
                        <declaration name="d" type="LocalGregorianCalendar.Date" line="1321"/>
                        <scope line="1323"/>
                    </scope>
                </scope>
                <scope line="1335">
                    <scope line="1336">
                        <declaration name="eraIndex" type="int" line="1339"/>
                        <scope line="1340"/>
                        <declaration name="transition" type="long" line="1344"/>
                        <declaration name="fd" type="long" line="1345"/>
                        <declaration name="d" type="CalendarDate" line="1346"/>
                        <scope line="1348"/>
                        <scope line="1350"/>
                    </scope>
                    <scope line="1354">
                        <declaration name="d" type="LocalGregorianCalendar.Date" line="1355"/>
                        <scope line="1357">
                            <declaration name="fd" type="long" line="1358"/>
                            <declaration name="jan1" type="long" line="1359"/>
                        </scope>
                        <scope line="1361">
                            <declaration name="d1" type="CalendarDate" line="1362"/>
                            <declaration name="fd1" type="long" line="1363"/>
                            <declaration name="fd2" type="long" line="1367"/>
                        </scope>
                        <scope line="1369"/>
                    </scope>
                </scope>
                <scope line="1377">
                    <scope line="1378">
                        <declaration name="jd" type="LocalGregorianCalendar.Date" line="1379"/>
                        <scope line="1381">
                            <declaration name="fd" type="long" line="1382"/>
                            <declaration name="jan1" type="long" line="1383"/>
                        </scope>
                        <scope line="1385">
                            <declaration name="d" type="CalendarDate" line="1386"/>
                            <declaration name="jan1" type="long" line="1393"/>
                            <declaration name="nextJan1" type="long" line="1394"/>
                            <declaration name="nextJan1st" type="long" line="1395"/>
                            <declaration name="ndays" type="int" line="1397"/>
                            <scope line="1398"/>
                        </scope>
                        <scope line="1402">
                            <declaration name="d" type="CalendarDate" line="1404"/>
                            <declaration name="dayOfWeek" type="int" line="1406"/>
                            <scope line="1409"/>
                            <declaration name="magic" type="int" line="1413"/>
                            <scope line="1415"/>
                        </scope>
                    </scope>
                    <scope line="1422"/>
                    <declaration name="max" type="int" line="1425"/>
                    <scope line="1428"/>
                </scope>
                <scope line="1436">
                    <declaration name="jd" type="LocalGregorianCalendar.Date" line="1437"/>
                    <scope line="1439">
                        <declaration name="d" type="CalendarDate" line="1440"/>
                        <declaration name="dayOfWeek" type="int" line="1442"/>
                        <declaration name="monthLength" type="int" line="1443"/>
                        <scope line="1445"/>
                        <declaration name="nDaysFirstWeek" type="int" line="1448"/>
                        <scope line="1450"/>
                        <scope line="1454">
                            <scope line="1456"/>
                        </scope>
                    </scope>
                    <scope line="1460">
                        <declaration name="fd" type="long" line="1461"/>
                        <declaration name="month1" type="long" line="1462"/>
                    </scope>
                </scope>
                <scope line="1469">
                    <declaration name="ndays" type="int" line="1470"/>
                    <declaration name="dow" type="int" line="1471"/>
                    <declaration name="d" type="BaseCalendar.Date" line="1472"/>
                    <declaration name="x" type="int" line="1477"/>
                    <scope line="1478"/>
                </scope>
                <scope line="1487">
                    <declaration name="jd" type="CalendarDate" line="1488"/>
                    <declaration name="d" type="CalendarDate" line="1489"/>
                    <declaration name="eraIndex" type="int" line="1490"/>
                    <scope line="1491">
                        <scope line="1496"/>
                    </scope>
                    <scope line="1499"/>
                    <scope line="1508"/>
                </scope>
            </method>
            <javadoc line="1520">
                Returns the millisecond offset from the beginning of the
                  year. In the year for Long.MIN_VALUE, it&apos;s a pseudo value
                  beyond the limit. The given CalendarDate object must have been
                  normalized before calling this method.                
            </javadoc>
            <method name="getYearOffsetInMillis" type="long" line="1526">
                <params>
                    <param name="date" type="CalendarDate"/>
                </params>
                <declaration name="t" type="long" line="1527"/>
            </method>
            <method name="clone" type="Object" line="1531">
                <declaration name="other" type="JapaneseImperialCalendar" line="1532"/>
            </method>
            <method name="getTimeZone" type="TimeZone" line="1540">
                <comment line="1543">
                    To share the zone by the CalendarDate                    
                </comment>
                <declaration name="zone" type="TimeZone" line="1541"/>
            </method>
            <method name="setTimeZone" type="void" line="1547">
                <params>
                    <param name="zone" type="TimeZone"/>
                </params>
                <comment line="1550">
                    To share the zone by the CalendarDate                    
                </comment>
            </method>
            <declaration name="cachedFixedDate" type="long" line="1553"/>
            <javadoc line="1553">
                The fixed date corresponding to jdate. If the value is
                  Long.MIN_VALUE, the fixed date value is unknown.                
            </javadoc>
            <javadoc line="1559">
                Converts the time value (millisecond offset from the &lt;a
                  href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;) to calendar field values.
                  The time is &lt;em&gt;not&lt;/em&gt;
                  recomputed first; to recompute the time, then the fields, call the
                  &lt;code&gt;complete&lt;/code&gt; method.                
                <see>
                    Calendar#complete                    
                </see>
            </javadoc>
            <method name="computeFields" type="void" line="1568">
                <comment line="1572">
                    Determine which calendar fields need to be computed.                    
                </comment>
                <comment line="1581">
                    Specify all fields                    
                </comment>
                <comment line="1585">
                    After computing all the fields, set the field state to `COMPUTED&apos;.                    
                </comment>
                <declaration name="mask" type="int" line="1569"/>
                <scope line="1570">
                    <declaration name="fieldMask" type="int" line="1573"/>
                    <scope line="1574"/>
                </scope>
                <scope line="1579"/>
            </method>
            <javadoc line="1588">
                This computeFields implements the conversion from UTC
                  (millisecond offset from the Epoch) to calendar
                  field values. fieldMask specifies which fields to change the
                  setting state to COMPUTED, although all fields are set to
                  the correct values. This is required to fix 4685354.                
                <param>
                    fieldMask a bit mask to specify which fields to change
                      the setting state.                    
                </param>
                <param>
                    tzMask a bit mask to specify which time zone offset
                      fields to be used for time calculations                    
                </param>
                <return>
                    a new field mask that indicates what field values have
                      actually been set.                    
                </return>
            </javadoc>
            <method name="computeFields" type="int" line="1602">
                <params>
                    <param name="fieldMask" type="int"/>
                    <param name="tzMask" type="int"/>
                </params>
                <comment line="1628">
                    By computing time and zoneOffset separately, we can take
                     the wider range of time+zoneOffset than the previous
                     implementation.                    
                </comment>
                <comment line="1646">
                    See if we can use jdate to avoid date calculation.                    
                </comment>
                <comment line="1654">
                    Always set the ERA and YEAR values.                    
                </comment>
                <comment line="1659">
                    0-based                    
                </comment>
                <comment line="1662">
                    Set the basic date fields.                    
                </comment>
                <comment line="1676">
                    Assume AM == 0                    
                </comment>
                <comment line="1704">
                    If it&apos;s a year of an era transition, we need to handle
                     irregular year boundaries.                    
                </comment>
                <comment line="1728">
                    The spec is to calculate WEEK_OF_YEAR in the
                     ISO8601-style. This creates problems, though.                    
                </comment>
                <comment line="1731">
                    If the date belongs to the last week of the
                     previous year, use the week number of &quot;12/31&quot; of
                     the &quot;previous&quot; year. Again, if the previous year is
                     a transition year, we need to take care of it.
                     Usually the previous day of the first day of a year
                     is December 31, which is not always true in the
                     Japanese imperial calendar system.                    
                </comment>
                <comment line="1748">
                    As of Heisei (since Meiji) there&apos;s no case
                     that there are multiple transitions in a
                     year.  Historically there was such
                     case. There might be such case again in the
                     future.                    
                </comment>
                <comment line="1778">
                    Regular years                    
                </comment>
                <comment line="1788">
                    The first days forms a week in which the date is included.                    
                </comment>
                <comment line="1811">
                    The first days forms a week in which the date is included.                    
                </comment>
                <declaration name="zoneOffset" type="int" line="1603"/>
                <declaration name="tz" type="TimeZone" line="1604"/>
                <scope line="1605"/>
                <scope line="1608">
                    <scope line="1609"/>
                    <scope line="1611"/>
                </scope>
                <scope line="1617">
                    <scope line="1618"/>
                    <scope line="1621"/>
                </scope>
                <declaration name="fixedDate" type="long" line="1630"/>
                <declaration name="timeOfDay" type="int" line="1631"/>
                <scope line="1634"/>
                <scope line="1637">
                    <scope line="1638"/>
                </scope>
                <scope line="1646"/>
                <declaration name="era" type="int" line="1650"/>
                <declaration name="year" type="int" line="1651"/>
                <declaration name="mask" type="int" line="1656"/>
                <declaration name="month" type="int" line="1658"/>
                <declaration name="dayOfMonth" type="int" line="1659"/>
                <scope line="1663"/>
                <scope line="1671">
                    <scope line="1672">
                        <declaration name="hours" type="int" line="1673"/>
                        <declaration name="r" type="int" line="1677"/>
                    </scope>
                    <scope line="1682"/>
                </scope>
                <scope line="1694"/>
                <scope line="1701">
                    <declaration name="normalizedYear" type="int" line="1702"/>
                    <declaration name="transitionYear" type="boolean" line="1705"/>
                    <declaration name="dayOfYear" type="int" line="1706"/>
                    <declaration name="fixedDateJan1" type="long" line="1707"/>
                    <scope line="1708"/>
                    <scope line="1711">
                        <declaration name="dx" type="CalendarDate" line="1712"/>
                    </scope>
                    <scope line="1715"/>
                    <declaration name="fixedDateMonth1" type="long" line="1719"/>
                    <declaration name="weekOfYear" type="int" line="1725"/>
                    <scope line="1729">
                        <declaration name="fixedDec31" type="long" line="1737"/>
                        <declaration name="prevJan1" type="long" line="1738"/>
                        <declaration name="d" type="LocalGregorianCalendar.Date" line="1739"/>
                        <scope line="1740">
                            <scope line="1742"/>
                        </scope>
                        <scope line="1745">
                            <scope line="1746">
                                <scope line="1752">
                                    <declaration name="pd" type="CalendarDate" line="1753"/>
                                    <scope line="1754"/>
                                </scope>
                                <scope line="1757"/>
                            </scope>
                            <scope line="1762">
                                <scope line="1764"/>
                            </scope>
                        </scope>
                        <scope line="1768">
                            <declaration name="cd" type="CalendarDate" line="1769"/>
                        </scope>
                    </scope>
                    <scope line="1775">
                        <scope line="1776">
                            <scope line="1778">
                                <declaration name="nextJan1" type="long" line="1779"/>
                                <scope line="1780"/>
                                <declaration name="nextJan1st" type="long" line="1783"/>
                                <declaration name="ndays" type="int" line="1785"/>
                                <scope line="1786"/>
                            </scope>
                        </scope>
                        <scope line="1791">
                            <declaration name="d" type="LocalGregorianCalendar.Date" line="1792"/>
                            <declaration name="nextJan1" type="long" line="1793"/>
                            <scope line="1794"/>
                            <scope line="1798">
                                <declaration name="nextEraIndex" type="int" line="1799"/>
                                <declaration name="cd" type="CalendarDate" line="1800"/>
                            </scope>
                            <declaration name="nextJan1st" type="long" line="1806"/>
                            <declaration name="ndays" type="int" line="1808"/>
                            <scope line="1809"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1822">
                Returns the number of weeks in a period between fixedDay1 and
                  fixedDate. The getFirstDayOfWeek-getMinimalDaysInFirstWeek rule
                  is applied to calculate the number of weeks.                
                <param>
                    fixedDay1 the fixed date of the first day of the period                    
                </param>
                <param>
                    fixedDate the fixed date of the last day of the period                    
                </param>
                <return>
                    the number of weeks of the given period                    
                </return>
            </javadoc>
            <method name="getWeekNumber" type="int" line="1831">
                <params>
                    <param name="fixedDay1" type="long"/>
                    <param name="fixedDate" type="long"/>
                </params>
                <comment line="1833">
                    We can always use `jcal&apos; since Julian and Gregorian are the
                     same thing for this calculation.                    
                </comment>
                <declaration name="fixedDay1st" type="long" line="1834"/>
                <declaration name="ndays" type="int" line="1836"/>
                <scope line="1838"/>
                <declaration name="normalizedDayOfPeriod" type="int" line="1841"/>
                <scope line="1842"/>
            </method>
            <javadoc line="1848">
                Converts calendar field values to the time value (millisecond
                  offset from the &lt;a href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;).                
                <exception>
                    IllegalArgumentException if any calendar fields are invalid.                    
                </exception>
            </javadoc>
            <method name="computeTime" type="void" line="1854">
                <comment line="1856">
                    In non-lenient mode, perform brief checking of calendar
                     fields which have been set externally. Through this
                     checking, the field values are stored in originalFields[]
                     to see if any of them are normalized later.                    
                </comment>
                <comment line="1867">
                    Quick validation for any out of range values                    
                </comment>
                <comment line="1876">
                    Let the super class determine which calendar fields to be
                     used to calculate the time.                    
                </comment>
                <comment line="1891">
                    Equivalent to 1970 (Gregorian)                    
                </comment>
                <comment line="1897">
                    Calculate the time of day. We rely on the convention that
                     an UNSET field has 0.                    
                </comment>
                <comment line="1904">
                    The default value of AM_PM is 0 which designates AM.                    
                </comment>
                <comment line="1916">
                    Convert the time of day to the number of days and the
                     millisecond offset from midnight.                    
                </comment>
                <comment line="1925">
                    Calculate the fixed date since January 1, 1 (Gregorian).                    
                </comment>
                <comment line="1928">
                    millis represents local wall-clock time in milliseconds.                    
                </comment>
                <comment line="1931">
                    Compute the time zone offset and DST offset.  There are two potential
                     ambiguities here.  We&apos;ll assume a 2:00 am (wall time) switchover time
                     for discussion purposes here.
                     1. The transition into DST.  Here, a designated time of 2:00 am - 2:59 am
                        can be in standard or in DST depending.  However, 2:00 am is an invalid
                        representation (the representation jumps from 1:59:59 am Std to 3:00:00 am DST).
                        We assume standard time.
                     2. The transition out of DST.  Here, a designated time of 1:00 am - 1:59 am
                        can be in standard or DST.  Both are valid representations (the rep
                        jumps from 1:59:59 DST to 1:00:00 Std).
                        Again, we assume standard time.
                     We use the TimeZone object, unless the user has explicitly set the ZONE_OFFSET
                     or DST_OFFSET fields; then we use those fields.                    
                </comment>
                <comment line="1965">
                    Adjust the time zone offset values to get the UTC time.                    
                </comment>
                <comment line="1968">
                    Set this calendar&apos;s time in milliseconds                    
                </comment>
                <comment line="1980">
                    Restore the original field values                    
                </comment>
                <scope line="1859">
                    <scope line="1860"/>
                    <scope line="1863">
                        <declaration name="value" type="int" line="1864"/>
                        <scope line="1865">
                            <scope line="1867"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="fieldMask" type="int" line="1877"/>
                <declaration name="year" type="int" line="1879"/>
                <declaration name="era" type="int" line="1880"/>
                <scope line="1882"/>
                <scope line="1885">
                    <scope line="1886"/>
                    <scope line="1889"/>
                </scope>
                <declaration name="timeOfDay" type="long" line="1898"/>
                <scope line="1899"/>
                <scope line="1901">
                    <scope line="1904"/>
                </scope>
                <declaration name="fixedDate" type="long" line="1917"/>
                <scope line="1919"/>
                <declaration name="millis" type="long" line="1928"/>
                <declaration name="zone" type="TimeZone" line="1943"/>
                <scope line="1944"/>
                <declaration name="tzMask" type="int" line="1947"/>
                <scope line="1948">
                    <scope line="1949"/>
                    <scope line="1951"/>
                </scope>
                <scope line="1955">
                    <scope line="1956"/>
                    <scope line="1959"/>
                </scope>
                <declaration name="mask" type="int" line="1970"/>
                <scope line="1972">
                    <scope line="1973">
                        <scope line="1974"/>
                        <scope line="1977">
                            <declaration name="wrongValue" type="int" line="1978"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1989">
                Computes the fixed date under either the Gregorian or the
                  Julian calendar, using the given year and the specified calendar fields.                
                <param>
                    cal the CalendarSystem to be used for the date calculation                    
                </param>
                <param>
                    year the normalized year number, with 0 indicating the
                      year 1 BCE, -1 indicating 2 BCE, etc.                    
                </param>
                <param>
                    fieldMask the calendar fields to be used for the date calculation                    
                </param>
                <return>
                    the fixed date                    
                </return>
                <see>
                    Calendar#selectFields                    
                </see>
            </javadoc>
            <method name="getFixedDate" type="long" line="2000">
                <params>
                    <param name="era" type="int"/>
                    <param name="year" type="int"/>
                    <param name="fieldMask" type="int"/>
                </params>
                <comment line="2005">
                    No need to check if MONTH has been set (no isSet(MONTH)
                     call) since its unset value happens to be JANUARY (0).                    
                </comment>
                <comment line="2009">
                    If the month is out of range, adjust it into range.                    
                </comment>
                <comment line="2026">
                    Adjust the base date if year is the minimum value.                    
                </comment>
                <comment line="2041">
                    Get the fixed date since Jan 1, 1 (Gregorian). We are on
                     the first day of either `month&apos; or January in &apos;year&apos;.                    
                </comment>
                <comment line="2046">
                    Month-based calculations                    
                </comment>
                <comment line="2048">
                    We are on the &quot;first day&quot; of the month (which may
                     not be 1). Just add the offset if DAY_OF_MONTH is
                     set. If the isSet call returns false, that means
                     DAY_OF_MONTH has been selected just because of the
                     selected combination. We don&apos;t need to add any
                     since the default value is the &quot;first day&quot;.                    
                </comment>
                <comment line="2055">
                    To avoid underflow with DAY_OF_MONTH-firstDayOfMonth, add
                     DAY_OF_MONTH, then subtract firstDayOfMonth.                    
                </comment>
                <comment line="2064">
                    If we have enough days in the first week, then
                     move to the previous week.                    
                </comment>
                <comment line="2073">
                    In lenient mode, we treat days of the previous
                     months as a part of the specified
                     WEEK_OF_MONTH. See 4633646.                    
                </comment>
                <comment line="2084">
                    We are basing this on the day-of-week-in-month.  The only
                     trickiness occurs if the day-of-week-in-month is
                     negative.                    
                </comment>
                <comment line="2097">
                    Go to the first day of the next week of
                     the specified week boundary.                    
                </comment>
                <comment line="2100">
                    Then, get the day of week date on or before the last date.                    
                </comment>
                <comment line="2107">
                    We are on the first day of the year.                    
                </comment>
                <comment line="2112">
                    Add the offset, then subtract 1. (Make sure to avoid underflow.)                    
                </comment>
                <comment line="2118">
                    If we have enough days in the first week, then move
                     to the previous week.                    
                </comment>
                <declaration name="month" type="int" line="2001"/>
                <declaration name="firstDayOfMonth" type="int" line="2002"/>
                <scope line="2003">
                    <scope line="2009"/>
                    <scope line="2012">
                        <declaration name="rem" type="int[]" line="2013"/>
                    </scope>
                </scope>
                <scope line="2017">
                    <scope line="2018">
                        <declaration name="d" type="CalendarDate" line="2019"/>
                    </scope>
                </scope>
                <scope line="2026">
                    <declaration name="dx" type="CalendarDate" line="2027"/>
                    <declaration name="m" type="int" line="2028"/>
                </scope>
                <declaration name="date" type="LocalGregorianCalendar.Date" line="2035"/>
                <declaration name="fixedDate" type="long" line="2042"/>
                <scope line="2044">
                    <scope line="2046">
                        <scope line="2053"/>
                    </scope>
                    <scope line="2059">
                        <scope line="2060">
                            <declaration name="firstDayOfWeek" type="long" line="2061"/>
                            <scope line="2065"/>
                            <scope line="2068"/>
                        </scope>
                        <scope line="2076">
                            <declaration name="dayOfWeek" type="int" line="2077"/>
                            <scope line="2078"/>
                            <scope line="2080"/>
                            <declaration name="dowim" type="int" line="2086"/>
                            <scope line="2087"/>
                            <scope line="2089"/>
                            <scope line="2092"/>
                            <scope line="2095">
                                <declaration name="lastDate" type="int" line="2098"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2105">
                    <scope line="2107">
                        <scope line="2108"/>
                    </scope>
                    <scope line="2114">
                        <declaration name="firstDayOfWeek" type="long" line="2115"/>
                        <scope line="2119"/>
                        <scope line="2122">
                            <declaration name="dayOfWeek" type="int" line="2123"/>
                            <scope line="2124"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2135">
                Returns the fixed date of the first day of the year (usually
                  January 1) before the specified date.                
                <param>
                    date the date for which the first day of the year is
                      calculated. The date has to be in the cut-over year.                    
                </param>
                <param>
                    fixedDate the fixed date representation of the date                    
                </param>
            </javadoc>
            <method name="getFixedDateJan1" type="long" line="2143">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                    <param name="fixedDate" type="long"/>
                </params>
                <comment line="2150">
                    There might be multiple era transitions in a year.                    
                </comment>
                <declaration name="era" type="Era" line="2144"/>
                <scope line="2145">
                    <scope line="2146">
                        <declaration name="d" type="CalendarDate" line="2147"/>
                        <declaration name="fd" type="long" line="2148"/>
                        <scope line="2150"/>
                    </scope>
                </scope>
                <declaration name="d" type="CalendarDate" line="2156"/>
            </method>
            <javadoc line="2161">
                Returns the fixed date of the first date of the month (usually
                  the 1st of the month) before the specified date.                
                <param>
                    date the date for which the first day of the month is
                      calculated. The date must be in the era transition year.                    
                </param>
                <param>
                    fixedDate the fixed date representation of the date                    
                </param>
            </javadoc>
            <method name="getFixedDateMonth1" type="long" line="2170">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                    <param name="fixedDate" type="long"/>
                </params>
                <comment line="2175">
                    If the given date is on or after the transition date, then
                     return the transition date.                    
                </comment>
                <comment line="2182">
                    Otherwise, we can use the 1st day of the month.                    
                </comment>
                <declaration name="eraIndex" type="int" line="2171"/>
                <scope line="2172">
                    <declaration name="transition" type="long" line="2173"/>
                    <scope line="2176"/>
                </scope>
            </method>
            <javadoc line="2185">
                Returns a LocalGregorianCalendar.Date produced from the specified fixed date.                
                <param>
                    fd the fixed date                    
                </param>
            </javadoc>
            <method name="getCalendarDate" type="LocalGregorianCalendar.Date" line="2190">
                <params>
                    <param name="fd" type="long"/>
                </params>
                <declaration name="d" type="LocalGregorianCalendar.Date" line="2191"/>
            </method>
            <javadoc line="2196">
                Returns the length of the specified month in the specified
                  Gregorian year. The year number must be normalized.                
                <see>
                    #isLeapYear(int)                    
                </see>
            </javadoc>
            <method name="monthLength" type="int" line="2202">
                <params>
                    <param name="month" type="int"/>
                    <param name="gregorianYear" type="int"/>
                </params>
            </method>
            <javadoc line="2207">
                Returns the length of the specified month in the year provided
                  by internalGet(YEAR).                
                <see>
                    #isLeapYear(int)                    
                </see>
            </javadoc>
            <method name="monthLength" type="int" line="2213">
                <params>
                    <param name="month" type="int"/>
                </params>
            </method>
            <method name="actualMonthLength" type="int" line="2219">
                <declaration name="length" type="int" line="2220"/>
                <declaration name="eraIndex" type="int" line="2221"/>
                <scope line="2222">
                    <declaration name="transitionFixedDate" type="long" line="2223"/>
                    <declaration name="d" type="CalendarDate" line="2224"/>
                    <scope line="2225"/>
                    <scope line="2227"/>
                </scope>
            </method>
            <javadoc line="2234">
                Returns the index to the new era if the given date is in a
                  transition month.  For example, if the give date is Heisei 1
                  (1989) January 20, then the era index for Heisei is
                  returned. Likewise, if the given date is Showa 64 (1989)
                  January 3, then the era index for Heisei is returned. If the
                  given date is not in any transition month, then -1 is returned.                
            </javadoc>
            <method name="getTransitionEraIndex" type="int" line="2242">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                </params>
                <declaration name="eraIndex" type="int" line="2243"/>
                <declaration name="transitionDate" type="CalendarDate" line="2244"/>
                <scope line="2246"/>
                <scope line="2249">
                    <scope line="2252"/>
                </scope>
            </method>
            <method name="isTransitionYear" type="boolean" line="2259">
                <params>
                    <param name="normalizedYear" type="int"/>
                </params>
                <scope line="2260">
                    <declaration name="transitionYear" type="int" line="2261"/>
                    <scope line="2262"/>
                    <scope line="2265"/>
                </scope>
            </method>
            <method name="getEraIndex" type="int" line="2272">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                </params>
                <declaration name="era" type="Era" line="2273"/>
                <scope line="2274">
                    <scope line="2275"/>
                </scope>
            </method>
            <javadoc line="2282">
                Returns this object if it&apos;s normalized (all fields and time are
                  in sync). Otherwise, a cloned object is returned after calling
                  complete() in lenient mode.                
            </javadoc>
            <method name="getNormalizedCalendar" type="JapaneseImperialCalendar" line="2287">
                <comment line="2293">
                    Create a clone and normalize the calendar fields                    
                </comment>
                <declaration name="jc" type="JapaneseImperialCalendar" line="2288"/>
                <scope line="2289"/>
                <scope line="2291"/>
            </method>
            <javadoc line="2300">
                After adjustments such as add(MONTH), add(YEAR), we don&apos;t want the
                  month to jump around.  E.g., we don&apos;t want Jan 31 + 1 month to go to Mar
                  3, we want it to go to Feb 28.  Adjustments which might run into this
                  problem call this method to retain the proper month.                
            </javadoc>
            <method name="pinDayOfMonth" type="void" line="2306">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                </params>
                <comment line="2324">
                    Use an equivalent year.                    
                </comment>
                <comment line="2342">
                    restore the year.                    
                </comment>
                <comment line="2344">
                    Don&apos;t normalize date here so as not to cause underflow.                    
                </comment>
                <declaration name="year" type="int" line="2307"/>
                <declaration name="dom" type="int" line="2308"/>
                <scope line="2309">
                    <declaration name="monthLength" type="int" line="2312"/>
                    <scope line="2313"/>
                    <scope line="2315"/>
                </scope>
                <scope line="2319">
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="2320"/>
                    <declaration name="realDate" type="LocalGregorianCalendar.Date" line="2321"/>
                    <declaration name="tod" type="long" line="2322"/>
                    <declaration name="monthLength" type="int" line="2328"/>
                    <scope line="2329"/>
                    <scope line="2331">
                        <scope line="2332"/>
                        <scope line="2334"/>
                    </scope>
                    <scope line="2338"/>
                </scope>
            </method>
            <javadoc line="2347">
                Returns the new value after &apos;roll&apos;ing the specified value and amount.                
            </javadoc>
            <method name="getRolledValue" type="int" line="2350">
                <params>
                    <param name="value" type="int"/>
                    <param name="amount" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="range" type="int" line="2352"/>
                <declaration name="n" type="int" line="2354"/>
                <scope line="2355"/>
                <scope line="2357"/>
            </method>
            <javadoc line="2364">
                Returns the ERA.  We need a special method for this because the
                  default ERA is the current era, but a zero (unset) ERA means before Meiji.                
            </javadoc>
            <method name="internalGetEra" type="int" line="2368"/>
            <javadoc line="2372">
                Updates internal state.                
            </javadoc>
            <method name="readObject" type="void" line="2376">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <scope line="2378"/>
            </method>
        </class>
    </source>