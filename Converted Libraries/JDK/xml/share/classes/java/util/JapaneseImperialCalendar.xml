<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="sun.util.calendar.BaseCalendar"/>
        <import package="sun.util.calendar.CalendarDate"/>
        <import package="sun.util.calendar.CalendarSystem"/>
        <import package="sun.util.calendar.CalendarUtils"/>
        <import package="sun.util.calendar.Era"/>
        <import package="sun.util.calendar.Gregorian"/>
        <import package="sun.util.calendar.LocalGregorianCalendar"/>
        <import package="sun.util.calendar.ZoneInfo"/>
        <import package="sun.util.resources.LocaleData"/>
        <class name="JapaneseImperialCalendar" line="13">
            <extends class="Calendar"/>
            <javadoc line="13">
                &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; implements a Japanese
                  calendar system in which the imperial era-based year numbering is
                  supported from the Meiji era. The following are the eras supported
                  by this calendar system.
                  &lt;pre&gt;&lt;tt&gt;
                  ERA value   Era name    Since (in Gregorian)
                  ------------------------------------------------------
                  0       N/A         N/A
                  1       Meiji       1868-01-01 midnight local time
                  2       Taisho      1912-07-30 midnight local time
                  3       Showa       1926-12-25 midnight local time
                  4       Heisei      1989-01-08 midnight local time
                  ------------------------------------------------------
                  &lt;/tt&gt;&lt;/pre&gt;
                  &lt;p&gt;&lt;code&gt;ERA&lt;/code&gt; value 0 specifies the years before Meiji and
                  the Gregorian year values are used. Unlike {@link GregorianCalendar}, the Julian to Gregorian transition is not
                  supported because it doesn&apos;t make any sense to the Japanese
                  calendar systems used before Meiji. To represent the years before
                  Gregorian year 1, 0 and negative values are used. The Japanese
                  Imperial rescripts and government decrees don&apos;t specify how to deal
                  with time differences for applying the era transitions. This
                  calendar implementation assumes local time for all transitions.                
                <author>
                    Masayoshi Okutsu                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="BEFORE_MEIJI" type="int" line="40"/>
            <javadoc line="40">
                The ERA constant designating the era before Meiji.                
            </javadoc>
            <declaration name="MEIJI" type="int" line="44"/>
            <javadoc line="44">
                The ERA constant designating the Meiji era.                
            </javadoc>
            <declaration name="TAISHO" type="int" line="48"/>
            <javadoc line="48">
                The ERA constant designating the Taisho era.                
            </javadoc>
            <declaration name="SHOWA" type="int" line="52"/>
            <javadoc line="52">
                The ERA constant designating the Showa era.                
            </javadoc>
            <declaration name="HEISEI" type="int" line="56"/>
            <javadoc line="56">
                The ERA constant designating the Heisei era.                
            </javadoc>
            <declaration name="EPOCH_OFFSET" type="int" line="60"/>
            <declaration name="EPOCH_YEAR" type="int" line="61"/>
            <declaration name="ONE_SECOND" type="int" line="62"/>
            <declaration name="ONE_MINUTE" type="int" line="63"/>
            <declaration name="ONE_HOUR" type="int" line="64"/>
            <declaration name="ONE_DAY" type="long" line="65"/>
            <declaration name="ONE_WEEK" type="long" line="66"/>
            <declaration name="jcal" type="LocalGregorianCalendar" line="67"/>
            <declaration name="gcal" type="Gregorian" line="68"/>
            <declaration name="BEFORE_MEIJI_ERA" type="Era" line="69"/>
            <declaration name="eras" type="Era[]" line="70"/>
            <declaration name="sinceFixedDates" type="long[]" line="71"/>
            <declaration name="MIN_VALUES" type="int" line="72"/>
            <declaration name="LEAST_MAX_VALUES" type="int" line="73"/>
            <declaration name="MAX_VALUES" type="int" line="74"/>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <scope line="76">
                <declaration name="es" type="Era[]" line="77"/>
                <declaration name="length" type="int" line="78"/>
                <declaration name="index" type="int" line="81"/>
                <scope line="84">
                    <declaration name="d" type="CalendarDate" line="85"/>
                </scope>
                <declaration name="year" type="int" line="90"/>
                <declaration name="dayOfYear" type="int" line="91"/>
                <declaration name="date" type="CalendarDate" line="92"/>
                <scope line="93">
                    <declaration name="fd" type="long" line="94"/>
                    <declaration name="transitionDate" type="CalendarDate" line="95"/>
                    <declaration name="fdd" type="long" line="97"/>
                    <declaration name="lgd" type="LocalGregorianCalendar.Date" line="102"/>
                    <declaration name="y" type="int" line="103"/>
                </scope>
            </scope>
            <declaration name="jdate" type="LocalGregorianCalendar.Date" line="110"/>
            <javadoc line="110">
                jdate always has a sun.util.calendar.LocalGregorianCalendar.Date instance to
                  avoid overhead of creating it for each calculation.                
            </javadoc>
            <declaration name="zoneOffsets" type="int[]" line="115"/>
            <javadoc line="115">
                Temporary int[2] to get time zone offsets. zoneOffsets[0] gets
                  the GMT offset value and zoneOffsets[1] gets the daylight saving
                  value.                
            </javadoc>
            <declaration name="originalFields" type="int[]" line="121"/>
            <javadoc line="121">
                Temporary storage for saving original fields[] values in
                  non-lenient mode.                
            </javadoc>
            <javadoc line="126">
                Constructs a &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; based on the current time
                  in the given time zone with the given locale.                
                <param>
                    zone the given time zone.                    
                </param>
                <param>
                    aLocale the given locale.                    
                </param>
            </javadoc>
            <method name="JapaneseImperialCalendar" type="constructor" line="132">
                <params>
                    <param name="zone" type="TimeZone"/>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="137">
                Compares this &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; to the specified
                  &lt;code&gt;Object&lt;/code&gt;. The result is &lt;code&gt;true&lt;/code&gt; if and
                  only if the argument is a &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; object
                  that represents the same time value (millisecond offset from
                  the &lt;a href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;) under the same
                  &lt;code&gt;Calendar&lt;/code&gt; parameters.                
                <param>
                    obj the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if this object is equal to <code>obj</code>;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    Calendar#compareTo(Calendar)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="149">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="152">
                Generates the hash code for this
                  &lt;code&gt;JapaneseImperialCalendar&lt;/code&gt; object.                
            </javadoc>
            <method name="hashCode" type="int" line="156"/>
            <javadoc line="159">
                Adds the specified (signed) amount of time to the given calendar field,
                  based on the calendar&apos;s rules.
                  &lt;p&gt;&lt;em&gt;Add rule 1&lt;/em&gt;. The value of &lt;code&gt;field&lt;/code&gt;
                  after the call minus the value of &lt;code&gt;field&lt;/code&gt; before the
                  call is &lt;code&gt;amount&lt;/code&gt;, modulo any overflow that has occurred in
                  &lt;code&gt;field&lt;/code&gt;. Overflow occurs when a field value exceeds its
                  range and, as a result, the next larger field is incremented or
                  decremented and the field value is adjusted back into its range.&lt;/p&gt;
                  &lt;p&gt;&lt;em&gt;Add rule 2&lt;/em&gt;. If a smaller field is expected to be
                  invariant, but it is impossible for it to be equal to its
                  prior value because of changes in its minimum or maximum after
                  &lt;code&gt;field&lt;/code&gt; is changed, then its value is adjusted to be as close
                  as possible to its expected value. A smaller field represents a
                  smaller unit of time. &lt;code&gt;HOUR&lt;/code&gt; is a smaller field than
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;. No adjustment is made to smaller fields
                  that are not expected to be invariant. The calendar system
                  determines what fields are expected to be invariant.&lt;/p&gt;                
                <param>
                    field the calendar field.                    
                </param>
                <param>
                    amount the amount of date or time to be added to the field.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>field</code> is
                      <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
                      or if any calendar fields have out-of-range values in
                      non-lenient mode.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="184">
                <params>
                    <param name="field" type="int"/>
                    <param name="amount" type="int"/>
                </params>
                <scope line="185"/>
                <scope line="188"/>
                <scope line="192">
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="193"/>
                </scope>
                <scope line="201">
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="202"/>
                </scope>
                <scope line="210">
                    <declaration name="era" type="int" line="211"/>
                    <scope line="212"/>
                    <scope line="215"/>
                </scope>
                <scope line="220">
                    <declaration name="delta" type="long" line="221"/>
                    <declaration name="timeOfDay" type="long" line="222"/>
                    <scope line="250"/>
                    <declaration name="fd" type="long" line="254"/>
                    <scope line="262"/>
                    <scope line="266"/>
                    <declaration name="zoneOffset" type="int" line="271"/>
                    <scope line="274">
                        <declaration name="fd2" type="long" line="276"/>
                        <scope line="277"/>
                    </scope>
                </scope>
            </method>
            <method name="roll" type="void" line="283">
                <params>
                    <param name="field" type="int"/>
                    <param name="up" type="boolean"/>
                </params>
            </method>
            <javadoc line="286">
                Adds a signed amount to the specified calendar field without changing larger fields.
                  A negative roll amount means to subtract from field without changing
                  larger fields. If the specified amount is 0, this method performs nothing.
                  &lt;p&gt;This method calls {@link #complete()} before adding the
                  amount so that all the calendar fields are normalized. If there
                  is any calendar field having an out-of-range value in non-lenient mode, then an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.                
                <param>
                    field the calendar field.                    
                </param>
                <param>
                    amount the signed amount to add to <code>field</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>field</code> is
                      <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
                      or if any calendar fields have out-of-range values in
                      non-lenient mode.                    
                </exception>
                <see>
                    #roll(int,boolean)                    
                </see>
                <see>
                    #add(int,int)                    
                </see>
                <see>
                    #set(int,int)                    
                </see>
            </javadoc>
            <method name="roll" type="void" line="304">
                <params>
                    <param name="field" type="int"/>
                    <param name="amount" type="int"/>
                </params>
            </method>
            <method name="getDisplayName" type="String" line="642">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="643"/>
                <scope line="646"/>
                <declaration name="rb" type="ResourceBundle" line="649"/>
                <declaration name="name" type="String" line="650"/>
                <declaration name="key" type="String" line="651"/>
                <scope line="652">
                    <declaration name="strings" type="String[]" line="653"/>
                    <scope line="654">
                        <scope line="655"/>
                    </scope>
                    <scope line="659">
                        <declaration name="index" type="int" line="660"/>
                        <scope line="661">
                            <declaration name="era" type="Era" line="662"/>
                        </scope>
                        <scope line="665"/>
                    </scope>
                </scope>
            </method>
            <method name="getDisplayNames" type="Map<String,Integer>" line="673">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="674"/>
                <scope line="677">
                    <declaration name="shortNames" type="Map&lt;String,Integer&gt;" line="678"/>
                    <scope line="679"/>
                    <declaration name="longNames" type="Map&lt;String,Integer&gt;" line="682"/>
                    <scope line="683"/>
                    <scope line="686"/>
                </scope>
            </method>
            <method name="getDisplayNamesImpl" type="Map<String,Integer>" line="693">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="rb" type="ResourceBundle" line="694"/>
                <declaration name="key" type="String" line="695"/>
                <declaration name="map" type="Map&lt;String,Integer&gt;" line="696"/>
                <scope line="697">
                    <declaration name="strings" type="String[]" line="698"/>
                    <scope line="699">
                        <scope line="700"/>
                    </scope>
                    <scope line="704">
                        <declaration name="base" type="int" line="705"/>
                        <scope line="706"/>
                        <scope line="709">
                            <scope line="710">
                                <declaration name="era" type="Era" line="711"/>
                                <declaration name="name" type="String" line="712"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getKey" type="String" line="720">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                </params>
                <declaration name="className" type="String" line="721"/>
                <declaration name="key" type="StringBuilder" line="722"/>
                <scope line="726"/>
            </method>
            <javadoc line="746">
                Returns the minimum value for the given calendar field of this
                  &lt;code&gt;Calendar&lt;/code&gt; instance. The minimum value is
                  defined as the smallest value returned by the {@link Calendar#get(int) get} method for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the minimum value for the given calendar field.                    
                </return>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="760">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="763">
                Returns the maximum value for the given calendar field of this
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The maximum value is
                  defined as the largest value returned by the {@link Calendar#get(int) get} method for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the maximum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="777">
                <params>
                    <param name="field" type="int"/>
                </params>
                <scope line="780">
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="781"/>
                </scope>
            </method>
            <javadoc line="787">
                Returns the highest minimum value for the given calendar field
                  of this &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The highest
                  minimum value is defined as the largest value returned by{@link #getActualMinimum(int)} for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the highest minimum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getGreatestMinimum" type="int" line="801">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="804">
                Returns the lowest maximum value for the given calendar field
                  of this &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The lowest
                  maximum value is defined as the smallest value returned by{@link #getActualMaximum(int)} for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the lowest maximum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getLeastMaximum" type="int" line="818">
                <params>
                    <param name="field" type="int"/>
                </params>
                <scope line="821"/>
            </method>
            <javadoc line="827">
                Returns the minimum value that this calendar field could have,
                  taking into consideration the given time value and the current
                  values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and {@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the minimum of the given field for the time value of
                      this <code>JapaneseImperialCalendar</code>                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getActualMinimum" type="int" line="841">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="911">
                Returns the maximum value that this calendar field could have,
                  taking into consideration the given time value and the current
                  values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
                  and{@link Calendar#getTimeZone() getTimeZone} methods.
                  For example, if the date of this instance is Heisei 16February 1,
                  the actual maximum value of the &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field
                  is 29 because Heisei 16 is a leap year, and if the date of this
                  instance is Heisei 17 February 1, it&apos;s 28.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the maximum of the given field for the time value of
                      this <code>JapaneseImperialCalendar</code>                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
            </javadoc>
            <method name="getActualMaximum" type="int" line="929">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1139">
                Returns the millisecond offset from the beginning of the
                  year. In the year for Long.MIN_VALUE, it&apos;s a pseudo value
                  beyond the limit. The given CalendarDate object must have been
                  normalized before calling this method.                
            </javadoc>
            <method name="getYearOffsetInMillis" type="long" line="1145">
                <params>
                    <param name="date" type="CalendarDate"/>
                </params>
                <declaration name="t" type="long" line="1146"/>
            </method>
            <method name="clone" type="Object" line="1149">
                <declaration name="other" type="JapaneseImperialCalendar" line="1150"/>
            </method>
            <method name="getTimeZone" type="TimeZone" line="1156">
                <declaration name="zone" type="TimeZone" line="1157"/>
            </method>
            <method name="setTimeZone" type="void" line="1161">
                <params>
                    <param name="zone" type="TimeZone"/>
                </params>
            </method>
            <declaration name="cachedFixedDate" type="long" line="1165"/>
            <javadoc line="1165">
                The fixed date corresponding to jdate. If the value is
                  Long.MIN_VALUE, the fixed date value is unknown.                
            </javadoc>
            <javadoc line="1170">
                Converts the time value (millisecond offset from the &lt;a
                  href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;) to calendar field values.
                  The time is &lt;em&gt;not&lt;/em&gt;
                  recomputed first; to recompute the time, then the fields, call the
                  &lt;code&gt;complete&lt;/code&gt; method.                
                <see>
                    Calendar#complete                    
                </see>
            </javadoc>
            <method name="computeFields" type="void" line="1178"/>
            <javadoc line="1194">
                This computeFields implements the conversion from UTC
                  (millisecond offset from the Epoch) to calendar
                  field values. fieldMask specifies which fields to change the
                  setting state to COMPUTED, although all fields are set to
                  the correct values. This is required to fix 4685354.                
                <param>
                    fieldMask a bit mask to specify which fields to change
                      the setting state.                    
                </param>
                <param>
                    tzMask a bit mask to specify which time zone offset
                      fields to be used for time calculations                    
                </param>
                <return>
                    a new field mask that indicates what field values have
                      actually been set.                    
                </return>
            </javadoc>
            <method name="computeFields" type="int" line="1207">
                <params>
                    <param name="fieldMask" type="int"/>
                    <param name="tzMask" type="int"/>
                </params>
                <declaration name="zoneOffset" type="int" line="1208"/>
                <declaration name="tz" type="TimeZone" line="1209"/>
                <scope line="1210"/>
                <scope line="1213">
                    <scope line="1214"/>
                    <scope line="1217"/>
                </scope>
                <scope line="1223">
                    <scope line="1224"/>
                    <scope line="1227"/>
                </scope>
                <declaration name="fixedDate" type="long" line="1232"/>
                <declaration name="timeOfDay" type="int" line="1233"/>
                <scope line="1236"/>
                <scope line="1240">
                    <scope line="1241"/>
                </scope>
                <scope line="1247"/>
                <declaration name="era" type="int" line="1251"/>
                <declaration name="year" type="int" line="1252"/>
                <declaration name="mask" type="int" line="1255"/>
                <declaration name="month" type="int" line="1256"/>
                <declaration name="dayOfMonth" type="int" line="1257"/>
                <scope line="1258"/>
                <scope line="1264">
                    <scope line="1265">
                        <declaration name="hours" type="int" line="1266"/>
                        <declaration name="r" type="int" line="1270"/>
                    </scope>
                    <scope line="1276"/>
                </scope>
                <scope line="1286"/>
                <scope line="1291">
                    <declaration name="normalizedYear" type="int" line="1292"/>
                    <declaration name="transitionYear" type="boolean" line="1293"/>
                    <declaration name="dayOfYear" type="int" line="1294"/>
                    <declaration name="fixedDateJan1" type="long" line="1295"/>
                    <scope line="1296"/>
                    <scope line="1300">
                        <declaration name="dx" type="CalendarDate" line="1301"/>
                    </scope>
                    <scope line="1305"/>
                    <declaration name="fixedDateMonth1" type="long" line="1309"/>
                    <declaration name="weekOfYear" type="int" line="1312"/>
                    <scope line="1313">
                        <declaration name="fixedDec31" type="long" line="1314"/>
                        <declaration name="prevJan1" type="long" line="1315"/>
                        <declaration name="d" type="LocalGregorianCalendar.Date" line="1316"/>
                        <scope line="1317">
                            <scope line="1319"/>
                        </scope>
                        <scope line="1323">
                            <scope line="1324">
                                <scope line="1325">
                                    <declaration name="pd" type="CalendarDate" line="1326"/>
                                    <scope line="1327"/>
                                </scope>
                                <scope line="1331"/>
                            </scope>
                            <scope line="1337">
                                <scope line="1339"/>
                            </scope>
                        </scope>
                        <scope line="1344">
                            <declaration name="cd" type="CalendarDate" line="1345"/>
                        </scope>
                    </scope>
                    <scope line="1352">
                        <scope line="1353">
                            <scope line="1354">
                                <declaration name="nextJan1" type="long" line="1355"/>
                                <scope line="1356"/>
                                <declaration name="nextJan1st" type="long" line="1359"/>
                                <declaration name="ndays" type="int" line="1360"/>
                                <scope line="1361"/>
                            </scope>
                        </scope>
                        <scope line="1366">
                            <declaration name="d" type="LocalGregorianCalendar.Date" line="1367"/>
                            <declaration name="nextJan1" type="long" line="1368"/>
                            <scope line="1369"/>
                            <scope line="1374">
                                <declaration name="nextEraIndex" type="int" line="1375"/>
                                <declaration name="cd" type="CalendarDate" line="1376"/>
                            </scope>
                            <declaration name="nextJan1st" type="long" line="1382"/>
                            <declaration name="ndays" type="int" line="1383"/>
                            <scope line="1384"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1395">
                Returns the number of weeks in a period between fixedDay1 and
                  fixedDate. The getFirstDayOfWeek-getMinimalDaysInFirstWeek rule
                  is applied to calculate the number of weeks.                
                <param>
                    fixedDay1 the fixed date of the first day of the period                    
                </param>
                <param>
                    fixedDate the fixed date of the last day of the period                    
                </param>
                <return>
                    the number of weeks of the given period                    
                </return>
            </javadoc>
            <method name="getWeekNumber" type="int" line="1403">
                <params>
                    <param name="fixedDay1" type="long"/>
                    <param name="fixedDate" type="long"/>
                </params>
            </method>
            <javadoc line="1416">
                Converts calendar field values to the time value (millisecond
                  offset from the &lt;a href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;).                
                <exception>
                    IllegalArgumentException if any calendar fields are invalid.                    
                </exception>
            </javadoc>
            <method name="computeTime" type="void" line="1421">
                <scope line="1422">
                    <scope line="1423"/>
                    <scope line="1426">
                        <declaration name="value" type="int" line="1427"/>
                        <scope line="1428">
                            <scope line="1429"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="fieldMask" type="int" line="1436"/>
                <declaration name="year" type="int" line="1437"/>
                <declaration name="era" type="int" line="1438"/>
                <scope line="1439"/>
                <scope line="1443">
                    <scope line="1444"/>
                    <scope line="1448"/>
                </scope>
                <declaration name="timeOfDay" type="long" line="1453"/>
                <scope line="1454"/>
                <scope line="1457">
                    <scope line="1459"/>
                </scope>
                <declaration name="fixedDate" type="long" line="1469"/>
                <scope line="1471"/>
                <declaration name="millis" type="long" line="1476"/>
                <declaration name="zone" type="TimeZone" line="1477"/>
                <scope line="1478"/>
                <declaration name="tzMask" type="int" line="1481"/>
                <scope line="1482">
                    <scope line="1483"/>
                    <scope line="1486"/>
                </scope>
                <scope line="1490">
                    <scope line="1491"/>
                    <scope line="1494"/>
                </scope>
                <declaration name="mask" type="int" line="1500"/>
                <scope line="1501">
                    <scope line="1502">
                        <scope line="1503"/>
                        <scope line="1506">
                            <declaration name="wrongValue" type="int" line="1507"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1515">
                Computes the fixed date under either the Gregorian or the
                  Julian calendar, using the given year and the specified calendar fields.                
                <param>
                    cal the CalendarSystem to be used for the date calculation                    
                </param>
                <param>
                    year the normalized year number, with 0 indicating the
                      year 1 BCE, -1 indicating 2 BCE, etc.                    
                </param>
                <param>
                    fieldMask the calendar fields to be used for the date calculation                    
                </param>
                <return>
                    the fixed date                    
                </return>
                <see>
                    Calendar#selectFields                    
                </see>
            </javadoc>
            <method name="getFixedDate" type="long" line="1525">
                <params>
                    <param name="era" type="int"/>
                    <param name="year" type="int"/>
                    <param name="fieldMask" type="int"/>
                </params>
                <declaration name="month" type="int" line="1526"/>
                <declaration name="firstDayOfMonth" type="int" line="1527"/>
                <scope line="1528">
                    <scope line="1530"/>
                    <scope line="1534">
                        <declaration name="rem" type="int[]" line="1535"/>
                    </scope>
                </scope>
                <scope line="1540">
                    <scope line="1541">
                        <declaration name="d" type="CalendarDate" line="1542"/>
                    </scope>
                </scope>
                <scope line="1547">
                    <declaration name="dx" type="CalendarDate" line="1548"/>
                    <declaration name="m" type="int" line="1549"/>
                </scope>
                <declaration name="date" type="LocalGregorianCalendar.Date" line="1553"/>
                <declaration name="fixedDate" type="long" line="1557"/>
                <scope line="1558">
                    <scope line="1559">
                        <scope line="1560"/>
                    </scope>
                    <scope line="1565">
                        <scope line="1566">
                            <declaration name="firstDayOfWeek" type="long" line="1567"/>
                            <scope line="1568"/>
                            <scope line="1571"/>
                        </scope>
                        <scope line="1576">
                            <declaration name="dayOfWeek" type="int" line="1577"/>
                            <scope line="1578"/>
                            <scope line="1581"/>
                            <declaration name="dowim" type="int" line="1584"/>
                            <scope line="1585"/>
                            <scope line="1588"/>
                            <scope line="1591"/>
                            <scope line="1594">
                                <declaration name="lastDate" type="int" line="1595"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1601">
                    <scope line="1602">
                        <scope line="1603"/>
                    </scope>
                    <scope line="1609">
                        <declaration name="firstDayOfWeek" type="long" line="1610"/>
                        <scope line="1611"/>
                        <scope line="1614">
                            <declaration name="dayOfWeek" type="int" line="1615"/>
                            <scope line="1616"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1625">
                Returns the fixed date of the first day of the year (usually
                  January 1) before the specified date.                
                <param>
                    date the date for which the first day of the year is
                      calculated. The date has to be in the cut-over year.                    
                </param>
                <param>
                    fixedDate the fixed date representation of the date                    
                </param>
            </javadoc>
            <method name="getFixedDateJan1" type="long" line="1632">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                    <param name="fixedDate" type="long"/>
                </params>
                <declaration name="era" type="Era" line="1633"/>
                <scope line="1634">
                    <scope line="1635">
                        <declaration name="d" type="CalendarDate" line="1636"/>
                        <declaration name="fd" type="long" line="1637"/>
                        <scope line="1638"/>
                    </scope>
                </scope>
                <declaration name="d" type="CalendarDate" line="1644"/>
            </method>
            <javadoc line="1648">
                Returns the fixed date of the first date of the month (usually
                  the 1st of the month) before the specified date.                
                <param>
                    date the date for which the first day of the month is
                      calculated. The date must be in the era transition year.                    
                </param>
                <param>
                    fixedDate the fixed date representation of the date                    
                </param>
            </javadoc>
            <method name="getFixedDateMonth1" type="long" line="1655">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                    <param name="fixedDate" type="long"/>
                </params>
                <declaration name="eraIndex" type="int" line="1656"/>
                <scope line="1657">
                    <declaration name="transition" type="long" line="1658"/>
                    <scope line="1659"/>
                </scope>
            </method>
            <javadoc line="1665">
                Returns a LocalGregorianCalendar.Date produced from the specified fixed date.                
                <param>
                    fd the fixed date                    
                </param>
            </javadoc>
            <method name="getCalendarDate" type="LocalGregorianCalendar.Date" line="1669">
                <params>
                    <param name="fd" type="long"/>
                </params>
                <declaration name="d" type="LocalGregorianCalendar.Date" line="1670"/>
            </method>
            <javadoc line="1674">
                Returns the length of the specified month in the specified
                  Gregorian year. The year number must be normalized.                
                <see>
                    #isLeapYear(int)                    
                </see>
            </javadoc>
            <method name="monthLength" type="int" line="1679">
                <params>
                    <param name="month" type="int"/>
                    <param name="gregorianYear" type="int"/>
                </params>
            </method>
            <javadoc line="1682">
                Returns the length of the specified month in the year provided
                  by internalGet(YEAR).                
                <see>
                    #isLeapYear(int)                    
                </see>
            </javadoc>
            <method name="monthLength" type="int" line="1687">
                <params>
                    <param name="month" type="int"/>
                </params>
            </method>
            <method name="actualMonthLength" type="int" line="1691">
                <declaration name="length" type="int" line="1692"/>
                <declaration name="eraIndex" type="int" line="1693"/>
                <scope line="1694">
                    <declaration name="transitionFixedDate" type="long" line="1695"/>
                    <declaration name="d" type="CalendarDate" line="1696"/>
                    <scope line="1697"/>
                    <scope line="1700"/>
                </scope>
            </method>
            <javadoc line="1706">
                Returns the index to the new era if the given date is in a
                  transition month.  For example, if the give date is Heisei 1
                  (1989) January 20, then the era index for Heisei is
                  returned. Likewise, if the given date is Showa 64 (1989)
                  January 3, then the era index for Heisei is returned. If the
                  given date is not in any transition month, then -1 is returned.                
            </javadoc>
            <method name="getTransitionEraIndex" type="int" line="1714">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                </params>
                <declaration name="eraIndex" type="int" line="1715"/>
                <declaration name="transitionDate" type="CalendarDate" line="1716"/>
                <scope line="1717"/>
                <scope line="1720">
                    <scope line="1722"/>
                </scope>
            </method>
            <method name="isTransitionYear" type="boolean" line="1728">
                <params>
                    <param name="normalizedYear" type="int"/>
                </params>
                <scope line="1729">
                    <declaration name="transitionYear" type="int" line="1730"/>
                    <scope line="1731"/>
                    <scope line="1734"/>
                </scope>
            </method>
            <method name="getEraIndex" type="int" line="1740">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                </params>
                <declaration name="era" type="Era" line="1741"/>
                <scope line="1742">
                    <scope line="1743"/>
                </scope>
            </method>
            <javadoc line="1749">
                Returns this object if it&apos;s normalized (all fields and time are
                  in sync). Otherwise, a cloned object is returned after calling
                  complete() in lenient mode.                
            </javadoc>
            <method name="getNormalizedCalendar" type="JapaneseImperialCalendar" line="1754">
                <declaration name="jc" type="JapaneseImperialCalendar" line="1755"/>
                <scope line="1756"/>
                <scope line="1759"/>
            </method>
            <javadoc line="1766">
                After adjustments such as add(MONTH), add(YEAR), we don&apos;t want the
                  month to jump around.  E.g., we don&apos;t want Jan 31 + 1 month to go to Mar
                  3, we want it to go to Feb 28.  Adjustments which might run into this
                  problem call this method to retain the proper month.                
            </javadoc>
            <method name="pinDayOfMonth" type="void" line="1772">
                <params>
                    <param name="date" type="LocalGregorianCalendar.Date"/>
                </params>
                <declaration name="year" type="int" line="1773"/>
                <declaration name="dom" type="int" line="1774"/>
                <scope line="1775">
                    <declaration name="monthLength" type="int" line="1778"/>
                    <scope line="1779"/>
                    <scope line="1782"/>
                </scope>
                <scope line="1787">
                    <declaration name="d" type="LocalGregorianCalendar.Date" line="1788"/>
                    <declaration name="realDate" type="LocalGregorianCalendar.Date" line="1789"/>
                    <declaration name="tod" type="long" line="1790"/>
                    <declaration name="monthLength" type="int" line="1795"/>
                    <scope line="1796"/>
                    <scope line="1799">
                        <scope line="1800"/>
                        <scope line="1803"/>
                    </scope>
                    <scope line="1807"/>
                </scope>
            </method>
            <javadoc line="1813">
                Returns the new value after &apos;roll&apos;ing the specified value and amount.                
            </javadoc>
            <method name="getRolledValue" type="int" line="1816">
                <params>
                    <param name="value" type="int"/>
                    <param name="amount" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="1830">
                Returns the ERA.  We need a special method for this because the
                  default ERA is the current era, but a zero (unset) ERA means before Meiji.                
            </javadoc>
            <method name="internalGetEra" type="int" line="1834"/>
            <javadoc line="1837">
                Updates internal state.                
            </javadoc>
            <method name="readObject" type="void" line="1840">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <scope line="1842"/>
            </method>
        </class>
    </source>