<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="Deque">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Queue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <comment line="383">
                *** Queue methods ***                
            </comment>
            <comment line="483">
                *** Stack methods ***                
            </comment>
            <comment line="519">
                *** Collection methods ***                
            </comment>
            <javadoc line="38">
                A linear collection that supports element insertion and removal at
                  both ends.  The name &lt;i&gt;deque&lt;/i&gt; is short for &quot;double ended queue&quot;
                  and is usually pronounced &quot;deck&quot;.  Most &lt;tt&gt;Deque&lt;/tt&gt;
                  implementations place no fixed limits on the number of elements
                  they may contain, but this interface supports capacity-restricted
                  deques as well as those with no fixed size limit.
                  &lt;p&gt;This interface defines methods to access the elements at both
                  ends of the deque.  Methods are provided to insert, remove, and
                  examine the element.  Each of these methods exists in two forms:
                  one throws an exception if the operation fails, the other returns a
                  special value (either &lt;tt&gt;null&lt;/tt&gt; or &lt;tt&gt;false&lt;/tt&gt;, depending on
                  the operation).  The latter form of the insert operation is
                  designed specifically for use with capacity-restricted
                  &lt;tt&gt;Deque&lt;/tt&gt; implementations; in most implementations, insert
                  operations cannot fail.
                  &lt;p&gt;The twelve methods described above are summarized in the
                  following table:
                  &lt;p&gt;
                  &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER COLSPAN = 2&gt; &lt;b&gt;First Element (Head)&lt;/b&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER COLSPAN = 2&gt; &lt;b&gt;Last Element (Tail)&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Special value&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Special value&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Insert&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #addFirst addFirst(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerFirst offerFirst(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #addLast addLast(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerLast offerLast(e)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Remove&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #removeFirst removeFirst()}&lt;/td&gt;
                  &lt;td&gt;{@link #pollFirst pollFirst()}&lt;/td&gt;
                  &lt;td&gt;{@link #removeLast removeLast()}&lt;/td&gt;
                  &lt;td&gt;{@link #pollLast pollLast()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Examine&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #getFirst getFirst()}&lt;/td&gt;
                  &lt;td&gt;{@link #peekFirst peekFirst()}&lt;/td&gt;
                  &lt;td&gt;{@link #getLast getLast()}&lt;/td&gt;
                  &lt;td&gt;{@link #peekLast peekLast()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;This interface extends the {@link Queue} interface.  When a deque is
                  used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are
                  added at the end of the deque and removed from the beginning.  The methods
                  inherited from the &lt;tt&gt;Queue&lt;/tt&gt; interface are precisely equivalent to
                  &lt;tt&gt;Deque&lt;/tt&gt; methods as indicated in the following table:
                  &lt;p&gt;
                  &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;
                  &lt;tr&gt;
                  &lt;td ALIGN=CENTER&gt; &lt;b&gt;&lt;tt&gt;Queue&lt;/tt&gt; Method&lt;/b&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt; &lt;b&gt;Equivalent &lt;tt&gt;Deque&lt;/tt&gt; Method&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link java.util.Queue#add add(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #addLast addLast(e)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link java.util.Queue#offer offer(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerLast offerLast(e)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link java.util.Queue#remove remove()}&lt;/td&gt;
                  &lt;td&gt;{@link #removeFirst removeFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link java.util.Queue#poll poll()}&lt;/td&gt;
                  &lt;td&gt;{@link #pollFirst pollFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link java.util.Queue#element element()}&lt;/td&gt;
                  &lt;td&gt;{@link #getFirst getFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link java.util.Queue#peek peek()}&lt;/td&gt;
                  &lt;td&gt;{@link #peek peekFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;Deques can also be used as LIFO (Last-In-First-Out) stacks.  This
                  interface should be used in preference to the legacy {@link Stack} class.
                  When a deque is used as a stack, elements are pushed and popped from the
                  beginning of the deque.  Stack methods are precisely equivalent to
                  &lt;tt&gt;Deque&lt;/tt&gt; methods as indicated in the table below:
                  &lt;p&gt;
                  &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;
                  &lt;tr&gt;
                  &lt;td ALIGN=CENTER&gt; &lt;b&gt;Stack Method&lt;/b&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt; &lt;b&gt;Equivalent &lt;tt&gt;Deque&lt;/tt&gt; Method&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #push push(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #addFirst addFirst(e)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #pop pop()}&lt;/td&gt;
                  &lt;td&gt;{@link #removeFirst removeFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #peek peek()}&lt;/td&gt;
                  &lt;td&gt;{@link #peekFirst peekFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;Note that the {@link #peek peek} method works equally well when
                  a deque is used as a queue or a stack; in either case, elements are
                  drawn from the beginning of the deque.
                  &lt;p&gt;This interface provides two methods to remove interior
                  elements, {@link #removeFirstOccurrence removeFirstOccurrence} and{@link #removeLastOccurrence removeLastOccurrence}.
                  &lt;p&gt;Unlike the {@link List} interface, this interface does not
                  provide support for indexed access to elements.
                  &lt;p&gt;While &lt;tt&gt;Deque&lt;/tt&gt; implementations are not strictly required
                  to prohibit the insertion of null elements, they are strongly
                  encouraged to do so.  Users of any &lt;tt&gt;Deque&lt;/tt&gt; implementations
                  that do allow null elements are strongly encouraged &lt;i&gt;not&lt;/i&gt; to
                  take advantage of the ability to insert nulls.  This is so because
                  &lt;tt&gt;null&lt;/tt&gt; is used as a special return value by various methods
                  to indicated that the deque is empty.
                  &lt;p&gt;&lt;tt&gt;Deque&lt;/tt&gt; implementations generally do not define
                  element-based versions of the &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;hashCode&lt;/tt&gt;
                  methods, but instead inherit the identity-based versions from class
                  &lt;tt&gt;Object&lt;/tt&gt;.
                  &lt;p&gt;This interface is a member of the &lt;a
                  href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt; Java Collections
                  Framework&lt;/a&gt;.                
                <author>
                    Doug Lea                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.6                    
                </since>
                <param>
                    &lt;E&gt;
                       the type of elements held in this collection                    
                </param>
            </javadoc>
            <method name="addFirst" type="void" line="195"/>
            <javadoc line="195">
                Inserts the specified element at the front of this deque if it is
                  possible to do so immediately without violating capacity restrictions.
                  When using a capacity-restricted deque, it is generally preferable to
                  use method {@link #offerFirst}.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to capacity restrictions                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="addLast" type="void" line="213"/>
            <javadoc line="213">
                Inserts the specified element at the end of this deque if it is
                  possible to do so immediately without violating capacity restrictions.
                  When using a capacity-restricted deque, it is generally preferable to
                  use method {@link #offerLast}.
                  &lt;p&gt;This method is equivalent to {@link #add}.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to capacity restrictions                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="offerFirst" type="boolean" line="233"/>
            <javadoc line="233">
                Inserts the specified element at the front of this deque unless it would
                  violate capacity restrictions.  When using a capacity-restricted deque,
                  this method is generally preferable to the {@link #addFirst} method,
                  which can fail to insert an element only by throwing an exception.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the element was added to this deque, else
                      &lt;tt&gt;false&lt;/tt&gt;                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="offerLast" type="boolean" line="251"/>
            <javadoc line="251">
                Inserts the specified element at the end of this deque unless it would
                  violate capacity restrictions.  When using a capacity-restricted deque,
                  this method is generally preferable to the {@link #addLast} method,
                  which can fail to insert an element only by throwing an exception.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the element was added to this deque, else
                      &lt;tt&gt;false&lt;/tt&gt;                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="removeFirst" type="E" line="269"/>
            <javadoc line="269">
                Retrieves and removes the first element of this deque.  This method
                  differs from {@link #pollFirst pollFirst} only in that it throws an
                  exception if this deque is empty.                
                <return>
                    the head of this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="removeLast" type="E" line="279"/>
            <javadoc line="279">
                Retrieves and removes the last element of this deque.  This method
                  differs from {@link #pollLast pollLast} only in that it throws an
                  exception if this deque is empty.                
                <return>
                    the tail of this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="pollFirst" type="E" line="289"/>
            <javadoc line="289">
                Retrieves and removes the first element of this deque,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.                
                <return>
                    the head of this deque, or &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="pollLast" type="E" line="297"/>
            <javadoc line="297">
                Retrieves and removes the last element of this deque,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.                
                <return>
                    the tail of this deque, or &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="getFirst" type="E" line="305"/>
            <javadoc line="305">
                Retrieves, but does not remove, the first element of this deque.
                  This method differs from {@link #peekFirst peekFirst} only in that it
                  throws an exception if this deque is empty.                
                <return>
                    the head of this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="getLast" type="E" line="316"/>
            <javadoc line="316">
                Retrieves, but does not remove, the last element of this deque.
                  This method differs from {@link #peekLast peekLast} only in that it
                  throws an exception if this deque is empty.                
                <return>
                    the tail of this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="peekFirst" type="E" line="326"/>
            <javadoc line="326">
                Retrieves, but does not remove, the first element of this deque,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.                
                <return>
                    the head of this deque, or &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="peekLast" type="E" line="334"/>
            <javadoc line="334">
                Retrieves, but does not remove, the last element of this deque,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.                
                <return>
                    the tail of this deque, or &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="removeFirstOccurrence" type="boolean" line="342"/>
            <javadoc line="342">
                Removes the first occurrence of the specified element from this deque.
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the first element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;
                  (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if an element was removed as a result of this call                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this deque
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="removeLastOccurrence" type="boolean" line="362"/>
            <javadoc line="362">
                Removes the last occurrence of the specified element from this deque.
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the last element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;
                  (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if an element was removed as a result of this call                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this deque
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="384"/>
            <javadoc line="384">
                Inserts the specified element into the queue represented by this deque
                  (in other words, at the tail of this deque) if it is possible to do so
                  immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and throwing an
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; if no space is currently available.
                  When using a capacity-restricted deque, it is generally preferable to
                  use {@link #offer(Object) offer}.
                  &lt;p&gt;This method is equivalent to {@link #addLast}.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to capacity restrictions                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="408"/>
            <javadoc line="408">
                Inserts the specified element into the queue represented by this deque
                  (in other words, at the tail of this deque) if it is possible to do so
                  immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and &lt;tt&gt;false&lt;/tt&gt; if no space is currently
                  available.  When using a capacity-restricted deque, this method is
                  generally preferable to the {@link #add} method, which can fail to
                  insert an element only by throwing an exception.
                  &lt;p&gt;This method is equivalent to {@link #offerLast}.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the element was added to this deque, else
                      &lt;tt&gt;false&lt;/tt&gt;                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="431"/>
            <javadoc line="431">
                Retrieves and removes the head of the queue represented by this deque
                  (in other words, the first element of this deque).
                  This method differs from {@link #poll poll} only in that it throws an
                  exception if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #removeFirst()}.                
                <return>
                    the head of the queue represented by this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="poll" type="E" line="444"/>
            <javadoc line="444">
                Retrieves and removes the head of the queue represented by this deque
                  (in other words, the first element of this deque), or returns
                  &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #pollFirst()}.                
                <return>
                    the first element of this deque, or &lt;tt&gt;null&lt;/tt&gt; if
                      this deque is empty                    
                </return>
            </javadoc>
            <method name="element" type="E" line="456"/>
            <javadoc line="456">
                Retrieves, but does not remove, the head of the queue represented by
                  this deque (in other words, the first element of this deque).
                  This method differs from {@link #peek peek} only in that it throws an
                  exception if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #getFirst()}.                
                <return>
                    the head of the queue represented by this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="peek" type="E" line="469"/>
            <javadoc line="469">
                Retrieves, but does not remove, the head of the queue represented by
                  this deque (in other words, the first element of this deque), or
                  returns &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #peekFirst()}.                
                <return>
                    the head of the queue represented by this deque, or
                      &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="push" type="void" line="484"/>
            <javadoc line="484">
                Pushes an element onto the stack represented by this deque (in other
                  words, at the head of this deque) if it is possible to do so
                  immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and throwing an
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; if no space is currently available.
                  &lt;p&gt;This method is equivalent to {@link #addFirst}.                
                <param>
                    e the element to push                    
                </param>
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to capacity restrictions                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="pop" type="E" line="505"/>
            <javadoc line="505">
                Pops an element from the stack represented by this deque.  In other
                  words, removes and returns the first element of this deque.
                  &lt;p&gt;This method is equivalent to {@link #removeFirst()}.                
                <return>
                    the element at the front of this deque (which is the top
                      of the stack represented by this deque)                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="520"/>
            <javadoc line="520">
                Removes the first occurrence of the specified element from this deque.
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the first element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;
                  (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).
                  &lt;p&gt;This method is equivalent to {@link #removeFirstOccurrence}.                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if an element was removed as a result of this call                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this deque
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="contains" type="boolean" line="542"/>
            <javadoc line="542">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this deque contains
                  at least one element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this deque is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this deque contains the specified element                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this deque
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      deque does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="size" type="int" line="559"/>
            <javadoc line="559">
                Returns the number of elements in this deque.                
                <return>
                    the number of elements in this deque                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="566"/>
            <javadoc line="566">
                Returns an iterator over the elements in this deque in proper sequence.
                  The elements will be returned in order from first (head) to last (tail).                
                <return>
                    an iterator over the elements in this deque in proper sequence                    
                </return>
            </javadoc>
            <method name="descendingIterator" type="Iterator<E>" line="574"/>
            <javadoc line="574">
                Returns an iterator over the elements in this deque in reverse
                  sequential order.  The elements will be returned in order from
                  last (tail) to first (head).                
                <return>
                    an iterator over the elements in this deque in reverse
                      sequence                    
                </return>
            </javadoc>
        </interface>
    </source>