<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.util.zip"/>
        <import package="java.io"/>
        <import package="sun.security.util.ManifestEntryVerifier"/>
        <import package="sun.misc.JarIndex"/>
        <class name="JarInputStream" line="33">
            <extends class="ZipInputStream"/>
            <javadoc line="33">
                The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of
                  a JAR file from any input stream. It extends the class
                  &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; with support for reading
                  an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt;
                  can be used to store meta-information about the JAR file and its entries.                
                <author>
                    David Connelly                    
                </author>
                <see>
                    Manifest                    
                </see>
                <see>
                    java.util.zip.ZipInputStream                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="man" type="Manifest" line="47"/>
            <declaration name="first" type="JarEntry" line="48"/>
            <declaration name="jv" type="JarVerifier" line="49"/>
            <declaration name="mev" type="ManifestEntryVerifier" line="50"/>
            <declaration name="doVerify" type="boolean" line="51"/>
            <declaration name="tryManifest" type="boolean" line="52"/>
            <javadoc line="54">
                Creates a new &lt;code&gt;JarInputStream&lt;/code&gt; and reads the optional
                  manifest. If a manifest is present, also attempts to verify
                  the signatures if the JarInputStream is signed.                
                <param>
                    in the actual input stream                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="JarInputStream" type="constructor" line="61">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="65">
                Creates a new &lt;code&gt;JarInputStream&lt;/code&gt; and reads the optional
                  manifest. If a manifest is present and verify is true, also attempts
                  to verify the signatures if the JarInputStream is signed.                
                <param>
                    in the actual input stream                    
                </param>
                <param>
                    verify whether or not to verify the JarInputStream if
                      it is signed.                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="JarInputStream" type="constructor" line="75">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="verify" type="boolean"/>
                </params>
                <comment line="80">
                    This implementation assumes the META-INF/MANIFEST.MF entry
                     should be either the first or the second entry (when preceded
                     by the dir META-INF/). It skips the META-INF/ and then
                     &quot;consumes&quot; the MANIFEST.MF to initialize the Manifest object.                    
                </comment>
                <declaration name="e" type="JarEntry" line="83"/>
            </method>
            <method name="checkManifest" type="JarEntry" line="91">
                <params>
                    <param name="e" type="JarEntry"/>
                </params>
                <scope line="92">
                    <declaration name="bytes" type="byte" line="94"/>
                    <scope line="97"/>
                </scope>
            </method>
            <method name="getBytes" type="byte[]" line="108">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <declaration name="buffer" type="byte[]" line="109"/>
                <declaration name="baos" type="ByteArrayOutputStream" line="110"/>
                <declaration name="n" type="int" line="111"/>
                <scope line="112"/>
            </method>
            <javadoc line="118">
                Returns the &lt;code&gt;Manifest&lt;/code&gt; for this JAR file, or
                  &lt;code&gt;null&lt;/code&gt; if none.                
                <return>
                    the <code>Manifest</code> for this JAR file, or
                      <code>null</code> if none.                    
                </return>
            </javadoc>
            <method name="getManifest" type="Manifest" line="125"/>
            <javadoc line="129">
                Reads the next ZIP file entry and positions the stream at the
                  beginning of the entry data. If verification has been enabled,
                  any invalid signature detected while positioning the stream for
                  the next entry will result in an exception.                
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <exception>
                    SecurityException if any of the jar file entries
                      are incorrectly signed.                    
                </exception>
            </javadoc>
            <method name="getNextEntry" type="ZipEntry" line="139">
                <comment line="155">
                    At this point, we might have parsed all the meta-inf
                     entries and have nothing to verify. If we have
                     nothing to verify, get rid of the JarVerifier object.                    
                </comment>
                <declaration name="e" type="JarEntry" line="140"/>
                <scope line="141">
                    <scope line="143"/>
                </scope>
                <scope line="147"/>
                <scope line="153">
                    <scope line="157"/>
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="167">
                Reads the next JAR file entry and positions the stream at the
                  beginning of the entry data. If verification has been enabled,
                  any invalid signature detected while positioning the stream for
                  the next entry will result in an exception.                
                <return>
                    the next JAR file entry, or null if there are no more entries                    
                </return>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <exception>
                    SecurityException if any of the jar file entries
                      are incorrectly signed.                    
                </exception>
            </javadoc>
            <method name="getNextJarEntry" type="JarEntry" line="178"/>
            <javadoc line="182">
                Reads from the current JAR file entry into an array of bytes.
                  If &lt;code&gt;len&lt;/code&gt; is not zero, the method
                  blocks until some input is available; otherwise, no
                  bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.
                  If verification has been enabled, any invalid signature
                  on the current entry will be reported at some point before the
                  end of the entry is reached.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset in the destination array <code>b</code>                    
                </param>
                <param>
                    len the maximum number of bytes to read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the
                      entry is reached                    
                </return>
                <exception>
                    NullPointerException If <code>b</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>b.length - off</code>                    
                </exception>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <exception>
                    SecurityException if any of the jar file entries
                      are incorrectly signed.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="204">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="n" type="int" line="205"/>
                <scope line="206"/>
                <scope line="208"/>
                <scope line="211"/>
            </method>
            <javadoc line="217">
                Creates a new &lt;code&gt;JarEntry&lt;/code&gt; (&lt;code&gt;ZipEntry&lt;/code&gt;) for the
                  specified JAR file entry name. The manifest attributes of
                  the specified JAR file entry name will be copied to the new
                  &lt;CODE&gt;JarEntry&lt;/CODE&gt;.                
                <param>
                    name the name of the JAR/ZIP file entry                    
                </param>
                <return>
                    the <code>JarEntry</code> object just created                    
                </return>
            </javadoc>
            <method name="createZipEntry" type="ZipEntry" line="226">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="e" type="JarEntry" line="227"/>
                <scope line="228"/>
            </method>
        </class>
    </source>