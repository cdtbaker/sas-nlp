<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.io"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.net.URL"/>
        <import package="java.util"/>
        <import package="java.util.zip"/>
        <import package="java.security.CodeSigner"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.CodeSource"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.security.util.ManifestEntryVerifier"/>
        <import package="sun.misc.SharedSecrets"/>
        <class name="JarFile" line="14">
            <extends class="ZipFile"/>
            <javadoc line="14">
                The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file
                  from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;.
                  It extends the class &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; with support
                  for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The
                  &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the
                  jar file and its entries.
                  &lt;p&gt; Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor
                  or method in this class will cause a {@link NullPointerException} to be
                  thrown.                
                <author>
                    David Connelly                    
                </author>
                <see>
                    Manifest                    
                </see>
                <see>
                    java.util.zip.ZipFile                    
                </see>
                <see>
                    java.util.jar.JarEntry                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="manRef" type="SoftReference&lt;Manifest&gt;" line="31"/>
            <declaration name="manEntry" type="JarEntry" line="32"/>
            <declaration name="jv" type="JarVerifier" line="33"/>
            <declaration name="jvInitialized" type="boolean" line="34"/>
            <declaration name="verify" type="boolean" line="35"/>
            <declaration name="computedHasClassPathAttribute" type="boolean" line="36"/>
            <declaration name="hasClassPathAttribute" type="boolean" line="37"/>
            <scope line="38"/>
            <declaration name="MANIFEST_NAME" type="String" line="41"/>
            <javadoc line="41">
                The JAR manifest file name.                
            </javadoc>
            <javadoc line="45">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  file &lt;code&gt;name&lt;/code&gt;. The &lt;code&gt;JarFile&lt;/code&gt; will be verified if
                  it is signed.                
                <param>
                    name the name of the jar file to be opened for reading                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager                    
                </throws>
            </javadoc>
            <method name="JarFile" type="constructor" line="54">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="57">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  file &lt;code&gt;name&lt;/code&gt;.                
                <param>
                    name the name of the jar file to be opened for reading                    
                </param>
                <param>
                    verify whether or not to verify the jar file if
                      it is signed.                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager                    
                </throws>
            </javadoc>
            <method name="JarFile" type="constructor" line="67">
                <params>
                    <param name="name" type="String"/>
                    <param name="verify" type="boolean"/>
                </params>
            </method>
            <javadoc line="70">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  &lt;code&gt;File&lt;/code&gt; object. The &lt;code&gt;JarFile&lt;/code&gt; will be verified if
                  it is signed.                
                <param>
                    file the jar file to be opened for reading                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager                    
                </throws>
            </javadoc>
            <method name="JarFile" type="constructor" line="79">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="82">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  &lt;code&gt;File&lt;/code&gt; object.                
                <param>
                    file the jar file to be opened for reading                    
                </param>
                <param>
                    verify whether or not to verify the jar file if
                      it is signed.                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager.                    
                </throws>
            </javadoc>
            <method name="JarFile" type="constructor" line="92">
                <params>
                    <param name="file" type="File"/>
                    <param name="verify" type="boolean"/>
                </params>
            </method>
            <javadoc line="95">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  &lt;code&gt;File&lt;/code&gt; object in the specified mode.  The mode argument
                  must be either &lt;tt&gt;OPEN_READ&lt;/tt&gt; or &lt;tt&gt;OPEN_READ | OPEN_DELETE&lt;/tt&gt;.                
                <param>
                    file the jar file to be opened for reading                    
                </param>
                <param>
                    verify whether or not to verify the jar file if
                      it is signed.                    
                </param>
                <param>
                    mode the mode in which the file is to be opened                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the <tt>mode</tt> argument is invalid                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JarFile" type="constructor" line="109">
                <params>
                    <param name="file" type="File"/>
                    <param name="verify" type="boolean"/>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="113">
                Returns the jar file manifest, or &lt;code&gt;null&lt;/code&gt; if none.                
                <return>
                    the jar file manifest, or <code>null</code> if none                    
                </return>
                <throws>
                    IllegalStateExceptionmay be thrown if the jar file has been closed                    
                </throws>
            </javadoc>
            <method name="getManifest" type="Manifest" line="118"/>
            <method name="getManifestFromReference" type="Manifest" line="121">
                <declaration name="man" type="Manifest" line="122"/>
                <scope line="123">
                    <declaration name="manEntry" type="JarEntry" line="124"/>
                    <scope line="125">
                        <scope line="126">
                            <declaration name="b" type="byte[]" line="127"/>
                            <scope line="129"/>
                        </scope>
                        <scope line="133"/>
                    </scope>
                </scope>
            </method>
            <method name="getMetaInfEntryNames" type="String[]" line="141"/>
            <javadoc line="142">
                Returns the &lt;code&gt;JarEntry&lt;/code&gt; for the given entry name or
                  &lt;code&gt;null&lt;/code&gt; if not found.                
                <param>
                    name the jar file entry name                    
                </param>
                <return>
                    the <code>JarEntry</code> for the given entry name or
                      <code>null</code> if not found.                    
                </return>
                <throws>
                    IllegalStateExceptionmay be thrown if the jar file has been closed                    
                </throws>
                <see>
                    java.util.jar.JarEntry                    
                </see>
            </javadoc>
            <method name="getJarEntry" type="JarEntry" line="151">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="154">
                Returns the &lt;code&gt;ZipEntry&lt;/code&gt; for the given entry name or
                  &lt;code&gt;null&lt;/code&gt; if not found.                
                <param>
                    name the jar file entry name                    
                </param>
                <return>
                    the <code>ZipEntry</code> for the given entry name or
                      <code>null</code> if not found                    
                </return>
                <throws>
                    IllegalStateExceptionmay be thrown if the jar file has been closed                    
                </throws>
                <see>
                    java.util.zip.ZipEntry                    
                </see>
            </javadoc>
            <method name="getEntry" type="ZipEntry" line="163">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="ze" type="ZipEntry" line="164"/>
                <scope line="165"/>
            </method>
            <javadoc line="170">
                Returns an enumeration of the zip file entries.                
            </javadoc>
            <method name="entries" type="Enumeration<JarEntry>" line="173">
                <declaration name="enum_" type="Enumeration" line="174"/>
                <anonymous_class line="175">
                    <method name="hasMoreElements" type="boolean" line="176"/>
                    <method name="nextElement" type="JarFileEntry" line="179">
                        <declaration name="ze" type="ZipEntry" line="180"/>
                    </method>
                </anonymous_class>
            </method>
            <class name="JarFileEntry" line="186">
                <extends class="JarEntry"/>
                <method name="JarFileEntry" type="constructor" line="187">
                    <params>
                        <param name="ze" type="ZipEntry"/>
                    </params>
                </method>
                <method name="getAttributes" type="Attributes" line="190">
                    <declaration name="man" type="Manifest" line="191"/>
                    <scope line="192"/>
                    <scope line="195"/>
                </method>
                <method name="getCertificates" type="Certificate[]" line="199">
                    <scope line="200"/>
                    <scope line="203"/>
                    <scope line="206"/>
                </method>
                <method name="getCodeSigners" type="CodeSigner[]" line="211">
                    <scope line="212"/>
                    <scope line="215"/>
                    <scope line="218"/>
                </method>
            </class>
            <method name="maybeInstantiateVerifier" type="void" line="224">
                <scope line="225"/>
                <scope line="228">
                    <declaration name="names" type="String[]" line="229"/>
                    <scope line="230">
                        <scope line="231">
                            <declaration name="name" type="String" line="232"/>
                            <scope line="233"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="initializeVerifier" type="void" line="242">
                <declaration name="mev" type="ManifestEntryVerifier" line="243"/>
                <scope line="244">
                    <declaration name="names" type="String[]" line="245"/>
                    <scope line="246">
                        <scope line="247">
                            <declaration name="e" type="JarEntry" line="248"/>
                            <scope line="249">
                                <scope line="250"/>
                                <declaration name="b" type="byte[]" line="253"/>
                                <scope line="254"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="263"/>
                <scope line="267">
                    <scope line="269"/>
                    <scope line="272">
                        <scope line="273"/>
                    </scope>
                </scope>
            </method>
            <method name="getBytes" type="byte[]" line="281">
                <params>
                    <param name="ze" type="ZipEntry"/>
                </params>
            </method>
            <javadoc line="288">
                Returns an input stream for reading the contents of the specified
                  zip file entry.                
                <param>
                    ze the zip file entry                    
                </param>
                <return>
                    an input stream for reading the contents of the specified
                      zip file entry                    
                </return>
                <throws>
                    ZipException if a zip file format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if any of the jar file entries
                      are incorrectly signed.                    
                </throws>
                <throws>
                    IllegalStateExceptionmay be thrown if the jar file has been closed                    
                </throws>
            </javadoc>
            <method name="getInputStream" type="InputStream" line="300">
                <params>
                    <param name="ze" type="ZipEntry"/>
                </params>
                <scope line="302"/>
                <scope line="305"/>
            </method>
            <declaration name="lastOcc" type="int[]" line="312"/>
            <declaration name="optoSft" type="int[]" line="313"/>
            <declaration name="src" type="char[]" line="314"/>
            <scope line="315"/>
            <method name="getManEntry" type="JarEntry" line="329">
                <scope line="330">
                    <scope line="332">
                        <declaration name="names" type="String[]" line="333"/>
                        <scope line="334">
                            <scope line="335">
                                <scope line="336"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="hasClassPathAttribute" type="boolean" line="346"/>
            <declaration name="javaHome" type="String" line="377"/>
            <declaration name="jarNames" type="String[]" line="378"/>
            <method name="isKnownToNotHaveClassPathAttribute" type="boolean" line="379">
                <scope line="380"/>
                <scope line="383">
                    <declaration name="names" type="String[]" line="384"/>
                    <declaration name="fileSep" type="String" line="385"/>
                    <declaration name="i" type="int" line="386"/>
                </scope>
                <declaration name="name" type="String" line="399"/>
                <declaration name="localJavaHome" type="String" line="400"/>
                <scope line="401">
                    <declaration name="names" type="String[]" line="402"/>
                    <scope line="403">
                        <scope line="404"/>
                    </scope>
                </scope>
            </method>
            <method name="ensureInitialization" type="void" line="411">
                <scope line="412"/>
                <scope line="415"/>
                <scope line="418"/>
            </method>
            <method name="newEntry" type="JarEntry" line="423">
                <params>
                    <param name="ze" type="ZipEntry"/>
                </params>
            </method>
            <method name="entryNames" type="Enumeration<String>" line="426">
                <params>
                    <param name="cs" type="CodeSource[]"/>
                </params>
                <scope line="428"/>
                <declaration name="includeUnsigned" type="boolean" line="431"/>
                <scope line="432">
                    <scope line="433"/>
                </scope>
                <scope line="438"/>
                <scope line="441">
                    <anonymous_class line="442">
                        <method name="hasMoreElements" type="boolean" line="443"/>
                        <method name="nextElement" type="String" line="446"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="453">
                Returns an enumeration of the zip file entries
                  excluding internal JAR mechanism entries and including
                  signed entries missing from the ZIP directory.                
            </javadoc>
            <method name="entries2" type="Enumeration<JarEntry>" line="458">
                <scope line="460"/>
                <declaration name="enum_" type="Enumeration" line="463"/>
                <anonymous_class line="464">
                    <declaration name="entry" type="ZipEntry" line="465"/>
                    <method name="hasMoreElements" type="boolean" line="466">
                        <scope line="467"/>
                        <scope line="470">
                            <declaration name="ze" type="ZipEntry" line="471"/>
                            <scope line="472"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="JarFileEntry" line="480">
                        <scope line="481">
                            <declaration name="ze" type="ZipEntry" line="482"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getCodeSources" type="CodeSource[]" line="491">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <scope line="493"/>
                <declaration name="unsigned" type="Enumeration" line="496"/>
                <scope line="497"/>
                <scope line="500"/>
            </method>
            <method name="unsignedEntryNames" type="Enumeration<String>" line="504">
                <declaration name="entries" type="Enumeration" line="505"/>
                <anonymous_class line="506">
                    <declaration name="name" type="String" line="507"/>
                    <method name="hasMoreElements" type="boolean" line="508">
                        <scope line="509"/>
                        <scope line="512">
                            <declaration name="value" type="String" line="513"/>
                            <declaration name="e" type="ZipEntry" line="514"/>
                            <scope line="516"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="String" line="524">
                        <scope line="525">
                            <declaration name="value" type="String" line="526"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getCodeSource" type="CodeSource" line="535">
                <params>
                    <param name="url" type="URL"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="537">
                    <scope line="538">
                        <declaration name="cs" type="CodeSource" line="539"/>
                        <declaration name="je" type="JarEntry" line="540"/>
                        <scope line="541"/>
                        <scope line="544"/>
                    </scope>
                    <scope line="549"/>
                </scope>
            </method>
            <method name="setEagerValidation" type="void" line="555">
                <params>
                    <param name="eager" type="boolean"/>
                </params>
                <scope line="556"/>
                <scope line="559"/>
                <scope line="562"/>
            </method>
            <method name="getManifestDigests" type="List" line="566">
                <scope line="568"/>
            </method>
        </class>
    </source>