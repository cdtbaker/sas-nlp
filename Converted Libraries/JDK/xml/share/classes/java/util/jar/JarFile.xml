<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.io"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.net.URL"/>
        <import package="java.util"/>
        <import package="java.util.zip"/>
        <import package="java.security.CodeSigner"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.CodeSource"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.security.util.ManifestEntryVerifier"/>
        <import package="sun.misc.SharedSecrets"/>
        <class name="JarFile" line="41">
            <extends class="ZipFile"/>
            <comment line="70">
                Set up JavaUtilJarAccess in SharedSecrets                
            </comment>
            <comment line="285">
                Ensures that the JarVerifier has been created if one is
                 necessary (i.e., the jar appears to be signed.) This is done as
                 a quick check to avoid processing of the manifest for unsigned
                 jars.                
            </comment>
            <comment line="320">
                Initializes the verifier object by reading all the manifest
                 entries and passing them to the verifier.                
            </comment>
            <comment line="374">
                Reads all the bytes for a given entry. Used to process the
                 META-INF files.                
            </comment>
            <comment line="425">
                Statics for hand-coded Boyer-Moore search in hasClassPathAttribute()
                 The bad character shift for &quot;class-path&quot;                
            </comment>
            <comment line="428">
                The good suffix shift for &quot;class-path&quot;                
            </comment>
            <comment line="430">
                Initialize the shift arrays to search for &quot;class-path&quot;                
            </comment>
            <comment line="470">
                Returns true iff this jar file has a manifest with a class path
                 attribute. Returns false if there is no manifest or the manifest
                 does not contain a &quot;Class-Path&quot; attribute. Currently exported to
                 core libraries via sun.misc.SharedSecrets.                
            </comment>
            <javadoc line="41">
                The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file
                  from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;.
                  It extends the class &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; with support
                  for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The
                  &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the
                  jar file and its entries.
                  &lt;p&gt; Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor
                  or method in this class will cause a {@link NullPointerException} to be
                  thrown.                
                <author>
                    David Connelly                    
                </author>
                <see>
                    Manifest                    
                </see>
                <see>
                    java.util.zip.ZipFile                    
                </see>
                <see>
                    java.util.jar.JarEntry                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="manRef" type="SoftReference&lt;Manifest&gt;" line="61"/>
            <declaration name="manEntry" type="JarEntry" line="62"/>
            <declaration name="jv" type="JarVerifier" line="63"/>
            <declaration name="jvInitialized" type="boolean" line="64"/>
            <declaration name="verify" type="boolean" line="65"/>
            <declaration name="computedHasClassPathAttribute" type="boolean" line="66"/>
            <declaration name="hasClassPathAttribute" type="boolean" line="67"/>
            <scope line="70"/>
            <declaration name="MANIFEST_NAME" type="String" line="74"/>
            <javadoc line="74">
                The JAR manifest file name.                
            </javadoc>
            <javadoc line="79">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  file &lt;code&gt;name&lt;/code&gt;. The &lt;code&gt;JarFile&lt;/code&gt; will be verified if
                  it is signed.                
                <param>
                    name the name of the jar file to be opened for reading                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager                    
                </throws>
            </javadoc>
            <method name="JarFile" type="constructor" line="88">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="92">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  file &lt;code&gt;name&lt;/code&gt;.                
                <param>
                    name the name of the jar file to be opened for reading                    
                </param>
                <param>
                    verify whether or not to verify the jar file if
                      it is signed.                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager                    
                </throws>
            </javadoc>
            <method name="JarFile" type="constructor" line="102">
                <params>
                    <param name="name" type="String"/>
                    <param name="verify" type="boolean"/>
                </params>
            </method>
            <javadoc line="106">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  &lt;code&gt;File&lt;/code&gt; object. The &lt;code&gt;JarFile&lt;/code&gt; will be verified if
                  it is signed.                
                <param>
                    file the jar file to be opened for reading                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager                    
                </throws>
            </javadoc>
            <method name="JarFile" type="constructor" line="115">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="120">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  &lt;code&gt;File&lt;/code&gt; object.                
                <param>
                    file the jar file to be opened for reading                    
                </param>
                <param>
                    verify whether or not to verify the jar file if
                      it is signed.                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager.                    
                </throws>
            </javadoc>
            <method name="JarFile" type="constructor" line="130">
                <params>
                    <param name="file" type="File"/>
                    <param name="verify" type="boolean"/>
                </params>
            </method>
            <javadoc line="135">
                Creates a new &lt;code&gt;JarFile&lt;/code&gt; to read from the specified
                  &lt;code&gt;File&lt;/code&gt; object in the specified mode.  The mode argument
                  must be either &lt;tt&gt;OPEN_READ&lt;/tt&gt; or &lt;tt&gt;OPEN_READ | OPEN_DELETE&lt;/tt&gt;.                
                <param>
                    file the jar file to be opened for reading                    
                </param>
                <param>
                    verify whether or not to verify the jar file if
                      it is signed.                    
                </param>
                <param>
                    mode the mode in which the file is to be opened                    
                </param>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the <tt>mode</tt> argument is invalid                    
                </throws>
                <throws>
                    SecurityException if access to the file is denied
                      by the SecurityManager                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JarFile" type="constructor" line="151">
                <params>
                    <param name="file" type="File"/>
                    <param name="verify" type="boolean"/>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="156">
                Returns the jar file manifest, or &lt;code&gt;null&lt;/code&gt; if none.                
                <return>
                    the jar file manifest, or <code>null</code> if none                    
                </return>
                <throws>
                    IllegalStateExceptionmay be thrown if the jar file has been closed                    
                </throws>
            </javadoc>
            <method name="getManifest" type="Manifest" line="164"/>
            <method name="getManifestFromReference" type="Manifest" line="168">
                <comment line="176">
                    If found then load the manifest                    
                </comment>
                <declaration name="man" type="Manifest" line="169"/>
                <scope line="171">
                    <declaration name="manEntry" type="JarEntry" line="173"/>
                    <scope line="176">
                        <scope line="177">
                            <declaration name="b" type="byte[]" line="178"/>
                            <scope line="180"/>
                        </scope>
                        <scope line="183"/>
                    </scope>
                </scope>
            </method>
            <method name="getMetaInfEntryNames" type="String[]" line="192"/>
            <javadoc line="194">
                Returns the &lt;code&gt;JarEntry&lt;/code&gt; for the given entry name or
                  &lt;code&gt;null&lt;/code&gt; if not found.                
                <param>
                    name the jar file entry name                    
                </param>
                <return>
                    the <code>JarEntry</code> for the given entry name or
                      <code>null</code> if not found.                    
                </return>
                <throws>
                    IllegalStateExceptionmay be thrown if the jar file has been closed                    
                </throws>
                <see>
                    java.util.jar.JarEntry                    
                </see>
            </javadoc>
            <method name="getJarEntry" type="JarEntry" line="207">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="211">
                Returns the &lt;code&gt;ZipEntry&lt;/code&gt; for the given entry name or
                  &lt;code&gt;null&lt;/code&gt; if not found.                
                <param>
                    name the jar file entry name                    
                </param>
                <return>
                    the <code>ZipEntry</code> for the given entry name or
                      <code>null</code> if not found                    
                </return>
                <throws>
                    IllegalStateExceptionmay be thrown if the jar file has been closed                    
                </throws>
                <see>
                    java.util.zip.ZipEntry                    
                </see>
            </javadoc>
            <method name="getEntry" type="ZipEntry" line="224">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="ze" type="ZipEntry" line="225"/>
                <scope line="226"/>
            </method>
            <javadoc line="232">
                Returns an enumeration of the zip file entries.                
            </javadoc>
            <method name="entries" type="Enumeration<JarEntry>" line="235">
                <declaration name="enum_" type="Enumeration" line="236"/>
                <anonymous_class line="237">
                    <method name="hasMoreElements" type="boolean" line="238"/>
                    <method name="nextElement" type="JarFileEntry" line="241">
                        <declaration name="ze" type="ZipEntry" line="242"/>
                    </method>
                </anonymous_class>
            </method>
            <class name="JarFileEntry" line="248">
                <extends class="JarEntry"/>
                <method name="JarFileEntry" type="constructor" line="249">
                    <params>
                        <param name="ze" type="ZipEntry"/>
                    </params>
                </method>
                <method name="getAttributes" type="Attributes" line="252">
                    <declaration name="man" type="Manifest" line="253"/>
                    <scope line="254"/>
                    <scope line="256"/>
                </method>
                <method name="getCertificates" type="Certificate[]" line="260">
                    <scope line="261"/>
                    <scope line="263"/>
                    <scope line="266"/>
                </method>
                <method name="getCodeSigners" type="CodeSigner[]" line="271">
                    <scope line="272"/>
                    <scope line="274"/>
                    <scope line="277"/>
                </method>
            </class>
            <method name="maybeInstantiateVerifier" type="void" line="290">
                <comment line="305">
                    Assume since we found a signature-related file
                     that the jar is signed and that we therefore
                     need a JarVerifier and Manifest                    
                </comment>
                <comment line="313">
                    No signature-related files; don&apos;t instantiate a
                     verifier                    
                </comment>
                <scope line="291"/>
                <scope line="295">
                    <declaration name="names" type="String[]" line="296"/>
                    <scope line="297">
                        <scope line="298">
                            <declaration name="name" type="String" line="299"/>
                            <scope line="303"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="initializeVerifier" type="void" line="323">
                <comment line="327">
                    Verify &quot;META-INF/&quot; entries...                    
                </comment>
                <comment line="348">
                    if we had an error parsing any blocks, just
                     treat the jar file as being unsigned                    
                </comment>
                <comment line="354">
                    if after initializing the verifier we have nothing
                     signed, we null it out.                    
                </comment>
                <declaration name="mev" type="ManifestEntryVerifier" line="324"/>
                <scope line="327">
                    <declaration name="names" type="String[]" line="328"/>
                    <scope line="329">
                        <scope line="330">
                            <declaration name="e" type="JarEntry" line="331"/>
                            <scope line="332">
                                <scope line="333"/>
                                <declaration name="b" type="byte[]" line="337"/>
                                <scope line="338"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="346"/>
                <scope line="356">
                    <scope line="359"/>
                    <scope line="363">
                        <scope line="364"/>
                    </scope>
                </scope>
            </method>
            <method name="getBytes" type="byte[]" line="377">
                <params>
                    <param name="ze" type="ZipEntry"/>
                </params>
                <declaration name="b" type="byte[]" line="378"/>
                <scope line="379"/>
            </method>
            <javadoc line="385">
                Returns an input stream for reading the contents of the specified
                  zip file entry.                
                <param>
                    ze the zip file entry                    
                </param>
                <return>
                    an input stream for reading the contents of the specified
                      zip file entry                    
                </return>
                <throws>
                    ZipException if a zip file format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if any of the jar file entries
                      are incorrectly signed.                    
                </throws>
                <throws>
                    IllegalStateExceptionmay be thrown if the jar file has been closed                    
                </throws>
            </javadoc>
            <method name="getInputStream" type="InputStream" line="400">
                <params>
                    <param name="ze" type="ZipEntry"/>
                </params>
                <comment line="409">
                    could be set to null after a call to
                     initializeVerifier if we have nothing to
                     verify                    
                </comment>
                <comment line="416">
                    wrap a verifier stream around the real stream                    
                </comment>
                <scope line="402"/>
                <scope line="405"/>
            </method>
            <declaration name="lastOcc" type="int[]" line="426"/>
            <declaration name="optoSft" type="int[]" line="428"/>
            <declaration name="src" type="char[]" line="430"/>
            <scope line="431"/>
            <method name="getManEntry" type="JarEntry" line="447">
                <comment line="450">
                    First look up manifest entry using standard name                    
                </comment>
                <comment line="453">
                    If not found, then iterate through all the &quot;META-INF/&quot;
                     entries to find a match.                    
                </comment>
                <scope line="448">
                    <scope line="451">
                        <declaration name="names" type="String[]" line="454"/>
                        <scope line="455">
                            <scope line="456">
                                <scope line="458"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="hasClassPathAttribute" type="boolean" line="473">
                <scope line="474"/>
                <scope line="479">
                    <declaration name="manEntry" type="JarEntry" line="480"/>
                    <scope line="481">
                        <declaration name="b" type="byte[]" line="482"/>
                        <scope line="484"/>
                        <declaration name="last" type="int" line="488"/>
                        <declaration name="i" type="int" line="489"/>
                        <scope line="491">
                            <scope line="492">
                                <declaration name="c" type="char" line="493"/>
                                <scope line="495"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="javaHome" type="String" line="509"/>
            <declaration name="jarNames" type="String[]" line="510"/>
            <method name="isKnownToNotHaveClassPathAttribute" type="boolean" line="511">
                <comment line="513">
                    Optimize away even scanning of manifest for jar files we
                     deliver which don&apos;t have a class-path attribute. If one of
                     these jars is changed to include such an attribute this code
                     must be changed.                    
                </comment>
                <scope line="516"/>
                <scope line="520">
                    <declaration name="names" type="String[]" line="521"/>
                    <declaration name="fileSep" type="String" line="522"/>
                    <declaration name="i" type="int" line="523"/>
                </scope>
                <declaration name="name" type="String" line="537"/>
                <declaration name="localJavaHome" type="String" line="538"/>
                <scope line="539">
                    <declaration name="names" type="String[]" line="540"/>
                    <scope line="541">
                        <scope line="542"/>
                    </scope>
                </scope>
            </method>
            <method name="ensureInitialization" type="void" line="550">
                <scope line="551"/>
                <scope line="553"/>
                <scope line="556"/>
            </method>
            <method name="newEntry" type="JarEntry" line="562">
                <params>
                    <param name="ze" type="ZipEntry"/>
                </params>
            </method>
            <method name="entryNames" type="Enumeration<String>" line="566">
                <params>
                    <param name="cs" type="CodeSource[]"/>
                </params>
                <comment line="573">
                    JAR file has no signed content. Is there a non-signing
                     code source?                    
                </comment>
                <scope line="568"/>
                <declaration name="includeUnsigned" type="boolean" line="576"/>
                <scope line="577">
                    <scope line="578"/>
                </scope>
                <scope line="583"/>
                <scope line="585">
                    <anonymous_class line="586">
                        <method name="hasMoreElements" type="boolean" line="588"/>
                        <method name="nextElement" type="String" line="592"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="599">
                Returns an enumeration of the zip file entries
                  excluding internal JAR mechanism entries and including
                  signed entries missing from the ZIP directory.                
            </javadoc>
            <method name="entries2" type="Enumeration<JarEntry>" line="604">
                <comment line="611">
                    screen out entries which are never signed                    
                </comment>
                <scope line="606"/>
                <declaration name="enum_" type="Enumeration" line="611"/>
                <anonymous_class line="612">
                    <declaration name="entry" type="ZipEntry" line="614"/>
                    <method name="hasMoreElements" type="boolean" line="616">
                        <scope line="617"/>
                        <scope line="620">
                            <declaration name="ze" type="ZipEntry" line="621"/>
                            <scope line="622"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="JarFileEntry" line="631">
                        <scope line="632">
                            <declaration name="ze" type="ZipEntry" line="633"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getCodeSources" type="CodeSource[]" line="642">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="649">
                    JAR file has no signed content. Is there a non-signing
                     code source?                    
                </comment>
                <scope line="644"/>
                <declaration name="unsigned" type="Enumeration" line="652"/>
                <scope line="653"/>
                <scope line="655"/>
            </method>
            <method name="unsignedEntryNames" type="Enumeration<String>" line="660">
                <comment line="667">
                    Grab entries from ZIP directory but screen out
                     metadata.                    
                </comment>
                <declaration name="entries" type="Enumeration" line="661"/>
                <anonymous_class line="662">
                    <declaration name="name" type="String" line="664"/>
                    <method name="hasMoreElements" type="boolean" line="670">
                        <scope line="671"/>
                        <scope line="674">
                            <declaration name="value" type="String" line="675"/>
                            <declaration name="e" type="ZipEntry" line="676"/>
                            <scope line="678"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="String" line="687">
                        <scope line="688">
                            <declaration name="value" type="String" line="689"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getCodeSource" type="CodeSource" line="698">
                <params>
                    <param name="url" type="URL"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="700">
                    <scope line="701">
                        <declaration name="cs" type="CodeSource" line="702"/>
                        <declaration name="je" type="JarEntry" line="703"/>
                        <scope line="704"/>
                        <scope line="706"/>
                    </scope>
                    <scope line="710"/>
                </scope>
            </method>
            <method name="setEagerValidation" type="void" line="718">
                <params>
                    <param name="eager" type="boolean"/>
                </params>
                <scope line="719"/>
                <scope line="721"/>
                <scope line="724"/>
            </method>
            <method name="getManifestDigests" type="List" line="729">
                <scope line="731"/>
            </method>
        </class>
    </source>