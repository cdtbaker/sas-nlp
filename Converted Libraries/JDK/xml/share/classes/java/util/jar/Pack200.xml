<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.util.SortedMap"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.beans.PropertyChangeListener"/>
        <class name="Pack200" line="8">
            <javadoc line="8">
                Transforms a JAR file to or from a packed stream in Pack200 format.
                  Please refer to Network Transfer Format JSR 200 Specification at
                  &lt;a href=http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html&gt;http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html&lt;/a&gt;
                  &lt;p&gt;
                  Typically the packer engine is used by application developers
                  to deploy or host JAR files on a website.
                  The unpacker  engine is used by deployment applications to
                  transform the byte-stream back to JAR format.
                  &lt;p&gt;
                  Here is an example using  packer and unpacker:&lt;p&gt;
                  &lt;blockquote&gt;&lt;pre&gt;
                  import java.util.jar.Pack200;
                  import java.util.jar.Pack200.;
                  ...
                  // Create the Packer object
                  Packer packer = Pack200.newPacker();
                  // Initialize the state by setting the desired properties
                  Map p = packer.properties();
                  // take more time choosing codings for better compression
                  p.put(Packer.EFFORT, &quot;7&quot;);  // default is &quot;5&quot;
                  // use largest-possible archive segments (&gt;10% better compression).
                  p.put(Packer.SEGMENT_LIMIT, &quot;-1&quot;);
                  // reorder files for better compression.
                  p.put(Packer.KEEP_FILE_ORDER, Packer.FALSE);
                  // smear modification times to a single value.
                  p.put(Packer.MODIFICATION_TIME, Packer.LATEST);
                  // ignore all JAR deflation requests,
                  // transmitting a single request to use &quot;store&quot; mode.
                  p.put(Packer.DEFLATE_HINT, Packer.FALSE);
                  // discard debug attributes
                  p.put(Packer.CODE_ATTRIBUTE_PFX+&quot;LineNumberTable&quot;, Packer.STRIP);
                  // throw an error if an attribute is unrecognized
                  p.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR);
                  // pass one class file uncompressed:
                  p.put(Packer.PASS_FILE_PFX+0, &quot;mutants/Rogue.class&quot;);
                  try {
                  JarFile jarFile = new JarFile(&quot;/tmp/testref.jar&quot;);
                  FileOutputStream fos = new FileOutputStream(&quot;/tmp/test.pack&quot;);
                  // Call the packer
                  packer.pack(jarFile, fos);
                  jarFile.close();
                  fos.close();
                  File f = new File(&quot;/tmp/test.pack&quot;);
                  FileOutputStream fostream = new FileOutputStream(&quot;/tmp/test.jar&quot;);
                  JarOutputStream jostream = new JarOutputStream(fostream);
                  Unpacker unpacker = Pack200.newUnpacker();
                  // Call the unpacker
                  unpacker.unpack(f, jostream);
                  // Must explicitly close the output.
                  jostream.close();
                  } catch (IOException ioe) {
                  ioe.printStackTrace();
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers.
                  The deployment applications can use &quot;Accept-Encoding=pack200-gzip&quot;. This
                  indicates to the server that the client application desires a version of
                  the file encoded with Pack200 and further compressed with gzip. Please
                  refer to  &lt;a href=&quot;{@docRoot}/../technotes/guides/deployment/deployment-guide/pack200.html&quot;&gt;Java Deployment Guide&lt;/a&gt; for more details and
                  techniques.
                  &lt;p&gt;
                  Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor or
                  method in this class will cause a {@link NullPointerException} to be thrown.                
                <author>
                    John Rose                    
                </author>
                <author>
                    Kumar Srinivasan                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="Pack200" type="constructor" line="78"/>
            <javadoc line="80">
                Obtain new instance of a class that implements Packer.
                  &lt;li&gt;&lt;p&gt;If the system property &lt;tt&gt;java.util.jar.Pack200.Packer&lt;/tt&gt;
                  is defined, then the value is taken to be the fully-qualified name
                  of a concrete implementation class, which must implement Packer.
                  This class is loaded and instantiated.  If this process fails
                  then an unspecified error is thrown.&lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;If an implementation has not been specified with the system
                  property, then the system-default implementation class is instantiated,
                  and the result is returned.&lt;/p&gt;&lt;/li&gt;
                  &lt;p&gt;Note:  The returned object is not guaranteed to operate
                  correctly if multiple threads use it at the same time.
                  A multi-threaded application should either allocate multiple
                  packer engines, or else serialize use of one engine with a lock.                
                <return>
                    A newly allocated Packer engine.                    
                </return>
            </javadoc>
            <method name="newPacker" type="Packer" line="96"/>
            <javadoc line="99">
                Obtain new instance of a class that implements Unpacker.
                  &lt;li&gt;&lt;p&gt;If the system property &lt;tt&gt;java.util.jar.Pack200.Unpacker&lt;/tt&gt;
                  is defined, then the value is taken to be the fully-qualified
                  name of a concrete implementation class, which must implement Unpacker.
                  The class is loaded and instantiated.  If this process fails
                  then an unspecified error is thrown.&lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;If an implementation has not been specified with the
                  system property, then the system-default implementation class
                  is instantiated, and the result is returned.&lt;/p&gt;&lt;/li&gt;
                  &lt;p&gt;Note:  The returned object is not guaranteed to operate
                  correctly if multiple threads use it at the same time.
                  A multi-threaded application should either allocate multiple
                  unpacker engines, or else serialize use of one engine with a lock.                
                <return>
                    A newly allocated Unpacker engine.                    
                </return>
            </javadoc>
            <method name="newUnpacker" type="Unpacker" line="115"/>
            <interface name="Packer">
                <javadoc line="118">
                    The packer engine applies various transformations to the input JAR file,
                      making the pack stream highly compressible by a compressor such as
                      gzip or zip. An instance of the engine can be obtained
                      using {@link #newPacker}.
                      The high degree of compression is achieved
                      by using a number of techniques described in the JSR 200 specification.
                      Some of the techniques are sorting, re-ordering and co-location of the
                      constant pool.
                      &lt;p&gt;
                      The pack engine is initialized to an initial state as described
                      by their properties below.
                      The initial state can be manipulated by getting the
                      engine properties (using {@link #properties}) and storing
                      the modified properties on the map.
                      The resource files will be passed through with no changes at all.
                      The class files will not contain identical bytes, since the unpacker
                      is free to change minor class file features such as constant pool order.
                      However, the class files will be semantically identical,
                      as specified in
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.
                      &lt;p&gt;
                      By default, the packer does not change the order of JAR elements.
                      Also, the modification time and deflation hint of each
                      JAR element is passed unchanged.
                      (Any other ZIP-archive information, such as extra attributes
                      giving Unix file permissions, are lost.)
                      &lt;p&gt;
                      Note that packing and unpacking a JAR will in general alter the
                      bytewise contents of classfiles in the JAR.  This means that packing
                      and unpacking will in general invalidate any digital signatures
                      which rely on bytewise images of JAR elements.  In order both to sign
                      and to pack a JAR, you must first pack and unpack the JAR to
                      &quot;normalize&quot; it, then compute signatures on the unpacked JAR elements,
                      and finally repack the signed JAR.
                      Both packing steps should
                      use precisely the same options, and the segment limit may also
                      need to be set to &quot;-1&quot;, to prevent accidental variation of segment
                      boundaries as class file sizes change slightly.
                      &lt;p&gt;
                      (Here&apos;s why this works:  Any reordering the packer does
                      of any classfile structures is idempotent, so the second packing
                      does not change the orderings produced by the first packing.
                      Also, the unpacker is guaranteed by the JSR 200 specification
                      to produce a specific bytewise image for any given transmission
                      ordering of archive elements.)
                      &lt;p&gt;
                      In order to maintain backward compatibility, the pack file&apos;s version is
                      set to accommodate the class files present in the input JAR file. In
                      other words, the pack file version will be the latest, if the class files
                      are the latest and conversely the pack file version will be the oldest
                      if the class file versions are also the oldest. For intermediate class
                      file versions the corresponding pack file version will be used.
                      For example:
                      If the input JAR-files are solely comprised of 1.5  (or  lesser)
                      class files, a 1.5 compatible pack file is  produced. This will also be
                      the case for archives that have no class files.
                      If the input JAR-files contains a 1.6 class file, then the pack file
                      version will be set to 1.6.
                      &lt;p&gt;
                      Note: Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a
                      constructor or method in this class will cause a {@link NullPointerException}to be thrown.
                      &lt;p&gt;                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="SEGMENT_LIMIT" type="String" line="184"/>
                <javadoc line="184">
                    This property is a numeral giving the estimated target size N
                      (in bytes) of each archive segment.
                      If a single input file requires more than N bytes,
                      it will be given its own archive segment.
                      &lt;p&gt;
                      As a special case, a value of -1 will produce a single large
                      segment with all input files, while a value of 0 will
                      produce one segment for each class.
                      Larger archive segments result in less fragmentation and
                      better compression, but processing them requires more memory.
                      &lt;p&gt;
                      The size of each segment is estimated by counting the size of each
                      input file to be transmitted in the segment, along with the size
                      of its name and other transmitted properties.
                      &lt;p&gt;
                      The default is -1, which means the packer will always create a single
                      segment output file. In cases where extremely large output files are
                      generated, users are strongly encouraged to use segmenting or break
                      up the input file into smaller JARs.
                      &lt;p&gt;
                      A 10Mb JAR packed without this limit will
                      typically pack about 10% smaller, but the packer may require
                      a larger Java heap (about ten times the segment limit).                    
                </javadoc>
                <declaration name="KEEP_FILE_ORDER" type="String" line="210"/>
                <javadoc line="210">
                    If this property is set to {@link #TRUE}, the packer will transmit
                      all elements in their original order within the source archive.
                      &lt;p&gt;
                      If it is set to {@link #FALSE}, the packer may reorder elements,
                      and also remove JAR directory entries, which carry no useful
                      information for Java applications.
                      (Typically this enables better compression.)
                      &lt;p&gt;
                      The default is {@link #TRUE}, which preserves the input information,
                      but may cause the transmitted archive to be larger than necessary.                    
                </javadoc>
                <declaration name="EFFORT" type="String" line="223"/>
                <javadoc line="223">
                    If this property is set to a single decimal digit, the packer will
                      use the indicated amount of effort in compressing the archive.
                      Level 1 may produce somewhat larger size and faster compression speed,
                      while level 9 will take much longer but may produce better compression.
                      &lt;p&gt;
                      The special value 0 instructs the packer to copy through the
                      original JAR file directly, with no compression.  The JSR 200
                      standard requires any unpacker to understand this special case
                      as a pass-through of the entire archive.
                      &lt;p&gt;
                      The default is 5, investing a modest amount of time to
                      produce reasonable compression.                    
                </javadoc>
                <declaration name="DEFLATE_HINT" type="String" line="238"/>
                <javadoc line="238">
                    If this property is set to {@link #TRUE} or {@link #FALSE}, the packer
                      will set the deflation hint accordingly in the output archive, and
                      will not transmit the individual deflation hints of archive elements.
                      &lt;p&gt;
                      If this property is set to the special string {@link #KEEP}, the packer
                      will attempt to determine an independent deflation hint for each
                      available element of the input archive, and transmit this hint separately.
                      &lt;p&gt;
                      The default is {@link #KEEP}, which preserves the input information,
                      but may cause the transmitted archive to be larger than necessary.
                      &lt;p&gt;
                      It is up to the unpacker implementation
                      to take action upon the hint to suitably compress the elements of
                      the resulting unpacked jar.
                      &lt;p&gt;
                      The deflation hint of a ZIP or JAR element indicates
                      whether the element was deflated or stored directly.                    
                </javadoc>
                <declaration name="MODIFICATION_TIME" type="String" line="258"/>
                <javadoc line="258">
                    If this property is set to the special string {@link #LATEST},
                      the packer will attempt to determine the latest modification time,
                      among all the available entries in the original archive or the latest
                      modification time of all the available entries in each segment.
                      This single value will be transmitted as part of the segment and applied
                      to all the entries in each segment, {@link #SEGMENT_LIMIT}.
                      &lt;p&gt;
                      This can marginally decrease the transmitted size of the
                      archive, at the expense of setting all installed files to a single
                      date.
                      &lt;p&gt;
                      If this property is set to the special string {@link #KEEP},
                      the packer transmits a separate modification time for each input
                      element.
                      &lt;p&gt;
                      The default is {@link #KEEP}, which preserves the input information,
                      but may cause the transmitted archive to be larger than necessary.
                      &lt;p&gt;
                      It is up to the unpacker implementation to take action to suitably
                      set the modification time of each element of its output file.                    
                    <see>
                        #SEGMENT_LIMIT                        
                    </see>
                </javadoc>
                <declaration name="PASS_FILE_PFX" type="String" line="282"/>
                <javadoc line="282">
                    Indicates that a file should be passed through bytewise, with no
                      compression.  Multiple files may be specified by specifying
                      additional properties with distinct strings appended, to
                      make a family of properties with the common prefix.
                      &lt;p&gt;
                      There is no pathname transformation, except
                      that the system file separator is replaced by the JAR file
                      separator &apos;/&apos;.
                      &lt;p&gt;
                      The resulting file names must match exactly as strings with their
                      occurrences in the JAR file.
                      &lt;p&gt;
                      If a property value is a directory name, all files under that
                      directory will be passed also.
                      &lt;p&gt;
                      Examples:
                      &lt;pre&gt;&lt;code&gt;
                      Map p = packer.properties();
                      p.put(PASS_FILE_PFX+0, &quot;mutants/Rogue.class&quot;);
                      p.put(PASS_FILE_PFX+1, &quot;mutants/Wolverine.class&quot;);
                      p.put(PASS_FILE_PFX+2, &quot;mutants/Storm.class&quot;);
                      # Pass all files in an entire directory hierarchy:
                      p.put(PASS_FILE_PFX+3, &quot;police/&quot;);
                      &lt;/pre&gt;&lt;/code&gt;.                    
                </javadoc>
                <declaration name="UNKNOWN_ATTRIBUTE" type="String" line="309"/>
                <javadoc line="309">
                    Indicates the action to take when a class-file containing an unknown
                      attribute is encountered.  Possible values are the strings {@link #ERROR},{@link #STRIP}, and {@link #PASS}.
                      &lt;p&gt;
                      The string {@link #ERROR} means that the pack operation
                      as a whole will fail, with an exception of type &lt;code&gt;IOException&lt;/code&gt;.
                      The string{@link #STRIP} means that the attribute will be dropped.
                      The string{@link #PASS} means that the whole class-file will be passed through
                      (as if it were a resource file) without compression, with  a suitable warning.
                      This is the default value for this property.
                      &lt;p&gt;
                      Examples:
                      &lt;pre&gt;&lt;code&gt;
                      Map p = pack200.getProperties();
                      p.put(UNKNOWN_ATTRIBUTE, ERROR);
                      p.put(UNKNOWN_ATTRIBUTE, STRIP);
                      p.put(UNKNOWN_ATTRIBUTE, PASS);
                      &lt;/pre&gt;&lt;/code&gt;                    
                </javadoc>
                <declaration name="CLASS_ATTRIBUTE_PFX" type="String" line="329"/>
                <javadoc line="329">
                    When concatenated with a class attribute name,
                      indicates the format of that attribute,
                      using the layout language specified in the JSR 200 specification.
                      &lt;p&gt;
                      For example, the effect of this option is built in:
                      &lt;code&gt;pack.class.attribute.SourceFile=RUH&lt;/code&gt;.
                      &lt;p&gt;
                      The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS} are
                      also allowed, with the same meaning as {@link #UNKNOWN_ATTRIBUTE}.
                      This provides a way for users to request that specific attributes be
                      refused, stripped, or passed bitwise (with no class compression).
                      &lt;p&gt;
                      Code like this might be used to support attributes for JCOV:
                      &lt;pre&gt;&lt;code&gt;
                      Map p = packer.properties();
                      p.put(CODE_ATTRIBUTE_PFX+&quot;CoverageTable&quot;,       &quot;NH[PHHII]&quot;);
                      p.put(CODE_ATTRIBUTE_PFX+&quot;CharacterRangeTable&quot;, &quot;NH[PHPOHIIH]&quot;);
                      p.put(CLASS_ATTRIBUTE_PFX+&quot;SourceID&quot;,           &quot;RUH&quot;);
                      p.put(CLASS_ATTRIBUTE_PFX+&quot;CompilationID&quot;,      &quot;RUH&quot;);
                      &lt;/code&gt;&lt;/pre&gt;
                      &lt;p&gt;
                      Code like this might be used to strip debugging attributes:
                      &lt;pre&gt;&lt;code&gt;
                      Map p = packer.properties();
                      p.put(CODE_ATTRIBUTE_PFX+&quot;LineNumberTable&quot;,    STRIP);
                      p.put(CODE_ATTRIBUTE_PFX+&quot;LocalVariableTable&quot;, STRIP);
                      p.put(CLASS_ATTRIBUTE_PFX+&quot;SourceFile&quot;,        STRIP);
                      &lt;/code&gt;&lt;/pre&gt;                    
                </javadoc>
                <declaration name="FIELD_ATTRIBUTE_PFX" type="String" line="360"/>
                <javadoc line="360">
                    When concatenated with a field attribute name,
                      indicates the format of that attribute.
                      For example, the effect of this option is built in:
                      &lt;code&gt;pack.field.attribute.Deprecated=&lt;/code&gt;.
                      The special strings {@link #ERROR}, {@link #STRIP}, and{@link #PASS} are also allowed.                    
                    <see>
                        #CLASS_ATTRIBUTE_PFX                        
                    </see>
                </javadoc>
                <declaration name="METHOD_ATTRIBUTE_PFX" type="String" line="369"/>
                <javadoc line="369">
                    When concatenated with a method attribute name,
                      indicates the format of that attribute.
                      For example, the effect of this option is built in:
                      &lt;code&gt;pack.method.attribute.Exceptions=NH[RCH]&lt;/code&gt;.
                      The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}are also allowed.                    
                    <see>
                        #CLASS_ATTRIBUTE_PFX                        
                    </see>
                </javadoc>
                <declaration name="CODE_ATTRIBUTE_PFX" type="String" line="378"/>
                <javadoc line="378">
                    When concatenated with a code attribute name,
                      indicates the format of that attribute.
                      For example, the effect of this option is built in:
                      &lt;code&gt;pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]&lt;/code&gt;.
                      The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}are also allowed.                    
                    <see>
                        #CLASS_ATTRIBUTE_PFX                        
                    </see>
                </javadoc>
                <declaration name="PROGRESS" type="String" line="387"/>
                <javadoc line="387">
                    The unpacker&apos;s progress as a percentage, as periodically
                      updated by the unpacker.
                      Values of 0 - 100 are normal, and -1 indicates a stall.
                      Observe this property with a {@link PropertyChangeListener}.
                      &lt;p&gt;
                      At a minimum, the unpacker must set progress to 0
                      at the beginning of a packing operation, and to 100
                      at the end.                    
                    <see>
                        #addPropertyChangeListener                        
                    </see>
                </javadoc>
                <declaration name="KEEP" type="String" line="399"/>
                <javadoc line="399">
                    The string &quot;keep&quot;, a possible value for certain properties.                    
                    <see>
                        #DEFLATE_HINT                        
                    </see>
                    <see>
                        #MODIFICATION_TIME                        
                    </see>
                </javadoc>
                <declaration name="PASS" type="String" line="405"/>
                <javadoc line="405">
                    The string &quot;pass&quot;, a possible value for certain properties.                    
                    <see>
                        #UNKNOWN_ATTRIBUTE                        
                    </see>
                    <see>
                        #CLASS_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #FIELD_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #METHOD_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #CODE_ATTRIBUTE_PFX                        
                    </see>
                </javadoc>
                <declaration name="STRIP" type="String" line="414"/>
                <javadoc line="414">
                    The string &quot;strip&quot;, a possible value for certain properties.                    
                    <see>
                        #UNKNOWN_ATTRIBUTE                        
                    </see>
                    <see>
                        #CLASS_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #FIELD_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #METHOD_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #CODE_ATTRIBUTE_PFX                        
                    </see>
                </javadoc>
                <declaration name="ERROR" type="String" line="423"/>
                <javadoc line="423">
                    The string &quot;error&quot;, a possible value for certain properties.                    
                    <see>
                        #UNKNOWN_ATTRIBUTE                        
                    </see>
                    <see>
                        #CLASS_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #FIELD_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #METHOD_ATTRIBUTE_PFX                        
                    </see>
                    <see>
                        #CODE_ATTRIBUTE_PFX                        
                    </see>
                </javadoc>
                <declaration name="TRUE" type="String" line="432"/>
                <javadoc line="432">
                    The string &quot;true&quot;, a possible value for certain properties.                    
                    <see>
                        #KEEP_FILE_ORDER                        
                    </see>
                    <see>
                        #DEFLATE_HINT                        
                    </see>
                </javadoc>
                <declaration name="FALSE" type="String" line="438"/>
                <javadoc line="438">
                    The string &quot;false&quot;, a possible value for certain properties.                    
                    <see>
                        #KEEP_FILE_ORDER                        
                    </see>
                    <see>
                        #DEFLATE_HINT                        
                    </see>
                </javadoc>
                <declaration name="LATEST" type="String" line="444"/>
                <javadoc line="444">
                    The string &quot;latest&quot;, a possible value for certain properties.                    
                    <see>
                        #MODIFICATION_TIME                        
                    </see>
                </javadoc>
                <method name="properties" type="SortedMap<String,String>" line="449"/>
                <javadoc line="449">
                    Get the set of this engine&apos;s properties.
                      This set is a &quot;live view&quot;, so that changing its
                      contents immediately affects the Packer engine, and
                      changes from the engine (such as progress indications)
                      are immediately visible in the map.
                      &lt;p&gt;The property map may contain pre-defined implementation
                      specific and default properties.  Users are encouraged to
                      read the information and fully understand the implications,
                      before modifying pre-existing properties.
                      &lt;p&gt;
                      Implementation specific properties are prefixed with a
                      package name associated with the implementor, beginning
                      with &lt;tt&gt;com.&lt;/tt&gt; or a similar prefix.
                      All property names beginning with &lt;tt&gt;pack.&lt;/tt&gt; and
                      &lt;tt&gt;unpack.&lt;/tt&gt; are reserved for use by this API.
                      &lt;p&gt;
                      Unknown properties may be ignored or rejected with an
                      unspecified error, and invalid entries may cause an
                      unspecified error to be thrown.
                      &lt;p&gt;
                      The returned map implements all optional {@link SortedMap} operations                    
                    <return>
                        A sorted association of property key strings to property
                          values.                        
                    </return>
                </javadoc>
                <method name="pack" type="void" line="475"/>
                <javadoc line="475">
                    Takes a JarFile and converts it into a Pack200 archive.
                      &lt;p&gt;
                      Closes its input but not its output.  (Pack200 archives are appendable.)                    
                    <param>
                        in a JarFile                        
                    </param>
                    <param>
                        out an OutputStream                        
                    </param>
                    <exception>
                        IOException if an error is encountered.                        
                    </exception>
                </javadoc>
                <method name="pack" type="void" line="484"/>
                <javadoc line="484">
                    Takes a JarInputStream and converts it into a Pack200 archive.
                      &lt;p&gt;
                      Closes its input but not its output.  (Pack200 archives are appendable.)
                      &lt;p&gt;
                      The modification time and deflation hint attributes are not available,
                      for the JAR manifest file and its containing directory.                    
                    <see>
                        #MODIFICATION_TIME                        
                    </see>
                    <see>
                        #DEFLATE_HINT                        
                    </see>
                    <param>
                        in a JarInputStream                        
                    </param>
                    <param>
                        out an OutputStream                        
                    </param>
                    <exception>
                        IOException if an error is encountered.                        
                    </exception>
                </javadoc>
                <method name="addPropertyChangeListener" type="void" line="498"/>
                <javadoc line="498">
                    Registers a listener for PropertyChange events on the properties map.
                      This is typically used by applications to update a progress bar.                    
                    <see>
                        #properties                        
                    </see>
                    <see>
                        #PROGRESS                        
                    </see>
                    <param>
                        listener  An object to be invoked when a property is changed.                        
                    </param>
                </javadoc>
                <method name="removePropertyChangeListener" type="void" line="506"/>
                <javadoc line="506">
                    Remove a listener for PropertyChange events, added by
                      the {@link #addPropertyChangeListener}.                    
                    <see>
                        #addPropertyChangeListener                        
                    </see>
                    <param>
                        listener  The PropertyChange listener to be removed.                        
                    </param>
                </javadoc>
            </interface>
            <interface name="Unpacker">
                <javadoc line="514">
                    The unpacker engine converts the packed stream to a JAR file.
                      An instance of the engine can be obtained
                      using {@link #newUnpacker}.
                      &lt;p&gt;
                      Every JAR file produced by this engine will include the string
                      &quot;&lt;tt&gt;PACK200&lt;/tt&gt;&quot; as a zip file comment.
                      This allows a deployer to detect if a JAR archive was packed and unpacked.
                      &lt;p&gt;
                      Note: Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a
                      constructor or method in this class will cause a {@link NullPointerException}to be thrown.
                      &lt;p&gt;
                      This version of the unpacker is compatible with all previous versions.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="KEEP" type="String" line="530"/>
                <javadoc line="530">
                    The string &quot;keep&quot;, a possible value for certain properties.                    
                    <see>
                        #DEFLATE_HINT                        
                    </see>
                </javadoc>
                <declaration name="TRUE" type="String" line="535"/>
                <javadoc line="535">
                    The string &quot;true&quot;, a possible value for certain properties.                    
                    <see>
                        #DEFLATE_HINT                        
                    </see>
                </javadoc>
                <declaration name="FALSE" type="String" line="540"/>
                <javadoc line="540">
                    The string &quot;false&quot;, a possible value for certain properties.                    
                    <see>
                        #DEFLATE_HINT                        
                    </see>
                </javadoc>
                <declaration name="DEFLATE_HINT" type="String" line="545"/>
                <javadoc line="545">
                    Property indicating that the unpacker should
                      ignore all transmitted values for DEFLATE_HINT,
                      replacing them by the given value, {@link #TRUE} or {@link #FALSE}.
                      The default value is the special string {@link #KEEP},
                      which asks the unpacker to preserve all transmitted
                      deflation hints.                    
                </javadoc>
                <declaration name="PROGRESS" type="String" line="554"/>
                <javadoc line="554">
                    The unpacker&apos;s progress as a percentage, as periodically
                      updated by the unpacker.
                      Values of 0 - 100 are normal, and -1 indicates a stall.
                      Observe this property with a {@link PropertyChangeListener}.
                      &lt;p&gt;
                      At a minimum, the unpacker must set progress to 0
                      at the beginning of a packing operation, and to 100
                      at the end.                    
                    <see>
                        #addPropertyChangeListener                        
                    </see>
                </javadoc>
                <method name="properties" type="SortedMap<String,String>" line="566"/>
                <javadoc line="566">
                    Get the set of this engine&apos;s properties. This set is
                      a &quot;live view&quot;, so that changing its
                      contents immediately affects the Packer engine, and
                      changes from the engine (such as progress indications)
                      are immediately visible in the map.
                      &lt;p&gt;The property map may contain pre-defined implementation
                      specific and default properties.  Users are encouraged to
                      read the information and fully understand the implications,
                      before modifying pre-existing properties.
                      &lt;p&gt;
                      Implementation specific properties are prefixed with a
                      package name associated with the implementor, beginning
                      with &lt;tt&gt;com.&lt;/tt&gt; or a similar prefix.
                      All property names beginning with &lt;tt&gt;pack.&lt;/tt&gt; and
                      &lt;tt&gt;unpack.&lt;/tt&gt; are reserved for use by this API.
                      &lt;p&gt;
                      Unknown properties may be ignored or rejected with an
                      unspecified error, and invalid entries may cause an
                      unspecified error to be thrown.                    
                    <return>
                        A sorted association of option key strings to option values.                        
                    </return>
                </javadoc>
                <method name="unpack" type="void" line="589"/>
                <javadoc line="589">
                    Read a Pack200 archive, and write the encoded JAR to
                      a JarOutputStream.
                      The entire contents of the input stream will be read.
                      It may be more efficient to read the Pack200 archive
                      to a file and pass the File object, using the alternate
                      method described below.
                      &lt;p&gt;
                      Closes its input but not its output.  (The output can accumulate more elements.)                    
                    <param>
                        in an InputStream.                        
                    </param>
                    <param>
                        out a JarOutputStream.                        
                    </param>
                    <exception>
                        IOException if an error is encountered.                        
                    </exception>
                </javadoc>
                <method name="unpack" type="void" line="603"/>
                <javadoc line="603">
                    Read a Pack200 archive, and write the encoded JAR to
                      a JarOutputStream.
                      &lt;p&gt;
                      Does not close its output.  (The output can accumulate more elements.)                    
                    <param>
                        in a File.                        
                    </param>
                    <param>
                        out a JarOutputStream.                        
                    </param>
                    <exception>
                        IOException if an error is encountered.                        
                    </exception>
                </javadoc>
                <method name="addPropertyChangeListener" type="void" line="613"/>
                <javadoc line="613">
                    Registers a listener for PropertyChange events on the properties map.
                      This is typically used by applications to update a progress bar.                    
                    <see>
                        #properties                        
                    </see>
                    <see>
                        #PROGRESS                        
                    </see>
                    <param>
                        listener  An object to be invoked when a property is changed.                        
                    </param>
                </javadoc>
                <method name="removePropertyChangeListener" type="void" line="621"/>
                <javadoc line="621">
                    Remove a listener for PropertyChange events, added by
                      the {@link #addPropertyChangeListener}.                    
                    <see>
                        #addPropertyChangeListener                        
                    </see>
                    <param>
                        listener  The PropertyChange listener to be removed.                        
                    </param>
                </javadoc>
            </interface>
            <declaration name="PACK_PROVIDER" type="String" line="629"/>
            <declaration name="UNPACK_PROVIDER" type="String" line="630"/>
            <declaration name="packerImpl" type="Class" line="631"/>
            <declaration name="unpackerImpl" type="Class" line="632"/>
            <method name="newInstance" type="Object" line="633">
                <params>
                    <param name="prop" type="String"/>
                </params>
                <declaration name="implName" type="String" line="634"/>
                <scope line="635">
                    <declaration name="impl" type="Class" line="636"/>
                    <scope line="637"/>
                </scope>
                <scope line="645"/>
                <scope line="648"/>
                <scope line="651"/>
            </method>
        </class>
    </source>