<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <class name="Manifest" line="10">
            <implements interface="Cloneable"/>
            <javadoc line="10">
                The Manifest class is used to maintain Manifest entry names and their
                  associated Attributes. There are main Manifest Attributes as well as
                  per-entry Attributes. For information on the Manifest format, please
                  see the
                  &lt;a href=&quot;../../../../technotes/guides/jar/jar.html&quot;&gt;
                  Manifest format specification&lt;/a&gt;.                
                <author>
                    David Connelly                    
                </author>
                <see>
                    Attributes                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="attr" type="Attributes" line="22"/>
            <declaration name="entries" type="Map" line="23"/>
            <javadoc line="24">
                Constructs a new, empty Manifest.                
            </javadoc>
            <method name="Manifest" type="constructor" line="27"/>
            <javadoc line="29">
                Constructs a new Manifest from the specified input stream.                
                <param>
                    is the input stream containing manifest data                    
                </param>
                <throws>
                    IOException if an I/O error has occured                    
                </throws>
            </javadoc>
            <method name="Manifest" type="constructor" line="34">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <javadoc line="37">
                Constructs a new Manifest that is a copy of the specified Manifest.                
                <param>
                    man the Manifest to copy                    
                </param>
            </javadoc>
            <method name="Manifest" type="constructor" line="41">
                <params>
                    <param name="man" type="Manifest"/>
                </params>
            </method>
            <javadoc line="45">
                Returns the main Attributes for the Manifest.                
                <return>
                    the main Attributes for the Manifest                    
                </return>
            </javadoc>
            <method name="getMainAttributes" type="Attributes" line="49"/>
            <javadoc line="52">
                Returns a Map of the entries contained in this Manifest. Each entry
                  is represented by a String name (key) and associated Attributes (value).
                  The Map permits the {@code null} key, but no entry with a null key is
                  created by {@link #read}, nor is such an entry written by using {@link #write}.                
                <return>
                    a Map of the entries contained in this Manifest                    
                </return>
            </javadoc>
            <method name="getEntries" type="Map<String,Attributes>" line="59"/>
            <javadoc line="62">
                Returns the Attributes for the specified entry name.
                  This method is defined as:
                  &lt;pre&gt;
                  return (Attributes)getEntries().get(name)
                  &lt;/pre&gt;
                  Though {@code null} is a valid {@code name}, when{@code getAttributes(null)} is invoked on a {@code Manifest}obtained from a jar file, {@code null} will be returned.  While jar
                  files themselves do not allow {@code null}-named attributes, it is
                  possible to invoke {@link #getEntries} on a {@code Manifest}, and
                  on that result, invoke {@code put} with a null key and an
                  arbitrary value.  Subsequent invocations of{@code getAttributes(null)} will return the just-{@code put}value.
                  &lt;p&gt;
                  Note that this method does not return the manifest&apos;s main attributes;
                  see {@link #getMainAttributes}.                
                <param>
                    name entry name                    
                </param>
                <return>
                    the Attributes for the specified entry name                    
                </return>
            </javadoc>
            <method name="getAttributes" type="Attributes" line="79">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="82">
                Clears the main Attributes as well as the entries in this Manifest.                
            </javadoc>
            <method name="clear" type="void" line="85"/>
            <javadoc line="89">
                Writes the Manifest to the specified OutputStream.
                  Attributes.Name.MANIFEST_VERSION must be set in
                  MainAttributes prior to invoking this method.                
                <param>
                    out the output stream                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <see>
                    #getMainAttributes                    
                </see>
            </javadoc>
            <method name="write" type="void" line="97">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="dos" type="DataOutputStream" line="98"/>
                <declaration name="it" type="Iterator" line="100"/>
                <scope line="101">
                    <declaration name="e" type="Map.Entry" line="102"/>
                    <declaration name="buffer" type="StringBuffer" line="103"/>
                    <declaration name="value" type="String" line="104"/>
                    <scope line="105">
                        <declaration name="vb" type="byte[]" line="106"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="117">
                Adds line breaks to enforce a maximum 72 bytes per line.                
            </javadoc>
            <method name="make72Safe" type="void" line="120">
                <params>
                    <param name="line" type="StringBuffer"/>
                </params>
                <declaration name="length" type="int" line="121"/>
                <scope line="122">
                    <declaration name="index" type="int" line="123"/>
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="132">
                Reads the Manifest from the specified InputStream. The entry
                  names and attributes read will be merged in with the current
                  manifest entries.                
                <param>
                    is the input stream                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="139">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <declaration name="fis" type="FastInputStream" line="140"/>
                <declaration name="lbuf" type="byte[]" line="141"/>
                <declaration name="ecount" type="int" line="143"/>
                <declaration name="asize" type="int" line="144"/>
                <declaration name="len" type="int" line="145"/>
                <declaration name="name" type="String" line="146"/>
                <declaration name="skipEmptyLines" type="boolean" line="147"/>
                <declaration name="lastline" type="byte[]" line="148"/>
                <scope line="149">
                    <scope line="150"/>
                    <scope line="153"/>
                    <scope line="156"/>
                    <scope line="160">
                        <scope line="162"/>
                        <scope line="165"/>
                    </scope>
                    <scope line="171">
                        <declaration name="buf" type="byte[]" line="172"/>
                        <scope line="175"/>
                    </scope>
                    <declaration name="attr" type="Attributes" line="182"/>
                    <scope line="183"/>
                </scope>
            </method>
            <method name="parseName" type="String" line="195">
                <params>
                    <param name="lbuf" type="byte[]"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="196">
                    <scope line="197"/>
                    <scope line="200"/>
                </scope>
            </method>
            <method name="toLower" type="int" line="205">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="208">
                Returns true if the specified Object is also a Manifest and has
                  the same main Attributes and entries.                
                <param>
                    o the object to be compared                    
                </param>
                <return>
                    true if the specified Object is also a Manifest and has
                      the same main Attributes and entries                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="215">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="216">
                    <declaration name="m" type="Manifest" line="217"/>
                </scope>
                <scope line="220"/>
            </method>
            <javadoc line="224">
                Returns the hash code for this Manifest.                
            </javadoc>
            <method name="hashCode" type="int" line="227"/>
            <javadoc line="230">
                Returns a shallow copy of this Manifest.  The shallow copy is
                  implemented as follows:
                  &lt;pre&gt;
                  public Object clone() { return new Manifest(this); }
                  &lt;/pre&gt;                
                <return>
                    a shallow copy of this Manifest                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="238"/>
            <class name="FastInputStream" line="241">
                <extends class="FilterInputStream"/>
                <declaration name="buf" type="byte" line="242"/>
                <declaration name="count" type="int" line="243"/>
                <declaration name="pos" type="int" line="244"/>
                <method name="FastInputStream" type="constructor" line="245">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                </method>
                <method name="FastInputStream" type="constructor" line="248">
                    <params>
                        <param name="in" type="InputStream"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="read" type="int" line="252">
                    <scope line="253">
                        <scope line="255"/>
                    </scope>
                </method>
                <method name="read" type="int" line="261">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="avail" type="int" line="262"/>
                    <scope line="263">
                        <scope line="264"/>
                        <scope line="269"/>
                    </scope>
                    <scope line="273"/>
                </method>
                <method name="readLine" type="int" line="280">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="tbuf" type="byte[]" line="281"/>
                    <declaration name="total" type="int" line="282"/>
                    <scope line="283">
                        <declaration name="avail" type="int" line="284"/>
                        <scope line="285">
                            <scope line="288"/>
                        </scope>
                        <declaration name="n" type="int" line="292"/>
                        <scope line="293"/>
                        <declaration name="tpos" type="int" line="296"/>
                        <declaration name="maxpos" type="int" line="297"/>
                        <scope line="304"/>
                    </scope>
                </method>
                <method name="peek" type="byte" line="310"/>
                <method name="readLine" type="int" line="314">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="skip" type="long" line="317">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                    <scope line="318"/>
                    <declaration name="avail" type="long" line="321"/>
                    <scope line="322"/>
                    <scope line="325"/>
                </method>
                <method name="available" type="int" line="331"/>
                <method name="close" type="void" line="334">
                    <scope line="335"/>
                </method>
                <method name="fill" type="void" line="341">
                    <declaration name="n" type="int" line="343"/>
                    <scope line="344"/>
                </method>
            </class>
        </class>
    </source>