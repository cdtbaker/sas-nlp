<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <class name="Manifest" line="37">
            <comment line="51">
                manifest main attributes                
            </comment>
            <comment line="54">
                manifest entries                
            </comment>
            <comment line="319">
                A fast buffered input stream for parsing manifest files.                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="37">
                The Manifest class is used to maintain Manifest entry names and their
                  associated Attributes. There are main Manifest Attributes as well as
                  per-entry Attributes. For information on the Manifest format, please
                  see the
                  &lt;a href=&quot;../../../../technotes/guides/jar/jar.html&quot;&gt;
                  Manifest format specification&lt;/a&gt;.                
                <author>
                    David Connelly                    
                </author>
                <see>
                    Attributes                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="attr" type="Attributes" line="51"/>
            <declaration name="entries" type="Map" line="54"/>
            <javadoc line="56">
                Constructs a new, empty Manifest.                
            </javadoc>
            <method name="Manifest" type="constructor" line="59"/>
            <javadoc line="62">
                Constructs a new Manifest from the specified input stream.                
                <param>
                    is the input stream containing manifest data                    
                </param>
                <throws>
                    IOException if an I/O error has occured                    
                </throws>
            </javadoc>
            <method name="Manifest" type="constructor" line="68">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <javadoc line="72">
                Constructs a new Manifest that is a copy of the specified Manifest.                
                <param>
                    man the Manifest to copy                    
                </param>
            </javadoc>
            <method name="Manifest" type="constructor" line="77">
                <params>
                    <param name="man" type="Manifest"/>
                </params>
            </method>
            <javadoc line="82">
                Returns the main Attributes for the Manifest.                
                <return>
                    the main Attributes for the Manifest                    
                </return>
            </javadoc>
            <method name="getMainAttributes" type="Attributes" line="86"/>
            <javadoc line="90">
                Returns a Map of the entries contained in this Manifest. Each entry
                  is represented by a String name (key) and associated Attributes (value).
                  The Map permits the {@code null} key, but no entry with a null key is
                  created by {@link #read}, nor is such an entry written by using {@link #write}.                
                <return>
                    a Map of the entries contained in this Manifest                    
                </return>
            </javadoc>
            <method name="getEntries" type="Map<String,Attributes>" line="99"/>
            <javadoc line="103">
                Returns the Attributes for the specified entry name.
                  This method is defined as:
                  &lt;pre&gt;
                  return (Attributes)getEntries().get(name)
                  &lt;/pre&gt;
                  Though {@code null} is a valid {@code name}, when{@code getAttributes(null)} is invoked on a {@code Manifest}obtained from a jar file, {@code null} will be returned.  While jar
                  files themselves do not allow {@code null}-named attributes, it is
                  possible to invoke {@link #getEntries} on a {@code Manifest}, and
                  on that result, invoke {@code put} with a null key and an
                  arbitrary value.  Subsequent invocations of{@code getAttributes(null)} will return the just-{@code put}value.
                  &lt;p&gt;
                  Note that this method does not return the manifest&apos;s main attributes;
                  see {@link #getMainAttributes}.                
                <param>
                    name entry name                    
                </param>
                <return>
                    the Attributes for the specified entry name                    
                </return>
            </javadoc>
            <method name="getAttributes" type="Attributes" line="125">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="129">
                Clears the main Attributes as well as the entries in this Manifest.                
            </javadoc>
            <method name="clear" type="void" line="132"/>
            <javadoc line="137">
                Writes the Manifest to the specified OutputStream.
                  Attributes.Name.MANIFEST_VERSION must be set in
                  MainAttributes prior to invoking this method.                
                <param>
                    out the output stream                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <see>
                    #getMainAttributes                    
                </see>
            </javadoc>
            <method name="write" type="void" line="146">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="148">
                    Write out the main attributes for the manifest                    
                </comment>
                <comment line="150">
                    Now write out the pre-entry attributes                    
                </comment>
                <declaration name="dos" type="DataOutputStream" line="147"/>
                <declaration name="it" type="Iterator" line="151"/>
                <scope line="152">
                    <declaration name="e" type="Map.Entry" line="153"/>
                    <declaration name="buffer" type="StringBuffer" line="154"/>
                    <declaration name="value" type="String" line="155"/>
                    <scope line="156">
                        <declaration name="vb" type="byte[]" line="157"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="169">
                Adds line breaks to enforce a maximum 72 bytes per line.                
            </javadoc>
            <method name="make72Safe" type="void" line="172">
                <params>
                    <param name="line" type="StringBuffer"/>
                </params>
                <declaration name="length" type="int" line="173"/>
                <scope line="174">
                    <declaration name="index" type="int" line="175"/>
                    <scope line="176"/>
                </scope>
            </method>
            <javadoc line="185">
                Reads the Manifest from the specified InputStream. The entry
                  names and attributes read will be merged in with the current
                  manifest entries.                
                <param>
                    is the input stream                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="193">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="194">
                    Buffered input stream for reading manifest data                    
                </comment>
                <comment line="196">
                    Line buffer                    
                </comment>
                <comment line="198">
                    Read the main attributes for the manifest                    
                </comment>
                <comment line="200">
                    Total number of entries, attributes read                    
                </comment>
                <comment line="202">
                    Average size of entry attributes                    
                </comment>
                <comment line="204">
                    Now parse the manifest entries                    
                </comment>
                <comment line="228">
                    name is wrapped                    
                </comment>
                <comment line="234">
                    continuation line                    
                </comment>
                <comment line="239">
                    name is wrapped                    
                </comment>
                <comment line="254">
                    XXX: Fix for when the average is 0. When it is 0,                    
                </comment>
                <comment line="255">
                    you get an Attributes object with an initial                    
                </comment>
                <comment line="256">
                    capacity of 0, which tickles a bug in HashMap.                    
                </comment>
                <declaration name="fis" type="FastInputStream" line="195"/>
                <declaration name="lbuf" type="byte[]" line="197"/>
                <declaration name="ecount" type="int" line="201"/>
                <declaration name="asize" type="int" line="203"/>
                <declaration name="len" type="int" line="205"/>
                <declaration name="name" type="String" line="206"/>
                <declaration name="skipEmptyLines" type="boolean" line="207"/>
                <declaration name="lastline" type="byte[]" line="208"/>
                <scope line="210">
                    <scope line="211"/>
                    <scope line="214"/>
                    <scope line="217"/>
                    <scope line="222">
                        <scope line="224"/>
                        <scope line="227"/>
                    </scope>
                    <scope line="233">
                        <declaration name="buf" type="byte[]" line="235"/>
                        <scope line="238"/>
                    </scope>
                    <declaration name="attr" type="Attributes" line="246"/>
                    <scope line="247"/>
                </scope>
            </method>
            <method name="parseName" type="String" line="264">
                <params>
                    <param name="lbuf" type="byte[]"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="267">
                    <scope line="268"/>
                    <scope line="271"/>
                </scope>
            </method>
            <method name="toLower" type="int" line="277">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="281">
                Returns true if the specified Object is also a Manifest and has
                  the same main Attributes and entries.                
                <param>
                    o the object to be compared                    
                </param>
                <return>
                    true if the specified Object is also a Manifest and has
                      the same main Attributes and entries                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="289">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="290">
                    <declaration name="m" type="Manifest" line="291"/>
                </scope>
                <scope line="294"/>
            </method>
            <javadoc line="299">
                Returns the hash code for this Manifest.                
            </javadoc>
            <method name="hashCode" type="int" line="302"/>
            <javadoc line="306">
                Returns a shallow copy of this Manifest.  The shallow copy is
                  implemented as follows:
                  &lt;pre&gt;
                  public Object clone() { return new Manifest(this); }
                  &lt;/pre&gt;                
                <return>
                    a shallow copy of this Manifest                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="314"/>
            <class name="FastInputStream" line="321">
                <extends class="FilterInputStream"/>
                <comment line="366">
                    Reads &apos;len&apos; bytes from the input stream, or until an end-of-line
                     is reached. Returns the number of bytes read.                    
                </comment>
                <declaration name="buf" type="byte" line="322"/>
                <declaration name="count" type="int" line="323"/>
                <declaration name="pos" type="int" line="324"/>
                <method name="FastInputStream" type="constructor" line="326">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                </method>
                <method name="FastInputStream" type="constructor" line="330">
                    <params>
                        <param name="in" type="InputStream"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="read" type="int" line="335">
                    <scope line="336">
                        <scope line="338"/>
                    </scope>
                </method>
                <method name="read" type="int" line="345">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="avail" type="int" line="346"/>
                    <scope line="347">
                        <scope line="348"/>
                        <scope line="353"/>
                    </scope>
                    <scope line="357"/>
                </method>
                <method name="readLine" type="int" line="369">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="tbuf" type="byte[]" line="370"/>
                    <declaration name="total" type="int" line="371"/>
                    <scope line="372">
                        <declaration name="avail" type="int" line="373"/>
                        <scope line="374">
                            <scope line="377"/>
                        </scope>
                        <declaration name="n" type="int" line="381"/>
                        <scope line="382"/>
                        <declaration name="tpos" type="int" line="385"/>
                        <declaration name="maxpos" type="int" line="386"/>
                        <scope line="393"/>
                    </scope>
                </method>
                <method name="peek" type="byte" line="400"/>
                <method name="readLine" type="int" line="406">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="skip" type="long" line="410">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                    <scope line="411"/>
                    <declaration name="avail" type="long" line="414"/>
                    <scope line="415"/>
                    <scope line="418"/>
                </method>
                <method name="available" type="int" line="425"/>
                <method name="close" type="void" line="429">
                    <scope line="430"/>
                </method>
                <method name="fill" type="void" line="437">
                    <declaration name="n" type="int" line="439"/>
                    <scope line="440"/>
                </method>
            </class>
        </class>
    </source>