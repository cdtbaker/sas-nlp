<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.io"/>
        <import package="java.net.URL"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.util.zip.ZipEntry"/>
        <import package="sun.security.util.ManifestDigester"/>
        <import package="sun.security.util.ManifestEntryVerifier"/>
        <import package="sun.security.util.SignatureFileVerifier"/>
        <import package="sun.security.util.Debug"/>
        <class name="JarVerifier" line="40">
            <comment line="47">
                                
            </comment>
            <comment line="50">
                a table mapping names to code signers, for jar entries that have                
            </comment>
            <comment line="54">
                a table mapping names to code signers, for jar entries that have                
            </comment>
            <comment line="58">
                                
            </comment>
            <comment line="65">
                                
            </comment>
            <comment line="68">
                                
            </comment>
            <comment line="71">
                                
            </comment>
            <comment line="74">
                                
            </comment>
            <comment line="77">
                The output stream to use when keeping track of files we are interested                
            </comment>
            <comment line="372">
                Convert an array of signers into an array of concatenated certificate
                 arrays.                
            </comment>
            <comment line="495">
                Extended JavaUtilJarAccess CodeSource API Support                
            </comment>
            <comment line="502">
                Create a unique mapping from codeSigner cache entries to CodeSource.
                 In theory, multiple URLs origins could map to a single locally cached
                 and shared JAR file although in practice there will be a single URL in use.                
            </comment>
            <comment line="541">
                Match CodeSource to a CodeSigner[] in the signer cache.                
            </comment>
            <comment line="573">
                Instances of this class hold uncopied references to internal
                 signing data that can be compared by object reference identity.                
            </comment>
            <comment line="719">
                Like entries() but screens out internal JAR mechanism entries
                 and includes signed entries with no ZIP data.                
            </comment>
            <comment line="779">
                true if file is part of the signature mechanism itself                
            </comment>
            <javadoc line="40">
                @author      Roland Schemers                
            </javadoc>
            <declaration name="debug" type="Debug" line="47"/>
            <declaration name="verifiedSigners" type="Hashtable" line="51"/>
            <declaration name="sigFileSigners" type="Hashtable" line="55"/>
            <declaration name="sigFileData" type="Hashtable" line="58"/>
            <declaration name="pendingBlocks" type="ArrayList" line="60"/>
            <javadoc line="60">
                &quot;queue&quot; of pending PKCS7 blocks that we couldn&apos;t parse
                  until we parsed the .SF file                
            </javadoc>
            <declaration name="signerCache" type="ArrayList" line="65"/>
            <declaration name="parsingBlockOrSF" type="boolean" line="68"/>
            <declaration name="parsingMeta" type="boolean" line="71"/>
            <declaration name="anyToVerify" type="boolean" line="74"/>
            <declaration name="baos" type="ByteArrayOutputStream" line="78"/>
            <declaration name="manDig" type="ManifestDigester" line="80"/>
            <javadoc line="80">
                The ManifestDigester object                
            </javadoc>
            <declaration name="manifestRawBytes" type="byte" line="83"/>
            <javadoc line="83">
                the bytes for the manDig object                
            </javadoc>
            <declaration name="eagerValidation" type="boolean" line="86"/>
            <javadoc line="86">
                controls eager signature validation                
            </javadoc>
            <declaration name="csdomain" type="Object" line="89"/>
            <javadoc line="89">
                makes code source singleton instances unique to us                
            </javadoc>
            <declaration name="manifestDigests" type="List" line="92"/>
            <javadoc line="92">
                collect -DIGEST-MANIFEST values for blacklist                
            </javadoc>
            <method name="JarVerifier" type="constructor" line="95">
                <params>
                    <param name="rawBytes" type="byte"/>
                </params>
            </method>
            <javadoc line="105">
                This method scans to see which entry we&apos;re parsing and
                  keeps various state information depending on what type of
                  file is being parsed.                
            </javadoc>
            <method name="beginEntry" type="void" line="112">
                <params>
                    <param name="je" type="JarEntry"/>
                    <param name="mev" type="ManifestEntryVerifier"/>
                </params>
                <comment line="123">
                    Assumptions:
                     1. The manifest should be the first entry in the META-INF directory.
                     2. The .SF.DSA.EC files follow the manifest, before any normal entries
                     3. Any of the following will throw a SecurityException:
                        a. digest mismatch between a manifest section and
                           the SF section.
                        b. digest mismatch between the actual jar entry and the manifest                    
                </comment>
                <comment line="144">
                                        
                </comment>
                <comment line="162">
                    be liberal in what you accept. If the name starts with ./, remove
                     it as we internally canonicalize it with out the ./.                    
                </comment>
                <comment line="167">
                    be liberal in what you accept. If the name starts with /, remove
                     it as we internally canonicalize it with out the /.                    
                </comment>
                <comment line="172">
                    only set the jev object for entries that have a signature                    
                </comment>
                <comment line="178">
                    don&apos;t compute the digest for this entry                    
                </comment>
                <scope line="116"/>
                <declaration name="name" type="String" line="120"/>
                <scope line="132">
                    <declaration name="uname" type="String" line="133"/>
                    <scope line="135">
                        <scope line="137"/>
                        <scope line="142"/>
                    </scope>
                </scope>
                <scope line="152"/>
                <scope line="156"/>
                <scope line="172"/>
            </method>
            <javadoc line="183">
                update a single byte.                
            </javadoc>
            <method name="update" type="void" line="189">
                <params>
                    <param name="b" type="int"/>
                    <param name="mev" type="ManifestEntryVerifier"/>
                </params>
                <scope line="190">
                    <scope line="191"/>
                    <scope line="193"/>
                </scope>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                update an array of bytes.                
            </javadoc>
            <method name="update" type="void" line="208">
                <params>
                    <param name="n" type="int"/>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="mev" type="ManifestEntryVerifier"/>
                </params>
                <scope line="209">
                    <scope line="210"/>
                    <scope line="212"/>
                </scope>
                <scope line="215"/>
            </method>
            <javadoc line="220">
                called when we reach the end of entry in one of the read() methods.                
            </javadoc>
            <method name="processEntry" type="void" line="225">
                <params>
                    <param name="mev" type="ManifestEntryVerifier"/>
                </params>
                <comment line="248">
                    add to sigFileData in case future blocks need it                    
                </comment>
                <comment line="250">
                    check pending blocks, we can now process
                     anyone waiting for this .SF file                    
                </comment>
                <comment line="269">
                    now we are parsing a signature block file                    
                </comment>
                <comment line="290">
                    see if we have already parsed an external .SF file                    
                </comment>
                <comment line="294">
                    put this block on queue for later processing
                     since we don&apos;t have the .SF bytes yet
                     (uname, block);                    
                </comment>
                <comment line="309">
                    e.g. sun.security.pkcs.ParsingException                    
                </comment>
                <comment line="311">
                    ignore and treat as unsigned                    
                </comment>
                <comment line="314">
                    ignore and treat as unsigned                    
                </comment>
                <comment line="317">
                    ignore and treat as unsigned                    
                </comment>
                <comment line="320">
                    ignore and treat as unsigned                    
                </comment>
                <scope line="226">
                    <declaration name="je" type="JarEntry" line="227"/>
                    <scope line="228"/>
                </scope>
                <scope line="232">
                    <scope line="234">
                        <scope line="237"/>
                        <declaration name="uname" type="String" line="241"/>
                        <scope line="244">
                            <declaration name="key" type="String" line="245"/>
                            <declaration name="bytes" type="byte" line="246"/>
                            <declaration name="it" type="Iterator" line="251"/>
                            <scope line="252">
                                <declaration name="sfv" type="SignatureFileVerifier" line="253"/>
                                <scope line="255">
                                    <scope line="256"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="key" type="String" line="270"/>
                        <scope line="275">
                            <scope line="276">
                                <scope line="277"/>
                            </scope>
                        </scope>
                        <declaration name="sfv" type="SignatureFileVerifier" line="284"/>
                        <scope line="288">
                            <declaration name="bytes" type="byte[]" line="290"/>
                            <scope line="292">
                                <scope line="296"/>
                            </scope>
                            <scope line="301"/>
                        </scope>
                    </scope>
                    <scope line="307"/>
                    <scope line="311"/>
                    <scope line="314"/>
                    <scope line="317"/>
                </scope>
            </method>
            <javadoc line="324">
                Return an array of java.security.cert.Certificate objects for
                  the given file in the jar.                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getCerts" type="java.security.cert.Certificate[]" line="330">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getCerts" type="java.security.cert.Certificate[]" line="335">
                <params>
                    <param name="jar" type="JarFile"/>
                    <param name="entry" type="JarEntry"/>
                </params>
            </method>
            <javadoc line="339">
                return an array of CodeSigner objects for
                  the given file in the jar. this array is not cloned.                
            </javadoc>
            <method name="getCodeSigners" type="CodeSigner[]" line="345">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getCodeSigners" type="CodeSigner[]" line="350">
                <params>
                    <param name="jar" type="JarFile"/>
                    <param name="entry" type="JarEntry"/>
                </params>
                <comment line="354">
                    Force a read of the entry data to generate the
                     verification hash.                    
                </comment>
                <declaration name="name" type="String" line="351"/>
                <scope line="352">
                    <scope line="357">
                        <declaration name="s" type="InputStream" line="358"/>
                        <declaration name="buffer" type="byte[]" line="359"/>
                        <declaration name="n" type="int" line="360"/>
                        <scope line="361"/>
                    </scope>
                    <scope line="365"/>
                </scope>
            </method>
            <method name="mapSignersToCertArray" type="java.security.cert.Certificate[]" line="376">
                <params>
                    <param name="signers" type="CodeSigner[]"/>
                </params>
                <comment line="386">
                    Convert into a Certificate[]                    
                </comment>
                <scope line="378">
                    <declaration name="certChains" type="ArrayList" line="379"/>
                    <scope line="380"/>
                </scope>
            </method>
            <javadoc line="393">
                returns true if there no files to verify.
                  should only be called after all the META-INF entries
                  have been processed.                
            </javadoc>
            <method name="nothingToVerify" type="boolean" line="399"/>
            <javadoc line="403">
                called to let us know we have processed all the
                  META-INF entries, and if we re-read one of them, don&apos;t
                  re-process it. Also gets rid of any data structures
                  we needed when parsing META-INF entries.                
            </javadoc>
            <method name="doneWithMeta" type="void" line="410">
                <comment line="419">
                    MANIFEST.MF is always treated as signed and verified,
                     move its signers from sigFileSigners to verifiedSigners.                    
                </comment>
                <scope line="420"/>
            </method>
            <class name="VerifierStream" line="426">
                <extends class="java.io.InputStream"/>
                <comment line="598">
                    All VerifierCodeSource instances are constructed based on
                     singleton signerCache or signerCacheCert entries for each unique signer.
                     No CodeSigner&lt;-&gt;Certificate[] conversion is required.
                     We use these assumptions to optimize equality comparisons.                    
                </comment>
                <declaration name="is" type="InputStream" line="428"/>
                <declaration name="jv" type="JarVerifier" line="429"/>
                <declaration name="mev" type="ManifestEntryVerifier" line="430"/>
                <declaration name="numLeft" type="long" line="431"/>
                <method name="VerifierStream" type="constructor" line="437">
                    <params>
                        <param name="man" type="Manifest"/>
                        <param name="je" type="JarEntry"/>
                        <param name="is" type="InputStream"/>
                        <param name="jv" type="JarVerifier"/>
                    </params>
                </method>
                <method name="read" type="int" line="448">
                    <scope line="449">
                        <declaration name="b" type="int" line="450"/>
                    </scope>
                    <scope line="456"/>
                </method>
                <method name="read" type="int" line="461">
                    <params>
                        <param name="b" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="462"/>
                    <scope line="466">
                        <declaration name="n" type="int" line="467"/>
                    </scope>
                    <scope line="473"/>
                </method>
                <method name="close" type="void" line="480"/>
                <method name="available" type="int" line="488"/>
            </class>
            <declaration name="urlToCodeSourceMap" type="Map" line="496"/>
            <declaration name="signerToCodeSource" type="Map" line="497"/>
            <declaration name="lastURL" type="URL" line="498"/>
            <declaration name="lastURLMap" type="Map" line="499"/>
            <method name="mapSignersToCodeSource" type="CodeSource" line="506">
                <params>
                    <param name="url" type="URL"/>
                    <param name="signers" type="CodeSigner[]"/>
                </params>
                <declaration name="map" type="Map" line="507"/>
                <scope line="508"/>
                <scope line="510">
                    <scope line="512"/>
                </scope>
                <declaration name="cs" type="CodeSource" line="519"/>
                <scope line="520"/>
            </method>
            <method name="mapSignersToCodeSources" type="CodeSource[]" line="527">
                <params>
                    <param name="url" type="URL"/>
                    <param name="signers" type="List"/>
                    <param name="unsigned" type="boolean"/>
                </params>
                <declaration name="sources" type="List" line="528"/>
                <scope line="530"/>
                <scope line="533"/>
            </method>
            <declaration name="emptySigner" type="CodeSigner[]" line="538"/>
            <method name="findMatchingSigners" type="CodeSigner[]" line="543">
                <params>
                    <param name="cs" type="CodeSource"/>
                </params>
                <comment line="552">
                    In practice signers should always be optimized above
                     but this handles a CodeSource of any type, just in case.                    
                </comment>
                <scope line="544">
                    <declaration name="vcs" type="VerifierCodeSource" line="545"/>
                    <scope line="546"/>
                </scope>
                <declaration name="sources" type="CodeSource[]" line="555"/>
                <declaration name="sourceList" type="List" line="556"/>
                <scope line="557"/>
                <declaration name="j" type="int" line="560"/>
                <scope line="561">
                    <declaration name="match" type="CodeSigner[]" line="562"/>
                    <scope line="564"/>
                </scope>
            </method>
            <class name="VerifierCodeSource" line="576">
                <extends class="CodeSource"/>
                <comment line="598">
                    All VerifierCodeSource instances are constructed based on
                     singleton signerCache or signerCacheCert entries for each unique signer.
                     No CodeSigner&lt;-&gt;Certificate[] conversion is required.
                     We use these assumptions to optimize equality comparisons.                    
                </comment>
                <declaration name="vlocation" type="URL" line="578"/>
                <declaration name="vsigners" type="CodeSigner[]" line="579"/>
                <declaration name="vcerts" type="java.security.cert.Certificate[]" line="580"/>
                <declaration name="csdomain" type="Object" line="581"/>
                <method name="VerifierCodeSource" type="constructor" line="583">
                    <params>
                        <param name="csdomain" type="Object"/>
                        <param name="location" type="URL"/>
                        <param name="signers" type="CodeSigner[]"/>
                    </params>
                    <comment line="588">
                        from signerCache                        
                    </comment>
                </method>
                <method name="VerifierCodeSource" type="constructor" line="590">
                    <params>
                        <param name="csdomain" type="Object"/>
                        <param name="location" type="URL"/>
                        <param name="certs" type="java.security.cert.Certificate[]"/>
                    </params>
                    <comment line="595">
                        from signerCache                        
                    </comment>
                </method>
                <method name="equals" type="boolean" line="603">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <comment line="611">
                        Only compare against other per-signer singletons constructed
                         on behalf of the same JarFile instance. Otherwise, compare
                         things the slower way.                        
                    </comment>
                    <comment line="625">
                        both null                        
                    </comment>
                    <scope line="604"/>
                    <scope line="607">
                        <declaration name="that" type="VerifierCodeSource" line="608"/>
                        <scope line="615">
                            <scope line="617"/>
                            <scope line="620"/>
                            <scope line="622"/>
                            <scope line="624"/>
                        </scope>
                    </scope>
                </method>
                <method name="isSameDomain" type="boolean" line="632">
                    <params>
                        <param name="csdomain" type="Object"/>
                    </params>
                </method>
                <method name="getPrivateSigners" type="CodeSigner[]" line="636"/>
                <method name="getPrivateCertificates" type="java.security.cert.Certificate[]" line="640"/>
            </class>
            <declaration name="signerMap" type="Map" line="644"/>
            <method name="signerMap" type="Map" line="646">
                <comment line="649">
                    Snapshot signer state so it doesn&apos;t change on us. We care
                     only about the asserted signatures. Verification of
                     signature validity happens via the JarEntry apis.                    
                </comment>
                <scope line="647"/>
            </method>
            <method name="entryNames" type="Enumeration<String>" line="660">
                <params>
                    <param name="jar" type="JarFile"/>
                    <param name="cs" type="CodeSource[]"/>
                </params>
                <comment line="666">
                    Grab a single copy of the CodeSigner arrays. Check
                     to see if we can optimize CodeSigner equality test.                    
                </comment>
                <declaration name="map" type="Map" line="661"/>
                <declaration name="itor" type="Iterator" line="662"/>
                <declaration name="matchUnsigned" type="boolean" line="663"/>
                <declaration name="req" type="List" line="669"/>
                <scope line="670">
                    <declaration name="match" type="CodeSigner[]" line="671"/>
                    <scope line="672">
                        <scope line="673"/>
                        <scope line="675"/>
                    </scope>
                </scope>
                <declaration name="signersReq" type="List" line="681"/>
                <declaration name="enum2" type="Enumeration" line="682"/>
                <anonymous_class line="684">
                    <declaration name="name" type="String" line="686"/>
                    <method name="hasMoreElements" type="boolean" line="688">
                        <scope line="689"/>
                        <scope line="693">
                            <declaration name="e" type="Map.Entry" line="694"/>
                            <scope line="695"/>
                        </scope>
                        <scope line="700"/>
                    </method>
                    <method name="nextElement" type="String" line="707">
                        <scope line="708">
                            <declaration name="value" type="String" line="709"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="entries2" type="Enumeration<JarEntry>" line="722">
                <params>
                    <param name="jar" type="JarFile"/>
                    <param name="e" type="Enumeration"/>
                </params>
                <comment line="753">
                    Any map entries left?                    
                </comment>
                <declaration name="map" type="Map" line="723"/>
                <declaration name="enum_" type="Enumeration" line="725"/>
                <anonymous_class line="726">
                    <declaration name="signers" type="Enumeration" line="728"/>
                    <declaration name="entry" type="JarEntry" line="729"/>
                    <method name="hasMoreElements" type="boolean" line="731">
                        <comment line="753">
                            Any map entries left?                            
                        </comment>
                        <scope line="732"/>
                        <scope line="735">
                            <declaration name="ze" type="ZipEntry" line="736"/>
                            <scope line="737"/>
                        </scope>
                        <scope line="743"/>
                        <scope line="746">
                            <declaration name="name" type="String" line="747"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="JarEntry" line="756">
                        <scope line="757">
                            <declaration name="je" type="JarEntry" line="758"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="emptyEnumeration" type="Enumeration" line="767"/>
            <anonymous_class line="767">
                <method name="hasMoreElements" type="boolean" line="769"/>
                <method name="nextElement" type="String" line="773"/>
            </anonymous_class>
            <method name="isSigningRelated" type="boolean" line="779">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="781"/>
                <scope line="785"/>
                <scope line="793"/>
            </method>
            <method name="unsignedEntryNames" type="Enumeration<String>" line="799">
                <params>
                    <param name="jar" type="JarFile"/>
                </params>
                <comment line="807">
                    Grab entries from ZIP directory but screen out
                     metadata.                    
                </comment>
                <declaration name="map" type="Map" line="800"/>
                <declaration name="entries" type="Enumeration" line="801"/>
                <anonymous_class line="802">
                    <declaration name="name" type="String" line="804"/>
                    <method name="hasMoreElements" type="boolean" line="810">
                        <scope line="811"/>
                        <scope line="814">
                            <declaration name="value" type="String" line="815"/>
                            <declaration name="e" type="ZipEntry" line="816"/>
                            <scope line="818"/>
                            <scope line="821"/>
                        </scope>
                    </method>
                    <method name="nextElement" type="String" line="829">
                        <scope line="830">
                            <declaration name="value" type="String" line="831"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="jarCodeSigners" type="List" line="839"/>
            <method name="getJarCodeSigners" type="List" line="841">
                <declaration name="signers" type="CodeSigner[]" line="842"/>
                <scope line="843">
                    <declaration name="set" type="HashSet" line="844"/>
                </scope>
            </method>
            <method name="getCodeSources" type="CodeSource[]" line="852">
                <params>
                    <param name="jar" type="JarFile"/>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="hasUnsigned" type="boolean" line="853"/>
            </method>
            <method name="getCodeSource" type="CodeSource" line="858">
                <params>
                    <param name="url" type="URL"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="signers" type="CodeSigner[]" line="859"/>
            </method>
            <method name="getCodeSource" type="CodeSource" line="865">
                <params>
                    <param name="url" type="URL"/>
                    <param name="jar" type="JarFile"/>
                    <param name="je" type="JarEntry"/>
                </params>
                <declaration name="signers" type="CodeSigner[]" line="866"/>
            </method>
            <method name="setEagerValidation" type="void" line="871">
                <params>
                    <param name="eager" type="boolean"/>
                </params>
            </method>
            <method name="getManifestDigests" type="List" line="875"/>
            <method name="getUnsignedCS" type="CodeSource" line="879">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
        </class>
    </source>