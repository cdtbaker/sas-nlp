<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.Collection"/>
        <import package="java.util.AbstractSet"/>
        <import package="java.util.Iterator"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.util.Comparator"/>
        <import package="sun.misc.ASCIICaseInsensitiveComparator"/>
        <class name="Attributes" line="14">
            <implements interface="Map">
                <type_params>
                    <type_param name="Object"/>
                    <type_param name="Object"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <javadoc line="14">
                The Attributes class maps Manifest attribute names to associated string
                  values. Valid attribute names are case-insensitive, are restricted to
                  the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70
                  characters in length. Attribute values can contain any characters and
                  will be UTF8-encoded when written to the output stream.  See the
                  &lt;a href=&quot;../../../../technotes/guides/jar/jar.html&quot;&gt;JAR File Specification&lt;/a&gt;
                  for more information about valid attribute names and values.                
                <author>
                    David Connelly                    
                </author>
                <see>
                    Manifest                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="map" type="Map&amp;lt;Object,Object&amp;gt;" line="27"/>
            <javadoc line="27">
                The attribute name-value mappings.                
            </javadoc>
            <javadoc line="31">
                Constructs a new, empty Attributes object with default size.                
            </javadoc>
            <method name="Attributes" type="constructor" line="34"/>
            <javadoc line="37">
                Constructs a new, empty Attributes object with the specified
                  initial size.                
                <param>
                    size the initial number of attributes                    
                </param>
            </javadoc>
            <method name="Attributes" type="constructor" line="42">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Constructs a new Attributes object with the same attribute name-value
                  mappings as in the specified Attributes.                
                <param>
                    attr the specified Attributes                    
                </param>
            </javadoc>
            <method name="Attributes" type="constructor" line="50">
                <params>
                    <param name="attr" type="Attributes"/>
                </params>
            </method>
            <javadoc line="53">
                Returns the value of the specified attribute name, or null if the
                  attribute name was not found.                
                <param>
                    name the attribute name                    
                </param>
                <return>
                    the value of the specified attribute name, or null if
                      not found.                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="60">
                <params>
                    <param name="name" type="Object"/>
                </params>
            </method>
            <javadoc line="63">
                Returns the value of the specified attribute name, specified as
                  a string, or null if the attribute was not found. The attribute
                  name is case-insensitive.
                  &lt;p&gt;
                  This method is defined as:
                  &lt;pre&gt;
                  return (String)get(new Attributes.Name((String)name));
                  &lt;/pre&gt;                
                <param>
                    name the attribute name as a string                    
                </param>
                <return>
                    the String value of the specified attribute name, or null if
                      not found.                    
                </return>
                <throws>
                    IllegalArgumentException if the attribute name is invalid                    
                </throws>
            </javadoc>
            <method name="getValue" type="String" line="77">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="80">
                Returns the value of the specified Attributes.Name, or null if the
                  attribute was not found.
                  &lt;p&gt;
                  This method is defined as:
                  &lt;pre&gt;
                  return (String)get(name);
                  &lt;/pre&gt;                
                <param>
                    name the Attributes.Name object                    
                </param>
                <return>
                    the String value of the specified Attribute.Name, or null if
                      not found.                    
                </return>
            </javadoc>
            <method name="getValue" type="String" line="92">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <javadoc line="95">
                Associates the specified value with the specified attribute name
                  (key) in this Map. If the Map previously contained a mapping for
                  the attribute name, the old value is replaced.                
                <param>
                    name the attribute name                    
                </param>
                <param>
                    value the attribute value                    
                </param>
                <return>
                    the previous value of the attribute, or null if none                    
                </return>
                <exception>
                    ClassCastException if the name is not a Attributes.Name
                      or the value is not a String                    
                </exception>
            </javadoc>
            <method name="put" type="Object" line="105">
                <params>
                    <param name="name" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="108">
                Associates the specified value with the specified attribute name,
                  specified as a String. The attributes name is case-insensitive.
                  If the Map previously contained a mapping for the attribute name,
                  the old value is replaced.
                  &lt;p&gt;
                  This method is defined as:
                  &lt;pre&gt;
                  return (String)put(new Attributes.Name(name), value);
                  &lt;/pre&gt;                
                <param>
                    name the attribute name as a string                    
                </param>
                <param>
                    value the attribute value                    
                </param>
                <return>
                    the previous value of the attribute, or null if none                    
                </return>
                <exception>
                    IllegalArgumentException if the attribute name is invalid                    
                </exception>
            </javadoc>
            <method name="putValue" type="String" line="123">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="126">
                Removes the attribute with the specified name (key) from this Map.
                  Returns the previous attribute value, or null if none.                
                <param>
                    name attribute name                    
                </param>
                <return>
                    the previous value of the attribute, or null if none                    
                </return>
            </javadoc>
            <method name="remove" type="Object" line="132">
                <params>
                    <param name="name" type="Object"/>
                </params>
            </method>
            <javadoc line="135">
                Returns true if this Map maps one or more attribute names (keys)
                  to the specified value.                
                <param>
                    value the attribute value                    
                </param>
                <return>
                    true if this Map maps one or more attribute names to
                      the specified value                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="142">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="145">
                Returns true if this Map contains the specified attribute name (key).                
                <param>
                    name the attribute name                    
                </param>
                <return>
                    true if this Map contains the specified attribute name                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="150">
                <params>
                    <param name="name" type="Object"/>
                </params>
            </method>
            <javadoc line="153">
                Copies all of the attribute name-value mappings from the specified
                  Attributes to this Map. Duplicate mappings will be replaced.                
                <param>
                    attr the Attributes to be stored in this map                    
                </param>
                <exception>
                    ClassCastException if attr is not an Attributes                    
                </exception>
            </javadoc>
            <method name="putAll" type="void" line="159">
                <params>
                    <param name="attr" type="Map&lt;?,?&gt;"/>
                </params>
            </method>
            <javadoc line="163">
                Removes all attributes from this Map.                
            </javadoc>
            <method name="clear" type="void" line="166"/>
            <javadoc line="169">
                Returns the number of attributes in this Map.                
            </javadoc>
            <method name="size" type="int" line="172"/>
            <javadoc line="175">
                Returns true if this Map contains no attributes.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="178"/>
            <javadoc line="181">
                Returns a Set view of the attribute names (keys) contained in this Map.                
            </javadoc>
            <method name="keySet" type="Set&lt;Object&gt;" line="184"/>
            <javadoc line="187">
                Returns a Collection view of the attribute values contained in this Map.                
            </javadoc>
            <method name="values" type="Collection&lt;Object&gt;" line="190"/>
            <javadoc line="193">
                Returns a Collection view of the attribute name-value mappings
                  contained in this Map.                
            </javadoc>
            <method name="entrySet" type="Set&lt;Map.Entry&lt;Object,Object&gt;&gt;" line="197"/>
            <javadoc line="200">
                Compares the specified Attributes object with this Map for equality.
                  Returns true if the given object is also an instance of Attributes
                  and the two Attributes objects represent the same mappings.                
                <param>
                    o the Object to be compared                    
                </param>
                <return>
                    true if the specified Object is equal to this Map                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="207">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="210">
                Returns the hash code value for this Map.                
            </javadoc>
            <method name="hashCode" type="int" line="213"/>
            <javadoc line="216">
                Returns a copy of the Attributes, implemented as follows:
                  &lt;pre&gt;
                  public Object clone() { return new Attributes(this); }
                  &lt;/pre&gt;
                  Since the attribute names and values are themselves immutable,
                  the Attributes returned can be safely modified without affecting
                  the original.                
            </javadoc>
            <method name="clone" type="Object" line="225"/>
            <method name="write" type="void" line="228">
                <params>
                    <param name="os" type="DataOutputStream"/>
                </params>
                <declaration name="it" type="Iterator" line="229"/>
                <scope line="230">
                    <declaration name="e" type="Map.Entry" line="231"/>
                    <declaration name="buffer" type="StringBuffer" line="232"/>
                    <declaration name="value" type="String" line="234"/>
                    <scope line="235">
                        <declaration name="vb" type="byte[]" line="236"/>
                    </scope>
                </scope>
            </method>
            <method name="writeMain" type="void" line="246">
                <params>
                    <param name="out" type="DataOutputStream"/>
                </params>
                <declaration name="vername" type="String" line="247"/>
                <declaration name="version" type="String" line="248"/>
                <scope line="249"/>
                <scope line="253"/>
                <declaration name="it" type="Iterator" line="256"/>
                <scope line="257">
                    <declaration name="e" type="Map.Entry" line="258"/>
                    <declaration name="name" type="String" line="259"/>
                    <scope line="260">
                        <declaration name="buffer" type="StringBuffer" line="261"/>
                        <declaration name="value" type="String" line="263"/>
                        <scope line="264">
                            <declaration name="vb" type="byte[]" line="265"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="read" type="void" line="276">
                <params>
                    <param name="is" type="Manifest.FastInputStream"/>
                    <param name="lbuf" type="byte[]"/>
                </params>
                <declaration name="name" type="String" line="277"/>
                <declaration name="lastline" type="byte[]" line="278"/>
                <declaration name="len" type="int" line="279"/>
                <scope line="280">
                    <declaration name="lineContinued" type="boolean" line="281"/>
                    <scope line="282"/>
                    <scope line="285"/>
                    <scope line="288"/>
                    <declaration name="i" type="int" line="291"/>
                    <scope line="292">
                        <scope line="293"/>
                        <declaration name="buf" type="byte[]" line="297"/>
                        <scope line="300"/>
                    </scope>
                    <scope line="307">
                        <scope line="308">
                            <scope line="309"/>
                        </scope>
                        <scope line="313"/>
                        <scope line="317"/>
                    </scope>
                    <scope line="324">
                        <scope line="325"/>
                    </scope>
                    <scope line="329"/>
                </scope>
            </method>
            <class name="Name" line="334">
                <javadoc line="334">
                    The Attributes.Name class represents an attribute name stored in
                      this Map. Valid attribute names are case-insensitive, are restricted
                      to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed
                      70 characters in length. Attribute values can contain any characters
                      and will be UTF8-encoded when written to the output stream.  See the
                      &lt;a href=&quot;../../../../technotes/guides/jar/jar.html&quot;&gt;JAR File Specification&lt;/a&gt;
                      for more information about valid attribute names and values.                    
                </javadoc>
                <declaration name="name" type="String" line="344"/>
                <declaration name="hashCode" type="int" line="345"/>
                <javadoc line="346">
                    Constructs a new attribute name using the given string name.                    
                    <param>
                        name the attribute string name                        
                    </param>
                    <exception>
                        IllegalArgumentException if the attribute name was
                          invalid                        
                    </exception>
                    <exception>
                        NullPointerException if the attribute name was null                        
                    </exception>
                </javadoc>
                <method name="Name" type="constructor" line="353">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="354"/>
                    <scope line="357"/>
                </method>
                <method name="isValid" type="boolean" line="362">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="len" type="int" line="363"/>
                    <scope line="364"/>
                    <scope line="367">
                        <scope line="368"/>
                    </scope>
                </method>
                <method name="isValid" type="boolean" line="374">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="isAlpha" type="boolean" line="377">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="isDigit" type="boolean" line="380">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <javadoc line="383">
                    Compares this attribute name to another for equality.                    
                    <param>
                        o the object to compare                        
                    </param>
                    <return>
                        true if this attribute name is equal to the
                          specified attribute object                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="389">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="390">
                        <declaration name="c" type="Comparator" line="391"/>
                    </scope>
                    <scope line="394"/>
                </method>
                <javadoc line="398">
                    Computes the hash value for this attribute name.                    
                </javadoc>
                <method name="hashCode" type="int" line="401">
                    <scope line="402"/>
                </method>
                <javadoc line="407">
                    Returns the attribute name as a String.                    
                </javadoc>
                <method name="toString" type="String" line="410"/>
                <declaration name="MANIFEST_VERSION" type="Name" line="413"/>
                <javadoc line="413">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Manifest-Version&lt;/code&gt;
                      manifest attribute. This attribute indicates the version number
                      of the manifest standard to which a JAR file&apos;s manifest conforms.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/jar/jar.html#JAR Manifest&quot;&gt;
                                       Manifest and Signature Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="SIGNATURE_VERSION" type="Name" line="421"/>
                <javadoc line="421">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Signature-Version&lt;/code&gt;
                      manifest attribute used when signing JAR files.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/jar/jar.html#JAR Manifest&quot;&gt;
                                       Manifest and Signature Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="CONTENT_TYPE" type="Name" line="428"/>
                <javadoc line="428">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Content-Type&lt;/code&gt;
                      manifest attribute.                    
                </javadoc>
                <declaration name="CLASS_PATH" type="Name" line="433"/>
                <javadoc line="433">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Class-Path&lt;/code&gt;
                      manifest attribute. Bundled extensions can use this attribute
                      to find other JAR files containing needed classes.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/extensions/spec.html#bundled&quot;&gt;
                                       Extensions Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="MAIN_CLASS" type="Name" line="441"/>
                <javadoc line="441">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Main-Class&lt;/code&gt; manifest
                      attribute used for launching applications packaged in JAR files.
                      The &lt;code&gt;Main-Class&lt;/code&gt; attribute is used in conjunction
                      with the &lt;code&gt;-jar&lt;/code&gt; command-line option of the
                      &lt;tt&gt;java&lt;/tt&gt; application launcher.                    
                </javadoc>
                <declaration name="SEALED" type="Name" line="449"/>
                <javadoc line="449">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Sealed&lt;/code&gt; manifest attribute
                      used for sealing.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/extensions/spec.html#sealing&quot;&gt;
                                       Extension Sealing&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="EXTENSION_LIST" type="Name" line="456"/>
                <javadoc line="456">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Extension-List&lt;/code&gt; manifest attribute
                      used for declaring dependencies on installed extensions.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/extensions/spec.html#dependency&quot;&gt;
                                       Installed extension dependency&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="EXTENSION_NAME" type="Name" line="463"/>
                <javadoc line="463">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Extension-Name&lt;/code&gt; manifest attribute
                      used for declaring dependencies on installed extensions.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/extensions/spec.html#dependency&quot;&gt;
                                       Installed extension dependency&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="EXTENSION_INSTALLATION" type="Name" line="470"/>
                <javadoc line="470">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Extension-Name&lt;/code&gt; manifest attribute
                      used for declaring dependencies on installed extensions.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/extensions/spec.html#dependency&quot;&gt;
                                       Installed extension dependency&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="IMPLEMENTATION_TITLE" type="Name" line="477"/>
                <javadoc line="477">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Implementation-Title&lt;/code&gt;
                      manifest attribute used for package versioning.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/versioning/spec/versioning2.html#wp90779&quot;&gt;
                                       Java Product Versioning Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="IMPLEMENTATION_VERSION" type="Name" line="484"/>
                <javadoc line="484">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Implementation-Version&lt;/code&gt;
                      manifest attribute used for package versioning.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/versioning/spec/versioning2.html#wp90779&quot;&gt;
                                       Java Product Versioning Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="IMPLEMENTATION_VENDOR" type="Name" line="491"/>
                <javadoc line="491">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Implementation-Vendor&lt;/code&gt;
                      manifest attribute used for package versioning.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/versioning/spec/versioning2.html#wp90779&quot;&gt;
                                       Java Product Versioning Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="IMPLEMENTATION_VENDOR_ID" type="Name" line="498"/>
                <javadoc line="498">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Implementation-Vendor-Id&lt;/code&gt;
                      manifest attribute used for package versioning.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/versioning/spec/versioning2.html#wp90779&quot;&gt;
                                       Java Product Versioning Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="IMPLEMENTATION_URL" type="Name" line="505"/>
                <javadoc line="505">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Implementation-Vendor-URL&lt;/code&gt;
                      manifest attribute used for package versioning.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/versioning/spec/versioning2.html#wp90779&quot;&gt;
                                       Java Product Versioning Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="SPECIFICATION_TITLE" type="Name" line="512"/>
                <javadoc line="512">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Specification-Title&lt;/code&gt;
                      manifest attribute used for package versioning.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/versioning/spec/versioning2.html#wp90779&quot;&gt;
                                       Java Product Versioning Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="SPECIFICATION_VERSION" type="Name" line="519"/>
                <javadoc line="519">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Specification-Version&lt;/code&gt;
                      manifest attribute used for package versioning.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/versioning/spec/versioning2.html#wp90779&quot;&gt;
                                       Java Product Versioning Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
                <declaration name="SPECIFICATION_VENDOR" type="Name" line="526"/>
                <javadoc line="526">
                    &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Specification-Vendor&lt;/code&gt;
                      manifest attribute used for package versioning.                    
                    <see>
                        &lt;a href=&quot;../../../../technotes/guides/versioning/spec/versioning2.html#wp90779&quot;&gt;
                                       Java Product Versioning Specification&lt;/a&gt;                        
                    </see>
                </javadoc>
            </class>
        </class>
    </source>