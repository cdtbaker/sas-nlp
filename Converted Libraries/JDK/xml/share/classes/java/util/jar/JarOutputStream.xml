<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.jar">
        <import package="java.util.zip"/>
        <import package="java.io"/>
        <class name="JarOutputStream" line="31">
            <extends class="ZipOutputStream"/>
            <comment line="115">
                Returns true if specified byte array contains the
                 jar magic extra field id.                
            </comment>
            <comment line="134">
                Fetches unsigned 16-bit value from byte array at specified offset.
                 The bytes are assumed to be in Intel (little-endian) byte order.                
            </comment>
            <comment line="142">
                Sets 16-bit value at specified offset. The bytes are assumed to
                 be in Intel (little-endian) byte order.                
            </comment>
            <javadoc line="31">
                The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents
                  of a JAR file to any output stream. It extends the class
                  &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; with support
                  for writing an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The
                  &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about
                  the JAR file and its entries.                
                <author>
                    David Connelly                    
                </author>
                <see>
                    Manifest                    
                </see>
                <see>
                    java.util.zip.ZipOutputStream                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="JAR_MAGIC" type="int" line="46"/>
            <javadoc line="48">
                Creates a new &lt;code&gt;JarOutputStream&lt;/code&gt; with the specified
                  &lt;code&gt;Manifest&lt;/code&gt;. The manifest is written as the first
                  entry to the output stream.                
                <param>
                    out the actual output stream                    
                </param>
                <param>
                    man the optional &lt;code&gt;Manifest&lt;/code&gt;                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="JarOutputStream" type="constructor" line="57">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="man" type="Manifest"/>
                </params>
                <scope line="59"/>
                <declaration name="e" type="ZipEntry" line="62"/>
            </method>
            <javadoc line="68">
                Creates a new &lt;code&gt;JarOutputStream&lt;/code&gt; with no manifest.                
                <param>
                    out the actual output stream                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="JarOutputStream" type="constructor" line="73">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="77">
                Begins writing a new JAR file entry and positions the stream
                  to the start of the entry data. This method will also close
                  any previous entry. The default compression method will be
                  used if no compression method was specified for the entry.
                  The current time will be used if the entry has no set modification
                  time.                
                <param>
                    ze the ZIP/JAR entry to be written                    
                </param>
                <exception>
                    ZipException if a ZIP error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="putNextEntry" type="void" line="89">
                <params>
                    <param name="ze" type="ZipEntry"/>
                </params>
                <comment line="92">
                    Make sure that extra field data for first JAR
                     entry includes JAR magic number id.                    
                </comment>
                <comment line="99">
                    Prepend magic to existing extra data                    
                </comment>
                <comment line="104">
                    extra field id                    
                </comment>
                <comment line="105">
                    extra field size                    
                </comment>
                <scope line="90">
                    <declaration name="edata" type="byte[]" line="93"/>
                    <scope line="94">
                        <scope line="95"/>
                        <scope line="97">
                            <declaration name="tmp" type="byte[]" line="99"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="firstEntry" type="boolean" line="112"/>
            <method name="hasMagic" type="boolean" line="118">
                <params>
                    <param name="edata" type="byte[]"/>
                </params>
                <comment line="129">
                    Invalid extra field data                    
                </comment>
                <scope line="119">
                    <declaration name="i" type="int" line="120"/>
                    <scope line="121">
                        <scope line="122"/>
                    </scope>
                </scope>
                <scope line="127"/>
            </method>
            <method name="get16" type="int" line="137">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="set16" type="void" line="145">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="value" type="int"/>
                </params>
            </method>
        </class>
    </source>