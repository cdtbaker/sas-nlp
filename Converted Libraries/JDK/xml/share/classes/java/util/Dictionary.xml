<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="Dictionary" line="28">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <javadoc line="28">
                The &lt;code&gt;Dictionary&lt;/code&gt; class is the abstract parent of any
                  class, such as &lt;code&gt;Hashtable&lt;/code&gt;, which maps keys to values.
                  Every key and every value is an object. In any one &lt;tt&gt;Dictionary&lt;/tt&gt;
                  object, every key is associated with at most one value. Given a
                  &lt;tt&gt;Dictionary&lt;/tt&gt; and a key, the associated element can be looked up.
                  Any non-&lt;code&gt;null&lt;/code&gt; object can be used as a key and as a value.
                  &lt;p&gt;
                  As a rule, the &lt;code&gt;equals&lt;/code&gt; method should be used by
                  implementations of this class to decide if two keys are the same.
                  &lt;p&gt;
                  &lt;strong&gt;NOTE: This class is obsolete.  New implementations should
                  implement the Map interface, rather than extending this class.&lt;/strong&gt;                
                <author>
                    unascribed                    
                </author>
                <see>
                    java.util.Map                    
                </see>
                <see>
                    java.lang.Object#equals(java.lang.Object)                    
                </see>
                <see>
                    java.lang.Object#hashCode()                    
                </see>
                <see>
                    java.util.Hashtable                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <javadoc line="51">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="Dictionary" type="constructor" line="55"/>
            <method name="size" type="int" line="58"/>
            <javadoc line="58">
                Returns the number of entries (distinct keys) in this dictionary.                
                <return>
                    the number of keys in this dictionary.                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="65"/>
            <javadoc line="65">
                Tests if this dictionary maps no keys to value. The general contract
                  for the &lt;tt&gt;isEmpty&lt;/tt&gt; method is that the result is true if and only
                  if this dictionary contains no entries.                
                <return>
                    <code>true</code> if this dictionary maps no keys to values;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="keys" type="Enumeration<K>" line="75"/>
            <javadoc line="75">
                Returns an enumeration of the keys in this dictionary. The general
                  contract for the keys method is that an &lt;tt&gt;Enumeration&lt;/tt&gt; object
                  is returned that will generate all the keys for which this dictionary
                  contains entries.                
                <return>
                    an enumeration of the keys in this dictionary.                    
                </return>
                <see>
                    java.util.Dictionary#elements()                    
                </see>
                <see>
                    java.util.Enumeration                    
                </see>
            </javadoc>
            <method name="elements" type="Enumeration<V>" line="87"/>
            <javadoc line="87">
                Returns an enumeration of the values in this dictionary. The general
                  contract for the &lt;tt&gt;elements&lt;/tt&gt; method is that an
                  &lt;tt&gt;Enumeration&lt;/tt&gt; is returned that will generate all the elements
                  contained in entries in this dictionary.                
                <return>
                    an enumeration of the values in this dictionary.                    
                </return>
                <see>
                    java.util.Dictionary#keys()                    
                </see>
                <see>
                    java.util.Enumeration                    
                </see>
            </javadoc>
            <method name="get" type="V" line="99"/>
            <javadoc line="99">
                Returns the value to which the key is mapped in this dictionary.
                  The general contract for the &lt;tt&gt;isEmpty&lt;/tt&gt; method is that if this
                  dictionary contains an entry for the specified key, the associated
                  value is returned; otherwise, &lt;tt&gt;null&lt;/tt&gt; is returned.                
                <return>
                    the value to which the key is mapped in this dictionary;                    
                </return>
                <param>
                    key   a key in this dictionary.
                      <code>null</code> if the key is not mapped to any value in
                      this dictionary.                    
                </param>
                <exception>
                    NullPointerException if the <tt>key</tt> is <tt>null</tt>.                    
                </exception>
                <see>
                    java.util.Dictionary#put(java.lang.Object,java.lang.Object)                    
                </see>
            </javadoc>
            <method name="put" type="V" line="114"/>
            <javadoc line="114">
                Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified
                  &lt;code&gt;value&lt;/code&gt; in this dictionary. Neither the key nor the
                  value can be &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  If this dictionary already contains an entry for the specified
                  &lt;tt&gt;key&lt;/tt&gt;, the value already in this dictionary for that
                  &lt;tt&gt;key&lt;/tt&gt; is returned, after modifying the entry to contain the
                  new element. &lt;p&gt;If this dictionary does not already have an entry
                  for the specified &lt;tt&gt;key&lt;/tt&gt;, an entry is created for the
                  specified &lt;tt&gt;key&lt;/tt&gt; and &lt;tt&gt;value&lt;/tt&gt;, and &lt;tt&gt;null&lt;/tt&gt; is
                  returned.
                  &lt;p&gt;
                  The &lt;code&gt;value&lt;/code&gt; can be retrieved by calling the
                  &lt;code&gt;get&lt;/code&gt; method with a &lt;code&gt;key&lt;/code&gt; that is equal to
                  the original &lt;code&gt;key&lt;/code&gt;.                
                <param>
                    key     the hashtable key.                    
                </param>
                <param>
                    value   the value.                    
                </param>
                <return>
                    the previous value to which the <code>key</code> was mapped
                      in this dictionary, or <code>null</code> if the key did not
                      have a previous mapping.                    
                </return>
                <exception>
                    NullPointerException  if the <code>key</code> or
                      <code>value</code> is <code>null</code>.                    
                </exception>
                <see>
                    java.lang.Object#equals(java.lang.Object)                    
                </see>
                <see>
                    java.util.Dictionary#get(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="remove" type="V" line="143"/>
            <javadoc line="143">
                Removes the &lt;code&gt;key&lt;/code&gt; (and its corresponding
                  &lt;code&gt;value&lt;/code&gt;) from this dictionary. This method does nothing
                  if the &lt;code&gt;key&lt;/code&gt; is not in this dictionary.                
                <param>
                    key   the key that needs to be removed.                    
                </param>
                <return>
                    the value to which the <code>key</code> had been mapped in this
                      dictionary, or <code>null</code> if the key did not have a
                      mapping.                    
                </return>
                <exception>
                    NullPointerException if <tt>key</tt> is <tt>null</tt>.                    
                </exception>
            </javadoc>
        </class>
    </source>