<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="sun.util.calendar.BaseCalendar"/>
        <import package="sun.util.calendar.CalendarDate"/>
        <import package="sun.util.calendar.CalendarSystem"/>
        <import package="sun.util.calendar.CalendarUtils"/>
        <import package="sun.util.calendar.Era"/>
        <import package="sun.util.calendar.Gregorian"/>
        <import package="sun.util.calendar.JulianCalendar"/>
        <import package="sun.util.calendar.ZoneInfo"/>
        <class name="GregorianCalendar" line="12">
            <extends class="Calendar"/>
            <javadoc line="12">
                &lt;code&gt;GregorianCalendar&lt;/code&gt; is a concrete subclass of
                  &lt;code&gt;Calendar&lt;/code&gt; and provides the standard calendar system
                  used by most of the world.
                  &lt;p&gt; &lt;code&gt;GregorianCalendar&lt;/code&gt; is a hybrid calendar that
                  supports both the Julian and Gregorian calendar systems with the
                  support of a single discontinuity, which corresponds by default to
                  the Gregorian date when the Gregorian calendar was instituted
                  (October 15, 1582 in some countries, later in others).  The cutover
                  date may be changed by the caller by calling {@link #setGregorianChange(Date) setGregorianChange()}.
                  &lt;p&gt;
                  Historically, in those countries which adopted the Gregorian calendar first,
                  October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models
                  this correctly.  Before the Gregorian cutover, &lt;code&gt;GregorianCalendar&lt;/code&gt;
                  implements the Julian calendar.  The only difference between the Gregorian
                  and the Julian calendar is the leap year rule. The Julian calendar specifies
                  leap years every four years, whereas the Gregorian calendar omits century
                  years which are not divisible by 400.
                  &lt;p&gt;
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; implements &lt;em&gt;proleptic&lt;/em&gt; Gregorian and
                  Julian calendars. That is, dates are computed by extrapolating the current
                  rules indefinitely far backward and forward in time. As a result,
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; may be used for all years to generate
                  meaningful and consistent results. However, dates obtained using
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; are historically accurate only from March 1, 4
                  AD onward, when modern Julian calendar rules were adopted.  Before this date,
                  leap year rules were applied irregularly, and before 45 BC the Julian
                  calendar did not even exist.
                  &lt;p&gt;
                  Prior to the institution of the Gregorian calendar, New Year&apos;s Day was
                  March 25. To avoid confusion, this calendar always uses January 1. A manual
                  adjustment may be made if desired for dates that are prior to the Gregorian
                  changeover and which fall between January 1 and March 24.
                  &lt;h4&gt;&lt;a name=&quot;week_and_year&quot;&gt;Week Of Year and Week Year&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt;Values calculated for the {@link Calendar#WEEK_OF_YEARWEEK_OF_YEAR} field range from 1 to 53. The first week of a
                  calendar year is the earliest seven day period starting on {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek()} that contains at
                  least {@link Calendar#getMinimalDaysInFirstWeek()getMinimalDaysInFirstWeek()} days from that year. It thus depends
                  on the values of {@code getMinimalDaysInFirstWeek()}, {@codegetFirstDayOfWeek()}, and the day of the week of January 1. Weeks
                  between week 1 of one year and week 1 of the following year
                  (exclusive) are numbered sequentially from 2 to 52 or 53 (except
                  for year(s) involved in the Julian-Gregorian transition).}&lt;p&gt;The {@code getFirstDayOfWeek()} and 
                   values are initialized using
                  locale-dependent resources when constructing a {@codeGregorianCalendar}. &lt;a name=&quot;iso8601_compatible_setting&quot;&gt;The week
                  determination is compatible&lt;/a&gt; with the ISO 8601 standard when 
                   is {@code MONDAY} and 
                   is 4, which values are used in locales
                  where the standard is preferred. These values can explicitly be set by
                  calling {@link Calendar#setFirstDayOfWeek(int) setFirstDayOfWeek()} and{@link Calendar#setMinimalDaysInFirstWeek(int)setMinimalDaysInFirstWeek()}.
                  &lt;p&gt;A &lt;a name=&quot;week_year&quot;&gt;&lt;em&gt;week year&lt;/em&gt;&lt;/a&gt; is in sync with a{@code WEEK_OF_YEAR} cycle. All weeks between the first and last
                  weeks (inclusive) have the same &lt;em&gt;week year&lt;/em&gt; value.
                  Therefore, the first and last days of a week year may have
                  different calendar year values.
                  &lt;p&gt;For example, January 1, 1998 is a Thursday. If 
                   is {@code MONDAY} and 
                   is 4 (ISO 8601 standard compatible
                  setting), then week 1 of 1998 starts on December 29, 1997, and ends
                  on January 4, 1998. The week year is 1998 for the last three days
                  of calendar year 1997. If, however, {@code getFirstDayOfWeek()} is{@code SUNDAY}, then week 1 of 1998 starts on January 4, 1998, and
                  ends on January 10, 1998; the first three days of 1998 then are
                  part of week 53 of 1997 and their week year is 1997.
                  &lt;h4&gt;Week Of Month&lt;/h4&gt;
                  &lt;p&gt;Values calculated for the &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; field range from 0
                  to 6.  Week 1 of a month (the days with &lt;code&gt;WEEK_OF_MONTH =
                  1&lt;/code&gt;) is the earliest set of at least
                  &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; contiguous days in that month,
                  ending on the day before &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;.  Unlike
                  week 1 of a year, week 1 of a month may be shorter than 7 days, need
                  not start on &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;, and will not include days of
                  the previous month.  Days of a month before week 1 have a
                  &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 0.
                  &lt;p&gt;For example, if &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;SUNDAY&lt;/code&gt;
                  and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, then the first week of
                  January 1998 is Sunday, January 4 through Saturday, January 10.  These days
                  have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 1.  Thursday, January 1 through
                  Saturday, January 3 have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 0.  If
                  &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is changed to 3, then January 1
                  through January 3 have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 1.
                  &lt;h4&gt;Default Fields Values&lt;/h4&gt;
                  &lt;p&gt;The &lt;code&gt;clear&lt;/code&gt; method sets calendar field(s)
                  undefined. &lt;code&gt;GregorianCalendar&lt;/code&gt; uses the following
                  default value for each calendar field if its value is undefined.
                  &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;3&quot; border=&quot;0&quot;
                  summary=&quot;GregorianCalendar default field values&quot;
                  style=&quot;text-align: left; width: 66%;&quot;&gt;
                  &lt;tbody&gt;
                  &lt;tr&gt;
                  &lt;th style=&quot;vertical-align: top; background-color: rgb(204, 204, 255);
                  text-align: center;&quot;&gt;Field&lt;br&gt;
                  &lt;/th&gt;
                  &lt;th style=&quot;vertical-align: top; background-color: rgb(204, 204, 255);
                  text-align: center;&quot;&gt;Default Value&lt;br&gt;
                  &lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: middle;&quot;&gt;
                  &lt;code&gt;ERA&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: middle;&quot;&gt;
                  &lt;code&gt;AD&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: middle; background-color: rgb(238, 238, 255);&quot;&gt;
                  &lt;code&gt;YEAR&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: middle; background-color: rgb(238, 238, 255);&quot;&gt;
                  &lt;code&gt;1970&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: middle;&quot;&gt;
                  &lt;code&gt;MONTH&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: middle;&quot;&gt;
                  &lt;code&gt;JANUARY&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: top; background-color: rgb(238, 238, 255);&quot;&gt;
                  &lt;code&gt;DAY_OF_MONTH&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: top; background-color: rgb(238, 238, 255);&quot;&gt;
                  &lt;code&gt;1&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: middle;&quot;&gt;
                  &lt;code&gt;DAY_OF_WEEK&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: middle;&quot;&gt;
                  &lt;code&gt;the first day of week&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: top; background-color: rgb(238, 238, 255);&quot;&gt;
                  &lt;code&gt;WEEK_OF_MONTH&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: top; background-color: rgb(238, 238, 255);&quot;&gt;
                  &lt;code&gt;0&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: top;&quot;&gt;
                  &lt;code&gt;DAY_OF_WEEK_IN_MONTH&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: top;&quot;&gt;
                  &lt;code&gt;1&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: middle; background-color: rgb(238, 238, 255);&quot;&gt;
                  &lt;code&gt;AM_PM&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: middle; background-color: rgb(238, 238, 255);&quot;&gt;
                  &lt;code&gt;AM&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td style=&quot;vertical-align: middle;&quot;&gt;
                  &lt;code&gt;HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;td style=&quot;vertical-align: middle;&quot;&gt;
                  &lt;code&gt;0&lt;br&gt;&lt;/code&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/tbody&gt;
                  &lt;/table&gt;
                  &lt;br&gt;Default values are not applicable for the fields not listed above.
                  &lt;p&gt;
                  &lt;strong&gt;Example:&lt;/strong&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  // get the supported ids for GMT-08:00 (Pacific Standard Time)
                  String[] ids = TimeZone.getAvailableIDs(-8  60  60  1000);
                  // if no ids were returned, something is wrong. get out.
                  if (ids.length == 0)
                  System.exit(0);
                  // begin output
                  System.out.println(&quot;Current Time&quot;);
                  // create a Pacific Standard Time time zone
                  SimpleTimeZone pdt = new SimpleTimeZone(-8  60  60  1000, ids[0]);
                  // set up rules for Daylight Saving Time
                  pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2  60  60  1000);
                  pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2  60  60  1000);
                  // create a GregorianCalendar with the Pacific Daylight time zone
                  // and the current date and time
                  Calendar calendar = new GregorianCalendar(pdt);
                  Date trialTime = new Date();
                  calendar.setTime(trialTime);
                  // print out a bunch of interesting things
                  System.out.println(&quot;ERA: &quot; + calendar.get(Calendar.ERA));
                  System.out.println(&quot;YEAR: &quot; + calendar.get(Calendar.YEAR));
                  System.out.println(&quot;MONTH: &quot; + calendar.get(Calendar.MONTH));
                  System.out.println(&quot;WEEK_OF_YEAR: &quot; + calendar.get(Calendar.WEEK_OF_YEAR));
                  System.out.println(&quot;WEEK_OF_MONTH: &quot; + calendar.get(Calendar.WEEK_OF_MONTH));
                  System.out.println(&quot;DATE: &quot; + calendar.get(Calendar.DATE));
                  System.out.println(&quot;DAY_OF_MONTH: &quot; + calendar.get(Calendar.DAY_OF_MONTH));
                  System.out.println(&quot;DAY_OF_YEAR: &quot; + calendar.get(Calendar.DAY_OF_YEAR));
                  System.out.println(&quot;DAY_OF_WEEK: &quot; + calendar.get(Calendar.DAY_OF_WEEK));
                  System.out.println(&quot;DAY_OF_WEEK_IN_MONTH: &quot;
                  + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));
                  System.out.println(&quot;AM_PM: &quot; + calendar.get(Calendar.AM_PM));
                  System.out.println(&quot;HOUR: &quot; + calendar.get(Calendar.HOUR));
                  System.out.println(&quot;HOUR_OF_DAY: &quot; + calendar.get(Calendar.HOUR_OF_DAY));
                  System.out.println(&quot;MINUTE: &quot; + calendar.get(Calendar.MINUTE));
                  System.out.println(&quot;SECOND: &quot; + calendar.get(Calendar.SECOND));
                  System.out.println(&quot;MILLISECOND: &quot; + calendar.get(Calendar.MILLISECOND));
                  System.out.println(&quot;ZONE_OFFSET: &quot;
                  + (calendar.get(Calendar.ZONE_OFFSET)/(60601000)));
                  System.out.println(&quot;DST_OFFSET: &quot;
                  + (calendar.get(Calendar.DST_OFFSET)/(60601000)));
                  System.out.println(&quot;Current Time, with hour reset to 3&quot;);
                  calendar.clear(Calendar.HOUR_OF_DAY); // so doesn&apos;t override
                  calendar.set(Calendar.HOUR, 3);
                  System.out.println(&quot;ERA: &quot; + calendar.get(Calendar.ERA));
                  System.out.println(&quot;YEAR: &quot; + calendar.get(Calendar.YEAR));
                  System.out.println(&quot;MONTH: &quot; + calendar.get(Calendar.MONTH));
                  System.out.println(&quot;WEEK_OF_YEAR: &quot; + calendar.get(Calendar.WEEK_OF_YEAR));
                  System.out.println(&quot;WEEK_OF_MONTH: &quot; + calendar.get(Calendar.WEEK_OF_MONTH));
                  System.out.println(&quot;DATE: &quot; + calendar.get(Calendar.DATE));
                  System.out.println(&quot;DAY_OF_MONTH: &quot; + calendar.get(Calendar.DAY_OF_MONTH));
                  System.out.println(&quot;DAY_OF_YEAR: &quot; + calendar.get(Calendar.DAY_OF_YEAR));
                  System.out.println(&quot;DAY_OF_WEEK: &quot; + calendar.get(Calendar.DAY_OF_WEEK));
                  System.out.println(&quot;DAY_OF_WEEK_IN_MONTH: &quot;
                  + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));
                  System.out.println(&quot;AM_PM: &quot; + calendar.get(Calendar.AM_PM));
                  System.out.println(&quot;HOUR: &quot; + calendar.get(Calendar.HOUR));
                  System.out.println(&quot;HOUR_OF_DAY: &quot; + calendar.get(Calendar.HOUR_OF_DAY));
                  System.out.println(&quot;MINUTE: &quot; + calendar.get(Calendar.MINUTE));
                  System.out.println(&quot;SECOND: &quot; + calendar.get(Calendar.SECOND));
                  System.out.println(&quot;MILLISECOND: &quot; + calendar.get(Calendar.MILLISECOND));
                  System.out.println(&quot;ZONE_OFFSET: &quot;
                  + (calendar.get(Calendar.ZONE_OFFSET)/(60601000))); // in hours
                  System.out.println(&quot;DST_OFFSET: &quot;
                  + (calendar.get(Calendar.DST_OFFSET)/(60601000))); // in hours
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;                
                <see>
                    TimeZone                    
                </see>
                <author>
                    David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="BC" type="int" line="250"/>
            <javadoc line="250">
                Value of the &lt;code&gt;ERA&lt;/code&gt; field indicating
                  the period before the common era (before Christ), also known as BCE.
                  The sequence of years at the transition from &lt;code&gt;BC&lt;/code&gt; to &lt;code&gt;AD&lt;/code&gt; is
                  ..., 2 BC, 1 BC, 1 AD, 2 AD,...                
                <see>
                    #ERA                    
                </see>
            </javadoc>
            <declaration name="BCE" type="int" line="258"/>
            <javadoc line="258">
                Value of the {@link #ERA} field indicating
                  the period before the common era, the same value as {@link #BC}.                
                <see>
                    #CE                    
                </see>
            </javadoc>
            <declaration name="AD" type="int" line="264"/>
            <javadoc line="264">
                Value of the &lt;code&gt;ERA&lt;/code&gt; field indicating
                  the common era (Anno Domini), also known as CE.
                  The sequence of years at the transition from &lt;code&gt;BC&lt;/code&gt; to &lt;code&gt;AD&lt;/code&gt; is
                  ..., 2 BC, 1 BC, 1 AD, 2 AD,...                
                <see>
                    #ERA                    
                </see>
            </javadoc>
            <declaration name="CE" type="int" line="272"/>
            <javadoc line="272">
                Value of the {@link #ERA} field indicating
                  the common era, the same value as {@link #AD}.                
                <see>
                    #BCE                    
                </see>
            </javadoc>
            <declaration name="EPOCH_OFFSET" type="int" line="278"/>
            <declaration name="EPOCH_YEAR" type="int" line="279"/>
            <declaration name="MONTH_LENGTH" type="int" line="280"/>
            <declaration name="LEAP_MONTH_LENGTH" type="int" line="281"/>
            <declaration name="ONE_SECOND" type="int" line="282"/>
            <declaration name="ONE_MINUTE" type="int" line="283"/>
            <declaration name="ONE_HOUR" type="int" line="284"/>
            <declaration name="ONE_DAY" type="long" line="285"/>
            <declaration name="ONE_WEEK" type="long" line="286"/>
            <declaration name="MIN_VALUES" type="int" line="287"/>
            <declaration name="LEAST_MAX_VALUES" type="int" line="288"/>
            <declaration name="MAX_VALUES" type="int" line="289"/>
            <declaration name="serialVersionUID" type="long" line="290"/>
            <declaration name="gcal" type="Gregorian" line="291"/>
            <declaration name="jcal" type="JulianCalendar" line="292"/>
            <declaration name="jeras" type="Era[]" line="293"/>
            <declaration name="DEFAULT_GREGORIAN_CUTOVER" type="long" line="294"/>
            <declaration name="gregorianCutover" type="long" line="295"/>
            <javadoc line="295">
                The point at which the Gregorian calendar rules are used, measured in
                  milliseconds from the standard epoch.  Default is October 15, 1582
                  (Gregorian) 00:00:00 UTC or -12219292800000L.  For this value, October 4,
                  1582 (Julian) is followed by October 15, 1582 (Gregorian).  This
                  corresponds to Julian day number 2299161.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="gregorianCutoverDate" type="long" line="304"/>
            <javadoc line="304">
                The fixed date of the gregorianCutover.                
            </javadoc>
            <declaration name="gregorianCutoverYear" type="int" line="308"/>
            <javadoc line="308">
                The normalized year of the gregorianCutover in Gregorian, with
                  0 representing 1 BCE, -1 representing 2 BCE, etc.                
            </javadoc>
            <declaration name="gregorianCutoverYearJulian" type="int" line="313"/>
            <javadoc line="313">
                The normalized year of the gregorianCutover in Julian, with 0
                  representing 1 BCE, -1 representing 2 BCE, etc.                
            </javadoc>
            <declaration name="gdate" type="BaseCalendar.Date" line="318"/>
            <javadoc line="318">
                gdate always has a sun.util.calendar.Gregorian.Date instance to
                  avoid overhead of creating it. The assumption is that most
                  applications will need only Gregorian calendar calculations.                
            </javadoc>
            <declaration name="cdate" type="BaseCalendar.Date" line="324"/>
            <javadoc line="324">
                Reference to either gdate or a JulianCalendar.Date
                  instance. After calling complete(), this value is guaranteed to
                  be set.                
            </javadoc>
            <declaration name="calsys" type="BaseCalendar" line="330"/>
            <javadoc line="330">
                The CalendarSystem used to calculate the date in cdate. After
                  calling complete(), this value is guaranteed to be set and
                  consistent with the cdate value.                
            </javadoc>
            <declaration name="zoneOffsets" type="int[]" line="336"/>
            <javadoc line="336">
                Temporary int[2] to get time zone offsets. zoneOffsets[0] gets
                  the GMT offset value and zoneOffsets[1] gets the DST saving
                  value.                
            </javadoc>
            <declaration name="originalFields" type="int[]" line="342"/>
            <javadoc line="342">
                Temporary storage for saving original fields[] values in
                  non-lenient mode.                
            </javadoc>
            <javadoc line="347">
                Constructs a default &lt;code&gt;GregorianCalendar&lt;/code&gt; using the current time
                  in the default time zone with the default locale.                
            </javadoc>
            <method name="GregorianCalendar" type="constructor" line="351"/>
            <javadoc line="355">
                Constructs a &lt;code&gt;GregorianCalendar&lt;/code&gt; based on the current time
                  in the given time zone with the default locale.                
                <param>
                    zone the given time zone.                    
                </param>
            </javadoc>
            <method name="GregorianCalendar" type="constructor" line="360">
                <params>
                    <param name="zone" type="TimeZone"/>
                </params>
            </method>
            <javadoc line="363">
                Constructs a &lt;code&gt;GregorianCalendar&lt;/code&gt; based on the current time
                  in the default time zone with the given locale.                
                <param>
                    aLocale the given locale.                    
                </param>
            </javadoc>
            <method name="GregorianCalendar" type="constructor" line="368">
                <params>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="372">
                Constructs a &lt;code&gt;GregorianCalendar&lt;/code&gt; based on the current time
                  in the given time zone with the given locale.                
                <param>
                    zone the given time zone.                    
                </param>
                <param>
                    aLocale the given locale.                    
                </param>
            </javadoc>
            <method name="GregorianCalendar" type="constructor" line="378">
                <params>
                    <param name="zone" type="TimeZone"/>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="383">
                Constructs a &lt;code&gt;GregorianCalendar&lt;/code&gt; with the given date set
                  in the default time zone with the default locale.                
                <param>
                    year the value used to set the <code>YEAR</code> calendar field in the calendar.                    
                </param>
                <param>
                    month the value used to set the <code>MONTH</code> calendar field in the calendar.
                      Month value is 0-based. e.g., 0 for January.                    
                </param>
                <param>
                    dayOfMonth the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.                    
                </param>
            </javadoc>
            <method name="GregorianCalendar" type="constructor" line="391">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="dayOfMonth" type="int"/>
                </params>
            </method>
            <javadoc line="394">
                Constructs a &lt;code&gt;GregorianCalendar&lt;/code&gt; with the given date
                  and time set for the default time zone with the default locale.                
                <param>
                    year the value used to set the <code>YEAR</code> calendar field in the calendar.                    
                </param>
                <param>
                    month the value used to set the <code>MONTH</code> calendar field in the calendar.
                      Month value is 0-based. e.g., 0 for January.                    
                </param>
                <param>
                    dayOfMonth the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.                    
                </param>
                <param>
                    hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field
                      in the calendar.                    
                </param>
                <param>
                    minute the value used to set the <code>MINUTE</code> calendar field
                      in the calendar.                    
                </param>
            </javadoc>
            <method name="GregorianCalendar" type="constructor" line="406">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="dayOfMonth" type="int"/>
                    <param name="hourOfDay" type="int"/>
                    <param name="minute" type="int"/>
                </params>
            </method>
            <javadoc line="409">
                Constructs a GregorianCalendar with the given date
                  and time set for the default time zone with the default locale.                
                <param>
                    year the value used to set the <code>YEAR</code> calendar field in the calendar.                    
                </param>
                <param>
                    month the value used to set the <code>MONTH</code> calendar field in the calendar.
                      Month value is 0-based. e.g., 0 for January.                    
                </param>
                <param>
                    dayOfMonth the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.                    
                </param>
                <param>
                    hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field
                      in the calendar.                    
                </param>
                <param>
                    minute the value used to set the <code>MINUTE</code> calendar field
                      in the calendar.                    
                </param>
                <param>
                    second the value used to set the <code>SECOND</code> calendar field
                      in the calendar.                    
                </param>
            </javadoc>
            <method name="GregorianCalendar" type="constructor" line="423">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="dayOfMonth" type="int"/>
                    <param name="hourOfDay" type="int"/>
                    <param name="minute" type="int"/>
                    <param name="second" type="int"/>
                </params>
            </method>
            <javadoc line="426">
                Constructs a &lt;code&gt;GregorianCalendar&lt;/code&gt; with the given date
                  and time set for the default time zone with the default locale.                
                <param>
                    year the value used to set the <code>YEAR</code> calendar field in the calendar.                    
                </param>
                <param>
                    month the value used to set the <code>MONTH</code> calendar field in the calendar.
                      Month value is 0-based. e.g., 0 for January.                    
                </param>
                <param>
                    dayOfMonth the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.                    
                </param>
                <param>
                    hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field
                      in the calendar.                    
                </param>
                <param>
                    minute the value used to set the <code>MINUTE</code> calendar field
                      in the calendar.                    
                </param>
                <param>
                    second the value used to set the <code>SECOND</code> calendar field
                      in the calendar.                    
                </param>
                <param>
                    millis the value used to set the <code>MILLISECOND</code> calendar field                    
                </param>
            </javadoc>
            <method name="GregorianCalendar" type="constructor" line="441">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="dayOfMonth" type="int"/>
                    <param name="hourOfDay" type="int"/>
                    <param name="minute" type="int"/>
                    <param name="second" type="int"/>
                    <param name="millis" type="int"/>
                </params>
                <scope line="447"/>
                <scope line="451"/>
            </method>
            <javadoc line="460">
                Sets the &lt;code&gt;GregorianCalendar&lt;/code&gt; change date. This is the point when the switch
                  from Julian dates to Gregorian dates occurred. Default is October 15,
                  1582 (Gregorian). Previous to this, dates will be in the Julian calendar.
                  &lt;p&gt;
                  To obtain a pure Julian calendar, set the change date to
                  &lt;code&gt;Date(Long.MAX_VALUE)&lt;/code&gt;.  To obtain a pure Gregorian calendar,
                  set the change date to &lt;code&gt;Date(Long.MIN_VALUE)&lt;/code&gt;.                
                <param>
                    date the given Gregorian cutover date.                    
                </param>
            </javadoc>
            <method name="setGregorianChange" type="void" line="470">
                <params>
                    <param name="date" type="Date"/>
                </params>
                <declaration name="cutoverTime" type="long" line="471"/>
                <scope line="472"/>
            </method>
            <method name="setGregorianChange" type="void" line="478">
                <params>
                    <param name="cutoverTime" type="long"/>
                </params>
                <scope line="481"/>
                <declaration name="d" type="BaseCalendar.Date" line="484"/>
                <declaration name="jcal" type="BaseCalendar" line="486"/>
                <scope line="490"/>
            </method>
            <javadoc line="494">
                Gets the Gregorian Calendar change date.  This is the point when the
                  switch from Julian dates to Gregorian dates occurred. Default is
                  October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian
                  calendar.                
                <return>
                    the Gregorian cutover date for this <code>GregorianCalendar</code> object.                    
                </return>
            </javadoc>
            <method name="getGregorianChange" type="Date" line="501"/>
            <javadoc line="504">
                Determines if the given year is a leap year. Returns &lt;code&gt;true&lt;/code&gt; if
                  the given year is a leap year. To specify BC year numbers,
                  &lt;code&gt;1 - year number&lt;/code&gt; must be given. For example, year BC 4 is
                  specified as -3.                
                <param>
                    year the given year.                    
                </param>
                <return>
                    <code>true</code> if the given year is a leap year; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isLeapYear" type="boolean" line="512">
                <params>
                    <param name="year" type="int"/>
                </params>
                <scope line="513"/>
                <scope line="516"/>
                <scope line="519"/>
                <declaration name="gregorian" type="boolean" line="522"/>
                <scope line="523">
                    <declaration name="d" type="BaseCalendar.Date" line="524"/>
                </scope>
                <scope line="527"/>
            </method>
            <javadoc line="532">
                Compares this &lt;code&gt;GregorianCalendar&lt;/code&gt; to the specified
                  &lt;code&gt;Object&lt;/code&gt;. The result is &lt;code&gt;true&lt;/code&gt; if and
                  only if the argument is a &lt;code&gt;GregorianCalendar&lt;/code&gt; object
                  that represents the same time value (millisecond offset from
                  the &lt;a href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;) under the same
                  &lt;code&gt;Calendar&lt;/code&gt; parameters and Gregorian change date as
                  this object.                
                <param>
                    obj the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if this object is equal to <code>obj</code>;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    Calendar#compareTo(Calendar)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="545">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="548">
                Generates the hash code for this &lt;code&gt;GregorianCalendar&lt;/code&gt; object.                
            </javadoc>
            <method name="hashCode" type="int" line="551"/>
            <javadoc line="554">
                Adds the specified (signed) amount of time to the given calendar field,
                  based on the calendar&apos;s rules.
                  &lt;p&gt;&lt;em&gt;Add rule 1&lt;/em&gt;. The value of &lt;code&gt;field&lt;/code&gt;
                  after the call minus the value of &lt;code&gt;field&lt;/code&gt; before the
                  call is &lt;code&gt;amount&lt;/code&gt;, modulo any overflow that has occurred in
                  &lt;code&gt;field&lt;/code&gt;. Overflow occurs when a field value exceeds its
                  range and, as a result, the next larger field is incremented or
                  decremented and the field value is adjusted back into its range.&lt;/p&gt;
                  &lt;p&gt;&lt;em&gt;Add rule 2&lt;/em&gt;. If a smaller field is expected to be
                  invariant, but it is impossible for it to be equal to its
                  prior value because of changes in its minimum or maximum after
                  &lt;code&gt;field&lt;/code&gt; is changed, then its value is adjusted to be as close
                  as possible to its expected value. A smaller field represents a
                  smaller unit of time. &lt;code&gt;HOUR&lt;/code&gt; is a smaller field than
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;. No adjustment is made to smaller fields
                  that are not expected to be invariant. The calendar system
                  determines what fields are expected to be invariant.&lt;/p&gt;                
                <param>
                    field the calendar field.                    
                </param>
                <param>
                    amount the amount of date or time to be added to the field.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>field</code> is
                      <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
                      or if any calendar fields have out-of-range values in
                      non-lenient mode.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="579">
                <params>
                    <param name="field" type="int"/>
                    <param name="amount" type="int"/>
                </params>
                <scope line="580"/>
                <scope line="583"/>
                <scope line="587">
                    <declaration name="year" type="int" line="588"/>
                    <scope line="589">
                        <scope line="591"/>
                        <scope line="594"/>
                    </scope>
                    <scope line="599">
                        <scope line="601"/>
                        <scope line="604"/>
                    </scope>
                </scope>
                <scope line="611">
                    <declaration name="month" type="int" line="612"/>
                    <declaration name="year" type="int" line="613"/>
                    <declaration name="y_amount" type="int" line="614"/>
                    <scope line="615"/>
                    <scope line="618"/>
                    <scope line="621">
                        <scope line="622">
                            <scope line="624"/>
                            <scope line="627"/>
                        </scope>
                        <scope line="632">
                            <scope line="634"/>
                            <scope line="637"/>
                        </scope>
                    </scope>
                    <scope line="643"/>
                    <scope line="646">
                        <scope line="648"/>
                    </scope>
                </scope>
                <scope line="655">
                    <declaration name="era" type="int" line="656"/>
                    <scope line="657"/>
                    <scope line="660"/>
                </scope>
                <scope line="665">
                    <declaration name="delta" type="long" line="666"/>
                    <declaration name="timeOfDay" type="long" line="667"/>
                    <scope line="695"/>
                    <declaration name="fd" type="long" line="699"/>
                    <scope line="707"/>
                    <scope line="711"/>
                    <declaration name="zoneOffset" type="int" line="716"/>
                    <scope line="719">
                        <declaration name="fd2" type="long" line="721"/>
                        <scope line="722"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="728">
                Adds or subtracts (up/down) a single unit of time on the given time
                  field without changing larger fields.
                  &lt;p&gt;
                  &lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt;
                  originally set to December 31, 1999. Calling {@link #roll(int,boolean) roll(Calendar.MONTH, true)}sets the calendar to January 31, 1999.  The &lt;code&gt;YEAR&lt;/code&gt; field is unchanged
                  because it is a larger field than &lt;code&gt;MONTH&lt;/code&gt;.&lt;/p&gt;                
                <param>
                    up indicates if the value of the specified calendar field is to be
                      rolled up or rolled down. Use <code>true</code> if rolling up, <code>false</code> otherwise.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>field</code> is
                      <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
                      or if any calendar fields have out-of-range values in
                      non-lenient mode.                    
                </exception>
                <see>
                    #add(int,int)                    
                </see>
                <see>
                    #set(int,int)                    
                </see>
            </javadoc>
            <method name="roll" type="void" line="744">
                <params>
                    <param name="field" type="int"/>
                    <param name="up" type="boolean"/>
                </params>
            </method>
            <javadoc line="747">
                Adds a signed amount to the specified calendar field without changing larger fields.
                  A negative roll amount means to subtract from field without changing
                  larger fields. If the specified amount is 0, this method performs nothing.
                  &lt;p&gt;This method calls {@link #complete()} before adding the
                  amount so that all the calendar fields are normalized. If there
                  is any calendar field having an out-of-range value in non-lenient mode, then an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  &lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt;
                  originally set to August 31, 1999. Calling &lt;code&gt;roll(Calendar.MONTH,
                  8)&lt;/code&gt; sets the calendar to April 30, &lt;strong&gt;1999&lt;/strong&gt;. Using a
                  &lt;code&gt;GregorianCalendar&lt;/code&gt;, the &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field cannot
                  be 31 in the month April. &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; is set to the closest possible
                  value, 30. The &lt;code&gt;YEAR&lt;/code&gt; field maintains the value of 1999 because it
                  is a larger field than &lt;code&gt;MONTH&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt;
                  originally set to Sunday June 6, 1999. Calling
                  &lt;code&gt;roll(Calendar.WEEK_OF_MONTH, -1)&lt;/code&gt; sets the calendar to
                  Tuesday June 1, 1999, whereas calling
                  &lt;code&gt;add(Calendar.WEEK_OF_MONTH, -1)&lt;/code&gt; sets the calendar to
                  Sunday May 30, 1999. This is because the roll rule imposes an
                  additional constraint: The &lt;code&gt;MONTH&lt;/code&gt; must not change when the
                  &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; is rolled. Taken together with add rule 1,
                  the resultant date must be between Tuesday June 1 and Saturday June
                  5. According to add rule 2, the &lt;code&gt;DAY_OF_WEEK&lt;/code&gt;, an invariant
                  when changing the &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt;, is set to Tuesday, the
                  closest possible value to Sunday (where Sunday is the first day of the
                  week).&lt;/p&gt;                
                <param>
                    field the calendar field.                    
                </param>
                <param>
                    amount the signed amount to add to <code>field</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>field</code> is
                      <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
                      or if any calendar fields have out-of-range values in
                      non-lenient mode.                    
                </exception>
                <see>
                    #roll(int,boolean)                    
                </see>
                <see>
                    #add(int,int)                    
                </see>
                <see>
                    #set(int,int)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="roll" type="void" line="788">
                <params>
                    <param name="field" type="int"/>
                    <param name="amount" type="int"/>
                </params>
            </method>
            <javadoc line="1049">
                Returns the minimum value for the given calendar field of this
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The minimum value is
                  defined as the smallest value returned by the {@link Calendar#get(int) get} method for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},{@link #getGregorianChange() getGregorianChange} and{@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the minimum value for the given calendar field.                    
                </return>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="1062">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1065">
                Returns the maximum value for the given calendar field of this
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The maximum value is
                  defined as the largest value returned by the {@link Calendar#get(int) get} method for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},{@link #getGregorianChange() getGregorianChange} and{@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the maximum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="1078">
                <params>
                    <param name="field" type="int"/>
                </params>
                <scope line="1087">
                    <scope line="1088"/>
                    <declaration name="gc" type="GregorianCalendar" line="1091"/>
                    <declaration name="v1" type="int" line="1094"/>
                    <declaration name="v2" type="int" line="1096"/>
                </scope>
            </method>
            <javadoc line="1102">
                Returns the highest minimum value for the given calendar field
                  of this &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The highest
                  minimum value is defined as the largest value returned by{@link #getActualMinimum(int)} for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},{@link #getGregorianChange() getGregorianChange} and{@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the highest minimum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getGreatestMinimum" type="int" line="1115">
                <params>
                    <param name="field" type="int"/>
                </params>
                <scope line="1116">
                    <declaration name="d" type="BaseCalendar.Date" line="1117"/>
                    <declaration name="mon1" type="long" line="1118"/>
                </scope>
            </method>
            <javadoc line="1124">
                Returns the lowest maximum value for the given calendar field
                  of this &lt;code&gt;GregorianCalendar&lt;/code&gt; instance. The lowest
                  maximum value is defined as the smallest value returned by{@link #getActualMaximum(int)} for any possible time value,
                  taking into consideration the current values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},{@link #getGregorianChange() getGregorianChange} and{@link Calendar#getTimeZone() getTimeZone} methods.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the lowest maximum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getLeastMaximum" type="int" line="1137">
                <params>
                    <param name="field" type="int"/>
                </params>
                <scope line="1146">
                    <declaration name="gc" type="GregorianCalendar" line="1147"/>
                    <declaration name="v1" type="int" line="1150"/>
                    <declaration name="v2" type="int" line="1152"/>
                </scope>
            </method>
            <javadoc line="1158">
                Returns the minimum value that this calendar field could have,
                  taking into consideration the given time value and the current
                  values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},{@link #getGregorianChange() getGregorianChange} and{@link Calendar#getTimeZone() getTimeZone} methods.
                  &lt;p&gt;For example, if the Gregorian change date is January 10,
                  1970 and the date of this &lt;code&gt;GregorianCalendar&lt;/code&gt; is
                  January 20, 1970, the actual minimum value of the
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field is 10 because the previous date
                  of January 10, 1970 is December 27, 1996 (in the Julian
                  calendar). Therefore, December 28, 1969 to January 9, 1970
                  don&apos;t exist.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the minimum of the given field for the time value of
                      this <code>GregorianCalendar</code>                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getActualMinimum" type="int" line="1179">
                <params>
                    <param name="field" type="int"/>
                </params>
                <scope line="1180">
                    <declaration name="gc" type="GregorianCalendar" line="1181"/>
                    <declaration name="year" type="int" line="1182"/>
                    <scope line="1183">
                        <declaration name="month1" type="long" line="1184"/>
                        <declaration name="d" type="BaseCalendar.Date" line="1185"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1191">
                Returns the maximum value that this calendar field could have,
                  taking into consideration the given time value and the current
                  values of the{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},{@link #getGregorianChange() getGregorianChange} and{@link Calendar#getTimeZone() getTimeZone} methods.
                  For example, if the date of this instance is February 1, 2004,
                  the actual maximum value of the &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field
                  is 29 because 2004 is a leap year, and if the date of this
                  instance is February 1, 2005, it&apos;s 28.
                  &lt;p&gt;This method calculates the maximum value of {@link Calendar#WEEK_OF_YEAR WEEK_OF_YEAR} based on the {@link Calendar#YEAR YEAR} (calendar year) value, not the &lt;a
                  href=&quot;#week_year&quot;&gt;week year&lt;/a&gt;. Call {@link #getWeeksInWeekYear()} to get the maximum value of {@codeWEEK_OF_YEAR} in the week year of this {@code GregorianCalendar}.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the maximum of the given field for the time value of
                      this <code>GregorianCalendar</code>                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getActualMaximum" type="int" line="1211">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1413">
                Returns the millisecond offset from the beginning of this
                  year. This Calendar object must have been normalized.                
            </javadoc>
            <method name="getYearOffsetInMillis" type="long" line="1417">
                <declaration name="t" type="long" line="1418"/>
            </method>
            <method name="clone" type="Object" line="1427">
                <declaration name="other" type="GregorianCalendar" line="1428"/>
                <scope line="1430">
                    <scope line="1431"/>
                    <scope line="1434"/>
                </scope>
            </method>
            <method name="getTimeZone" type="TimeZone" line="1442">
                <declaration name="zone" type="TimeZone" line="1443"/>
                <scope line="1445"/>
            </method>
            <method name="setTimeZone" type="void" line="1450">
                <params>
                    <param name="zone" type="TimeZone"/>
                </params>
                <scope line="1453"/>
            </method>
            <javadoc line="1457">
                Returns {@code true} indicating this {@code GregorianCalendar}supports week dates.                
                <return>
                    {@code true} (always)                    
                </return>
                <see>
                    #getWeekYear()                    
                </see>
                <see>
                    #setWeekDate(int,int,int)                    
                </see>
                <see>
                    #getWeeksInWeekYear()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isWeekDateSupported" type="boolean" line="1465"/>
            <javadoc line="1468">
                Returns the &lt;a href=&quot;#week_year&quot;&gt;week year&lt;/a&gt; represented by this{@code GregorianCalendar}. The dates in the weeks between 1 and the
                  maximum week number of the week year have the same week year value
                  that may be one year before or after the {@link Calendar#YEAR YEAR}(calendar year) value.
                  &lt;p&gt;This method calls {@link Calendar#complete()} before
                  calculating the week year.                
                <return>
                    the week year represented by this {@code GregorianCalendar}.
                      If the {@link Calendar#ERA ERA} value is {@link #BC}, the year is
                      represented by 0 or a negative number: BC 1 is 0, BC 2
                      is -1, BC 3 is -2, and so on.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif any of the calendar fields is invalid in non-lenient mode.                    
                </throws>
                <see>
                    #isWeekDateSupported()                    
                </see>
                <see>
                    #getWeeksInWeekYear()                    
                </see>
                <see>
                    Calendar#getFirstDayOfWeek()                    
                </see>
                <see>
                    Calendar#getMinimalDaysInFirstWeek()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getWeekYear" type="int" line="1485">
                <declaration name="year" type="int" line="1486"/>
                <scope line="1487"/>
                <scope line="1490">
                    <declaration name="weekOfYear" type="int" line="1491"/>
                    <scope line="1492">
                        <scope line="1493"/>
                    </scope>
                    <scope line="1497">
                        <scope line="1498"/>
                    </scope>
                </scope>
                <declaration name="dayOfYear" type="int" line="1504"/>
                <declaration name="maxDayOfYear" type="int" line="1505"/>
                <declaration name="minimalDays" type="int" line="1506"/>
                <scope line="1507"/>
                <declaration name="cal" type="GregorianCalendar" line="1510"/>
                <declaration name="delta" type="int" line="1515"/>
                <scope line="1516">
                    <scope line="1517"/>
                </scope>
                <declaration name="minDayOfYear" type="int" line="1522"/>
                <scope line="1523">
                    <scope line="1524"/>
                </scope>
                <scope line="1528">
                    <declaration name="del" type="int" line="1532"/>
                    <scope line="1533">
                        <scope line="1534"/>
                    </scope>
                    <scope line="1540"/>
                    <scope line="1543">
                        <declaration name="days" type="int" line="1544"/>
                        <scope line="1545"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1552">
                Sets this {@code GregorianCalendar} to the date given by the
                  date specifiers - &lt;a href=&quot;#week_year&quot;&gt;{@code weekYear}&lt;/a&gt;,{@code weekOfYear}, and {@code dayOfWeek}. {@code weekOfYear}follows the &lt;a href=&quot;#week_and_year&quot;&gt;{@code WEEK_OF_YEAR}numbering&lt;/a&gt;.  The {@code dayOfWeek} value must be one of the{@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} values: {@link Calendar#SUNDAY SUNDAY} to {@link Calendar#SATURDAY SATURDAY}.
                  &lt;p&gt;Note that the numeric day-of-week representation differs from
                  the ISO 8601 standard, and that the {@code weekOfYear}numbering is compatible with the standard when 
                   is {@code MONDAY} and 
                   is 4.
                  &lt;p&gt;Unlike the {@code set} method, all of the calendar fields
                  and the instant of time value are calculated upon return.
                  &lt;p&gt;If {@code weekOfYear} is out of the valid week-of-year
                  range in {@code weekYear}, the {@code weekYear}and {@code weekOfYear} values are adjusted in lenient
                  mode, or an {@code IllegalArgumentException} is thrown in
                  non-lenient mode.                
                <param>
                    weekYear    the week year                    
                </param>
                <param>
                    weekOfYear  the week number based on {@code weekYear}                    
                </param>
                <param>
                    dayOfWeek   the day of week value: one of the constants
                      for the {@link #DAY_OF_WEEK DAY_OF_WEEK} field:{@link Calendar#SUNDAY SUNDAY}, ...,{@link Calendar#SATURDAY SATURDAY}.                    
                </param>
                <exception>
                    IllegalArgumentExceptionif any of the given date specifiers is invalid,
                      or if any of the calendar fields are inconsistent
                      with the given date specifiers in non-lenient mode                    
                </exception>
                <see>
                    GregorianCalendar#isWeekDateSupported()                    
                </see>
                <see>
                    Calendar#getFirstDayOfWeek()                    
                </see>
                <see>
                    Calendar#getMinimalDaysInFirstWeek()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setWeekDate" type="void" line="1575">
                <params>
                    <param name="weekYear" type="int"/>
                    <param name="weekOfYear" type="int"/>
                    <param name="dayOfWeek" type="int"/>
                </params>
                <scope line="1576"/>
                <declaration name="gc" type="GregorianCalendar" line="1579"/>
                <declaration name="era" type="int" line="1581"/>
                <declaration name="days" type="int" line="1588"/>
                <scope line="1589"/>
                <scope line="1593"/>
                <scope line="1596"/>
                <scope line="1599"/>
            </method>
            <javadoc line="1609">
                Returns the number of weeks in the &lt;a href=&quot;#week_year&quot;&gt;week year&lt;/a&gt;
                  represented by this {@code GregorianCalendar}.
                  &lt;p&gt;For example, if this {@code GregorianCalendar}&apos;s date is
                  December 31, 2008 with &lt;a href=&quot;#iso8601_compatible_setting&quot;&gt;the ISO
                  8601 compatible setting&lt;/a&gt;, this method will return 53 for the
                  period: December 29, 2008 to January 3, 2010 while {@link #getActualMaximum(int) getActualMaximum(WEEK_OF_YEAR)} will return
                  52 for the period: December 31, 2007 to December 28, 2008.                
                <return>
                    the number of weeks in the week year.                    
                </return>
                <see>
                    Calendar#WEEK_OF_YEAR                    
                </see>
                <see>
                    #getWeekYear()                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getWeeksInWeekYear" type="int" line="1623">
                <declaration name="gc" type="GregorianCalendar" line="1624"/>
                <declaration name="weekYear" type="int" line="1625"/>
                <scope line="1626"/>
                <scope line="1629"/>
            </method>
            <declaration name="cachedFixedDate" type="long" line="1635"/>
            <javadoc line="1635">
                The fixed date corresponding to gdate. If the value is
                  Long.MIN_VALUE, the fixed date value is unknown. Currently,
                  Julian calendar dates are not cached.                
            </javadoc>
            <javadoc line="1641">
                Converts the time value (millisecond offset from the &lt;a
                  href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;) to calendar field values.
                  The time is &lt;em&gt;not&lt;/em&gt;
                  recomputed first; to recompute the time, then the fields, call the
                  &lt;code&gt;complete&lt;/code&gt; method.                
                <see>
                    Calendar#complete                    
                </see>
            </javadoc>
            <method name="computeFields" type="void" line="1649"/>
            <javadoc line="1665">
                This computeFields implements the conversion from UTC
                  (millisecond offset from the Epoch) to calendar
                  field values. fieldMask specifies which fields to change the
                  setting state to COMPUTED, although all fields are set to
                  the correct values. This is required to fix 4685354.                
                <param>
                    fieldMask a bit mask to specify which fields to change
                      the setting state.                    
                </param>
                <param>
                    tzMask a bit mask to specify which time zone offset
                      fields to be used for time calculations                    
                </param>
                <return>
                    a new field mask that indicates what field values have
                      actually been set.                    
                </return>
            </javadoc>
            <method name="computeFields" type="int" line="1678">
                <params>
                    <param name="fieldMask" type="int"/>
                    <param name="tzMask" type="int"/>
                </params>
            </method>
            <javadoc line="1884">
                Returns the number of weeks in a period between fixedDay1 and
                  fixedDate. The getFirstDayOfWeek-getMinimalDaysInFirstWeek rule
                  is applied to calculate the number of weeks.                
                <param>
                    fixedDay1 the fixed date of the first day of the period                    
                </param>
                <param>
                    fixedDate the fixed date of the last day of the period                    
                </param>
                <return>
                    the number of weeks of the given period                    
                </return>
            </javadoc>
            <method name="getWeekNumber" type="int" line="1892">
                <params>
                    <param name="fixedDay1" type="long"/>
                    <param name="fixedDate" type="long"/>
                </params>
            </method>
            <javadoc line="1905">
                Converts calendar field values to the time value (millisecond
                  offset from the &lt;a href=&quot;Calendar.html#Epoch&quot;&gt;Epoch&lt;/a&gt;).                
                <exception>
                    IllegalArgumentException if any calendar fields are invalid.                    
                </exception>
            </javadoc>
            <method name="computeTime" type="void" line="1910">
                <scope line="1911">
                    <scope line="1912"/>
                    <scope line="1915">
                        <declaration name="value" type="int" line="1916"/>
                        <scope line="1917">
                            <scope line="1918"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="fieldMask" type="int" line="1925"/>
                <declaration name="year" type="int" line="1926"/>
                <declaration name="era" type="int" line="1927"/>
                <scope line="1928"/>
                <scope line="1931"/>
                <scope line="1934"/>
                <declaration name="timeOfDay" type="long" line="1938"/>
                <scope line="1939"/>
                <scope line="1942">
                    <scope line="1944"/>
                </scope>
                <declaration name="fixedDate" type="long" line="1954"/>
                <scope line="1956"/>
                <scope line="1960">
                    <declaration name="gfd" type="long" line="1961"/>
                    <scope line="1962">
                        <scope line="1964"/>
                    </scope>
                    <scope line="1970">
                        <scope line="1972"/>
                    </scope>
                    <scope line="1978"/>
                    <scope line="1982">
                        <scope line="1983"/>
                        <scope line="1987"/>
                    </scope>
                    <scope line="1992">
                        <scope line="1993"/>
                        <scope line="1996">
                            <scope line="1997"/>
                            <scope line="2000"/>
                        </scope>
                    </scope>
                    <scope line="2005">
                        <scope line="2006"/>
                        <scope line="2009">
                            <scope line="2010"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="millis" type="long" line="2017"/>
                <declaration name="zone" type="TimeZone" line="2018"/>
                <scope line="2019"/>
                <declaration name="tzMask" type="int" line="2022"/>
                <scope line="2023">
                    <scope line="2024"/>
                    <scope line="2027">
                        <declaration name="gmtOffset" type="int" line="2028"/>
                    </scope>
                </scope>
                <scope line="2032">
                    <scope line="2033"/>
                    <scope line="2036"/>
                </scope>
                <declaration name="mask" type="int" line="2042"/>
                <scope line="2043">
                    <scope line="2044">
                        <scope line="2045"/>
                        <scope line="2048">
                            <declaration name="s" type="String" line="2049"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2057">
                Computes the fixed date under either the Gregorian or the
                  Julian calendar, using the given year and the specified calendar fields.                
                <param>
                    cal the CalendarSystem to be used for the date calculation                    
                </param>
                <param>
                    year the normalized year number, with 0 indicating the
                      year 1 BCE, -1 indicating 2 BCE, etc.                    
                </param>
                <param>
                    fieldMask the calendar fields to be used for the date calculation                    
                </param>
                <return>
                    the fixed date                    
                </return>
                <see>
                    Calendar#selectFields                    
                </see>
            </javadoc>
            <method name="getFixedDate" type="long" line="2067">
                <params>
                    <param name="cal" type="BaseCalendar"/>
                    <param name="year" type="int"/>
                    <param name="fieldMask" type="int"/>
                </params>
                <declaration name="month" type="int" line="2068"/>
                <scope line="2069">
                    <scope line="2071"/>
                    <scope line="2075">
                        <declaration name="rem" type="int[]" line="2076"/>
                    </scope>
                </scope>
                <declaration name="fixedDate" type="long" line="2081"/>
                <scope line="2082">
                    <scope line="2083">
                        <scope line="2084"/>
                    </scope>
                    <scope line="2089">
                        <scope line="2090">
                            <declaration name="firstDayOfWeek" type="long" line="2091"/>
                            <scope line="2092"/>
                            <scope line="2095"/>
                        </scope>
                        <scope line="2100">
                            <declaration name="dayOfWeek" type="int" line="2101"/>
                            <scope line="2102"/>
                            <scope line="2105"/>
                            <declaration name="dowim" type="int" line="2108"/>
                            <scope line="2109"/>
                            <scope line="2112"/>
                            <scope line="2115"/>
                            <scope line="2118">
                                <declaration name="lastDate" type="int" line="2119"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2125">
                    <scope line="2126"/>
                    <scope line="2129"/>
                    <scope line="2133">
                        <declaration name="firstDayOfWeek" type="long" line="2134"/>
                        <scope line="2135"/>
                        <scope line="2138">
                            <declaration name="dayOfWeek" type="int" line="2139"/>
                            <scope line="2140"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2149">
                Returns this object if it&apos;s normalized (all fields and time are
                  in sync). Otherwise, a cloned object is returned after calling
                  complete() in lenient mode.                
            </javadoc>
            <method name="getNormalizedCalendar" type="GregorianCalendar" line="2154">
                <declaration name="gc" type="GregorianCalendar" line="2155"/>
                <scope line="2156"/>
                <scope line="2159"/>
            </method>
            <javadoc line="2166">
                Returns the Julian calendar system instance (singleton). &apos;jcal&apos;
                  and &apos;jeras&apos; are set upon the return.                
            </javadoc>
            <method name="getJulianCalendarSystem" type="BaseCalendar" line="2170">
                <scope line="2171"/>
            </method>
            <javadoc line="2177">
                Returns the calendar system for dates before the cutover date
                  in the cutover year. If the cutover date is January 1, the
                  method returns Gregorian. Otherwise, Julian.                
            </javadoc>
            <method name="getCutoverCalendarSystem" type="BaseCalendar" line="2182">
                <scope line="2183"/>
            </method>
            <javadoc line="2188">
                Determines if the specified year (normalized) is the Gregorian
                  cutover year. This object must have been normalized.                
            </javadoc>
            <method name="isCutoverYear" type="boolean" line="2192">
                <params>
                    <param name="normalizedYear" type="int"/>
                </params>
                <declaration name="cutoverYear" type="int" line="2193"/>
            </method>
            <javadoc line="2196">
                Returns the fixed date of the first day of the year (usually
                  January 1) before the specified date.                
                <param>
                    date the date for which the first day of the year is
                      calculated. The date has to be in the cut-over year (Gregorian
                      or Julian).                    
                </param>
                <param>
                    fixedDate the fixed date representation of the date                    
                </param>
            </javadoc>
            <method name="getFixedDateJan1" type="long" line="2204">
                <params>
                    <param name="date" type="BaseCalendar.Date"/>
                    <param name="fixedDate" type="long"/>
                </params>
            </method>
            <javadoc line="2214">
                Returns the fixed date of the first date of the month (usually
                  the 1st of the month) before the specified date.                
                <param>
                    date the date for which the first day of the month is
                      calculated. The date has to be in the cut-over year (Gregorian
                      or Julian).                    
                </param>
                <param>
                    fixedDate the fixed date representation of the date                    
                </param>
            </javadoc>
            <method name="getFixedDateMonth1" type="long" line="2222">
                <params>
                    <param name="date" type="BaseCalendar.Date"/>
                    <param name="fixedDate" type="long"/>
                </params>
            </method>
            <javadoc line="2243">
                Returns a CalendarDate produced from the specified fixed date.                
                <param>
                    fd the fixed date                    
                </param>
            </javadoc>
            <method name="getCalendarDate" type="BaseCalendar.Date" line="2247">
                <params>
                    <param name="fd" type="long"/>
                </params>
                <declaration name="cal" type="BaseCalendar" line="2248"/>
                <declaration name="d" type="BaseCalendar.Date" line="2249"/>
            </method>
            <javadoc line="2253">
                Returns the Gregorian cutover date as a BaseCalendar.Date. The
                  date is a Gregorian date.                
            </javadoc>
            <method name="getGregorianCutoverDate" type="BaseCalendar.Date" line="2257"/>
            <javadoc line="2260">
                Returns the day before the Gregorian cutover date as a
                  BaseCalendar.Date. The date is a Julian date.                
            </javadoc>
            <method name="getLastJulianDate" type="BaseCalendar.Date" line="2264"/>
            <javadoc line="2267">
                Returns the length of the specified month in the specified
                  year. The year number must be normalized.                
                <see>
                    #isLeapYear(int)                    
                </see>
            </javadoc>
            <method name="monthLength" type="int" line="2272">
                <params>
                    <param name="month" type="int"/>
                    <param name="year" type="int"/>
                </params>
            </method>
            <javadoc line="2275">
                Returns the length of the specified month in the year provided
                  by internalGet(YEAR).                
                <see>
                    #isLeapYear(int)                    
                </see>
            </javadoc>
            <method name="monthLength" type="int" line="2280">
                <params>
                    <param name="month" type="int"/>
                </params>
                <declaration name="year" type="int" line="2281"/>
                <scope line="2282"/>
            </method>
            <method name="actualMonthLength" type="int" line="2287">
                <declaration name="year" type="int" line="2288"/>
                <scope line="2289"/>
                <declaration name="date" type="BaseCalendar.Date" line="2292"/>
                <declaration name="fd" type="long" line="2293"/>
                <declaration name="month1" type="long" line="2294"/>
                <declaration name="next1" type="long" line="2295"/>
                <scope line="2296"/>
                <scope line="2299"/>
            </method>
            <javadoc line="2306">
                Returns the length (in days) of the specified year. The year
                  must be normalized.                
            </javadoc>
            <method name="yearLength" type="int" line="2310">
                <params>
                    <param name="year" type="int"/>
                </params>
            </method>
            <javadoc line="2313">
                Returns the length (in days) of the year provided by
                  internalGet(YEAR).                
            </javadoc>
            <method name="yearLength" type="int" line="2317">
                <declaration name="year" type="int" line="2318"/>
                <scope line="2319"/>
            </method>
            <javadoc line="2324">
                After adjustments such as add(MONTH), add(YEAR), we don&apos;t want the
                  month to jump around.  E.g., we don&apos;t want Jan 31 + 1 month to go to Mar
                  3, we want it to go to Feb 28.  Adjustments which might run into this
                  problem call this method to retain the proper month.                
            </javadoc>
            <method name="pinDayOfMonth" type="void" line="2330">
                <declaration name="year" type="int" line="2331"/>
                <declaration name="monthLen" type="int" line="2332"/>
                <scope line="2333"/>
                <scope line="2336">
                    <declaration name="gc" type="GregorianCalendar" line="2337"/>
                </scope>
                <declaration name="dom" type="int" line="2340"/>
                <scope line="2341"/>
            </method>
            <javadoc line="2345">
                Returns the fixed date value of this object. The time value and
                  calendar fields must be in synch.                
            </javadoc>
            <method name="getCurrentFixedDate" type="long" line="2349"/>
            <javadoc line="2352">
                Returns the new value after &apos;roll&apos;ing the specified value and amount.                
            </javadoc>
            <method name="getRolledValue" type="int" line="2355">
                <params>
                    <param name="value" type="int"/>
                    <param name="amount" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="2369">
                Returns the ERA.  We need a special method for this because the
                  default ERA is CE, but a zero (unset) ERA is BCE.                
            </javadoc>
            <method name="internalGetEra" type="int" line="2373"/>
            <javadoc line="2376">
                Updates internal state.                
            </javadoc>
            <method name="readObject" type="void" line="2379">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <scope line="2381"/>
            </method>
        </class>
    </source>