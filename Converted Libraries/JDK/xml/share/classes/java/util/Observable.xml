<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="Observable" line="2">
            <javadoc line="2">
                This class represents an observable object, or &quot;data&quot;
                  in the model-view paradigm. It can be subclassed to represent an
                  object that the application wants to have observed.
                  &lt;p&gt;
                  An observable object can have one or more observers. An observer
                  may be any object that implements interface &lt;tt&gt;Observer&lt;/tt&gt;. After an
                  observable instance changes, an application calling the
                  &lt;code&gt;Observable&lt;/code&gt;&apos;s &lt;code&gt;notifyObservers&lt;/code&gt; method
                  causes all of its observers to be notified of the change by a call
                  to their &lt;code&gt;update&lt;/code&gt; method.
                  &lt;p&gt;
                  The order in which notifications will be delivered is unspecified.
                  The default implementation provided in the Observable class will
                  notify Observers in the order in which they registered interest, but
                  subclasses may change this order, use no guaranteed order, deliver
                  notifications on separate threads, or may guarantee that their
                  subclass follows this order, as they choose.
                  &lt;p&gt;
                  Note that this notification mechanism is has nothing to do with threads
                  and is completely separate from the &lt;tt&gt;wait&lt;/tt&gt; and &lt;tt&gt;notify&lt;/tt&gt;
                  mechanism of class &lt;tt&gt;Object&lt;/tt&gt;.
                  &lt;p&gt;
                  When an observable object is newly created, its set of observers is
                  empty. Two observers are considered the same if and only if the
                  &lt;tt&gt;equals&lt;/tt&gt; method returns true for them.                
                <author>
                    Chris Warth                    
                </author>
                <see>
                    java.util.Observable#notifyObservers()                    
                </see>
                <see>
                    java.util.Observable#notifyObservers(java.lang.Object)                    
                </see>
                <see>
                    java.util.Observer                    
                </see>
                <see>
                    java.util.Observer#update(java.util.Observable,java.lang.Object)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="changed" type="boolean" line="36"/>
            <declaration name="obs" type="Vector" line="37"/>
            <javadoc line="38">
                Construct an Observable with zero Observers.                
            </javadoc>
            <method name="Observable" type="constructor" line="41"/>
            <javadoc line="44">
                Adds an observer to the set of observers for this object, provided
                  that it is not the same as some observer already in the set.
                  The order in which notifications will be delivered to multiple
                  observers is not specified. See the class comment.                
                <param>
                    o   an observer to be added.                    
                </param>
                <throws>
                    NullPointerException   if the parameter o is null.                    
                </throws>
            </javadoc>
            <method name="addObserver" type="void" line="52">
                <params>
                    <param name="o" type="Observer"/>
                </params>
                <scope line="54"/>
            </method>
            <javadoc line="58">
                Deletes an observer from the set of observers of this object.
                  Passing &lt;CODE&gt;null&lt;/CODE&gt; to this method will have no effect.                
                <param>
                    o   the observer to be deleted.                    
                </param>
            </javadoc>
            <method name="deleteObserver" type="void" line="63">
                <params>
                    <param name="o" type="Observer"/>
                </params>
            </method>
            <javadoc line="66">
                If this object has changed, as indicated by the
                  &lt;code&gt;hasChanged&lt;/code&gt; method, then notify all of its observers
                  and then call the &lt;code&gt;clearChanged&lt;/code&gt; method to
                  indicate that this object has no longer changed.
                  &lt;p&gt;
                  Each observer has its &lt;code&gt;update&lt;/code&gt; method called with two
                  arguments: this observable object and &lt;code&gt;null&lt;/code&gt;. In other
                  words, this method is equivalent to:
                  &lt;blockquote&gt;&lt;tt&gt;
                  notifyObservers(null)&lt;/tt&gt;&lt;/blockquote&gt;                
                <see>
                    java.util.Observable#clearChanged()                    
                </see>
                <see>
                    java.util.Observable#hasChanged()                    
                </see>
                <see>
                    java.util.Observer#update(java.util.Observable,java.lang.Object)                    
                </see>
            </javadoc>
            <method name="notifyObservers" type="void" line="81"/>
            <javadoc line="84">
                If this object has changed, as indicated by the
                  &lt;code&gt;hasChanged&lt;/code&gt; method, then notify all of its observers
                  and then call the &lt;code&gt;clearChanged&lt;/code&gt; method to indicate
                  that this object has no longer changed.
                  &lt;p&gt;
                  Each observer has its &lt;code&gt;update&lt;/code&gt; method called with two
                  arguments: this observable object and the &lt;code&gt;arg&lt;/code&gt; argument.                
                <param>
                    arg   any object.                    
                </param>
                <see>
                    java.util.Observable#clearChanged()                    
                </see>
                <see>
                    java.util.Observable#hasChanged()                    
                </see>
                <see>
                    java.util.Observer#update(java.util.Observable,java.lang.Object)                    
                </see>
            </javadoc>
            <method name="notifyObservers" type="void" line="97">
                <params>
                    <param name="arg" type="Object"/>
                </params>
                <declaration name="arrLocal" type="Object[]" line="98"/>
                <scope line="99"/>
            </method>
            <javadoc line="106">
                Clears the observer list so that this object no longer has any observers.                
            </javadoc>
            <method name="deleteObservers" type="void" line="109"/>
            <javadoc line="112">
                Marks this &lt;tt&gt;Observable&lt;/tt&gt; object as having been changed; the
                  &lt;tt&gt;hasChanged&lt;/tt&gt; method will now return &lt;tt&gt;true&lt;/tt&gt;.                
            </javadoc>
            <method name="setChanged" type="void" line="116"/>
            <javadoc line="119">
                Indicates that this object has no longer changed, or that it has
                  already notified all of its observers of its most recent change,
                  so that the &lt;tt&gt;hasChanged&lt;/tt&gt; method will now return &lt;tt&gt;false&lt;/tt&gt;.
                  This method is called automatically by the
                  &lt;code&gt;notifyObservers&lt;/code&gt; methods.                
                <see>
                    java.util.Observable#notifyObservers()                    
                </see>
                <see>
                    java.util.Observable#notifyObservers(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="clearChanged" type="void" line="128"/>
            <javadoc line="131">
                Tests if this object has changed.                
                <return>
                    <code>true</code> if and only if the <code>setChanged</code>
                      method has been called more recently than the
                      <code>clearChanged</code> method on this object;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.util.Observable#clearChanged()                    
                </see>
                <see>
                    java.util.Observable#setChanged()                    
                </see>
            </javadoc>
            <method name="hasChanged" type="boolean" line="140"/>
            <javadoc line="143">
                Returns the number of observers of this &lt;tt&gt;Observable&lt;/tt&gt; object.                
                <return>
                    the number of observers of this object.                    
                </return>
            </javadoc>
            <method name="countObservers" type="int" line="147"/>
        </class>
    </source>