<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="Set">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Collection">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="2">
                A collection that contains no duplicate elements.  More formally, sets
                  contain no pair of elements &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; such that
                  &lt;code&gt;e1.equals(e2)&lt;/code&gt;, and at most one null element.  As implied by
                  its name, this interface models the mathematical &lt;i&gt;set&lt;/i&gt; abstraction.
                  &lt;p&gt;The &lt;tt&gt;Set&lt;/tt&gt; interface places additional stipulations, beyond those
                  inherited from the &lt;tt&gt;Collection&lt;/tt&gt; interface, on the contracts of all
                  constructors and on the contracts of the &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt; and
                  &lt;tt&gt;hashCode&lt;/tt&gt; methods.  Declarations for other inherited methods are
                  also included here for convenience.  (The specifications accompanying these
                  declarations have been tailored to the &lt;tt&gt;Set&lt;/tt&gt; interface, but they do
                  not contain any additional stipulations.)
                  &lt;p&gt;The additional stipulation on constructors is, not surprisingly,
                  that all constructors must create a set that contains no duplicate elements
                  (as defined above).
                  &lt;p&gt;Note: Great care must be exercised if mutable objects are used as set
                  elements.  The behavior of a set is not specified if the value of an object
                  is changed in a manner that affects &lt;tt&gt;equals&lt;/tt&gt; comparisons while the
                  object is an element in the set.  A special case of this prohibition is
                  that it is not permissible for a set to contain itself as an element.
                  &lt;p&gt;Some set implementations have restrictions on the elements that
                  they may contain.  For example, some implementations prohibit null elements,
                  and some have restrictions on the types of their elements.  Attempting to
                  add an ineligible element throws an unchecked exception, typically
                  &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.  Attempting
                  to query the presence of an ineligible element may throw an exception,
                  or it may simply return false; some implementations will exhibit the former
                  behavior and some will exhibit the latter.  More generally, attempting an
                  operation on an ineligible element whose completion would not result in
                  the insertion of an ineligible element into the set may throw an
                  exception or it may succeed, at the option of the implementation.
                  Such exceptions are marked as &quot;optional&quot; in the specification for this
                  interface.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    &lt;E&gt;
                      the type of elements maintained by this set                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    List                    
                </see>
                <see>
                    SortedSet                    
                </see>
                <see>
                    HashSet                    
                </see>
                <see>
                    TreeSet                    
                </see>
                <see>
                    AbstractSet                    
                </see>
                <see>
                    Collections#singleton(java.lang.Object)                    
                </see>
                <see>
                    Collections#EMPTY_SET                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="size" type="int" line="53"/>
            <javadoc line="53">
                Returns the number of elements in this set (its cardinality).  If this
                  set contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns
                  &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.                
                <return>
                    the number of elements in this set (its cardinality)                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="60"/>
            <javadoc line="60">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="65"/>
            <javadoc line="65">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this set
                  contains an element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this set is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this set
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      set does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="iterator" type="Iterator&lt;E&gt;" line="80"/>
            <javadoc line="80">
                Returns an iterator over the elements in this set.  The elements are
                  returned in no particular order (unless this set is an instance of some
                  class that provides a guarantee).                
                <return>
                    an iterator over the elements in this set                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="87"/>
            <javadoc line="87">
                Returns an array containing all of the elements in this set.
                  If this set makes any guarantees as to what order its elements
                  are returned by its iterator, this method must return the
                  elements in the same order.
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it
                  are maintained by this set.  (In other words, this method must
                  allocate a new array even if this set is backed by an array).
                  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all the elements in this set                    
                </return>
            </javadoc>
            <method name="toArray" type="T[]" line="101"/>
            <javadoc line="101">
                Returns an array containing all of the elements in this set; the
                  runtime type of the returned array is that of the specified array.
                  If the set fits in the specified array, it is returned therein.
                  Otherwise, a new array is allocated with the runtime type of the
                  specified array and the size of this set.
                  &lt;p&gt;If this set fits in the specified array with room to spare
                  (i.e., the array has more elements than this set), the element in
                  the array immediately following the end of the set is set to
                  &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of this
                  set &lt;i&gt;only&lt;/i&gt; if the caller knows that this set does not contain
                  any null elements.)
                  &lt;p&gt;If this set makes any guarantees as to what order its elements
                  are returned by its iterator, this method must return the elements
                  in the same order.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a set known to contain only strings.
                  The following code can be used to dump the set into a newly allocated
                  array of &lt;tt&gt;String&lt;/tt&gt;:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of this set are to be
                      stored, if it is big enough; otherwise, a new array of the same
                      runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing all the elements in this set                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in this
                      set                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="137"/>
            <javadoc line="137">
                Adds the specified element to this set if it is not already present
                  (optional operation).  More formally, adds the specified element
                  &lt;tt&gt;e&lt;/tt&gt; to this set if the set contains no element &lt;tt&gt;e2&lt;/tt&gt;
                  such that
                  &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.
                  If this set already contains the element, the call leaves the set
                  unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.  In combination with the
                  restriction on constructors, this ensures that sets never contain
                  duplicate elements.
                  &lt;p&gt;The stipulation above does not imply that sets must accept all
                  elements; sets may refuse to add any particular element, including
                  &lt;tt&gt;null&lt;/tt&gt;, and throw an exception, as described in the
                  specification for {@link Collection#add Collection.add}.
                  Individual set implementations should clearly document any
                  restrictions on the elements that they may contain.                
                <param>
                    e element to be added to this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified
                      element                    
                </return>
                <throws>
                    UnsupportedOperationException if the &lt;tt&gt;add&lt;/tt&gt; operation
                      is not supported by this set                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      set does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified element
                      prevents it from being added to this set                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="166"/>
            <javadoc line="166">
                Removes the specified element from this set if it is present
                  (optional operation).  More formally, removes an element &lt;tt&gt;e&lt;/tt&gt;
                  such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;, if
                  this set contains such an element.  Returns &lt;tt&gt;true&lt;/tt&gt; if this set
                  contained the element (or equivalently, if this set changed as a
                  result of the call).  (This set will not contain the element once the
                  call returns.)                
                <param>
                    o object to be removed from this set, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contained the specified element                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this set
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      set does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    UnsupportedOperationException if the &lt;tt&gt;remove&lt;/tt&gt; operation
                      is not supported by this set                    
                </throws>
            </javadoc>
            <method name="containsAll" type="boolean" line="187"/>
            <javadoc line="187">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains all of the elements of the
                  specified collection.  If the specified collection is also a set, this
                  method returns &lt;tt&gt;true&lt;/tt&gt; if it is a &lt;i&gt;subset&lt;/i&gt; of this set.                
                <param>
                    c collection to be checked for containment in this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains all of the elements of the
                      specified collection                    
                </return>
                <throws>
                    ClassCastException if the types of one or more elements
                      in the specified collection are incompatible with this
                      set
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified collection contains one
                      or more null elements and this set does not permit null
                      elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="206"/>
            <javadoc line="206">
                Adds all of the elements in the specified collection to this set if
                  they&apos;re not already present (optional operation).  If the specified
                  collection is also a set, the &lt;tt&gt;addAll&lt;/tt&gt; operation effectively
                  modifies this set so that its value is the &lt;i&gt;union&lt;/i&gt; of the two
                  sets.  The behavior of this operation is undefined if the specified
                  collection is modified while the operation is in progress.                
                <param>
                    c collection containing elements to be added to this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the &lt;tt&gt;addAll&lt;/tt&gt; operation
                      is not supported by this set                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of the
                      specified collection prevents it from being added to this set                    
                </throws>
                <throws>
                    NullPointerException if the specified collection contains one
                      or more null elements and this set does not permit null
                      elements, or if the specified collection is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of an element of the
                      specified collection prevents it from being added to this set                    
                </throws>
                <see>
                    #add(Object)                    
                </see>
            </javadoc>
            <method name="retainAll" type="boolean" line="227"/>
            <javadoc line="227">
                Retains only the elements in this set that are contained in the
                  specified collection (optional operation).  In other words, removes
                  from this set all of its elements that are not contained in the
                  specified collection.  If the specified collection is also a set, this
                  operation effectively modifies this set so that its value is the
                  &lt;i&gt;intersection&lt;/i&gt; of the two sets.                
                <param>
                    c collection containing elements to be retained in this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the &lt;tt&gt;retainAll&lt;/tt&gt; operation
                      is not supported by this set                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of this set
                      is incompatible with the specified collection
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if this set contains a null element and the
                      specified collection does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
            </javadoc>
            <method name="removeAll" type="boolean" line="248"/>
            <javadoc line="248">
                Removes from this set all of its elements that are contained in the
                  specified collection (optional operation).  If the specified
                  collection is also a set, this operation effectively modifies this
                  set so that its value is the &lt;i&gt;asymmetric set difference&lt;/i&gt; of
                  the two sets.                
                <param>
                    c collection containing elements to be removed from this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the &lt;tt&gt;removeAll&lt;/tt&gt; operation
                      is not supported by this set                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of this set
                      is incompatible with the specified collection
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if this set contains a null element and the
                      specified collection does not permit null elements
                      (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="clear" type="void" line="269"/>
            <javadoc line="269">
                Removes all of the elements from this set (optional operation).
                  The set will be empty after this call returns.                
                <throws>
                    UnsupportedOperationException if the &lt;tt&gt;clear&lt;/tt&gt; method
                      is not supported by this set                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="276"/>
            <javadoc line="276">
                Compares the specified object with this set for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the specified object is also a set, the two sets
                  have the same size, and every member of the specified set is
                  contained in this set (or equivalently, every member of this set is
                  contained in the specified set).  This definition ensures that the
                  equals method works properly across different implementations of the
                  set interface.                
                <param>
                    o object to be compared for equality with this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this set                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="288"/>
            <javadoc line="288">
                Returns the hash code value for this set.  The hash code of a set is
                  defined to be the sum of the hash codes of the elements in the set,
                  where the hash code of a &lt;tt&gt;null&lt;/tt&gt; element is defined to be zero.
                  This ensures that &lt;tt&gt;s1.equals(s2)&lt;/tt&gt; implies that
                  &lt;tt&gt;s1.hashCode()==s2.hashCode()&lt;/tt&gt; for any two sets &lt;tt&gt;s1&lt;/tt&gt;
                  and &lt;tt&gt;s2&lt;/tt&gt;, as required by the general contract of{@link Object#hashCode}.                
                <return>
                    the hash code value for this set                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    Set#equals(Object)                    
                </see>
            </javadoc>
        </interface>
    </source>