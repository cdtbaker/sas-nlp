<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.ByteOrder"/>
        <import package="java.nio.LongBuffer"/>
        <class name="BitSet" line="33">
            <comment line="65">
                BitSets are packed into arrays of &quot;words.&quot;  Currently a word is
                 a long, which consists of 64 bits, requiring 6 address bits.
                 The choice of word size is determined purely by performance concerns.                
            </comment>
            <comment line="74">
                                
            </comment>
            <comment line="104">
                                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="33">
                This class implements a vector of bits that grows as needed. Each
                  component of the bit set has a {@code boolean} value. The
                  bits of a {@code BitSet} are indexed by nonnegative integers.
                  Individual indexed bits can be examined, set, or cleared. One{@code BitSet} may be used to modify the contents of another{@code BitSet} through logical AND, logical inclusive OR, and
                  logical exclusive OR operations.
                  &lt;p&gt;By default, all bits in the set initially have the value{@code false}.
                  &lt;p&gt;Every bit set has a current size, which is the number of bits
                  of space currently in use by the bit set. Note that the size is
                  related to the implementation of a bit set, so it may change with
                  implementation. The length of a bit set relates to logical length
                  of a bit set and is defined independently of implementation.
                  &lt;p&gt;Unless otherwise noted, passing a null parameter to any of the
                  methods in a {@code BitSet} will result in a{@code NullPointerException}.
                  &lt;p&gt;A {@code BitSet} is not safe for multithreaded use without
                  external synchronization.                
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Michael McCloskey                    
                </author>
                <author>
                    Martin Buchholz                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="ADDRESS_BITS_PER_WORD" type="int" line="69"/>
            <declaration name="BITS_PER_WORD" type="int" line="70"/>
            <declaration name="BIT_INDEX_MASK" type="int" line="71"/>
            <declaration name="WORD_MASK" type="long" line="74"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="76"/>
            <javadoc line="76">
                @serialField bits long[]
                  The bits in this BitSet.  The ith bit is stored in bits[i/64] at
                  bit position i % 64 (where bit position 0 refers to the least
                  significant bit and 63 refers to the most significant bit).                
            </javadoc>
            <declaration name="words" type="long[]" line="87"/>
            <javadoc line="87">
                The internal field corresponding to the serialField &quot;bits&quot;.                
            </javadoc>
            <declaration name="wordsInUse" type="int" line="92"/>
            <javadoc line="92">
                The number of words in the logical size of this BitSet.                
            </javadoc>
            <declaration name="sizeIsSticky" type="boolean" line="97"/>
            <javadoc line="97">
                Whether the size of &quot;words&quot; is user-specified.  If so, we assume
                  the user knows what he&apos;s doing and try harder to preserve it.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="104"/>
            <javadoc line="106">
                Given a bit index, return word index containing it.                
            </javadoc>
            <method name="wordIndex" type="int" line="109">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
            </method>
            <javadoc line="113">
                Every public method must preserve these invariants.                
            </javadoc>
            <method name="checkInvariants" type="void" line="116"/>
            <javadoc line="122">
                Sets the field wordsInUse to the logical size in words of the bit set.
                  WARNING:This method assumes that the number of words actually in use is
                  less than or equal to the current value of wordsInUse!                
            </javadoc>
            <method name="recalculateWordsInUse" type="void" line="127">
                <comment line="128">
                    Traverse the bitset until a used word is found                    
                </comment>
                <comment line="134">
                    The new logical size                    
                </comment>
                <declaration name="i" type="int" line="129"/>
            </method>
            <javadoc line="137">
                Creates a new bit set. All bits are initially {@code false}.                
            </javadoc>
            <method name="BitSet" type="constructor" line="140"/>
            <javadoc line="145">
                Creates a bit set whose initial size is large enough to explicitly
                  represent bits with indices in the range {@code 0} through{@code nbits-1}. All bits are initially {@code false}.                
                <param>
                    nbits the initial size of the bit set                    
                </param>
                <throws>
                    NegativeArraySizeException if the specified initial size
                      is negative                    
                </throws>
            </javadoc>
            <method name="BitSet" type="constructor" line="154">
                <params>
                    <param name="nbits" type="int"/>
                </params>
                <comment line="155">
                    nbits can&apos;t be negative; size 0 is OK                    
                </comment>
            </method>
            <method name="initWords" type="void" line="163">
                <params>
                    <param name="nbits" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Creates a bit set using words as the internal representation.
                  The last word (if there is one) must be non-zero.                
            </javadoc>
            <method name="BitSet" type="constructor" line="171">
                <params>
                    <param name="words" type="long[]"/>
                </params>
            </method>
            <javadoc line="177">
                Returns a new bit set containing all the bits in the given long array.
                  &lt;p&gt;More precisely,
                  &lt;br&gt;{@code BitSet.valueOf(longs).get(n) == ((longs[n/64] &amp; (1L&lt;&lt;(n%64))) != 0)}&lt;br&gt;for all {@code n &lt; 64  longs.length}.
                  &lt;p&gt;This method is equivalent to{@code BitSet.valueOf(LongBuffer.wrap(longs))}.                
                <param>
                    longs a long array containing a little-endian representation
                      of a sequence of bits to be used as the initial bits of the
                      new bit set                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="valueOf" type="BitSet" line="192">
                <params>
                    <param name="longs" type="long[]"/>
                </params>
                <declaration name="n" type="int" line="193"/>
            </method>
            <javadoc line="199">
                Returns a new bit set containing all the bits in the given long
                  buffer between its position and limit.
                  &lt;p&gt;More precisely,
                  &lt;br&gt;{@code BitSet.valueOf(lb).get(n) == ((lb.get(lb.position()+n/64) &amp; (1L&lt;&lt;(n%64))) != 0)}&lt;br&gt;for all {@code n &lt; 64  lb.remaining()}.
                  &lt;p&gt;The long buffer is not modified by this method, and no
                  reference to the buffer is retained by the bit set.                
                <param>
                    lb a long buffer containing a little-endian representation
                      of a sequence of bits between its position and limit, to be
                      used as the initial bits of the new bit set                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="valueOf" type="BitSet" line="215">
                <params>
                    <param name="lb" type="LongBuffer"/>
                </params>
                <declaration name="n" type="int" line="217"/>
                <declaration name="words" type="long[]" line="220"/>
            </method>
            <javadoc line="225">
                Returns a new bit set containing all the bits in the given byte array.
                  &lt;p&gt;More precisely,
                  &lt;br&gt;{@code BitSet.valueOf(bytes).get(n) == ((bytes[n/8] &amp; (1&lt;&lt;(n%8))) != 0)}&lt;br&gt;for all {@code n &lt;  8  bytes.length}.
                  &lt;p&gt;This method is equivalent to{@code BitSet.valueOf(ByteBuffer.wrap(bytes))}.                
                <param>
                    bytes a byte array containing a little-endian
                      representation of a sequence of bits to be used as the
                      initial bits of the new bit set                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="valueOf" type="BitSet" line="240">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <javadoc line="244">
                Returns a new bit set containing all the bits in the given byte
                  buffer between its position and limit.
                  &lt;p&gt;More precisely,
                  &lt;br&gt;{@code BitSet.valueOf(bb).get(n) == ((bb.get(bb.position()+n/8) &amp; (1&lt;&lt;(n%8))) != 0)}&lt;br&gt;for all {@code n &lt; 8  bb.remaining()}.
                  &lt;p&gt;The byte buffer is not modified by this method, and no
                  reference to the buffer is retained by the bit set.                
                <param>
                    bb a byte buffer containing a little-endian representation
                      of a sequence of bits between its position and limit, to be
                      used as the initial bits of the new bit set                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="valueOf" type="BitSet" line="260">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <declaration name="n" type="int" line="262"/>
                <declaration name="words" type="long[]" line="265"/>
                <declaration name="i" type="int" line="267"/>
            </method>
            <javadoc line="275">
                Returns a new byte array containing all the bits in this bit set.
                  &lt;p&gt;More precisely, if
                  &lt;br&gt;{@code byte[] bytes = s.toByteArray();}&lt;br&gt;then {@code bytes.length == (s.length()+7)/8} and
                  &lt;br&gt;{@code s.get(n) == ((bytes[n/8] &amp; (1&lt;&lt;(n%8))) != 0)}&lt;br&gt;for all {@code n &lt; 8  bytes.length}.                
                <return>
                    a byte array containing a little-endian representation
                      of all the bits in this bit set                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="toByteArray" type="byte[]" line="288">
                <declaration name="n" type="int" line="289"/>
                <declaration name="len" type="int" line="292"/>
                <declaration name="bytes" type="byte[]" line="295"/>
                <declaration name="bb" type="ByteBuffer" line="296"/>
            </method>
            <javadoc line="304">
                Returns a new long array containing all the bits in this bit set.
                  &lt;p&gt;More precisely, if
                  &lt;br&gt;{@code long[] longs = s.toLongArray();}&lt;br&gt;then {@code longs.length == (s.length()+63)/64} and
                  &lt;br&gt;{@code s.get(n) == ((longs[n/64] &amp; (1L&lt;&lt;(n%64))) != 0)}&lt;br&gt;for all {@code n &lt; 64  longs.length}.                
                <return>
                    a long array containing a little-endian representation
                      of all the bits in this bit set                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="toLongArray" type="long[]" line="317"/>
            <javadoc line="321">
                Ensures that the BitSet can hold enough words.                
                <param>
                    wordsRequired the minimum acceptable number of words.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="325">
                <params>
                    <param name="wordsRequired" type="int"/>
                </params>
                <comment line="327">
                    Allocate larger of doubled size or required size                    
                </comment>
                <scope line="326">
                    <declaration name="request" type="int" line="328"/>
                </scope>
            </method>
            <javadoc line="334">
                Ensures that the BitSet can accommodate a given wordIndex,
                  temporarily violating the invariants.  The caller must
                  restore the invariants before returning to the user,
                  possibly using recalculateWordsInUse().                
                <param>
                    wordIndex the index to be accommodated.                    
                </param>
            </javadoc>
            <method name="expandTo" type="void" line="341">
                <params>
                    <param name="wordIndex" type="int"/>
                </params>
                <declaration name="wordsRequired" type="int" line="342"/>
                <scope line="343"/>
            </method>
            <javadoc line="349">
                Checks that fromIndex ... toIndex is a valid range of bit indices.                
            </javadoc>
            <method name="checkRange" type="void" line="352">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="362">
                Sets the bit at the specified index to the complement of its
                  current value.                
                <param>
                    bitIndex the index of the bit to flip                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="flip" type="void" line="370">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
                <declaration name="wordIndex" type="int" line="374"/>
            </method>
            <javadoc line="383">
                Sets each bit from the specified {@code fromIndex} (inclusive) to the
                  specified {@code toIndex} (exclusive) to the complement of its current
                  value.                
                <param>
                    fromIndex index of the first bit to flip                    
                </param>
                <param>
                    toIndex index after the last bit to flip                    
                </param>
                <throws>
                    IndexOutOfBoundsException if {@code fromIndex} is negative,
                      or {@code toIndex} is negative, or {@code fromIndex} is
                      larger than {@code toIndex}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="flip" type="void" line="395">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <comment line="408">
                    Case 1: One word                    
                </comment>
                <comment line="411">
                    Case 2: Multiple words                    
                </comment>
                <comment line="412">
                    Handle first word                    
                </comment>
                <comment line="415">
                    Handle intermediate words, if any                    
                </comment>
                <comment line="419">
                    Handle last word                    
                </comment>
                <declaration name="startWordIndex" type="int" line="401"/>
                <declaration name="endWordIndex" type="int" line="402"/>
                <declaration name="firstWordMask" type="long" line="405"/>
                <declaration name="lastWordMask" type="long" line="406"/>
                <scope line="407"/>
                <scope line="410"/>
            </method>
            <javadoc line="427">
                Sets the bit at the specified index to {@code true}.                
                <param>
                    bitIndex a bit index                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="set" type="void" line="434">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
                <comment line="441">
                    Restores invariants                    
                </comment>
                <declaration name="wordIndex" type="int" line="438"/>
            </method>
            <javadoc line="446">
                Sets the bit at the specified index to the specified value.                
                <param>
                    bitIndex a bit index                    
                </param>
                <param>
                    value a boolean value to set                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="set" type="void" line="454">
                <params>
                    <param name="bitIndex" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="461">
                Sets the bits from the specified {@code fromIndex} (inclusive) to the
                  specified {@code toIndex} (exclusive) to {@code true}.                
                <param>
                    fromIndex index of the first bit to be set                    
                </param>
                <param>
                    toIndex index after the last bit to be set                    
                </param>
                <throws>
                    IndexOutOfBoundsException if {@code fromIndex} is negative,
                      or {@code toIndex} is negative, or {@code fromIndex} is
                      larger than {@code toIndex}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="set" type="void" line="472">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <comment line="478">
                    Increase capacity if necessary                    
                </comment>
                <comment line="486">
                    Case 1: One word                    
                </comment>
                <comment line="489">
                    Case 2: Multiple words                    
                </comment>
                <comment line="490">
                    Handle first word                    
                </comment>
                <comment line="493">
                    Handle intermediate words, if any                    
                </comment>
                <comment line="497">
                    Handle last word (restores invariants)                    
                </comment>
                <declaration name="startWordIndex" type="int" line="479"/>
                <declaration name="endWordIndex" type="int" line="480"/>
                <declaration name="firstWordMask" type="long" line="483"/>
                <declaration name="lastWordMask" type="long" line="484"/>
                <scope line="485"/>
                <scope line="488"/>
            </method>
            <javadoc line="504">
                Sets the bits from the specified {@code fromIndex} (inclusive) to the
                  specified {@code toIndex} (exclusive) to the specified value.                
                <param>
                    fromIndex index of the first bit to be set                    
                </param>
                <param>
                    toIndex index after the last bit to be set                    
                </param>
                <param>
                    value value to set the selected bits to                    
                </param>
                <throws>
                    IndexOutOfBoundsException if {@code fromIndex} is negative,
                      or {@code toIndex} is negative, or {@code fromIndex} is
                      larger than {@code toIndex}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="set" type="void" line="516">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="523">
                Sets the bit specified by the index to {@code false}.                
                <param>
                    bitIndex the index of the bit to be cleared                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="clear" type="void" line="530">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
                <declaration name="wordIndex" type="int" line="534"/>
            </method>
            <javadoc line="544">
                Sets the bits from the specified {@code fromIndex} (inclusive) to the
                  specified {@code toIndex} (exclusive) to {@code false}.                
                <param>
                    fromIndex index of the first bit to be cleared                    
                </param>
                <param>
                    toIndex index after the last bit to be cleared                    
                </param>
                <throws>
                    IndexOutOfBoundsException if {@code fromIndex} is negative,
                      or {@code toIndex} is negative, or {@code fromIndex} is
                      larger than {@code toIndex}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="clear" type="void" line="555">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <comment line="574">
                    Case 1: One word                    
                </comment>
                <comment line="577">
                    Case 2: Multiple words                    
                </comment>
                <comment line="578">
                    Handle first word                    
                </comment>
                <comment line="581">
                    Handle intermediate words, if any                    
                </comment>
                <comment line="585">
                    Handle last word                    
                </comment>
                <declaration name="startWordIndex" type="int" line="561"/>
                <declaration name="endWordIndex" type="int" line="565"/>
                <scope line="566"/>
                <declaration name="firstWordMask" type="long" line="571"/>
                <declaration name="lastWordMask" type="long" line="572"/>
                <scope line="573"/>
                <scope line="576"/>
            </method>
            <javadoc line="593">
                Sets all of the bits in this BitSet to {@code false}.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="clear" type="void" line="598"/>
            <javadoc line="603">
                Returns the value of the bit with the specified index. The value
                  is {@code true} if the bit with the index {@code bitIndex}is currently set in this {@code BitSet}; otherwise, the result
                  is {@code false}.                
                <param>
                    bitIndex   the bit index                    
                </param>
                <return>
                    the value of the bit with the specified index                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
            </javadoc>
            <method name="get" type="boolean" line="613">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
                <declaration name="wordIndex" type="int" line="619"/>
            </method>
            <javadoc line="624">
                Returns a new {@code BitSet} composed of bits from this {@code BitSet}from {@code fromIndex} (inclusive) to {@code toIndex} (exclusive).                
                <param>
                    fromIndex index of the first bit to include                    
                </param>
                <param>
                    toIndex index after the last bit to include                    
                </param>
                <return>
                    a new {@code BitSet} from a range of this {@code BitSet}                    
                </return>
                <throws>
                    IndexOutOfBoundsException if {@code fromIndex} is negative,
                      or {@code toIndex} is negative, or {@code fromIndex} is
                      larger than {@code toIndex}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="get" type="BitSet" line="636">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <comment line="643">
                    If no set bits in range return empty bitset                    
                </comment>
                <comment line="647">
                    An optimization                    
                </comment>
                <comment line="656">
                    Process all words but the last word                    
                </comment>
                <comment line="662">
                    Process the last word                    
                </comment>
                <comment line="666">
                                        
                </comment>
                <comment line="672">
                    Set wordsInUse correctly                    
                </comment>
                <declaration name="len" type="int" line="641"/>
                <declaration name="result" type="BitSet" line="651"/>
                <declaration name="targetWords" type="int" line="652"/>
                <declaration name="sourceIndex" type="int" line="653"/>
                <declaration name="wordAligned" type="boolean" line="654"/>
                <declaration name="lastWordMask" type="long" line="663"/>
            </method>
            <javadoc line="680">
                Returns the index of the first bit that is set to {@code true}that occurs on or after the specified starting index. If no such
                  bit exists then {@code -1} is returned.
                  &lt;p&gt;To iterate over the {@code true} bits in a {@code BitSet},
                  use the following loop:
                  &lt;pre&gt; {@code}for (int i = bs.nextSetBit(0); i &gt;= 0; i = bs.nextSetBit(i+1)) 
                  // operate on index i here
                  }}&lt;/pre&gt;                
                <param>
                    fromIndex the index to start checking from (inclusive)                    
                </param>
                <return>
                    the index of the next set bit, or {@code -1} if there
                      is no such bit                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="nextSetBit" type="int" line="699">
                <params>
                    <param name="fromIndex" type="int"/>
                </params>
                <declaration name="u" type="int" line="705"/>
                <declaration name="word" type="long" line="709"/>
                <scope line="711"/>
            </method>
            <javadoc line="720">
                Returns the index of the first bit that is set to {@code false}that occurs on or after the specified starting index.                
                <param>
                    fromIndex the index to start checking from (inclusive)                    
                </param>
                <return>
                    the index of the next clear bit                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="nextClearBit" type="int" line="729">
                <params>
                    <param name="fromIndex" type="int"/>
                </params>
                <comment line="730">
                    Neither spec nor implementation handle bitsets of maximal length.                    
                </comment>
                <comment line="731">
                    See 4816253.                    
                </comment>
                <declaration name="u" type="int" line="737"/>
                <declaration name="word" type="long" line="741"/>
                <scope line="743"/>
            </method>
            <javadoc line="752">
                Returns the index of the nearest bit that is set to {@code true}that occurs on or before the specified starting index.
                  If no such bit exists, or if {@code -1} is given as the
                  starting index, then {@code -1} is returned.
                  &lt;p&gt;To iterate over the {@code true} bits in a {@code BitSet},
                  use the following loop:
                  &lt;pre&gt; {@code}for (int i = bs.length(); (i = bs.previousSetBit(i-1)) &gt;= 0; ) 
                  // operate on index i here
                  }}&lt;/pre&gt;                
                <param>
                    fromIndex the index to start checking from (inclusive)                    
                </param>
                <return>
                    the index of the previous set bit, or {@code -1} if there
                      is no such bit                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is less
                      than {@code -1}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="previousSetBit" type="int" line="773">
                <params>
                    <param name="fromIndex" type="int"/>
                </params>
                <scope line="774"/>
                <declaration name="u" type="int" line="783"/>
                <declaration name="word" type="long" line="787"/>
                <scope line="789"/>
            </method>
            <javadoc line="798">
                Returns the index of the nearest bit that is set to {@code false}that occurs on or before the specified starting index.
                  If no such bit exists, or if {@code -1} is given as the
                  starting index, then {@code -1} is returned.                
                <param>
                    fromIndex the index to start checking from (inclusive)                    
                </param>
                <return>
                    the index of the previous clear bit, or {@code -1} if there
                      is no such bit                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is less
                      than {@code -1}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="previousClearBit" type="int" line="811">
                <params>
                    <param name="fromIndex" type="int"/>
                </params>
                <scope line="812"/>
                <declaration name="u" type="int" line="821"/>
                <declaration name="word" type="long" line="825"/>
                <scope line="827"/>
            </method>
            <javadoc line="836">
                Returns the &quot;logical size&quot; of this {@code BitSet}: the index of
                  the highest set bit in the {@code BitSet} plus one. Returns zero
                  if the {@code BitSet} contains no set bits.                
                <return>
                    the logical size of this {@code BitSet}                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="length" type="int" line="844"/>
            <javadoc line="852">
                Returns true if this {@code BitSet} contains no bits that are set
                  to {@code true}.                
                <return>
                    boolean indicating whether this {@code BitSet} is empty                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isEmpty" type="boolean" line="859"/>
            <javadoc line="863">
                Returns true if the specified {@code BitSet} has any bits set to{@code true} that are also set to {@code true} in this {@code BitSet}.                
                <param>
                    set {@code BitSet} to intersect with                    
                </param>
                <return>
                    boolean indicating whether this {@code BitSet} intersects
                      the specified {@code BitSet}                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="872">
                <params>
                    <param name="set" type="BitSet"/>
                </params>
            </method>
            <javadoc line="879">
                Returns the number of bits set to {@code true} in this {@code BitSet}.                
                <return>
                    the number of bits set to {@code true} in this {@code BitSet}                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="cardinality" type="int" line="885">
                <declaration name="sum" type="int" line="886"/>
            </method>
            <javadoc line="892">
                Performs a logical &lt;b&gt;AND&lt;/b&gt; of this target bit set with the
                  argument bit set. This bit set is modified so that each bit in it
                  has the value {@code true} if and only if it both initially
                  had the value {@code true} and the corresponding bit in the
                  bit set argument also had the value {@code true}.                
                <param>
                    set a bit set                    
                </param>
            </javadoc>
            <method name="and" type="void" line="901">
                <params>
                    <param name="set" type="BitSet"/>
                </params>
                <comment line="908">
                    Perform logical AND on words in common                    
                </comment>
            </method>
            <javadoc line="916">
                Performs a logical &lt;b&gt;OR&lt;/b&gt; of this bit set with the bit set
                  argument. This bit set is modified so that a bit in it has the
                  value {@code true} if and only if it either already had the
                  value {@code true} or the corresponding bit in the bit set
                  argument has the value {@code true}.                
                <param>
                    set a bit set                    
                </param>
            </javadoc>
            <method name="or" type="void" line="925">
                <params>
                    <param name="set" type="BitSet"/>
                </params>
                <comment line="936">
                    Perform logical OR on words in common                    
                </comment>
                <comment line="940">
                    Copy any remaining words                    
                </comment>
                <comment line="946">
                    recalculateWordsInUse() is unnecessary                    
                </comment>
                <declaration name="wordsInCommon" type="int" line="929"/>
                <scope line="931"/>
            </method>
            <javadoc line="950">
                Performs a logical &lt;b&gt;XOR&lt;/b&gt; of this bit set with the bit set
                  argument. This bit set is modified so that a bit in it has the
                  value {@code true} if and only if one of the following
                  statements holds:
                  &lt;ul&gt;
                  &lt;li&gt;The bit initially has the value {@code true}, and the
                  corresponding bit in the argument has the value {@code false}.
                  &lt;li&gt;The bit initially has the value {@code false}, and the
                  corresponding bit in the argument has the value {@code true}.
                  &lt;/ul&gt;                
                <param>
                    set a bit set                    
                </param>
            </javadoc>
            <method name="xor" type="void" line="964">
                <params>
                    <param name="set" type="BitSet"/>
                </params>
                <comment line="972">
                    Perform logical XOR on words in common                    
                </comment>
                <comment line="976">
                    Copy any remaining words                    
                </comment>
                <declaration name="wordsInCommon" type="int" line="965"/>
                <scope line="967"/>
            </method>
            <javadoc line="986">
                Clears all of the bits in this {@code BitSet} whose corresponding
                  bit is set in the specified {@code BitSet}.                
                <param>
                    set the {@code BitSet} with which to mask this{@code BitSet}                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="andNot" type="void" line="994">
                <params>
                    <param name="set" type="BitSet"/>
                </params>
                <comment line="995">
                    Perform logical (a &amp; !b) on words in common                    
                </comment>
            </method>
            <javadoc line="1003">
                Returns the hash code value for this bit set. The hash code depends
                  only on which bits are set within this {@code BitSet}.
                  &lt;p&gt;The hash code is defined to be the result of the following
                  calculation:
                  &lt;pre&gt; {@code}public int hashCode() 
                  long h = 1234;
                  long[] words = toLongArray();
                  for (int i = words.length; --i &gt;= 0; )
                  h ^= words[i]  (i + 1);
                  return (int)((h &gt;&gt; 32) ^ h);
                  }}&lt;/pre&gt;
                  Note that the hash code changes if the set of bits is altered.                
                <return>
                    the hash code value for this bit set                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="1021">
                <declaration name="h" type="long" line="1022"/>
            </method>
            <javadoc line="1029">
                Returns the number of bits of space actually in use by this{@code BitSet} to represent bit values.
                  The maximum element in the set is the size - 1st element.                
                <return>
                    the number of bits currently in this bit set                    
                </return>
            </javadoc>
            <method name="size" type="int" line="1036"/>
            <javadoc line="1040">
                Compares this object against the specified object.
                  The result is {@code true} if and only if the argument is
                  not {@code null} and is a {@code Bitset} object that has
                  exactly the same set of bits set to {@code true} as this bit
                  set. That is, for every nonnegative {@code int} index {@code k},
                  &lt;pre&gt;((BitSet)obj).get(k) == this.get(k)&lt;/pre&gt;
                  must be true. The current sizes of the two bit sets are not compared.                
                <param>
                    obj the object to compare with                    
                </param>
                <return>
                    {@code true} if the objects are the same;{@code false} otherwise                    
                </return>
                <see>
                    #size()                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="1054">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="1068">
                    Check words in use by both BitSets                    
                </comment>
                <declaration name="set" type="BitSet" line="1060"/>
            </method>
            <javadoc line="1076">
                Cloning this {@code BitSet} produces a new {@code BitSet}that is equal to it.
                  The clone of the bit set is another bit set that has exactly the
                  same bits set to {@code true} as this bit set.                
                <return>
                    a clone of this bit set                    
                </return>
                <see>
                    #size()                    
                </see>
            </javadoc>
            <method name="clone" type="Object" line="1085">
                <scope line="1089">
                    <declaration name="result" type="BitSet" line="1090"/>
                </scope>
                <scope line="1094"/>
            </method>
            <javadoc line="1099">
                Attempts to reduce internal storage used for the bits in this bit set.
                  Calling this method may, but is not required to, affect the value
                  returned by a subsequent call to the {@link #size()} method.                
            </javadoc>
            <method name="trimToSize" type="void" line="1104">
                <scope line="1105"/>
            </method>
            <javadoc line="1111">
                Save the state of the {@code BitSet} instance to a stream (i.e.,
                  serialize it).                
            </javadoc>
            <method name="writeObject" type="void" line="1116">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="fields" type="ObjectOutputStream.PutField" line="1123"/>
            </method>
            <javadoc line="1128">
                Reconstitute the {@code BitSet} instance from a stream (i.e.,
                  deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="1133">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="1138">
                    Assume maximum length then find real length                    
                </comment>
                <comment line="1139">
                    because recalculateWordsInUse assumes maintenance                    
                </comment>
                <comment line="1140">
                    or reduction in logical size                    
                </comment>
                <comment line="1143">
                    heuristic                    
                </comment>
                <declaration name="fields" type="ObjectInputStream.GetField" line="1135"/>
            </method>
            <javadoc line="1147">
                Returns a string representation of this bit set. For every index
                  for which this {@code BitSet} contains a bit in the set
                  state, the decimal representation of that index is included in
                  the result. Such indices are listed in order from lowest to
                  highest, separated by &quot;,&amp;nbsp;&quot; (a comma and a space) and
                  surrounded by braces, resulting in the usual mathematical
                  notation for a set of integers.
                  &lt;p&gt;Example:
                  &lt;pre&gt;
                  BitSet drPepper = new BitSet();&lt;/pre&gt;
                  Now {@code drPepper.toString()} returns &quot;{@code} 
                  &quot;.&lt;p&gt;
                  &lt;pre&gt;
                  drPepper.set(2);&lt;/pre&gt;
                  Now {@code drPepper.toString()} returns &quot;{@code} 
                  2}}&quot;.&lt;p&gt;
                  &lt;pre&gt;
                  drPepper.set(4);
                  drPepper.set(10);&lt;/pre&gt;
                  Now {@code drPepper.toString()} returns &quot;{@code} 
                  2, 4, 10}}&quot;.                
                <return>
                    a string representation of this bit set                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1170">
                <declaration name="numBits" type="int" line="1173"/>
                <declaration name="b" type="StringBuilder" line="1175"/>
                <declaration name="i" type="int" line="1178"/>
                <scope line="1179">
                    <scope line="1181">
                        <declaration name="endOfRun" type="int" line="1182"/>
                        <scope line="1183"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>