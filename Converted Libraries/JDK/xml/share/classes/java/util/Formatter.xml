<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.BufferedWriter"/>
        <import package="java.io.Closeable"/>
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.Flushable"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.OutputStreamWriter"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.BigInteger"/>
        <import package="java.math.MathContext"/>
        <import package="java.math.RoundingMode"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.IllegalCharsetNameException"/>
        <import package="java.nio.charset.UnsupportedCharsetException"/>
        <import package="java.text.DateFormatSymbols"/>
        <import package="java.text.DecimalFormat"/>
        <import package="java.text.DecimalFormatSymbols"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.util.regex.Matcher"/>
        <import package="java.util.regex.Pattern"/>
        <import package="sun.misc.FpUtils"/>
        <import package="sun.misc.DoubleConsts"/>
        <import package="sun.misc.FormattedFloatingDecimal"/>
        <class name="Formatter" line="57">
            <comment line="1846">
                1 (sign) + 19 (max # sig digits) + 1 (&apos;.&apos;) + 1 (&apos;e&apos;) + 1 (sign)
                 + 3 (max # exp digits) + 4 (error) = 30                
            </comment>
            <comment line="1874">
                                
            </comment>
            <comment line="2505">
                %[argument_index$][flags][width][.precision][t]conversion                
            </comment>
            <implements interface="Closeable"/>
            <implements interface="Flushable"/>
            <javadoc line="57">
                An interpreter for printf-style format strings.  This class provides support
                  for layout justification and alignment, common formats for numeric, string,
                  and date/time data, and locale-specific output.  Common Java types such as{@code byte}, {@link java.math.BigDecimal BigDecimal}, and {@link Calendar}are supported.  Limited formatting customization for arbitrary user types is
                  provided through the {@link Formattable} interface.
                  &lt;p&gt; Formatters are not necessarily safe for multithreaded access.  Thread
                  safety is optional and is the responsibility of users of methods in this
                  class.
                  &lt;p&gt; Formatted printing for the Java language is heavily inspired by C&apos;s{@code printf}.  Although the format strings are similar to C, some
                  customizations have been made to accommodate the Java language and exploit
                  some of its features.  Also, Java formatting is more strict than C&apos;s; for
                  example, if a conversion is incompatible with a flag, an exception will be
                  thrown.  In C inapplicable flags are silently ignored.  The format strings
                  are thus intended to be recognizable to C programmers but not necessarily
                  completely compatible with those in C.
                  &lt;p&gt; Examples of expected usage:
                  &lt;blockquote&gt;&lt;pre&gt;
                  StringBuilder sb = new StringBuilder();
                  // Send all output to the Appendable object sb
                  Formatter formatter = new Formatter(sb, Locale.US);
                  // Explicit argument indices may be used to re-order output.
                  formatter.format(&quot;%4$2s %3$2s %2$2s %1$2s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)
                  // -&amp;gt; &quot; d  c  b  a&quot;
                  // Optional locale as the first argument can be used to get
                  // locale-specific formatting of numbers.  The precision and width can be
                  // given to round and align the value.
                  formatter.format(Locale.FRANCE, &quot;e = %+10.4f&quot;, Math.E);
                  // -&amp;gt; &quot;e =    +2,7183&quot;
                  // The &apos;(&apos; numeric flag may be used to format negative numbers with
                  // parentheses rather than a minus sign.  Group separators are
                  // automatically inserted.
                  formatter.format(&quot;Amount gained or lost since last statement: $ %(,.2f&quot;,
                  balanceDelta);
                  // -&amp;gt; &quot;Amount gained or lost since last statement: $ (6,217.58)&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Convenience methods for common formatting requests exist as illustrated
                  by the following invocations:
                  &lt;blockquote&gt;&lt;pre&gt;
                  // Writes a formatted string to System.out.
                  System.out.format(&quot;Local time: %tT&quot;, Calendar.getInstance());
                  // -&amp;gt; &quot;Local time: 13:34:18&quot;
                  // Writes formatted output to System.err.
                  System.err.printf(&quot;Unable to open file &apos;%1$s&apos;: %2$s&quot;,
                  fileName, exception.getMessage());
                  // -&amp;gt; &quot;Unable to open file &apos;food&apos;: No such file or directory&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Like C&apos;s {@code sprintf(3)}, Strings may be formatted using the static
                  method {@link String#format(String,Object...) String.format}:
                  &lt;blockquote&gt;&lt;pre&gt;
                  // Format a string containing a date.
                  import java.util.Calendar;
                  import java.util.GregorianCalendar;
                  import static java.util.Calendar.;
                  Calendar c = new GregorianCalendar(1995, MAY, 23);
                  String s = String.format(&quot;Duke&apos;s Birthday: %1$tm %1$te,%1$tY&quot;, c);
                  // -&amp;gt; s == &quot;Duke&apos;s Birthday: May 23, 1995&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;h3&gt;&lt;a name=&quot;org&quot;&gt;Organization&lt;/a&gt;&lt;/h3&gt;
                  &lt;p&gt; This specification is divided into two sections.  The first section, &lt;a
                  href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;, covers the basic formatting concepts.  This
                  section is intended for users who want to get started quickly and are
                  familiar with formatted printing in other programming languages.  The second
                  section, &lt;a href=&quot;#detail&quot;&gt;Details&lt;/a&gt;, covers the specific implementation
                  details.  It is intended for users who want more precise specification of
                  formatting behavior.
                  &lt;h3&gt;&lt;a name=&quot;summary&quot;&gt;Summary&lt;/a&gt;&lt;/h3&gt;
                  &lt;p&gt; This section is intended to provide a brief overview of formatting
                  concepts.  For precise behavioral details, refer to the &lt;a
                  href=&quot;#detail&quot;&gt;Details&lt;/a&gt; section.
                  &lt;h4&gt;&lt;a name=&quot;syntax&quot;&gt;Format String Syntax&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt; Every method which produces formatted output requires a &lt;i&gt;format
                  string&lt;/i&gt; and an &lt;i&gt;argument list&lt;/i&gt;.  The format string is a {@link String} which may contain fixed text and one or more embedded &lt;i&gt;format
                  specifiers&lt;/i&gt;.  Consider the following example:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Calendar c = ...;
                  String s = String.format(&quot;Duke&apos;s Birthday: %1$tm %1$te,%1$tY&quot;, c);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  This format string is the first argument to the {@code format} method.  It
                  contains three format specifiers &quot;{@code %1$tm}&quot;, &quot;{@code %1$te}&quot;, and
                  &quot;{@code %1$tY}&quot; which indicate how the arguments should be processed and
                  where they should be inserted in the text.  The remaining portions of the
                  format string are fixed text including {@code &quot;Dukes Birthday: &quot;} and any
                  other spaces or punctuation.
                  The argument list consists of all arguments passed to the method after the
                  format string.  In the above example, the argument list is of size one and
                  consists of the {@link java.util.Calendar Calendar} object {@code c}.
                  &lt;ul&gt;
                  &lt;li&gt; The format specifiers for general, character, and numeric types have
                  the following syntax:
                  &lt;blockquote&gt;&lt;pre&gt;
                  %[argument_index$][flags][width][.precision]conversion
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The optional &lt;i&gt;argument_index&lt;/i&gt; is a decimal integer indicating the
                  position of the argument in the argument list.  The first argument is
                  referenced by &quot;{@code 1$}&quot;, the second by &quot;{@code 2$}&quot;, etc.
                  &lt;p&gt; The optional &lt;i&gt;flags&lt;/i&gt; is a set of characters that modify the output
                  format.  The set of valid flags depends on the conversion.
                  &lt;p&gt; The optional &lt;i&gt;width&lt;/i&gt; is a non-negative decimal integer indicating
                  the minimum number of characters to be written to the output.
                  &lt;p&gt; The optional &lt;i&gt;precision&lt;/i&gt; is a non-negative decimal integer usually
                  used to restrict the number of characters.  The specific behavior depends on
                  the conversion.
                  &lt;p&gt; The required &lt;i&gt;conversion&lt;/i&gt; is a character indicating how the
                  argument should be formatted.  The set of valid conversions for a given
                  argument depends on the argument&apos;s data type.
                  &lt;li&gt; The format specifiers for types which are used to represents dates and
                  times have the following syntax:
                  &lt;blockquote&gt;&lt;pre&gt;
                  %[argument_index$][flags][width]conversion
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The optional &lt;i&gt;argument_index&lt;/i&gt;, &lt;i&gt;flags&lt;/i&gt; and &lt;i&gt;width&lt;/i&gt; are
                  defined as above.
                  &lt;p&gt; The required &lt;i&gt;conversion&lt;/i&gt; is a two character sequence.  The first
                  character is {@code &apos;t&apos;} or {@code &apos;T&apos;}.  The second character indicates
                  the format to be used.  These characters are similar to but not completely
                  identical to those defined by GNU {@code date} and POSIX{@code strftime(3c)}.
                  &lt;li&gt; The format specifiers which do not correspond to arguments have the
                  following syntax:
                  &lt;blockquote&gt;&lt;pre&gt;
                  %[flags][width]conversion
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The optional &lt;i&gt;flags&lt;/i&gt; and &lt;i&gt;width&lt;/i&gt; is defined as above.
                  &lt;p&gt; The required &lt;i&gt;conversion&lt;/i&gt; is a character indicating content to be
                  inserted in the output.
                  &lt;/ul&gt;
                  &lt;h4&gt; Conversions &lt;/h4&gt;
                  &lt;p&gt; Conversions are divided into the following categories:
                  &lt;ol&gt;
                  &lt;li&gt; &lt;b&gt;General&lt;/b&gt; - may be applied to any argument
                  type
                  &lt;li&gt; &lt;b&gt;Character&lt;/b&gt; - may be applied to basic types which represent
                  Unicode characters: {@code char}, {@link Character}, {@code byte}, {@link Byte}, {@code short}, and {@link Short}. This conversion may also be
                  applied to the types {@code int} and {@link Integer} when {@link Character#isValidCodePoint} returns {@code true}&lt;li&gt; &lt;b&gt;Numeric&lt;/b&gt;
                  &lt;ol&gt;
                  &lt;li&gt; &lt;b&gt;Integral&lt;/b&gt; - may be applied to Java integral types: {@code byte},{@link Byte}, {@code short}, {@link Short}, {@code int} and {@link Integer}, {@code long}, {@link Long}, and {@link java.math.BigIntegerBigInteger}&lt;li&gt;&lt;b&gt;Floating Point&lt;/b&gt; - may be applied to Java floating-point types:{@code float}, {@link Float}, {@code double}, {@link Double}, and {@link java.math.BigDecimal BigDecimal}&lt;/ol&gt;
                  &lt;li&gt; &lt;b&gt;Date/Time&lt;/b&gt; - may be applied to Java types which are capable of
                  encoding a date or time: {@code long}, {@link Long}, {@link Calendar}, and{@link Date}.
                  &lt;li&gt; &lt;b&gt;Percent&lt;/b&gt; - produces a literal {@code &apos;%&apos;}(&lt;tt&gt;&apos;&amp;#92;u0025&apos;&lt;/tt&gt;)
                  &lt;li&gt; &lt;b&gt;Line Separator&lt;/b&gt; - produces the platform-specific line separator
                  &lt;/ol&gt;
                  &lt;p&gt; The following table summarizes the supported conversions.  Conversions
                  denoted by an upper-case character (i.e. {@code &apos;B&apos;}, {@code &apos;H&apos;},{@code &apos;S&apos;}, {@code &apos;C&apos;}, {@code &apos;X&apos;}, {@code &apos;E&apos;}, {@code &apos;G&apos;},{@code &apos;A&apos;}, and {@code &apos;T&apos;}) are the same as those for the corresponding
                  lower-case conversion characters except that the result is converted to
                  upper case according to the rules of the prevailing {@link java.util.LocaleLocale}.  The result is equivalent to the following invocation of {@link String#toUpperCase()}&lt;pre&gt;
                  out.toUpperCase() &lt;/pre&gt;
                  &lt;table cellpadding=5 summary=&quot;genConv&quot;&gt;
                  &lt;tr&gt;&lt;th valign=&quot;bottom&quot;&gt; Conversion
                  &lt;th valign=&quot;bottom&quot;&gt; Argument Category
                  &lt;th valign=&quot;bottom&quot;&gt; Description
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;b&apos;}, {@code &apos;B&apos;}&lt;td valign=&quot;top&quot;&gt; general
                  &lt;td&gt; If the argument &lt;i&gt;arg&lt;/i&gt; is {@code null}, then the result is
                  &quot;{@code false}&quot;.  If &lt;i&gt;arg&lt;/i&gt; is a {@code boolean} or {@link Boolean}, then the result is the string returned by {@link String#valueOf(boolean) String.valueOf(arg)}.  Otherwise, the result is
                  &quot;true&quot;.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;h&apos;}, {@code &apos;H&apos;}&lt;td valign=&quot;top&quot;&gt; general
                  &lt;td&gt; If the argument &lt;i&gt;arg&lt;/i&gt; is {@code null}, then the result is
                  &quot;{@code null}&quot;.  Otherwise, the result is obtained by invoking{@code Integer.toHexString(arg.hashCode())}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;s&apos;}, {@code &apos;S&apos;}&lt;td valign=&quot;top&quot;&gt; general
                  &lt;td&gt; If the argument &lt;i&gt;arg&lt;/i&gt; is {@code null}, then the result is
                  &quot;{@code null}&quot;.  If &lt;i&gt;arg&lt;/i&gt; implements {@link Formattable}, then{@link Formattable#formatTo arg.formatTo} is invoked. Otherwise, the
                  result is obtained by invoking {@code arg.toString()}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;c&apos;}, {@code &apos;C&apos;}&lt;td valign=&quot;top&quot;&gt; character
                  &lt;td&gt; The result is a Unicode character
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;d&apos;}&lt;td valign=&quot;top&quot;&gt; integral
                  &lt;td&gt; The result is formatted as a decimal integer
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;o&apos;}&lt;td valign=&quot;top&quot;&gt; integral
                  &lt;td&gt; The result is formatted as an octal integer
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;x&apos;}, {@code &apos;X&apos;}&lt;td valign=&quot;top&quot;&gt; integral
                  &lt;td&gt; The result is formatted as a hexadecimal integer
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;e&apos;}, {@code &apos;E&apos;}&lt;td valign=&quot;top&quot;&gt; floating point
                  &lt;td&gt; The result is formatted as a decimal number in computerized
                  scientific notation
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;f&apos;}&lt;td valign=&quot;top&quot;&gt; floating point
                  &lt;td&gt; The result is formatted as a decimal number
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;g&apos;}, {@code &apos;G&apos;}&lt;td valign=&quot;top&quot;&gt; floating point
                  &lt;td&gt; The result is formatted using computerized scientific notation or
                  decimal format, depending on the precision and the value after rounding.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;a&apos;}, {@code &apos;A&apos;}&lt;td valign=&quot;top&quot;&gt; floating point
                  &lt;td&gt; The result is formatted as a hexadecimal floating-point number with
                  a significand and an exponent
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;t&apos;}, {@code &apos;T&apos;}&lt;td valign=&quot;top&quot;&gt; date/time
                  &lt;td&gt; Prefix for date and time conversion characters.  See &lt;a
                  href=&quot;#dt&quot;&gt;Date/Time Conversions&lt;/a&gt;.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;%&apos;}&lt;td valign=&quot;top&quot;&gt; percent
                  &lt;td&gt; The result is a literal {@code &apos;%&apos;} (&lt;tt&gt;&apos;&amp;#92;u0025&apos;&lt;/tt&gt;)
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;n&apos;}&lt;td valign=&quot;top&quot;&gt; line separator
                  &lt;td&gt; The result is the platform-specific line separator
                  &lt;/table&gt;
                  &lt;p&gt; Any characters not explicitly defined as conversions are illegal and are
                  reserved for future extensions.
                  &lt;h4&gt;&lt;a name=&quot;dt&quot;&gt;Date/Time Conversions&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt; The following date and time conversion suffix characters are defined for
                  the {@code &apos;t&apos;} and {@code &apos;T&apos;} conversions.  The types are similar to but
                  not completely identical to those defined by GNU {@code date} and POSIX{@code strftime(3c)}.  Additional conversion types are provided to access
                  Java-specific functionality (e.g. {@code &apos;L&apos;} for milliseconds within the
                  second).
                  &lt;p&gt; The following conversion characters are used for formatting times:
                  &lt;table cellpadding=5 summary=&quot;time&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;H&apos;}&lt;td&gt; Hour of the day for the 24-hour clock, formatted as two digits with
                  a leading zero as necessary i.e. {@code 00 - 23}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;I&apos;}&lt;td&gt; Hour for the 12-hour clock, formatted as two digits with a leading
                  zero as necessary, i.e.  {@code 01 - 12}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;k&apos;}&lt;td&gt; Hour of the day for the 24-hour clock, i.e. {@code 0 - 23}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;l&apos;}&lt;td&gt; Hour for the 12-hour clock, i.e. {@code 1 - 12}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;M&apos;}&lt;td&gt; Minute within the hour formatted as two digits with a leading zero
                  as necessary, i.e.  {@code 00 - 59}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;S&apos;}&lt;td&gt; Seconds within the minute, formatted as two digits with a leading
                  zero as necessary, i.e. {@code 00 - 60} (&quot;{@code 60}&quot; is a special
                  value required to support leap seconds).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;L&apos;}&lt;td&gt; Millisecond within the second formatted as three digits with
                  leading zeros as necessary, i.e. {@code 000 - 999}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;N&apos;}&lt;td&gt; Nanosecond within the second, formatted as nine digits with leading
                  zeros as necessary, i.e. {@code 000000000 - 999999999}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;p&apos;}&lt;td&gt; Locale-specific {@linkplain java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker
                  in lower case, e.g.&quot;{@code am}&quot; or &quot;{@code pm}&quot;. Use of the conversion
                  prefix {@code &apos;T&apos;} forces this output to upper case.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;z&apos;}&lt;td&gt; &lt;a href=&quot;http://www.ietf.org/rfc/rfc0822.txt&quot;&gt;RFC&amp;nbsp;822&lt;/a&gt;
                  style numeric time zone offset from GMT, e.g. {@code -0800}.  This
                  value will be adjusted as necessary for Daylight Saving Time.  For{@code long}, {@link Long}, and {@link Date} the time zone used is
                  the {@linkplain TimeZone#getDefault() default time zone} for this
                  instance of the Java virtual machine.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;Z&apos;}&lt;td&gt; A string representing the abbreviation for the time zone.  This
                  value will be adjusted as necessary for Daylight Saving Time.  For{@code long}, {@link Long}, and {@link Date} the  time zone used is
                  the {@linkplain TimeZone#getDefault() default time zone} for this
                  instance of the Java virtual machine.  The Formatter&apos;s locale will
                  supersede the locale of the argument (if any).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;s&apos;}&lt;td&gt; Seconds since the beginning of the epoch starting at 1 January 1970{@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE/1000} to{@code Long.MAX_VALUE/1000}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;Q&apos;}&lt;td&gt; Milliseconds since the beginning of the epoch starting at 1 January
                  1970 {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE} to{@code Long.MAX_VALUE}.
                  &lt;/table&gt;
                  &lt;p&gt; The following conversion characters are used for formatting dates:
                  &lt;table cellpadding=5 summary=&quot;date&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;B&apos;}&lt;td&gt; Locale-specific {@linkplain java.text.DateFormatSymbols#getMonthsfull month name}, e.g. {@code &quot;January&quot;}, {@code &quot;February&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;b&apos;}&lt;td&gt; Locale-specific {@linkplain java.text.DateFormatSymbols#getShortMonths abbreviated month name},
                  e.g. {@code &quot;Jan&quot;}, {@code &quot;Feb&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;h&apos;}&lt;td&gt; Same as {@code &apos;b&apos;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;A&apos;}&lt;td&gt; Locale-specific full name of the {@linkplain java.text.DateFormatSymbols#getWeekdays day of the week},
                  e.g. {@code &quot;Sunday&quot;}, {@code &quot;Monday&quot;}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;a&apos;}&lt;td&gt; Locale-specific short name of the {@linkplain java.text.DateFormatSymbols#getShortWeekdays day of the week},
                  e.g. {@code &quot;Sun&quot;}, {@code &quot;Mon&quot;}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;C&apos;}&lt;td&gt; Four-digit year divided by {@code 100}, formatted as two digits
                  with leading zero as necessary, i.e. {@code 00 - 99}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;Y&apos;}&lt;td&gt; Year, formatted as at least four digits with leading zeros as
                  necessary, e.g. {@code 0092} equals {@code 92} CE for the Gregorian
                  calendar.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;y&apos;}&lt;td&gt; Last two digits of the year, formatted with leading zeros as
                  necessary, i.e. {@code 00 - 99}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;j&apos;}&lt;td&gt; Day of year, formatted as three digits with leading zeros as
                  necessary, e.g. {@code 001 - 366} for the Gregorian calendar.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;m&apos;}&lt;td&gt; Month, formatted as two digits with leading zeros as necessary,
                  i.e. {@code 01 - 13}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;d&apos;}&lt;td&gt; Day of month, formatted as two digits with leading zeros as
                  necessary, i.e. {@code 01 - 31}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;e&apos;}&lt;td&gt; Day of month, formatted as two digits, i.e. {@code 1 - 31}.
                  &lt;/table&gt;
                  &lt;p&gt; The following conversion characters are used for formatting common
                  date/time compositions.
                  &lt;table cellpadding=5 summary=&quot;composites&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;R&apos;}&lt;td&gt; Time formatted for the 24-hour clock as {@code &quot;%tH:%tM&quot;}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;T&apos;}&lt;td&gt; Time formatted for the 24-hour clock as {@code &quot;%tH:%tM:%tS&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;r&apos;}&lt;td&gt; Time formatted for the 12-hour clock as {@code &quot;%tI:%tM:%tS %Tp&quot;}.
                  The location of the morning or afternoon marker ({@code &apos;%Tp&apos;}) may be
                  locale-dependent.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;D&apos;}&lt;td&gt; Date formatted as {@code &quot;%tm/%td/%ty&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;F&apos;}&lt;td&gt; &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO&amp;nbsp;8601&lt;/a&gt;
                  complete date formatted as {@code &quot;%tY-%tm-%td&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;c&apos;}&lt;td&gt; Date and time formatted as {@code &quot;%ta %tb %td %tT %tZ %tY&quot;},
                  e.g. {@code &quot;Sun Jul 20 16:17:00 EDT 1969&quot;}.
                  &lt;/table&gt;
                  &lt;p&gt; Any characters not explicitly defined as date/time conversion suffixes
                  are illegal and are reserved for future extensions.
                  &lt;h4&gt; Flags &lt;/h4&gt;
                  &lt;p&gt; The following table summarizes the supported flags.  &lt;i&gt;y&lt;/i&gt; means the
                  flag is supported for the indicated argument types.
                  &lt;table cellpadding=5 summary=&quot;genConv&quot;&gt;
                  &lt;tr&gt;&lt;th valign=&quot;bottom&quot;&gt; Flag &lt;th valign=&quot;bottom&quot;&gt; General
                  &lt;th valign=&quot;bottom&quot;&gt; Character &lt;th valign=&quot;bottom&quot;&gt; Integral
                  &lt;th valign=&quot;bottom&quot;&gt; Floating Point
                  &lt;th valign=&quot;bottom&quot;&gt; Date/Time
                  &lt;th valign=&quot;bottom&quot;&gt; Description
                  &lt;tr&gt;&lt;td&gt; &apos;-&apos; &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td&gt; The result will be left-justified.
                  &lt;tr&gt;&lt;td&gt; &apos;#&apos; &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y&lt;sup&gt;1&lt;/sup&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y&lt;sup&gt;3&lt;/sup&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td&gt; The result should use a conversion-dependent alternate form
                  &lt;tr&gt;&lt;td&gt; &apos;+&apos; &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y&lt;sup&gt;4&lt;/sup&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td&gt; The result will always include a sign
                  &lt;tr&gt;&lt;td&gt; &apos;&amp;nbsp;&amp;nbsp;&apos; &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y&lt;sup&gt;4&lt;/sup&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td&gt; The result will include a leading space for positive values
                  &lt;tr&gt;&lt;td&gt; &apos;0&apos; &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td&gt; The result will be zero-padded
                  &lt;tr&gt;&lt;td&gt; &apos;,&apos; &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y&lt;sup&gt;2&lt;/sup&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y&lt;sup&gt;5&lt;/sup&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td&gt; The result will include locale-specific {@linkplain java.text.DecimalFormatSymbols#getGroupingSeparator grouping separators}&lt;tr&gt;&lt;td&gt; &apos;(&apos; &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; -
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y&lt;sup&gt;4&lt;/sup&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; y&lt;sup&gt;5&lt;/sup&gt;
                  &lt;td align=&quot;center&quot;&gt; -
                  &lt;td&gt; The result will enclose negative numbers in parentheses
                  &lt;/table&gt;
                  &lt;p&gt; &lt;sup&gt;1&lt;/sup&gt; Depends on the definition of {@link Formattable}.
                  &lt;p&gt; &lt;sup&gt;2&lt;/sup&gt; For {@code &apos;d&apos;} conversion only.
                  &lt;p&gt; &lt;sup&gt;3&lt;/sup&gt; For {@code &apos;o&apos;}, {@code &apos;x&apos;}, and {@code &apos;X&apos;}conversions only.
                  &lt;p&gt; &lt;sup&gt;4&lt;/sup&gt; For {@code &apos;d&apos;}, {@code &apos;o&apos;}, {@code &apos;x&apos;}, and{@code &apos;X&apos;} conversions applied to {@link java.math.BigInteger BigInteger}or {@code &apos;d&apos;} applied to {@code byte}, {@link Byte}, {@code short}, {@link Short}, {@code int} and {@link Integer}, {@code long}, and {@link Long}.
                  &lt;p&gt; &lt;sup&gt;5&lt;/sup&gt; For {@code &apos;e&apos;}, {@code &apos;E&apos;}, {@code &apos;f&apos;},{@code &apos;g&apos;}, and {@code &apos;G&apos;} conversions only.
                  &lt;p&gt; Any characters not explicitly defined as flags are illegal and are
                  reserved for future extensions.
                  &lt;h4&gt; Width &lt;/h4&gt;
                  &lt;p&gt; The width is the minimum number of characters to be written to the
                  output.  For the line separator conversion, width is not applicable; if it
                  is provided, an exception will be thrown.
                  &lt;h4&gt; Precision &lt;/h4&gt;
                  &lt;p&gt; For general argument types, the precision is the maximum number of
                  characters to be written to the output.
                  &lt;p&gt; For the floating-point conversions {@code &apos;e&apos;}, {@code &apos;E&apos;}, and{@code &apos;f&apos;} the precision is the number of digits after the decimal
                  separator.  If the conversion is {@code &apos;g&apos;} or {@code &apos;G&apos;}, then the
                  precision is the total number of digits in the resulting magnitude after
                  rounding.  If the conversion is {@code &apos;a&apos;} or {@code &apos;A&apos;}, then the
                  precision must not be specified.
                  &lt;p&gt; For character, integral, and date/time argument types and the percent
                  and line separator conversions, the precision is not applicable; if a
                  precision is provided, an exception will be thrown.
                  &lt;h4&gt; Argument Index &lt;/h4&gt;
                  &lt;p&gt; The argument index is a decimal integer indicating the position of the
                  argument in the argument list.  The first argument is referenced by
                  &quot;{@code 1$}&quot;, the second by &quot;{@code 2$}&quot;, etc.
                  &lt;p&gt; Another way to reference arguments by position is to use the{@code &apos;&lt;&apos;} (&lt;tt&gt;&apos;&amp;#92;u003c&apos;&lt;/tt&gt;) flag, which causes the argument for
                  the previous format specifier to be re-used.  For example, the following two
                  statements would produce identical strings:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Calendar c = ...;
                  String s1 = String.format(&quot;Duke&apos;s Birthday: %1$tm %1$te,%1$tY&quot;, c);
                  String s2 = String.format(&quot;Duke&apos;s Birthday: %1$tm %&amp;lt;te,%&amp;lt;tY&quot;, c);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;hr&gt;
                  &lt;h3&gt;&lt;a name=&quot;detail&quot;&gt;Details&lt;/a&gt;&lt;/h3&gt;
                  &lt;p&gt; This section is intended to provide behavioral details for formatting,
                  including conditions and exceptions, supported data types, localization, and
                  interactions between flags, conversions, and data types.  For an overview of
                  formatting concepts, refer to the &lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;
                  &lt;p&gt; Any characters not explicitly defined as conversions, date/time
                  conversion suffixes, or flags are illegal and are reserved for
                  future extensions.  Use of such a character in a format string will
                  cause an {@link UnknownFormatConversionException} or {@link UnknownFormatFlagsException} to be thrown.
                  &lt;p&gt; If the format specifier contains a width or precision with an invalid
                  value or which is otherwise unsupported, then a {@link IllegalFormatWidthException} or {@link IllegalFormatPrecisionException}respectively will be thrown.
                  &lt;p&gt; If a format specifier contains a conversion character that is not
                  applicable to the corresponding argument, then an {@link IllegalFormatConversionException} will be thrown.
                  &lt;p&gt; All specified exceptions may be thrown by any of the {@code format}methods of {@code Formatter} as well as by any {@code format} convenience
                  methods such as {@link String#format(String,Object...) String.format} and{@link java.io.PrintStream#printf(String,Object...) PrintStream.printf}.
                  &lt;p&gt; Conversions denoted by an upper-case character (i.e. {@code &apos;B&apos;},{@code &apos;H&apos;}, {@code &apos;S&apos;}, {@code &apos;C&apos;}, {@code &apos;X&apos;}, {@code &apos;E&apos;},{@code &apos;G&apos;}, {@code &apos;A&apos;}, and {@code &apos;T&apos;}) are the same as those for the
                  corresponding lower-case conversion characters except that the result is
                  converted to upper case according to the rules of the prevailing {@link java.util.Locale Locale}.  The result is equivalent to the following
                  invocation of {@link String#toUpperCase()}&lt;pre&gt;
                  out.toUpperCase() &lt;/pre&gt;
                  &lt;h4&gt;&lt;a name=&quot;dgen&quot;&gt;General&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt; The following general conversions may be applied to any argument type:
                  &lt;table cellpadding=5 summary=&quot;dgConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;b&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0062&apos;&lt;/tt&gt;
                  &lt;td&gt; Produces either &quot;{@code true}&quot; or &quot;{@code false}&quot; as returned by{@link Boolean#toString(boolean)}.
                  &lt;p&gt; If the argument is {@code null}, then the result is
                  &quot;{@code false}&quot;.  If the argument is a {@code boolean} or {@link Boolean}, then the result is the string returned by {@link String#valueOf(boolean) String.valueOf()}.  Otherwise, the result is
                  &quot;{@code true}&quot;.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given, then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;B&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0042&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;b&apos;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;h&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0068&apos;&lt;/tt&gt;
                  &lt;td&gt; Produces a string representing the hash code value of the object.
                  &lt;p&gt; If the argument, &lt;i&gt;arg&lt;/i&gt; is {@code null}, then the
                  result is &quot;{@code null}&quot;.  Otherwise, the result is obtained
                  by invoking {@code Integer.toHexString(arg.hashCode())}.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given, then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;H&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0048&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;h&apos;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;s&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0073&apos;&lt;/tt&gt;
                  &lt;td&gt; Produces a string.
                  &lt;p&gt; If the argument is {@code null}, then the result is
                  &quot;{@code null}&quot;.  If the argument implements {@link Formattable}, then
                  its {@link Formattable#formatTo formatTo} method is invoked.
                  Otherwise, the result is obtained by invoking the argument&apos;s{@code toString()} method.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given and the argument is not a {@link Formattable} , then a {@link FormatFlagsConversionMismatchException}will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;S&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0053&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;s&apos;}.
                  &lt;/table&gt;
                  &lt;p&gt; The following &lt;a name=&quot;dFlags&quot;&gt;flags&lt;/a&gt; apply to general conversions:
                  &lt;table cellpadding=5 summary=&quot;dFlags&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;-&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u002d&apos;&lt;/tt&gt;
                  &lt;td&gt; Left justifies the output.  Spaces (&lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;) will be
                  added at the end of the converted value as required to fill the minimum
                  width of the field.  If the width is not provided, then a {@link MissingFormatWidthException} will be thrown.  If this flag is not given
                  then the output will be right-justified.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;#&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0023&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output use an alternate form.  The definition of the
                  form is specified by the conversion.
                  &lt;/table&gt;
                  &lt;p&gt; The &lt;a name=&quot;genWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to
                  be written to the
                  output.  If the length of the converted value is less than the width then
                  the output will be padded by &lt;tt&gt;&apos;&amp;nbsp;&amp;nbsp;&apos;&lt;/tt&gt; (&lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;)
                  until the total number of characters equals the width.  The padding is on
                  the left by default.  If the {@code &apos;-&apos;} flag is given, then the padding
                  will be on the right.  If the width is not specified then there is no
                  minimum.
                  &lt;p&gt; The precision is the maximum number of characters to be written to the
                  output.  The precision is applied before the width, thus the output will be
                  truncated to {@code precision} characters even if the width is greater than
                  the precision.  If the precision is not specified then there is no explicit
                  limit on the number of characters.
                  &lt;h4&gt;&lt;a name=&quot;dchar&quot;&gt;Character&lt;/a&gt;&lt;/h4&gt;
                  This conversion may be applied to {@code char} and {@link Character}.  It
                  may also be applied to the types {@code byte}, {@link Byte},{@code short}, and {@link Short}, {@code int} and {@link Integer} when{@link Character#isValidCodePoint} returns {@code true}.  If it returns{@code false} then an {@link IllegalFormatCodePointException} will be
                  thrown.
                  &lt;table cellpadding=5 summary=&quot;charConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;c&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0063&apos;&lt;/tt&gt;
                  &lt;td&gt; Formats the argument as a Unicode character as described in &lt;a
                  href=&quot;../lang/Character.html#unicode&quot;&gt;Unicode Character
                  Representation&lt;/a&gt;.  This may be more than one 16-bit {@code char} in
                  the case where the argument represents a supplementary character.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given, then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;C&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0043&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;c&apos;}.
                  &lt;/table&gt;
                  &lt;p&gt; The {@code &apos;-&apos;} flag defined for &lt;a href=&quot;#dFlags&quot;&gt;General
                  conversions&lt;/a&gt; applies.  If the {@code &apos;#&apos;} flag is given, then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;p&gt; The width is defined as for &lt;a href=&quot;#genWidth&quot;&gt;General conversions&lt;/a&gt;.
                  &lt;p&gt; The precision is not applicable.  If the precision is specified then an{@link IllegalFormatPrecisionException} will be thrown.
                  &lt;h4&gt;&lt;a name=&quot;dnum&quot;&gt;Numeric&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt; Numeric conversions are divided into the following categories:
                  &lt;ol&gt;
                  &lt;li&gt; &lt;a href=&quot;#dnint&quot;&gt;&lt;b&gt;Byte, Short, Integer, and Long&lt;/b&gt;&lt;/a&gt;
                  &lt;li&gt; &lt;a href=&quot;#dnbint&quot;&gt;&lt;b&gt;BigInteger&lt;/b&gt;&lt;/a&gt;
                  &lt;li&gt; &lt;a href=&quot;#dndec&quot;&gt;&lt;b&gt;Float and Double&lt;/b&gt;&lt;/a&gt;
                  &lt;li&gt; &lt;a href=&quot;#dnbdec&quot;&gt;&lt;b&gt;BigDecimal&lt;/b&gt;&lt;/a&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; Numeric types will be formatted according to the following algorithm:
                  &lt;p&gt;&lt;b&gt;&lt;a name=&quot;l10n algorithm&quot;&gt; Number Localization Algorithm&lt;/a&gt;&lt;/b&gt;
                  &lt;p&gt; After digits are obtained for the integer part, fractional part, and
                  exponent (as appropriate for the data type), the following transformation
                  is applied:
                  &lt;ol&gt;
                  &lt;li&gt; Each digit character &lt;i&gt;d&lt;/i&gt; in the string is replaced by a
                  locale-specific digit computed relative to the current locale&apos;s{@linkplain java.text.DecimalFormatSymbols#getZeroDigit() zero digit}&lt;i&gt;z&lt;/i&gt;; that is &lt;i&gt;d&amp;nbsp;-&amp;nbsp;&lt;/i&gt; {@code &apos;0&apos;}&lt;i&gt;&amp;nbsp;+&amp;nbsp;z&lt;/i&gt;.
                  &lt;li&gt; If a decimal separator is present, a locale-specific {@linkplain java.text.DecimalFormatSymbols#getDecimalSeparator decimal separator} is
                  substituted.
                  &lt;li&gt; If the {@code &apos;,&apos;} (&lt;tt&gt;&apos;&amp;#92;u002c&apos;&lt;/tt&gt;)
                  &lt;a name=&quot;l10n group&quot;&gt;flag&lt;/a&gt; is given, then the locale-specific {@linkplain java.text.DecimalFormatSymbols#getGroupingSeparator grouping separator} is
                  inserted by scanning the integer part of the string from least significant
                  to most significant digits and inserting a separator at intervals defined by
                  the locale&apos;s {@linkplain java.text.DecimalFormat#getGroupingSize() grouping
                  size}.
                  &lt;li&gt; If the {@code &apos;0&apos;} flag is given, then the locale-specific {@linkplain java.text.DecimalFormatSymbols#getZeroDigit() zero digits} are inserted
                  after the sign character, if any, and before the first non-zero digit, until
                  the length of the string is equal to the requested field width.
                  &lt;li&gt; If the value is negative and the {@code &apos;(&apos;} flag is given, then a{@code &apos;(&apos;} (&lt;tt&gt;&apos;&amp;#92;u0028&apos;&lt;/tt&gt;) is prepended and a {@code &apos;)&apos;}(&lt;tt&gt;&apos;&amp;#92;u0029&apos;&lt;/tt&gt;) is appended.
                  &lt;li&gt; If the value is negative (or floating-point negative zero) and{@code &apos;(&apos;} flag is not given, then a {@code &apos;-&apos;} (&lt;tt&gt;&apos;&amp;#92;u002d&apos;&lt;/tt&gt;)
                  is prepended.
                  &lt;li&gt; If the {@code &apos;+&apos;} flag is given and the value is positive or zero (or
                  floating-point positive zero), then a {@code &apos;+&apos;} (&lt;tt&gt;&apos;&amp;#92;u002b&apos;&lt;/tt&gt;)
                  will be prepended.
                  &lt;/ol&gt;
                  &lt;p&gt; If the value is NaN or positive infinity the literal strings &quot;NaN&quot; or
                  &quot;Infinity&quot; respectively, will be output.  If the value is negative infinity,
                  then the output will be &quot;(Infinity)&quot; if the {@code &apos;(&apos;} flag is given
                  otherwise the output will be &quot;-Infinity&quot;.  These values are not localized.
                  &lt;p&gt;&lt;a name=&quot;dnint&quot;&gt;&lt;b&gt; Byte, Short, Integer, and Long &lt;/b&gt;&lt;/a&gt;
                  &lt;p&gt; The following conversions may be applied to {@code byte}, {@link Byte},{@code short}, {@link Short}, {@code int} and {@link Integer},{@code long}, and {@link Long}.
                  &lt;table cellpadding=5 summary=&quot;IntConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;d&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0054&apos;&lt;/tt&gt;
                  &lt;td&gt; Formats the argument as a decimal integer. The &lt;a
                  href=&quot;#l10n algorithm&quot;&gt;localization algorithm&lt;/a&gt; is applied.
                  &lt;p&gt; If the {@code &apos;0&apos;} flag is given and the value is negative, then
                  the zero padding will occur after the sign.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;o&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u006f&apos;&lt;/tt&gt;
                  &lt;td&gt; Formats the argument as an integer in base eight.  No localization
                  is applied.
                  &lt;p&gt; If &lt;i&gt;x&lt;/i&gt; is negative then the result will be an unsigned value
                  generated by adding 2&lt;sup&gt;n&lt;/sup&gt; to the value where {@code n} is the
                  number of bits in the type as returned by the static {@code SIZE} field
                  in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},{@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}classes as appropriate.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given then the output will always begin
                  with the radix indicator {@code &apos;0&apos;}.
                  &lt;p&gt; If the {@code &apos;0&apos;} flag is given then the output will be padded
                  with leading zeros to the field width following any indication of sign.
                  &lt;p&gt; If {@code &apos;(&apos;}, {@code &apos;+&apos;}, &apos;&amp;nbsp&amp;nbsp;&apos;, or {@code &apos;,&apos;} flags
                  are given then a {@link FormatFlagsConversionMismatchException} will be
                  thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;x&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0078&apos;&lt;/tt&gt;
                  &lt;td&gt; Formats the argument as an integer in base sixteen. No
                  localization is applied.
                  &lt;p&gt; If &lt;i&gt;x&lt;/i&gt; is negative then the result will be an unsigned value
                  generated by adding 2&lt;sup&gt;n&lt;/sup&gt; to the value where {@code n} is the
                  number of bits in the type as returned by the static {@code SIZE} field
                  in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},{@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}classes as appropriate.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given then the output will always begin
                  with the radix indicator {@code &quot;0x&quot;}.
                  &lt;p&gt; If the {@code &apos;0&apos;} flag is given then the output will be padded to
                  the field width with leading zeros after the radix indicator or sign (if
                  present).
                  &lt;p&gt; If {@code &apos;(&apos;}, &lt;tt&gt;&apos;&amp;nbsp;&amp;nbsp;&apos;&lt;/tt&gt;, {@code &apos;+&apos;}, or{@code &apos;,&apos;} flags are given then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;X&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0058&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;x&apos;}.  The entire string
                  representing the number will be converted to {@linkplain String#toUpperCase upper case} including the {@code &apos;x&apos;} (if any) and
                  all hexadecimal digits {@code &apos;a&apos;} - {@code &apos;f&apos;}(&lt;tt&gt;&apos;&amp;#92;u0061&apos;&lt;/tt&gt; -  &lt;tt&gt;&apos;&amp;#92;u0066&apos;&lt;/tt&gt;).
                  &lt;/table&gt;
                  &lt;p&gt; If the conversion is {@code &apos;o&apos;}, {@code &apos;x&apos;}, or {@code &apos;X&apos;} and
                  both the {@code &apos;#&apos;} and the {@code &apos;0&apos;} flags are given, then result will
                  contain the radix indicator ({@code &apos;0&apos;} for octal and {@code &quot;0x&quot;} or{@code &quot;0X&quot;} for hexadecimal), some number of zeros (based on the width),
                  and the value.
                  &lt;p&gt; If the {@code &apos;-&apos;} flag is not given, then the space padding will occur
                  before the sign.
                  &lt;p&gt; The following &lt;a name=&quot;intFlags&quot;&gt;flags&lt;/a&gt; apply to numeric integral
                  conversions:
                  &lt;table cellpadding=5 summary=&quot;intFlags&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;+&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u002b&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to include a positive sign for all positive
                  numbers.  If this flag is not given then only negative values will
                  include a sign.
                  &lt;p&gt; If both the {@code &apos;+&apos;} and &lt;tt&gt;&apos;&amp;nbsp;&amp;nbsp;&apos;&lt;/tt&gt; flags are given
                  then an {@link IllegalFormatFlagsException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;nbsp;&amp;nbsp;&apos;&lt;/tt&gt;
                  &lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to include a single extra space
                  (&lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;) for non-negative values.
                  &lt;p&gt; If both the {@code &apos;+&apos;} and &lt;tt&gt;&apos;&amp;nbsp;&amp;nbsp;&apos;&lt;/tt&gt; flags are given
                  then an {@link IllegalFormatFlagsException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;0&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0030&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be padded with leading {@linkplain java.text.DecimalFormatSymbols#getZeroDigit zeros} to the minimum field
                  width following any sign or radix indicator except when converting NaN
                  or infinity.  If the width is not provided, then a {@link MissingFormatWidthException} will be thrown.
                  &lt;p&gt; If both the {@code &apos;-&apos;} and {@code &apos;0&apos;} flags are given then an{@link IllegalFormatFlagsException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;,&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u002c&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to include the locale-specific {@linkplain java.text.DecimalFormatSymbols#getGroupingSeparator group separators} as
                  described in the &lt;a href=&quot;#l10n group&quot;&gt;&quot;group&quot; section&lt;/a&gt; of the
                  localization algorithm.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;(&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0028&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to prepend a {@code &apos;(&apos;}(&lt;tt&gt;&apos;&amp;#92;u0028&apos;&lt;/tt&gt;) and append a {@code &apos;)&apos;}(&lt;tt&gt;&apos;&amp;#92;u0029&apos;&lt;/tt&gt;) to negative values.
                  &lt;/table&gt;
                  &lt;p&gt; If no &lt;a name=&quot;intdFlags&quot;&gt;flags&lt;/a&gt; are given the default formatting is
                  as follows:
                  &lt;ul&gt;
                  &lt;li&gt; The output is right-justified within the {@code width}&lt;li&gt; Negative numbers begin with a {@code &apos;-&apos;} (&lt;tt&gt;&apos;&amp;#92;u002d&apos;&lt;/tt&gt;)
                  &lt;li&gt; Positive numbers and zero do not include a sign or extra leading
                  space
                  &lt;li&gt; No grouping separators are included
                  &lt;/ul&gt;
                  &lt;p&gt; The &lt;a name=&quot;intWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to
                  be written to the output.  This includes any signs, digits, grouping
                  separators, radix indicator, and parentheses.  If the length of the
                  converted value is less than the width then the output will be padded by
                  spaces (&lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;) until the total number of characters equals
                  width.  The padding is on the left by default.  If {@code &apos;-&apos;} flag is
                  given then the padding will be on the right.  If width is not specified then
                  there is no minimum.
                  &lt;p&gt; The precision is not applicable.  If precision is specified then an{@link IllegalFormatPrecisionException} will be thrown.
                  &lt;p&gt;&lt;a name=&quot;dnbint&quot;&gt;&lt;b&gt; BigInteger &lt;/b&gt;&lt;/a&gt;
                  &lt;p&gt; The following conversions may be applied to {@link java.math.BigInteger}.
                  &lt;table cellpadding=5 summary=&quot;BIntConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;d&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0054&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted as a decimal integer. The &lt;a
                  href=&quot;#l10n algorithm&quot;&gt;localization algorithm&lt;/a&gt; is applied.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;o&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u006f&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted as an integer in base eight.
                  No localization is applied.
                  &lt;p&gt; If &lt;i&gt;x&lt;/i&gt; is negative then the result will be a signed value
                  beginning with {@code &apos;-&apos;} (&lt;tt&gt;&apos;&amp;#92;u002d&apos;&lt;/tt&gt;).  Signed output is
                  allowed for this type because unlike the primitive types it is not
                  possible to create an unsigned equivalent without assuming an explicit
                  data-type size.
                  &lt;p&gt; If &lt;i&gt;x&lt;/i&gt; is positive or zero and the {@code &apos;+&apos;} flag is given
                  then the result will begin with {@code &apos;+&apos;} (&lt;tt&gt;&apos;&amp;#92;u002b&apos;&lt;/tt&gt;).
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given then the output will always begin
                  with {@code &apos;0&apos;} prefix.
                  &lt;p&gt; If the {@code &apos;0&apos;} flag is given then the output will be padded
                  with leading zeros to the field width following any indication of sign.
                  &lt;p&gt; If the {@code &apos;,&apos;} flag is given then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;x&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0078&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted as an integer in base
                  sixteen.  No localization is applied.
                  &lt;p&gt; If &lt;i&gt;x&lt;/i&gt; is negative then the result will be a signed value
                  beginning with {@code &apos;-&apos;} (&lt;tt&gt;&apos;&amp;#92;u002d&apos;&lt;/tt&gt;).  Signed output is
                  allowed for this type because unlike the primitive types it is not
                  possible to create an unsigned equivalent without assuming an explicit
                  data-type size.
                  &lt;p&gt; If &lt;i&gt;x&lt;/i&gt; is positive or zero and the {@code &apos;+&apos;} flag is given
                  then the result will begin with {@code &apos;+&apos;} (&lt;tt&gt;&apos;&amp;#92;u002b&apos;&lt;/tt&gt;).
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given then the output will always begin
                  with the radix indicator {@code &quot;0x&quot;}.
                  &lt;p&gt; If the {@code &apos;0&apos;} flag is given then the output will be padded to
                  the field width with leading zeros after the radix indicator or sign (if
                  present).
                  &lt;p&gt; If the {@code &apos;,&apos;} flag is given then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;X&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0058&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;x&apos;}.  The entire string
                  representing the number will be converted to {@linkplain String#toUpperCase upper case} including the {@code &apos;x&apos;} (if any) and
                  all hexadecimal digits {@code &apos;a&apos;} - {@code &apos;f&apos;}(&lt;tt&gt;&apos;&amp;#92;u0061&apos;&lt;/tt&gt; - &lt;tt&gt;&apos;&amp;#92;u0066&apos;&lt;/tt&gt;).
                  &lt;/table&gt;
                  &lt;p&gt; If the conversion is {@code &apos;o&apos;}, {@code &apos;x&apos;}, or {@code &apos;X&apos;} and
                  both the {@code &apos;#&apos;} and the {@code &apos;0&apos;} flags are given, then result will
                  contain the base indicator ({@code &apos;0&apos;} for octal and {@code &quot;0x&quot;} or{@code &quot;0X&quot;} for hexadecimal), some number of zeros (based on the width),
                  and the value.
                  &lt;p&gt; If the {@code &apos;0&apos;} flag is given and the value is negative, then the
                  zero padding will occur after the sign.
                  &lt;p&gt; If the {@code &apos;-&apos;} flag is not given, then the space padding will occur
                  before the sign.
                  &lt;p&gt; All &lt;a href=&quot;#intFlags&quot;&gt;flags&lt;/a&gt; defined for Byte, Short, Integer, and
                  Long apply.  The &lt;a href=&quot;#intdFlags&quot;&gt;default behavior&lt;/a&gt; when no flags are
                  given is the same as for Byte, Short, Integer, and Long.
                  &lt;p&gt; The specification of &lt;a href=&quot;#intWidth&quot;&gt;width&lt;/a&gt; is the same as
                  defined for Byte, Short, Integer, and Long.
                  &lt;p&gt; The precision is not applicable.  If precision is specified then an{@link IllegalFormatPrecisionException} will be thrown.
                  &lt;p&gt;&lt;a name=&quot;dndec&quot;&gt;&lt;b&gt; Float and Double&lt;/b&gt;&lt;/a&gt;
                  &lt;p&gt; The following conversions may be applied to {@code float}, {@link Float}, {@code double} and {@link Double}.
                  &lt;table cellpadding=5 summary=&quot;floatConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;e&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0065&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted using &lt;a
                  name=&quot;scientific&quot;&gt;computerized scientific notation&lt;/a&gt;.  The &lt;a
                  href=&quot;#l10n algorithm&quot;&gt;localization algorithm&lt;/a&gt; is applied.
                  &lt;p&gt; The formatting of the magnitude &lt;i&gt;m&lt;/i&gt; depends upon its value.
                  &lt;p&gt; If &lt;i&gt;m&lt;/i&gt; is NaN or infinite, the literal strings &quot;NaN&quot; or
                  &quot;Infinity&quot;, respectively, will be output.  These values are not
                  localized.
                  &lt;p&gt; If &lt;i&gt;m&lt;/i&gt; is positive-zero or negative-zero, then the exponent
                  will be {@code &quot;+00&quot;}.
                  &lt;p&gt; Otherwise, the result is a string that represents the sign and
                  magnitude (absolute value) of the argument.  The formatting of the sign
                  is described in the &lt;a href=&quot;#l10n algorithm&quot;&gt;localization
                  algorithm&lt;/a&gt;. The formatting of the magnitude &lt;i&gt;m&lt;/i&gt; depends upon its
                  value.
                  &lt;p&gt; Let &lt;i&gt;n&lt;/i&gt; be the unique integer such that 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;
                  &amp;lt;= &lt;i&gt;m&lt;/i&gt; &amp;lt; 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;+1&lt;/sup&gt;; then let &lt;i&gt;a&lt;/i&gt; be the
                  mathematically exact quotient of &lt;i&gt;m&lt;/i&gt; and 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; so
                  that 1 &amp;lt;= &lt;i&gt;a&lt;/i&gt; &amp;lt; 10. The magnitude is then represented as the
                  integer part of &lt;i&gt;a&lt;/i&gt;, as a single decimal digit, followed by the
                  decimal separator followed by decimal digits representing the fractional
                  part of &lt;i&gt;a&lt;/i&gt;, followed by the exponent symbol {@code &apos;e&apos;}(&lt;tt&gt;&apos;&amp;#92;u0065&apos;&lt;/tt&gt;), followed by the sign of the exponent, followed
                  by a representation of &lt;i&gt;n&lt;/i&gt; as a decimal integer, as produced by the
                  method {@link Long#toString(long,int)}, and zero-padded to include at
                  least two digits.
                  &lt;p&gt; The number of digits in the result for the fractional part of
                  &lt;i&gt;m&lt;/i&gt; or &lt;i&gt;a&lt;/i&gt; is equal to the precision.  If the precision is not
                  specified then the default value is {@code 6}. If the precision is less
                  than the number of digits which would appear after the decimal point in
                  the string returned by {@link Float#toString(float)} or {@link Double#toString(double)} respectively, then the value will be rounded
                  using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up
                  algorithm}.  Otherwise, zeros may be appended to reach the precision.
                  For a canonical representation of the value, use {@link Float#toString(float)} or {@link Double#toString(double)} as
                  appropriate.
                  &lt;p&gt;If the {@code &apos;,&apos;} flag is given, then an {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;E&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0045&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;e&apos;}.  The exponent symbol
                  will be {@code &apos;E&apos;} (&lt;tt&gt;&apos;&amp;#92;u0045&apos;&lt;/tt&gt;).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;g&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0067&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted in general scientific notation
                  as described below. The &lt;a href=&quot;#l10n algorithm&quot;&gt;localization
                  algorithm&lt;/a&gt; is applied.
                  &lt;p&gt; After rounding for the precision, the formatting of the resulting
                  magnitude &lt;i&gt;m&lt;/i&gt; depends on its value.
                  &lt;p&gt; If &lt;i&gt;m&lt;/i&gt; is greater than or equal to 10&lt;sup&gt;-4&lt;/sup&gt; but less
                  than 10&lt;sup&gt;precision&lt;/sup&gt; then it is represented in &lt;i&gt;&lt;a
                  href=&quot;#decimal&quot;&gt;decimal format&lt;/a&gt;&lt;/i&gt;.
                  &lt;p&gt; If &lt;i&gt;m&lt;/i&gt; is less than 10&lt;sup&gt;-4&lt;/sup&gt; or greater than or equal to
                  10&lt;sup&gt;precision&lt;/sup&gt;, then it is represented in &lt;i&gt;&lt;a
                  href=&quot;#scientific&quot;&gt;computerized scientific notation&lt;/a&gt;&lt;/i&gt;.
                  &lt;p&gt; The total number of significant digits in &lt;i&gt;m&lt;/i&gt; is equal to the
                  precision.  If the precision is not specified, then the default value is{@code 6}.  If the precision is {@code 0}, then it is taken to be{@code 1}.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given then an {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;G&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0047&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;g&apos;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;f&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0066&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted using &lt;a name=&quot;decimal&quot;&gt;decimal
                  format&lt;/a&gt;.  The &lt;a href=&quot;#l10n algorithm&quot;&gt;localization algorithm&lt;/a&gt; is
                  applied.
                  &lt;p&gt; The result is a string that represents the sign and magnitude
                  (absolute value) of the argument.  The formatting of the sign is
                  described in the &lt;a href=&quot;#l10n algorithm&quot;&gt;localization
                  algorithm&lt;/a&gt;. The formatting of the magnitude &lt;i&gt;m&lt;/i&gt; depends upon its
                  value.
                  &lt;p&gt; If &lt;i&gt;m&lt;/i&gt; NaN or infinite, the literal strings &quot;NaN&quot; or
                  &quot;Infinity&quot;, respectively, will be output.  These values are not
                  localized.
                  &lt;p&gt; The magnitude is formatted as the integer part of &lt;i&gt;m&lt;/i&gt;, with no
                  leading zeroes, followed by the decimal separator followed by one or
                  more decimal digits representing the fractional part of &lt;i&gt;m&lt;/i&gt;.
                  &lt;p&gt; The number of digits in the result for the fractional part of
                  &lt;i&gt;m&lt;/i&gt; or &lt;i&gt;a&lt;/i&gt; is equal to the precision.  If the precision is not
                  specified then the default value is {@code 6}. If the precision is less
                  than the number of digits which would appear after the decimal point in
                  the string returned by {@link Float#toString(float)} or {@link Double#toString(double)} respectively, then the value will be rounded
                  using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up
                  algorithm}.  Otherwise, zeros may be appended to reach the precision.
                  For a canonical representation of the value, use {@link Float#toString(float)} or {@link Double#toString(double)} as
                  appropriate.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;a&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0061&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted in hexadecimal exponential
                  form.  No localization is applied.
                  &lt;p&gt; The result is a string that represents the sign and magnitude
                  (absolute value) of the argument &lt;i&gt;x&lt;/i&gt;.
                  &lt;p&gt; If &lt;i&gt;x&lt;/i&gt; is negative or a negative-zero value then the result
                  will begin with {@code &apos;-&apos;} (&lt;tt&gt;&apos;&amp;#92;u002d&apos;&lt;/tt&gt;).
                  &lt;p&gt; If &lt;i&gt;x&lt;/i&gt; is positive or a positive-zero value and the{@code &apos;+&apos;} flag is given then the result will begin with {@code &apos;+&apos;}(&lt;tt&gt;&apos;&amp;#92;u002b&apos;&lt;/tt&gt;).
                  &lt;p&gt; The formatting of the magnitude &lt;i&gt;m&lt;/i&gt; depends upon its value.
                  &lt;ul&gt;
                  &lt;li&gt; If the value is NaN or infinite, the literal strings &quot;NaN&quot; or
                  &quot;Infinity&quot;, respectively, will be output.
                  &lt;li&gt; If &lt;i&gt;m&lt;/i&gt; is zero then it is represented by the string{@code &quot;0x0.0p0&quot;}.
                  &lt;li&gt; If &lt;i&gt;m&lt;/i&gt; is a {@code double} value with a normalized
                  representation then substrings are used to represent the significand and
                  exponent fields.  The significand is represented by the characters{@code &quot;0x1.&quot;} followed by the hexadecimal representation of the rest
                  of the significand as a fraction.  The exponent is represented by{@code &apos;p&apos;} (&lt;tt&gt;&apos;&amp;#92;u0070&apos;&lt;/tt&gt;) followed by a decimal string of the
                  unbiased exponent as if produced by invoking {@link Integer#toString(int) Integer.toString} on the exponent value.
                  &lt;li&gt; If &lt;i&gt;m&lt;/i&gt; is a {@code double} value with a subnormal
                  representation then the significand is represented by the characters{@code &apos;0x0.&apos;} followed by the hexadecimal representation of the rest
                  of the significand as a fraction.  The exponent is represented by{@code &apos;p-1022&apos;}.  Note that there must be at least one nonzero digit
                  in a subnormal significand.
                  &lt;/ul&gt;
                  &lt;p&gt; If the {@code &apos;(&apos;} or {@code &apos;,&apos;} flags are given, then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;A&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0041&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;a&apos;}.  The entire string
                  representing the number will be converted to upper case including the{@code &apos;x&apos;} (&lt;tt&gt;&apos;&amp;#92;u0078&apos;&lt;/tt&gt;) and {@code &apos;p&apos;}(&lt;tt&gt;&apos;&amp;#92;u0070&apos;&lt;/tt&gt; and all hexadecimal digits {@code &apos;a&apos;} -{@code &apos;f&apos;} (&lt;tt&gt;&apos;&amp;#92;u0061&apos;&lt;/tt&gt; - &lt;tt&gt;&apos;&amp;#92;u0066&apos;&lt;/tt&gt;).
                  &lt;/table&gt;
                  &lt;p&gt; All &lt;a href=&quot;#intFlags&quot;&gt;flags&lt;/a&gt; defined for Byte, Short, Integer, and
                  Long apply.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given, then the decimal separator will
                  always be present.
                  &lt;p&gt; If no &lt;a name=&quot;floatdFlags&quot;&gt;flags&lt;/a&gt; are given the default formatting
                  is as follows:
                  &lt;ul&gt;
                  &lt;li&gt; The output is right-justified within the {@code width}&lt;li&gt; Negative numbers begin with a {@code &apos;-&apos;}&lt;li&gt; Positive numbers and positive zero do not include a sign or extra
                  leading space
                  &lt;li&gt; No grouping separators are included
                  &lt;li&gt; The decimal separator will only appear if a digit follows it
                  &lt;/ul&gt;
                  &lt;p&gt; The &lt;a name=&quot;floatDWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters
                  to be written to the output.  This includes any signs, digits, grouping
                  separators, decimal separators, exponential symbol, radix indicator,
                  parentheses, and strings representing infinity and NaN as applicable.  If
                  the length of the converted value is less than the width then the output
                  will be padded by spaces (&lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;) until the total number of
                  characters equals width.  The padding is on the left by default.  If the{@code &apos;-&apos;} flag is given then the padding will be on the right.  If width
                  is not specified then there is no minimum.
                  &lt;p&gt; If the &lt;a name=&quot;floatDPrec&quot;&gt;conversion&lt;/a&gt; is {@code &apos;e&apos;},{@code &apos;E&apos;} or {@code &apos;f&apos;}, then the precision is the number of digits
                  after the decimal separator.  If the precision is not specified, then it is
                  assumed to be {@code 6}.
                  &lt;p&gt; If the conversion is {@code &apos;g&apos;} or {@code &apos;G&apos;}, then the precision is
                  the total number of significant digits in the resulting magnitude after
                  rounding.  If the precision is not specified, then the default value is{@code 6}.  If the precision is {@code 0}, then it is taken to be{@code 1}.
                  &lt;p&gt; If the conversion is {@code &apos;a&apos;} or {@code &apos;A&apos;}, then the precision
                  is the number of hexadecimal digits after the decimal separator.  If the
                  precision is not provided, then all of the digits as returned by {@link Double#toHexString(double)} will be output.
                  &lt;p&gt;&lt;a name=&quot;dnbdec&quot;&gt;&lt;b&gt; BigDecimal &lt;/b&gt;&lt;/a&gt;
                  &lt;p&gt; The following conversions may be applied {@link java.math.BigDecimalBigDecimal}.
                  &lt;table cellpadding=5 summary=&quot;floatConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;e&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0065&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted using &lt;a
                  name=&quot;bscientific&quot;&gt;computerized scientific notation&lt;/a&gt;.  The &lt;a
                  href=&quot;#l10n algorithm&quot;&gt;localization algorithm&lt;/a&gt; is applied.
                  &lt;p&gt; The formatting of the magnitude &lt;i&gt;m&lt;/i&gt; depends upon its value.
                  &lt;p&gt; If &lt;i&gt;m&lt;/i&gt; is positive-zero or negative-zero, then the exponent
                  will be {@code &quot;+00&quot;}.
                  &lt;p&gt; Otherwise, the result is a string that represents the sign and
                  magnitude (absolute value) of the argument.  The formatting of the sign
                  is described in the &lt;a href=&quot;#l10n algorithm&quot;&gt;localization
                  algorithm&lt;/a&gt;. The formatting of the magnitude &lt;i&gt;m&lt;/i&gt; depends upon its
                  value.
                  &lt;p&gt; Let &lt;i&gt;n&lt;/i&gt; be the unique integer such that 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;
                  &amp;lt;= &lt;i&gt;m&lt;/i&gt; &amp;lt; 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;+1&lt;/sup&gt;; then let &lt;i&gt;a&lt;/i&gt; be the
                  mathematically exact quotient of &lt;i&gt;m&lt;/i&gt; and 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; so
                  that 1 &amp;lt;= &lt;i&gt;a&lt;/i&gt; &amp;lt; 10. The magnitude is then represented as the
                  integer part of &lt;i&gt;a&lt;/i&gt;, as a single decimal digit, followed by the
                  decimal separator followed by decimal digits representing the fractional
                  part of &lt;i&gt;a&lt;/i&gt;, followed by the exponent symbol {@code &apos;e&apos;}(&lt;tt&gt;&apos;&amp;#92;u0065&apos;&lt;/tt&gt;), followed by the sign of the exponent, followed
                  by a representation of &lt;i&gt;n&lt;/i&gt; as a decimal integer, as produced by the
                  method {@link Long#toString(long,int)}, and zero-padded to include at
                  least two digits.
                  &lt;p&gt; The number of digits in the result for the fractional part of
                  &lt;i&gt;m&lt;/i&gt; or &lt;i&gt;a&lt;/i&gt; is equal to the precision.  If the precision is not
                  specified then the default value is {@code 6}.  If the precision is
                  less than the number of digits to the right of the decimal point then
                  the value will be rounded using the{@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up
                  algorithm}.  Otherwise, zeros may be appended to reach the precision.
                  For a canonical representation of the value, use {@link BigDecimal#toString()}.
                  &lt;p&gt; If the {@code &apos;,&apos;} flag is given, then an {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;E&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0045&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;e&apos;}.  The exponent symbol
                  will be {@code &apos;E&apos;} (&lt;tt&gt;&apos;&amp;#92;u0045&apos;&lt;/tt&gt;).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;g&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0067&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted in general scientific notation
                  as described below. The &lt;a href=&quot;#l10n algorithm&quot;&gt;localization
                  algorithm&lt;/a&gt; is applied.
                  &lt;p&gt; After rounding for the precision, the formatting of the resulting
                  magnitude &lt;i&gt;m&lt;/i&gt; depends on its value.
                  &lt;p&gt; If &lt;i&gt;m&lt;/i&gt; is greater than or equal to 10&lt;sup&gt;-4&lt;/sup&gt; but less
                  than 10&lt;sup&gt;precision&lt;/sup&gt; then it is represented in &lt;i&gt;&lt;a
                  href=&quot;#bdecimal&quot;&gt;decimal format&lt;/a&gt;&lt;/i&gt;.
                  &lt;p&gt; If &lt;i&gt;m&lt;/i&gt; is less than 10&lt;sup&gt;-4&lt;/sup&gt; or greater than or equal to
                  10&lt;sup&gt;precision&lt;/sup&gt;, then it is represented in &lt;i&gt;&lt;a
                  href=&quot;#bscientific&quot;&gt;computerized scientific notation&lt;/a&gt;&lt;/i&gt;.
                  &lt;p&gt; The total number of significant digits in &lt;i&gt;m&lt;/i&gt; is equal to the
                  precision.  If the precision is not specified, then the default value is{@code 6}.  If the precision is {@code 0}, then it is taken to be{@code 1}.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given then an {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;G&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0047&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;g&apos;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;f&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0066&apos;&lt;/tt&gt;
                  &lt;td&gt; Requires the output to be formatted using &lt;a name=&quot;bdecimal&quot;&gt;decimal
                  format&lt;/a&gt;.  The &lt;a href=&quot;#l10n algorithm&quot;&gt;localization algorithm&lt;/a&gt; is
                  applied.
                  &lt;p&gt; The result is a string that represents the sign and magnitude
                  (absolute value) of the argument.  The formatting of the sign is
                  described in the &lt;a href=&quot;#l10n algorithm&quot;&gt;localization
                  algorithm&lt;/a&gt;. The formatting of the magnitude &lt;i&gt;m&lt;/i&gt; depends upon its
                  value.
                  &lt;p&gt; The magnitude is formatted as the integer part of &lt;i&gt;m&lt;/i&gt;, with no
                  leading zeroes, followed by the decimal separator followed by one or
                  more decimal digits representing the fractional part of &lt;i&gt;m&lt;/i&gt;.
                  &lt;p&gt; The number of digits in the result for the fractional part of
                  &lt;i&gt;m&lt;/i&gt; or &lt;i&gt;a&lt;/i&gt; is equal to the precision. If the precision is not
                  specified then the default value is {@code 6}.  If the precision is
                  less than the number of digits to the right of the decimal point
                  then the value will be rounded using the{@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up
                  algorithm}.  Otherwise, zeros may be appended to reach the precision.
                  For a canonical representation of the value, use {@link BigDecimal#toString()}.
                  &lt;/table&gt;
                  &lt;p&gt; All &lt;a href=&quot;#intFlags&quot;&gt;flags&lt;/a&gt; defined for Byte, Short, Integer, and
                  Long apply.
                  &lt;p&gt; If the {@code &apos;#&apos;} flag is given, then the decimal separator will
                  always be present.
                  &lt;p&gt; The &lt;a href=&quot;#floatdFlags&quot;&gt;default behavior&lt;/a&gt; when no flags are
                  given is the same as for Float and Double.
                  &lt;p&gt; The specification of &lt;a href=&quot;#floatDWidth&quot;&gt;width&lt;/a&gt; and &lt;a
                  href=&quot;#floatDPrec&quot;&gt;precision&lt;/a&gt; is the same as defined for Float and
                  Double.
                  &lt;h4&gt;&lt;a name=&quot;ddt&quot;&gt;Date/Time&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt; This conversion may be applied to {@code long}, {@link Long}, {@link Calendar}, and {@link Date}.
                  &lt;table cellpadding=5 summary=&quot;DTConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;t&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0074&apos;&lt;/tt&gt;
                  &lt;td&gt; Prefix for date and time conversion characters.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;T&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0054&apos;&lt;/tt&gt;
                  &lt;td&gt; The upper-case variant of {@code &apos;t&apos;}.
                  &lt;/table&gt;
                  &lt;p&gt; The following date and time conversion character suffixes are defined
                  for the {@code &apos;t&apos;} and {@code &apos;T&apos;} conversions.  The types are similar to
                  but not completely identical to those defined by GNU {@code date} and
                  POSIX {@code strftime(3c)}.  Additional conversion types are provided to
                  access Java-specific functionality (e.g. {@code &apos;L&apos;} for milliseconds
                  within the second).
                  &lt;p&gt; The following conversion characters are used for formatting times:
                  &lt;table cellpadding=5 summary=&quot;time&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt; {@code &apos;H&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0048&apos;&lt;/tt&gt;
                  &lt;td&gt; Hour of the day for the 24-hour clock, formatted as two digits with
                  a leading zero as necessary i.e. {@code 00 - 23}. {@code 00}corresponds to midnight.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;I&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0049&apos;&lt;/tt&gt;
                  &lt;td&gt; Hour for the 12-hour clock, formatted as two digits with a leading
                  zero as necessary, i.e.  {@code 01 - 12}.  {@code 01} corresponds to
                  one o&apos;clock (either morning or afternoon).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;k&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u006b&apos;&lt;/tt&gt;
                  &lt;td&gt; Hour of the day for the 24-hour clock, i.e. {@code 0 - 23}.{@code 0} corresponds to midnight.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;l&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u006c&apos;&lt;/tt&gt;
                  &lt;td&gt; Hour for the 12-hour clock, i.e. {@code 1 - 12}.  {@code 1}corresponds to one o&apos;clock (either morning or afternoon).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;M&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u004d&apos;&lt;/tt&gt;
                  &lt;td&gt; Minute within the hour formatted as two digits with a leading zero
                  as necessary, i.e.  {@code 00 - 59}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;S&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0053&apos;&lt;/tt&gt;
                  &lt;td&gt; Seconds within the minute, formatted as two digits with a leading
                  zero as necessary, i.e. {@code 00 - 60} (&quot;{@code 60}&quot; is a special
                  value required to support leap seconds).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;L&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u004c&apos;&lt;/tt&gt;
                  &lt;td&gt; Millisecond within the second formatted as three digits with
                  leading zeros as necessary, i.e. {@code 000 - 999}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;N&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u004e&apos;&lt;/tt&gt;
                  &lt;td&gt; Nanosecond within the second, formatted as nine digits with leading
                  zeros as necessary, i.e. {@code 000000000 - 999999999}.  The precision
                  of this value is limited by the resolution of the underlying operating
                  system or hardware.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;p&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0070&apos;&lt;/tt&gt;
                  &lt;td&gt; Locale-specific {@linkplain java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker
                  in lower case, e.g.&quot;{@code am}&quot; or &quot;{@code pm}&quot;.  Use of the
                  conversion prefix {@code &apos;T&apos;} forces this output to upper case.  (Note
                  that {@code &apos;p&apos;} produces lower-case output.  This is different from
                  GNU {@code date} and POSIX {@code strftime(3c)} which produce
                  upper-case output.)
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;z&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u007a&apos;&lt;/tt&gt;
                  &lt;td&gt; &lt;a href=&quot;http://www.ietf.org/rfc/rfc0822.txt&quot;&gt;RFC&amp;nbsp;822&lt;/a&gt;
                  style numeric time zone offset from GMT, e.g. {@code -0800}.  This
                  value will be adjusted as necessary for Daylight Saving Time.  For{@code long}, {@link Long}, and {@link Date} the time zone used is
                  the {@linkplain TimeZone#getDefault() default time zone} for this
                  instance of the Java virtual machine.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;Z&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u005a&apos;&lt;/tt&gt;
                  &lt;td&gt; A string representing the abbreviation for the time zone.  This
                  value will be adjusted as necessary for Daylight Saving Time.  For{@code long}, {@link Long}, and {@link Date} the time zone used is
                  the {@linkplain TimeZone#getDefault() default time zone} for this
                  instance of the Java virtual machine.  The Formatter&apos;s locale will
                  supersede the locale of the argument (if any).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;s&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0073&apos;&lt;/tt&gt;
                  &lt;td&gt; Seconds since the beginning of the epoch starting at 1 January 1970{@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE/1000} to{@code Long.MAX_VALUE/1000}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;Q&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u004f&apos;&lt;/tt&gt;
                  &lt;td&gt; Milliseconds since the beginning of the epoch starting at 1 January
                  1970 {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE} to{@code Long.MAX_VALUE}. The precision of this value is limited by
                  the resolution of the underlying operating system or hardware.
                  &lt;/table&gt;
                  &lt;p&gt; The following conversion characters are used for formatting dates:
                  &lt;table cellpadding=5 summary=&quot;date&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;B&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0042&apos;&lt;/tt&gt;
                  &lt;td&gt; Locale-specific {@linkplain java.text.DateFormatSymbols#getMonthsfull month name}, e.g. {@code &quot;January&quot;}, {@code &quot;February&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;b&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0062&apos;&lt;/tt&gt;
                  &lt;td&gt; Locale-specific {@linkplain java.text.DateFormatSymbols#getShortMonths abbreviated month name},
                  e.g. {@code &quot;Jan&quot;}, {@code &quot;Feb&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;h&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0068&apos;&lt;/tt&gt;
                  &lt;td&gt; Same as {@code &apos;b&apos;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;A&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0041&apos;&lt;/tt&gt;
                  &lt;td&gt; Locale-specific full name of the {@linkplain java.text.DateFormatSymbols#getWeekdays day of the week},
                  e.g. {@code &quot;Sunday&quot;}, {@code &quot;Monday&quot;}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;a&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0061&apos;&lt;/tt&gt;
                  &lt;td&gt; Locale-specific short name of the {@linkplain java.text.DateFormatSymbols#getShortWeekdays day of the week},
                  e.g. {@code &quot;Sun&quot;}, {@code &quot;Mon&quot;}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;C&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0043&apos;&lt;/tt&gt;
                  &lt;td&gt; Four-digit year divided by {@code 100}, formatted as two digits
                  with leading zero as necessary, i.e. {@code 00 - 99}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;Y&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0059&apos;&lt;/tt&gt; &lt;td&gt; Year, formatted to at least
                  four digits with leading zeros as necessary, e.g. {@code 0092} equals{@code 92} CE for the Gregorian calendar.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;y&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0079&apos;&lt;/tt&gt;
                  &lt;td&gt; Last two digits of the year, formatted with leading zeros as
                  necessary, i.e. {@code 00 - 99}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;j&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u006a&apos;&lt;/tt&gt;
                  &lt;td&gt; Day of year, formatted as three digits with leading zeros as
                  necessary, e.g. {@code 001 - 366} for the Gregorian calendar.{@code 001} corresponds to the first day of the year.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;m&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u006d&apos;&lt;/tt&gt;
                  &lt;td&gt; Month, formatted as two digits with leading zeros as necessary,
                  i.e. {@code 01 - 13}, where &quot;{@code 01}&quot; is the first month of the
                  year and (&quot;{@code 13}&quot; is a special value required to support lunar
                  calendars).
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;d&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0064&apos;&lt;/tt&gt;
                  &lt;td&gt; Day of month, formatted as two digits with leading zeros as
                  necessary, i.e. {@code 01 - 31}, where &quot;{@code 01}&quot; is the first day
                  of the month.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;e&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0065&apos;&lt;/tt&gt;
                  &lt;td&gt; Day of month, formatted as two digits, i.e. {@code 1 - 31} where
                  &quot;{@code 1}&quot; is the first day of the month.
                  &lt;/table&gt;
                  &lt;p&gt; The following conversion characters are used for formatting common
                  date/time compositions.
                  &lt;table cellpadding=5 summary=&quot;composites&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;R&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0052&apos;&lt;/tt&gt;
                  &lt;td&gt; Time formatted for the 24-hour clock as {@code &quot;%tH:%tM&quot;}&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;T&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0054&apos;&lt;/tt&gt;
                  &lt;td&gt; Time formatted for the 24-hour clock as {@code &quot;%tH:%tM:%tS&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;r&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0072&apos;&lt;/tt&gt;
                  &lt;td&gt; Time formatted for the 12-hour clock as {@code &quot;%tI:%tM:%tS
                  %Tp&quot;}.  The location of the morning or afternoon marker
                  ({@code &apos;%Tp&apos;}) may be locale-dependent.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;D&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0044&apos;&lt;/tt&gt;
                  &lt;td&gt; Date formatted as {@code &quot;%tm/%td/%ty&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;F&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0046&apos;&lt;/tt&gt;
                  &lt;td&gt; &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO&amp;nbsp;8601&lt;/a&gt;
                  complete date formatted as {@code &quot;%tY-%tm-%td&quot;}.
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;c&apos;}&lt;td valign=&quot;top&quot;&gt; &lt;tt&gt;&apos;&amp;#92;u0063&apos;&lt;/tt&gt;
                  &lt;td&gt; Date and time formatted as {@code &quot;%ta %tb %td %tT %tZ %tY&quot;},
                  e.g. {@code &quot;Sun Jul 20 16:17:00 EDT 1969&quot;}.
                  &lt;/table&gt;
                  &lt;p&gt; The {@code &apos;-&apos;} flag defined for &lt;a href=&quot;#dFlags&quot;&gt;General
                  conversions&lt;/a&gt; applies.  If the {@code &apos;#&apos;} flag is given, then a {@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;p&gt; The &lt;a name=&quot;dtWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to
                  be written to the output.  If the length of the converted value is less than
                  the {@code width} then the output will be padded by spaces
                  (&lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;) until the total number of characters equals width.
                  The padding is on the left by default.  If the {@code &apos;-&apos;} flag is given
                  then the padding will be on the right.  If width is not specified then there
                  is no minimum.
                  &lt;p&gt; The precision is not applicable.  If the precision is specified then an{@link IllegalFormatPrecisionException} will be thrown.
                  &lt;h4&gt;&lt;a name=&quot;dper&quot;&gt;Percent&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt; The conversion does not correspond to any argument.
                  &lt;table cellpadding=5 summary=&quot;DTConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;%&apos;}&lt;td&gt; The result is a literal {@code &apos;%&apos;} (&lt;tt&gt;&apos;&amp;#92;u0025&apos;&lt;/tt&gt;)
                  &lt;p&gt; The &lt;a name=&quot;dtWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to
                  be written to the output including the {@code &apos;%&apos;}.  If the length of the
                  converted value is less than the {@code width} then the output will be
                  padded by spaces (&lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;) until the total number of
                  characters equals width.  The padding is on the left.  If width is not
                  specified then just the {@code &apos;%&apos;} is output.
                  &lt;p&gt; The {@code &apos;-&apos;} flag defined for &lt;a href=&quot;#dFlags&quot;&gt;General
                  conversions&lt;/a&gt; applies.  If any other flags are provided, then a{@link FormatFlagsConversionMismatchException} will be thrown.
                  &lt;p&gt; The precision is not applicable.  If the precision is specified an{@link IllegalFormatPrecisionException} will be thrown.
                  &lt;/table&gt;
                  &lt;h4&gt;&lt;a name=&quot;dls&quot;&gt;Line Separator&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt; The conversion does not correspond to any argument.
                  &lt;table cellpadding=5 summary=&quot;DTConv&quot;&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;{@code &apos;n&apos;}&lt;td&gt; the platform-specific line separator as returned by {@link System#getProperty System.getProperty(&quot;line.separator&quot;)}.
                  &lt;/table&gt;
                  &lt;p&gt; Flags, width, and precision are not applicable.  If any are provided an{@link IllegalFormatFlagsException}, {@link IllegalFormatWidthException},
                  and {@link IllegalFormatPrecisionException}, respectively will be thrown.
                  &lt;h4&gt;&lt;a name=&quot;dpos&quot;&gt;Argument Index&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt; Format specifiers can reference arguments in three ways:
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;Explicit indexing&lt;/i&gt; is used when the format specifier contains an
                  argument index.  The argument index is a decimal integer indicating the
                  position of the argument in the argument list.  The first argument is
                  referenced by &quot;{@code 1$}&quot;, the second by &quot;{@code 2$}&quot;, etc.  An argument
                  may be referenced more than once.
                  &lt;p&gt; For example:
                  &lt;blockquote&gt;&lt;pre&gt;
                  formatter.format(&quot;%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s&quot;,
                  &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)
                  // -&amp;gt; &quot;d c b a d c b a&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;li&gt; &lt;i&gt;Relative indexing&lt;/i&gt; is used when the format specifier contains a{@code &apos;&lt;&apos;} (&lt;tt&gt;&apos;&amp;#92;u003c&apos;&lt;/tt&gt;) flag which causes the argument for
                  the previous format specifier to be re-used.  If there is no previous
                  argument, then a {@link MissingFormatArgumentException} is thrown.
                  &lt;blockquote&gt;&lt;pre&gt;
                  formatter.format(&quot;%s %s %&amp;lt;s %&amp;lt;s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)
                  // -&amp;gt; &quot;a b b b&quot;
                  // &quot;c&quot; and &quot;d&quot; are ignored because they are not referenced
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;li&gt; &lt;i&gt;Ordinary indexing&lt;/i&gt; is used when the format specifier contains
                  neither an argument index nor a {@code &apos;&lt;&apos;} flag.  Each format specifier
                  which uses ordinary indexing is assigned a sequential implicit index into
                  argument list which is independent of the indices used by explicit or
                  relative indexing.
                  &lt;blockquote&gt;&lt;pre&gt;
                  formatter.format(&quot;%s %s %s %s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)
                  // -&amp;gt; &quot;a b c d&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;/ul&gt;
                  &lt;p&gt; It is possible to have a format string which uses all forms of indexing,
                  for example:
                  &lt;blockquote&gt;&lt;pre&gt;
                  formatter.format(&quot;%2$s %s %&amp;lt;s %s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)
                  // -&amp;gt; &quot;b a a b&quot;
                  // &quot;c&quot; and &quot;d&quot; are ignored because they are not referenced
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The maximum number of arguments is limited by the maximum dimension of a
                  Java array as defined by
                  &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.
                  If the argument index is does not correspond to an
                  available argument, then a {@link MissingFormatArgumentException} is thrown.
                  &lt;p&gt; If there are more arguments than format specifiers, the extra arguments
                  are ignored.
                  &lt;p&gt; Unless otherwise specified, passing a {@code null} argument to any
                  method or constructor in this class will cause a {@link NullPointerException} to be thrown.                
                <author>
                    Iris Clark                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="a" type="Appendable" line="1837"/>
            <declaration name="l" type="Locale" line="1838"/>
            <declaration name="lastException" type="IOException" line="1840"/>
            <declaration name="zero" type="char" line="1842"/>
            <declaration name="scaleUp" type="double" line="1843"/>
            <declaration name="MAX_FD_CHARS" type="int" line="1847"/>
            <javadoc line="1849">
                Returns a charset object for the given charset name.                
                <throws>
                    NullPointerException          is csn is null                    
                </throws>
                <throws>
                    UnsupportedEncodingException  if the charset is not supported                    
                </throws>
            </javadoc>
            <method name="toCharset" type="Charset" line="1856">
                <params>
                    <param name="csn" type="String"/>
                </params>
                <comment line="1862">
                    UnsupportedEncodingException should be thrown                    
                </comment>
                <scope line="1858"/>
                <scope line="1860"/>
            </method>
            <method name="nonNullAppendable" type="Appendable" line="1866">
                <params>
                    <param name="a" type="Appendable"/>
                </params>
            </method>
            <method name="Formatter" type="constructor" line="1874">
                <params>
                    <param name="l" type="Locale"/>
                    <param name="a" type="Appendable"/>
                </params>
            </method>
            <method name="Formatter" type="constructor" line="1882">
                <params>
                    <param name="charset" type="Charset"/>
                    <param name="l" type="Locale"/>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="1887">
                Constructs a new formatter.
                  &lt;p&gt; The destination of the formatted output is a {@link StringBuilder}which may be retrieved by invoking {@link #out out()} and whose
                  current content may be converted into a string by invoking {@link #toString toString()}.  The locale used is the {@linkplain Locale#getDefault() default locale} for this instance of the Java
                  virtual machine.                
            </javadoc>
            <method name="Formatter" type="constructor" line="1897"/>
            <javadoc line="1901">
                Constructs a new formatter with the specified destination.
                  &lt;p&gt; The locale used is the {@linkplain Locale#getDefault() default
                  locale} for this instance of the Java virtual machine.                
                <param>
                    aDestination for the formatted output.  If {@code a} is{@code null} then a {@link StringBuilder} will be created.                    
                </param>
            </javadoc>
            <method name="Formatter" type="constructor" line="1911">
                <params>
                    <param name="a" type="Appendable"/>
                </params>
            </method>
            <javadoc line="1915">
                Constructs a new formatter with the specified locale.
                  &lt;p&gt; The destination of the formatted output is a {@link StringBuilder}which may be retrieved by invoking {@link #out out()} and whose current
                  content may be converted into a string by invoking {@link #toStringtoString()}.                
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If {@code l} is {@code null} then no localization
                      is applied.                    
                </param>
            </javadoc>
            <method name="Formatter" type="constructor" line="1928">
                <params>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="1932">
                Constructs a new formatter with the specified destination and locale.                
                <param>
                    aDestination for the formatted output.  If {@code a} is{@code null} then a {@link StringBuilder} will be created.                    
                </param>
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If {@code l} is {@code null} then no localization
                      is applied.                    
                </param>
            </javadoc>
            <method name="Formatter" type="constructor" line="1944">
                <params>
                    <param name="a" type="Appendable"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="1948">
                Constructs a new formatter with the specified file name.
                  &lt;p&gt; The charset used is the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this
                  instance of the Java virtual machine.
                  &lt;p&gt; The locale used is the {@linkplain Locale#getDefault() default
                  locale} for this instance of the Java virtual machine.                
                <param>
                    fileNameThe name of the file to use as the destination of this
                      formatter.  If the file exists then it will be truncated to
                      zero size; otherwise, a new file will be created.  The output
                      will be written to the file and is buffered.                    
                </param>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write
                      access to the file                    
                </throws>
                <throws>
                    FileNotFoundExceptionIf the given file name does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
            </javadoc>
            <method name="Formatter" type="constructor" line="1975">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="1980">
                Constructs a new formatter with the specified file name and charset.
                  &lt;p&gt; The locale used is the {@linkplain Locale#getDefault default
                  locale} for this instance of the Java virtual machine.                
                <param>
                    fileNameThe name of the file to use as the destination of this
                      formatter.  If the file exists then it will be truncated to
                      zero size; otherwise, a new file will be created.  The output
                      will be written to the file and is buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file name does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write
                      access to the file                    
                </throws>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
            </javadoc>
            <method name="Formatter" type="constructor" line="2012">
                <params>
                    <param name="fileName" type="String"/>
                    <param name="csn" type="String"/>
                </params>
            </method>
            <javadoc line="2016">
                Constructs a new formatter with the specified file name, charset, and
                  locale.                
                <param>
                    fileNameThe name of the file to use as the destination of this
                      formatter.  If the file exists then it will be truncated to
                      zero size; otherwise, a new file will be created.  The output
                      will be written to the file and is buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If {@code l} is {@code null} then no localization
                      is applied.                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file name does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write
                      access to the file                    
                </throws>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
            </javadoc>
            <method name="Formatter" type="constructor" line="2051">
                <params>
                    <param name="fileName" type="String"/>
                    <param name="csn" type="String"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="2055">
                Constructs a new formatter with the specified file.
                  &lt;p&gt; The charset used is the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this
                  instance of the Java virtual machine.
                  &lt;p&gt; The locale used is the {@linkplain Locale#getDefault() default
                  locale} for this instance of the Java virtual machine.                
                <param>
                    fileThe file to use as the destination of this formatter.  If the
                      file exists then it will be truncated to zero size; otherwise,
                      a new file will be created.  The output will be written to the
                      file and is buffered.                    
                </param>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies
                      write access to the file                    
                </throws>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
            </javadoc>
            <method name="Formatter" type="constructor" line="2082">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="2087">
                Constructs a new formatter with the specified file and charset.
                  &lt;p&gt; The locale used is the {@linkplain Locale#getDefault default
                  locale} for this instance of the Java virtual machine.                
                <param>
                    fileThe file to use as the destination of this formatter.  If the
                      file exists then it will be truncated to zero size; otherwise,
                      a new file will be created.  The output will be written to the
                      file and is buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies
                      write access to the file                    
                </throws>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
            </javadoc>
            <method name="Formatter" type="constructor" line="2119">
                <params>
                    <param name="file" type="File"/>
                    <param name="csn" type="String"/>
                </params>
            </method>
            <javadoc line="2123">
                Constructs a new formatter with the specified file, charset, and
                  locale.                
                <param>
                    fileThe file to use as the destination of this formatter.  If the
                      file exists then it will be truncated to zero size; otherwise,
                      a new file will be created.  The output will be written to the
                      file and is buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If {@code l} is {@code null} then no localization
                      is applied.                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())} denies
                      write access to the file                    
                </throws>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
            </javadoc>
            <method name="Formatter" type="constructor" line="2158">
                <params>
                    <param name="file" type="File"/>
                    <param name="csn" type="String"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="2162">
                Constructs a new formatter with the specified print stream.
                  &lt;p&gt; The locale used is the {@linkplain Locale#getDefault() default
                  locale} for this instance of the Java virtual machine.
                  &lt;p&gt; Characters are written to the given {@link java.io.PrintStreamPrintStream} object and are therefore encoded using that object&apos;s
                  charset.                
                <param>
                    psThe stream to use as the destination of this formatter.                    
                </param>
            </javadoc>
            <method name="Formatter" type="constructor" line="2175">
                <params>
                    <param name="ps" type="PrintStream"/>
                </params>
            </method>
            <javadoc line="2180">
                Constructs a new formatter with the specified output stream.
                  &lt;p&gt; The charset used is the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this
                  instance of the Java virtual machine.
                  &lt;p&gt; The locale used is the {@linkplain Locale#getDefault() default
                  locale} for this instance of the Java virtual machine.                
                <param>
                    osThe output stream to use as the destination of this formatter.
                      The output will be buffered.                    
                </param>
            </javadoc>
            <method name="Formatter" type="constructor" line="2194">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="2199">
                Constructs a new formatter with the specified output stream and
                  charset.
                  &lt;p&gt; The locale used is the {@linkplain Locale#getDefault default
                  locale} for this instance of the Java virtual machine.                
                <param>
                    osThe output stream to use as the destination of this formatter.
                      The output will be buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
            </javadoc>
            <method name="Formatter" type="constructor" line="2219">
                <params>
                    <param name="os" type="OutputStream"/>
                    <param name="csn" type="String"/>
                </params>
            </method>
            <javadoc line="2223">
                Constructs a new formatter with the specified output stream, charset,
                  and locale.                
                <param>
                    osThe output stream to use as the destination of this formatter.
                      The output will be buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If {@code l} is {@code null} then no localization
                      is applied.                    
                </param>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
            </javadoc>
            <method name="Formatter" type="constructor" line="2245">
                <params>
                    <param name="os" type="OutputStream"/>
                    <param name="csn" type="String"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <method name="getZero" type="char" line="2249">
                <params>
                    <param name="l" type="Locale"/>
                </params>
                <scope line="2250">
                    <declaration name="dfs" type="DecimalFormatSymbols" line="2251"/>
                </scope>
                <scope line="2253"/>
            </method>
            <javadoc line="2258">
                Returns the locale set by the construction of this formatter.
                  &lt;p&gt; The {@link #format(java.util.Locale,String,Object...) format} method
                  for this object which has a locale argument does not change this value.                
                <return>
                    {@code null} if no localization is applied, otherwise a
                      locale                    
                </return>
                <throws>
                    FormatterClosedExceptionIf this formatter has been closed by invoking its {@link #close()} method                    
                </throws>
            </javadoc>
            <method name="locale" type="Locale" line="2271"/>
            <javadoc line="2276">
                Returns the destination for the output.                
                <return>
                    The destination for the output                    
                </return>
                <throws>
                    FormatterClosedExceptionIf this formatter has been closed by invoking its {@link #close()} method                    
                </throws>
            </javadoc>
            <method name="out" type="Appendable" line="2285"/>
            <javadoc line="2290">
                Returns the result of invoking {@code toString()} on the destination
                  for the output.  For example, the following code formats text into a{@link StringBuilder} then retrieves the resultant string:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Formatter f = new Formatter();
                  f.format(&quot;Last reboot at %tc&quot;, lastRebootDate);
                  String s = f.toString();
                  // -&amp;gt; s == &quot;Last reboot at Sat Jan 01 00:00:00 PST 2000&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; An invocation of this method behaves in exactly the same way as the
                  invocation
                  &lt;pre&gt;
                  out().toString() &lt;/pre&gt;
                  &lt;p&gt; Depending on the specification of {@code toString} for the {@link Appendable}, the returned string may or may not contain the characters
                  written to the destination.  For instance, buffers typically return
                  their contents in {@code toString()}, but streams cannot since the
                  data is discarded.                
                <return>
                    The result of invoking {@code toString()} on the destination
                      for the output                    
                </return>
                <throws>
                    FormatterClosedExceptionIf this formatter has been closed by invoking its {@link #close()} method                    
                </throws>
            </javadoc>
            <method name="toString" type="String" line="2321"/>
            <javadoc line="2326">
                Flushes this formatter.  If the destination implements the {@link java.io.Flushable} interface, its {@code flush} method will be invoked.
                  &lt;p&gt; Flushing a formatter writes any buffered output in the destination
                  to the underlying stream.                
                <throws>
                    FormatterClosedExceptionIf this formatter has been closed by invoking its {@link #close()} method                    
                </throws>
            </javadoc>
            <method name="flush" type="void" line="2337">
                <scope line="2339">
                    <scope line="2340"/>
                    <scope line="2342"/>
                </scope>
            </method>
            <javadoc line="2348">
                Closes this formatter.  If the destination implements the {@link java.io.Closeable} interface, its {@code close} method will be invoked.
                  &lt;p&gt; Closing a formatter allows it to release resources it may be holding
                  (such as open files).  If the formatter is already closed, then invoking
                  this method has no effect.
                  &lt;p&gt; Attempting to invoke any methods except {@link #ioException()} in
                  this formatter after it has been closed will result in a {@link FormatterClosedException}.                
            </javadoc>
            <method name="close" type="void" line="2360">
                <scope line="2363"/>
                <scope line="2366"/>
                <scope line="2368"/>
            </method>
            <method name="ensureOpen" type="void" line="2373"/>
            <javadoc line="2378">
                Returns the {@code IOException} last thrown by this formatter&apos;s {@link Appendable}.
                  &lt;p&gt; If the destination&apos;s {@code append()} method never throws{@code IOException}, then this method will always return {@code null}.                
                <return>
                    The last exception thrown by the Appendable or {@code null} if
                      no such exception exists.                    
                </return>
            </javadoc>
            <method name="ioException" type="IOException" line="2388"/>
            <javadoc line="2392">
                Writes a formatted string to this object&apos;s destination using the
                  specified format string and arguments.  The locale used is the one
                  defined during the construction of this formatter.                
                <param>
                    formatA format string as described in <a href="#syntax">Format string
                      syntax</a>.                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a href="#detail">Details</a>
                      section of the formatter class specification.                    
                </throws>
                <throws>
                    FormatterClosedExceptionIf this formatter has been closed by invoking its {@link #close()} method                    
                </throws>
                <return>
                    This formatter                    
                </return>
            </javadoc>
            <method name="format" type="Formatter" line="2422">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="2426">
                Writes a formatted string to this object&apos;s destination using the
                  specified locale, format string, and arguments.                
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If {@code l} is {@code null} then no localization
                      is applied.  This does not change this object's locale that was
                      set during construction.                    
                </param>
                <param>
                    formatA format string as described in <a href="#syntax">Format string
                      syntax</a>                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a href="#detail">Details</a>
                      section of the formatter class specification.                    
                </throws>
                <throws>
                    FormatterClosedExceptionIf this formatter has been closed by invoking its {@link #close()} method                    
                </throws>
                <return>
                    This formatter                    
                </return>
            </javadoc>
            <method name="format" type="Formatter" line="2461">
                <params>
                    <param name="l" type="Locale"/>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <comment line="2465">
                    index of last argument referenced                    
                </comment>
                <comment line="2467">
                    last ordinary index                    
                </comment>
                <comment line="2476">
                    fixed string, &quot;%n&quot;, or &quot;%%&quot;                    
                </comment>
                <comment line="2479">
                    relative index                    
                </comment>
                <comment line="2484">
                    ordinary index                    
                </comment>
                <comment line="2491">
                    explicit index                    
                </comment>
                <declaration name="last" type="int" line="2465"/>
                <declaration name="lasto" type="int" line="2467"/>
                <declaration name="fsa" type="FormatString[]" line="2469"/>
                <scope line="2470">
                    <declaration name="fs" type="FormatString" line="2471"/>
                    <declaration name="index" type="int" line="2472"/>
                    <scope line="2473"/>
                    <scope line="2497"/>
                </scope>
            </method>
            <declaration name="formatSpecifier" type="String" line="2505"/>
            <declaration name="fsPattern" type="Pattern" line="2508"/>
            <javadoc line="2510">
                Finds format specifiers in the format string.                
            </javadoc>
            <method name="parse" type="FormatString[]" line="2513">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="2519">
                    Anything between the start of the string and the beginning
                     of the format specifier is either fixed text or contains
                     an invalid format string.                    
                </comment>
                <comment line="2523">
                    Make sure we didn&apos;t miss any invalid format specifiers                    
                </comment>
                <comment line="2525">
                    Assume previous characters were fixed text                    
                </comment>
                <comment line="2532">
                    No more valid format specifiers.  Check for possible invalid
                     format specifiers.                    
                </comment>
                <comment line="2535">
                    The rest of the string is fixed text                    
                </comment>
                <declaration name="al" type="ArrayList&lt;FormatString&gt;" line="2514"/>
                <declaration name="m" type="Matcher" line="2515"/>
                <scope line="2516">
                    <scope line="2517">
                        <scope line="2521"/>
                    </scope>
                    <scope line="2530"/>
                </scope>
            </method>
            <method name="checkText" type="void" line="2542">
                <params>
                    <param name="s" type="String"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="2545">
                    Any &apos;%&apos; found in the region starts an invalid format specifier.                    
                </comment>
                <scope line="2543">
                    <scope line="2545">
                        <declaration name="c" type="char" line="2546"/>
                    </scope>
                </scope>
            </method>
            <interface name="FormatString">
                <comment line="3095">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3112">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3206">
                    !Double.isInfinite(value) &amp;&amp; !Double.isNaN(value)                    
                </comment>
                <comment line="3379">
                    Add zeros to the requested precision.                    
                </comment>
                <comment line="3418">
                    Method assumes that d &gt; 0.                    
                </comment>
                <comment line="3520">
                    value &gt; 0                    
                </comment>
                <comment line="3793">
                    Add a &apos;.&apos; to th mantissa if required                    
                </comment>
                <comment line="3802">
                    Add trailing zeros in the case precision is greater than the number
                     of available digits after the decimal separator.                    
                </comment>
                <comment line="4038">
                    -- Methods to support throwing exceptions --                    
                </comment>
                <comment line="4138">
                    &apos;&apos;                    
                </comment>
                <comment line="4140">
                    duplicate declarations from Formattable.java                    
                </comment>
                <comment line="4141">
                    &apos;-&apos;                    
                </comment>
                <comment line="4142">
                    &apos;^&apos;                    
                </comment>
                <comment line="4143">
                    &apos;#&apos;                    
                </comment>
                <comment line="4145">
                    numerics                    
                </comment>
                <comment line="4146">
                    &apos;+&apos;                    
                </comment>
                <comment line="4147">
                    &apos; &apos;                    
                </comment>
                <comment line="4148">
                    &apos;0&apos;                    
                </comment>
                <comment line="4149">
                    &apos;,&apos;                    
                </comment>
                <comment line="4150">
                    &apos;(&apos;                    
                </comment>
                <comment line="4152">
                    indexing                    
                </comment>
                <comment line="4153">
                    &apos;&lt;&apos;                    
                </comment>
                <comment line="4193">
                    parse those flags which may be provided by users                    
                </comment>
                <comment line="4209">
                    Returns a string representation of the current {@code Flags}.                    
                </comment>
                <comment line="4230">
                    Byte, Short, Integer, Long, BigInteger
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4237">
                    Float, Double, BigDecimal
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4247">
                    Character, Byte, Short, Integer
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4252">
                    java.util.Date, java.util.Calendar, long                    
                </comment>
                <comment line="4256">
                    if (arg.TYPE != boolean) return boolean
                     if (arg != null) return true; else return false;                    
                </comment>
                <comment line="4260">
                    if (arg instanceof Formattable) arg.formatTo()
                     else arg.toString();                    
                </comment>
                <comment line="4264">
                    arg.hashCode()                    
                </comment>
                <comment line="4276">
                    Returns true iff the Conversion is applicable to all objects.                    
                </comment>
                <comment line="4291">
                    Returns true iff the Conversion is applicable to character.                    
                </comment>
                <comment line="4302">
                    Returns true iff the Conversion is an integer type.                    
                </comment>
                <comment line="4315">
                    Returns true iff the Conversion is a floating-point type.                    
                </comment>
                <comment line="4331">
                    Returns true iff the Conversion does not require an argument                    
                </comment>
                <comment line="4344">
                    (00 - 23)                    
                </comment>
                <comment line="4345">
                    (01 - 12)                    
                </comment>
                <comment line="4346">
                    (0 - 23) -- like H                    
                </comment>
                <comment line="4347">
                    (1 - 12) -- like I                    
                </comment>
                <comment line="4348">
                    (00 - 59)                    
                </comment>
                <comment line="4349">
                    (000000000 - 999999999)                    
                </comment>
                <comment line="4350">
                    jdk, not in gnu (000 - 999)                    
                </comment>
                <comment line="4351">
                    (0 - 99...?)                    
                </comment>
                <comment line="4352">
                    (am or pm)                    
                </comment>
                <comment line="4353">
                    (0 - 99...?)                    
                </comment>
                <comment line="4354">
                    (00 - 60 - leap second)                    
                </comment>
                <comment line="4355">
                    (24 hour hh:mm:ss)                    
                </comment>
                <comment line="4356">
                    (-1200 - +1200) - ls minus?                    
                </comment>
                <comment line="4357">
                    (symbol)                    
                </comment>
                <comment line="4359">
                    Date                    
                </comment>
                <comment line="4360">
                    &apos;a&apos;                    
                </comment>
                <comment line="4361">
                    &apos;A&apos;                    
                </comment>
                <comment line="4362">
                    &apos;b&apos;                    
                </comment>
                <comment line="4363">
                    &apos;B&apos;                    
                </comment>
                <comment line="4364">
                    (00 - 99)                    
                </comment>
                <comment line="4365">
                    (01 - 31)                    
                </comment>
                <comment line="4366">
                    (1 - 31) -- like d                    
                </comment>
                <comment line="4367">
                    *    static final char ISO_WEEK_OF_YEAR_2    = &apos;g&apos;; // cross %y %V
                     *    static final char ISO_WEEK_OF_YEAR_4    = &apos;G&apos;;  cross %Y %V                    
                </comment>
                <comment line="4369">
                    -- same b                    
                </comment>
                <comment line="4370">
                    (001 - 366)                    
                </comment>
                <comment line="4371">
                    (01 - 12)                    
                </comment>
                <comment line="4372">
                    *    static final char DAY_OF_WEEK_1         = &apos;u&apos;; // (1 - 7) Monday
                     *    static final char WEEK_OF_YEAR_SUNDAY   = &apos;U&apos;;  (0 - 53) Sunday+
                     *    static final char WEEK_OF_YEAR_MONDAY_01 = &apos;V&apos;;  (01 - 53) Monday+
                     *    static final char DAY_OF_WEEK_0         = &apos;w&apos;;  (0 - 6) Sunday
                     *    static final char WEEK_OF_YEAR_MONDAY   = &apos;W&apos;;  (00 - 53) Monday                    
                </comment>
                <comment line="4377">
                    (00 - 99)                    
                </comment>
                <comment line="4378">
                    (0000 - 9999)                    
                </comment>
                <comment line="4380">
                    Composites                    
                </comment>
                <comment line="4381">
                    (hh:mm:ss [AP]M)                    
                </comment>
                <comment line="4382">
                    (hh:mm same as %H:%M)                    
                </comment>
                <comment line="4383">
                    *    static final char LOCALE_TIME   = &apos;X&apos;; // (%H:%M:%S) - parse format?                    
                </comment>
                <comment line="4385">
                    (Sat Nov 04 12:02:33 EST 1999)                    
                </comment>
                <comment line="4386">
                    (mm/dd/yy)                    
                </comment>
                <comment line="4387">
                    (%Y-%m-%d)                    
                </comment>
                <comment line="4388">
                    *    static final char LOCALE_DATE           = &apos;x&apos;; // (mm/dd/yy)                    
                </comment>
                <method name="index" type="int" line="2553"/>
                <method name="print" type="void" line="2554"/>
                <method name="toString" type="String" line="2555"/>
            </interface>
            <class name="FixedString" line="2558">
                <comment line="3095">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3112">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3206">
                    !Double.isInfinite(value) &amp;&amp; !Double.isNaN(value)                    
                </comment>
                <comment line="3379">
                    Add zeros to the requested precision.                    
                </comment>
                <comment line="3418">
                    Method assumes that d &gt; 0.                    
                </comment>
                <comment line="3520">
                    value &gt; 0                    
                </comment>
                <comment line="3793">
                    Add a &apos;.&apos; to th mantissa if required                    
                </comment>
                <comment line="3802">
                    Add trailing zeros in the case precision is greater than the number
                     of available digits after the decimal separator.                    
                </comment>
                <comment line="4038">
                    -- Methods to support throwing exceptions --                    
                </comment>
                <comment line="4138">
                    &apos;&apos;                    
                </comment>
                <comment line="4140">
                    duplicate declarations from Formattable.java                    
                </comment>
                <comment line="4141">
                    &apos;-&apos;                    
                </comment>
                <comment line="4142">
                    &apos;^&apos;                    
                </comment>
                <comment line="4143">
                    &apos;#&apos;                    
                </comment>
                <comment line="4145">
                    numerics                    
                </comment>
                <comment line="4146">
                    &apos;+&apos;                    
                </comment>
                <comment line="4147">
                    &apos; &apos;                    
                </comment>
                <comment line="4148">
                    &apos;0&apos;                    
                </comment>
                <comment line="4149">
                    &apos;,&apos;                    
                </comment>
                <comment line="4150">
                    &apos;(&apos;                    
                </comment>
                <comment line="4152">
                    indexing                    
                </comment>
                <comment line="4153">
                    &apos;&lt;&apos;                    
                </comment>
                <comment line="4193">
                    parse those flags which may be provided by users                    
                </comment>
                <comment line="4209">
                    Returns a string representation of the current {@code Flags}.                    
                </comment>
                <comment line="4230">
                    Byte, Short, Integer, Long, BigInteger
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4237">
                    Float, Double, BigDecimal
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4247">
                    Character, Byte, Short, Integer
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4252">
                    java.util.Date, java.util.Calendar, long                    
                </comment>
                <comment line="4256">
                    if (arg.TYPE != boolean) return boolean
                     if (arg != null) return true; else return false;                    
                </comment>
                <comment line="4260">
                    if (arg instanceof Formattable) arg.formatTo()
                     else arg.toString();                    
                </comment>
                <comment line="4264">
                    arg.hashCode()                    
                </comment>
                <comment line="4276">
                    Returns true iff the Conversion is applicable to all objects.                    
                </comment>
                <comment line="4291">
                    Returns true iff the Conversion is applicable to character.                    
                </comment>
                <comment line="4302">
                    Returns true iff the Conversion is an integer type.                    
                </comment>
                <comment line="4315">
                    Returns true iff the Conversion is a floating-point type.                    
                </comment>
                <comment line="4331">
                    Returns true iff the Conversion does not require an argument                    
                </comment>
                <comment line="4344">
                    (00 - 23)                    
                </comment>
                <comment line="4345">
                    (01 - 12)                    
                </comment>
                <comment line="4346">
                    (0 - 23) -- like H                    
                </comment>
                <comment line="4347">
                    (1 - 12) -- like I                    
                </comment>
                <comment line="4348">
                    (00 - 59)                    
                </comment>
                <comment line="4349">
                    (000000000 - 999999999)                    
                </comment>
                <comment line="4350">
                    jdk, not in gnu (000 - 999)                    
                </comment>
                <comment line="4351">
                    (0 - 99...?)                    
                </comment>
                <comment line="4352">
                    (am or pm)                    
                </comment>
                <comment line="4353">
                    (0 - 99...?)                    
                </comment>
                <comment line="4354">
                    (00 - 60 - leap second)                    
                </comment>
                <comment line="4355">
                    (24 hour hh:mm:ss)                    
                </comment>
                <comment line="4356">
                    (-1200 - +1200) - ls minus?                    
                </comment>
                <comment line="4357">
                    (symbol)                    
                </comment>
                <comment line="4359">
                    Date                    
                </comment>
                <comment line="4360">
                    &apos;a&apos;                    
                </comment>
                <comment line="4361">
                    &apos;A&apos;                    
                </comment>
                <comment line="4362">
                    &apos;b&apos;                    
                </comment>
                <comment line="4363">
                    &apos;B&apos;                    
                </comment>
                <comment line="4364">
                    (00 - 99)                    
                </comment>
                <comment line="4365">
                    (01 - 31)                    
                </comment>
                <comment line="4366">
                    (1 - 31) -- like d                    
                </comment>
                <comment line="4367">
                    *    static final char ISO_WEEK_OF_YEAR_2    = &apos;g&apos;; // cross %y %V
                     *    static final char ISO_WEEK_OF_YEAR_4    = &apos;G&apos;;  cross %Y %V                    
                </comment>
                <comment line="4369">
                    -- same b                    
                </comment>
                <comment line="4370">
                    (001 - 366)                    
                </comment>
                <comment line="4371">
                    (01 - 12)                    
                </comment>
                <comment line="4372">
                    *    static final char DAY_OF_WEEK_1         = &apos;u&apos;; // (1 - 7) Monday
                     *    static final char WEEK_OF_YEAR_SUNDAY   = &apos;U&apos;;  (0 - 53) Sunday+
                     *    static final char WEEK_OF_YEAR_MONDAY_01 = &apos;V&apos;;  (01 - 53) Monday+
                     *    static final char DAY_OF_WEEK_0         = &apos;w&apos;;  (0 - 6) Sunday
                     *    static final char WEEK_OF_YEAR_MONDAY   = &apos;W&apos;;  (00 - 53) Monday                    
                </comment>
                <comment line="4377">
                    (00 - 99)                    
                </comment>
                <comment line="4378">
                    (0000 - 9999)                    
                </comment>
                <comment line="4380">
                    Composites                    
                </comment>
                <comment line="4381">
                    (hh:mm:ss [AP]M)                    
                </comment>
                <comment line="4382">
                    (hh:mm same as %H:%M)                    
                </comment>
                <comment line="4383">
                    *    static final char LOCALE_TIME   = &apos;X&apos;; // (%H:%M:%S) - parse format?                    
                </comment>
                <comment line="4385">
                    (Sat Nov 04 12:02:33 EST 1999)                    
                </comment>
                <comment line="4386">
                    (mm/dd/yy)                    
                </comment>
                <comment line="4387">
                    (%Y-%m-%d)                    
                </comment>
                <comment line="4388">
                    *    static final char LOCALE_DATE           = &apos;x&apos;; // (mm/dd/yy)                    
                </comment>
                <implements interface="FormatString"/>
                <declaration name="s" type="String" line="2559"/>
                <method name="FixedString" type="constructor" line="2560">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <method name="index" type="int" line="2561"/>
                <method name="print" type="void" line="2563">
                    <params>
                        <param name="arg" type="Object"/>
                        <param name="l" type="Locale"/>
                    </params>
                </method>
                <method name="toString" type="String" line="2564"/>
            </class>
            <class name="FormatSpecifier" line="2569">
                <comment line="3095">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3112">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3206">
                    !Double.isInfinite(value) &amp;&amp; !Double.isNaN(value)                    
                </comment>
                <comment line="3379">
                    Add zeros to the requested precision.                    
                </comment>
                <comment line="3418">
                    Method assumes that d &gt; 0.                    
                </comment>
                <comment line="3520">
                    value &gt; 0                    
                </comment>
                <comment line="3793">
                    Add a &apos;.&apos; to th mantissa if required                    
                </comment>
                <comment line="3802">
                    Add trailing zeros in the case precision is greater than the number
                     of available digits after the decimal separator.                    
                </comment>
                <comment line="4038">
                    -- Methods to support throwing exceptions --                    
                </comment>
                <comment line="4138">
                    &apos;&apos;                    
                </comment>
                <comment line="4140">
                    duplicate declarations from Formattable.java                    
                </comment>
                <comment line="4141">
                    &apos;-&apos;                    
                </comment>
                <comment line="4142">
                    &apos;^&apos;                    
                </comment>
                <comment line="4143">
                    &apos;#&apos;                    
                </comment>
                <comment line="4145">
                    numerics                    
                </comment>
                <comment line="4146">
                    &apos;+&apos;                    
                </comment>
                <comment line="4147">
                    &apos; &apos;                    
                </comment>
                <comment line="4148">
                    &apos;0&apos;                    
                </comment>
                <comment line="4149">
                    &apos;,&apos;                    
                </comment>
                <comment line="4150">
                    &apos;(&apos;                    
                </comment>
                <comment line="4152">
                    indexing                    
                </comment>
                <comment line="4153">
                    &apos;&lt;&apos;                    
                </comment>
                <comment line="4193">
                    parse those flags which may be provided by users                    
                </comment>
                <comment line="4209">
                    Returns a string representation of the current {@code Flags}.                    
                </comment>
                <comment line="4230">
                    Byte, Short, Integer, Long, BigInteger
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4237">
                    Float, Double, BigDecimal
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4247">
                    Character, Byte, Short, Integer
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4252">
                    java.util.Date, java.util.Calendar, long                    
                </comment>
                <comment line="4256">
                    if (arg.TYPE != boolean) return boolean
                     if (arg != null) return true; else return false;                    
                </comment>
                <comment line="4260">
                    if (arg instanceof Formattable) arg.formatTo()
                     else arg.toString();                    
                </comment>
                <comment line="4264">
                    arg.hashCode()                    
                </comment>
                <comment line="4276">
                    Returns true iff the Conversion is applicable to all objects.                    
                </comment>
                <comment line="4291">
                    Returns true iff the Conversion is applicable to character.                    
                </comment>
                <comment line="4302">
                    Returns true iff the Conversion is an integer type.                    
                </comment>
                <comment line="4315">
                    Returns true iff the Conversion is a floating-point type.                    
                </comment>
                <comment line="4331">
                    Returns true iff the Conversion does not require an argument                    
                </comment>
                <comment line="4344">
                    (00 - 23)                    
                </comment>
                <comment line="4345">
                    (01 - 12)                    
                </comment>
                <comment line="4346">
                    (0 - 23) -- like H                    
                </comment>
                <comment line="4347">
                    (1 - 12) -- like I                    
                </comment>
                <comment line="4348">
                    (00 - 59)                    
                </comment>
                <comment line="4349">
                    (000000000 - 999999999)                    
                </comment>
                <comment line="4350">
                    jdk, not in gnu (000 - 999)                    
                </comment>
                <comment line="4351">
                    (0 - 99...?)                    
                </comment>
                <comment line="4352">
                    (am or pm)                    
                </comment>
                <comment line="4353">
                    (0 - 99...?)                    
                </comment>
                <comment line="4354">
                    (00 - 60 - leap second)                    
                </comment>
                <comment line="4355">
                    (24 hour hh:mm:ss)                    
                </comment>
                <comment line="4356">
                    (-1200 - +1200) - ls minus?                    
                </comment>
                <comment line="4357">
                    (symbol)                    
                </comment>
                <comment line="4359">
                    Date                    
                </comment>
                <comment line="4360">
                    &apos;a&apos;                    
                </comment>
                <comment line="4361">
                    &apos;A&apos;                    
                </comment>
                <comment line="4362">
                    &apos;b&apos;                    
                </comment>
                <comment line="4363">
                    &apos;B&apos;                    
                </comment>
                <comment line="4364">
                    (00 - 99)                    
                </comment>
                <comment line="4365">
                    (01 - 31)                    
                </comment>
                <comment line="4366">
                    (1 - 31) -- like d                    
                </comment>
                <comment line="4367">
                    *    static final char ISO_WEEK_OF_YEAR_2    = &apos;g&apos;; // cross %y %V
                     *    static final char ISO_WEEK_OF_YEAR_4    = &apos;G&apos;;  cross %Y %V                    
                </comment>
                <comment line="4369">
                    -- same b                    
                </comment>
                <comment line="4370">
                    (001 - 366)                    
                </comment>
                <comment line="4371">
                    (01 - 12)                    
                </comment>
                <comment line="4372">
                    *    static final char DAY_OF_WEEK_1         = &apos;u&apos;; // (1 - 7) Monday
                     *    static final char WEEK_OF_YEAR_SUNDAY   = &apos;U&apos;;  (0 - 53) Sunday+
                     *    static final char WEEK_OF_YEAR_MONDAY_01 = &apos;V&apos;;  (01 - 53) Monday+
                     *    static final char DAY_OF_WEEK_0         = &apos;w&apos;;  (0 - 6) Sunday
                     *    static final char WEEK_OF_YEAR_MONDAY   = &apos;W&apos;;  (00 - 53) Monday                    
                </comment>
                <comment line="4377">
                    (00 - 99)                    
                </comment>
                <comment line="4378">
                    (0000 - 9999)                    
                </comment>
                <comment line="4380">
                    Composites                    
                </comment>
                <comment line="4381">
                    (hh:mm:ss [AP]M)                    
                </comment>
                <comment line="4382">
                    (hh:mm same as %H:%M)                    
                </comment>
                <comment line="4383">
                    *    static final char LOCALE_TIME   = &apos;X&apos;; // (%H:%M:%S) - parse format?                    
                </comment>
                <comment line="4385">
                    (Sat Nov 04 12:02:33 EST 1999)                    
                </comment>
                <comment line="4386">
                    (mm/dd/yy)                    
                </comment>
                <comment line="4387">
                    (%Y-%m-%d)                    
                </comment>
                <comment line="4388">
                    *    static final char LOCALE_DATE           = &apos;x&apos;; // (mm/dd/yy)                    
                </comment>
                <implements interface="FormatString"/>
                <declaration name="index" type="int" line="2570"/>
                <declaration name="f" type="Flags" line="2571"/>
                <declaration name="width" type="int" line="2572"/>
                <declaration name="precision" type="int" line="2573"/>
                <declaration name="dt" type="boolean" line="2574"/>
                <declaration name="c" type="char" line="2575"/>
                <method name="index" type="int" line="2577">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <scope line="2578">
                        <scope line="2579"/>
                        <scope line="2581"/>
                    </scope>
                    <scope line="2584"/>
                </method>
                <method name="index" type="int" line="2590"/>
                <method name="flags" type="Flags" line="2594">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <method name="flags" type="Flags" line="2601"/>
                <method name="width" type="int" line="2605">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <scope line="2607">
                        <scope line="2608"/>
                        <scope line="2612"/>
                    </scope>
                </method>
                <method name="width" type="int" line="2619"/>
                <method name="precision" type="int" line="2623">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <comment line="2628">
                        remove the &apos;.&apos;                        
                    </comment>
                    <scope line="2625">
                        <scope line="2626"/>
                        <scope line="2631"/>
                    </scope>
                </method>
                <method name="precision" type="int" line="2638"/>
                <method name="conversion" type="char" line="2642">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <scope line="2644"/>
                </method>
                <method name="conversion" type="char" line="2656"/>
                <method name="FormatSpecifier" type="constructor" line="2660">
                    <params>
                        <param name="m" type="Matcher"/>
                    </params>
                    <declaration name="idx" type="int" line="2661"/>
                    <declaration name="tT" type="String" line="2668"/>
                    <scope line="2669"/>
                </method>
                <method name="print" type="void" line="2693">
                    <params>
                        <param name="arg" type="Object"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <scope line="2694"/>
                </method>
                <method name="printInteger" type="void" line="2734">
                    <params>
                        <param name="arg" type="Object"/>
                        <param name="l" type="Locale"/>
                    </params>
                </method>
                <method name="printFloat" type="void" line="2751">
                    <params>
                        <param name="arg" type="Object"/>
                        <param name="l" type="Locale"/>
                    </params>
                </method>
                <method name="printDateTime" type="void" line="2764">
                    <params>
                        <param name="arg" type="Object"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <comment line="2772">
                        Instead of Calendar.setLenient(true), perhaps we should
                         wrap the IllegalArgumentException that might be thrown?                        
                    </comment>
                    <comment line="2775">
                        Note that the following method uses an instance of the
                         default time zone (TimeZone.getDefaultRef().                        
                    </comment>
                    <comment line="2780">
                        Note that the following method uses an instance of the
                         default time zone (TimeZone.getDefaultRef().                        
                    </comment>
                    <comment line="2790">
                        Use the provided locale so that invocations of
                         localizedMagnitude() use optimizations for null.                        
                    </comment>
                    <scope line="2765"/>
                    <declaration name="cal" type="Calendar" line="2769"/>
                    <scope line="2773"/>
                    <scope line="2778"/>
                    <scope line="2783"/>
                    <scope line="2786"/>
                </method>
                <method name="printCharacter" type="void" line="2794">
                    <params>
                        <param name="arg" type="Object"/>
                    </params>
                    <scope line="2795"/>
                    <declaration name="s" type="String" line="2799"/>
                    <scope line="2800"/>
                    <scope line="2802">
                        <declaration name="i" type="byte" line="2803"/>
                    </scope>
                    <scope line="2808">
                        <declaration name="i" type="short" line="2809"/>
                    </scope>
                    <scope line="2814">
                        <declaration name="i" type="int" line="2815"/>
                    </scope>
                    <scope line="2820"/>
                </method>
                <method name="printString" type="void" line="2826">
                    <params>
                        <param name="arg" type="Object"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <scope line="2827">
                        <declaration name="fmt" type="Formatter" line="2828"/>
                    </scope>
                    <scope line="2832"/>
                </method>
                <method name="printBoolean" type="void" line="2842">
                    <params>
                        <param name="arg" type="Object"/>
                    </params>
                    <declaration name="s" type="String" line="2843"/>
                </method>
                <method name="printHashCode" type="void" line="2853">
                    <params>
                        <param name="arg" type="Object"/>
                    </params>
                    <declaration name="s" type="String" line="2854"/>
                </method>
                <method name="print" type="void" line="2860">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <method name="justify" type="String" line="2868">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="sb" type="StringBuilder" line="2871"/>
                    <declaration name="pad" type="boolean" line="2872"/>
                    <declaration name="sp" type="int" line="2873"/>
                </method>
                <method name="toString" type="String" line="2882">
                    <comment line="2885">
                        Flags.UPPERCASE is set internally for legal conversions.                        
                    </comment>
                    <declaration name="sb" type="StringBuilder" line="2883"/>
                    <declaration name="dupf" type="Flags" line="2885"/>
                </method>
                <method name="checkGeneral" type="void" line="2900">
                    <comment line="2905">
                        &apos;-&apos; requires a width                        
                    </comment>
                </method>
                <method name="checkDateTime" type="void" line="2911">
                    <comment line="2919">
                        &apos;-&apos; requires a width                        
                    </comment>
                </method>
                <method name="checkCharacter" type="void" line="2923">
                    <comment line="2929">
                        &apos;-&apos; requires a width                        
                    </comment>
                </method>
                <method name="checkInteger" type="void" line="2933"/>
                <method name="checkBadFlags" type="void" line="2946">
                    <params>
                        <param name="badFlags" type="Flags"/>
                    </params>
                </method>
                <method name="checkFloat" type="void" line="2952">
                    <scope line="2954"/>
                    <scope line="2955"/>
                    <scope line="2957"/>
                    <scope line="2959"/>
                </method>
                <method name="checkNumeric" type="void" line="2964">
                    <comment line="2972">
                        &apos;-&apos; and &apos;0&apos; require a width                        
                    </comment>
                    <comment line="2977">
                        bad combination                        
                    </comment>
                </method>
                <method name="checkText" type="void" line="2982">
                    <comment line="2991">
                        &apos;-&apos; requires a width                        
                    </comment>
                </method>
                <method name="print" type="void" line="3005">
                    <params>
                        <param name="value" type="byte"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <declaration name="v" type="long" line="3006"/>
                    <scope line="3009"/>
                </method>
                <method name="print" type="void" line="3016">
                    <params>
                        <param name="value" type="short"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <declaration name="v" type="long" line="3017"/>
                    <scope line="3020"/>
                </method>
                <method name="print" type="void" line="3027">
                    <params>
                        <param name="value" type="int"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <declaration name="v" type="long" line="3028"/>
                    <scope line="3031"/>
                </method>
                <method name="print" type="void" line="3038">
                    <params>
                        <param name="value" type="long"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <comment line="3051">
                        leading sign indicator                        
                    </comment>
                    <comment line="3054">
                        the value                        
                    </comment>
                    <comment line="3057">
                        trailing sign indicator                        
                    </comment>
                    <comment line="3067">
                        apply ALTERNATE (radix indicator for octal) before ZERO_PAD                        
                    </comment>
                    <comment line="3081">
                        apply ALTERNATE (radix indicator for hex) before ZERO_PAD                        
                    </comment>
                    <comment line="3091">
                        justify based on width                        
                    </comment>
                    <declaration name="sb" type="StringBuilder" line="3040"/>
                    <scope line="3042">
                        <declaration name="neg" type="boolean" line="3043"/>
                        <declaration name="va" type="char[]" line="3044"/>
                    </scope>
                    <scope line="3058">
                        <declaration name="s" type="String" line="3061"/>
                        <declaration name="len" type="int" line="3062"/>
                    </scope>
                    <scope line="3072">
                        <declaration name="s" type="String" line="3075"/>
                        <declaration name="len" type="int" line="3076"/>
                    </scope>
                </method>
                <method name="leadingSign" type="StringBuilder" line="3095">
                    <params>
                        <param name="sb" type="StringBuilder"/>
                        <param name="neg" type="boolean"/>
                    </params>
                    <scope line="3096">
                        <scope line="3097"/>
                        <scope line="3099"/>
                    </scope>
                    <scope line="3102"/>
                </method>
                <method name="trailingSign" type="StringBuilder" line="3112">
                    <params>
                        <param name="sb" type="StringBuilder"/>
                        <param name="neg" type="boolean"/>
                    </params>
                </method>
                <method name="print" type="void" line="3118">
                    <params>
                        <param name="value" type="BigInteger"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <comment line="3124">
                        leading sign indicator                        
                    </comment>
                    <comment line="3127">
                        the value                        
                    </comment>
                    <comment line="3138">
                        apply ALTERNATE (radix indicator for octal) before ZERO_PAD                        
                    </comment>
                    <comment line="3155">
                        apply ALTERNATE (radix indicator for hex) before ZERO_PAD                        
                    </comment>
                    <comment line="3168">
                        trailing sign indicator                        
                    </comment>
                    <comment line="3171">
                        justify based on width                        
                    </comment>
                    <declaration name="sb" type="StringBuilder" line="3119"/>
                    <declaration name="neg" type="boolean" line="3120"/>
                    <declaration name="v" type="BigInteger" line="3121"/>
                    <scope line="3127">
                        <declaration name="va" type="char[]" line="3128"/>
                    </scope>
                    <scope line="3130">
                        <declaration name="s" type="String" line="3131"/>
                        <declaration name="len" type="int" line="3133"/>
                        <scope line="3138"/>
                        <scope line="3142"/>
                    </scope>
                    <scope line="3147">
                        <declaration name="s" type="String" line="3148"/>
                        <declaration name="len" type="int" line="3150"/>
                        <scope line="3155"/>
                    </scope>
                </method>
                <method name="print" type="void" line="3174">
                    <params>
                        <param name="value" type="float"/>
                        <param name="l" type="Locale"/>
                    </params>
                </method>
                <method name="print" type="void" line="3178">
                    <params>
                        <param name="value" type="double"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <comment line="3186">
                        leading sign indicator                        
                    </comment>
                    <comment line="3189">
                        the value                        
                    </comment>
                    <comment line="3196">
                        trailing sign indicator                        
                    </comment>
                    <comment line="3202">
                        justify based on width                        
                    </comment>
                    <declaration name="sb" type="StringBuilder" line="3179"/>
                    <declaration name="neg" type="boolean" line="3180"/>
                    <scope line="3182">
                        <declaration name="v" type="double" line="3183"/>
                    </scope>
                    <scope line="3197"/>
                </method>
                <method name="print" type="void" line="3209">
                    <params>
                        <param name="sb" type="StringBuilder"/>
                        <param name="value" type="double"/>
                        <param name="l" type="Locale"/>
                        <param name="f" type="Flags"/>
                        <param name="c" type="char"/>
                        <param name="precision" type="int"/>
                        <param name="neg" type="boolean"/>
                    </params>
                    <comment line="3212">
                        Create a new FormattedFloatingDecimal with the desired
                         precision.                        
                    </comment>
                    <comment line="3225">
                        If the precision is zero and the &apos;#&apos; flag is set, add the
                         requested decimal point.                        
                    </comment>
                    <comment line="3249">
                        Create a new FormattedFloatingDecimal with the desired
                         precision.                        
                    </comment>
                    <comment line="3257">
                        MAX_FD_CHARS + 1 (round?)                        
                    </comment>
                    <comment line="3264">
                        If the precision is zero and the &apos;#&apos; flag is set, add the
                         requested decimal point.                        
                    </comment>
                    <comment line="3284">
                        MAX_FD_CHARS + 1 (round?)                        
                    </comment>
                    <comment line="3297">
                        If the precision is zero and the &apos;#&apos; flag is set, add the
                         requested decimal point.                        
                    </comment>
                    <comment line="3326">
                        assume that we want all of the digits                        
                    </comment>
                    <comment line="3345">
                        don&apos;t localize hex                        
                    </comment>
                    <scope line="3210">
                        <declaration name="prec" type="int" line="3213"/>
                        <declaration name="fd" type="FormattedFloatingDecimal" line="3215"/>
                        <declaration name="v" type="char[]" line="3219"/>
                        <declaration name="len" type="int" line="3220"/>
                        <declaration name="mant" type="char[]" line="3222"/>
                        <declaration name="exp" type="char[]" line="3229"/>
                        <declaration name="newW" type="int" line="3232"/>
                        <declaration name="flags" type="Flags" line="3239"/>
                        <declaration name="sign" type="char" line="3240"/>
                        <declaration name="tmp" type="char[]" line="3244"/>
                    </scope>
                    <scope line="3247">
                        <declaration name="prec" type="int" line="3250"/>
                        <declaration name="fd" type="FormattedFloatingDecimal" line="3252"/>
                        <declaration name="v" type="char[]" line="3257"/>
                        <declaration name="len" type="int" line="3259"/>
                        <declaration name="mant" type="char[]" line="3261"/>
                        <declaration name="newW" type="int" line="3268"/>
                    </scope>
                    <scope line="3272">
                        <declaration name="prec" type="int" line="3273"/>
                        <declaration name="fd" type="FormattedFloatingDecimal" line="3279"/>
                        <declaration name="v" type="char[]" line="3284"/>
                        <declaration name="len" type="int" line="3286"/>
                        <declaration name="exp" type="char[]" line="3288"/>
                        <scope line="3289"/>
                        <scope line="3291"/>
                        <declaration name="mant" type="char[]" line="3295"/>
                        <declaration name="newW" type="int" line="3301"/>
                        <scope line="3302"/>
                        <scope line="3310">
                            <declaration name="flags" type="Flags" line="3313"/>
                            <declaration name="sign" type="char" line="3314"/>
                            <declaration name="tmp" type="char[]" line="3318"/>
                        </scope>
                    </scope>
                    <scope line="3322">
                        <declaration name="prec" type="int" line="3323"/>
                        <declaration name="s" type="String" line="3330"/>
                        <declaration name="va" type="char[]" line="3332"/>
                        <declaration name="upper" type="boolean" line="3333"/>
                        <declaration name="idx" type="int" line="3340"/>
                        <scope line="3342">
                            <declaration name="tmp" type="String" line="3343"/>
                        </scope>
                    </scope>
                </method>
                <method name="mantissa" type="char[]" line="3354">
                    <params>
                        <param name="v" type="char[]"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="i" type="int" line="3355"/>
                    <scope line="3356"/>
                    <declaration name="tmp" type="char[]" line="3360"/>
                </method>
                <method name="exponent" type="char[]" line="3365">
                    <params>
                        <param name="v" type="char[]"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="i" type="int" line="3366"/>
                    <scope line="3367"/>
                    <declaration name="tmp" type="char[]" line="3373"/>
                </method>
                <method name="addZeros" type="char[]" line="3379">
                    <params>
                        <param name="v" type="char[]"/>
                        <param name="prec" type="int"/>
                    </params>
                    <comment line="3381">
                        Look for the dot.  If we don&apos;t find one, the we&apos;ll need to add
                         it before we add the zeros.                        
                    </comment>
                    <comment line="3393">
                        Determine existing precision.                        
                    </comment>
                    <comment line="3399">
                        Create new array with existing contents.                        
                    </comment>
                    <comment line="3404">
                        Add dot if previously determined to be necessary.                        
                    </comment>
                    <comment line="3411">
                        Add zeros.                        
                    </comment>
                    <declaration name="i" type="int" line="3382"/>
                    <scope line="3383"/>
                    <declaration name="needDot" type="boolean" line="3387"/>
                    <scope line="3388"/>
                    <declaration name="outPrec" type="int" line="3393"/>
                    <declaration name="tmp" type="char[]" line="3399"/>
                    <declaration name="start" type="int" line="3404"/>
                    <scope line="3405"/>
                </method>
                <method name="hexDouble" type="String" line="3418">
                    <params>
                        <param name="d" type="double"/>
                        <param name="prec" type="int"/>
                    </params>
                    <comment line="3420">
                        Let Double.toHexString handle simple cases                        
                    </comment>
                    <comment line="3422">
                        remove &quot;0x&quot;                        
                    </comment>
                    <comment line="3431">
                        If this is subnormal input so normalize (could be faster to
                         do as integer operation).                        
                    </comment>
                    <comment line="3436">
                        Calculate the exponent.  This is not just exponent + 54
                         since the former is not the normalized exponent.                        
                    </comment>
                    <comment line="3449">
                        Deterime the number of bits to keep.                        
                    </comment>
                    <comment line="3454">
                        Bits to round away.                        
                    </comment>
                    <comment line="3457">
                        To decide how to round, look at the low-order bit of the
                         working significand, the highest order discarded bit (the
                         round bit) and whether any of the lower order discarded bits
                         are nonzero (the sticky bit).                        
                    </comment>
                    <comment line="3476">
                        Infinite result generated by rounding                        
                    </comment>
                    <comment line="3483">
                        Create a normalized subnormal string.                        
                    </comment>
                    <comment line="3486">
                        No &apos;p&apos; character in hex string.                        
                    </comment>
                    <comment line="3490">
                        Get exponent and append at the end.                        
                    </comment>
                    <scope line="3423">
                        <declaration name="exponent" type="int" line="3426"/>
                        <declaration name="subnormal" type="boolean" line="3427"/>
                        <scope line="3432"/>
                        <declaration name="precision" type="int" line="3442"/>
                        <declaration name="shiftDistance" type="int" line="3443"/>
                        <declaration name="doppel" type="long" line="3447"/>
                        <declaration name="newSignif" type="long" line="3449"/>
                        <declaration name="roundingBits" type="long" line="3454"/>
                        <declaration name="leastZero" type="boolean" line="3461"/>
                        <declaration name="round" type="boolean" line="3462"/>
                        <declaration name="sticky" type="boolean" line="3464"/>
                        <scope line="3466"/>
                        <declaration name="signBit" type="long" line="3470"/>
                        <declaration name="result" type="double" line="3472"/>
                        <scope line="3474"/>
                        <scope line="3477">
                            <declaration name="res" type="String" line="3478"/>
                            <scope line="3481">
                                <declaration name="idx" type="int" line="3483"/>
                                <scope line="3484"/>
                                <scope line="3488">
                                    <declaration name="exp" type="String" line="3490"/>
                                    <declaration name="iexp" type="int" line="3491"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="print" type="void" line="3500">
                    <params>
                        <param name="value" type="BigDecimal"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <comment line="3507">
                        leading sign indicator                        
                    </comment>
                    <comment line="3510">
                        the value                        
                    </comment>
                    <comment line="3513">
                        trailing sign indicator                        
                    </comment>
                    <comment line="3516">
                        justify based on width                        
                    </comment>
                    <declaration name="sb" type="StringBuilder" line="3503"/>
                    <declaration name="neg" type="boolean" line="3504"/>
                    <declaration name="v" type="BigDecimal" line="3505"/>
                </method>
                <method name="print" type="void" line="3523">
                    <params>
                        <param name="sb" type="StringBuilder"/>
                        <param name="value" type="BigDecimal"/>
                        <param name="l" type="Locale"/>
                        <param name="f" type="Flags"/>
                        <param name="c" type="char"/>
                        <param name="precision" type="int"/>
                        <param name="neg" type="boolean"/>
                    </params>
                    <comment line="3526">
                        Create a new BigDecimal with the desired precision.                        
                    </comment>
                    <comment line="3550">
                        Add a decimal point if necessary.  The mantissa may not
                         contain a decimal point if the scale is zero (the internal
                         representation has no fractional part) or the original
                         precision is one. Append a decimal point if &apos;#&apos; is set or if
                         we require zero padding to get to the requested precision.                        
                    </comment>
                    <comment line="3559">
                        Add trailing zeros in the case precision is greater than
                         the number of available digits after the decimal separator.                        
                    </comment>
                    <comment line="3580">
                        Create a new BigDecimal with the desired precision.                        
                    </comment>
                    <comment line="3585">
                        more &quot;scale&quot; digits than the requested &quot;precision&quot;                        
                    </comment>
                    <comment line="3588">
                        case of 0.xxxxxx                        
                    </comment>
                    <comment line="3605">
                        Add a decimal point if necessary.  The mantissa may not
                         contain a decimal point if the scale is zero (the internal
                         representation has no fractional part).  Append a decimal
                         point if &apos;#&apos; is set or we require zero padding to get to the
                         requested precision.                        
                    </comment>
                    <comment line="3613">
                        Add trailing zeros if the precision is greater than the
                         number of available digits after the decimal separator.                        
                    </comment>
                    <comment line="3634">
                        xxx.yyy
                           g precision (# sig digits) = #x + #y
                           f precision = #y
                           exponent = #x - 1
                         =&gt; f precision = g precision - exponent - 1
                         0.000zzz
                           g precision (# sig digits) = #z
                           f precision = #0 (after &apos;.&apos;) + #z
                           exponent = - #0 (after &apos;.&apos;) - 1
                         =&gt; f precision = g precision - exponent - 1                        
                    </comment>
                    <comment line="3652">
                        This conversion isn&apos;t supported.  The error should be
                         reported earlier.                        
                    </comment>
                    <scope line="3524">
                        <declaration name="prec" type="int" line="3526"/>
                        <declaration name="scale" type="int" line="3527"/>
                        <declaration name="origPrec" type="int" line="3528"/>
                        <declaration name="nzeros" type="int" line="3529"/>
                        <declaration name="compPrec" type="int" line="3530"/>
                        <scope line="3532"/>
                        <scope line="3535"/>
                        <declaration name="mc" type="MathContext" line="3539"/>
                        <declaration name="v" type="BigDecimal" line="3540"/>
                        <declaration name="bdl" type="BigDecimalLayout" line="3543"/>
                        <declaration name="mant" type="char[]" line="3547"/>
                        <declaration name="exp" type="char[]" line="3562"/>
                        <declaration name="newW" type="int" line="3563"/>
                        <declaration name="flags" type="Flags" line="3570"/>
                        <declaration name="sign" type="char" line="3571"/>
                        <declaration name="tmp" type="char[]" line="3575"/>
                    </scope>
                    <scope line="3578">
                        <declaration name="prec" type="int" line="3580"/>
                        <declaration name="scale" type="int" line="3581"/>
                        <scope line="3583">
                            <declaration name="compPrec" type="int" line="3585"/>
                            <scope line="3586"/>
                            <scope line="3589"/>
                        </scope>
                        <declaration name="bdl" type="BigDecimalLayout" line="3596"/>
                        <declaration name="mant" type="char" line="3601"/>
                        <declaration name="nzeros" type="int" line="3602"/>
                    </scope>
                    <scope line="3617">
                        <declaration name="prec" type="int" line="3618"/>
                        <declaration name="tenToTheNegFour" type="BigDecimal" line="3624"/>
                        <declaration name="tenToThePrec" type="BigDecimal" line="3625"/>
                        <scope line="3628">
                            <declaration name="e" type="int" line="3630"/>
                        </scope>
                        <scope line="3647"/>
                    </scope>
                    <scope line="3650"/>
                </method>
                <class name="BigDecimalLayout" line="3657">
                    <comment line="3676">
                        char[] with canonical string representation                        
                    </comment>
                    <comment line="3690">
                        The exponent will be formatted as a sign (&apos;+&apos; or &apos;-&apos;) followed
                         by the exponent zero-padded to include at least two digits.                        
                    </comment>
                    <declaration name="mant" type="StringBuilder" line="3658"/>
                    <declaration name="exp" type="StringBuilder" line="3659"/>
                    <declaration name="dot" type="boolean" line="3660"/>
                    <declaration name="scale" type="int" line="3661"/>
                    <method name="BigDecimalLayout" type="constructor" line="3663">
                        <params>
                            <param name="intVal" type="BigInteger"/>
                            <param name="scale" type="int"/>
                            <param name="form" type="BigDecimalLayoutForm"/>
                        </params>
                    </method>
                    <method name="hasDot" type="boolean" line="3667"/>
                    <method name="scale" type="int" line="3671"/>
                    <method name="layoutChars" type="char[]" line="3676">
                        <declaration name="sb" type="StringBuilder" line="3677"/>
                        <scope line="3678"/>
                    </method>
                    <method name="mantissa" type="char[]" line="3685"/>
                    <method name="exponent" type="char[]" line="3691"/>
                    <method name="toCharArray" type="char[]" line="3695">
                        <params>
                            <param name="sb" type="StringBuilder"/>
                        </params>
                        <declaration name="result" type="char[]" line="3698"/>
                    </method>
                    <method name="layout" type="void" line="3703">
                        <params>
                            <param name="intVal" type="BigInteger"/>
                            <param name="scale" type="int"/>
                            <param name="form" type="BigDecimalLayoutForm"/>
                        </params>
                        <comment line="3708">
                            Construct a buffer, with sufficient capacity for all cases.
                             If E-notation is needed, length will be: +1 if negative, +1
                             if &apos;.&apos; needed, +2 for &quot;E+&quot;, + up to 10 for adjusted
                             exponent.  Otherwise it could have +1 if negative, plus
                             leading &quot;0.00000&quot;                            
                        </comment>
                        <comment line="3740">
                            count of padding zeros                            
                        </comment>
                        <comment line="3743">
                            0.xxx form                            
                        </comment>
                        <comment line="3750">
                            xx.xx form                            
                        </comment>
                        <comment line="3756">
                            xx form                            
                        </comment>
                        <comment line="3764">
                            x.xxx form                            
                        </comment>
                        <comment line="3774">
                            require sign                            
                        </comment>
                        <declaration name="coeff" type="char" line="3704"/>
                        <scope line="3714">
                            <declaration name="len" type="int" line="3715"/>
                            <scope line="3716">
                                <scope line="3718"/>
                                <scope line="3727"/>
                            </scope>
                            <scope line="3730"/>
                        </scope>
                        <declaration name="adjusted" type="long" line="3737"/>
                        <scope line="3738">
                            <declaration name="pad" type="int" line="3740"/>
                            <scope line="3741"/>
                            <scope line="3747">
                                <scope line="3748"/>
                                <scope line="3754"/>
                            </scope>
                        </scope>
                        <scope line="3762">
                            <scope line="3765"/>
                            <scope line="3771">
                                <declaration name="abs" type="long" line="3772"/>
                            </scope>
                            <scope line="3778"/>
                        </scope>
                    </method>
                </class>
                <method name="adjustWidth" type="int" line="3785">
                    <params>
                        <param name="width" type="int"/>
                        <param name="f" type="Flags"/>
                        <param name="neg" type="boolean"/>
                    </params>
                    <declaration name="newW" type="int" line="3786"/>
                </method>
                <method name="addDot" type="char[]" line="3793">
                    <params>
                        <param name="mant" type="char[]"/>
                    </params>
                    <declaration name="tmp" type="char[]" line="3794"/>
                </method>
                <method name="trailingZeros" type="char[]" line="3803">
                    <params>
                        <param name="mant" type="char[]"/>
                        <param name="nzeros" type="int"/>
                    </params>
                    <declaration name="tmp" type="char[]" line="3804"/>
                    <scope line="3805"/>
                </method>
                <method name="print" type="void" line="3815">
                    <params>
                        <param name="t" type="Calendar"/>
                        <param name="c" type="char"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <comment line="3820">
                        justify based on width                        
                    </comment>
                    <declaration name="sb" type="StringBuilder" line="3816"/>
                    <declaration name="s" type="String" line="3820"/>
                </method>
                <method name="print" type="Appendable" line="3830">
                    <params>
                        <param name="sb" type="StringBuilder"/>
                        <param name="t" type="Calendar"/>
                        <param name="c" type="char"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <comment line="3836">
                        &apos;H&apos; (00 - 23)                        
                    </comment>
                    <comment line="3837">
                        &apos;I&apos; (01 - 12)                        
                    </comment>
                    <comment line="3838">
                        &apos;k&apos; (0 - 23) -- like H                        
                    </comment>
                    <comment line="3839">
                        &apos;l&apos; (1 - 12) -- like I                        
                    </comment>
                    <comment line="3850">
                        &apos;M&apos; (00 - 59)                        
                    </comment>
                    <comment line="3856">
                        &apos;N&apos; (000000000 - 999999999)                        
                    </comment>
                    <comment line="3862">
                        &apos;L&apos; (000 - 999)                        
                    </comment>
                    <comment line="3868">
                        &apos;Q&apos; (0 - 99...?)                        
                    </comment>
                    <comment line="3874">
                        &apos;p&apos; (am or pm)                        
                    </comment>
                    <comment line="3875">
                        Calendar.AM = 0, Calendar.PM = 1, LocaleElements defines upper                        
                    </comment>
                    <comment line="3885">
                        &apos;s&apos; (0 - 99...?)                        
                    </comment>
                    <comment line="3891">
                        &apos;S&apos; (00 - 60 - leap second)                        
                    </comment>
                    <comment line="3897">
                        &apos;z&apos; ({-|+}####) - ls minus?                        
                    </comment>
                    <comment line="3904">
                        combine minute and hour into a single integer                        
                    </comment>
                    <comment line="3911">
                        &apos;Z&apos; (symbol)                        
                    </comment>
                    <comment line="3919">
                        Date                        
                    </comment>
                    <comment line="3920">
                        &apos;a&apos;                        
                    </comment>
                    <comment line="3921">
                        &apos;A&apos;                        
                    </comment>
                    <comment line="3931">
                        &apos;b&apos;                        
                    </comment>
                    <comment line="3932">
                        &apos;h&apos; -- same b                        
                    </comment>
                    <comment line="3933">
                        &apos;B&apos;                        
                    </comment>
                    <comment line="3943">
                        &apos;C&apos; (00 - 99)                        
                    </comment>
                    <comment line="3944">
                        &apos;y&apos; (00 - 99)                        
                    </comment>
                    <comment line="3945">
                        &apos;Y&apos; (0000 - 9999)                        
                    </comment>
                    <comment line="3963">
                        &apos;d&apos; (01 - 31)                        
                    </comment>
                    <comment line="3964">
                        &apos;e&apos; (1 - 31) -- like d                        
                    </comment>
                    <comment line="3972">
                        &apos;j&apos; (001 - 366)                        
                    </comment>
                    <comment line="3978">
                        &apos;m&apos; (01 - 12)                        
                    </comment>
                    <comment line="3985">
                        Composites                        
                    </comment>
                    <comment line="3986">
                        &apos;T&apos; (24 hour hh:mm:ss - %tH:%tM:%tS)                        
                    </comment>
                    <comment line="3987">
                        &apos;R&apos; (hh:mm same as %H:%M)                        
                    </comment>
                    <comment line="3997">
                        &apos;r&apos; (hh:mm:ss [AP]M)                        
                    </comment>
                    <comment line="4002">
                        this may be in wrong place for some locales                        
                    </comment>
                    <comment line="4008">
                        &apos;c&apos; (Sat Nov 04 12:02:33 EST 1999)                        
                    </comment>
                    <comment line="4018">
                        &apos;D&apos; (mm/dd/yy)                        
                    </comment>
                    <comment line="4025">
                        &apos;F&apos; (%Y-%m-%d)                        
                    </comment>
                    <scope line="3838">
                        <declaration name="i" type="int" line="3839"/>
                        <declaration name="flags" type="Flags" line="3842"/>
                    </scope>
                    <scope line="3849">
                        <declaration name="i" type="int" line="3850"/>
                        <declaration name="flags" type="Flags" line="3851"/>
                    </scope>
                    <scope line="3855">
                        <declaration name="i" type="int" line="3856"/>
                        <declaration name="flags" type="Flags" line="3857"/>
                    </scope>
                    <scope line="3861">
                        <declaration name="i" type="int" line="3862"/>
                        <declaration name="flags" type="Flags" line="3863"/>
                    </scope>
                    <scope line="3867">
                        <declaration name="i" type="long" line="3868"/>
                        <declaration name="flags" type="Flags" line="3869"/>
                    </scope>
                    <scope line="3873">
                        <declaration name="ampm" type="String[]" line="3875"/>
                        <scope line="3876">
                            <declaration name="dfs" type="DateFormatSymbols" line="3877"/>
                        </scope>
                        <declaration name="s" type="String" line="3880"/>
                    </scope>
                    <scope line="3884">
                        <declaration name="i" type="long" line="3885"/>
                        <declaration name="flags" type="Flags" line="3886"/>
                    </scope>
                    <scope line="3890">
                        <declaration name="i" type="int" line="3891"/>
                        <declaration name="flags" type="Flags" line="3892"/>
                    </scope>
                    <scope line="3896">
                        <declaration name="i" type="int" line="3897"/>
                        <declaration name="neg" type="boolean" line="3898"/>
                        <declaration name="min" type="int" line="3902"/>
                        <declaration name="offset" type="int" line="3904"/>
                        <declaration name="flags" type="Flags" line="3905"/>
                    </scope>
                    <scope line="3910">
                        <declaration name="tz" type="TimeZone" line="3911"/>
                    </scope>
                    <scope line="3920">
                        <declaration name="i" type="int" line="3921"/>
                        <declaration name="lt" type="Locale" line="3922"/>
                        <declaration name="dfs" type="DateFormatSymbols" line="3923"/>
                    </scope>
                    <scope line="3932">
                        <declaration name="i" type="int" line="3933"/>
                        <declaration name="lt" type="Locale" line="3934"/>
                        <declaration name="dfs" type="DateFormatSymbols" line="3935"/>
                    </scope>
                    <scope line="3944">
                        <declaration name="i" type="int" line="3945"/>
                        <declaration name="size" type="int" line="3946"/>
                        <declaration name="flags" type="Flags" line="3958"/>
                    </scope>
                    <scope line="3963">
                        <declaration name="i" type="int" line="3964"/>
                        <declaration name="flags" type="Flags" line="3965"/>
                    </scope>
                    <scope line="3971">
                        <declaration name="i" type="int" line="3972"/>
                        <declaration name="flags" type="Flags" line="3973"/>
                    </scope>
                    <scope line="3977">
                        <declaration name="i" type="int" line="3978"/>
                        <declaration name="flags" type="Flags" line="3979"/>
                    </scope>
                    <scope line="3986">
                        <declaration name="sep" type="char" line="3987"/>
                        <scope line="3990"/>
                    </scope>
                    <scope line="3996">
                        <declaration name="sep" type="char" line="3997"/>
                        <declaration name="tsb" type="StringBuilder" line="4002"/>
                    </scope>
                    <scope line="4007">
                        <declaration name="sep" type="char" line="4008"/>
                    </scope>
                    <scope line="4017">
                        <declaration name="sep" type="char" line="4018"/>
                    </scope>
                    <scope line="4024">
                        <declaration name="sep" type="char" line="4025"/>
                    </scope>
                </method>
                <method name="failMismatch" type="void" line="4039">
                    <params>
                        <param name="f" type="Flags"/>
                        <param name="c" type="char"/>
                    </params>
                    <declaration name="fs" type="String" line="4040"/>
                </method>
                <method name="failConversion" type="void" line="4044">
                    <params>
                        <param name="c" type="char"/>
                        <param name="arg" type="Object"/>
                    </params>
                </method>
                <method name="getZero" type="char" line="4048">
                    <params>
                        <param name="l" type="Locale"/>
                    </params>
                    <scope line="4049">
                        <declaration name="dfs" type="DecimalFormatSymbols" line="4050"/>
                    </scope>
                </method>
                <method name="localizedMagnitude" type="StringBuilder" line="4059">
                    <params>
                        <param name="sb" type="StringBuilder"/>
                        <param name="value" type="long"/>
                        <param name="f" type="Flags"/>
                        <param name="width" type="int"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <declaration name="va" type="char[]" line="4060"/>
                </method>
                <method name="localizedMagnitude" type="StringBuilder" line="4067">
                    <params>
                        <param name="sb" type="StringBuilder"/>
                        <param name="value" type="char[]"/>
                        <param name="f" type="Flags"/>
                        <param name="width" type="int"/>
                        <param name="l" type="Locale"/>
                    </params>
                    <comment line="4075">
                        determine localized grouping separator and size                        
                    </comment>
                    <comment line="4110">
                        localize the digits inserting group separators as necessary                        
                    </comment>
                    <comment line="4114">
                        no more group separators after the decimal separator                        
                    </comment>
                    <comment line="4125">
                        apply zero padding                        
                    </comment>
                    <declaration name="begin" type="int" line="4070"/>
                    <declaration name="zero" type="char" line="4072"/>
                    <declaration name="grpSep" type="char" line="4075"/>
                    <declaration name="grpSize" type="int" line="4076"/>
                    <declaration name="decSep" type="char" line="4077"/>
                    <declaration name="len" type="int" line="4079"/>
                    <declaration name="dot" type="int" line="4080"/>
                    <scope line="4081">
                        <scope line="4082"/>
                    </scope>
                    <scope line="4088">
                        <scope line="4089"/>
                        <scope line="4091">
                            <declaration name="dfs" type="DecimalFormatSymbols" line="4092"/>
                        </scope>
                    </scope>
                    <scope line="4097">
                        <scope line="4098"/>
                        <scope line="4101">
                            <declaration name="dfs" type="DecimalFormatSymbols" line="4102"/>
                            <declaration name="df" type="DecimalFormat" line="4104"/>
                        </scope>
                    </scope>
                    <scope line="4110">
                        <scope line="4111"/>
                        <declaration name="c" type="char" line="4118"/>
                    </scope>
                </method>
            </class>
            <class name="Flags" line="4134">
                <comment line="3095">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3112">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3206">
                    !Double.isInfinite(value) &amp;&amp; !Double.isNaN(value)                    
                </comment>
                <comment line="3379">
                    Add zeros to the requested precision.                    
                </comment>
                <comment line="3418">
                    Method assumes that d &gt; 0.                    
                </comment>
                <comment line="3520">
                    value &gt; 0                    
                </comment>
                <comment line="3793">
                    Add a &apos;.&apos; to th mantissa if required                    
                </comment>
                <comment line="3802">
                    Add trailing zeros in the case precision is greater than the number
                     of available digits after the decimal separator.                    
                </comment>
                <comment line="4038">
                    -- Methods to support throwing exceptions --                    
                </comment>
                <comment line="4138">
                    &apos;&apos;                    
                </comment>
                <comment line="4140">
                    duplicate declarations from Formattable.java                    
                </comment>
                <comment line="4141">
                    &apos;-&apos;                    
                </comment>
                <comment line="4142">
                    &apos;^&apos;                    
                </comment>
                <comment line="4143">
                    &apos;#&apos;                    
                </comment>
                <comment line="4145">
                    numerics                    
                </comment>
                <comment line="4146">
                    &apos;+&apos;                    
                </comment>
                <comment line="4147">
                    &apos; &apos;                    
                </comment>
                <comment line="4148">
                    &apos;0&apos;                    
                </comment>
                <comment line="4149">
                    &apos;,&apos;                    
                </comment>
                <comment line="4150">
                    &apos;(&apos;                    
                </comment>
                <comment line="4152">
                    indexing                    
                </comment>
                <comment line="4153">
                    &apos;&lt;&apos;                    
                </comment>
                <comment line="4193">
                    parse those flags which may be provided by users                    
                </comment>
                <comment line="4209">
                    Returns a string representation of the current {@code Flags}.                    
                </comment>
                <comment line="4230">
                    Byte, Short, Integer, Long, BigInteger
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4237">
                    Float, Double, BigDecimal
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4247">
                    Character, Byte, Short, Integer
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4252">
                    java.util.Date, java.util.Calendar, long                    
                </comment>
                <comment line="4256">
                    if (arg.TYPE != boolean) return boolean
                     if (arg != null) return true; else return false;                    
                </comment>
                <comment line="4260">
                    if (arg instanceof Formattable) arg.formatTo()
                     else arg.toString();                    
                </comment>
                <comment line="4264">
                    arg.hashCode()                    
                </comment>
                <comment line="4276">
                    Returns true iff the Conversion is applicable to all objects.                    
                </comment>
                <comment line="4291">
                    Returns true iff the Conversion is applicable to character.                    
                </comment>
                <comment line="4302">
                    Returns true iff the Conversion is an integer type.                    
                </comment>
                <comment line="4315">
                    Returns true iff the Conversion is a floating-point type.                    
                </comment>
                <comment line="4331">
                    Returns true iff the Conversion does not require an argument                    
                </comment>
                <comment line="4344">
                    (00 - 23)                    
                </comment>
                <comment line="4345">
                    (01 - 12)                    
                </comment>
                <comment line="4346">
                    (0 - 23) -- like H                    
                </comment>
                <comment line="4347">
                    (1 - 12) -- like I                    
                </comment>
                <comment line="4348">
                    (00 - 59)                    
                </comment>
                <comment line="4349">
                    (000000000 - 999999999)                    
                </comment>
                <comment line="4350">
                    jdk, not in gnu (000 - 999)                    
                </comment>
                <comment line="4351">
                    (0 - 99...?)                    
                </comment>
                <comment line="4352">
                    (am or pm)                    
                </comment>
                <comment line="4353">
                    (0 - 99...?)                    
                </comment>
                <comment line="4354">
                    (00 - 60 - leap second)                    
                </comment>
                <comment line="4355">
                    (24 hour hh:mm:ss)                    
                </comment>
                <comment line="4356">
                    (-1200 - +1200) - ls minus?                    
                </comment>
                <comment line="4357">
                    (symbol)                    
                </comment>
                <comment line="4359">
                    Date                    
                </comment>
                <comment line="4360">
                    &apos;a&apos;                    
                </comment>
                <comment line="4361">
                    &apos;A&apos;                    
                </comment>
                <comment line="4362">
                    &apos;b&apos;                    
                </comment>
                <comment line="4363">
                    &apos;B&apos;                    
                </comment>
                <comment line="4364">
                    (00 - 99)                    
                </comment>
                <comment line="4365">
                    (01 - 31)                    
                </comment>
                <comment line="4366">
                    (1 - 31) -- like d                    
                </comment>
                <comment line="4367">
                    *    static final char ISO_WEEK_OF_YEAR_2    = &apos;g&apos;; // cross %y %V
                     *    static final char ISO_WEEK_OF_YEAR_4    = &apos;G&apos;;  cross %Y %V                    
                </comment>
                <comment line="4369">
                    -- same b                    
                </comment>
                <comment line="4370">
                    (001 - 366)                    
                </comment>
                <comment line="4371">
                    (01 - 12)                    
                </comment>
                <comment line="4372">
                    *    static final char DAY_OF_WEEK_1         = &apos;u&apos;; // (1 - 7) Monday
                     *    static final char WEEK_OF_YEAR_SUNDAY   = &apos;U&apos;;  (0 - 53) Sunday+
                     *    static final char WEEK_OF_YEAR_MONDAY_01 = &apos;V&apos;;  (01 - 53) Monday+
                     *    static final char DAY_OF_WEEK_0         = &apos;w&apos;;  (0 - 6) Sunday
                     *    static final char WEEK_OF_YEAR_MONDAY   = &apos;W&apos;;  (00 - 53) Monday                    
                </comment>
                <comment line="4377">
                    (00 - 99)                    
                </comment>
                <comment line="4378">
                    (0000 - 9999)                    
                </comment>
                <comment line="4380">
                    Composites                    
                </comment>
                <comment line="4381">
                    (hh:mm:ss [AP]M)                    
                </comment>
                <comment line="4382">
                    (hh:mm same as %H:%M)                    
                </comment>
                <comment line="4383">
                    *    static final char LOCALE_TIME   = &apos;X&apos;; // (%H:%M:%S) - parse format?                    
                </comment>
                <comment line="4385">
                    (Sat Nov 04 12:02:33 EST 1999)                    
                </comment>
                <comment line="4386">
                    (mm/dd/yy)                    
                </comment>
                <comment line="4387">
                    (%Y-%m-%d)                    
                </comment>
                <comment line="4388">
                    *    static final char LOCALE_DATE           = &apos;x&apos;; // (mm/dd/yy)                    
                </comment>
                <declaration name="flags" type="int" line="4135"/>
                <declaration name="NONE" type="Flags" line="4137"/>
                <declaration name="LEFT_JUSTIFY" type="Flags" line="4140"/>
                <declaration name="UPPERCASE" type="Flags" line="4141"/>
                <declaration name="ALTERNATE" type="Flags" line="4142"/>
                <declaration name="PLUS" type="Flags" line="4145"/>
                <declaration name="LEADING_SPACE" type="Flags" line="4146"/>
                <declaration name="ZERO_PAD" type="Flags" line="4147"/>
                <declaration name="GROUP" type="Flags" line="4148"/>
                <declaration name="PARENTHESES" type="Flags" line="4149"/>
                <declaration name="PREVIOUS" type="Flags" line="4152"/>
                <method name="Flags" type="constructor" line="4154">
                    <params>
                        <param name="f" type="int"/>
                    </params>
                </method>
                <method name="valueOf" type="int" line="4158"/>
                <method name="contains" type="boolean" line="4162">
                    <params>
                        <param name="f" type="Flags"/>
                    </params>
                </method>
                <method name="dup" type="Flags" line="4166"/>
                <method name="add" type="Flags" line="4170">
                    <params>
                        <param name="f" type="Flags"/>
                    </params>
                </method>
                <method name="remove" type="Flags" line="4175">
                    <params>
                        <param name="f" type="Flags"/>
                    </params>
                </method>
                <method name="parse" type="Flags" line="4180">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="ca" type="char[]" line="4181"/>
                    <declaration name="f" type="Flags" line="4182"/>
                    <scope line="4183">
                        <declaration name="v" type="Flags" line="4184"/>
                    </scope>
                </method>
                <method name="parse" type="Flags" line="4193">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="toString" type="String" line="4209">
                    <params>
                        <param name="f" type="Flags"/>
                    </params>
                </method>
                <method name="toString" type="String" line="4213">
                    <declaration name="sb" type="StringBuilder" line="4214"/>
                </method>
            </class>
            <class name="Conversion" line="4228">
                <comment line="3095">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3112">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3206">
                    !Double.isInfinite(value) &amp;&amp; !Double.isNaN(value)                    
                </comment>
                <comment line="3379">
                    Add zeros to the requested precision.                    
                </comment>
                <comment line="3418">
                    Method assumes that d &gt; 0.                    
                </comment>
                <comment line="3520">
                    value &gt; 0                    
                </comment>
                <comment line="3793">
                    Add a &apos;.&apos; to th mantissa if required                    
                </comment>
                <comment line="3802">
                    Add trailing zeros in the case precision is greater than the number
                     of available digits after the decimal separator.                    
                </comment>
                <comment line="4038">
                    -- Methods to support throwing exceptions --                    
                </comment>
                <comment line="4138">
                    &apos;&apos;                    
                </comment>
                <comment line="4140">
                    duplicate declarations from Formattable.java                    
                </comment>
                <comment line="4141">
                    &apos;-&apos;                    
                </comment>
                <comment line="4142">
                    &apos;^&apos;                    
                </comment>
                <comment line="4143">
                    &apos;#&apos;                    
                </comment>
                <comment line="4145">
                    numerics                    
                </comment>
                <comment line="4146">
                    &apos;+&apos;                    
                </comment>
                <comment line="4147">
                    &apos; &apos;                    
                </comment>
                <comment line="4148">
                    &apos;0&apos;                    
                </comment>
                <comment line="4149">
                    &apos;,&apos;                    
                </comment>
                <comment line="4150">
                    &apos;(&apos;                    
                </comment>
                <comment line="4152">
                    indexing                    
                </comment>
                <comment line="4153">
                    &apos;&lt;&apos;                    
                </comment>
                <comment line="4193">
                    parse those flags which may be provided by users                    
                </comment>
                <comment line="4209">
                    Returns a string representation of the current {@code Flags}.                    
                </comment>
                <comment line="4230">
                    Byte, Short, Integer, Long, BigInteger
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4237">
                    Float, Double, BigDecimal
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4247">
                    Character, Byte, Short, Integer
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4252">
                    java.util.Date, java.util.Calendar, long                    
                </comment>
                <comment line="4256">
                    if (arg.TYPE != boolean) return boolean
                     if (arg != null) return true; else return false;                    
                </comment>
                <comment line="4260">
                    if (arg instanceof Formattable) arg.formatTo()
                     else arg.toString();                    
                </comment>
                <comment line="4264">
                    arg.hashCode()                    
                </comment>
                <comment line="4276">
                    Returns true iff the Conversion is applicable to all objects.                    
                </comment>
                <comment line="4291">
                    Returns true iff the Conversion is applicable to character.                    
                </comment>
                <comment line="4302">
                    Returns true iff the Conversion is an integer type.                    
                </comment>
                <comment line="4315">
                    Returns true iff the Conversion is a floating-point type.                    
                </comment>
                <comment line="4331">
                    Returns true iff the Conversion does not require an argument                    
                </comment>
                <comment line="4344">
                    (00 - 23)                    
                </comment>
                <comment line="4345">
                    (01 - 12)                    
                </comment>
                <comment line="4346">
                    (0 - 23) -- like H                    
                </comment>
                <comment line="4347">
                    (1 - 12) -- like I                    
                </comment>
                <comment line="4348">
                    (00 - 59)                    
                </comment>
                <comment line="4349">
                    (000000000 - 999999999)                    
                </comment>
                <comment line="4350">
                    jdk, not in gnu (000 - 999)                    
                </comment>
                <comment line="4351">
                    (0 - 99...?)                    
                </comment>
                <comment line="4352">
                    (am or pm)                    
                </comment>
                <comment line="4353">
                    (0 - 99...?)                    
                </comment>
                <comment line="4354">
                    (00 - 60 - leap second)                    
                </comment>
                <comment line="4355">
                    (24 hour hh:mm:ss)                    
                </comment>
                <comment line="4356">
                    (-1200 - +1200) - ls minus?                    
                </comment>
                <comment line="4357">
                    (symbol)                    
                </comment>
                <comment line="4359">
                    Date                    
                </comment>
                <comment line="4360">
                    &apos;a&apos;                    
                </comment>
                <comment line="4361">
                    &apos;A&apos;                    
                </comment>
                <comment line="4362">
                    &apos;b&apos;                    
                </comment>
                <comment line="4363">
                    &apos;B&apos;                    
                </comment>
                <comment line="4364">
                    (00 - 99)                    
                </comment>
                <comment line="4365">
                    (01 - 31)                    
                </comment>
                <comment line="4366">
                    (1 - 31) -- like d                    
                </comment>
                <comment line="4367">
                    *    static final char ISO_WEEK_OF_YEAR_2    = &apos;g&apos;; // cross %y %V
                     *    static final char ISO_WEEK_OF_YEAR_4    = &apos;G&apos;;  cross %Y %V                    
                </comment>
                <comment line="4369">
                    -- same b                    
                </comment>
                <comment line="4370">
                    (001 - 366)                    
                </comment>
                <comment line="4371">
                    (01 - 12)                    
                </comment>
                <comment line="4372">
                    *    static final char DAY_OF_WEEK_1         = &apos;u&apos;; // (1 - 7) Monday
                     *    static final char WEEK_OF_YEAR_SUNDAY   = &apos;U&apos;;  (0 - 53) Sunday+
                     *    static final char WEEK_OF_YEAR_MONDAY_01 = &apos;V&apos;;  (01 - 53) Monday+
                     *    static final char DAY_OF_WEEK_0         = &apos;w&apos;;  (0 - 6) Sunday
                     *    static final char WEEK_OF_YEAR_MONDAY   = &apos;W&apos;;  (00 - 53) Monday                    
                </comment>
                <comment line="4377">
                    (00 - 99)                    
                </comment>
                <comment line="4378">
                    (0000 - 9999)                    
                </comment>
                <comment line="4380">
                    Composites                    
                </comment>
                <comment line="4381">
                    (hh:mm:ss [AP]M)                    
                </comment>
                <comment line="4382">
                    (hh:mm same as %H:%M)                    
                </comment>
                <comment line="4383">
                    *    static final char LOCALE_TIME   = &apos;X&apos;; // (%H:%M:%S) - parse format?                    
                </comment>
                <comment line="4385">
                    (Sat Nov 04 12:02:33 EST 1999)                    
                </comment>
                <comment line="4386">
                    (mm/dd/yy)                    
                </comment>
                <comment line="4387">
                    (%Y-%m-%d)                    
                </comment>
                <comment line="4388">
                    *    static final char LOCALE_DATE           = &apos;x&apos;; // (mm/dd/yy)                    
                </comment>
                <declaration name="DECIMAL_INTEGER" type="char" line="4231"/>
                <declaration name="OCTAL_INTEGER" type="char" line="4232"/>
                <declaration name="HEXADECIMAL_INTEGER" type="char" line="4233"/>
                <declaration name="HEXADECIMAL_INTEGER_UPPER" type="char" line="4234"/>
                <declaration name="SCIENTIFIC" type="char" line="4238"/>
                <declaration name="SCIENTIFIC_UPPER" type="char" line="4239"/>
                <declaration name="GENERAL" type="char" line="4240"/>
                <declaration name="GENERAL_UPPER" type="char" line="4241"/>
                <declaration name="DECIMAL_FLOAT" type="char" line="4242"/>
                <declaration name="HEXADECIMAL_FLOAT" type="char" line="4243"/>
                <declaration name="HEXADECIMAL_FLOAT_UPPER" type="char" line="4244"/>
                <declaration name="CHARACTER" type="char" line="4248"/>
                <declaration name="CHARACTER_UPPER" type="char" line="4249"/>
                <declaration name="DATE_TIME" type="char" line="4252"/>
                <declaration name="DATE_TIME_UPPER" type="char" line="4253"/>
                <declaration name="BOOLEAN" type="char" line="4257"/>
                <declaration name="BOOLEAN_UPPER" type="char" line="4258"/>
                <declaration name="STRING" type="char" line="4261"/>
                <declaration name="STRING_UPPER" type="char" line="4262"/>
                <declaration name="HASHCODE" type="char" line="4264"/>
                <declaration name="HASHCODE_UPPER" type="char" line="4265"/>
                <declaration name="LINE_SEPARATOR" type="char" line="4267"/>
                <declaration name="PERCENT_SIGN" type="char" line="4268"/>
                <method name="isValid" type="boolean" line="4270">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="isGeneral" type="boolean" line="4276">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="isCharacter" type="boolean" line="4291">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="isInteger" type="boolean" line="4302">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="isFloat" type="boolean" line="4315">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="isText" type="boolean" line="4331">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
            </class>
            <class name="DateTime" line="4342">
                <comment line="3095">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3112">
                    neg := val &lt; 0                    
                </comment>
                <comment line="3206">
                    !Double.isInfinite(value) &amp;&amp; !Double.isNaN(value)                    
                </comment>
                <comment line="3379">
                    Add zeros to the requested precision.                    
                </comment>
                <comment line="3418">
                    Method assumes that d &gt; 0.                    
                </comment>
                <comment line="3520">
                    value &gt; 0                    
                </comment>
                <comment line="3793">
                    Add a &apos;.&apos; to th mantissa if required                    
                </comment>
                <comment line="3802">
                    Add trailing zeros in the case precision is greater than the number
                     of available digits after the decimal separator.                    
                </comment>
                <comment line="4038">
                    -- Methods to support throwing exceptions --                    
                </comment>
                <comment line="4138">
                    &apos;&apos;                    
                </comment>
                <comment line="4140">
                    duplicate declarations from Formattable.java                    
                </comment>
                <comment line="4141">
                    &apos;-&apos;                    
                </comment>
                <comment line="4142">
                    &apos;^&apos;                    
                </comment>
                <comment line="4143">
                    &apos;#&apos;                    
                </comment>
                <comment line="4145">
                    numerics                    
                </comment>
                <comment line="4146">
                    &apos;+&apos;                    
                </comment>
                <comment line="4147">
                    &apos; &apos;                    
                </comment>
                <comment line="4148">
                    &apos;0&apos;                    
                </comment>
                <comment line="4149">
                    &apos;,&apos;                    
                </comment>
                <comment line="4150">
                    &apos;(&apos;                    
                </comment>
                <comment line="4152">
                    indexing                    
                </comment>
                <comment line="4153">
                    &apos;&lt;&apos;                    
                </comment>
                <comment line="4193">
                    parse those flags which may be provided by users                    
                </comment>
                <comment line="4209">
                    Returns a string representation of the current {@code Flags}.                    
                </comment>
                <comment line="4230">
                    Byte, Short, Integer, Long, BigInteger
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4237">
                    Float, Double, BigDecimal
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4247">
                    Character, Byte, Short, Integer
                     (and associated primitives due to autoboxing)                    
                </comment>
                <comment line="4252">
                    java.util.Date, java.util.Calendar, long                    
                </comment>
                <comment line="4256">
                    if (arg.TYPE != boolean) return boolean
                     if (arg != null) return true; else return false;                    
                </comment>
                <comment line="4260">
                    if (arg instanceof Formattable) arg.formatTo()
                     else arg.toString();                    
                </comment>
                <comment line="4264">
                    arg.hashCode()                    
                </comment>
                <comment line="4276">
                    Returns true iff the Conversion is applicable to all objects.                    
                </comment>
                <comment line="4291">
                    Returns true iff the Conversion is applicable to character.                    
                </comment>
                <comment line="4302">
                    Returns true iff the Conversion is an integer type.                    
                </comment>
                <comment line="4315">
                    Returns true iff the Conversion is a floating-point type.                    
                </comment>
                <comment line="4331">
                    Returns true iff the Conversion does not require an argument                    
                </comment>
                <comment line="4344">
                    (00 - 23)                    
                </comment>
                <comment line="4345">
                    (01 - 12)                    
                </comment>
                <comment line="4346">
                    (0 - 23) -- like H                    
                </comment>
                <comment line="4347">
                    (1 - 12) -- like I                    
                </comment>
                <comment line="4348">
                    (00 - 59)                    
                </comment>
                <comment line="4349">
                    (000000000 - 999999999)                    
                </comment>
                <comment line="4350">
                    jdk, not in gnu (000 - 999)                    
                </comment>
                <comment line="4351">
                    (0 - 99...?)                    
                </comment>
                <comment line="4352">
                    (am or pm)                    
                </comment>
                <comment line="4353">
                    (0 - 99...?)                    
                </comment>
                <comment line="4354">
                    (00 - 60 - leap second)                    
                </comment>
                <comment line="4355">
                    (24 hour hh:mm:ss)                    
                </comment>
                <comment line="4356">
                    (-1200 - +1200) - ls minus?                    
                </comment>
                <comment line="4357">
                    (symbol)                    
                </comment>
                <comment line="4359">
                    Date                    
                </comment>
                <comment line="4360">
                    &apos;a&apos;                    
                </comment>
                <comment line="4361">
                    &apos;A&apos;                    
                </comment>
                <comment line="4362">
                    &apos;b&apos;                    
                </comment>
                <comment line="4363">
                    &apos;B&apos;                    
                </comment>
                <comment line="4364">
                    (00 - 99)                    
                </comment>
                <comment line="4365">
                    (01 - 31)                    
                </comment>
                <comment line="4366">
                    (1 - 31) -- like d                    
                </comment>
                <comment line="4367">
                    *    static final char ISO_WEEK_OF_YEAR_2    = &apos;g&apos;; // cross %y %V
                     *    static final char ISO_WEEK_OF_YEAR_4    = &apos;G&apos;;  cross %Y %V                    
                </comment>
                <comment line="4369">
                    -- same b                    
                </comment>
                <comment line="4370">
                    (001 - 366)                    
                </comment>
                <comment line="4371">
                    (01 - 12)                    
                </comment>
                <comment line="4372">
                    *    static final char DAY_OF_WEEK_1         = &apos;u&apos;; // (1 - 7) Monday
                     *    static final char WEEK_OF_YEAR_SUNDAY   = &apos;U&apos;;  (0 - 53) Sunday+
                     *    static final char WEEK_OF_YEAR_MONDAY_01 = &apos;V&apos;;  (01 - 53) Monday+
                     *    static final char DAY_OF_WEEK_0         = &apos;w&apos;;  (0 - 6) Sunday
                     *    static final char WEEK_OF_YEAR_MONDAY   = &apos;W&apos;;  (00 - 53) Monday                    
                </comment>
                <comment line="4377">
                    (00 - 99)                    
                </comment>
                <comment line="4378">
                    (0000 - 9999)                    
                </comment>
                <comment line="4380">
                    Composites                    
                </comment>
                <comment line="4381">
                    (hh:mm:ss [AP]M)                    
                </comment>
                <comment line="4382">
                    (hh:mm same as %H:%M)                    
                </comment>
                <comment line="4383">
                    *    static final char LOCALE_TIME   = &apos;X&apos;; // (%H:%M:%S) - parse format?                    
                </comment>
                <comment line="4385">
                    (Sat Nov 04 12:02:33 EST 1999)                    
                </comment>
                <comment line="4386">
                    (mm/dd/yy)                    
                </comment>
                <comment line="4387">
                    (%Y-%m-%d)                    
                </comment>
                <comment line="4388">
                    *    static final char LOCALE_DATE           = &apos;x&apos;; // (mm/dd/yy)                    
                </comment>
                <declaration name="HOUR_OF_DAY_0" type="char" line="4343"/>
                <declaration name="HOUR_0" type="char" line="4344"/>
                <declaration name="HOUR_OF_DAY" type="char" line="4345"/>
                <declaration name="HOUR" type="char" line="4346"/>
                <declaration name="MINUTE" type="char" line="4347"/>
                <declaration name="NANOSECOND" type="char" line="4348"/>
                <declaration name="MILLISECOND" type="char" line="4349"/>
                <declaration name="MILLISECOND_SINCE_EPOCH" type="char" line="4350"/>
                <declaration name="AM_PM" type="char" line="4351"/>
                <declaration name="SECONDS_SINCE_EPOCH" type="char" line="4352"/>
                <declaration name="SECOND" type="char" line="4353"/>
                <declaration name="TIME" type="char" line="4354"/>
                <declaration name="ZONE_NUMERIC" type="char" line="4355"/>
                <declaration name="ZONE" type="char" line="4356"/>
                <declaration name="NAME_OF_DAY_ABBREV" type="char" line="4359"/>
                <declaration name="NAME_OF_DAY" type="char" line="4360"/>
                <declaration name="NAME_OF_MONTH_ABBREV" type="char" line="4361"/>
                <declaration name="NAME_OF_MONTH" type="char" line="4362"/>
                <declaration name="CENTURY" type="char" line="4363"/>
                <declaration name="DAY_OF_MONTH_0" type="char" line="4364"/>
                <declaration name="DAY_OF_MONTH" type="char" line="4365"/>
                <declaration name="NAME_OF_MONTH_ABBREV_X" type="char" line="4368"/>
                <declaration name="DAY_OF_YEAR" type="char" line="4369"/>
                <declaration name="MONTH" type="char" line="4370"/>
                <declaration name="YEAR_2" type="char" line="4376"/>
                <declaration name="YEAR_4" type="char" line="4377"/>
                <declaration name="TIME_12_HOUR" type="char" line="4380"/>
                <declaration name="TIME_24_HOUR" type="char" line="4381"/>
                <declaration name="DATE_TIME" type="char" line="4383"/>
                <declaration name="DATE" type="char" line="4385"/>
                <declaration name="ISO_STANDARD_DATE" type="char" line="4386"/>
                <method name="isValid" type="boolean" line="4389">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                    <comment line="4407">
                        Date                        
                    </comment>
                    <comment line="4415">
                        *        case ISO_WEEK_OF_YEAR_2:
                         *        case ISO_WEEK_OF_YEAR_4:                        
                    </comment>
                    <comment line="4420">
                        *        case DAY_OF_WEEK_1:
                         *        case WEEK_OF_YEAR_SUNDAY:
                         *        case WEEK_OF_YEAR_MONDAY_01:
                         *        case DAY_OF_WEEK_0:
                         *        case WEEK_OF_YEAR_MONDAY:                        
                    </comment>
                    <comment line="4428">
                        Composites                        
                    </comment>
                    <comment line="4431">
                        *        case LOCALE_TIME:                        
                    </comment>
                    <comment line="4435">
                        *        case LOCALE_DATE:                        
                    </comment>
                </method>
            </class>
        </class>
    </source>