<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.prefs">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="javax.xml.parsers"/>
        <import package="javax.xml.transform"/>
        <import package="javax.xml.transform.dom"/>
        <import package="javax.xml.transform.stream"/>
        <import package="org.xml.sax"/>
        <import package="org.w3c.dom"/>
        <class name="XmlSupport" line="37">
            <comment line="47">
                The required DTD URI for exported preferences                
            </comment>
            <comment line="51">
                The actual DTD corresponding to the URI                
            </comment>
            <comment line="81">
                Version number for the internal map files.                
            </comment>
            <javadoc line="37">
                XML Support for java.util.prefs. Methods to import and export preference
                  nodes and subtrees.                
                <author>
                    Josh Bloch and Mark Reinhold                    
                </author>
                <see>
                    Preferences                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="PREFS_DTD_URI" type="String" line="47"/>
            <declaration name="PREFS_DTD" type="String" line="51"/>
            <declaration name="EXTERNAL_XML_VERSION" type="String" line="75"/>
            <javadoc line="75">
                Version number for the format exported preferences files.                
            </javadoc>
            <declaration name="MAP_XML_VERSION" type="String" line="83"/>
            <javadoc line="85">
                Export the specified preferences node and, if subTree is true, all
                  subnodes, to the specified output stream.  Preferences are exported as
                  an XML document conforming to the definition in the Preferences spec.                
                <throws>
                    IOException if writing to the specified output stream
                      results in an &lt;tt&gt;IOException&lt;/tt&gt;.                    
                </throws>
                <throws>
                    BackingStoreException if preference data cannot be read from
                      backing store.                    
                </throws>
                <throws>
                    IllegalStateException if this node (or an ancestor) has been
                      removed with the {@link #removeNode()} method.                    
                </throws>
            </javadoc>
            <method name="export" type="void" line="98">
                <params>
                    <param name="os" type="OutputStream"/>
                    <param name="p" type="Preferences"/>
                    <param name="subTree" type="boolean"/>
                </params>
                <comment line="109">
                    Get bottom-up list of nodes from p to root, excluding root                    
                </comment>
                <declaration name="doc" type="Document" line="101"/>
                <declaration name="preferences" type="Element" line="102"/>
                <declaration name="xmlRoot" type="Element" line="104"/>
                <declaration name="ancestors" type="List" line="109"/>
                <scope line="112"/>
                <declaration name="e" type="Element" line="115"/>
                <scope line="116"/>
            </method>
            <javadoc line="126">
                Put the preferences in the specified Preferences node into the
                  specified XML element which is assumed to represent a node
                  in the specified XML document which is assumed to conform to
                  PREFS_DTD.  If subTree is true, create children of the specified
                  XML node conforming to all of the children of the specified
                  Preferences node and recurse.                
                <throws>
                    BackingStoreException if it is not possible to read
                      the preferences or children out of the specified
                      preferences node.                    
                </throws>
            </javadoc>
            <method name="putPreferencesInXml" type="void" line="140">
                <params>
                    <param name="elt" type="Element"/>
                    <param name="doc" type="Document"/>
                    <param name="prefs" type="Preferences"/>
                    <param name="subTree" type="boolean"/>
                </params>
                <comment line="145">
                    Node is locked to export its contents and get a
                     copy of children, then lock is released,
                     and, if subTree = true, recursive calls are made on children                    
                </comment>
                <comment line="149">
                    Check if this node was concurrently removed. If yes
                     remove it from XML Document and return.                    
                </comment>
                <comment line="155">
                    Put map in xml element                    
                </comment>
                <comment line="162">
                    NEXT STATEMENT THROWS NULL PTR EXC INSTEAD OF ASSERT FAIL                    
                </comment>
                <comment line="165">
                    Recurse if appropriate                    
                </comment>
                <comment line="167">
                                        
                </comment>
                <comment line="173">
                    release lock                    
                </comment>
                <declaration name="kidsCopy" type="Preferences[]" line="141"/>
                <declaration name="kidNames" type="String[]" line="142"/>
                <scope line="147">
                    <scope line="150"/>
                    <declaration name="keys" type="String[]" line="155"/>
                    <declaration name="map" type="Element" line="156"/>
                    <scope line="157">
                        <declaration name="entry" type="Element" line="158"/>
                    </scope>
                    <scope line="165"/>
                </scope>
                <scope line="175">
                    <scope line="176">
                        <declaration name="xmlKid" type="Element" line="177"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="185">
                Import preferences from the specified input stream, which is assumed
                  to contain an XML document in the format described in the Preferences
                  spec.                
                <throws>
                    IOException if reading from the specified output stream
                      results in an &lt;tt&gt;IOException&lt;/tt&gt;.                    
                </throws>
                <throws>
                    InvalidPreferencesFormatException Data on input stream does not
                      constitute a valid XML document with the mandated document type.                    
                </throws>
            </javadoc>
            <method name="importPreferences" type="void" line="197">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <scope line="198">
                    <declaration name="doc" type="Document" line="199"/>
                    <declaration name="xmlVersion" type="String" line="200"/>
                    <declaration name="xmlRoot" type="Element" line="209"/>
                    <declaration name="prefsRoot" type="Preferences" line="211"/>
                </scope>
                <scope line="215"/>
            </method>
            <javadoc line="220">
                Create a new prefs XML document.                
            </javadoc>
            <method name="createPrefsDoc" type="Document" line="223">
                <params>
                    <param name="qname" type="String"/>
                </params>
                <scope line="224">
                    <declaration name="di" type="DOMImplementation" line="225"/>
                    <declaration name="dt" type="DocumentType" line="227"/>
                </scope>
                <scope line="229"/>
            </method>
            <javadoc line="234">
                Load an XML document from specified input stream, which must
                  have the requisite DTD URI.                
            </javadoc>
            <method name="loadPrefsDoc" type="Document" line="240">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="dbf" type="DocumentBuilderFactory" line="241"/>
                <scope line="246">
                    <declaration name="db" type="DocumentBuilder" line="247"/>
                </scope>
                <scope line="251"/>
            </method>
            <javadoc line="256">
                Write XML document to the specified output stream.                
            </javadoc>
            <method name="writeDoc" type="void" line="261">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="268">
                    Ignore the IAE. Should not fail the writeout even the
                    transformer provider does not support &quot;indent-number&quot;.                    
                </comment>
                <comment line="274">
                    Transformer resets the &quot;indent&quot; info if the &quot;result&quot; is a StreamResult with
                    an OutputStream object embedded, creating a Writer object on top of that
                    OutputStream object however works.                    
                </comment>
                <scope line="262">
                    <declaration name="tf" type="TransformerFactory" line="263"/>
                    <scope line="264"/>
                    <scope line="266"/>
                    <declaration name="t" type="Transformer" line="270"/>
                </scope>
                <scope line="278"/>
            </method>
            <javadoc line="283">
                Recursively traverse the specified preferences node and store
                  the described preferences into the system or current user
                  preferences tree, as appropriate.                
            </javadoc>
            <method name="ImportSubtree" type="void" line="288">
                <params>
                    <param name="prefsNode" type="Preferences"/>
                    <param name="xmlNode" type="Element"/>
                </params>
                <comment line="292">
                    We first lock the node, import its contents and get
                     child nodes. Then we unlock the node and go to children
                     Since some of the children might have been concurrently
                     deleted we check for this.                    
                </comment>
                <comment line="299">
                                        
                </comment>
                <comment line="301">
                    If removed, return silently                    
                </comment>
                <comment line="305">
                    Import any preferences at this node                    
                </comment>
                <comment line="310">
                    Get involved children                    
                </comment>
                <comment line="315">
                    unlocked the node                    
                </comment>
                <comment line="316">
                    import children                    
                </comment>
                <declaration name="xmlKids" type="NodeList" line="289"/>
                <declaration name="numXmlKids" type="int" line="290"/>
                <declaration name="prefsKids" type="Preferences[]" line="297"/>
                <scope line="299">
                    <declaration name="firstXmlKid" type="Element" line="305"/>
                    <scope line="310">
                        <declaration name="xmlKid" type="Element" line="311"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="320">
                Import the preferences described by the specified XML element
                  (a map from a preferences document) into the specified
                  preferences node.                
            </javadoc>
            <method name="ImportPrefs" type="void" line="325">
                <params>
                    <param name="prefsNode" type="Preferences"/>
                    <param name="map" type="Element"/>
                </params>
                <declaration name="entries" type="NodeList" line="326"/>
                <scope line="327">
                    <declaration name="entry" type="Element" line="328"/>
                </scope>
            </method>
            <javadoc line="334">
                Export the specified Map&lt;String,String&gt; to a map document on
                  the specified OutputStream as per the prefs DTD.  This is used
                  as the internal (undocumented) format for FileSystemPrefs.                
                <throws>
                    IOException if writing to the specified output stream
                      results in an &lt;tt&gt;IOException&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="exportMap" type="void" line="342">
                <params>
                    <param name="os" type="OutputStream"/>
                    <param name="map" type="Map"/>
                </params>
                <declaration name="doc" type="Document" line="343"/>
                <declaration name="xmlMap" type="Element" line="344"/>
                <scope line="347">
                    <declaration name="e" type="Map.Entry" line="348"/>
                    <declaration name="xe" type="Element" line="349"/>
                </scope>
            </method>
            <javadoc line="358">
                Import Map from the specified input stream, which is assumed
                  to contain a map document as per the prefs DTD.  This is used
                  as the internal (undocumented) format for FileSystemPrefs.  The
                  key-value pairs specified in the XML document will be put into
                  the specified Map.  (If this Map is empty, it will contain exactly
                  the key-value pairs int the XML-document when this method returns.)                
                <throws>
                    IOException if reading from the specified output stream
                      results in an &lt;tt&gt;IOException&lt;/tt&gt;.                    
                </throws>
                <throws>
                    InvalidPreferencesFormatException Data on input stream does not
                      constitute a valid XML document with the mandated document type.                    
                </throws>
            </javadoc>
            <method name="importMap" type="void" line="373">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="m" type="Map"/>
                </params>
                <comment line="378">
                    check version                    
                </comment>
                <scope line="374">
                    <declaration name="doc" type="Document" line="375"/>
                    <declaration name="xmlMap" type="Element" line="376"/>
                    <declaration name="mapVersion" type="String" line="378"/>
                    <declaration name="entries" type="NodeList" line="386"/>
                    <scope line="387">
                        <declaration name="entry" type="Element" line="388"/>
                    </scope>
                </scope>
                <scope line="391"/>
            </method>
            <class name="Resolver" line="396">
                <implements interface="EntityResolver"/>
                <method name="resolveEntity" type="InputSource" line="399">
                    <params>
                        <param name="pid" type="String"/>
                        <param name="sid" type="String"/>
                    </params>
                    <scope line="400">
                        <declaration name="is" type="InputSource" line="401"/>
                    </scope>
                </method>
            </class>
            <class name="EH" line="410">
                <implements interface="ErrorHandler"/>
                <method name="error" type="void" line="411">
                    <params>
                        <param name="x" type="SAXParseException"/>
                    </params>
                </method>
                <method name="fatalError" type="void" line="414">
                    <params>
                        <param name="x" type="SAXParseException"/>
                    </params>
                </method>
                <method name="warning" type="void" line="417">
                    <params>
                        <param name="x" type="SAXParseException"/>
                    </params>
                </method>
            </class>
        </class>
    </source>