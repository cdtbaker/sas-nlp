<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.prefs">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="javax.xml.parsers"/>
        <import package="javax.xml.transform"/>
        <import package="javax.xml.transform.dom"/>
        <import package="javax.xml.transform.stream"/>
        <import package="org.xml.sax"/>
        <import package="org.w3c.dom"/>
        <class name="XmlSupport" line="10">
            <javadoc line="10">
                XML Support for java.util.prefs. Methods to import and export preference
                  nodes and subtrees.                
                <author>
                    Josh Bloch and Mark Reinhold                    
                </author>
                <see>
                    Preferences                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="PREFS_DTD_URI" type="String" line="18"/>
            <declaration name="PREFS_DTD" type="String" line="19"/>
            <declaration name="EXTERNAL_XML_VERSION" type="String" line="20"/>
            <javadoc line="20">
                Version number for the format exported preferences files.                
            </javadoc>
            <declaration name="MAP_XML_VERSION" type="String" line="24"/>
            <javadoc line="25">
                Export the specified preferences node and, if subTree is true, all
                  subnodes, to the specified output stream.  Preferences are exported as
                  an XML document conforming to the definition in the Preferences spec.                
                <throws>
                    IOException if writing to the specified output stream
                      results in an &lt;tt&gt;IOException&lt;/tt&gt;.                    
                </throws>
                <throws>
                    BackingStoreException if preference data cannot be read from
                      backing store.                    
                </throws>
                <throws>
                    IllegalStateException if this node (or an ancestor) has been
                      removed with the {@link #removeNode()} method.                    
                </throws>
            </javadoc>
            <method name="export" type="void" line="36">
                <params>
                    <param name="os" type="OutputStream"/>
                    <param name="p" type="Preferences"/>
                    <param name="subTree" type="boolean"/>
                </params>
                <declaration name="doc" type="Document" line="38"/>
                <declaration name="preferences" type="Element" line="39"/>
                <declaration name="xmlRoot" type="Element" line="41"/>
                <declaration name="ancestors" type="List" line="43"/>
                <scope line="44"/>
                <declaration name="e" type="Element" line="47"/>
                <scope line="48"/>
            </method>
            <javadoc line="56">
                Put the preferences in the specified Preferences node into the
                  specified XML element which is assumed to represent a node
                  in the specified XML document which is assumed to conform to
                  PREFS_DTD.  If subTree is true, create children of the specified
                  XML node conforming to all of the children of the specified
                  Preferences node and recurse.                
                <throws>
                    BackingStoreException if it is not possible to read
                      the preferences or children out of the specified
                      preferences node.                    
                </throws>
            </javadoc>
            <method name="putPreferencesInXml" type="void" line="67">
                <params>
                    <param name="elt" type="Element"/>
                    <param name="doc" type="Document"/>
                    <param name="prefs" type="Preferences"/>
                    <param name="subTree" type="boolean"/>
                </params>
                <declaration name="kidsCopy" type="Preferences[]" line="68"/>
                <declaration name="kidNames" type="String[]" line="69"/>
                <scope line="70">
                    <scope line="71"/>
                    <declaration name="keys" type="String[]" line="75"/>
                    <declaration name="map" type="Element" line="76"/>
                    <scope line="77">
                        <declaration name="entry" type="Element" line="78"/>
                    </scope>
                    <scope line="82"/>
                </scope>
                <scope line="88">
                    <scope line="89">
                        <declaration name="xmlKid" type="Element" line="90"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="96">
                Import preferences from the specified input stream, which is assumed
                  to contain an XML document in the format described in the Preferences
                  spec.                
                <throws>
                    IOException if reading from the specified output stream
                      results in an &lt;tt&gt;IOException&lt;/tt&gt;.                    
                </throws>
                <throws>
                    InvalidPreferencesFormatException Data on input stream does not
                      constitute a valid XML document with the mandated document type.                    
                </throws>
            </javadoc>
            <method name="importPreferences" type="void" line="105">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <scope line="106">
                    <declaration name="doc" type="Document" line="107"/>
                    <declaration name="xmlVersion" type="String" line="108"/>
                    <declaration name="xmlRoot" type="Element" line="110"/>
                    <declaration name="prefsRoot" type="Preferences" line="111"/>
                </scope>
                <scope line="114"/>
            </method>
            <javadoc line="118">
                Create a new prefs XML document.                
            </javadoc>
            <method name="createPrefsDoc" type="Document" line="121">
                <params>
                    <param name="qname" type="String"/>
                </params>
                <scope line="122">
                    <declaration name="di" type="DOMImplementation" line="123"/>
                    <declaration name="dt" type="DocumentType" line="124"/>
                </scope>
                <scope line="127"/>
            </method>
            <javadoc line="131">
                Load an XML document from specified input stream, which must
                  have the requisite DTD URI.                
            </javadoc>
            <method name="loadPrefsDoc" type="Document" line="135">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="dbf" type="DocumentBuilderFactory" line="136"/>
                <scope line="141">
                    <declaration name="db" type="DocumentBuilder" line="142"/>
                </scope>
                <scope line="147"/>
            </method>
            <javadoc line="151">
                Write XML document to the specified output stream.                
            </javadoc>
            <method name="writeDoc" type="void" line="154">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="155">
                    <declaration name="tf" type="TransformerFactory" line="156"/>
                    <scope line="157"/>
                    <scope line="160"/>
                    <declaration name="t" type="Transformer" line="162"/>
                </scope>
                <scope line="167"/>
            </method>
            <javadoc line="171">
                Recursively traverse the specified preferences node and store
                  the described preferences into the system or current user
                  preferences tree, as appropriate.                
            </javadoc>
            <method name="ImportSubtree" type="void" line="176">
                <params>
                    <param name="prefsNode" type="Preferences"/>
                    <param name="xmlNode" type="Element"/>
                </params>
                <declaration name="xmlKids" type="NodeList" line="177"/>
                <declaration name="numXmlKids" type="int" line="178"/>
                <declaration name="prefsKids" type="Preferences[]" line="179"/>
                <scope line="180">
                    <declaration name="firstXmlKid" type="Element" line="182"/>
                    <scope line="185">
                        <declaration name="xmlKid" type="Element" line="186"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="192">
                Import the preferences described by the specified XML element
                  (a map from a preferences document) into the specified
                  preferences node.                
            </javadoc>
            <method name="ImportPrefs" type="void" line="197">
                <params>
                    <param name="prefsNode" type="Preferences"/>
                    <param name="map" type="Element"/>
                </params>
                <declaration name="entries" type="NodeList" line="198"/>
                <scope line="199">
                    <declaration name="entry" type="Element" line="200"/>
                </scope>
            </method>
            <javadoc line="204">
                Export the specified Map&lt;String,String&gt; to a map document on
                  the specified OutputStream as per the prefs DTD.  This is used
                  as the internal (undocumented) format for FileSystemPrefs.                
                <throws>
                    IOException if writing to the specified output stream
                      results in an &lt;tt&gt;IOException&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="exportMap" type="void" line="211">
                <params>
                    <param name="os" type="OutputStream"/>
                    <param name="map" type="Map"/>
                </params>
                <declaration name="doc" type="Document" line="212"/>
                <declaration name="xmlMap" type="Element" line="213"/>
                <scope line="215">
                    <declaration name="e" type="Map.Entry" line="216"/>
                    <declaration name="xe" type="Element" line="217"/>
                </scope>
            </method>
            <javadoc line="223">
                Import Map from the specified input stream, which is assumed
                  to contain a map document as per the prefs DTD.  This is used
                  as the internal (undocumented) format for FileSystemPrefs.  The
                  key-value pairs specified in the XML document will be put into
                  the specified Map.  (If this Map is empty, it will contain exactly
                  the key-value pairs int the XML-document when this method returns.)                
                <throws>
                    IOException if reading from the specified output stream
                      results in an &lt;tt&gt;IOException&lt;/tt&gt;.                    
                </throws>
                <throws>
                    InvalidPreferencesFormatException Data on input stream does not
                      constitute a valid XML document with the mandated document type.                    
                </throws>
            </javadoc>
            <method name="importMap" type="void" line="235">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="m" type="Map"/>
                </params>
                <scope line="236">
                    <declaration name="doc" type="Document" line="237"/>
                    <declaration name="xmlMap" type="Element" line="238"/>
                    <declaration name="mapVersion" type="String" line="239"/>
                    <declaration name="entries" type="NodeList" line="241"/>
                    <scope line="242">
                        <declaration name="entry" type="Element" line="243"/>
                    </scope>
                </scope>
                <scope line="247"/>
            </method>
            <class name="Resolver" line="251">
                <implements interface="EntityResolver"/>
                <method name="resolveEntity" type="InputSource" line="252">
                    <params>
                        <param name="pid" type="String"/>
                        <param name="sid" type="String"/>
                    </params>
                    <scope line="253">
                        <declaration name="is" type="InputSource" line="254"/>
                    </scope>
                </method>
            </class>
            <class name="EH" line="262">
                <implements interface="ErrorHandler"/>
                <method name="error" type="void" line="263">
                    <params>
                        <param name="x" type="SAXParseException"/>
                    </params>
                </method>
                <method name="fatalError" type="void" line="266">
                    <params>
                        <param name="x" type="SAXParseException"/>
                    </params>
                </method>
                <method name="warning" type="void" line="269">
                    <params>
                        <param name="x" type="SAXParseException"/>
                    </params>
                </method>
            </class>
        </class>
    </source>