<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.prefs">
        <class name="Base64" line="28">
            <javadoc line="28">
                Static methods for translating Base64 encoded strings to byte arrays
                  and vice-versa.                
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Preferences                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="37">
                Translates the specified byte array into a Base64 string as per
                  Preferences.put(byte[]).                
            </javadoc>
            <method name="byteArrayToBase64" type="String" line="41">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <javadoc line="45">
                Translates the specified byte array into an &quot;alternate representation&quot;
                  Base64 string.  This non-standard variant uses an alphabet that does
                  not contain the uppercase alphabetic characters, which makes it
                  suitable for use in situations where case-folding occurs.                
            </javadoc>
            <method name="byteArrayToAltBase64" type="String" line="51">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <method name="byteArrayToBase64" type="String" line="55">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="alternate" type="boolean"/>
                </params>
                <comment line="64">
                    Translate all full groups from byte array elements to Base64                    
                </comment>
                <comment line="76">
                    Translate partial group if present                    
                </comment>
                <comment line="84">
                    assert numBytesInPartialGroup == 2;                    
                </comment>
                <comment line="91">
                    assert inCursor == a.length;
                     assert result.length() == resultLen;                    
                </comment>
                <declaration name="aLen" type="int" line="56"/>
                <declaration name="numFullGroups" type="int" line="57"/>
                <declaration name="numBytesInPartialGroup" type="int" line="58"/>
                <declaration name="resultLen" type="int" line="59"/>
                <declaration name="result" type="StringBuffer" line="60"/>
                <declaration name="intToAlpha" type="char[]" line="61"/>
                <declaration name="inCursor" type="int" line="64"/>
                <scope line="65">
                    <declaration name="byte0" type="int" line="66"/>
                    <declaration name="byte1" type="int" line="67"/>
                    <declaration name="byte2" type="int" line="68"/>
                </scope>
                <scope line="76">
                    <declaration name="byte0" type="int" line="77"/>
                    <scope line="79"/>
                    <scope line="82">
                        <declaration name="byte1" type="int" line="84"/>
                    </scope>
                </scope>
            </method>
            <declaration name="intToBase64" type="char" line="95"/>
            <javadoc line="95">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Base64 Alphabet&quot; equivalents as specified
                  in Table 1 of RFC 2045.                
            </javadoc>
            <declaration name="intToAltBase64" type="char" line="108"/>
            <javadoc line="108">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Alternate Base64 Alphabet&quot; equivalents.
                  This is NOT the real Base64 Alphabet as per in Table 1 of RFC 2045.
                  This alternate alphabet does not use the capital letters.  It is
                  designed for use in environments where &quot;case folding&quot; occurs.                
            </javadoc>
            <javadoc line="123">
                Translates the specified Base64 string (as per Preferences.get(byte[]))
                  into a byte array.                
                <throw>
                    IllegalArgumentException if <tt>s</tt> is not a valid Base64
                      string.                    
                </throw>
            </javadoc>
            <method name="base64ToByteArray" type="byte[]" line="130">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="134">
                Translates the specified &quot;alternate representation&quot; Base64 string
                  into a byte array.                
                <throw>
                    IllegalArgumentException or ArrayOutOfBoundsException
                      if <tt>s</tt> is not a valid alternate representation
                      Base64 string.                    
                </throw>
            </javadoc>
            <method name="altBase64ToByteArray" type="byte[]" line="142">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="base64ToByteArray" type="byte[]" line="146">
                <params>
                    <param name="s" type="String"/>
                    <param name="alternate" type="boolean"/>
                </params>
                <comment line="166">
                    Translate all full groups from base64 to byte array elements                    
                </comment>
                <comment line="178">
                    Translate partial group, if present                    
                </comment>
                <comment line="189">
                    assert inCursor == s.length()-missingBytesInLastGroup;
                     assert outCursor == result.length;                    
                </comment>
                <declaration name="alphaToInt" type="byte[]" line="147"/>
                <declaration name="sLen" type="int" line="148"/>
                <declaration name="numGroups" type="int" line="149"/>
                <declaration name="missingBytesInLastGroup" type="int" line="153"/>
                <declaration name="numFullGroups" type="int" line="154"/>
                <scope line="155">
                    <scope line="156"/>
                </scope>
                <declaration name="result" type="byte[]" line="163"/>
                <declaration name="inCursor" type="int" line="166"/>
                <scope line="167">
                    <declaration name="ch0" type="int" line="168"/>
                    <declaration name="ch1" type="int" line="169"/>
                    <declaration name="ch2" type="int" line="170"/>
                    <declaration name="ch3" type="int" line="171"/>
                </scope>
                <scope line="178">
                    <declaration name="ch0" type="int" line="179"/>
                    <declaration name="ch1" type="int" line="180"/>
                    <scope line="183">
                        <declaration name="ch2" type="int" line="184"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="193">
                Translates the specified character, which is assumed to be in the
                  &quot;Base 64 Alphabet&quot; into its equivalent 6-bit positive integer.                
                <throw>
                    IllegalArgumentException or ArrayOutOfBoundsException if
                      c is not in the Base64 Alphabet.                    
                </throw>
            </javadoc>
            <method name="base64toInt" type="int" line="200">
                <params>
                    <param name="c" type="char"/>
                    <param name="alphaToInt" type="byte[]"/>
                </params>
                <declaration name="result" type="int" line="201"/>
            </method>
            <declaration name="base64ToInt" type="byte" line="207"/>
            <javadoc line="207">
                This array is a lookup table that translates unicode characters
                  drawn from the &quot;Base64 Alphabet&quot; (as specified in Table 1 of RFC 2045)
                  into their 6-bit positive integer equivalents.  Characters that
                  are not in the Base64 alphabet but fall within the bounds of the
                  array are translated to -1.                
            </javadoc>
            <declaration name="altBase64ToInt" type="byte" line="224"/>
            <javadoc line="224">
                This array is the analogue of base64ToInt, but for the nonstandard
                  variant that avoids the use of uppercase alphabetic characters.                
            </javadoc>
            <method name="main" type="void" line="239">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="numRuns" type="int" line="240"/>
                <declaration name="numBytes" type="int" line="241"/>
                <declaration name="rnd" type="java.util.Random" line="242"/>
                <scope line="243">
                    <scope line="244">
                        <declaration name="arr" type="byte[]" line="245"/>
                        <declaration name="s" type="String" line="249"/>
                        <declaration name="b" type="byte[]" line="250"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>