<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.prefs">
        <class name="Base64" line="2">
            <javadoc line="2">
                Static methods for translating Base64 encoded strings to byte arrays
                  and vice-versa.                
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Preferences                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="10">
                Translates the specified byte array into a Base64 string as per
                  Preferences.put(byte[]).                
            </javadoc>
            <method name="byteArrayToBase64" type="String" line="14">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <javadoc line="17">
                Translates the specified byte array into an &quot;alternate representation&quot;
                  Base64 string.  This non-standard variant uses an alphabet that does
                  not contain the uppercase alphabetic characters, which makes it
                  suitable for use in situations where case-folding occurs.                
            </javadoc>
            <method name="byteArrayToAltBase64" type="String" line="23">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <method name="byteArrayToBase64" type="String" line="26">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="alternate" type="boolean"/>
                </params>
                <declaration name="aLen" type="int" line="27"/>
                <declaration name="numFullGroups" type="int" line="28"/>
                <declaration name="numBytesInPartialGroup" type="int" line="29"/>
                <declaration name="resultLen" type="int" line="30"/>
                <declaration name="result" type="StringBuffer" line="31"/>
                <declaration name="intToAlpha" type="char[]" line="32"/>
                <declaration name="inCursor" type="int" line="33"/>
                <scope line="34">
                    <declaration name="byte0" type="int" line="35"/>
                    <declaration name="byte1" type="int" line="36"/>
                    <declaration name="byte2" type="int" line="37"/>
                </scope>
                <scope line="43">
                    <declaration name="byte0" type="int" line="44"/>
                    <scope line="46"/>
                    <scope line="50">
                        <declaration name="byte1" type="int" line="51"/>
                    </scope>
                </scope>
            </method>
            <declaration name="intToBase64" type="char" line="59"/>
            <javadoc line="59">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Base64 Alphabet&quot; equivalents as specified
                  in Table 1 of RFC 2045.                
            </javadoc>
            <declaration name="intToAltBase64" type="char" line="65"/>
            <javadoc line="65">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Alternate Base64 Alphabet&quot; equivalents.
                  This is NOT the real Base64 Alphabet as per in Table 1 of RFC 2045.
                  This alternate alphabet does not use the capital letters.  It is
                  designed for use in environments where &quot;case folding&quot; occurs.                
            </javadoc>
            <javadoc line="73">
                Translates the specified Base64 string (as per Preferences.get(byte[]))
                  into a byte array.                
                <throw>
                    IllegalArgumentException if &lt;tt&gt;s&lt;/tt&gt; is not a valid Base64
                      string.                    
                </throw>
            </javadoc>
            <method name="base64ToByteArray" type="byte[]" line="79">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="82">
                Translates the specified &quot;alternate representation&quot; Base64 string
                  into a byte array.                
                <throw>
                    IllegalArgumentException or ArrayOutOfBoundsException
                      if &lt;tt&gt;s&lt;/tt&gt; is not a valid alternate representation
                      Base64 string.                    
                </throw>
            </javadoc>
            <method name="altBase64ToByteArray" type="byte[]" line="89">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="base64ToByteArray" type="byte[]" line="92">
                <params>
                    <param name="s" type="String"/>
                    <param name="alternate" type="boolean"/>
                </params>
                <declaration name="alphaToInt" type="byte[]" line="93"/>
                <declaration name="sLen" type="int" line="94"/>
                <declaration name="numGroups" type="int" line="95"/>
                <declaration name="missingBytesInLastGroup" type="int" line="97"/>
                <declaration name="numFullGroups" type="int" line="98"/>
                <scope line="99">
                    <scope line="100"/>
                </scope>
                <declaration name="result" type="byte[]" line="106"/>
                <declaration name="inCursor" type="int" line="107"/>
                <scope line="108">
                    <declaration name="ch0" type="int" line="109"/>
                    <declaration name="ch1" type="int" line="110"/>
                    <declaration name="ch2" type="int" line="111"/>
                    <declaration name="ch3" type="int" line="112"/>
                </scope>
                <scope line="117">
                    <declaration name="ch0" type="int" line="118"/>
                    <declaration name="ch1" type="int" line="119"/>
                    <scope line="121">
                        <declaration name="ch2" type="int" line="122"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="128">
                Translates the specified character, which is assumed to be in the
                  &quot;Base 64 Alphabet&quot; into its equivalent 6-bit positive integer.                
                <throw>
                    IllegalArgumentException or ArrayOutOfBoundsException if
                      c is not in the Base64 Alphabet.                    
                </throw>
            </javadoc>
            <method name="base64toInt" type="int" line="134">
                <params>
                    <param name="c" type="char"/>
                    <param name="alphaToInt" type="byte[]"/>
                </params>
                <declaration name="result" type="int" line="135"/>
            </method>
            <declaration name="base64ToInt" type="byte" line="139"/>
            <javadoc line="139">
                This array is a lookup table that translates unicode characters
                  drawn from the &quot;Base64 Alphabet&quot; (as specified in Table 1 of RFC 2045)
                  into their 6-bit positive integer equivalents.  Characters that
                  are not in the Base64 alphabet but fall within the bounds of the
                  array are translated to -1.                
            </javadoc>
            <declaration name="altBase64ToInt" type="byte" line="147"/>
            <javadoc line="147">
                This array is the analogue of base64ToInt, but for the nonstandard
                  variant that avoids the use of uppercase alphabetic characters.                
            </javadoc>
            <method name="main" type="void" line="152">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="numRuns" type="int" line="153"/>
                <declaration name="numBytes" type="int" line="154"/>
                <declaration name="rnd" type="java.util.Random" line="155"/>
                <scope line="156">
                    <scope line="157">
                        <declaration name="arr" type="byte[]" line="158"/>
                        <declaration name="s" type="String" line="160"/>
                        <declaration name="b" type="byte[]" line="161"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>