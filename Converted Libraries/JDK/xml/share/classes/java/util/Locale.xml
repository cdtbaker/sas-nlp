<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessController"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.spi.LocaleNameProvider"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.util.LocaleServiceProviderPool"/>
        <import package="sun.util.locale.BaseLocale"/>
        <import package="sun.util.locale.InternalLocaleBuilder"/>
        <import package="sun.util.locale.LanguageTag"/>
        <import package="sun.util.locale.LocaleExtensions"/>
        <import package="sun.util.locale.LocaleObjectCache"/>
        <import package="sun.util.locale.LocaleSyntaxException"/>
        <import package="sun.util.locale.LocaleUtils"/>
        <import package="sun.util.locale.ParseStatus"/>
        <import package="sun.util.locale.UnicodeLocaleExtension"/>
        <import package="sun.util.resources.LocaleData"/>
        <import package="sun.util.resources.OpenListResourceBundle"/>
        <class name="Locale" line="66">
            <comment line="1885">
                Overrides                
            </comment>
            <comment line="1910">
                ================= privates =====================================                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="66">
                A &lt;code&gt;Locale&lt;/code&gt; object represents a specific geographical, political,
                  or cultural region. An operation that requires a &lt;code&gt;Locale&lt;/code&gt; to perform
                  its task is called &lt;em&gt;locale-sensitive&lt;/em&gt; and uses the &lt;code&gt;Locale&lt;/code&gt;
                  to tailor information for the user. For example, displaying a number
                  is a locale-sensitive operation&amp;mdash; the number should be formatted
                  according to the customs and conventions of the user&apos;s native country,
                  region, or culture.
                  &lt;p&gt; The &lt;code&gt;Locale&lt;/code&gt; class implements identifiers
                  interchangeable with BCP 47 (IETF BCP 47, &quot;Tags for Identifying
                  Languages&quot;), with support for the LDML (UTS#35, &quot;Unicode Locale
                  Data Markup Language&quot;) BCP 47-compatible extensions for locale data
                  exchange.
                  &lt;p&gt; A &lt;code&gt;Locale&lt;/code&gt; object logically consists of the fields
                  described below.
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;a name=&quot;def_language&quot;/&gt;&lt;b&gt;language&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;ISO 639 alpha-2 or alpha-3 language code, or registered
                  language subtags up to 8 alpha letters (for future enhancements).
                  When a language has both an alpha-2 code and an alpha-3 code, the
                  alpha-2 code must be used.  You can find a full list of valid
                  language codes in the IANA Language Subtag Registry (search for
                  &quot;Type: language&quot;).  The language field is case insensitive, but
                  &lt;code&gt;Locale&lt;/code&gt; always canonicalizes to lower case.&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Well-formed language values have the form
                  &lt;code&gt;[a-zA-Z]{2,8}&lt;/code&gt;.  Note that this is not the the full
                  BCP47 language production, since it excludes extlang.  They are
                  not needed since modern three-letter language codes replace
                  them.&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Example: &quot;en&quot; (English), &quot;ja&quot; (Japanese), &quot;kok&quot; (Konkani)&lt;/dd&gt;&lt;br&gt;
                  &lt;dt&gt;&lt;a name=&quot;def_script&quot;/&gt;&lt;b&gt;script&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;ISO 15924 alpha-4 script code.  You can find a full list of
                  valid script codes in the IANA Language Subtag Registry (search
                  for &quot;Type: script&quot;).  The script field is case insensitive, but
                  &lt;code&gt;Locale&lt;/code&gt; always canonicalizes to title case (the first
                  letter is upper case and the rest of the letters are lower
                  case).&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Well-formed script values have the form
                  &lt;code&gt;[a-zA-Z]{4}&lt;/code&gt;&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Example: &quot;Latn&quot; (Latin), &quot;Cyrl&quot; (Cyrillic)&lt;/dd&gt;&lt;br&gt;
                  &lt;dt&gt;&lt;a name=&quot;def_region&quot;/&gt;&lt;b&gt;country (region)&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;ISO 3166 alpha-2 country code or UN M.49 numeric-3 area code.
                  You can find a full list of valid country and region codes in the
                  IANA Language Subtag Registry (search for &quot;Type: region&quot;).  The
                  country (region) field is case insensitive, but
                  &lt;code&gt;Locale&lt;/code&gt; always canonicalizes to upper case.&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Well-formed country/region values have
                  the form &lt;code&gt;[a-zA-Z]{2} | [0-9]{3}&lt;/code&gt;&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Example: &quot;US&quot; (United States), &quot;FR&quot; (France), &quot;029&quot;
                  (Caribbean)&lt;/dd&gt;&lt;br&gt;
                  &lt;dt&gt;&lt;a name=&quot;def_variant&quot;/&gt;&lt;b&gt;variant&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;Any arbitrary value used to indicate a variation of a
                  &lt;code&gt;Locale&lt;/code&gt;.  Where there are two or more variant values
                  each indicating its own semantics, these values should be ordered
                  by importance, with most important first, separated by
                  underscore(&apos;_&apos;).  The variant field is case sensitive.&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Note: IETF BCP 47 places syntactic restrictions on variant
                  subtags.  Also BCP 47 subtags are strictly used to indicate
                  additional variations that define a language or its dialects that
                  are not covered by any combinations of language, script and
                  region subtags.  You can find a full list of valid variant codes
                  in the IANA Language Subtag Registry (search for &quot;Type: variant&quot;).
                  &lt;p&gt;However, the variant field in &lt;code&gt;Locale&lt;/code&gt; has
                  historically been used for any kind of variation, not just
                  language variations.  For example, some supported variants
                  available in Java SE Runtime Environments indicate alternative
                  cultural behaviors such as calendar type or number script.  In
                  BCP 47 this kind of information, which does not identify the
                  language, is supported by extension subtags or private use
                  subtags.&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Well-formed variant values have the form &lt;code&gt;SUBTAG
                  ((&apos;_&apos;|&apos;-&apos;) SUBTAG)&lt;/code&gt; where &lt;code&gt;SUBTAG =
                  [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}&lt;/code&gt;. (Note: BCP 47 only
                  uses hyphen (&apos;-&apos;) as a delimiter, this is more lenient).&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Example: &quot;polyton&quot; (Polytonic Greek), &quot;POSIX&quot;&lt;/dd&gt;&lt;br&gt;
                  &lt;dt&gt;&lt;a name=&quot;def_extensions&quot;/&gt;&lt;b&gt;extensions&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;A map from single character keys to string values, indicating
                  extensions apart from language identification.  The extensions in
                  &lt;code&gt;Locale&lt;/code&gt; implement the semantics and syntax of BCP 47
                  extension subtags and private use subtags. The extensions are
                  case insensitive, but &lt;code&gt;Locale&lt;/code&gt; canonicalizes all
                  extension keys and values to lower case. Note that extensions
                  cannot have empty values.&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Well-formed keys are single characters from the set
                  &lt;code&gt;[0-9a-zA-Z]&lt;/code&gt;.  Well-formed values have the form
                  &lt;code&gt;SUBTAG (&apos;-&apos; SUBTAG)&lt;/code&gt; where for the key &apos;x&apos;
                  &lt;code&gt;SUBTAG = [0-9a-zA-Z]{1,8}&lt;/code&gt; and for other keys
                  &lt;code&gt;SUBTAG = [0-9a-zA-Z]{2,8}&lt;/code&gt; (that is, &apos;x&apos; allows
                  single-character subtags).&lt;/dd&gt;&lt;br&gt;
                  &lt;dd&gt;Example: key=&quot;u&quot;/value=&quot;ca-japanese&quot; (Japanese Calendar),
                  key=&quot;x&quot;/value=&quot;java-1-7&quot;&lt;/dd&gt;
                  &lt;/dl&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Although BCP 47 requires field values to be registered
                  in the IANA Language Subtag Registry, the &lt;code&gt;Locale&lt;/code&gt; class
                  does not provide any validation features.  The &lt;code&gt;Builder&lt;/code&gt;
                  only checks if an individual field satisfies the syntactic
                  requirement (is well-formed), but does not validate the value
                  itself.  See {@link Builder} for details.
                  &lt;h4&gt;&lt;a name=&quot;def_locale_extension&quot;&gt;Unicode locale/language extension&lt;/h4&gt;
                  &lt;p&gt;UTS#35, &quot;Unicode Locale Data Markup Language&quot; defines optional
                  attributes and keywords to override or refine the default behavior
                  associated with a locale.  A keyword is represented by a pair of
                  key and type.  For example, &quot;nu-thai&quot; indicates that Thai local
                  digits (value:&quot;thai&quot;) should be used for formatting numbers
                  (key:&quot;nu&quot;).
                  &lt;p&gt;The keywords are mapped to a BCP 47 extension value using the
                  extension key &apos;u&apos; ({@link #UNICODE_LOCALE_EXTENSION}).  The above
                  example, &quot;nu-thai&quot;, becomes the extension &quot;u-nu-thai&quot;.code
                  &lt;p&gt;Thus, when a &lt;code&gt;Locale&lt;/code&gt; object contains Unicode locale
                  attributes and keywords,
                  &lt;code&gt;getExtension(UNICODE_LOCALE_EXTENSION)&lt;/code&gt; will return a
                  String representing this information, for example, &quot;nu-thai&quot;.  The
                  &lt;code&gt;Locale&lt;/code&gt; class also provides {@link #getUnicodeLocaleAttributes}, {@link #getUnicodeLocaleKeys}, and{@link #getUnicodeLocaleType} which allow you to access Unicode
                  locale attributes and key/type pairs directly.  When represented as
                  a string, the Unicode Locale Extension lists attributes
                  alphabetically, followed by key/type sequences with keys listed
                  alphabetically (the order of subtags comprising a key&apos;s type is
                  fixed when the type is defined)
                  &lt;p&gt;A well-formed locale key has the form
                  &lt;code&gt;[0-9a-zA-Z]{2}&lt;/code&gt;.  A well-formed locale type has the
                  form &lt;code&gt;&quot;&quot; | [0-9a-zA-Z]{3,8} (&apos;-&apos; [0-9a-zA-Z]{3,8})&lt;/code&gt; (it
                  can be empty, or a series of subtags 3-8 alphanums in length).  A
                  well-formed locale attribute has the form
                  &lt;code&gt;[0-9a-zA-Z]{3,8}&lt;/code&gt; (it is a single subtag with the same
                  form as a locale type subtag).
                  &lt;p&gt;The Unicode locale extension specifies optional behavior in
                  locale-sensitive services.  Although the LDML specification defines
                  various keys and values, actual locale-sensitive service
                  implementations in a Java Runtime Environment might not support any
                  particular Unicode locale attributes or key/type pairs.
                  &lt;h4&gt;Creating a Locale&lt;/h4&gt;
                  &lt;p&gt;There are several different ways to create a &lt;code&gt;Locale&lt;/code&gt;
                  object.
                  &lt;h5&gt;Builder&lt;/h5&gt;
                  &lt;p&gt;Using {@link Builder} you can construct a &lt;code&gt;Locale&lt;/code&gt; object
                  that conforms to BCP 47 syntax.
                  &lt;h5&gt;Constructors&lt;/h5&gt;
                  &lt;p&gt;The &lt;code&gt;Locale&lt;/code&gt; class provides three constructors:
                  &lt;blockquote&gt;
                  &lt;pre&gt;{@link #Locale(String language)}{@link #Locale(String language,String country)}{@link #Locale(String language,String country,String variant)}&lt;/pre&gt;
                  &lt;/blockquote&gt;
                  These constructors allow you to create a &lt;code&gt;Locale&lt;/code&gt; object
                  with language, country and variant, but you cannot specify
                  script or extensions.
                  &lt;h5&gt;Factory Methods&lt;/h5&gt;
                  &lt;p&gt;The method {@link #forLanguageTag} creates a &lt;code&gt;Locale&lt;/code&gt;
                  object for a well-formed BCP 47 language tag.
                  &lt;h5&gt;Locale Constants&lt;/h5&gt;
                  &lt;p&gt;The &lt;code&gt;Locale&lt;/code&gt; class provides a number of convenient constants
                  that you can use to create &lt;code&gt;Locale&lt;/code&gt; objects for commonly used
                  locales. For example, the following creates a &lt;code&gt;Locale&lt;/code&gt; object
                  for the United States:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  Locale.US
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;h4&gt;Use of Locale&lt;/h4&gt;
                  &lt;p&gt;Once you&apos;ve created a &lt;code&gt;Locale&lt;/code&gt; you can query it for information
                  about itself. Use &lt;code&gt;getCountry&lt;/code&gt; to get the country (or region)
                  code and &lt;code&gt;getLanguage&lt;/code&gt; to get the language code.
                  You can use &lt;code&gt;getDisplayCountry&lt;/code&gt; to get the
                  name of the country suitable for displaying to the user. Similarly,
                  you can use &lt;code&gt;getDisplayLanguage&lt;/code&gt; to get the name of
                  the language suitable for displaying to the user. Interestingly,
                  the &lt;code&gt;getDisplayXXX&lt;/code&gt; methods are themselves locale-sensitive
                  and have two versions: one that uses the default locale and one
                  that uses the locale specified as an argument.
                  &lt;p&gt;The Java Platform provides a number of classes that perform locale-sensitive
                  operations. For example, the &lt;code&gt;NumberFormat&lt;/code&gt; class formats
                  numbers, currency, and percentages in a locale-sensitive manner. Classes
                  such as &lt;code&gt;NumberFormat&lt;/code&gt; have several convenience methods
                  for creating a default object of that type. For example, the
                  &lt;code&gt;NumberFormat&lt;/code&gt; class provides these three convenience methods
                  for creating a default &lt;code&gt;NumberFormat&lt;/code&gt; object:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  NumberFormat.getInstance()
                  NumberFormat.getCurrencyInstance()
                  NumberFormat.getPercentInstance()
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  Each of these methods has two variants; one with an explicit locale
                  and one without; the latter uses the default locale:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  NumberFormat.getInstance(myLocale)
                  NumberFormat.getCurrencyInstance(myLocale)
                  NumberFormat.getPercentInstance(myLocale)
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  A &lt;code&gt;Locale&lt;/code&gt; is the mechanism for identifying the kind of object
                  (&lt;code&gt;NumberFormat&lt;/code&gt;) that you would like to get. The locale is
                  &lt;STRONG&gt;just&lt;/STRONG&gt; a mechanism for identifying objects,
                  &lt;STRONG&gt;not&lt;/STRONG&gt; a container for the objects themselves.
                  &lt;h4&gt;Compatibility&lt;/h4&gt;
                  &lt;p&gt;In order to maintain compatibility with existing usage, Locale&apos;s
                  constructors retain their behavior prior to the Java Runtime
                  Environment version 1.7.  The same is largely true for the
                  &lt;code&gt;toString&lt;/code&gt; method. Thus Locale objects can continue to
                  be used as they were. In particular, clients who parse the output
                  of toString into language, country, and variant fields can continue
                  to do so (although this is strongly discouraged), although the
                  variant field will have additional information in it if script or
                  extensions are present.
                  &lt;p&gt;In addition, BCP 47 imposes syntax restrictions that are not
                  imposed by Locale&apos;s constructors. This means that conversions
                  between some Locales and BCP 47 language tags cannot be made without
                  losing information. Thus &lt;code&gt;toLanguageTag&lt;/code&gt; cannot
                  represent the state of locales whose language, country, or variant
                  do not conform to BCP 47.
                  &lt;p&gt;Because of these issues, it is recommended that clients migrate
                  away from constructing non-conforming locales and use the
                  &lt;code&gt;forLanguageTag&lt;/code&gt; and &lt;code&gt;Locale.Builder&lt;/code&gt; APIs instead.
                  Clients desiring a string representation of the complete locale can
                  then always rely on &lt;code&gt;toLanguageTag&lt;/code&gt; for this purpose.
                  &lt;h5&gt;&lt;a name=&quot;special_cases_constructor&quot;/&gt;Special cases&lt;/h5&gt;
                  &lt;p&gt;For compatibility reasons, two
                  non-conforming locales are treated as special cases.  These are
                  &lt;b&gt;&lt;tt&gt;ja_JP_JP&lt;/tt&gt;&lt;/b&gt; and &lt;b&gt;&lt;tt&gt;th_TH_TH&lt;/tt&gt;&lt;/b&gt;. These are ill-formed
                  in BCP 47 since the variants are too short. To ease migration to BCP 47,
                  these are treated specially during construction.  These two cases (and only
                  these) cause a constructor to generate an extension, all other values behave
                  exactly as they did prior to Java 7.
                  &lt;p&gt;Java has used &lt;tt&gt;ja_JP_JP&lt;/tt&gt; to represent Japanese as used in
                  Japan together with the Japanese Imperial calendar. This is now
                  representable using a Unicode locale extension, by specifying the
                  Unicode locale key &lt;tt&gt;ca&lt;/tt&gt; (for &quot;calendar&quot;) and type
                  &lt;tt&gt;japanese&lt;/tt&gt;. When the Locale constructor is called with the
                  arguments &quot;ja&quot;, &quot;JP&quot;, &quot;JP&quot;, the extension &quot;u-ca-japanese&quot; is
                  automatically added.
                  &lt;p&gt;Java has used &lt;tt&gt;th_TH_TH&lt;/tt&gt; to represent Thai as used in
                  Thailand together with Thai digits. This is also now representable using
                  a Unicode locale extension, by specifying the Unicode locale key
                  &lt;tt&gt;nu&lt;/tt&gt; (for &quot;number&quot;) and value &lt;tt&gt;thai&lt;/tt&gt;. When the Locale
                  constructor is called with the arguments &quot;th&quot;, &quot;TH&quot;, &quot;TH&quot;, the
                  extension &quot;u-nu-thai&quot; is automatically added.
                  &lt;h5&gt;Serialization&lt;/h5&gt;
                  &lt;p&gt;During serialization, writeObject writes all fields to the output
                  stream, including extensions.
                  &lt;p&gt;During deserialization, readResolve adds extensions as described
                  in &lt;a href=&quot;#special_cases_constructor&quot;&gt;Special Cases&lt;/a&gt;, only
                  for the two cases th_TH_TH and ja_JP_JP.
                  &lt;h5&gt;Legacy language codes&lt;/h5&gt;
                  &lt;p&gt;Locale&apos;s constructor has always converted three language codes to
                  their earlier, obsoleted forms: &lt;tt&gt;he&lt;/tt&gt; maps to &lt;tt&gt;iw&lt;/tt&gt;,
                  &lt;tt&gt;yi&lt;/tt&gt; maps to &lt;tt&gt;ji&lt;/tt&gt;, and &lt;tt&gt;id&lt;/tt&gt; maps to
                  &lt;tt&gt;in&lt;/tt&gt;.  This continues to be the case, in order to not break
                  backwards compatibility.
                  &lt;p&gt;The APIs added in 1.7 map between the old and new language codes,
                  maintaining the old codes internal to Locale (so that
                  &lt;code&gt;getLanguage&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; reflect the old
                  code), but using the new codes in the BCP 47 language tag APIs (so
                  that &lt;code&gt;toLanguageTag&lt;/code&gt; reflects the new one). This
                  preserves the equivalence between Locales no matter which code or
                  API is used to construct them. Java&apos;s default resource bundle
                  lookup mechanism also implements this mapping, so that resources
                  can be named using either convention, see {@link ResourceBundle.Control}.
                  &lt;h5&gt;Three-letter language/country(region) codes&lt;/h5&gt;
                  &lt;p&gt;The Locale constructors have always specified that the language
                  and the country param be two characters in length, although in
                  practice they have accepted any length.  The specification has now
                  been relaxed to allow language codes of two to eight characters and
                  country (region) codes of two to three characters, and in
                  particular, three-letter language codes and three-digit region
                  codes as specified in the IANA Language Subtag Registry.  For
                  compatibility, the implementation still does not impose a length
                  constraint.                
                <see>
                    Builder                    
                </see>
                <see>
                    ResourceBundle                    
                </see>
                <see>
                    java.text.Format                    
                </see>
                <see>
                    java.text.NumberFormat                    
                </see>
                <see>
                    java.text.Collator                    
                </see>
                <author>
                    Mark Davis                    
                </author>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="LOCALECACHE" type="Cache" line="411"/>
            <declaration name="ENGLISH" type="Locale" line="413"/>
            <javadoc line="413">
                Useful constant for language.                
            </javadoc>
            <declaration name="FRENCH" type="Locale" line="417"/>
            <javadoc line="417">
                Useful constant for language.                
            </javadoc>
            <declaration name="GERMAN" type="Locale" line="421"/>
            <javadoc line="421">
                Useful constant for language.                
            </javadoc>
            <declaration name="ITALIAN" type="Locale" line="425"/>
            <javadoc line="425">
                Useful constant for language.                
            </javadoc>
            <declaration name="JAPANESE" type="Locale" line="429"/>
            <javadoc line="429">
                Useful constant for language.                
            </javadoc>
            <declaration name="KOREAN" type="Locale" line="433"/>
            <javadoc line="433">
                Useful constant for language.                
            </javadoc>
            <declaration name="CHINESE" type="Locale" line="437"/>
            <javadoc line="437">
                Useful constant for language.                
            </javadoc>
            <declaration name="SIMPLIFIED_CHINESE" type="Locale" line="441"/>
            <javadoc line="441">
                Useful constant for language.                
            </javadoc>
            <declaration name="TRADITIONAL_CHINESE" type="Locale" line="445"/>
            <javadoc line="445">
                Useful constant for language.                
            </javadoc>
            <declaration name="FRANCE" type="Locale" line="449"/>
            <javadoc line="449">
                Useful constant for country.                
            </javadoc>
            <declaration name="GERMANY" type="Locale" line="453"/>
            <javadoc line="453">
                Useful constant for country.                
            </javadoc>
            <declaration name="ITALY" type="Locale" line="457"/>
            <javadoc line="457">
                Useful constant for country.                
            </javadoc>
            <declaration name="JAPAN" type="Locale" line="461"/>
            <javadoc line="461">
                Useful constant for country.                
            </javadoc>
            <declaration name="KOREA" type="Locale" line="465"/>
            <javadoc line="465">
                Useful constant for country.                
            </javadoc>
            <declaration name="CHINA" type="Locale" line="469"/>
            <javadoc line="469">
                Useful constant for country.                
            </javadoc>
            <declaration name="PRC" type="Locale" line="473"/>
            <javadoc line="473">
                Useful constant for country.                
            </javadoc>
            <declaration name="TAIWAN" type="Locale" line="477"/>
            <javadoc line="477">
                Useful constant for country.                
            </javadoc>
            <declaration name="UK" type="Locale" line="481"/>
            <javadoc line="481">
                Useful constant for country.                
            </javadoc>
            <declaration name="US" type="Locale" line="485"/>
            <javadoc line="485">
                Useful constant for country.                
            </javadoc>
            <declaration name="CANADA" type="Locale" line="489"/>
            <javadoc line="489">
                Useful constant for country.                
            </javadoc>
            <declaration name="CANADA_FRENCH" type="Locale" line="493"/>
            <javadoc line="493">
                Useful constant for country.                
            </javadoc>
            <declaration name="ROOT" type="Locale" line="497"/>
            <javadoc line="497">
                Useful constant for the root locale.  The root locale is the locale whose
                  language, country, and variant are empty (&quot;&quot;) strings.  This is regarded
                  as the base locale of all locales, and is used as the language/country
                  neutral locale for the locale sensitive operations.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="PRIVATE_USE_EXTENSION" type="char" line="507"/>
            <javadoc line="507">
                The key for the private use extension (&apos;x&apos;).                
                <see>
                    #getExtension(char)                    
                </see>
                <see>
                    Builder#setExtension(char,String)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="UNICODE_LOCALE_EXTENSION" type="char" line="516"/>
            <javadoc line="516">
                The key for Unicode locale extension (&apos;u&apos;).                
                <see>
                    #getExtension(char)                    
                </see>
                <see>
                    Builder#setExtension(char,String)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="525"/>
            <javadoc line="525">
                serialization ID                
            </javadoc>
            <declaration name="DISPLAY_LANGUAGE" type="int" line="529"/>
            <javadoc line="529">
                Display types for retrieving localized names from the name providers.                
            </javadoc>
            <declaration name="DISPLAY_COUNTRY" type="int" line="533"/>
            <declaration name="DISPLAY_VARIANT" type="int" line="534"/>
            <declaration name="DISPLAY_SCRIPT" type="int" line="535"/>
            <javadoc line="537">
                Private constructor used by getInstance method                
            </javadoc>
            <method name="Locale" type="constructor" line="540">
                <params>
                    <param name="baseLocale" type="BaseLocale"/>
                    <param name="extensions" type="LocaleExtensions"/>
                </params>
            </method>
            <javadoc line="545">
                Construct a locale from language, country and variant.
                  This constructor normalizes the language value to lowercase and
                  the country value to uppercase.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  &lt;ul&gt;
                  &lt;li&gt;ISO 639 is not a stable standard; some of the language codes it defines
                  (specifically &quot;iw&quot;, &quot;ji&quot;, and &quot;in&quot;) have changed.  This constructor accepts both the
                  old codes (&quot;iw&quot;, &quot;ji&quot;, and &quot;in&quot;) and the new codes (&quot;he&quot;, &quot;yi&quot;, and &quot;id&quot;), but all other
                  API on Locale will return only the OLD codes.
                  &lt;li&gt;For backward compatibility reasons, this constructor does not make
                  any syntactic checks on the input.
                  &lt;li&gt;The two cases (&quot;ja&quot;, &quot;JP&quot;, &quot;JP&quot;) and (&quot;th&quot;, &quot;TH&quot;, &quot;TH&quot;) are handled specially,
                  see &lt;a href=&quot;#special_cases_constructor&quot;&gt;Special Cases&lt;/a&gt; for more information.
                  &lt;/ul&gt;                
                <param>
                    language An ISO 639 alpha-2 or alpha-3 language code, or a language subtag
                      up to 8 characters in length.  See the <code>Locale</code> class description about
                      valid language values.                    
                </param>
                <param>
                    country An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code.
                      See the <code>Locale</code> class description about valid country values.                    
                </param>
                <param>
                    variant Any arbitrary value used to indicate a variation of a <code>Locale</code>.
                      See the <code>Locale</code> class description for the details.                    
                </param>
                <exception>
                    NullPointerException thrown if any argument is null.                    
                </exception>
            </javadoc>
            <method name="Locale" type="constructor" line="571">
                <params>
                    <param name="language" type="String"/>
                    <param name="country" type="String"/>
                    <param name="variant" type="String"/>
                </params>
                <scope line="572"/>
            </method>
            <javadoc line="579">
                Construct a locale from language and country.
                  This constructor normalizes the language value to lowercase and
                  the country value to uppercase.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  &lt;ul&gt;
                  &lt;li&gt;ISO 639 is not a stable standard; some of the language codes it defines
                  (specifically &quot;iw&quot;, &quot;ji&quot;, and &quot;in&quot;) have changed.  This constructor accepts both the
                  old codes (&quot;iw&quot;, &quot;ji&quot;, and &quot;in&quot;) and the new codes (&quot;he&quot;, &quot;yi&quot;, and &quot;id&quot;), but all other
                  API on Locale will return only the OLD codes.
                  &lt;li&gt;For backward compatibility reasons, this constructor does not make
                  any syntactic checks on the input.
                  &lt;/ul&gt;                
                <param>
                    language An ISO 639 alpha-2 or alpha-3 language code, or a language subtag
                      up to 8 characters in length.  See the <code>Locale</code> class description about
                      valid language values.                    
                </param>
                <param>
                    country An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code.
                      See the <code>Locale</code> class description about valid country values.                    
                </param>
                <exception>
                    NullPointerException thrown if either argument is null.                    
                </exception>
            </javadoc>
            <method name="Locale" type="constructor" line="601">
                <params>
                    <param name="language" type="String"/>
                    <param name="country" type="String"/>
                </params>
            </method>
            <javadoc line="605">
                Construct a locale from a language code.
                  This constructor normalizes the language value to lowercase.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  &lt;ul&gt;
                  &lt;li&gt;ISO 639 is not a stable standard; some of the language codes it defines
                  (specifically &quot;iw&quot;, &quot;ji&quot;, and &quot;in&quot;) have changed.  This constructor accepts both the
                  old codes (&quot;iw&quot;, &quot;ji&quot;, and &quot;in&quot;) and the new codes (&quot;he&quot;, &quot;yi&quot;, and &quot;id&quot;), but all other
                  API on Locale will return only the OLD codes.
                  &lt;li&gt;For backward compatibility reasons, this constructor does not make
                  any syntactic checks on the input.
                  &lt;/ul&gt;                
                <param>
                    language An ISO 639 alpha-2 or alpha-3 language code, or a language subtag
                      up to 8 characters in length.  See the <code>Locale</code> class description about
                      valid language values.                    
                </param>
                <exception>
                    NullPointerException thrown if argument is null.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Locale" type="constructor" line="625">
                <params>
                    <param name="language" type="String"/>
                </params>
            </method>
            <javadoc line="629">
                This method must be called only for creating the Locale.
                  constants due to making shortcuts.                
            </javadoc>
            <method name="createConstant" type="Locale" line="633">
                <params>
                    <param name="lang" type="String"/>
                    <param name="country" type="String"/>
                </params>
                <declaration name="base" type="BaseLocale" line="634"/>
            </method>
            <javadoc line="638">
                Returns a &lt;code&gt;Locale&lt;/code&gt; constructed from the given
                  &lt;code&gt;language&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt; and
                  &lt;code&gt;variant&lt;/code&gt;. If the same &lt;code&gt;Locale&lt;/code&gt; instance
                  is available in the cache, then that instance is
                  returned. Otherwise, a new &lt;code&gt;Locale&lt;/code&gt; instance is
                  created and cached.                
                <param>
                    language lowercase 2 to 8 language code.                    
                </param>
                <param>
                    country uppercase two-letter ISO-3166 code and numric-3 UN M.49 area code.                    
                </param>
                <param>
                    variant vendor and browser specific code. See class description.                    
                </param>
                <return>
                    the <code>Locale</code> instance requested                    
                </return>
                <exception>
                    NullPointerException if any argument is null.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="Locale" line="652">
                <params>
                    <param name="language" type="String"/>
                    <param name="country" type="String"/>
                    <param name="variant" type="String"/>
                </params>
            </method>
            <method name="getInstance" type="Locale" line="657">
                <params>
                    <param name="language" type="String"/>
                    <param name="script" type="String"/>
                    <param name="country" type="String"/>
                    <param name="variant" type="String"/>
                    <param name="extensions" type="LocaleExtensions"/>
                </params>
                <scope line="658"/>
                <scope line="662"/>
                <declaration name="baseloc" type="BaseLocale" line="666"/>
            </method>
            <method name="getInstance" type="Locale" line="670">
                <params>
                    <param name="baseloc" type="BaseLocale"/>
                    <param name="extensions" type="LocaleExtensions"/>
                </params>
                <declaration name="key" type="LocaleKey" line="671"/>
            </method>
            <class name="Cache" line="675">
                <extends class="LocaleObjectCache">
                    <type_params>
                        <type_param name="LocaleKey"/>
                        <type_param name="Locale"/>
                    </type_params>
                </extends>
                <method name="Cache" type="constructor" line="676"/>
                <method name="createObject" type="Locale" line="680">
                    <params>
                        <param name="key" type="LocaleKey"/>
                    </params>
                </method>
            </class>
            <class name="LocaleKey" line="685">
                <declaration name="base" type="BaseLocale" line="686"/>
                <declaration name="exts" type="LocaleExtensions" line="687"/>
                <declaration name="hash" type="int" line="688"/>
                <method name="LocaleKey" type="constructor" line="690">
                    <params>
                        <param name="baseLocale" type="BaseLocale"/>
                        <param name="extensions" type="LocaleExtensions"/>
                    </params>
                    <comment line="694">
                        Calculate the hash value here because it&apos;s always used.                        
                    </comment>
                    <declaration name="h" type="int" line="695"/>
                    <scope line="696"/>
                </method>
                <method name="equals" type="boolean" line="703">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="704"/>
                    <scope line="707"/>
                    <declaration name="other" type="LocaleKey" line="710"/>
                    <scope line="711"/>
                    <scope line="714"/>
                </method>
                <method name="hashCode" type="int" line="721"/>
            </class>
            <javadoc line="726">
                Gets the current value of the default locale for this instance
                  of the Java Virtual Machine.
                  &lt;p&gt;
                  The Java Virtual Machine sets the default locale during startup
                  based on the host environment. It is used by many locale-sensitive
                  methods if no locale is explicitly specified.
                  It can be changed using the{@link #setDefault(java.util.Locale) setDefault} method.                
                <return>
                    the default locale for this instance of the Java Virtual Machine                    
                </return>
            </javadoc>
            <method name="getDefault" type="Locale" line="738">
                <comment line="739">
                    do not synchronize this method - see 4071298                    
                </comment>
                <comment line="740">
                    it&apos;s OK if more than one default locale happens to be created                    
                </comment>
                <scope line="741"/>
            </method>
            <javadoc line="747">
                Gets the current value of the default locale for the specified Category
                  for this instance of the Java Virtual Machine.
                  &lt;p&gt;
                  The Java Virtual Machine sets the default locale during startup based
                  on the host environment. It is used by many locale-sensitive methods
                  if no locale is explicitly specified. It can be changed using the
                  setDefault(Locale.Category, Locale) method.                
                <param>
                    category - the specified category to get the default locale                    
                </param>
                <throws>
                    NullPointerException - if category is null                    
                </throws>
                <return>
                    the default locale for the specified Category for this instance
                      of the Java Virtual Machine                    
                </return>
                <see>
                    #setDefault(Locale.Category,Locale)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getDefault" type="Locale" line="763">
                <params>
                    <param name="category" type="Locale.Category"/>
                </params>
                <comment line="764">
                    do not synchronize this method - see 4071298                    
                </comment>
                <comment line="765">
                    it&apos;s OK if more than one default locale happens to be created                    
                </comment>
                <scope line="768"/>
                <scope line="773"/>
            </method>
            <method name="initDefault" type="void" line="783">
                <comment line="787">
                    for compatibility, check for old user.region property                    
                </comment>
                <comment line="791">
                    region can be of form country, country_variant, or _variant                    
                </comment>
                <declaration name="language" type="String" line="784"/>
                <scope line="790">
                    <declaration name="i" type="int" line="792"/>
                    <scope line="793"/>
                    <scope line="796"/>
                </scope>
                <scope line="801"/>
            </method>
            <method name="initDefault" type="void" line="812">
                <params>
                    <param name="category" type="Locale.Category"/>
                </params>
                <comment line="813">
                    make sure defaultLocale is initialized                    
                </comment>
                <scope line="814"/>
                <declaration name="defaultCategoryLocale" type="Locale" line="818"/>
            </method>
            <javadoc line="839">
                Sets the default locale for this instance of the Java Virtual Machine.
                  This does not affect the host locale.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a &lt;code&gt;PropertyPermission(&quot;user.language&quot;, &quot;write&quot;)&lt;/code&gt;
                  permission before the default locale is changed.
                  &lt;p&gt;
                  The Java Virtual Machine sets the default locale during startup
                  based on the host environment. It is used by many locale-sensitive
                  methods if no locale is explicitly specified.
                  &lt;p&gt;
                  Since changing the default locale may affect many different areas
                  of functionality, this method should only be used if the caller
                  is prepared to reinitialize locale-sensitive code running
                  within the same Java Virtual Machine.
                  &lt;p&gt;
                  By setting the default locale with this method, all of the default
                  locales for each Category are also set to the specified default locale.                
                <throws>
                    SecurityExceptionif a security manager exists and its
                      <code>checkPermission</code> method doesn't allow the operation.                    
                </throws>
                <throws>
                    NullPointerException if <code>newLocale</code> is null                    
                </throws>
                <param>
                    newLocale the new default locale                    
                </param>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.util.PropertyPermission                    
                </see>
            </javadoc>
            <method name="setDefault" type="void" line="867">
                <params>
                    <param name="newLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="873">
                Sets the default locale for the specified Category for this instance
                  of the Java Virtual Machine. This does not affect the host locale.
                  &lt;p&gt;
                  If there is a security manager, its checkPermission method is called
                  with a PropertyPermission(&quot;user.language&quot;, &quot;write&quot;) permission before
                  the default locale is changed.
                  &lt;p&gt;
                  The Java Virtual Machine sets the default locale during startup based
                  on the host environment. It is used by many locale-sensitive methods
                  if no locale is explicitly specified.
                  &lt;p&gt;
                  Since changing the default locale may affect many different areas of
                  functionality, this method should only be used if the caller is
                  prepared to reinitialize locale-sensitive code running within the
                  same Java Virtual Machine.
                  &lt;p&gt;                
                <param>
                    category - the specified category to set the default locale                    
                </param>
                <param>
                    newLocale - the new default locale                    
                </param>
                <throws>
                    SecurityException - if a security manager exists and its
                      checkPermission method doesn't allow the operation.                    
                </throws>
                <throws>
                    NullPointerException - if category and/or newLocale is null                    
                </throws>
                <see>
                    SecurityManager#checkPermission(java.security.Permission)                    
                </see>
                <see>
                    PropertyPermission                    
                </see>
                <see>
                    #getDefault(Locale.Category)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setDefault" type="void" line="902">
                <params>
                    <param name="category" type="Locale.Category"/>
                    <param name="newLocale" type="Locale"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="908"/>
            </method>
            <javadoc line="923">
                Returns an array of all installed locales.
                  The returned array represents the union of locales supported
                  by the Java runtime environment and by installed{@link java.util.spi.LocaleServiceProvider LocaleServiceProvider}implementations.  It must contain at least a &lt;code&gt;Locale&lt;/code&gt;
                  instance equal to {@link java.util.Locale#US Locale.US}.                
                <return>
                    An array of installed locales.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="933"/>
            <javadoc line="937">
                Returns a list of all 2-letter country codes defined in ISO 3166.
                  Can be used to create Locales.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;Locale&lt;/code&gt; class also supports other codes for
                  country (region), such as 3-letter numeric UN M.49 area codes.
                  Therefore, the list returned by this method does not contain ALL valid
                  codes that can be used to create Locales.                
            </javadoc>
            <method name="getISOCountries" type="String[]" line="946">
                <scope line="947"/>
                <declaration name="result" type="String[]" line="950"/>
            </method>
            <javadoc line="955">
                Returns a list of all 2-letter language codes defined in ISO 639.
                  Can be used to create Locales.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  &lt;ul&gt;
                  &lt;li&gt;ISO 639 is not a stable standard&amp;mdash; some languages&apos; codes have changed.
                  The list this function returns includes both the new and the old codes for the
                  languages whose codes have changed.
                  &lt;li&gt;The &lt;code&gt;Locale&lt;/code&gt; class also supports language codes up to
                  8 characters in length.  Therefore, the list returned by this method does
                  not contain ALL valid codes that can be used to create Locales.
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getISOLanguages" type="String[]" line="969">
                <scope line="970"/>
                <declaration name="result" type="String[]" line="973"/>
            </method>
            <method name="getISO2Table" type="String[]" line="978">
                <params>
                    <param name="table" type="String"/>
                </params>
                <declaration name="len" type="int" line="979"/>
                <declaration name="isoTable" type="String[]" line="980"/>
                <scope line="981"/>
            </method>
            <javadoc line="987">
                Returns the language code of this Locale.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; ISO 639 is not a stable standard&amp;mdash; some languages&apos; codes have changed.
                  Locale&apos;s constructor recognizes both the new and the old codes for the languages
                  whose codes have changed, but this function always returns the old code.  If you
                  want to check for a specific language whose code has changed, don&apos;t do
                  &lt;pre&gt;
                  if (locale.getLanguage().equals(&quot;he&quot;)) // BAD!
                  ...
                  &lt;/pre&gt;
                  Instead, do
                  &lt;pre&gt;
                  if (locale.getLanguage().equals(new Locale(&quot;he&quot;).getLanguage()))
                  ...
                  &lt;/pre&gt;                
                <return>
                    The language code, or the empty string if none is defined.                    
                </return>
                <see>
                    #getDisplayLanguage                    
                </see>
            </javadoc>
            <method name="getLanguage" type="String" line="1006"/>
            <javadoc line="1010">
                Returns the script for this locale, which should
                  either be the empty string or an ISO 15924 4-letter script
                  code. The first letter is uppercase and the rest are
                  lowercase, for example, &apos;Latn&apos;, &apos;Cyrl&apos;.                
                <return>
                    The script code, or the empty string if none is defined.                    
                </return>
                <see>
                    #getDisplayScript                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getScript" type="String" line="1020"/>
            <javadoc line="1024">
                Returns the country/region code for this locale, which should
                  either be the empty string, an uppercase ISO 3166 2-letter code,
                  or a UN M.49 3-digit code.                
                <return>
                    The country/region code, or the empty string if none is defined.                    
                </return>
                <see>
                    #getDisplayCountry                    
                </see>
            </javadoc>
            <method name="getCountry" type="String" line="1032"/>
            <javadoc line="1036">
                Returns the variant code for this locale.                
                <return>
                    The variant code, or the empty string if none is defined.                    
                </return>
                <see>
                    #getDisplayVariant                    
                </see>
            </javadoc>
            <method name="getVariant" type="String" line="1042"/>
            <javadoc line="1046">
                Returns the extension (or private use) value associated with
                  the specified key, or null if there is no extension
                  associated with the key. To be well-formed, the key must be one
                  of &lt;code&gt;[0-9A-Za-z]&lt;/code&gt;. Keys are case-insensitive, so
                  for example &apos;z&apos; and &apos;Z&apos; represent the same extension.                
                <param>
                    key the extension key                    
                </param>
                <return>
                    The extension, or null if this locale defines no
                      extension for the specified key.                    
                </return>
                <throws>
                    IllegalArgumentException if key is not well-formed                    
                </throws>
                <see>
                    #PRIVATE_USE_EXTENSION                    
                </see>
                <see>
                    #UNICODE_LOCALE_EXTENSION                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getExtension" type="String" line="1061">
                <params>
                    <param name="key" type="char"/>
                </params>
                <scope line="1062"/>
            </method>
            <javadoc line="1068">
                Returns the set of extension keys associated with this locale, or the
                  empty set if it has no extensions. The returned set is unmodifiable.
                  The keys will all be lower-case.                
                <return>
                    The set of extension keys, or the empty set if this locale has
                      no extensions.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getExtensionKeys" type="Set<Character>" line="1077">
                <scope line="1078"/>
            </method>
            <javadoc line="1084">
                Returns the set of unicode locale attributes associated with
                  this locale, or the empty set if it has no attributes. The
                  returned set is unmodifiable.                
                <return>
                    The set of attributes.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getUnicodeLocaleAttributes" type="Set<String>" line="1092">
                <scope line="1093"/>
            </method>
            <javadoc line="1099">
                Returns the Unicode locale type associated with the specified Unicode locale key
                  for this locale. Returns the empty string for keys that are defined with no type.
                  Returns null if the key is not defined. Keys are case-insensitive. The key must
                  be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is
                  thrown.                
                <param>
                    key the Unicode locale key                    
                </param>
                <return>
                    The Unicode locale type associated with the key, or null if the
                      locale does not define the key.                    
                </return>
                <throws>
                    IllegalArgumentException if the key is not well-formed                    
                </throws>
                <throws>
                    NullPointerException if <code>key</code> is null                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getUnicodeLocaleType" type="String" line="1113">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="1114"/>
            </method>
            <javadoc line="1120">
                Returns the set of Unicode locale keys defined by this locale, or the empty set if
                  this locale has none.  The returned set is immutable.  Keys are all lower case.                
                <return>
                    The set of Unicode locale keys, or the empty set if this locale has
                      no Unicode locale keywords.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getUnicodeLocaleKeys" type="Set<String>" line="1128">
                <scope line="1129"/>
            </method>
            <javadoc line="1135">
                Package locale method returning the Locale&apos;s BaseLocale,
                  used by ResourceBundle                
                <return>
                    base locale of this Locale                    
                </return>
            </javadoc>
            <method name="getBaseLocale" type="BaseLocale" line="1140"/>
            <javadoc line="1144">
                Package private method returning the Locale&apos;s LocaleExtensions,
                  used by ResourceBundle.                
                <return>
                    locale exnteions of this Locale,
                      or {@code null} if no extensions are defined                    
                </return>
            </javadoc>
            <method name="getLocaleExtensions" type="LocaleExtensions" line="1150"/>
            <javadoc line="1154">
                Returns a string representation of this &lt;code&gt;Locale&lt;/code&gt;
                  object, consisting of language, country, variant, script,
                  and extensions as below:
                  &lt;p&gt;&lt;blockquote&gt;
                  language + &quot;_&quot; + country + &quot;_&quot; + (variant + &quot;_#&quot; | &quot;#&quot;) + script + &quot;-&quot; + extensions
                  &lt;/blockquote&gt;
                  Language is always lower case, country is always upper case, script is always title
                  case, and extensions are always lower case.  Extensions and private use subtags
                  will be in canonical order as explained in {@link #toLanguageTag}.
                  &lt;p&gt;When the locale has neither script nor extensions, the result is the same as in
                  Java 6 and prior.
                  &lt;p&gt;If both the language and country fields are missing, this function will return
                  the empty string, even if the variant, script, or extensions field is present (you
                  can&apos;t have a locale with just a variant, the variant must accompany a well-formed
                  language or country code).
                  &lt;p&gt;If script or extensions are present and variant is missing, no underscore is
                  added before the &quot;#&quot;.
                  &lt;p&gt;This behavior is designed to support debugging and to be compatible with
                  previous uses of &lt;code&gt;toString&lt;/code&gt; that expected language, country, and variant
                  fields only.  To represent a Locale as a String for interchange purposes, use{@link #toLanguageTag}.
                  &lt;p&gt;Examples: &lt;ul&gt;&lt;tt&gt;
                  &lt;li&gt;en
                  &lt;li&gt;de_DE
                  &lt;li&gt;_GB
                  &lt;li&gt;en_US_WIN
                  &lt;li&gt;de__POSIX
                  &lt;li&gt;zh_CN_#Hans
                  &lt;li&gt;zh_TW_#Hant-x-java
                  &lt;li&gt;th_TH_TH_#u-nu-thai&lt;/tt&gt;&lt;/ul&gt;                
                <return>
                    A string representation of the Locale, for debugging.                    
                </return>
                <see>
                    #getDisplayName                    
                </see>
                <see>
                    #toLanguageTag                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="1197">
                <comment line="1207">
                    This may just append &apos;_&apos;                    
                </comment>
                <declaration name="l" type="boolean" line="1198"/>
                <declaration name="s" type="boolean" line="1199"/>
                <declaration name="r" type="boolean" line="1200"/>
                <declaration name="v" type="boolean" line="1201"/>
                <declaration name="e" type="boolean" line="1202"/>
                <declaration name="result" type="StringBuilder" line="1204"/>
                <scope line="1205"/>
                <scope line="1209"/>
                <scope line="1214"/>
                <scope line="1219">
                    <scope line="1221"/>
                </scope>
            </method>
            <javadoc line="1230">
                Returns a well-formed IETF BCP 47 language tag representing
                  this locale.
                  &lt;p&gt;If this &lt;code&gt;Locale&lt;/code&gt; has a language, country, or
                  variant that does not satisfy the IETF BCP 47 language tag
                  syntax requirements, this method handles these fields as
                  described below:
                  &lt;p&gt;&lt;b&gt;Language:&lt;/b&gt; If language is empty, or not &lt;a
                  href=&quot;#def_language&quot; &gt;well-formed&lt;/a&gt; (for example &quot;a&quot; or
                  &quot;e2&quot;), it will be emitted as &quot;und&quot; (Undetermined).
                  &lt;p&gt;&lt;b&gt;Country:&lt;/b&gt; If country is not &lt;a
                  href=&quot;#def_region&quot;&gt;well-formed&lt;/a&gt; (for example &quot;12&quot; or &quot;USA&quot;),
                  it will be omitted.
                  &lt;p&gt;&lt;b&gt;Variant:&lt;/b&gt; If variant &lt;b&gt;is&lt;/b&gt; &lt;a
                  href=&quot;#def_variant&quot;&gt;well-formed&lt;/a&gt;, each sub-segment
                  (delimited by &apos;-&apos; or &apos;_&apos;) is emitted as a subtag.  Otherwise:
                  &lt;ul&gt;
                  &lt;li&gt;if all sub-segments match &lt;code&gt;[0-9a-zA-Z]{1,8}&lt;/code&gt;
                  (for example &quot;WIN&quot; or &quot;Oracle_JDK_Standard_Edition&quot;), the first
                  ill-formed sub-segment and all following will be appended to
                  the private use subtag.  The first appended subtag will be
                  &quot;lvariant&quot;, followed by the sub-segments in order, separated by
                  hyphen. For example, &quot;x-lvariant-WIN&quot;,
                  &quot;Oracle-x-lvariant-JDK-Standard-Edition&quot;.
                  &lt;li&gt;if any sub-segment does not match
                  &lt;code&gt;[0-9a-zA-Z]{1,8}&lt;/code&gt;, the variant will be truncated
                  and the problematic sub-segment and all following sub-segments
                  will be omitted.  If the remainder is non-empty, it will be
                  emitted as a private use subtag as above (even if the remainder
                  turns out to be well-formed).  For example,
                  &quot;Solaris_isjustthecoolestthing&quot; is emitted as
                  &quot;x-lvariant-Solaris&quot;, not as &quot;solaris&quot;.&lt;/li&gt;&lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Special Conversions:&lt;/b&gt; Java supports some old locale
                  representations, including deprecated ISO language codes,
                  for compatibility. This method performs the following
                  conversions:
                  &lt;ul&gt;
                  &lt;li&gt;Deprecated ISO language codes &quot;iw&quot;, &quot;ji&quot;, and &quot;in&quot; are
                  converted to &quot;he&quot;, &quot;yi&quot;, and &quot;id&quot;, respectively.
                  &lt;li&gt;A locale with language &quot;no&quot;, country &quot;NO&quot;, and variant
                  &quot;NY&quot;, representing Norwegian Nynorsk (Norway), is converted
                  to a language tag &quot;nn-NO&quot;.&lt;/li&gt;&lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Although the language tag created by this
                  method is well-formed (satisfies the syntax requirements
                  defined by the IETF BCP 47 specification), it is not
                  necessarily a valid BCP 47 language tag.  For example,
                  &lt;pre&gt;
                  new Locale(&quot;xx&quot;, &quot;YY&quot;).toLanguageTag();&lt;/pre&gt;
                  will return &quot;xx-YY&quot;, but the language subtag &quot;xx&quot; and the
                  region subtag &quot;YY&quot; are invalid because they are not registered
                  in the IANA Language Subtag Registry.                
                <return>
                    a BCP47 language tag representing the locale                    
                </return>
                <see>
                    #forLanguageTag(String)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="toLanguageTag" type="String" line="1297">
                <comment line="1321">
                    preserve casing                    
                </comment>
                <comment line="1337">
                    preserve casing                    
                </comment>
                <declaration name="tag" type="LanguageTag" line="1298"/>
                <declaration name="buf" type="StringBuilder" line="1299"/>
                <declaration name="subtag" type="String" line="1301"/>
                <scope line="1302"/>
                <scope line="1307"/>
                <scope line="1313"/>
                <declaration name="subtags" type="List&lt;String&gt;" line="1318"/>
                <scope line="1319"/>
                <scope line="1326"/>
                <scope line="1332">
                    <scope line="1333"/>
                </scope>
            </method>
            <javadoc line="1344">
                Returns a locale for the specified IETF BCP 47 language tag string.
                  &lt;p&gt;If the specified language tag contains any ill-formed subtags,
                  the first such subtag and all following subtags are ignored.  Compare
                  to {@link Locale.Builder#setLanguageTag} which throws an exception
                  in this case.
                  &lt;p&gt;The following &lt;b&gt;conversions&lt;/b&gt; are performed:&lt;ul&gt;
                  &lt;li&gt;The language code &quot;und&quot; is mapped to language &quot;&quot;.
                  &lt;li&gt;The language codes &quot;he&quot;, &quot;yi&quot;, and &quot;id&quot; are mapped to &quot;iw&quot;,
                  &quot;ji&quot;, and &quot;in&quot; respectively. (This is the same canonicalization
                  that&apos;s done in Locale&apos;s constructors.)
                  &lt;li&gt;The portion of a private use subtag prefixed by &quot;lvariant&quot;,
                  if any, is removed and appended to the variant field in the
                  result locale (without case normalization).  If it is then
                  empty, the private use subtag is discarded:
                  &lt;pre&gt;
                  Locale loc;
                  loc = Locale.forLanguageTag(&quot;en-US-x-lvariant-POSIX&quot;);
                  loc.getVariant(); // returns &quot;POSIX&quot;
                  loc.getExtension(&apos;x&apos;); // returns null
                  loc = Locale.forLanguageTag(&quot;de-POSIX-x-URP-lvariant-Abc-Def&quot;);
                  loc.getVariant(); // returns &quot;POSIX_Abc_Def&quot;
                  loc.getExtension(&apos;x&apos;); // returns &quot;urp&quot;
                  &lt;/pre&gt;
                  &lt;li&gt;When the languageTag argument contains an extlang subtag,
                  the first such subtag is used as the language, and the primary
                  language subtag and other extlang subtags are ignored:
                  &lt;pre&gt;
                  Locale.forLanguageTag(&quot;ar-aao&quot;).getLanguage(); // returns &quot;aao&quot;
                  Locale.forLanguageTag(&quot;en-abc-def-us&quot;).toString(); // returns &quot;abc_US&quot;
                  &lt;/pre&gt;
                  &lt;li&gt;Case is normalized except for variant tags, which are left
                  unchanged.  Language is normalized to lower case, script to
                  title case, country to upper case, and extensions to lower
                  case.
                  &lt;li&gt;If, after processing, the locale would exactly match either
                  ja_JP_JP or th_TH_TH with no extensions, the appropriate
                  extensions are added as though the constructor had been called:
                  &lt;pre&gt;
                  Locale.forLanguageTag(&quot;ja-JP-x-lvariant-JP&quot;).toLanguageTag();
                  // returns &quot;ja-JP-u-ca-japanese-x-lvariant-JP&quot;
                  Locale.forLanguageTag(&quot;th-TH-x-lvariant-TH&quot;).toLanguageTag();
                  // returns &quot;th-TH-u-nu-thai-x-lvariant-TH&quot;
                  &lt;pre&gt;&lt;/ul&gt;
                  &lt;p&gt;This implements the &apos;Language-Tag&apos; production of BCP47, and
                  so supports grandfathered (regular and irregular) as well as
                  private use language tags.  Stand alone private use tags are
                  represented as empty language and extension &apos;x-whatever&apos;,
                  and grandfathered tags are converted to their canonical replacements
                  where they exist.
                  &lt;p&gt;Grandfathered tags with canonical replacements are as follows:
                  &lt;table&gt;
                  &lt;tbody align=&quot;center&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;grandfathered tag&lt;/th&gt;&lt;th&gt;&amp;nbsp;&lt;/th&gt;&lt;th&gt;modern replacement&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;art-lojban&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;jbo&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-ami&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;ami&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-bnn&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;bnn&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-hak&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;hak&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-klingon&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;tlh&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-lux&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;lb&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-navajo&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;nv&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-pwn&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;pwn&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-tao&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;tao&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-tay&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;tay&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-tsu&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;tsu&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;no-bok&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;nb&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;no-nyn&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;nn&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;sgn-BE-FR&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;sfb&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;sgn-BE-NL&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;vgt&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;sgn-CH-DE&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;sgg&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;zh-guoyu&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;cmn&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;zh-hakka&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;hak&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;zh-min-nan&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;nan&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;zh-xiang&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;hsn&lt;/td&gt;&lt;/tr&gt;
                  &lt;/tbody&gt;
                  &lt;/table&gt;
                  &lt;p&gt;Grandfathered tags with no modern replacement will be
                  converted as follows:
                  &lt;table&gt;
                  &lt;tbody align=&quot;center&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;grandfathered tag&lt;/th&gt;&lt;th&gt;&amp;nbsp;&lt;/th&gt;&lt;th&gt;converts to&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;cel-gaulish&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;xtg-x-cel-gaulish&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;en-GB-oed&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;en-GB-x-oed&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-default&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;en-x-i-default&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-enochian&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;und-x-i-enochian&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;i-mingo&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;see-x-i-mingo&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;zh-min&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;nan-x-zh-min&lt;/td&gt;&lt;/tr&gt;
                  &lt;/tbody&gt;
                  &lt;/table&gt;
                  &lt;p&gt;For a list of all grandfathered tags, see the
                  IANA Language Subtag Registry (search for &quot;Type: grandfathered&quot;).
                  &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: there is no guarantee that &lt;code&gt;toLanguageTag&lt;/code&gt;
                  and &lt;code&gt;forLanguageTag&lt;/code&gt; will round-trip.                
                <param>
                    languageTag the language tag                    
                </param>
                <return>
                    The locale that best represents the language tag.                    
                </return>
                <throws>
                    NullPointerException if <code>languageTag</code> is <code>null</code>                    
                </throws>
                <see>
                    #toLanguageTag()                    
                </see>
                <see>
                    java.util.Locale.Builder#setLanguageTag(String)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="forLanguageTag" type="Locale" line="1464">
                <params>
                    <param name="languageTag" type="String"/>
                </params>
                <declaration name="tag" type="LanguageTag" line="1465"/>
                <declaration name="bldr" type="InternalLocaleBuilder" line="1466"/>
                <declaration name="base" type="BaseLocale" line="1468"/>
                <declaration name="exts" type="LocaleExtensions" line="1469"/>
                <scope line="1470"/>
            </method>
            <javadoc line="1477">
                Returns a three-letter abbreviation of this locale&apos;s language.
                  If the language matches an ISO 639-1 two-letter code, the
                  corresponding ISO 639-2/T three-letter lowercase code is
                  returned.  The ISO 639-2 language codes can be found on-line,
                  see &quot;Codes for the Representation of Names of Languages Part 2:
                  Alpha-3 Code&quot;.  If the locale specifies a three-letter
                  language, the language is returned as is.  If the locale does
                  not specify a language the empty string is returned.                
                <return>
                    A three-letter abbreviation of this locale's language.                    
                </return>
                <exception>
                    MissingResourceException Throws MissingResourceException if
                      three-letter language abbreviation is not available for this locale.                    
                </exception>
            </javadoc>
            <method name="getISO3Language" type="String" line="1491">
                <declaration name="lang" type="String" line="1492"/>
                <scope line="1493"/>
                <declaration name="language3" type="String" line="1497"/>
                <scope line="1498"/>
            </method>
            <javadoc line="1505">
                Returns a three-letter abbreviation for this locale&apos;s country.
                  If the country matches an ISO 3166-1 alpha-2 code, the
                  corresponding ISO 3166-1 alpha-3 uppercase code is returned.
                  If the locale doesn&apos;t specify a country, this will be the empty
                  string.
                  &lt;p&gt;The ISO 3166-1 codes can be found on-line.                
                <return>
                    A three-letter abbreviation of this locale's country.                    
                </return>
                <exception>
                    MissingResourceException Throws MissingResourceException if the
                      three-letter country abbreviation is not available for this locale.                    
                </exception>
            </javadoc>
            <method name="getISO3Country" type="String" line="1518">
                <declaration name="country3" type="String" line="1519"/>
                <scope line="1520"/>
            </method>
            <method name="getISO3Code" type="String" line="1527">
                <params>
                    <param name="iso2Code" type="String"/>
                    <param name="table" type="String"/>
                </params>
                <declaration name="codeLength" type="int" line="1528"/>
                <scope line="1529"/>
                <declaration name="tableLength" type="int" line="1533"/>
                <declaration name="index" type="int" line="1534"/>
                <scope line="1535">
                    <declaration name="c1" type="char" line="1536"/>
                    <declaration name="c2" type="char" line="1537"/>
                    <scope line="1538">
                        <scope line="1540"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1548">
                Returns a name for the locale&apos;s language that is appropriate for display to the
                  user.
                  If possible, the name returned will be localized for the default locale.
                  For example, if the locale is fr_FR and the default locale
                  is en_US, getDisplayLanguage() will return &quot;French&quot;; if the locale is en_US and
                  the default locale is fr_FR, getDisplayLanguage() will return &quot;anglais&quot;.
                  If the name returned cannot be localized for the default locale,
                  (say, we don&apos;t have a Japanese name for Croatian),
                  this function falls back on the English name, and uses the ISO code as a last-resort
                  value.  If the locale doesn&apos;t specify a language, this function returns the empty string.                
            </javadoc>
            <method name="getDisplayLanguage" type="String" line="1560"/>
            <javadoc line="1564">
                Returns a name for the locale&apos;s language that is appropriate for display to the
                  user.
                  If possible, the name returned will be localized according to inLocale.
                  For example, if the locale is fr_FR and inLocale
                  is en_US, getDisplayLanguage() will return &quot;French&quot;; if the locale is en_US and
                  inLocale is fr_FR, getDisplayLanguage() will return &quot;anglais&quot;.
                  If the name returned cannot be localized according to inLocale,
                  (say, we don&apos;t have a Japanese name for Croatian),
                  this function falls back on the English name, and finally
                  on the ISO code as a last-resort value.  If the locale doesn&apos;t specify a language,
                  this function returns the empty string.                
                <exception>
                    NullPointerException if <code>inLocale</code> is <code>null</code>                    
                </exception>
            </javadoc>
            <method name="getDisplayLanguage" type="String" line="1579">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="1583">
                Returns a name for the the locale&apos;s script that is appropriate for display to
                  the user. If possible, the name will be localized for the default locale.  Returns
                  the empty string if this locale doesn&apos;t specify a script code.                
                <return>
                    the display name of the script code for the current default locale                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getDisplayScript" type="String" line="1591"/>
            <javadoc line="1595">
                Returns a name for the locale&apos;s script that is appropriate
                  for display to the user. If possible, the name will be
                  localized for the given locale. Returns the empty string if
                  this locale doesn&apos;t specify a script code.                
                <return>
                    the display name of the script code for the current default locale                    
                </return>
                <throws>
                    NullPointerException if <code>inLocale</code> is <code>null</code>                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getDisplayScript" type="String" line="1605">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="1609">
                Returns a name for the locale&apos;s country that is appropriate for display to the
                  user.
                  If possible, the name returned will be localized for the default locale.
                  For example, if the locale is fr_FR and the default locale
                  is en_US, getDisplayCountry() will return &quot;France&quot;; if the locale is en_US and
                  the default locale is fr_FR, getDisplayCountry() will return &quot;Etats-Unis&quot;.
                  If the name returned cannot be localized for the default locale,
                  (say, we don&apos;t have a Japanese name for Croatia),
                  this function falls back on the English name, and uses the ISO code as a last-resort
                  value.  If the locale doesn&apos;t specify a country, this function returns the empty string.                
            </javadoc>
            <method name="getDisplayCountry" type="String" line="1621"/>
            <javadoc line="1625">
                Returns a name for the locale&apos;s country that is appropriate for display to the
                  user.
                  If possible, the name returned will be localized according to inLocale.
                  For example, if the locale is fr_FR and inLocale
                  is en_US, getDisplayCountry() will return &quot;France&quot;; if the locale is en_US and
                  inLocale is fr_FR, getDisplayCountry() will return &quot;Etats-Unis&quot;.
                  If the name returned cannot be localized according to inLocale.
                  (say, we don&apos;t have a Japanese name for Croatia),
                  this function falls back on the English name, and finally
                  on the ISO code as a last-resort value.  If the locale doesn&apos;t specify a country,
                  this function returns the empty string.                
                <exception>
                    NullPointerException if <code>inLocale</code> is <code>null</code>                    
                </exception>
            </javadoc>
            <method name="getDisplayCountry" type="String" line="1640">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <method name="getDisplayString" type="String" line="1644">
                <params>
                    <param name="code" type="String"/>
                    <param name="inLocale" type="Locale"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="1658">
                    Check whether a provider can provide an implementation that&apos;s closer                    
                </comment>
                <comment line="1659">
                    to the requested locale than what the Java runtime itself can provide.                    
                </comment>
                <comment line="1678">
                    just fall through                    
                </comment>
                <scope line="1645"/>
                <scope line="1649"/>
                <scope line="1653">
                    <declaration name="bundle" type="OpenListResourceBundle" line="1654"/>
                    <declaration name="key" type="String" line="1655"/>
                    <declaration name="result" type="String" line="1656"/>
                    <declaration name="pool" type="LocaleServiceProviderPool" line="1660"/>
                    <scope line="1662"/>
                    <scope line="1669"/>
                    <scope line="1673"/>
                </scope>
                <scope line="1677"/>
            </method>
            <javadoc line="1683">
                Returns a name for the locale&apos;s variant code that is appropriate for display to the
                  user.  If possible, the name will be localized for the default locale.  If the locale
                  doesn&apos;t specify a variant code, this function returns the empty string.                
            </javadoc>
            <method name="getDisplayVariant" type="String" line="1688"/>
            <javadoc line="1692">
                Returns a name for the locale&apos;s variant code that is appropriate for display to the
                  user.  If possible, the name will be localized for inLocale.  If the locale
                  doesn&apos;t specify a variant code, this function returns the empty string.                
                <exception>
                    NullPointerException if <code>inLocale</code> is <code>null</code>                    
                </exception>
            </javadoc>
            <method name="getDisplayVariant" type="String" line="1699">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
                <comment line="1707">
                    Get the localized patterns for formatting a list, and use                    
                </comment>
                <comment line="1708">
                    them to format the list.                    
                </comment>
                <declaration name="bundle" type="OpenListResourceBundle" line="1703"/>
                <declaration name="names" type="String" line="1705"/>
                <declaration name="listPattern" type="String" line="1709"/>
                <declaration name="listCompositionPattern" type="String" line="1710"/>
                <scope line="1711"/>
                <scope line="1714"/>
            </method>
            <javadoc line="1719">
                Returns a name for the locale that is appropriate for display to the
                  user. This will be the values returned by getDisplayLanguage(),
                  getDisplayScript(), getDisplayCountry(), and getDisplayVariant() assembled
                  into a single string. The the non-empty values are used in order,
                  with the second and subsequent names in parentheses.  For example:
                  &lt;blockquote&gt;
                  language (script, country, variant)&lt;br&gt;
                  language (country)&lt;br&gt;
                  language (variant)&lt;br&gt;
                  script (country)&lt;br&gt;
                  country&lt;br&gt;
                  &lt;/blockquote&gt;
                  depending on which fields are specified in the locale.  If the
                  language, sacript, country, and variant fields are all empty,
                  this function returns the empty string.                
            </javadoc>
            <method name="getDisplayName" type="String" line="1736"/>
            <javadoc line="1740">
                Returns a name for the locale that is appropriate for display
                  to the user.  This will be the values returned by
                  getDisplayLanguage(), getDisplayScript(),getDisplayCountry(),
                  and getDisplayVariant() assembled into a single string.
                  The non-empty values are used in order,
                  with the second and subsequent names in parentheses.  For example:
                  &lt;blockquote&gt;
                  language (script, country, variant)&lt;br&gt;
                  language (country)&lt;br&gt;
                  language (variant)&lt;br&gt;
                  script (country)&lt;br&gt;
                  country&lt;br&gt;
                  &lt;/blockquote&gt;
                  depending on which fields are specified in the locale.  If the
                  language, script, country, and variant fields are all empty,
                  this function returns the empty string.                
                <throws>
                    NullPointerException if <code>inLocale</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="getDisplayName" type="String" line="1760">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
                <comment line="1768">
                    Get the localized patterns for formatting a display name.                    
                </comment>
                <comment line="1779">
                    The display name consists of a main name, followed by qualifiers.                    
                </comment>
                <comment line="1780">
                    Typically, the format is &quot;MainName (Qualifier, Qualifier)&quot; but this                    
                </comment>
                <comment line="1781">
                    depends on what pattern is stored in the display locale.                    
                </comment>
                <comment line="1785">
                    The main name is the language, or if there is no language, the script,                    
                </comment>
                <comment line="1786">
                    then if no script, the country. If there is no language/script/country                    
                </comment>
                <comment line="1787">
                    (an anomalous situation) then the display name is simply the variant&apos;s                    
                </comment>
                <comment line="1788">
                    display name.                    
                </comment>
                <comment line="1812">
                    The first one in the main name                    
                </comment>
                <comment line="1815">
                    Others are qualifiers                    
                </comment>
                <comment line="1820">
                    Create an array whose first element is the number of remaining                    
                </comment>
                <comment line="1821">
                    elements.  This serves as a selector into a ChoiceFormat pattern from                    
                </comment>
                <comment line="1822">
                    the resource.  The second and third elements are the main name and                    
                </comment>
                <comment line="1823">
                    the qualifier; if there are no qualifiers, the third element is                    
                </comment>
                <comment line="1824">
                    unused by the format pattern.                    
                </comment>
                <comment line="1828">
                    We could also just call formatList() and have it handle the empty                    
                </comment>
                <comment line="1829">
                    list case, but this is more efficient, and we want it to be                    
                </comment>
                <comment line="1830">
                    efficient since all the language-only locales will not have any                    
                </comment>
                <comment line="1831">
                    qualifiers.                    
                </comment>
                <comment line="1839">
                    If we cannot get the message format pattern, then we use a simple                    
                </comment>
                <comment line="1840">
                    hard-coded pattern.  This should not occur in practice unless the                    
                </comment>
                <comment line="1841">
                    installation is missing some core files (FormatData etc.).                    
                </comment>
                <declaration name="bundle" type="OpenListResourceBundle" line="1761"/>
                <declaration name="languageName" type="String" line="1763"/>
                <declaration name="scriptName" type="String" line="1764"/>
                <declaration name="countryName" type="String" line="1765"/>
                <declaration name="variantNames" type="String[]" line="1766"/>
                <declaration name="displayNamePattern" type="String" line="1769"/>
                <declaration name="listPattern" type="String" line="1770"/>
                <declaration name="listCompositionPattern" type="String" line="1771"/>
                <scope line="1772"/>
                <scope line="1776"/>
                <declaration name="mainName" type="String" line="1782"/>
                <declaration name="qualifierNames" type="String[]" line="1783"/>
                <scope line="1789">
                    <scope line="1790"/>
                    <scope line="1792"/>
                </scope>
                <declaration name="names" type="ArrayList&lt;String&gt;" line="1796"/>
                <scope line="1797"/>
                <scope line="1800"/>
                <scope line="1803"/>
                <scope line="1806">
                    <scope line="1807"/>
                </scope>
                <declaration name="numNames" type="int" line="1816"/>
                <declaration name="displayNames" type="Object[]" line="1825"/>
                <scope line="1835"/>
                <scope line="1838">
                    <declaration name="result" type="StringBuilder" line="1842"/>
                    <scope line="1844"/>
                </scope>
            </method>
            <javadoc line="1853">
                Overrides Cloneable.                
            </javadoc>
            <method name="clone" type="Object" line="1857">
                <scope line="1858">
                    <declaration name="that" type="Locale" line="1859"/>
                </scope>
                <scope line="1861"/>
            </method>
            <javadoc line="1866">
                Override hashCode.
                  Since Locales are often used in hashtables, caches the value
                  for speed.                
            </javadoc>
            <method name="hashCode" type="int" line="1872">
                <declaration name="hc" type="int" line="1873"/>
                <scope line="1874">
                    <scope line="1876"/>
                </scope>
            </method>
            <javadoc line="1886">
                Returns true if this Locale is equal to another object.  A Locale is
                  deemed equal to another Locale with identical language, script, country,
                  variant and extensions, and unequal to all other objects.                
                <return>
                    true if this Locale is equal to the specified object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1894">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="1895">
                    quick check                    
                </comment>
                <declaration name="otherBase" type="BaseLocale" line="1899"/>
                <scope line="1900"/>
                <scope line="1903"/>
            </method>
            <declaration name="baseLocale" type="BaseLocale" line="1911"/>
            <declaration name="localeExtensions" type="LocaleExtensions" line="1912"/>
            <declaration name="hashCodeValue" type="int" line="1914"/>
            <javadoc line="1914">
                Calculated hashcode                
            </javadoc>
            <declaration name="defaultLocale" type="Locale" line="1919"/>
            <declaration name="defaultDisplayLocale" type="Locale" line="1920"/>
            <declaration name="defaultFormatLocale" type="Locale" line="1921"/>
            <javadoc line="1923">
                Return an array of the display names of the variant.                
                <param>
                    bundle the ResourceBundle to use to get the display names                    
                </param>
                <return>
                    an array of display names, possible of zero length.                    
                </return>
            </javadoc>
            <method name="getDisplayVariantArray" type="String[]" line="1928">
                <params>
                    <param name="bundle" type="OpenListResourceBundle"/>
                    <param name="inLocale" type="Locale"/>
                </params>
                <comment line="1929">
                    Split the variant name into tokens separated by &apos;_&apos;.                    
                </comment>
                <comment line="1933">
                    For each variant token, lookup the display name.  If                    
                </comment>
                <comment line="1934">
                    not found, use the variant name itself.                    
                </comment>
                <declaration name="tokenizer" type="StringTokenizer" line="1930"/>
                <declaration name="names" type="String[]" line="1931"/>
                <scope line="1935"/>
            </method>
            <javadoc line="1943">
                Format a list using given pattern strings.
                  If either of the patterns is null, then a the list is
                  formatted by concatenation with the delimiter &apos;,&apos;.                
                <param>
                    stringList the list of strings to be formatted.                    
                </param>
                <param>
                    listPattern should create a MessageFormat taking 0-3 arguments
                      and formatting them into a list.                    
                </param>
                <param>
                    listCompositionPattern should take 2 arguments
                      and is used by composeList.                    
                </param>
                <return>
                    a string representing the list.                    
                </return>
            </javadoc>
            <method name="formatList" type="String" line="1954">
                <params>
                    <param name="stringList" type="String[]"/>
                    <param name="listPattern" type="String"/>
                    <param name="listCompositionPattern" type="String"/>
                </params>
                <comment line="1955">
                    If we have no list patterns, compose the list in a simple,                    
                </comment>
                <comment line="1956">
                    non-localized way.                    
                </comment>
                <comment line="1966">
                    Compose the list down to three elements if necessary                    
                </comment>
                <comment line="1972">
                    Rebuild the argument list with the list length as the first element                    
                </comment>
                <comment line="1977">
                    Format it using the pattern in the resource                    
                </comment>
                <scope line="1957">
                    <declaration name="result" type="StringBuffer" line="1958"/>
                    <scope line="1959"/>
                </scope>
                <scope line="1967">
                    <declaration name="format" type="MessageFormat" line="1968"/>
                </scope>
                <declaration name="args" type="Object[]" line="1973"/>
                <declaration name="format" type="MessageFormat" line="1978"/>
            </method>
            <javadoc line="1982">
                Given a list of strings, return a list shortened to three elements.
                  Shorten it by applying the given format to the first two elements
                  recursively.                
                <param>
                    format a format which takes two arguments                    
                </param>
                <param>
                    list a list of strings                    
                </param>
                <return>
                    if the list is three elements or shorter, the same list;
                      otherwise, a new list of three elements.                    
                </return>
            </javadoc>
            <method name="composeList" type="String[]" line="1991">
                <params>
                    <param name="format" type="MessageFormat"/>
                    <param name="list" type="String[]"/>
                </params>
                <comment line="1994">
                    Use the given format to compose the first two elements into one                    
                </comment>
                <comment line="1998">
                    Form a new list one element shorter                    
                </comment>
                <comment line="2003">
                    Recurse                    
                </comment>
                <declaration name="listItems" type="String[]" line="1995"/>
                <declaration name="newItem" type="String" line="1996"/>
                <declaration name="newList" type="String[]" line="1999"/>
            </method>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="2007"/>
            <javadoc line="2007">
                @serialField language    String
                  language subtag in lower case. (See &lt;a href=&quot;java/util/Locale.html#getLanguage()&quot;&gt;getLanguage()&lt;/a&gt;)                
                <serialField>
                    country     String
                      country subtag in upper case. (See <a href="java/util/Locale.html#getCountry()">getCountry()</a>)                    
                </serialField>
                <serialField>
                    variant     String
                      variant subtags separated by LOWLINE characters. (See <a href="java/util/Locale.html#getVariant()">getVariant()</a>)                    
                </serialField>
                <serialField>
                    hashcode    int
                      deprecated, for forward compatibility only                    
                </serialField>
                <serialField>
                    script      String
                      script subtag in title case (See <a href="java/util/Locale.html#getScript()">getScript()</a>)                    
                </serialField>
                <serialField>
                    extensions  String
                      canonical representation of extensions, that is,
                      BCP47 extensions in alphabetical order followed by
                      BCP47 private use subtags, all in lower case letters
                      separated by HYPHEN-MINUS characters.
                      (See <a href="java/util/Locale.html#getExtensionKeys()">getExtensionKeys()</a>,
                      <a href="java/util/Locale.html#getExtension(char)">getExtension(char)</a>)                    
                </serialField>
            </javadoc>
            <javadoc line="2035">
                Serializes this &lt;code&gt;Locale&lt;/code&gt; to the specified &lt;code&gt;ObjectOutputStream&lt;/code&gt;.                
                <param>
                    out the <code>ObjectOutputStream</code> to write                    
                </param>
                <throws>
                    IOException                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="2041">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="2048">
                    place holder just for backward support                    
                </comment>
                <declaration name="fields" type="ObjectOutputStream.PutField" line="2042"/>
            </method>
            <javadoc line="2052">
                Deserializes this &lt;code&gt;Locale&lt;/code&gt;.                
                <param>
                    in the <code>ObjectInputStream</code> to read                    
                </param>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    ClassNotFoundException                    
                </throws>
                <throws>
                    IllformdLocaleException                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="2060">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="fields" type="ObjectInputStream.GetField" line="2061"/>
                <declaration name="language" type="String" line="2062"/>
                <declaration name="script" type="String" line="2063"/>
                <declaration name="country" type="String" line="2064"/>
                <declaration name="variant" type="String" line="2065"/>
                <declaration name="extStr" type="String" line="2066"/>
                <scope line="2068">
                    <scope line="2069">
                        <declaration name="bldr" type="InternalLocaleBuilder" line="2070"/>
                    </scope>
                    <scope line="2073"/>
                </scope>
                <scope line="2076"/>
            </method>
            <javadoc line="2081">
                Returns a cached &lt;code&gt;Locale&lt;/code&gt; instance equivalent to
                  the deserialized &lt;code&gt;Locale&lt;/code&gt;. When serialized
                  language, country and variant fields read from the object data stream
                  are exactly &quot;ja&quot;, &quot;JP&quot;, &quot;JP&quot; or &quot;th&quot;, &quot;TH&quot;, &quot;TH&quot; and script/extensions
                  fields are empty, this method supplies &lt;code&gt;UNICODE_LOCALE_EXTENSION&lt;/code&gt;
                  &quot;ca&quot;/&quot;japanese&quot; (calendar type is &quot;japanese&quot;) or &quot;nu&quot;/&quot;thai&quot; (number script
                  type is &quot;thai&quot;). See &lt;a href=&quot;Locale.html#special_cases_constructor&quot;/&gt;Special Cases&lt;/a&gt;
                  for more information.                
                <return>
                    an instance of <code>Locale</code> equivalent to
                      the deserialized <code>Locale</code>.                    
                </return>
                <throws>
                    java.io.ObjectStreamException                    
                </throws>
            </javadoc>
            <method name="readResolve" type="Object" line="2095"/>
            <declaration name="isoLanguages" type="String[]" line="2100"/>
            <declaration name="isoCountries" type="String[]" line="2102"/>
            <method name="convertOldISOCodes" type="String" line="2104">
                <params>
                    <param name="language" type="String"/>
                </params>
                <comment line="2105">
                    we accept both the old and the new ISO codes for the languages whose ISO                    
                </comment>
                <comment line="2106">
                    codes have changed, but we always store the OLD code, for backward compatibility                    
                </comment>
                <scope line="2108"/>
                <scope line="2110"/>
                <scope line="2112"/>
                <scope line="2114"/>
            </method>
            <method name="getCompatibilityExtensions" type="LocaleExtensions" line="2122">
                <params>
                    <param name="language" type="String"/>
                    <param name="script" type="String"/>
                    <param name="country" type="String"/>
                    <param name="variant" type="String"/>
                </params>
                <comment line="2124">
                    Special cases for backward compatibility support                    
                </comment>
                <comment line="2129">
                    ja_JP_JP -&gt; u-ca-japanese (calendar = japanese)                    
                </comment>
                <comment line="2135">
                    th_TH_TH -&gt; u-nu-thai (numbersystem = thai)                    
                </comment>
                <declaration name="extensions" type="LocaleExtensions" line="2123"/>
                <scope line="2128"/>
                <scope line="2134"/>
            </method>
            <class name="LocaleNameGetter" line="2141">
                <implements interface="LocaleServiceProviderPool.LocalizedObjectGetter">
                    <type_params>
                        <type_param name="LocaleNameProvider"/>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <javadoc line="2141">
                    Obtains a localized locale names from a LocaleNameProvider
                      implementation.                    
                </javadoc>
                <declaration name="INSTANCE" type="LocaleNameGetter" line="2147"/>
                <method name="getObject" type="String" line="2152">
                    <params>
                        <param name="localeNameProvider" type="LocaleNameProvider"/>
                        <param name="locale" type="Locale"/>
                        <param name="key" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                    <comment line="2167">
                        shouldn&apos;t happen                        
                    </comment>
                    <declaration name="type" type="int" line="2154"/>
                    <declaration name="code" type="String" line="2155"/>
                </method>
            </class>
            <javadoc line="2174">
                Enum for locale categories.  These locale categories are used to get/set
                  the default locale for the specific functionality represented by the
                  category.                
                <see>
                    #getDefault(Locale.Category)                    
                </see>
                <see>
                    #setDefault(Locale.Category,Locale)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="2185">
                Category used to represent the default locale for
                  displaying user interfaces.                
            </javadoc>
            <javadoc line="2194">
                Category used to represent the default locale for
                  formatting dates, numbers, and/or currencies.                
            </javadoc>
            <method name="Category" type="constructor" line="2203">
                <params>
                    <param name="languageKey" type="String"/>
                    <param name="scriptKey" type="String"/>
                    <param name="countryKey" type="String"/>
                    <param name="variantKey" type="String"/>
                </params>
            </method>
            <declaration name="languageKey" type="String" line="2210"/>
            <declaration name="scriptKey" type="String" line="2211"/>
            <declaration name="countryKey" type="String" line="2212"/>
            <declaration name="variantKey" type="String" line="2213"/>
            <class name="Builder" line="2216">
                <javadoc line="2216">
                    &lt;code&gt;Builder&lt;/code&gt; is used to build instances of &lt;code&gt;Locale&lt;/code&gt;
                      from values configured by the setters.  Unlike the &lt;code&gt;Locale&lt;/code&gt;
                      constructors, the &lt;code&gt;Builder&lt;/code&gt; checks if a value configured by a
                      setter satisfies the syntax requirements defined by the &lt;code&gt;Locale&lt;/code&gt;
                      class.  A &lt;code&gt;Locale&lt;/code&gt; object created by a &lt;code&gt;Builder&lt;/code&gt; is
                      well-formed and can be transformed to a well-formed IETF BCP 47 language tag
                      without losing information.
                      &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;Locale&lt;/code&gt; class does not provide any
                      syntactic restrictions on variant, while BCP 47 requires each variant
                      subtag to be 5 to 8 alphanumerics or a single numeric followed by 3
                      alphanumerics.  The method &lt;code&gt;setVariant&lt;/code&gt; throws
                      &lt;code&gt;IllformedLocaleException&lt;/code&gt; for a variant that does not satisfy
                      this restriction. If it is necessary to support such a variant, use a
                      Locale constructor.  However, keep in mind that a &lt;code&gt;Locale&lt;/code&gt;
                      object created this way might lose the variant information when
                      transformed to a BCP 47 language tag.
                      &lt;p&gt;The following example shows how to create a &lt;code&gt;Locale&lt;/code&gt; object
                      with the &lt;code&gt;Builder&lt;/code&gt;.
                      &lt;blockquote&gt;
                      &lt;pre&gt;
                      Locale aLocale = new Builder().setLanguage(&quot;sr&quot;).setScript(&quot;Latn&quot;).setRegion(&quot;RS&quot;).build();
                      &lt;/pre&gt;
                      &lt;/blockquote&gt;
                      &lt;p&gt;Builders can be reused; &lt;code&gt;clear()&lt;/code&gt; resets all
                      fields to their default values.                    
                    <see>
                        Locale#forLanguageTag                        
                    </see>
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="localeBuilder" type="InternalLocaleBuilder" line="2250"/>
                <javadoc line="2252">
                    Constructs an empty Builder. The default value of all
                      fields, extensions, and private use information is the
                      empty string.                    
                </javadoc>
                <method name="Builder" type="constructor" line="2257"/>
                <javadoc line="2261">
                    Resets the &lt;code&gt;Builder&lt;/code&gt; to match the provided
                      &lt;code&gt;locale&lt;/code&gt;.  Existing state is discarded.
                      &lt;p&gt;All fields of the locale must be well-formed, see {@link Locale}.
                      &lt;p&gt;Locales with any ill-formed fields cause
                      &lt;code&gt;IllformedLocaleException&lt;/code&gt; to be thrown, except for the
                      following three cases which are accepted for compatibility
                      reasons:&lt;ul&gt;
                      &lt;li&gt;Locale(&quot;ja&quot;, &quot;JP&quot;, &quot;JP&quot;) is treated as &quot;ja-JP-u-ca-japanese&quot;
                      &lt;li&gt;Locale(&quot;th&quot;, &quot;TH&quot;, &quot;TH&quot;) is treated as &quot;th-TH-u-nu-thai&quot;
                      &lt;li&gt;Locale(&quot;no&quot;, &quot;NO&quot;, &quot;NY&quot;) is treated as &quot;nn-NO&quot;&lt;/ul&gt;                    
                    <param>
                        locale the locale                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        IllformedLocaleException if <code>locale</code> has
                          any ill-formed fields.                        
                    </throws>
                    <throws>
                        NullPointerException if <code>locale</code> is null.                        
                    </throws>
                </javadoc>
                <method name="setLocale" type="Builder" line="2281">
                    <params>
                        <param name="locale" type="Locale"/>
                    </params>
                    <scope line="2282"/>
                    <scope line="2284"/>
                </method>
                <javadoc line="2290">
                    Resets the Builder to match the provided IETF BCP 47
                      language tag.  Discards the existing state.  Null and the
                      empty string cause the builder to be reset, like {@link #clear}.  Grandfathered tags (see {@link Locale#forLanguageTag}) are converted to their canonical
                      form before being processed.  Otherwise, the language tag
                      must be well-formed (see {@link Locale}) or an exception is
                      thrown (unlike &lt;code&gt;Locale.forLanguageTag&lt;/code&gt;, which
                      just discards ill-formed and following portions of the
                      tag).                    
                    <param>
                        languageTag the language tag                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        IllformedLocaleException if <code>languageTag</code> is ill-formed                        
                    </throws>
                    <see>
                        Locale#forLanguageTag(String)                        
                    </see>
                </javadoc>
                <method name="setLanguageTag" type="Builder" line="2307">
                    <params>
                        <param name="languageTag" type="String"/>
                    </params>
                    <declaration name="sts" type="ParseStatus" line="2308"/>
                    <declaration name="tag" type="LanguageTag" line="2309"/>
                    <scope line="2310"/>
                </method>
                <javadoc line="2317">
                    Sets the language.  If &lt;code&gt;language&lt;/code&gt; is the empty string or
                      null, the language in this &lt;code&gt;Builder&lt;/code&gt; is removed.  Otherwise,
                      the language must be &lt;a href=&quot;./Locale.html#def_language&quot;&gt;well-formed&lt;/a&gt;
                      or an exception is thrown.
                      &lt;p&gt;The typical language value is a two or three-letter language
                      code as defined in ISO639.                    
                    <param>
                        language the language                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        IllformedLocaleException if <code>language</code> is ill-formed                        
                    </throws>
                </javadoc>
                <method name="setLanguage" type="Builder" line="2330">
                    <params>
                        <param name="language" type="String"/>
                    </params>
                    <scope line="2331"/>
                    <scope line="2333"/>
                </method>
                <javadoc line="2339">
                    Sets the script. If &lt;code&gt;script&lt;/code&gt; is null or the empty string,
                      the script in this &lt;code&gt;Builder&lt;/code&gt; is removed.
                      Otherwise, the script must be &lt;a href=&quot;./Locale.html#def_script&quot;&gt;well-formed&lt;/a&gt; or an
                      exception is thrown.
                      &lt;p&gt;The typical script value is a four-letter script code as defined by ISO 15924.                    
                    <param>
                        script the script                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        IllformedLocaleException if <code>script</code> is ill-formed                        
                    </throws>
                </javadoc>
                <method name="setScript" type="Builder" line="2351">
                    <params>
                        <param name="script" type="String"/>
                    </params>
                    <scope line="2352"/>
                    <scope line="2354"/>
                </method>
                <javadoc line="2360">
                    Sets the region.  If region is null or the empty string, the region
                      in this &lt;code&gt;Builder&lt;/code&gt; is removed.  Otherwise,
                      the region must be &lt;a href=&quot;./Locale.html#def_region&quot;&gt;well-formed&lt;/a&gt; or an
                      exception is thrown.
                      &lt;p&gt;The typical region value is a two-letter ISO 3166 code or a
                      three-digit UN M.49 area code.
                      &lt;p&gt;The country value in the &lt;code&gt;Locale&lt;/code&gt; created by the
                      &lt;code&gt;Builder&lt;/code&gt; is always normalized to upper case.                    
                    <param>
                        region the region                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        IllformedLocaleException if <code>region</code> is ill-formed                        
                    </throws>
                </javadoc>
                <method name="setRegion" type="Builder" line="2376">
                    <params>
                        <param name="region" type="String"/>
                    </params>
                    <scope line="2377"/>
                    <scope line="2379"/>
                </method>
                <javadoc line="2385">
                    Sets the variant.  If variant is null or the empty string, the
                      variant in this &lt;code&gt;Builder&lt;/code&gt; is removed.  Otherwise, it
                      must consist of one or more &lt;a href=&quot;./Locale.html#def_variant&quot;&gt;well-formed&lt;/a&gt;
                      subtags, or an exception is thrown.
                      &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method checks if &lt;code&gt;variant&lt;/code&gt;
                      satisfies the IETF BCP 47 variant subtag&apos;s syntax requirements,
                      and normalizes the value to lowercase letters.  However,
                      the &lt;code&gt;Locale&lt;/code&gt; class does not impose any syntactic
                      restriction on variant, and the variant value in
                      &lt;code&gt;Locale&lt;/code&gt; is case sensitive.  To set such a variant,
                      use a Locale constructor.                    
                    <param>
                        variant the variant                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        IllformedLocaleException if <code>variant</code> is ill-formed                        
                    </throws>
                </javadoc>
                <method name="setVariant" type="Builder" line="2403">
                    <params>
                        <param name="variant" type="String"/>
                    </params>
                    <scope line="2404"/>
                    <scope line="2406"/>
                </method>
                <javadoc line="2412">
                    Sets the extension for the given key. If the value is null or the
                      empty string, the extension is removed.  Otherwise, the extension
                      must be &lt;a href=&quot;./Locale.html#def_extensions&quot;&gt;well-formed&lt;/a&gt; or an exception
                      is thrown.
                      &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The key {@link Locale#UNICODE_LOCALE_EXTENSIONUNICODE_LOCALE_EXTENSION} (&apos;u&apos;) is used for the Unicode locale extension.
                      Setting a value for this key replaces any existing Unicode locale key/type
                      pairs with those defined in the extension.
                      &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The key {@link Locale#PRIVATE_USE_EXTENSIONPRIVATE_USE_EXTENSION} (&apos;x&apos;) is used for the private use code. To be
                      well-formed, the value for this key needs only to have subtags of one to
                      eight alphanumeric characters, not two to eight as in the general case.                    
                    <param>
                        key the extension key                        
                    </param>
                    <param>
                        value the extension value                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        IllformedLocaleException if <code>key</code> is illegal
                          or <code>value</code> is ill-formed                        
                    </throws>
                    <see>
                        #setUnicodeLocaleKeyword(String,String)                        
                    </see>
                </javadoc>
                <method name="setExtension" type="Builder" line="2435">
                    <params>
                        <param name="key" type="char"/>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="2436"/>
                    <scope line="2438"/>
                </method>
                <javadoc line="2444">
                    Sets the Unicode locale keyword type for the given key.  If the type
                      is null, the Unicode keyword is removed.  Otherwise, the key must be
                      non-null and both key and type must be &lt;a
                      href=&quot;./Locale.html#def_locale_extension&quot;&gt;well-formed&lt;/a&gt; or an exception
                      is thrown.
                      &lt;p&gt;Keys and types are converted to lower case.
                      &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;:Setting the &apos;u&apos; extension via {@link #setExtension}replaces all Unicode locale keywords with those defined in the
                      extension.                    
                    <param>
                        key the Unicode locale key                        
                    </param>
                    <param>
                        type the Unicode locale type                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        IllformedLocaleException if <code>key</code> or <code>type</code>
                          is ill-formed                        
                    </throws>
                    <throws>
                        NullPointerException if <code>key</code> is null                        
                    </throws>
                    <see>
                        #setExtension(char,String)                        
                    </see>
                </javadoc>
                <method name="setUnicodeLocaleKeyword" type="Builder" line="2465">
                    <params>
                        <param name="key" type="String"/>
                        <param name="type" type="String"/>
                    </params>
                    <scope line="2466"/>
                    <scope line="2468"/>
                </method>
                <javadoc line="2474">
                    Adds a unicode locale attribute, if not already present, otherwise
                      has no effect.  The attribute must not be null and must be &lt;a
                      href=&quot;./Locale.html#def_locale_extension&quot;&gt;well-formed&lt;/a&gt; or an exception
                      is thrown.                    
                    <param>
                        attribute the attribute                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        NullPointerException if <code>attribute</code> is null                        
                    </throws>
                    <throws>
                        IllformedLocaleException if <code>attribute</code> is ill-formed                        
                    </throws>
                    <see>
                        #setExtension(char,String)                        
                    </see>
                </javadoc>
                <method name="addUnicodeLocaleAttribute" type="Builder" line="2486">
                    <params>
                        <param name="attribute" type="String"/>
                    </params>
                    <scope line="2487"/>
                    <scope line="2489"/>
                </method>
                <javadoc line="2495">
                    Removes a unicode locale attribute, if present, otherwise has no
                      effect.  The attribute must not be null and must be &lt;a
                      href=&quot;./Locale.html#def_locale_extension&quot;&gt;well-formed&lt;/a&gt; or an exception
                      is thrown.
                      &lt;p&gt;Attribute comparision for removal is case-insensitive.                    
                    <param>
                        attribute the attribute                        
                    </param>
                    <return>
                        This builder.                        
                    </return>
                    <throws>
                        NullPointerException if <code>attribute</code> is null                        
                    </throws>
                    <throws>
                        IllformedLocaleException if <code>attribute</code> is ill-formed                        
                    </throws>
                    <see>
                        #setExtension(char,String)                        
                    </see>
                </javadoc>
                <method name="removeUnicodeLocaleAttribute" type="Builder" line="2509">
                    <params>
                        <param name="attribute" type="String"/>
                    </params>
                    <scope line="2510"/>
                    <scope line="2512"/>
                </method>
                <javadoc line="2518">
                    Resets the builder to its initial, empty state.                    
                    <return>
                        This builder.                        
                    </return>
                </javadoc>
                <method name="clear" type="Builder" line="2523"/>
                <javadoc line="2528">
                    Resets the extensions to their initial, empty state.
                      Language, script, region and variant are unchanged.                    
                    <return>
                        This builder.                        
                    </return>
                    <see>
                        #setExtension(char,String)                        
                    </see>
                </javadoc>
                <method name="clearExtensions" type="Builder" line="2535"/>
                <javadoc line="2540">
                    Returns an instance of &lt;code&gt;Locale&lt;/code&gt; created from the fields set
                      on this builder.
                      &lt;p&gt;This applies the conversions listed in {@link Locale#forLanguageTag}when constructing a Locale. (Grandfathered tags are handled in{@link #setLanguageTag}.)                    
                    <return>
                        A Locale.                        
                    </return>
                </javadoc>
                <method name="build" type="Locale" line="2550">
                    <declaration name="baseloc" type="BaseLocale" line="2551"/>
                    <declaration name="extensions" type="LocaleExtensions" line="2552"/>
                    <scope line="2553"/>
                </method>
            </class>
        </class>
    </source>