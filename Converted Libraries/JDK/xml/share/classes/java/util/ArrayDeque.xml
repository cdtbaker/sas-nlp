<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io"/>
        <class name="ArrayDeque" line="38">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractCollection">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="118">
                ******  Array allocation and resizing utilities ******                
            </comment>
            <comment line="215">
                The main insertion and extraction methods are addFirst,
                 addLast, pollFirst, pollLast. The other methods are defined in
                 terms of these.                
            </comment>
            <comment line="397">
                *** Queue methods ***                
            </comment>
            <comment line="482">
                *** Stack methods ***                
            </comment>
            <comment line="568">
                *** Collection Methods ***                
            </comment>
            <comment line="808">
                *** Object methods ***                
            </comment>
            <implements interface="Deque">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="38">
                Resizable-array implementation of the {@link Deque} interface.  Array
                  deques have no capacity restrictions; they grow as necessary to support
                  usage.  They are not thread-safe; in the absence of external
                  synchronization, they do not support concurrent access by multiple threads.
                  Null elements are prohibited.  This class is likely to be faster than{@link Stack} when used as a stack, and faster than {@link LinkedList}when used as a queue.
                  &lt;p&gt;Most &lt;tt&gt;ArrayDeque&lt;/tt&gt; operations run in amortized constant time.
                  Exceptions include {@link #remove(Object) remove}, {@link #removeFirstOccurrence removeFirstOccurrence}, {@link #removeLastOccurrenceremoveLastOccurrence}, {@link #contains contains}, {@link #iteratoriterator.remove()}, and the bulk operations, all of which run in linear
                  time.
                  &lt;p&gt;The iterators returned by this class&apos;s &lt;tt&gt;iterator&lt;/tt&gt; method are
                  &lt;i&gt;fail-fast&lt;/i&gt;: If the deque is modified at any time after the iterator
                  is created, in any way except through the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt;
                  method, the iterator will generally throw a {@link ConcurrentModificationException}.  Thus, in the face of concurrent
                  modification, the iterator fails quickly and cleanly, rather than risking
                  arbitrary, non-deterministic behavior at an undetermined time in the
                  future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness: &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;
                  &lt;p&gt;This class and its iterator implement all of the
                  &lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link Iterator} interfaces.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Josh Bloch and Doug Lea                    
                </author>
                <since>
                    1.6                    
                </since>
                <param>
                    &lt;E&gt;
                       the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="elements" type="E[]" line="86"/>
            <javadoc line="86">
                The array in which the elements of the deque are stored.
                  The capacity of the deque is the length of this array, which is
                  always a power of two. The array is never allowed to become
                  full, except transiently within an addX method where it is
                  resized (see doubleCapacity) immediately upon becoming full,
                  thus avoiding head and tail wrapping around to equal each
                  other.  We also guarantee that all array cells not holding
                  deque elements are always null.                
            </javadoc>
            <declaration name="head" type="int" line="98"/>
            <javadoc line="98">
                The index of the element at the head of the deque (which is the
                  element that would be removed by remove() or pop()); or an
                  arbitrary number equal to tail if the deque is empty.                
            </javadoc>
            <declaration name="tail" type="int" line="105"/>
            <javadoc line="105">
                The index at which the next element would be added to the tail
                  of the deque (via addLast(E), add(E), or push(E)).                
            </javadoc>
            <declaration name="MIN_INITIAL_CAPACITY" type="int" line="111"/>
            <javadoc line="111">
                The minimum capacity that we&apos;ll use for a newly created deque.
                  Must be a power of 2.                
            </javadoc>
            <javadoc line="119">
                Allocate empty array to hold the given number of elements.                
                <param>
                    numElements  the number of elements to hold                    
                </param>
            </javadoc>
            <method name="allocateElements" type="void" line="124">
                <params>
                    <param name="numElements" type="int"/>
                </params>
                <comment line="127">
                    Find the best power of two to hold elements.
                     Tests &quot;&lt;=&quot; because arrays aren&apos;t kept full.                    
                </comment>
                <comment line="138">
                    Too many elements, must back off                    
                </comment>
                <comment line="139">
                    Good luck allocating 2 ^ 30 elements                    
                </comment>
                <declaration name="initialCapacity" type="int" line="125"/>
                <scope line="128"/>
            </method>
            <javadoc line="143">
                Double the capacity of this deque.  Call only when full, i.e.,
                  when head and tail have wrapped around to become equal.                
            </javadoc>
            <method name="doubleCapacity" type="void" line="147">
                <comment line="152">
                    number of elements to the right of p                    
                </comment>
                <declaration name="p" type="int" line="149"/>
                <declaration name="n" type="int" line="150"/>
                <declaration name="r" type="int" line="151"/>
                <declaration name="newCapacity" type="int" line="152"/>
                <declaration name="a" type="Object[]" line="155"/>
            </method>
            <javadoc line="163">
                Copies the elements from our element array into the specified array,
                  in order (from first to last element in the deque).  It is assumed
                  that the array is large enough to hold all elements in the deque.                
                <return>
                    its argument                    
                </return>
            </javadoc>
            <method name="copyElements" type="T[]" line="170">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <scope line="171"/>
                <scope line="173">
                    <declaration name="headPortionLen" type="int" line="174"/>
                </scope>
            </method>
            <javadoc line="181">
                Constructs an empty array deque with an initial capacity
                  sufficient to hold 16 elements.                
            </javadoc>
            <method name="ArrayDeque" type="constructor" line="185"/>
            <javadoc line="189">
                Constructs an empty array deque with an initial capacity
                  sufficient to hold the specified number of elements.                
                <param>
                    numElements  lower bound on initial capacity of the deque                    
                </param>
            </javadoc>
            <method name="ArrayDeque" type="constructor" line="195">
                <params>
                    <param name="numElements" type="int"/>
                </params>
            </method>
            <javadoc line="199">
                Constructs a deque containing the elements of the specified
                  collection, in the order they are returned by the collection&apos;s
                  iterator.  (The first element returned by the collection&apos;s
                  iterator becomes the first element, or &lt;i&gt;front&lt;/i&gt; of the
                  deque.)                
                <param>
                    c the collection whose elements are to be placed into the deque                    
                </param>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="ArrayDeque" type="constructor" line="209">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="218">
                Inserts the specified element at the front of this deque.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="addFirst" type="void" line="224">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="232">
                Inserts the specified element at the end of this deque.
                  &lt;p&gt;This method is equivalent to {@link #add}.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="addLast" type="void" line="240">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="248">
                Inserts the specified element at the front of this deque.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Deque#offerFirst})                    
                </return>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offerFirst" type="boolean" line="255">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="260">
                Inserts the specified element at the end of this deque.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Deque#offerLast})                    
                </return>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offerLast" type="boolean" line="267">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="272">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="removeFirst" type="E" line="275">
                <declaration name="x" type="E" line="276"/>
            </method>
            <javadoc line="282">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="removeLast" type="E" line="285">
                <declaration name="x" type="E" line="286"/>
            </method>
            <method name="pollFirst" type="E" line="292">
                <comment line="295">
                    Element is null if deque empty                    
                </comment>
                <comment line="298">
                    Must null out slot                    
                </comment>
                <declaration name="h" type="int" line="293"/>
                <declaration name="result" type="E" line="294"/>
            </method>
            <method name="pollLast" type="E" line="302">
                <declaration name="t" type="int" line="303"/>
                <declaration name="result" type="E" line="304"/>
            </method>
            <javadoc line="312">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="getFirst" type="E" line="315">
                <declaration name="x" type="E" line="316"/>
            </method>
            <javadoc line="322">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="getLast" type="E" line="325">
                <declaration name="x" type="E" line="326"/>
            </method>
            <method name="peekFirst" type="E" line="332">
                <comment line="334">
                    elements[head] is null if deque empty                    
                </comment>
            </method>
            <method name="peekLast" type="E" line="336"/>
            <javadoc line="340">
                Removes the first occurrence of the specified element in this
                  deque (when traversing the deque from head to tail).
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the first element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;o.equals(e)&lt;/tt&gt; (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the deque contained the specified element                    
                </return>
            </javadoc>
            <method name="removeFirstOccurrence" type="boolean" line="352">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="mask" type="int" line="355"/>
                <declaration name="i" type="int" line="356"/>
                <declaration name="x" type="E" line="357"/>
                <scope line="358">
                    <scope line="359"/>
                </scope>
            </method>
            <javadoc line="368">
                Removes the last occurrence of the specified element in this
                  deque (when traversing the deque from head to tail).
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the last element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;o.equals(e)&lt;/tt&gt; (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the deque contained the specified element                    
                </return>
            </javadoc>
            <method name="removeLastOccurrence" type="boolean" line="380">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="mask" type="int" line="383"/>
                <declaration name="i" type="int" line="384"/>
                <declaration name="x" type="E" line="385"/>
                <scope line="386">
                    <scope line="387"/>
                </scope>
            </method>
            <javadoc line="398">
                Inserts the specified element at the end of this deque.
                  &lt;p&gt;This method is equivalent to {@link #addLast}.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="407">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="412">
                Inserts the specified element at the end of this deque.
                  &lt;p&gt;This method is equivalent to {@link #offerLast}.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Queue#offer})                    
                </return>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="421">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="425">
                Retrieves and removes the head of the queue represented by this deque.
                  This method differs from {@link #poll poll} only in that it throws an
                  exception if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #removeFirst}.                
                <return>
                    the head of the queue represented by this deque                    
                </return>
                <throws>
                    NoSuchElementException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="436"/>
            <javadoc line="440">
                Retrieves and removes the head of the queue represented by this deque
                  (in other words, the first element of this deque), or returns
                  &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #pollFirst}.                
                <return>
                    the head of the queue represented by this deque, or
                      &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="poll" type="E" line="450"/>
            <javadoc line="454">
                Retrieves, but does not remove, the head of the queue represented by
                  this deque.  This method differs from {@link #peek peek} only in
                  that it throws an exception if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #getFirst}.                
                <return>
                    the head of the queue represented by this deque                    
                </return>
                <throws>
                    NoSuchElementException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="element" type="E" line="464"/>
            <javadoc line="468">
                Retrieves, but does not remove, the head of the queue represented by
                  this deque, or returns &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #peekFirst}.                
                <return>
                    the head of the queue represented by this deque, or
                      &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="peek" type="E" line="477"/>
            <javadoc line="483">
                Pushes an element onto the stack represented by this deque.  In other
                  words, inserts the element at the front of this deque.
                  &lt;p&gt;This method is equivalent to {@link #addFirst}.                
                <param>
                    e the element to push                    
                </param>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="push" type="void" line="492">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="496">
                Pops an element from the stack represented by this deque.  In other
                  words, removes and returns the first element of this deque.
                  &lt;p&gt;This method is equivalent to {@link #removeFirst()}.                
                <return>
                    the element at the front of this deque (which is the top
                      of the stack represented by this deque)                    
                </return>
                <throws>
                    NoSuchElementException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="pop" type="E" line="506"/>
            <method name="checkInvariants" type="void" line="510"/>
            <javadoc line="518">
                Removes the element at the specified position in the elements array,
                  adjusting head and tail as necessary.  This can result in motion of
                  elements backwards or forwards in the array.
                  &lt;p&gt;This method is called delete rather than remove to emphasize
                  that its semantics differ from those of {@link List#remove(int)}.                
                <return>
                    true if elements moved backwards                    
                </return>
            </javadoc>
            <method name="delete" type="boolean" line="528">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="538">
                    Invariant: head &lt;= i &lt; tail mod circularity                    
                </comment>
                <comment line="542">
                    Optimize for least element motion                    
                </comment>
                <comment line="546">
                    Wrap around                    
                </comment>
                <comment line="555">
                    Copy the null tail as well                    
                </comment>
                <comment line="558">
                    Wrap around                    
                </comment>
                <declaration name="elements" type="E[]" line="530"/>
                <declaration name="mask" type="int" line="531"/>
                <declaration name="h" type="int" line="532"/>
                <declaration name="t" type="int" line="533"/>
                <declaration name="front" type="int" line="534"/>
                <declaration name="back" type="int" line="535"/>
                <scope line="542">
                    <scope line="543"/>
                    <scope line="545"/>
                </scope>
                <scope line="553">
                    <scope line="554"/>
                    <scope line="557"/>
                </scope>
            </method>
            <javadoc line="569">
                Returns the number of elements in this deque.                
                <return>
                    the number of elements in this deque                    
                </return>
            </javadoc>
            <method name="size" type="int" line="574"/>
            <javadoc line="578">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contains no elements.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this deque contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="583"/>
            <javadoc line="587">
                Returns an iterator over the elements in this deque.  The elements
                  will be ordered from first (head) to last (tail).  This is the same
                  order that elements would be dequeued (via successive calls to{@link #remove} or popped (via successive calls to {@link #pop}).                
                <return>
                    an iterator over the elements in this deque                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="595"/>
            <method name="descendingIterator" type="Iterator<E>" line="599"/>
            <class name="DeqIterator" line="603">
                <comment line="651">
                    This class is nearly a mirror-image of DeqIterator, using
                     tail instead of head for initial cursor, and head instead of
                     tail for fence.                    
                </comment>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="cursor" type="int" line="604"/>
                <javadoc line="604">
                    Index of element to be returned by subsequent call to next.                    
                </javadoc>
                <declaration name="fence" type="int" line="609"/>
                <javadoc line="609">
                    Tail recorded at construction (also in remove), to stop
                      iterator and also to check for comodification.                    
                </javadoc>
                <declaration name="lastRet" type="int" line="615"/>
                <javadoc line="615">
                    Index of element returned by most recent call to next.
                      Reset to -1 if element is deleted by a call to remove.                    
                </javadoc>
                <method name="hasNext" type="boolean" line="621"/>
                <method name="next" type="E" line="625">
                    <comment line="630">
                        This check doesn&apos;t catch all possible comodifications,
                         but does catch the ones that corrupt traversal                        
                    </comment>
                    <declaration name="result" type="E" line="628"/>
                </method>
                <method name="remove" type="void" line="638">
                    <comment line="642">
                        if left-shifted, undo increment in next()                        
                    </comment>
                    <scope line="641"/>
                </method>
            </class>
            <class name="DescendingIterator" line="649">
                <comment line="651">
                    This class is nearly a mirror-image of DeqIterator, using
                     tail instead of head for initial cursor, and head instead of
                     tail for fence.                    
                </comment>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="cursor" type="int" line="655"/>
                <declaration name="fence" type="int" line="656"/>
                <declaration name="lastRet" type="int" line="657"/>
                <method name="hasNext" type="boolean" line="659"/>
                <method name="next" type="E" line="663">
                    <declaration name="result" type="E" line="667"/>
                </method>
                <method name="remove" type="void" line="674">
                    <scope line="677"/>
                </method>
            </class>
            <javadoc line="685">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this deque contains
                  at least one element &lt;tt&gt;e&lt;/tt&gt; such that &lt;tt&gt;o.equals(e)&lt;/tt&gt;.                
                <param>
                    o object to be checked for containment in this deque                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this deque contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="693">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="mask" type="int" line="696"/>
                <declaration name="i" type="int" line="697"/>
                <declaration name="x" type="E" line="698"/>
                <scope line="699"/>
            </method>
            <javadoc line="707">
                Removes a single instance of the specified element from this deque.
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the first element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;o.equals(e)&lt;/tt&gt; (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).
                  &lt;p&gt;This method is equivalent to {@link #removeFirstOccurrence}.                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="720">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="724">
                Removes all of the elements from this deque.
                  The deque will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="728">
                <comment line="732">
                    clear all cells                    
                </comment>
                <declaration name="h" type="int" line="729"/>
                <declaration name="t" type="int" line="730"/>
                <scope line="731">
                    <declaration name="i" type="int" line="733"/>
                    <declaration name="mask" type="int" line="734"/>
                    <scope line="735"/>
                </scope>
            </method>
            <javadoc line="742">
                Returns an array containing all of the elements in this deque
                  in proper sequence (from first to last element).
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this deque.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this deque                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="755"/>
            <javadoc line="759">
                Returns an array containing all of the elements in this deque in
                  proper sequence (from first to last element); the runtime type of the
                  returned array is that of the specified array.  If the deque fits in
                  the specified array, it is returned therein.  Otherwise, a new array
                  is allocated with the runtime type of the specified array and the
                  size of this deque.
                  &lt;p&gt;If this deque fits in the specified array with room to spare
                  (i.e., the array has more elements than this deque), the element in
                  the array immediately following the end of the deque is set to
                  &lt;tt&gt;null&lt;/tt&gt;.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a deque known to contain only strings.
                  The following code can be used to dump the deque into a newly
                  allocated array of &lt;tt&gt;String&lt;/tt&gt;:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of the deque are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose                    
                </param>
                <return>
                    an array containing all of the elements in this deque                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="796">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <declaration name="size" type="int" line="797"/>
            </method>
            <javadoc line="809">
                Returns a copy of this deque.                
                <return>
                    a copy of this deque                    
                </return>
            </javadoc>
            <method name="clone" type="ArrayDeque<E>" line="814">
                <scope line="815">
                    <declaration name="result" type="ArrayDeque&lt;E&gt;" line="816"/>
                </scope>
                <scope line="820"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="825"/>
            <javadoc line="825">
                Appease the serialization gods.                
            </javadoc>
            <javadoc line="830">
                Serialize this deque.                
                <serialData>
                    The current size (&lt;tt&gt;int&lt;/tt&gt;) of the deque,
                      followed by all of its elements (each an object reference) in
                      first-to-last order.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="837">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="841">
                    Write out size                    
                </comment>
                <comment line="844">
                    Write out elements in order.                    
                </comment>
                <declaration name="mask" type="int" line="844"/>
            </method>
            <javadoc line="849">
                Deserialize this deque.                
            </javadoc>
            <method name="readObject" type="void" line="853">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="857">
                    Read in size and allocate array                    
                </comment>
                <comment line="863">
                    Read in all elements in the proper order.                    
                </comment>
                <declaration name="size" type="int" line="857"/>
            </method>
        </class>
    </source>