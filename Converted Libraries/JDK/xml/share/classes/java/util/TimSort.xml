<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="TimSort" line="2">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="2">
                A stable, adaptive, iterative mergesort that requires far fewer than
                  n lg(n) comparisons when running on partially sorted arrays, while
                  offering performance comparable to a traditional mergesort when run
                  on random arrays.  Like all proper mergesorts, this sort is stable and
                  runs O(n log n) time (worst case).  In the worst case, this sort requires
                  temporary storage space for n/2 object references; in the best case,
                  it requires only a small constant amount of space.
                  This implementation was adapted from Tim Peters&apos;s list sort for
                  Python, which is described in detail here:
                  http://svn.python.org/projects/python/trunk/Objects/listsort.txt
                  Tim&apos;s C code may be found here:
                  http://svn.python.org/projects/python/trunk/Objects/listobject.c
                  The underlying techniques are described in this paper (and may have
                  even earlier origins):
                  &quot;Optimistic Sorting and Information Theoretic Complexity&quot;
                  Peter McIlroy
                  SODA (Fourth Annual ACM-SIAM Symposium on Discrete Algorithms),
                  pp 467-474, Austin, Texas, 25-27 January 1993.
                  While the API to this class consists solely of static methods, it is
                  (privately) instantiable; a TimSort instance holds the state of an ongoing
                  sort, assuming the input array is large enough to warrant the full-blown
                  TimSort. Small arrays are sorted in place, using a binary insertion sort.                
                <author>
                    Josh Bloch                    
                </author>
            </javadoc>
            <declaration name="MIN_MERGE" type="int" line="28"/>
            <javadoc line="28">
                This is the minimum sized sequence that will be merged.  Shorter
                  sequences will be lengthened by calling binarySort.  If the entire
                  array is less than this length, no merges will be performed.
                  This constant should be a power of two.  It was 64 in Tim Peter&apos;s C
                  implementation, but 32 was empirically determined to work better in
                  this implementation.  In the unlikely event that you set this constant
                  to be a number that&apos;s not a power of two, you&apos;ll need to change the{@link #minRunLength} computation.
                  If you decrease this constant, you must change the stackLen
                  computation in the TimSort constructor, or you risk an
                  ArrayOutOfBounds exception.  See listsort.txt for a discussion
                  of the minimum stack length required as a function of the length
                  of the array being sorted and the minimum merge sequence length.                
            </javadoc>
            <declaration name="a" type="T[]" line="43"/>
            <javadoc line="43">
                The array being sorted.                
            </javadoc>
            <declaration name="c" type="Comparator&lt;? super T&gt;" line="47"/>
            <javadoc line="47">
                The comparator for this sort.                
            </javadoc>
            <declaration name="MIN_GALLOP" type="int" line="51"/>
            <javadoc line="51">
                When we get into galloping mode, we stay there until both runs win less
                  often than MIN_GALLOP consecutive times.                
            </javadoc>
            <declaration name="minGallop" type="int" line="56"/>
            <javadoc line="56">
                This controls when we get into galloping mode.  It is initialized
                  to MIN_GALLOP.  The mergeLo and mergeHi methods nudge it higher for
                  random data, and lower for highly structured data.                
            </javadoc>
            <declaration name="INITIAL_TMP_STORAGE_LENGTH" type="int" line="62"/>
            <javadoc line="62">
                Maximum initial size of tmp array, which is used for merging.  The array
                  can grow to accommodate demand.
                  Unlike Tim&apos;s original C version, we do not allocate this much storage
                  when sorting smaller arrays.  This change was required for performance.                
            </javadoc>
            <declaration name="tmp" type="T[]" line="69"/>
            <javadoc line="69">
                Temp storage for merges.                
            </javadoc>
            <declaration name="stackSize" type="int" line="73"/>
            <javadoc line="73">
                A stack of pending runs yet to be merged.  Run i starts at
                  address base[i] and extends for len[i] elements.  It&apos;s always
                  true (so long as the indices are in bounds) that:
                  runBase[i] + runLen[i] == runBase[i + 1]
                  so we could cut the storage for this, but it&apos;s a minor amount,
                  and keeping all the info explicit simplifies the code.                
            </javadoc>
            <declaration name="runBase" type="int[]" line="82"/>
            <declaration name="runLen" type="int[]" line="83"/>
            <javadoc line="84">
                Creates a TimSort instance to maintain the state of an ongoing sort.                
                <param>
                    a the array to be sorted                    
                </param>
                <param>
                    c the comparator to determine the order of the sort                    
                </param>
            </javadoc>
            <method name="TimSort" type="constructor" line="89">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
                <declaration name="len" type="int" line="92"/>
                <declaration name="newArray" type="T[]" line="93"/>
                <declaration name="stackLen" type="int" line="95"/>
            </method>
            <method name="sort" type="void" line="99">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <method name="sort" type="void" line="102">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="134">
                Sorts the specified portion of the specified array using a binary
                  insertion sort.  This is the best method for sorting small numbers
                  of elements.  It requires O(n log n) compares, but O(n^2) data
                  movement (worst case).
                  If the initial part of the specified range is already sorted,
                  this method can take advantage of it: the method assumes that the
                  elements from index {@code lo}, inclusive, to {@code start},
                  exclusive are already sorted.                
                <param>
                    a the array in which a range is to be sorted                    
                </param>
                <param>
                    lo the index of the first element in the range to be sorted                    
                </param>
                <param>
                    hi the index after the last element in the range to be sorted                    
                </param>
                <param>
                    start the index of the first element in the range that is
                      not already known to be sorted ({@code lo <= start <= hi})                    
                </param>
                <param>
                    c comparator to used for the sort                    
                </param>
            </javadoc>
            <method name="binarySort" type="void" line="150">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                    <param name="start" type="int"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="177">
                Returns the length of the run beginning at the specified position in
                  the specified array and reverses the run if it is descending (ensuring
                  that the run will always be ascending when the method returns).
                  A run is the longest ascending sequence with:
                  a[lo] &lt;= a[lo + 1] &lt;= a[lo + 2] &lt;= ...
                  or the longest descending sequence with:
                  a[lo] &gt;  a[lo + 1] &gt;  a[lo + 2] &gt;  ...
                  For its intended use in a stable mergesort, the strictness of the
                  definition of &quot;descending&quot; is needed so that the call can safely
                  reverse a descending sequence without violating stability.                
                <param>
                    a the array in which a run is to be counted and possibly reversed                    
                </param>
                <param>
                    lo index of the first element in the run                    
                </param>
                <param>
                    hi index after the last element that may be contained in the run.
                      It is required that {@code lo < hi}.                    
                </param>
                <param>
                    c the comparator to used for the sort                    
                </param>
                <return>
                    the length of the run beginning at the specified position in
                      the specified array                    
                </return>
            </javadoc>
            <method name="countRunAndMakeAscending" type="int" line="196">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="209">
                Reverse the specified range of the specified array.                
                <param>
                    a the array in which a range is to be reversed                    
                </param>
                <param>
                    lo the index of the first element in the range to be reversed                    
                </param>
                <param>
                    hi the index after the last element in the range to be reversed                    
                </param>
            </javadoc>
            <method name="reverseRange" type="void" line="215">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                </params>
                <scope line="217">
                    <declaration name="t" type="Object" line="218"/>
                </scope>
            </method>
            <javadoc line="223">
                Returns the minimum acceptable run length for an array of the specified
                  length. Natural runs shorter than this will be extended with{@link #binarySort}.
                  Roughly speaking, the computation is:
                  If n &lt; MIN_MERGE, return n (it&apos;s too small to bother with fancy stuff).
                  Else if n is an exact power of 2, return MIN_MERGE/2.
                  Else return an int k, MIN_MERGE/2 &lt;= k &lt;= MIN_MERGE, such that n/k
                  is close to, but strictly less than, an exact power of 2.
                  For the rationale, see listsort.txt.                
                <param>
                    n the length of the array to be sorted                    
                </param>
                <return>
                    the length of the minimum run to be merged                    
                </return>
            </javadoc>
            <method name="minRunLength" type="int" line="235">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="244">
                Pushes the specified run onto the pending-run stack.                
                <param>
                    runBase index of the first element in the run                    
                </param>
                <param>
                    runLen  the number of elements in the run                    
                </param>
            </javadoc>
            <method name="pushRun" type="void" line="249">
                <params>
                    <param name="runBase" type="int"/>
                    <param name="runLen" type="int"/>
                </params>
            </method>
            <javadoc line="254">
                Examines the stack of runs waiting to be merged and merges adjacent runs
                  until the stack invariants are reestablished:
                  1. runLen[i - 3] &gt; runLen[i - 2] + runLen[i - 1]
                  2. runLen[i - 2] &gt; runLen[i - 1]
                  This method is called each time a new run is pushed onto the stack,
                  so the invariants are guaranteed to hold for i &lt; stackSize upon
                  entry to the method.                
            </javadoc>
            <method name="mergeCollapse" type="void" line="263">
                <scope line="264">
                    <declaration name="n" type="int" line="265"/>
                    <scope line="266"/>
                    <scope line="270"/>
                    <scope line="273"/>
                </scope>
            </method>
            <javadoc line="278">
                Merges all runs on the stack until only one remains.  This method is
                  called once, to complete the sort.                
            </javadoc>
            <method name="mergeForceCollapse" type="void" line="282">
                <scope line="283">
                    <declaration name="n" type="int" line="284"/>
                </scope>
            </method>
            <javadoc line="289">
                Merges the two runs at stack indices i and i+1.  Run i must be
                  the penultimate or antepenultimate run on the stack.  In other words,
                  i must be equal to stackSize-2 or stackSize-3.                
                <param>
                    i stack index of the first of the two runs to merge                    
                </param>
            </javadoc>
            <method name="mergeAt" type="void" line="295">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="322">
                Locates the position at which to insert the specified key into the
                  specified sorted range; if the range contains an element equal to key,
                  returns the index of the leftmost equal element.                
                <param>
                    key the key whose insertion point to search for                    
                </param>
                <param>
                    a the array in which to search                    
                </param>
                <param>
                    base the index of the first element in the range                    
                </param>
                <param>
                    len the length of the range; must be > 0                    
                </param>
                <param>
                    hint the index at which to begin the search, 0 <= hint < n.
                      The closer hint is to the result, the faster this method will run.                    
                </param>
                <param>
                    c the comparator used to order the range, and to search                    
                </param>
                <return>
                    the int k,  0 <= k <= n such that a[b + k - 1] < key <= a[b + k],
                      pretending that a[b - 1] is minus infinity and a[b + n] is infinity.
                      In other words, key belongs at index b + k; or in other words,
                      the first k elements of a should precede key, and the last n - k
                      should follow it.                    
                </return>
            </javadoc>
            <method name="gallopLeft" type="int" line="339">
                <params>
                    <param name="key" type="T"/>
                    <param name="a" type="T[]"/>
                    <param name="base" type="int"/>
                    <param name="len" type="int"/>
                    <param name="hint" type="int"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="376">
                Like gallopLeft, except that if the range contains an element equal to
                  key, gallopRight returns the index after the rightmost equal element.                
                <param>
                    key the key whose insertion point to search for                    
                </param>
                <param>
                    a the array in which to search                    
                </param>
                <param>
                    base the index of the first element in the range                    
                </param>
                <param>
                    len the length of the range; must be > 0                    
                </param>
                <param>
                    hint the index at which to begin the search, 0 <= hint < n.
                      The closer hint is to the result, the faster this method will run.                    
                </param>
                <param>
                    c the comparator used to order the range, and to search                    
                </param>
                <return>
                    the int k,  0 <= k <= n such that a[b + k - 1] <= key < a[b + k]                    
                </return>
            </javadoc>
            <method name="gallopRight" type="int" line="388">
                <params>
                    <param name="key" type="T"/>
                    <param name="a" type="T[]"/>
                    <param name="base" type="int"/>
                    <param name="len" type="int"/>
                    <param name="hint" type="int"/>
                    <param name="c" type="Comparator<? super T>"/>
                </params>
            </method>
            <javadoc line="425">
                Merges two adjacent runs in place, in a stable fashion.  The first
                  element of the first run must be greater than the first element of the
                  second run (a[base1] &gt; a[base2]), and the last element of the first run
                  (a[base1 + len1-1]) must be greater than all elements of the second run.
                  For performance, this method should be called only when len1 &lt;= len2;
                  its twin, mergeHi should be called if len1 &gt;= len2.  (Either method
                  may be called if len1 == len2.)                
                <param>
                    base1 index of first element in first run to be merged                    
                </param>
                <param>
                    len1  length of first run to be merged (must be > 0)                    
                </param>
                <param>
                    base2 index of first element in second run to be merged
                      (must be aBase + aLen)                    
                </param>
                <param>
                    len2  length of second run to be merged (must be > 0)                    
                </param>
            </javadoc>
            <method name="mergeLo" type="void" line="439">
                <params>
                    <param name="base1" type="int"/>
                    <param name="len1" type="int"/>
                    <param name="base2" type="int"/>
                    <param name="len2" type="int"/>
                </params>
            </method>
            <javadoc line="521">
                Like mergeLo, except that this method should be called only if
                  len1 &gt;= len2; mergeLo should be called if len1 &lt;= len2.  (Either method
                  may be called if len1 == len2.)                
                <param>
                    base1 index of first element in first run to be merged                    
                </param>
                <param>
                    len1  length of first run to be merged (must be > 0)                    
                </param>
                <param>
                    base2 index of first element in second run to be merged
                      (must be aBase + aLen)                    
                </param>
                <param>
                    len2  length of second run to be merged (must be > 0)                    
                </param>
            </javadoc>
            <method name="mergeHi" type="void" line="531">
                <params>
                    <param name="base1" type="int"/>
                    <param name="len1" type="int"/>
                    <param name="base2" type="int"/>
                    <param name="len2" type="int"/>
                </params>
            </method>
            <javadoc line="617">
                Ensures that the external array tmp has at least the specified
                  number of elements, increasing its size if necessary.  The size
                  increases exponentially to ensure amortized linear time complexity.                
                <param>
                    minCapacity the minimum required capacity of the tmp array                    
                </param>
                <return>
                    tmp, whether or not it grew                    
                </return>
            </javadoc>
            <method name="ensureCapacity" type="T[]" line="624">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <scope line="625">
                    <declaration name="newSize" type="int" line="626"/>
                    <declaration name="newArray" type="T[]" line="635"/>
                </scope>
            </method>
            <javadoc line="640">
                Checks that fromIndex and toIndex are in range, and throws an
                  appropriate exception if they aren&apos;t.                
                <param>
                    arrayLen the length of the array                    
                </param>
                <param>
                    fromIndex the index of the first element of the range                    
                </param>
                <param>
                    toIndex the index after the last element of the range                    
                </param>
                <throws>
                    IllegalArgumentException if fromIndex > toIndex                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if fromIndex < 0
                      or toIndex > arrayLen                    
                </throws>
            </javadoc>
            <method name="rangeCheck" type="void" line="650">
                <params>
                    <param name="arrayLen" type="int"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
        </class>
    </source>