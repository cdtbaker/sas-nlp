<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="NavigableMap">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <implements interface="SortedMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="2">
                A {@link SortedMap} extended with navigation methods returning the
                  closest matches for given search targets. Methods{@code lowerEntry}, {@code floorEntry}, {@code ceilingEntry},
                  and {@code higherEntry} return {@code Map.Entry} objects
                  associated with keys respectively less than, less than or equal,
                  greater than or equal, and greater than a given key, returning{@code null} if there is no such key.  Similarly, methods{@code lowerKey}, {@code floorKey}, {@code ceilingKey}, and{@code higherKey} return only the associated keys. All of these
                  methods are designed for locating, not traversing entries.
                  &lt;p&gt;A {@code NavigableMap} may be accessed and traversed in either
                  ascending or descending key order.  The {@code descendingMap}method returns a view of the map with the senses of all relational
                  and directional methods inverted. The performance of ascending
                  operations and views is likely to be faster than that of descending
                  ones.  Methods {@code subMap}, {@code headMap},
                  and {@code tailMap} differ from the like-named {@codeSortedMap} methods in accepting additional arguments describing
                  whether lower and upper bounds are inclusive versus exclusive.
                  Submaps of any {@code NavigableMap} must implement the {@codeNavigableMap} interface.
                  &lt;p&gt;This interface additionally defines methods {@code firstEntry},{@code pollFirstEntry}, {@code lastEntry}, and{@code pollLastEntry} that return and/or remove the least and
                  greatest mappings, if any exist, else returning {@code null}.
                  &lt;p&gt;Implementations of entry-returning methods are expected to
                  return {@code Map.Entry} pairs representing snapshots of mappings
                  at the time they were produced, and thus generally do &lt;em&gt;not&lt;/em&gt;
                  support the optional {@code Entry.setValue} method. Note however
                  that it is possible to change mappings in the associated map using
                  method {@code put}.
                  &lt;p&gt;Methods{@link #subMap(Object,Object) subMap(K, K)},{@link #headMap(Object) headMap(K)}, and{@link #tailMap(Object) tailMap(K)}are specified to return {@code SortedMap} to allow existing
                  implementations of {@code SortedMap} to be compatibly retrofitted to
                  implement {@code NavigableMap}, but extensions and implementations
                  of this interface are encouraged to override these methods to return{@code NavigableMap}.  Similarly,{@link #keySet()} can be overriden to return {@code NavigableSet}.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Doug Lea                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <param>
                    &lt;K&gt;
                      the type of keys maintained by this map                    
                </param>
                <param>
                    &lt;V&gt;
                      the type of mapped values                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lowerEntry" type="Map.Entry&lt;K,V&gt;" line="41"/>
            <javadoc line="41">
                Returns a key-value mapping associated with the greatest key
                  strictly less than the given key, or {@code null} if there is
                  no such key.                
                <param>
                    key the key                    
                </param>
                <return>
                    an entry with the greatest key less than {@code key},
                      or {@code null} if there is no such key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map does not permit null keys                    
                </throws>
            </javadoc>
            <method name="lowerKey" type="K" line="54"/>
            <javadoc line="54">
                Returns the greatest key strictly less than the given key, or{@code null} if there is no such key.                
                <param>
                    key the key                    
                </param>
                <return>
                    the greatest key less than {@code key},
                      or {@code null} if there is no such key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map does not permit null keys                    
                </throws>
            </javadoc>
            <method name="floorEntry" type="Map.Entry&lt;K,V&gt;" line="65"/>
            <javadoc line="65">
                Returns a key-value mapping associated with the greatest key
                  less than or equal to the given key, or {@code null} if there
                  is no such key.                
                <param>
                    key the key                    
                </param>
                <return>
                    an entry with the greatest key less than or equal to{@code key}, or {@code null} if there is no such key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map does not permit null keys                    
                </throws>
            </javadoc>
            <method name="floorKey" type="K" line="77"/>
            <javadoc line="77">
                Returns the greatest key less than or equal to the given key,
                  or {@code null} if there is no such key.                
                <param>
                    key the key                    
                </param>
                <return>
                    the greatest key less than or equal to {@code key},
                      or {@code null} if there is no such key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map does not permit null keys                    
                </throws>
            </javadoc>
            <method name="ceilingEntry" type="Map.Entry&lt;K,V&gt;" line="89"/>
            <javadoc line="89">
                Returns a key-value mapping associated with the least key
                  greater than or equal to the given key, or {@code null} if
                  there is no such key.                
                <param>
                    key the key                    
                </param>
                <return>
                    an entry with the least key greater than or equal to{@code key}, or {@code null} if there is no such key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map does not permit null keys                    
                </throws>
            </javadoc>
            <method name="ceilingKey" type="K" line="101"/>
            <javadoc line="101">
                Returns the least key greater than or equal to the given key,
                  or {@code null} if there is no such key.                
                <param>
                    key the key                    
                </param>
                <return>
                    the least key greater than or equal to {@code key},
                      or {@code null} if there is no such key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map does not permit null keys                    
                </throws>
            </javadoc>
            <method name="higherEntry" type="Map.Entry&lt;K,V&gt;" line="113"/>
            <javadoc line="113">
                Returns a key-value mapping associated with the least key
                  strictly greater than the given key, or {@code null} if there
                  is no such key.                
                <param>
                    key the key                    
                </param>
                <return>
                    an entry with the least key greater than {@code key},
                      or {@code null} if there is no such key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map does not permit null keys                    
                </throws>
            </javadoc>
            <method name="higherKey" type="K" line="126"/>
            <javadoc line="126">
                Returns the least key strictly greater than the given key, or{@code null} if there is no such key.                
                <param>
                    key the key                    
                </param>
                <return>
                    the least key greater than {@code key},
                      or {@code null} if there is no such key                    
                </return>
                <throws>
                    ClassCastException if the specified key cannot be compared
                      with the keys currently in the map                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null
                      and this map does not permit null keys                    
                </throws>
            </javadoc>
            <method name="firstEntry" type="Map.Entry&lt;K,V&gt;" line="137"/>
            <javadoc line="137">
                Returns a key-value mapping associated with the least
                  key in this map, or {@code null} if the map is empty.                
                <return>
                    an entry with the least key,
                      or {@code null} if this map is empty                    
                </return>
            </javadoc>
            <method name="lastEntry" type="Map.Entry&lt;K,V&gt;" line="144"/>
            <javadoc line="144">
                Returns a key-value mapping associated with the greatest
                  key in this map, or {@code null} if the map is empty.                
                <return>
                    an entry with the greatest key,
                      or {@code null} if this map is empty                    
                </return>
            </javadoc>
            <method name="pollFirstEntry" type="Map.Entry&lt;K,V&gt;" line="151"/>
            <javadoc line="151">
                Removes and returns a key-value mapping associated with
                  the least key in this map, or {@code null} if the map is empty.                
                <return>
                    the removed first entry of this map,
                      or {@code null} if this map is empty                    
                </return>
            </javadoc>
            <method name="pollLastEntry" type="Map.Entry&lt;K,V&gt;" line="158"/>
            <javadoc line="158">
                Removes and returns a key-value mapping associated with
                  the greatest key in this map, or {@code null} if the map is empty.                
                <return>
                    the removed last entry of this map,
                      or {@code null} if this map is empty                    
                </return>
            </javadoc>
            <method name="descendingMap" type="NavigableMap&lt;K,V&gt;" line="165"/>
            <javadoc line="165">
                Returns a reverse order view of the mappings contained in this map.
                  The descending map is backed by this map, so changes to the map are
                  reflected in the descending map, and vice-versa.  If either map is
                  modified while an iteration over a collection view of either map
                  is in progress (except through the iterator&apos;s own {@code remove}operation), the results of the iteration are undefined.
                  &lt;p&gt;The returned map has an ordering equivalent to
                  &lt;tt&gt;{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())&lt;/tt&gt;.
                  The expression {@code m.descendingMap().descendingMap()} returns a
                  view of {@code m} essentially equivalent to {@code m}.                
                <return>
                    a reverse order view of this map                    
                </return>
            </javadoc>
            <method name="navigableKeySet" type="NavigableSet&lt;K&gt;" line="178"/>
            <javadoc line="178">
                Returns a {@link NavigableSet} view of the keys contained in this map.
                  The set&apos;s iterator returns the keys in ascending order.
                  The set is backed by the map, so changes to the map are reflected in
                  the set, and vice-versa.  If the map is modified while an iteration
                  over the set is in progress (except through the iterator&apos;s own {@coderemove} operation), the results of the iteration are undefined.  The
                  set supports element removal, which removes the corresponding mapping
                  from the map, via the {@code Iterator.remove}, {@code Set.remove},{@code removeAll}, {@code retainAll}, and {@code clear} operations.
                  It does not support the {@code add} or {@code addAll} operations.                
                <return>
                    a navigable set view of the keys in this map                    
                </return>
            </javadoc>
            <method name="descendingKeySet" type="NavigableSet&lt;K&gt;" line="190"/>
            <javadoc line="190">
                Returns a reverse order {@link NavigableSet} view of the keys contained in this map.
                  The set&apos;s iterator returns the keys in descending order.
                  The set is backed by the map, so changes to the map are reflected in
                  the set, and vice-versa.  If the map is modified while an iteration
                  over the set is in progress (except through the iterator&apos;s own {@coderemove} operation), the results of the iteration are undefined.  The
                  set supports element removal, which removes the corresponding mapping
                  from the map, via the {@code Iterator.remove}, {@code Set.remove},{@code removeAll}, {@code retainAll}, and {@code clear} operations.
                  It does not support the {@code add} or {@code addAll} operations.                
                <return>
                    a reverse order navigable set view of the keys in this map                    
                </return>
            </javadoc>
            <method name="subMap" type="NavigableMap&lt;K,V&gt;" line="202"/>
            <javadoc line="202">
                Returns a view of the portion of this map whose keys range from{@code fromKey} to {@code toKey}.  If {@code fromKey} and{@code toKey} are equal, the returned map is empty unless{@code fromInclusive} and {@code toInclusive} are both true.  The
                  returned map is backed by this map, so changes in the returned map are
                  reflected in this map, and vice-versa.  The returned map supports all
                  optional map operations that this map supports.
                  &lt;p&gt;The returned map will throw an {@code IllegalArgumentException}on an attempt to insert a key outside of its range, or to construct a
                  submap either of whose endpoints lie outside its range.                
                <param>
                    fromKey low endpoint of the keys in the returned map                    
                </param>
                <param>
                    fromInclusive {@code true} if the low endpoint
                      is to be included in the returned view                    
                </param>
                <param>
                    toKey high endpoint of the keys in the returned map                    
                </param>
                <param>
                    toInclusive {@code true} if the high endpoint
                      is to be included in the returned view                    
                </param>
                <return>
                    a view of the portion of this map whose keys range from{@code fromKey} to {@code toKey}                    
                </return>
                <throws>
                    ClassCastException if {@code fromKey} and {@code toKey}cannot be compared to one another using this map&apos;s comparator
                      (or, if the map has no comparator, using natural ordering).
                      Implementations may, but are not required to, throw this
                      exception if {@code fromKey} or {@code toKey}cannot be compared to keys currently in the map.                    
                </throws>
                <throws>
                    NullPointerException if {@code fromKey} or {@code toKey}is null and this map does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code fromKey} is greater than{@code toKey}; or if this map itself has a restricted
                      range, and {@code fromKey} or {@code toKey} lies
                      outside the bounds of the range                    
                </throws>
            </javadoc>
            <method name="headMap" type="NavigableMap&lt;K,V&gt;" line="226"/>
            <javadoc line="226">
                Returns a view of the portion of this map whose keys are less than (or
                  equal to, if {@code inclusive} is true) {@code toKey}.  The returned
                  map is backed by this map, so changes in the returned map are reflected
                  in this map, and vice-versa.  The returned map supports all optional
                  map operations that this map supports.
                  &lt;p&gt;The returned map will throw an {@code IllegalArgumentException}on an attempt to insert a key outside its range.                
                <param>
                    toKey high endpoint of the keys in the returned map                    
                </param>
                <param>
                    inclusive {@code true} if the high endpoint
                      is to be included in the returned view                    
                </param>
                <return>
                    a view of the portion of this map whose keys are less than
                      (or equal to, if {@code inclusive} is true) {@code toKey}                    
                </return>
                <throws>
                    ClassCastException if {@code toKey} is not compatible
                      with this map&apos;s comparator (or, if the map has no comparator,
                      if {@code toKey} does not implement {@link Comparable}).
                      Implementations may, but are not required to, throw this
                      exception if {@code toKey} cannot be compared to keys
                      currently in the map.                    
                </throws>
                <throws>
                    NullPointerException if {@code toKey} is null
                      and this map does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException if this map itself has a
                      restricted range, and {@code toKey} lies outside the
                      bounds of the range                    
                </throws>
            </javadoc>
            <method name="tailMap" type="NavigableMap&lt;K,V&gt;" line="251"/>
            <javadoc line="251">
                Returns a view of the portion of this map whose keys are greater than (or
                  equal to, if {@code inclusive} is true) {@code fromKey}.  The returned
                  map is backed by this map, so changes in the returned map are reflected
                  in this map, and vice-versa.  The returned map supports all optional
                  map operations that this map supports.
                  &lt;p&gt;The returned map will throw an {@code IllegalArgumentException}on an attempt to insert a key outside its range.                
                <param>
                    fromKey low endpoint of the keys in the returned map                    
                </param>
                <param>
                    inclusive {@code true} if the low endpoint
                      is to be included in the returned view                    
                </param>
                <return>
                    a view of the portion of this map whose keys are greater than
                      (or equal to, if {@code inclusive} is true) {@code fromKey}                    
                </return>
                <throws>
                    ClassCastException if {@code fromKey} is not compatible
                      with this map&apos;s comparator (or, if the map has no comparator,
                      if {@code fromKey} does not implement {@link Comparable}).
                      Implementations may, but are not required to, throw this
                      exception if {@code fromKey} cannot be compared to keys
                      currently in the map.                    
                </throws>
                <throws>
                    NullPointerException if {@code fromKey} is null
                      and this map does not permit null keys                    
                </throws>
                <throws>
                    IllegalArgumentException if this map itself has a
                      restricted range, and {@code fromKey} lies outside the
                      bounds of the range                    
                </throws>
            </javadoc>
            <method name="subMap" type="SortedMap&lt;K,V&gt;" line="276"/>
            <javadoc line="276">
                {@inheritDoc}&lt;p&gt;Equivalent to {@code subMap(fromKey, true, toKey, false)}.                
                <throws>
                    ClassCastException       {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException     {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="headMap" type="SortedMap&lt;K,V&gt;" line="283"/>
            <javadoc line="283">
                {@inheritDoc}&lt;p&gt;Equivalent to {@code headMap(toKey, false)}.                
                <throws>
                    ClassCastException       {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException     {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="tailMap" type="SortedMap&lt;K,V&gt;" line="290"/>
            <javadoc line="290">
                {@inheritDoc}&lt;p&gt;Equivalent to {@code tailMap(fromKey, true)}.                
                <throws>
                    ClassCastException       {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException     {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
        </interface>
    </source>