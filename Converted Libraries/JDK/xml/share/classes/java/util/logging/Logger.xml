<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.util"/>
        <import package="java.util.concurrent.CopyOnWriteArrayList"/>
        <import package="java.security"/>
        <import package="java.lang.ref.WeakReference"/>
        <class name="Logger" line="34">
            <comment line="180">
                Cached resource bundle                
            </comment>
            <comment line="181">
                name associated with catalog                
            </comment>
            <comment line="182">
                locale associated with catalog                
            </comment>
            <comment line="184">
                The fields relating to parent-child relationships and levels
                 are managed under a separate lock, the treeLock.                
            </comment>
            <comment line="187">
                We keep weak references from parents to children, but strong
                 references from children to parents.                
            </comment>
            <comment line="189">
                our nearest parent.                
            </comment>
            <comment line="190">
                WeakReferences to loggers that have us as parent                
            </comment>
            <comment line="192">
                current effective level value                
            </comment>
            <comment line="262">
                This constructor is used only to create the global Logger.
                 It is needed to break a cyclic dependence between the LogManager
                 and Logger static initializers causing deadlocks.                
            </comment>
            <comment line="271">
                It is called from the LogManager.&lt;clinit&gt; to complete
                 initialization of the global Logger.                
            </comment>
            <comment line="534">
                private support method for logging.
                 We fill in the logger name, resource bundle name, and
                 resource bundle and then call &quot;void log(LogRecord)&quot;.                
            </comment>
            <comment line="548">
                ================================================================
                 Start of convenience methods WITHOUT className and methodName
                ================================================================                
            </comment>
            <comment line="636">
                ================================================================
                 Start of convenience methods WITH className and methodName
                ================================================================                
            </comment>
            <comment line="748">
                =========================================================================
                 Start of convenience methods WITH className, methodName and bundle name.
                =========================================================================                
            </comment>
            <comment line="752">
                Private support method for logging for &quot;logrb&quot; methods.
                 We fill in the logger name, resource bundle name, and
                 resource bundle and then call &quot;void log(LogRecord)&quot;.                
            </comment>
            <comment line="898">
                ======================================================================
                 Start of convenience methods for logging method entries and returns.
                ======================================================================                
            </comment>
            <comment line="1037">
                =======================================================================
                 Start of simple convenience methods using level names as method names
                =======================================================================                
            </comment>
            <comment line="1153">
                ================================================================
                 End of convenience methods
                ================================================================                
            </comment>
            <comment line="1283">
                Private utility method to map a resource bundle name to an
                 actual resource bundle, using a simple one-entry cache.
                 Returns null for a null name.
                 May also return null if we can&apos;t find the resource bundle and
                 there is no suitable previous cached value.                
            </comment>
            <comment line="1356">
                Private utility method to initialize our one entry
                 resource bundle cache.
                 Note: for consistency reasons, we are careful to check
                 that a suitable ResourceBundle exists before setting the
                 ResourceBundleName.                
            </comment>
            <comment line="1413">
                Private method to do the work for parenting a child
                 Logger onto a parent logger.                
            </comment>
            <comment line="1459">
                Package-level method.
                 Remove the weak reference for the specified child Logger from the
                 kid list. We should only be called from LoggerWeakRef.dispose().                
            </comment>
            <comment line="1474">
                Recalculate the effective level for this node and
                 recursively for our children.                
            </comment>
            <comment line="1515">
                Private method to get the potentially inherited
                 resource bundle name for this Logger.
                 May return null                
            </comment>
            <javadoc line="34">
                A Logger object is used to log messages for a specific
                  system or application component.  Loggers are normally named,
                  using a hierarchical dot-separated namespace.  Logger names
                  can be arbitrary strings, but they should normally be based on
                  the package name or class name of the logged component, such
                  as java.net or javax.swing.  In addition it is possible to create
                  &quot;anonymous&quot; Loggers that are not stored in the Logger namespace.
                  &lt;p&gt;
                  Logger objects may be obtained by calls on one of the getLogger
                  factory methods.  These will either create a new Logger or
                  return a suitable existing Logger. It is important to note that
                  the Logger returned by one of the {@code getLogger} factory methods
                  may be garbage collected at any time if a strong reference to the
                  Logger is not kept.
                  &lt;p&gt;
                  Logging messages will be forwarded to registered Handler
                  objects, which can forward the messages to a variety of
                  destinations, including consoles, files, OS logs, etc.
                  &lt;p&gt;
                  Each Logger keeps track of a &quot;parent&quot; Logger, which is its
                  nearest existing ancestor in the Logger namespace.
                  &lt;p&gt;
                  Each Logger has a &quot;Level&quot; associated with it.  This reflects
                  a minimum Level that this logger cares about.  If a Logger&apos;s
                  level is set to &lt;tt&gt;null&lt;/tt&gt;, then its effective level is inherited
                  from its parent, which may in turn obtain it recursively from its
                  parent, and so on up the tree.
                  &lt;p&gt;
                  The log level can be configured based on the properties from the
                  logging configuration file, as described in the description
                  of the LogManager class.  However it may also be dynamically changed
                  by calls on the Logger.setLevel method.  If a logger&apos;s level is
                  changed the change may also affect child loggers, since any child
                  logger that has &lt;tt&gt;null&lt;/tt&gt; as its level will inherit its
                  effective level from its parent.
                  &lt;p&gt;
                  On each logging call the Logger initially performs a cheap
                  check of the request level (e.g., SEVERE or FINE) against the
                  effective log level of the logger.  If the request level is
                  lower than the log level, the logging call returns immediately.
                  &lt;p&gt;
                  After passing this initial (cheap) test, the Logger will allocate
                  a LogRecord to describe the logging message.  It will then call a
                  Filter (if present) to do a more detailed check on whether the
                  record should be published.  If that passes it will then publish
                  the LogRecord to its output Handlers.  By default, loggers also
                  publish to their parent&apos;s Handlers, recursively up the tree.
                  &lt;p&gt;
                  Each Logger may have a ResourceBundle name associated with it.
                  The named bundle will be used for localizing logging messages.
                  If a Logger does not have its own ResourceBundle name, then
                  it will inherit the ResourceBundle name from its parent,
                  recursively up the tree.
                  &lt;p&gt;
                  Most of the logger output methods take a &quot;msg&quot; argument.  This
                  msg argument may be either a raw value or a localization key.
                  During formatting, if the logger has (or inherits) a localization
                  ResourceBundle and if the ResourceBundle has a mapping for the msg
                  string, then the msg string is replaced by the localized value.
                  Otherwise the original msg string is used.  Typically, formatters use
                  java.text.MessageFormat style formatting to format parameters, so
                  for example a format string &quot;{0} {1}&quot; would format two parameters
                  as strings.
                  &lt;p&gt;
                  When mapping ResourceBundle names to ResourceBundles, the Logger
                  will first try to use the Thread&apos;s ContextClassLoader.  If that
                  is null it will try the SystemClassLoader instead.  As a temporary
                  transition feature in the initial implementation, if the Logger is
                  unable to locate a ResourceBundle from the ContextClassLoader or
                  SystemClassLoader the Logger will also search up the class stack
                  and use successive calling ClassLoaders to try to locate a ResourceBundle.
                  (This call stack search is to allow containers to transition to
                  using ContextClassLoaders and is likely to be removed in future
                  versions.)
                  &lt;p&gt;
                  Formatting (including localization) is the responsibility of
                  the output Handler, which will typically call a Formatter.
                  &lt;p&gt;
                  Note that formatting need not occur synchronously.  It may be delayed
                  until a LogRecord is actually written to an external sink.
                  &lt;p&gt;
                  The logging methods are grouped in five main categories:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;
                  There are a set of &quot;log&quot; methods that take a log level, a message
                  string, and optionally some parameters to the message string.
                  &lt;li&gt;&lt;p&gt;
                  There are a set of &quot;logp&quot; methods (for &quot;log precise&quot;) that are
                  like the &quot;log&quot; methods, but also take an explicit source class name
                  and method name.
                  &lt;li&gt;&lt;p&gt;
                  There are a set of &quot;logrb&quot; method (for &quot;log with resource bundle&quot;)
                  that are like the &quot;logp&quot; method, but also take an explicit resource
                  bundle name for use in localizing the log message.
                  &lt;li&gt;&lt;p&gt;
                  There are convenience methods for tracing method entries (the
                  &quot;entering&quot; methods), method returns (the &quot;exiting&quot; methods) and
                  throwing exceptions (the &quot;throwing&quot; methods).
                  &lt;li&gt;&lt;p&gt;
                  Finally, there are a set of convenience methods for use in the
                  very simplest cases, when a developer simply wants to log a
                  simple string at a given log level.  These methods are named
                  after the standard Level names (&quot;severe&quot;, &quot;warning&quot;, &quot;info&quot;, etc.)
                  and take a single argument, a message string.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  For the methods that do not take an explicit source name and
                  method name, the Logging framework will make a &quot;best effort&quot;
                  to determine which class and method called into the logging method.
                  However, it is important to realize that this automatically inferred
                  information may only be approximate (or may even be quite wrong!).
                  Virtual machines are allowed to do extensive optimizations when
                  JITing and may entirely remove stack frames, making it impossible
                  to reliably locate the calling class and method.
                  &lt;P&gt;
                  All methods on Logger are multi-thread safe.
                  &lt;p&gt;
                  &lt;b&gt;Subclassing Information:&lt;/b&gt; Note that a LogManager class may
                  provide its own implementation of named Loggers for any point in
                  the namespace.  Therefore, any subclasses of Logger (unless they
                  are implemented in conjunction with a new LogManager class) should
                  take care to obtain a Logger instance from the LogManager class and
                  should delegate operations such as &quot;isLoggable&quot; and &quot;log(LogRecord)&quot;
                  to that instance.  Note that in order to intercept all logging
                  output, subclasses need only override the log(LogRecord) method.
                  All the other logging methods are implemented as calls on this
                  log(LogRecord) method.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="emptyHandlers" type="Handler" line="168"/>
            <declaration name="offValue" type="int" line="169"/>
            <declaration name="manager" type="LogManager" line="170"/>
            <declaration name="name" type="String" line="171"/>
            <declaration name="handlers" type="CopyOnWriteArrayList&lt;Handler&gt;" line="172"/>
            <declaration name="resourceBundleName" type="String" line="174"/>
            <declaration name="useParentHandlers" type="boolean" line="175"/>
            <declaration name="filter" type="Filter" line="176"/>
            <declaration name="anonymous" type="boolean" line="177"/>
            <declaration name="catalog" type="ResourceBundle" line="179"/>
            <declaration name="catalogName" type="String" line="180"/>
            <declaration name="catalogLocale" type="Locale" line="181"/>
            <declaration name="treeLock" type="Object" line="185"/>
            <declaration name="parent" type="Logger" line="188"/>
            <declaration name="kids" type="ArrayList&lt;LogManager.LoggerWeakRef&gt;" line="189"/>
            <declaration name="levelObject" type="Level" line="190"/>
            <declaration name="levelValue" type="int" line="191"/>
            <declaration name="GLOBAL_LOGGER_NAME" type="String" line="193"/>
            <javadoc line="193">
                GLOBAL_LOGGER_NAME is a name for the global logger.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="200">
                Return global logger object with the name Logger.GLOBAL_LOGGER_NAME.                
                <return>
                    global logger object                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getGlobal" type="Logger" line="206"/>
            <declaration name="global" type="Logger" line="210"/>
            <javadoc line="210">
                The &quot;global&quot; Logger object is provided as a convenience to developers
                  who are making casual use of the Logging package.  Developers
                  who are making serious use of the logging package (for example
                  in products) should create and use their own Logger objects,
                  with appropriate names, so that logging can be controlled on a
                  suitable per-Logger granularity. Developers also need to keep a
                  strong reference to their Logger objects to prevent them from
                  being garbage collected.
                  &lt;p&gt;                
                <deprecated>
                    Initialization of this field is prone to deadlocks.
                      The field must be initialized by the Logger class initialization
                      which may cause deadlocks with the LogManager class initialization.
                      In such cases two class initialization wait for each other to complete.
                      The preferred way to get the global logger object is via the call
                      <code>Logger.getGlobal()</code>.
                      For compatibility with old JDK versions where the
                      <code>Logger.getGlobal()</code> is not available use the call
                      <code>Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)</code>
                      or <code>Logger.getLogger("global")</code>.                    
                </deprecated>
            </javadoc>
            <javadoc line="234">
                Protected method to construct a logger for a named subsystem.
                  &lt;p&gt;
                  The logger will be initially configured with a null Level
                  and with useParentHandlers set to true.                
                <param>
                    name    A name for the logger.  This should
                      be a dot-separated name and should normally
                      be based on the package name or class name
                      of the subsystem, such as java.net
                      or javax.swing.  It may be null for anonymous Loggers.                    
                </param>
                <param>
                    resourceBundleName  name of ResourceBundle to be used for localizing
                      messages for this logger.  May be null if none
                      of the messages require localization.                    
                </param>
                <throws>
                    MissingResourceException if the resourceBundleName is non-null and
                      no corresponding resource can be found.                    
                </throws>
            </javadoc>
            <method name="Logger" type="constructor" line="251">
                <params>
                    <param name="name" type="String"/>
                    <param name="resourceBundleName" type="String"/>
                </params>
                <comment line="255">
                    Note: we may get a MissingResourceException here.                    
                </comment>
                <scope line="253"/>
            </method>
            <method name="Logger" type="constructor" line="264">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="266">
                    The manager field is not initialized here.                    
                </comment>
            </method>
            <method name="setLogManager" type="void" line="272">
                <params>
                    <param name="manager" type="LogManager"/>
                </params>
            </method>
            <method name="checkAccess" type="void" line="276">
                <comment line="280">
                    Complete initialization of the global Logger.                    
                </comment>
                <scope line="277">
                    <scope line="278"/>
                </scope>
            </method>
            <javadoc line="286">
                Find or create a logger for a named subsystem.  If a logger has
                  already been created with the given name it is returned.  Otherwise
                  a new logger is created.
                  &lt;p&gt;
                  If a new logger is created its log level will be configured
                  based on the LogManager configuration and it will configured
                  to also send logging output to its parent&apos;s Handlers.  It will
                  be registered in the LogManager global namespace.
                  &lt;p&gt;
                  Note: The LogManager may only retain a weak reference to the newly
                  created Logger. It is important to understand that a previously
                  created Logger with the given name may be garbage collected at any
                  time if there is no strong reference to the Logger. In particular,
                  this means that two back-to-back calls like{@code getLogger(&quot;MyLogger&quot;).log(...)} may use different Logger
                  objects named &quot;MyLogger&quot; if there is no strong reference to the
                  Logger named &quot;MyLogger&quot; elsewhere in the program.                
                <param>
                    name            A name for the logger.  This should
                      be a dot-separated name and should normally
                      be based on the package name or class name
                      of the subsystem, such as java.net
                      or javax.swing                    
                </param>
                <return>
                    a suitable Logger                    
                </return>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
            </javadoc>
            <method name="getLogger" type="Logger" line="316">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="315">
                    Synchronization is not required here. All synchronization for
                     adding a new Logger object is handled by LogManager.addLogger().                    
                </comment>
                <comment line="318">
                    This method is intentionally not a wrapper around a call
                     to getLogger(name, resourceBundleName). If it were then
                     this sequence:
                    
                         getLogger(&quot;Foo&quot;, &quot;resourceBundleForFoo&quot;);
                         getLogger(&quot;Foo&quot;);
                    
                     would throw an IllegalArgumentException in the second call
                     because the wrapper would result in an attempt to replace
                     the existing &quot;resourceBundleForFoo&quot; with null.                    
                </comment>
                <declaration name="manager" type="LogManager" line="327"/>
            </method>
            <javadoc line="331">
                Find or create a logger for a named subsystem.  If a logger has
                  already been created with the given name it is returned.  Otherwise
                  a new logger is created.
                  &lt;p&gt;
                  If a new logger is created its log level will be configured
                  based on the LogManager and it will configured to also send logging
                  output to its parent&apos;s Handlers.  It will be registered in
                  the LogManager global namespace.
                  &lt;p&gt;
                  Note: The LogManager may only retain a weak reference to the newly
                  created Logger. It is important to understand that a previously
                  created Logger with the given name may be garbage collected at any
                  time if there is no strong reference to the Logger. In particular,
                  this means that two back-to-back calls like{@code getLogger(&quot;MyLogger&quot;, ...).log(...)} may use different Logger
                  objects named &quot;MyLogger&quot; if there is no strong reference to the
                  Logger named &quot;MyLogger&quot; elsewhere in the program.
                  &lt;p&gt;
                  If the named Logger already exists and does not yet have a
                  localization resource bundle then the given resource bundle
                  name is used.  If the named Logger already exists and has
                  a different resource bundle name then an IllegalArgumentException
                  is thrown.
                  &lt;p&gt;                
                <param>
                    name    A name for the logger.  This should
                      be a dot-separated name and should normally
                      be based on the package name or class name
                      of the subsystem, such as java.net
                      or javax.swing                    
                </param>
                <param>
                    resourceBundleName  name of ResourceBundle to be used for localizing
                      messages for this logger. May be <CODE>null</CODE> if none of
                      the messages require localization.                    
                </param>
                <return>
                    a suitable Logger                    
                </return>
                <throws>
                    MissingResourceException if the resourceBundleName is non-null and
                      no corresponding resource can be found.                    
                </throws>
                <throws>
                    IllegalArgumentException if the Logger already exists and uses
                      a different resource bundle name.                    
                </throws>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
            </javadoc>
            <method name="getLogger" type="Logger" line="374">
                <params>
                    <param name="name" type="String"/>
                    <param name="resourceBundleName" type="String"/>
                </params>
                <comment line="373">
                    Synchronization is not required here. All synchronization for
                     adding a new Logger object is handled by LogManager.addLogger().                    
                </comment>
                <comment line="379">
                    Note: we may get a MissingResourceException here.                    
                </comment>
                <declaration name="manager" type="LogManager" line="375"/>
                <declaration name="result" type="Logger" line="376"/>
                <scope line="377"/>
                <scope line="380"/>
            </method>
            <javadoc line="388">
                Create an anonymous Logger.  The newly created Logger is not
                  registered in the LogManager namespace.  There will be no
                  access checks on updates to the logger.
                  &lt;p&gt;
                  This factory method is primarily intended for use from applets.
                  Because the resulting Logger is anonymous it can be kept private
                  by the creating class.  This removes the need for normal security
                  checks, which in turn allows untrusted applet code to update
                  the control state of the Logger.  For example an applet can do
                  a setLevel or an addHandler on an anonymous Logger.
                  &lt;p&gt;
                  Even although the new logger is anonymous, it is configured
                  to have the root logger (&quot;&quot;) as its parent.  This means that
                  by default it inherits its effective level and handlers
                  from the root logger.
                  &lt;p&gt;                
                <return>
                    a newly created private Logger                    
                </return>
            </javadoc>
            <method name="getAnonymousLogger" type="Logger" line="408"/>
            <javadoc line="412">
                Create an anonymous Logger.  The newly created Logger is not
                  registered in the LogManager namespace.  There will be no
                  access checks on updates to the logger.
                  &lt;p&gt;
                  This factory method is primarily intended for use from applets.
                  Because the resulting Logger is anonymous it can be kept private
                  by the creating class.  This removes the need for normal security
                  checks, which in turn allows untrusted applet code to update
                  the control state of the Logger.  For example an applet can do
                  a setLevel or an addHandler on an anonymous Logger.
                  &lt;p&gt;
                  Even although the new logger is anonymous, it is configured
                  to have the root logger (&quot;&quot;) as its parent.  This means that
                  by default it inherits its effective level and handlers
                  from the root logger.
                  &lt;p&gt;                
                <param>
                    resourceBundleName  name of ResourceBundle to be used for localizing
                      messages for this logger.
                      May be null if none of the messages require localization.                    
                </param>
                <return>
                    a newly created private Logger                    
                </return>
                <throws>
                    MissingResourceException if the resourceBundleName is non-null and
                      no corresponding resource can be found.                    
                </throws>
            </javadoc>
            <method name="getAnonymousLogger" type="Logger" line="439">
                <params>
                    <param name="resourceBundleName" type="String"/>
                </params>
                <comment line="438">
                    Synchronization is not required here. All synchronization for
                     adding a new anonymous Logger object is handled by doSetParent().                    
                </comment>
                <comment line="442">
                    cleanup some Loggers that have been GC&apos;ed                    
                </comment>
                <declaration name="manager" type="LogManager" line="440"/>
                <declaration name="result" type="Logger" line="443"/>
                <declaration name="root" type="Logger" line="445"/>
            </method>
            <javadoc line="450">
                Retrieve the localization resource bundle for this
                  logger for the current default locale.  Note that if
                  the result is null, then the Logger will use a resource
                  bundle inherited from its parent.                
                <return>
                    localization bundle (may be null)                    
                </return>
            </javadoc>
            <method name="getResourceBundle" type="ResourceBundle" line="458"/>
            <javadoc line="462">
                Retrieve the localization resource bundle name for this
                  logger.  Note that if the result is null, then the Logger
                  will use a resource bundle name inherited from its parent.                
                <return>
                    localization bundle name (may be null)                    
                </return>
            </javadoc>
            <method name="getResourceBundleName" type="String" line="469"/>
            <javadoc line="473">
                Set a filter to control output on this Logger.
                  &lt;P&gt;
                  After passing the initial &quot;level&quot; check, the Logger will
                  call this Filter to check if a log record should really
                  be published.                
                <param>
                    newFilter  a filter object (may be null)                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have LoggingPermission("control").                    
                </exception>
            </javadoc>
            <method name="setFilter" type="void" line="484">
                <params>
                    <param name="newFilter" type="Filter"/>
                </params>
            </method>
            <javadoc line="489">
                Get the current filter for this Logger.                
                <return>
                    a filter object (may be null)                    
                </return>
            </javadoc>
            <method name="getFilter" type="Filter" line="494"/>
            <javadoc line="498">
                Log a LogRecord.
                  &lt;p&gt;
                  All the other logging methods in this class call through
                  this method to actually perform any logging.  Subclasses can
                  override this single method to capture all log activity.                
                <param>
                    record the LogRecord to be published                    
                </param>
            </javadoc>
            <method name="log" type="void" line="507">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <comment line="517">
                    Post the LogRecord to all our Handlers, and then to
                     our parents&apos; handlers, all the way up the tree.                    
                </comment>
                <scope line="508"/>
                <declaration name="theFilter" type="Filter" line="511"/>
                <scope line="512"/>
                <declaration name="logger" type="Logger" line="519"/>
                <scope line="520">
                    <scope line="521"/>
                    <scope line="525"/>
                </scope>
            </method>
            <method name="doLog" type="void" line="536">
                <params>
                    <param name="lr" type="LogRecord"/>
                </params>
                <declaration name="ebname" type="String" line="538"/>
                <scope line="539"/>
            </method>
            <javadoc line="551">
                Log a message, with no arguments.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="log" type="void" line="561">
                <params>
                    <param name="level" type="Level"/>
                    <param name="msg" type="String"/>
                </params>
                <scope line="562"/>
                <declaration name="lr" type="LogRecord" line="565"/>
            </method>
            <javadoc line="569">
                Log a message, with one object parameter.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then a corresponding LogRecord is created and forwarded
                  to all the registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
                <param>
                    param1  parameter to the message                    
                </param>
            </javadoc>
            <method name="log" type="void" line="580">
                <params>
                    <param name="level" type="Level"/>
                    <param name="msg" type="String"/>
                    <param name="param1" type="Object"/>
                </params>
                <scope line="581"/>
                <declaration name="lr" type="LogRecord" line="584"/>
                <declaration name="params" type="Object" line="585"/>
            </method>
            <javadoc line="590">
                Log a message, with an array of object arguments.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then a corresponding LogRecord is created and forwarded
                  to all the registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
                <param>
                    params  array of parameters to the message                    
                </param>
            </javadoc>
            <method name="log" type="void" line="601">
                <params>
                    <param name="level" type="Level"/>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
                <scope line="602"/>
                <declaration name="lr" type="LogRecord" line="605"/>
            </method>
            <javadoc line="610">
                Log a message, with associated Throwable information.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then the given arguments are stored in a LogRecord
                  which is forwarded to all registered output handlers.
                  &lt;p&gt;
                  Note that the thrown argument is stored in the LogRecord thrown
                  property, rather than the LogRecord parameters property.  Thus is it
                  processed specially by output Formatters and is not treated
                  as a formatting parameter to the LogRecord message property.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
                <param>
                    thrown  Throwable associated with log message.                    
                </param>
            </javadoc>
            <method name="log" type="void" line="626">
                <params>
                    <param name="level" type="Level"/>
                    <param name="msg" type="String"/>
                    <param name="thrown" type="Throwable"/>
                </params>
                <scope line="627"/>
                <declaration name="lr" type="LogRecord" line="630"/>
            </method>
            <javadoc line="639">
                Log a message, specifying source class and method,
                  with no arguments.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that issued the logging request                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="logp" type="void" line="652">
                <params>
                    <param name="level" type="Level"/>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="msg" type="String"/>
                </params>
                <scope line="653"/>
                <declaration name="lr" type="LogRecord" line="656"/>
            </method>
            <javadoc line="662">
                Log a message, specifying source class and method,
                  with a single object parameter to the log message.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then a corresponding LogRecord is created and forwarded
                  to all the registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that issued the logging request                    
                </param>
                <param>
                    msg      The string message (or a key in the message catalog)                    
                </param>
                <param>
                    param1    Parameter to the log message.                    
                </param>
            </javadoc>
            <method name="logp" type="void" line="677">
                <params>
                    <param name="level" type="Level"/>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="msg" type="String"/>
                    <param name="param1" type="Object"/>
                </params>
                <scope line="678"/>
                <declaration name="lr" type="LogRecord" line="681"/>
                <declaration name="params" type="Object" line="684"/>
            </method>
            <javadoc line="689">
                Log a message, specifying source class and method,
                  with an array of object arguments.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then a corresponding LogRecord is created and forwarded
                  to all the registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that issued the logging request                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
                <param>
                    params  Array of parameters to the message                    
                </param>
            </javadoc>
            <method name="logp" type="void" line="704">
                <params>
                    <param name="level" type="Level"/>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
                <scope line="705"/>
                <declaration name="lr" type="LogRecord" line="708"/>
            </method>
            <javadoc line="715">
                Log a message, specifying source class and method,
                  with associated Throwable information.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then the given arguments are stored in a LogRecord
                  which is forwarded to all registered output handlers.
                  &lt;p&gt;
                  Note that the thrown argument is stored in the LogRecord thrown
                  property, rather than the LogRecord parameters property.  Thus is it
                  processed specially by output Formatters and is not treated
                  as a formatting parameter to the LogRecord message property.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that issued the logging request                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
                <param>
                    thrown  Throwable associated with log message.                    
                </param>
            </javadoc>
            <method name="logp" type="void" line="735">
                <params>
                    <param name="level" type="Level"/>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="msg" type="String"/>
                    <param name="thrown" type="Throwable"/>
                </params>
                <scope line="736"/>
                <declaration name="lr" type="LogRecord" line="739"/>
            </method>
            <method name="doLog" type="void" line="754">
                <params>
                    <param name="lr" type="LogRecord"/>
                    <param name="rbname" type="String"/>
                </params>
                <scope line="756"/>
            </method>
            <javadoc line="763">
                Log a message, specifying source class, method, and resource bundle name
                  with no arguments.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;
                  The msg string is localized using the named resource bundle.  If the
                  resource bundle name is null, or an empty String or invalid
                  then the msg string is not localized.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that issued the logging request                    
                </param>
                <param>
                    bundleName     name of resource bundle to localize msg,
                      can be null                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="logrb" type="void" line="784">
                <params>
                    <param name="level" type="Level"/>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="bundleName" type="String"/>
                    <param name="msg" type="String"/>
                </params>
                <scope line="785"/>
                <declaration name="lr" type="LogRecord" line="788"/>
            </method>
            <javadoc line="794">
                Log a message, specifying source class, method, and resource bundle name,
                  with a single object parameter to the log message.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then a corresponding LogRecord is created and forwarded
                  to all the registered output Handler objects.
                  &lt;p&gt;
                  The msg string is localized using the named resource bundle.  If the
                  resource bundle name is null, or an empty String or invalid
                  then the msg string is not localized.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that issued the logging request                    
                </param>
                <param>
                    bundleName     name of resource bundle to localize msg,
                      can be null                    
                </param>
                <param>
                    msg      The string message (or a key in the message catalog)                    
                </param>
                <param>
                    param1    Parameter to the log message.                    
                </param>
            </javadoc>
            <method name="logrb" type="void" line="815">
                <params>
                    <param name="level" type="Level"/>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="bundleName" type="String"/>
                    <param name="msg" type="String"/>
                    <param name="param1" type="Object"/>
                </params>
                <scope line="816"/>
                <declaration name="lr" type="LogRecord" line="819"/>
                <declaration name="params" type="Object" line="822"/>
            </method>
            <javadoc line="827">
                Log a message, specifying source class, method, and resource bundle name,
                  with an array of object arguments.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then a corresponding LogRecord is created and forwarded
                  to all the registered output Handler objects.
                  &lt;p&gt;
                  The msg string is localized using the named resource bundle.  If the
                  resource bundle name is null, or an empty String or invalid
                  then the msg string is not localized.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that issued the logging request                    
                </param>
                <param>
                    bundleName     name of resource bundle to localize msg,
                      can be null.                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
                <param>
                    params  Array of parameters to the message                    
                </param>
            </javadoc>
            <method name="logrb" type="void" line="848">
                <params>
                    <param name="level" type="Level"/>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="bundleName" type="String"/>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
                <scope line="849"/>
                <declaration name="lr" type="LogRecord" line="852"/>
            </method>
            <javadoc line="859">
                Log a message, specifying source class, method, and resource bundle name,
                  with associated Throwable information.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then the given arguments are stored in a LogRecord
                  which is forwarded to all registered output handlers.
                  &lt;p&gt;
                  The msg string is localized using the named resource bundle.  If the
                  resource bundle name is null, or an empty String or invalid
                  then the msg string is not localized.
                  &lt;p&gt;
                  Note that the thrown argument is stored in the LogRecord thrown
                  property, rather than the LogRecord parameters property.  Thus is it
                  processed specially by output Formatters and is not treated
                  as a formatting parameter to the LogRecord message property.
                  &lt;p&gt;                
                <param>
                    level   One of the message level identifiers, e.g., SEVERE                    
                </param>
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that issued the logging request                    
                </param>
                <param>
                    bundleName     name of resource bundle to localize msg,
                      can be null                    
                </param>
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
                <param>
                    thrown  Throwable associated with log message.                    
                </param>
            </javadoc>
            <method name="logrb" type="void" line="885">
                <params>
                    <param name="level" type="Level"/>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="bundleName" type="String"/>
                    <param name="msg" type="String"/>
                    <param name="thrown" type="Throwable"/>
                </params>
                <scope line="886"/>
                <declaration name="lr" type="LogRecord" line="889"/>
            </method>
            <javadoc line="901">
                Log a method entry.
                  &lt;p&gt;
                  This is a convenience method that can be used to log entry
                  to a method.  A LogRecord with message &quot;ENTRY&quot;, log level
                  FINER, and the given sourceMethod and sourceClass is logged.
                  &lt;p&gt;                
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that is being entered                    
                </param>
            </javadoc>
            <method name="entering" type="void" line="911">
                <params>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                </params>
                <scope line="912"/>
            </method>
            <javadoc line="918">
                Log a method entry, with one parameter.
                  &lt;p&gt;
                  This is a convenience method that can be used to log entry
                  to a method.  A LogRecord with message &quot;ENTRY {0}&quot;, log level
                  FINER, and the given sourceMethod, sourceClass, and parameter
                  is logged.
                  &lt;p&gt;                
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that is being entered                    
                </param>
                <param>
                    param1         parameter to the method being entered                    
                </param>
            </javadoc>
            <method name="entering" type="void" line="930">
                <params>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="param1" type="Object"/>
                </params>
                <scope line="931"/>
                <declaration name="params" type="Object" line="934"/>
            </method>
            <javadoc line="938">
                Log a method entry, with an array of parameters.
                  &lt;p&gt;
                  This is a convenience method that can be used to log entry
                  to a method.  A LogRecord with message &quot;ENTRY&quot; (followed by a
                  format {N} indicator for each entry in the parameter array),
                  log level FINER, and the given sourceMethod, sourceClass, and
                  parameters is logged.
                  &lt;p&gt;                
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of method that is being entered                    
                </param>
                <param>
                    params         array of parameters to the method being entered                    
                </param>
            </javadoc>
            <method name="entering" type="void" line="951">
                <params>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="params" type="Object"/>
                </params>
                <scope line="952"/>
                <declaration name="msg" type="String" line="955"/>
                <scope line="956"/>
                <scope line="960"/>
            </method>
            <javadoc line="966">
                Log a method return.
                  &lt;p&gt;
                  This is a convenience method that can be used to log returning
                  from a method.  A LogRecord with message &quot;RETURN&quot;, log level
                  FINER, and the given sourceMethod and sourceClass is logged.
                  &lt;p&gt;                
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of the method                    
                </param>
            </javadoc>
            <method name="exiting" type="void" line="976">
                <params>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                </params>
                <scope line="977"/>
            </method>
            <javadoc line="984">
                Log a method return, with result object.
                  &lt;p&gt;
                  This is a convenience method that can be used to log returning
                  from a method.  A LogRecord with message &quot;RETURN {0}&quot;, log level
                  FINER, and the gives sourceMethod, sourceClass, and result
                  object is logged.
                  &lt;p&gt;                
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod   name of the method                    
                </param>
                <param>
                    result  Object that is being returned                    
                </param>
            </javadoc>
            <method name="exiting" type="void" line="996">
                <params>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="result" type="Object"/>
                </params>
                <scope line="997"/>
                <declaration name="params" type="Object" line="1000"/>
            </method>
            <javadoc line="1004">
                Log throwing an exception.
                  &lt;p&gt;
                  This is a convenience method to log that a method is
                  terminating by throwing an exception.  The logging is done
                  using the FINER level.
                  &lt;p&gt;
                  If the logger is currently enabled for the given message
                  level then the given arguments are stored in a LogRecord
                  which is forwarded to all registered output handlers.  The
                  LogRecord&apos;s message is set to &quot;THROW&quot;.
                  &lt;p&gt;
                  Note that the thrown argument is stored in the LogRecord thrown
                  property, rather than the LogRecord parameters property.  Thus is it
                  processed specially by output Formatters and is not treated
                  as a formatting parameter to the LogRecord message property.
                  &lt;p&gt;                
                <param>
                    sourceClass    name of class that issued the logging request                    
                </param>
                <param>
                    sourceMethod  name of the method.                    
                </param>
                <param>
                    thrown  The Throwable that is being thrown.                    
                </param>
            </javadoc>
            <method name="throwing" type="void" line="1025">
                <params>
                    <param name="sourceClass" type="String"/>
                    <param name="sourceMethod" type="String"/>
                    <param name="thrown" type="Throwable"/>
                </params>
                <scope line="1026"/>
                <declaration name="lr" type="LogRecord" line="1029"/>
            </method>
            <javadoc line="1040">
                Log a SEVERE message.
                  &lt;p&gt;
                  If the logger is currently enabled for the SEVERE message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="severe" type="void" line="1049">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="1050"/>
            </method>
            <javadoc line="1056">
                Log a WARNING message.
                  &lt;p&gt;
                  If the logger is currently enabled for the WARNING message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="warning" type="void" line="1065">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="1066"/>
            </method>
            <javadoc line="1072">
                Log an INFO message.
                  &lt;p&gt;
                  If the logger is currently enabled for the INFO message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="info" type="void" line="1081">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="1082"/>
            </method>
            <javadoc line="1088">
                Log a CONFIG message.
                  &lt;p&gt;
                  If the logger is currently enabled for the CONFIG message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="config" type="void" line="1097">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="1098"/>
            </method>
            <javadoc line="1104">
                Log a FINE message.
                  &lt;p&gt;
                  If the logger is currently enabled for the FINE message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="fine" type="void" line="1113">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="1114"/>
            </method>
            <javadoc line="1120">
                Log a FINER message.
                  &lt;p&gt;
                  If the logger is currently enabled for the FINER message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="finer" type="void" line="1129">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="1130"/>
            </method>
            <javadoc line="1136">
                Log a FINEST message.
                  &lt;p&gt;
                  If the logger is currently enabled for the FINEST message
                  level then the given message is forwarded to all the
                  registered output Handler objects.
                  &lt;p&gt;                
                <param>
                    msg     The string message (or a key in the message catalog)                    
                </param>
            </javadoc>
            <method name="finest" type="void" line="1145">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="1146"/>
            </method>
            <javadoc line="1156">
                Set the log level specifying which message levels will be
                  logged by this logger.  Message levels lower than this
                  value will be discarded.  The level value Level.OFF
                  can be used to turn off logging.
                  &lt;p&gt;
                  If the new level is null, it means that this node should
                  inherit its level from its nearest ancestor with a specific
                  (non-null) level value.                
                <param>
                    newLevel   the new value for the log level (may be null)                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have LoggingPermission("control").                    
                </exception>
            </javadoc>
            <method name="setLevel" type="void" line="1170">
                <params>
                    <param name="newLevel" type="Level"/>
                </params>
                <scope line="1172"/>
            </method>
            <javadoc line="1178">
                Get the log Level that has been specified for this Logger.
                  The result may be null, which means that this logger&apos;s
                  effective level will be inherited from its parent.                
                <return>
                    this Logger's level                    
                </return>
            </javadoc>
            <method name="getLevel" type="Level" line="1185"/>
            <javadoc line="1189">
                Check if a message of the given level would actually be logged
                  by this logger.  This check is based on the Loggers effective level,
                  which may be inherited from its parent.                
                <param>
                    level   a message logging level                    
                </param>
                <return>
                    true if the given message level is currently being logged.                    
                </return>
            </javadoc>
            <method name="isLoggable" type="boolean" line="1197">
                <params>
                    <param name="level" type="Level"/>
                </params>
                <scope line="1198"/>
            </method>
            <javadoc line="1204">
                Get the name for this logger.                
                <return>
                    logger name.  Will be null for anonymous Loggers.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="1208"/>
            <javadoc line="1212">
                Add a log Handler to receive logging messages.
                  &lt;p&gt;
                  By default, Loggers also send their output to their parent logger.
                  Typically the root Logger is configured with a set of Handlers
                  that essentially act as default handlers for all loggers.                
                <param>
                    handler a logging Handler                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have LoggingPermission("control").                    
                </exception>
            </javadoc>
            <method name="addHandler" type="void" line="1223">
                <params>
                    <param name="handler" type="Handler"/>
                </params>
                <comment line="1225">
                    Check for null handler                    
                </comment>
            </method>
            <javadoc line="1230">
                Remove a log Handler.
                  &lt;P&gt;
                  Returns silently if the given Handler is not found or is null                
                <param>
                    handler a logging Handler                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have LoggingPermission("control").                    
                </exception>
            </javadoc>
            <method name="removeHandler" type="void" line="1239">
                <params>
                    <param name="handler" type="Handler"/>
                </params>
                <scope line="1241"/>
            </method>
            <javadoc line="1247">
                Get the Handlers associated with this logger.
                  &lt;p&gt;                
                <return>
                    an array of all registered Handlers                    
                </return>
            </javadoc>
            <method name="getHandlers" type="Handler[]" line="1252"/>
            <javadoc line="1256">
                Specify whether or not this logger should send its output
                  to its parent Logger.  This means that any LogRecords will
                  also be written to the parent&apos;s Handlers, and potentially
                  to its parent, recursively up the namespace.                
                <param>
                    useParentHandlers   true if output is to be sent to the
                      logger's parent.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have LoggingPermission("control").                    
                </exception>
            </javadoc>
            <method name="setUseParentHandlers" type="void" line="1267">
                <params>
                    <param name="useParentHandlers" type="boolean"/>
                </params>
            </method>
            <javadoc line="1272">
                Discover whether or not this logger is sending its output
                  to its parent logger.                
                <return>
                    true if output is to be sent to the logger's parent                    
                </return>
            </javadoc>
            <method name="getUseParentHandlers" type="boolean" line="1278"/>
            <method name="findResourceBundle" type="ResourceBundle" line="1288">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="1290">
                    Return a null bundle for a null name.                    
                </comment>
                <comment line="1297">
                    Normally we should hit on our simple one entry cache.                    
                </comment>
                <comment line="1303">
                    Use the thread&apos;s context ClassLoader.  If there isn&apos;t one,
                     use the SystemClassloader.                    
                </comment>
                <comment line="1315">
                    Woops.  We can&apos;t find the ResourceBundle in the default
                     ClassLoader.  Drop through.                    
                </comment>
                <comment line="1320">
                    Fall back to searching up the call stack and trying each
                     calling ClassLoader.                    
                </comment>
                <comment line="1332">
                    We&apos;ve already checked this classloader.                    
                </comment>
                <comment line="1342">
                    Ok, this one didn&apos;t work either.
                     Drop through, and try the next one.                    
                </comment>
                <comment line="1348">
                    Return the previous cached value for that name.
                     This may be null.                    
                </comment>
                <comment line="1352">
                    Sorry, we&apos;re out of luck.                    
                </comment>
                <scope line="1290"/>
                <declaration name="currentLocale" type="Locale" line="1294"/>
                <scope line="1298"/>
                <declaration name="cl" type="ClassLoader" line="1304"/>
                <scope line="1305"/>
                <scope line="1308"/>
                <scope line="1313"/>
                <scope line="1321">
                    <declaration name="clz" type="Class" line="1322"/>
                    <scope line="1323"/>
                    <declaration name="cl2" type="ClassLoader" line="1326"/>
                    <scope line="1327"/>
                    <scope line="1330"/>
                    <scope line="1335"/>
                    <scope line="1340"/>
                </scope>
                <scope line="1346"/>
            </method>
            <method name="setupResourceInfo" type="void" line="1360">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="1367">
                    We&apos;ve failed to find an expected ResourceBundle.                    
                </comment>
                <scope line="1361"/>
                <declaration name="rb" type="ResourceBundle" line="1364"/>
                <scope line="1365"/>
            </method>
            <javadoc line="1372">
                Return the parent for this Logger.
                  &lt;p&gt;
                  This method returns the nearest extant parent in the namespace.
                  Thus if a Logger is called &quot;a.b.c.d&quot;, and a Logger called &quot;a.b&quot;
                  has been created but no logger &quot;a.b.c&quot; exists, then a call of
                  getParent on the Logger &quot;a.b.c.d&quot; will return the Logger &quot;a.b&quot;.
                  &lt;p&gt;
                  The result will be null if it is called on the root Logger
                  in the namespace.                
                <return>
                    nearest existing parent Logger                    
                </return>
            </javadoc>
            <method name="getParent" type="Logger" line="1385">
                <comment line="1387">
                    Note: this used to be synchronized on treeLock.  However, this only
                     provided memory semantics, as there was no guarantee that the caller
                     would synchronize on treeLock (in fact, there is no way for external
                     callers to so synchronize).  Therefore, we have made parent volatile
                     instead.                    
                </comment>
            </method>
            <javadoc line="1394">
                Set the parent for this Logger.  This method is used by
                  the LogManager to update a Logger when the namespace changes.
                  &lt;p&gt;
                  It should not be called from application code.
                  &lt;p&gt;                
                <param>
                    parent   the new parent logger                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have LoggingPermission("control").                    
                </exception>
            </javadoc>
            <method name="setParent" type="void" line="1404">
                <params>
                    <param name="parent" type="Logger"/>
                </params>
                <scope line="1405"/>
            </method>
            <method name="doSetParent" type="void" line="1414">
                <params>
                    <param name="newParent" type="Logger"/>
                </params>
                <comment line="1417">
                    System.err.println(&quot;doSetParent \&quot;&quot; + getName() + &quot;\&quot; \&quot;&quot;
                                                  + newParent.getName() + &quot;\&quot;&quot;);                    
                </comment>
                <comment line="1422">
                    Remove ourself from any previous parent.                    
                </comment>
                <comment line="1425">
                    assert parent.kids != null;                    
                </comment>
                <comment line="1430">
                    ref is used down below to complete the reparenting                    
                </comment>
                <comment line="1437">
                    We have now removed ourself from our parents&apos; kids.                    
                </comment>
                <comment line="1440">
                    Set our new parent.                    
                </comment>
                <comment line="1446">
                    we didn&apos;t have a previous parent                    
                </comment>
                <comment line="1452">
                    As a result of the reparenting, the effective level
                     may have changed for us and our children.                    
                </comment>
                <scope line="1419">
                    <declaration name="ref" type="LogManager.LoggerWeakRef" line="1422"/>
                    <scope line="1423">
                        <scope line="1425">
                            <declaration name="kid" type="Logger" line="1427"/>
                            <scope line="1428"/>
                            <scope line="1432"/>
                        </scope>
                    </scope>
                    <scope line="1441"/>
                    <scope line="1444"/>
                </scope>
            </method>
            <method name="removeChildLogger" type="void" line="1461">
                <params>
                    <param name="child" type="LogManager.LoggerWeakRef"/>
                </params>
                <scope line="1462">
                    <scope line="1463">
                        <declaration name="ref" type="LogManager.LoggerWeakRef" line="1464"/>
                        <scope line="1465"/>
                    </scope>
                </scope>
            </method>
            <method name="updateEffectiveLevel" type="void" line="1476">
                <comment line="1478">
                    assert Thread.holdsLock(treeLock);                    
                </comment>
                <comment line="1480">
                    Figure out our current effective level.                    
                </comment>
                <comment line="1488">
                    This may happen during initialization.                    
                </comment>
                <comment line="1493">
                    If our effective value hasn&apos;t changed, we&apos;re done.                    
                </comment>
                <comment line="1500">
                    System.err.println(&quot;effective level: \&quot;&quot; + getName() + &quot;\&quot; := &quot; + level);                    
                </comment>
                <comment line="1502">
                    Recursively update the level on each of our kids.                    
                </comment>
                <declaration name="newLevelValue" type="int" line="1480"/>
                <scope line="1481"/>
                <scope line="1483">
                    <scope line="1484"/>
                    <scope line="1486"/>
                </scope>
                <scope line="1493"/>
                <scope line="1502">
                    <scope line="1503">
                        <declaration name="ref" type="LogManager.LoggerWeakRef" line="1504"/>
                        <declaration name="kid" type="Logger" line="1505"/>
                        <scope line="1506"/>
                    </scope>
                </scope>
            </method>
            <method name="getEffectiveResourceBundleName" type="String" line="1517">
                <declaration name="target" type="Logger" line="1518"/>
                <scope line="1519">
                    <declaration name="rbn" type="String" line="1520"/>
                    <scope line="1521"/>
                </scope>
            </method>
        </class>
    </source>