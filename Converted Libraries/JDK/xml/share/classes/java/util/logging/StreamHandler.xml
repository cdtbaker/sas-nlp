<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.io"/>
        <class name="StreamHandler" line="31">
            <extends class="Handler"/>
            <comment line="68">
                Private method to configure a StreamHandler from LogManager                
            </comment>
            <comment line="69">
                properties and/or default values as specified in the class                
            </comment>
            <comment line="70">
                javadoc.                
            </comment>
            <javadoc line="31">
                Stream based logging &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;p&gt;
                  This is primarily intended as a base class or support class to
                  be used in implementing other logging &lt;tt&gt;Handlers&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;LogRecords&lt;/tt&gt; are published to a given &lt;tt&gt;java.io.OutputStream&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Configuration:&lt;/b&gt;
                  By default each &lt;tt&gt;StreamHandler&lt;/tt&gt; is initialized using the following
                  &lt;tt&gt;LogManager&lt;/tt&gt; configuration properties.  If properties are not defined
                  (or have invalid values) then the specified default values are used.
                  &lt;ul&gt;
                  &lt;li&gt;   java.util.logging.StreamHandler.level
                  specifies the default level for the &lt;tt&gt;Handler&lt;/tt&gt;
                  (defaults to &lt;tt&gt;Level.INFO&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.StreamHandler.filter
                  specifies the name of a &lt;tt&gt;Filter&lt;/tt&gt; class to use
                  (defaults to no &lt;tt&gt;Filter&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.StreamHandler.formatter
                  specifies the name of a &lt;tt&gt;Formatter&lt;/tt&gt; class to use
                  (defaults to &lt;tt&gt;java.util.logging.SimpleFormatter&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.StreamHandler.encoding
                  the name of the character set encoding to use (defaults to
                  the default platform encoding).
                  &lt;/ul&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="manager" type="LogManager" line="62"/>
            <declaration name="output" type="OutputStream" line="63"/>
            <declaration name="doneHeader" type="boolean" line="64"/>
            <declaration name="writer" type="Writer" line="65"/>
            <method name="configure" type="void" line="70">
                <comment line="83">
                    doing a setEncoding with null should always work.                    
                </comment>
                <comment line="84">
                    assert false;                    
                </comment>
                <declaration name="manager" type="LogManager" line="71"/>
                <declaration name="cname" type="String" line="72"/>
                <scope line="77"/>
                <scope line="79">
                    <scope line="80"/>
                    <scope line="82"/>
                </scope>
            </method>
            <javadoc line="89">
                Create a &lt;tt&gt;StreamHandler&lt;/tt&gt;, with no current output stream.                
            </javadoc>
            <method name="StreamHandler" type="constructor" line="92"/>
            <javadoc line="98">
                Create a &lt;tt&gt;StreamHandler&lt;/tt&gt; with a given &lt;tt&gt;Formatter&lt;/tt&gt;
                  and output stream.
                  &lt;p&gt;                
                <param>
                    out         the target output stream                    
                </param>
                <param>
                    formatter   Formatter to be used to format output                    
                </param>
            </javadoc>
            <method name="StreamHandler" type="constructor" line="105">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="formatter" type="Formatter"/>
                </params>
            </method>
            <javadoc line="113">
                Change the output stream.
                  &lt;P&gt;
                  If there is a current output stream then the &lt;tt&gt;Formatter&lt;/tt&gt;&apos;s
                  tail string is written and the stream is flushed and closed.
                  Then the output stream is replaced with the new output stream.                
                <param>
                    out   New output stream.  May not be null.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="setOutputStream" type="void" line="124">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="138">
                    This shouldn&apos;t happen.  The setEncoding method                    
                </comment>
                <comment line="139">
                    should have validated that the encoding is OK.                    
                </comment>
                <scope line="125"/>
                <declaration name="encoding" type="String" line="131"/>
                <scope line="132"/>
                <scope line="134">
                    <scope line="135"/>
                    <scope line="137"/>
                </scope>
            </method>
            <javadoc line="145">
                Set (or change) the character encoding used by this &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;p&gt;
                  The encoding should be set before any &lt;tt&gt;LogRecords&lt;/tt&gt; are written
                  to the &lt;tt&gt;Handler&lt;/tt&gt;.                
                <param>
                    encoding  The name of a supported character encoding.
                      May be null, to indicate the default platform encoding.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
                <exception>
                    UnsupportedEncodingException if the named encoding is
                      not supported.                    
                </exception>
            </javadoc>
            <method name="setEncoding" type="void" line="159">
                <params>
                    <param name="encoding" type="String"/>
                </params>
                <comment line="164">
                    Replace the current writer with a writer for the new encoding.                    
                </comment>
                <scope line="161"/>
                <scope line="166"/>
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Format and publish a &lt;tt&gt;LogRecord&lt;/tt&gt;.
                  &lt;p&gt;
                  The &lt;tt&gt;StreamHandler&lt;/tt&gt; first checks if there is an &lt;tt&gt;OutputStream&lt;/tt&gt;
                  and if the given &lt;tt&gt;LogRecord&lt;/tt&gt; has at least the required log level.
                  If not it silently returns.  If so, it calls any associated
                  &lt;tt&gt;Filter&lt;/tt&gt; to check if the record should be published.  If so,
                  it calls its &lt;tt&gt;Formatter&lt;/tt&gt; to format the record and then writes
                  the result to the current output stream.
                  &lt;p&gt;
                  If this is the first &lt;tt&gt;LogRecord&lt;/tt&gt; to be written to a given
                  &lt;tt&gt;OutputStream&lt;/tt&gt;, the &lt;tt&gt;Formatter&lt;/tt&gt;&apos;s &quot;head&quot; string is
                  written to the stream before the &lt;tt&gt;LogRecord&lt;/tt&gt; is written.                
                <param>
                    record  description of the log event. A null record is
                      silently ignored and is not published                    
                </param>
            </javadoc>
            <method name="publish" type="void" line="190">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <comment line="198">
                    We don&apos;t want to throw an exception here, but we                    
                </comment>
                <comment line="199">
                    report the exception to any registered ErrorManager.                    
                </comment>
                <comment line="211">
                    We don&apos;t want to throw an exception here, but we                    
                </comment>
                <comment line="212">
                    report the exception to any registered ErrorManager.                    
                </comment>
                <scope line="191"/>
                <declaration name="msg" type="String" line="194"/>
                <scope line="195"/>
                <scope line="197"/>
                <scope line="204">
                    <scope line="205"/>
                </scope>
                <scope line="210"/>
            </method>
            <javadoc line="218">
                Check if this &lt;tt&gt;Handler&lt;/tt&gt; would actually log a given &lt;tt&gt;LogRecord&lt;/tt&gt;.
                  &lt;p&gt;
                  This method checks if the &lt;tt&gt;LogRecord&lt;/tt&gt; has an appropriate level and
                  whether it satisfies any &lt;tt&gt;Filter&lt;/tt&gt;.  It will also return false if
                  no output stream has been assigned yet or the LogRecord is null.
                  &lt;p&gt;                
                <param>
                    record  a <tt>LogRecord</tt>                    
                </param>
                <return>
                    true if the <tt>LogRecord</tt> would be logged.                    
                </return>
            </javadoc>
            <method name="isLoggable" type="boolean" line="229">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <scope line="230"/>
            </method>
            <javadoc line="236">
                Flush any buffered messages.                
            </javadoc>
            <method name="flush" type="void" line="239">
                <comment line="244">
                    We don&apos;t want to throw an exception here, but we                    
                </comment>
                <comment line="245">
                    report the exception to any registered ErrorManager.                    
                </comment>
                <scope line="240">
                    <scope line="241"/>
                    <scope line="243"/>
                </scope>
            </method>
            <method name="flushAndClose" type="void" line="251">
                <comment line="263">
                    We don&apos;t want to throw an exception here, but we                    
                </comment>
                <comment line="264">
                    report the exception to any registered ErrorManager.                    
                </comment>
                <scope line="253">
                    <scope line="254">
                        <scope line="255"/>
                    </scope>
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="272">
                Close the current output stream.
                  &lt;p&gt;
                  The &lt;tt&gt;Formatter&lt;/tt&gt;&apos;s &quot;tail&quot; string is written to the stream before it
                  is closed.  In addition, if the &lt;tt&gt;Formatter&lt;/tt&gt;&apos;s &quot;head&quot; string has not
                  yet been written to the stream, it will be written before the
                  &quot;tail&quot; string.                
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have LoggingPermission("control").                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="283"/>
        </class>
    </source>