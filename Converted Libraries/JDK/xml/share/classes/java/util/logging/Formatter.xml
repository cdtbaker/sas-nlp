<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <class name="Formatter" line="29">
            <javadoc line="29">
                A Formatter provides support for formatting LogRecords.
                  &lt;p&gt;
                  Typically each logging Handler will have a Formatter associated
                  with it.  The Formatter takes a LogRecord and converts it to
                  a string.
                  &lt;p&gt;
                  Some formatters (such as the XMLFormatter) need to wrap head
                  and tail strings around a set of formatted records. The getHeader
                  and getTail methods can be used to obtain these strings.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="45">
                Construct a new formatter.                
            </javadoc>
            <method name="Formatter" type="constructor" line="48"/>
            <method name="format" type="String" line="51"/>
            <javadoc line="51">
                Format the given log record and return the formatted string.
                  &lt;p&gt;
                  The resulting formatted String will normally include a
                  localized and formatted version of the LogRecord&apos;s message field.
                  It is recommended to use the {@link Formatter#formatMessage}convenience method to localize and format the message field.                
                <param>
                    record the log record to be formatted.                    
                </param>
                <return>
                    the formatted log record                    
                </return>
            </javadoc>
            <javadoc line="65">
                Return the header string for a set of formatted records.
                  &lt;p&gt;
                  This base class returns an empty string, but this may be
                  overridden by subclasses.                
                <param>
                    h  The target handler (can be null)                    
                </param>
                <return>
                    header string                    
                </return>
            </javadoc>
            <method name="getHead" type="String" line="74">
                <params>
                    <param name="h" type="Handler"/>
                </params>
            </method>
            <javadoc line="78">
                Return the tail string for a set of formatted records.
                  &lt;p&gt;
                  This base class returns an empty string, but this may be
                  overridden by subclasses.                
                <param>
                    h  The target handler (can be null)                    
                </param>
                <return>
                    tail string                    
                </return>
            </javadoc>
            <method name="getTail" type="String" line="87">
                <params>
                    <param name="h" type="Handler"/>
                </params>
            </method>
            <javadoc line="92">
                Localize and format the message string from a log record.  This
                  method is provided as a convenience for Formatter subclasses to
                  use when they are performing formatting.
                  &lt;p&gt;
                  The message string is first localized to a format string using
                  the record&apos;s ResourceBundle.  (If there is no ResourceBundle,
                  or if the message key is not found, then the key is used as the
                  format string.)  The format String uses java.text style
                  formatting.
                  &lt;ul&gt;
                  &lt;li&gt;If there are no parameters, no formatter is used.
                  &lt;li&gt;Otherwise, if the string contains &quot;{0&quot; then
                  java.text.MessageFormat  is used to format the string.
                  &lt;li&gt;Otherwise no formatting is performed.
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <param>
                    record  the log record containing the raw message                    
                </param>
                <return>
                    a localized and formatted message                    
                </return>
            </javadoc>
            <method name="formatMessage" type="String" line="113">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <comment line="121">
                    Drop through.  Use record message as format                    
                </comment>
                <comment line="125">
                    Do the formatting.                    
                </comment>
                <comment line="129">
                    No parameters.  Just return format string.                    
                </comment>
                <comment line="132">
                    Is it a java.text style format?
                     Ideally we could match with
                     Pattern.compile(&quot;\\{\\d&quot;).matcher(format).find())
                     However the cost is 14% higher, so we cheaply check for
                     1 of the first 4 parameters                    
                </comment>
                <comment line="144">
                    Formatting failed: use localized format string.                    
                </comment>
                <declaration name="format" type="String" line="114"/>
                <declaration name="catalog" type="java.util.ResourceBundle" line="115"/>
                <scope line="116">
                    <scope line="117"/>
                    <scope line="119"/>
                </scope>
                <scope line="125">
                    <declaration name="parameters" type="Object" line="126"/>
                    <scope line="127"/>
                    <scope line="137"/>
                </scope>
                <scope line="142"/>
            </method>
        </class>
    </source>