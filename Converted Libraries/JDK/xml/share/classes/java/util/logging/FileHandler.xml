<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.io"/>
        <import package="java.nio.channels.FileChannel"/>
        <import package="java.nio.channels.FileLock"/>
        <import package="java.security"/>
        <class name="FileHandler" line="33">
            <extends class="StreamHandler"/>
            <comment line="124">
                zero =&gt; no limit.                
            </comment>
            <comment line="133">
                A metered stream is a subclass of OutputStream that
                   (a) forwards all its output to a target stream
                   (b) keeps track of how many bytes have been written                
            </comment>
            <comment line="180">
                Private method to configure a FileHandler from LogManager
                 properties and/or default values as specified in the class
                 javadoc.                
            </comment>
            <comment line="367">
                Private method to open the set of output files, based on the
                 configured instance variables.                
            </comment>
            <comment line="463">
                Generate a filename from a pattern.                
            </comment>
            <comment line="539">
                Rotate the set of output files                
            </comment>
            <comment line="627">
                Private native method to check if we are in a set UID program.                
            </comment>
            <javadoc line="33">
                Simple file logging &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;p&gt;
                  The &lt;tt&gt;FileHandler&lt;/tt&gt; can either write to a specified file,
                  or it can write to a rotating set of files.
                  &lt;p&gt;
                  For a rotating set of files, as each file reaches a given size
                  limit, it is closed, rotated out, and a new file opened.
                  Successively older files are named by adding &quot;0&quot;, &quot;1&quot;, &quot;2&quot;,
                  etc. into the base filename.
                  &lt;p&gt;
                  By default buffering is enabled in the IO libraries but each log
                  record is flushed out when it is complete.
                  &lt;p&gt;
                  By default the &lt;tt&gt;XMLFormatter&lt;/tt&gt; class is used for formatting.
                  &lt;p&gt;
                  &lt;b&gt;Configuration:&lt;/b&gt;
                  By default each &lt;tt&gt;FileHandler&lt;/tt&gt; is initialized using the following
                  &lt;tt&gt;LogManager&lt;/tt&gt; configuration properties.  If properties are not defined
                  (or have invalid values) then the specified default values are used.
                  &lt;ul&gt;
                  &lt;li&gt;   java.util.logging.FileHandler.level
                  specifies the default level for the &lt;tt&gt;Handler&lt;/tt&gt;
                  (defaults to &lt;tt&gt;Level.ALL&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.FileHandler.filter
                  specifies the name of a &lt;tt&gt;Filter&lt;/tt&gt; class to use
                  (defaults to no &lt;tt&gt;Filter&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.FileHandler.formatter
                  specifies the name of a &lt;tt&gt;Formatter&lt;/tt&gt; class to use
                  (defaults to &lt;tt&gt;java.util.logging.XMLFormatter&lt;/tt&gt;)
                  &lt;li&gt;   java.util.logging.FileHandler.encoding
                  the name of the character set encoding to use (defaults to
                  the default platform encoding).
                  &lt;li&gt;   java.util.logging.FileHandler.limit
                  specifies an approximate maximum amount to write (in bytes)
                  to any one file.  If this is zero, then there is no limit.
                  (Defaults to no limit).
                  &lt;li&gt;   java.util.logging.FileHandler.count
                  specifies how many output files to cycle through (defaults to 1).
                  &lt;li&gt;   java.util.logging.FileHandler.pattern
                  specifies a pattern for generating the output file name.  See
                  below for details. (Defaults to &quot;%h/java%u.log&quot;).
                  &lt;li&gt;   java.util.logging.FileHandler.append
                  specifies whether the FileHandler should append onto
                  any existing files (defaults to false).
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;p&gt;
                  A pattern consists of a string that includes the following special
                  components that will be replaced at runtime:
                  &lt;ul&gt;
                  &lt;li&gt;    &quot;/&quot;    the local pathname separator
                  &lt;li&gt;     &quot;%t&quot;   the system temporary directory
                  &lt;li&gt;     &quot;%h&quot;   the value of the &quot;user.home&quot; system property
                  &lt;li&gt;     &quot;%g&quot;   the generation number to distinguish rotated logs
                  &lt;li&gt;     &quot;%u&quot;   a unique number to resolve conflicts
                  &lt;li&gt;     &quot;%%&quot;   translates to a single percent sign &quot;%&quot;
                  &lt;/ul&gt;
                  If no &quot;%g&quot; field has been specified and the file count is greater
                  than one, then the generation number will be added to the end of
                  the generated filename, after a dot.
                  &lt;p&gt;
                  Thus for example a pattern of &quot;%t/java%g.log&quot; with a count of 2
                  would typically cause log files to be written on Solaris to
                  /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they
                  would be typically written to C:\TEMP\java0.log and C:\TEMP\java1.log
                  &lt;p&gt;
                  Generation numbers follow the sequence 0, 1, 2, etc.
                  &lt;p&gt;
                  Normally the &quot;%u&quot; unique field is set to 0.  However, if the &lt;tt&gt;FileHandler&lt;/tt&gt;
                  tries to open the filename and finds the file is currently in use by
                  another process it will increment the unique number field and try
                  again.  This will be repeated until &lt;tt&gt;FileHandler&lt;/tt&gt; finds a file name that
                  is  not currently in use. If there is a conflict and no &quot;%u&quot; field has
                  been specified, it will be added at the end of the filename after a dot.
                  (This will be after any automatically added generation number.)
                  &lt;p&gt;
                  Thus if three processes were all trying to log to fred%u.%g.txt then
                  they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as
                  the first file in their rotating sequences.
                  &lt;p&gt;
                  Note that the use of unique ids to avoid conflicts is only guaranteed
                  to work reliably when using a local disk file system.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="meter" type="MeteredStream" line="121"/>
            <declaration name="append" type="boolean" line="122"/>
            <declaration name="limit" type="int" line="123"/>
            <declaration name="count" type="int" line="124"/>
            <declaration name="pattern" type="String" line="125"/>
            <declaration name="lockFileName" type="String" line="126"/>
            <declaration name="lockStream" type="FileOutputStream" line="127"/>
            <declaration name="files" type="File" line="128"/>
            <declaration name="MAX_LOCKS" type="int" line="129"/>
            <declaration name="locks" type="java.util.HashMap&lt;String,String&gt;" line="130"/>
            <class name="MeteredStream" line="135">
                <extends class="OutputStream"/>
                <declaration name="out" type="OutputStream" line="136"/>
                <declaration name="written" type="int" line="137"/>
                <method name="MeteredStream" type="constructor" line="139">
                    <params>
                        <param name="out" type="OutputStream"/>
                        <param name="written" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="144">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="149">
                    <params>
                        <param name="buff" type="byte"/>
                    </params>
                </method>
                <method name="write" type="void" line="154">
                    <params>
                        <param name="buff" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="flush" type="void" line="159"/>
                <method name="close" type="void" line="163"/>
            </class>
            <method name="open" type="void" line="168">
                <params>
                    <param name="fname" type="File"/>
                    <param name="append" type="boolean"/>
                </params>
                <declaration name="len" type="int" line="169"/>
                <scope line="170"/>
                <declaration name="fout" type="FileOutputStream" line="173"/>
                <declaration name="bout" type="BufferedOutputStream" line="174"/>
            </method>
            <method name="configure" type="void" line="182">
                <comment line="207">
                    doing a setEncoding with null should always work.
                     assert false;                    
                </comment>
                <declaration name="manager" type="LogManager" line="183"/>
                <declaration name="cname" type="String" line="185"/>
                <scope line="189"/>
                <scope line="193"/>
                <scope line="200"/>
                <scope line="202">
                    <scope line="203"/>
                    <scope line="205"/>
                </scope>
            </method>
            <javadoc line="213">
                Construct a default &lt;tt&gt;FileHandler&lt;/tt&gt;.  This will be configured
                  entirely from &lt;tt&gt;LogManager&lt;/tt&gt; properties (or their default values).
                  &lt;p&gt;                
                <exception>
                    IOException if there are IO problems opening the files.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have &lt;tt&gt;LoggingPermission(&quot;control&quot;))&lt;/tt&gt;.                    
                </exception>
                <exception>
                    NullPointerException if pattern property is an empty String.                    
                </exception>
            </javadoc>
            <method name="FileHandler" type="constructor" line="222"/>
            <javadoc line="228">
                Initialize a &lt;tt&gt;FileHandler&lt;/tt&gt; to write to the given filename.
                  &lt;p&gt;
                  The &lt;tt&gt;FileHandler&lt;/tt&gt; is configured based on &lt;tt&gt;LogManager&lt;/tt&gt;
                  properties (or their default values) except that the given pattern
                  argument is used as the filename pattern, the file limit is
                  set to no limit, and the file count is set to one.
                  &lt;p&gt;
                  There is no limit on the amount of data that may be written,
                  so use this with care.                
                <param>
                    pattern  the name of the output file                    
                </param>
                <exception>
                    IOException if there are IO problems opening the files.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have &lt;tt&gt;LoggingPermission(&quot;control&quot;)&lt;/tt&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if pattern is an empty string                    
                </exception>
            </javadoc>
            <method name="FileHandler" type="constructor" line="245">
                <params>
                    <param name="pattern" type="String"/>
                </params>
                <scope line="246"/>
            </method>
            <javadoc line="257">
                Initialize a &lt;tt&gt;FileHandler&lt;/tt&gt; to write to the given filename,
                  with optional append.
                  &lt;p&gt;
                  The &lt;tt&gt;FileHandler&lt;/tt&gt; is configured based on &lt;tt&gt;LogManager&lt;/tt&gt;
                  properties (or their default values) except that the given pattern
                  argument is used as the filename pattern, the file limit is
                  set to no limit, the file count is set to one, and the append
                  mode is set to the given &lt;tt&gt;append&lt;/tt&gt; argument.
                  &lt;p&gt;
                  There is no limit on the amount of data that may be written,
                  so use this with care.                
                <param>
                    pattern  the name of the output file                    
                </param>
                <param>
                    append  specifies append mode                    
                </param>
                <exception>
                    IOException if there are IO problems opening the files.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have &lt;tt&gt;LoggingPermission(&quot;control&quot;)&lt;/tt&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if pattern is an empty string                    
                </exception>
            </javadoc>
            <method name="FileHandler" type="constructor" line="277">
                <params>
                    <param name="pattern" type="String"/>
                    <param name="append" type="boolean"/>
                </params>
                <scope line="278"/>
            </method>
            <javadoc line="290">
                Initialize a &lt;tt&gt;FileHandler&lt;/tt&gt; to write to a set of files.  When
                  (approximately) the given limit has been written to one file,
                  another file will be opened.  The output will cycle through a set
                  of count files.
                  &lt;p&gt;
                  The &lt;tt&gt;FileHandler&lt;/tt&gt; is configured based on &lt;tt&gt;LogManager&lt;/tt&gt;
                  properties (or their default values) except that the given pattern
                  argument is used as the filename pattern, the file limit is
                  set to the limit argument, and the file count is set to the
                  given count argument.
                  &lt;p&gt;
                  The count must be at least 1.                
                <param>
                    pattern  the pattern for naming the output file                    
                </param>
                <param>
                    limit  the maximum number of bytes to write to any one file                    
                </param>
                <param>
                    count  the number of files to use                    
                </param>
                <exception>
                    IOException if there are IO problems opening the files.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have &lt;tt&gt;LoggingPermission(&quot;control&quot;)&lt;/tt&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if limit &lt; 0, or count &lt; 1.                    
                </exception>
                <exception>
                    IllegalArgumentException if pattern is an empty string                    
                </exception>
            </javadoc>
            <method name="FileHandler" type="constructor" line="314">
                <params>
                    <param name="pattern" type="String"/>
                    <param name="limit" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="315"/>
            </method>
            <javadoc line="326">
                Initialize a &lt;tt&gt;FileHandler&lt;/tt&gt; to write to a set of files
                  with optional append.  When (approximately) the given limit has
                  been written to one file, another file will be opened.  The
                  output will cycle through a set of count files.
                  &lt;p&gt;
                  The &lt;tt&gt;FileHandler&lt;/tt&gt; is configured based on &lt;tt&gt;LogManager&lt;/tt&gt;
                  properties (or their default values) except that the given pattern
                  argument is used as the filename pattern, the file limit is
                  set to the limit argument, and the file count is set to the
                  given count argument, and the append mode is set to the given
                  &lt;tt&gt;append&lt;/tt&gt; argument.
                  &lt;p&gt;
                  The count must be at least 1.                
                <param>
                    pattern  the pattern for naming the output file                    
                </param>
                <param>
                    limit  the maximum number of bytes to write to any one file                    
                </param>
                <param>
                    count  the number of files to use                    
                </param>
                <param>
                    append  specifies append mode                    
                </param>
                <exception>
                    IOException if there are IO problems opening the files.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have &lt;tt&gt;LoggingPermission(&quot;control&quot;)&lt;/tt&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if limit &lt; 0, or count &lt; 1.                    
                </exception>
                <exception>
                    IllegalArgumentException if pattern is an empty string                    
                </exception>
            </javadoc>
            <method name="FileHandler" type="constructor" line="353">
                <params>
                    <param name="pattern" type="String"/>
                    <param name="limit" type="int"/>
                    <param name="count" type="int"/>
                    <param name="append" type="boolean"/>
                </params>
                <scope line="354"/>
            </method>
            <method name="openFiles" type="void" line="368">
                <comment line="379">
                    We register our own ErrorManager during initialization
                     so we can record exceptions.                    
                </comment>
                <comment line="384">
                    Create a lock file.  This grants us exclusive access
                     to our set of output files, as long as we are alive.                    
                </comment>
                <comment line="392">
                    Generate a lock file name from the &quot;unique&quot; int.                    
                </comment>
                <comment line="394">
                    Now try to lock that filename.
                     Because some systems (e.g., Solaris) can only do file locks
                     between processes (and not within a process), we first check
                     if we ourself already have the file locked.                    
                </comment>
                <comment line="400">
                    We already own this lock, for a different FileHandler
                     object.  Try again.                    
                </comment>
                <comment line="409">
                    We got an IOException while trying to open the file.
                     Try the next file.                    
                </comment>
                <comment line="416">
                    We got the lock OK.                    
                </comment>
                <comment line="418">
                    We got an IOException while trying to get the lock.
                     This normally indicates that locking is not supported
                     on the target directory.  We have to proceed without
                     getting a lock.   Drop through.                    
                </comment>
                <comment line="425">
                    We got the lock.  Remember it.                    
                </comment>
                <comment line="430">
                    We failed to get the lock.  Try next file.                    
                </comment>
                <comment line="440">
                    Create the initial log file.                    
                </comment>
                <comment line="447">
                    Did we detect any exceptions during initialization?                    
                </comment>
                <comment line="459">
                    Install the normal default ErrorManager.                    
                </comment>
                <declaration name="manager" type="LogManager" line="369"/>
                <scope line="371"/>
                <scope line="374"/>
                <declaration name="em" type="InitializationErrorManager" line="380"/>
                <declaration name="unique" type="int" line="385"/>
                <scope line="386">
                    <scope line="388"/>
                    <scope line="397">
                        <scope line="398"/>
                        <declaration name="fc" type="FileChannel" line="403"/>
                        <scope line="404"/>
                        <scope line="407"/>
                        <declaration name="available" type="boolean" line="412"/>
                        <scope line="413"/>
                        <scope line="416"/>
                        <scope line="423"/>
                    </scope>
                </scope>
                <scope line="435"/>
                <scope line="440"/>
                <scope line="442"/>
                <declaration name="ex" type="Exception" line="447"/>
                <scope line="448">
                    <scope line="449"/>
                    <scope line="451"/>
                    <scope line="453"/>
                </scope>
            </method>
            <method name="generate" type="File" line="463">
                <params>
                    <param name="pattern" type="String"/>
                    <param name="generation" type="int"/>
                    <param name="unique" type="int"/>
                </params>
                <comment line="498">
                    Ok, we are in a set UID program.  For safety&apos;s sake
                     we disallow attempts to open files relative to %h.                    
                </comment>
                <declaration name="file" type="File" line="464"/>
                <declaration name="word" type="String" line="465"/>
                <declaration name="ix" type="int" line="466"/>
                <declaration name="sawg" type="boolean" line="467"/>
                <declaration name="sawu" type="boolean" line="468"/>
                <scope line="469">
                    <declaration name="ch" type="char" line="470"/>
                    <declaration name="ch2" type="char" line="472"/>
                    <scope line="473"/>
                    <scope line="476">
                        <scope line="477"/>
                        <scope line="479"/>
                    </scope>
                    <scope line="484">
                        <scope line="485">
                            <declaration name="tmpDir" type="String" line="486"/>
                            <scope line="487"/>
                        </scope>
                        <scope line="494">
                            <scope line="496"/>
                        </scope>
                        <scope line="504"/>
                        <scope line="509"/>
                        <scope line="514"/>
                    </scope>
                </scope>
                <scope line="522"/>
                <scope line="525"/>
                <scope line="528">
                    <scope line="529"/>
                    <scope line="531"/>
                </scope>
            </method>
            <method name="rotate" type="void" line="539">
                <comment line="558">
                    We don&apos;t want to throw an exception here, but we
                     report the exception to any registered ErrorManager.                    
                </comment>
                <declaration name="oldLevel" type="Level" line="540"/>
                <scope line="544">
                    <declaration name="f1" type="File" line="545"/>
                    <declaration name="f2" type="File" line="546"/>
                    <scope line="547">
                        <scope line="548"/>
                    </scope>
                </scope>
                <scope line="554"/>
                <scope line="556"/>
            </method>
            <javadoc line="565">
                Format and publish a &lt;tt&gt;LogRecord&lt;/tt&gt;.                
                <param>
                    record  description of the log event. A null record is
                      silently ignored and is not published                    
                </param>
            </javadoc>
            <method name="publish" type="void" line="571">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <comment line="579">
                    We performed access checks in the &quot;init&quot; method to make sure
                     we are only initialized from trusted code.  So we assume
                     it is OK to write the target files, even if we are
                     currently being called from untrusted code.
                     So it is safe to raise privilege here.                    
                </comment>
                <scope line="572"/>
                <scope line="577">
                    <anonymous_class line="583">
                        <method name="run" type="Object" line="584"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="592">
                Close all the files.                
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have &lt;tt&gt;LoggingPermission(&quot;control&quot;)&lt;/tt&gt;.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="598">
                <comment line="601">
                    Unlock any lock file.                    
                </comment>
                <comment line="606">
                    Closing the lock file&apos;s FileOutputStream will close
                     the underlying channel and free any locks.                    
                </comment>
                <comment line="610">
                    Problems closing the stream.  Punt.                    
                </comment>
                <scope line="601"/>
                <scope line="604"/>
                <scope line="608"/>
                <scope line="611"/>
            </method>
            <class name="InitializationErrorManager" line="619">
                <extends class="ErrorManager"/>
                <declaration name="lastException" type="Exception" line="620"/>
                <method name="error" type="void" line="621">
                    <params>
                        <param name="msg" type="String"/>
                        <param name="ex" type="Exception"/>
                        <param name="code" type="int"/>
                    </params>
                </method>
            </class>
            <method name="isSetUID" type="boolean" line="627"/>
        </class>
    </source>