<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.io.UnsupportedEncodingException"/>
        <class name="Handler" line="3">
            <javadoc line="3">
                A &lt;tt&gt;Handler&lt;/tt&gt; object takes log messages from a &lt;tt&gt;Logger&lt;/tt&gt; and
                  exports them.  It might for example, write them to a console
                  or write them to a file, or send them to a network logging service,
                  or forward them to an OS log, or whatever.
                  &lt;p&gt;
                  A &lt;tt&gt;Handler&lt;/tt&gt; can be disabled by doing a &lt;tt&gt;setLevel(Level.OFF)&lt;/tt&gt;
                  and can  be re-enabled by doing a &lt;tt&gt;setLevel&lt;/tt&gt; with an appropriate level.
                  &lt;p&gt;
                  &lt;tt&gt;Handler&lt;/tt&gt; classes typically use &lt;tt&gt;LogManager&lt;/tt&gt; properties to set
                  default values for the &lt;tt&gt;Handler&lt;/tt&gt;&apos;s &lt;tt&gt;Filter&lt;/tt&gt;, &lt;tt&gt;Formatter&lt;/tt&gt;,
                  and &lt;tt&gt;Level&lt;/tt&gt;.  See the specific documentation for each concrete
                  &lt;tt&gt;Handler&lt;/tt&gt; class.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="offValue" type="int" line="19"/>
            <declaration name="manager" type="LogManager" line="20"/>
            <declaration name="filter" type="Filter" line="21"/>
            <declaration name="formatter" type="Formatter" line="22"/>
            <declaration name="logLevel" type="Level" line="23"/>
            <declaration name="errorManager" type="ErrorManager" line="24"/>
            <declaration name="encoding" type="String" line="25"/>
            <declaration name="sealed" type="boolean" line="26"/>
            <javadoc line="27">
                Default constructor.  The resulting &lt;tt&gt;Handler&lt;/tt&gt; has a log
                  level of &lt;tt&gt;Level.ALL&lt;/tt&gt;, no &lt;tt&gt;Formatter&lt;/tt&gt;, and no
                  &lt;tt&gt;Filter&lt;/tt&gt;.  A default &lt;tt&gt;ErrorManager&lt;/tt&gt; instance is installed
                  as the &lt;tt&gt;ErrorManager&lt;/tt&gt;.                
            </javadoc>
            <method name="Handler" type="constructor" line="33"/>
            <method name="publish" type="void" line="35"/>
            <javadoc line="35">
                Publish a &lt;tt&gt;LogRecord&lt;/tt&gt;.
                  &lt;p&gt;
                  The logging request was made initially to a &lt;tt&gt;Logger&lt;/tt&gt; object,
                  which initialized the &lt;tt&gt;LogRecord&lt;/tt&gt; and forwarded it here.
                  &lt;p&gt;
                  The &lt;tt&gt;Handler&lt;/tt&gt;  is responsible for formatting the message, when and
                  if necessary.  The formatting should include localization.                
                <param>
                    record  description of the log event. A null record is
                      silently ignored and is not published                    
                </param>
            </javadoc>
            <method name="flush" type="void" line="47"/>
            <javadoc line="47">
                Flush any buffered output.                
            </javadoc>
            <method name="close" type="void" line="51"/>
            <javadoc line="51">
                Close the &lt;tt&gt;Handler&lt;/tt&gt; and free all associated resources.
                  &lt;p&gt;
                  The close method will perform a &lt;tt&gt;flush&lt;/tt&gt; and then close the
                  &lt;tt&gt;Handler&lt;/tt&gt;.   After close has been called this &lt;tt&gt;Handler&lt;/tt&gt;
                  should no longer be used.  Method calls may either be silently
                  ignored or may throw runtime exceptions.                
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <javadoc line="62">
                Set a &lt;tt&gt;Formatter&lt;/tt&gt;.  This &lt;tt&gt;Formatter&lt;/tt&gt; will be used
                  to format &lt;tt&gt;LogRecords&lt;/tt&gt; for this &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;p&gt;
                  Some &lt;tt&gt;Handlers&lt;/tt&gt; may not use &lt;tt&gt;Formatters&lt;/tt&gt;, in
                  which case the &lt;tt&gt;Formatter&lt;/tt&gt; will be remembered, but not used.
                  &lt;p&gt;                
                <param>
                    newFormatter the <tt>Formatter</tt> to use (may not be null)                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="setFormatter" type="void" line="73">
                <params>
                    <param name="newFormatter" type="Formatter"/>
                </params>
            </method>
            <javadoc line="78">
                Return the &lt;tt&gt;Formatter&lt;/tt&gt; for this &lt;tt&gt;Handler&lt;/tt&gt;.                
                <return>
                    the <tt>Formatter</tt> (may be null).                    
                </return>
            </javadoc>
            <method name="getFormatter" type="Formatter" line="82"/>
            <javadoc line="85">
                Set the character encoding used by this &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;p&gt;
                  The encoding should be set before any &lt;tt&gt;LogRecords&lt;/tt&gt; are written
                  to the &lt;tt&gt;Handler&lt;/tt&gt;.                
                <param>
                    encoding  The name of a supported character encoding.
                      May be null, to indicate the default platform encoding.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
                <exception>
                    UnsupportedEncodingException if the named encoding is
                      not supported.                    
                </exception>
            </javadoc>
            <method name="setEncoding" type="void" line="97">
                <params>
                    <param name="encoding" type="String"/>
                </params>
                <scope line="99">
                    <scope line="100">
                        <scope line="101"/>
                    </scope>
                    <scope line="105"/>
                </scope>
            </method>
            <javadoc line="111">
                Return the character encoding for this &lt;tt&gt;Handler&lt;/tt&gt;.                
                <return>
                    The encoding name.  May be null, which indicates the
                      default encoding should be used.                    
                </return>
            </javadoc>
            <method name="getEncoding" type="String" line="116"/>
            <javadoc line="119">
                Set a &lt;tt&gt;Filter&lt;/tt&gt; to control output on this &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;P&gt;
                  For each call of &lt;tt&gt;publish&lt;/tt&gt; the &lt;tt&gt;Handler&lt;/tt&gt; will call
                  this &lt;tt&gt;Filter&lt;/tt&gt; (if it is non-null) to check if the
                  &lt;tt&gt;LogRecord&lt;/tt&gt; should be published or discarded.                
                <param>
                    newFilter  a <tt>Filter</tt> object (may be null)                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="setFilter" type="void" line="129">
                <params>
                    <param name="newFilter" type="Filter"/>
                </params>
            </method>
            <javadoc line="133">
                Get the current &lt;tt&gt;Filter&lt;/tt&gt; for this &lt;tt&gt;Handler&lt;/tt&gt;.                
                <return>
                    a <tt>Filter</tt> object (may be null)                    
                </return>
            </javadoc>
            <method name="getFilter" type="Filter" line="137"/>
            <javadoc line="140">
                Define an ErrorManager for this Handler.
                  &lt;p&gt;
                  The ErrorManager&apos;s &quot;error&quot; method will be invoked if any
                  errors occur while using this Handler.                
                <param>
                    em  the new ErrorManager                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="setErrorManager" type="void" line="149">
                <params>
                    <param name="em" type="ErrorManager"/>
                </params>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                Retrieves the ErrorManager for this Handler.                
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="getErrorManager" type="ErrorManager" line="161"/>
            <javadoc line="165">
                Protected convenience method to report an error to this Handler&apos;s
                  ErrorManager.  Note that this method retrieves and uses the ErrorManager
                  without doing a security check.  It can therefore be used in
                  environments where the caller may be non-privileged.                
                <param>
                    msg    a descriptive string (may be null)                    
                </param>
                <param>
                    ex     an exception (may be null)                    
                </param>
                <param>
                    code   an error code defined in ErrorManager                    
                </param>
            </javadoc>
            <method name="reportError" type="void" line="174">
                <params>
                    <param name="msg" type="String"/>
                    <param name="ex" type="Exception"/>
                    <param name="code" type="int"/>
                </params>
                <scope line="175"/>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                Set the log level specifying which message levels will be
                  logged by this &lt;tt&gt;Handler&lt;/tt&gt;.  Message levels lower than this
                  value will be discarded.
                  &lt;p&gt;
                  The intention is to allow developers to turn on voluminous
                  logging, but to limit the messages that are sent to certain
                  &lt;tt&gt;Handlers&lt;/tt&gt;.                
                <param>
                    newLevel   the new value for the log level                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="setLevel" type="void" line="195">
                <params>
                    <param name="newLevel" type="Level"/>
                </params>
                <scope line="196"/>
            </method>
            <javadoc line="202">
                Get the log level specifying which messages will be
                  logged by this &lt;tt&gt;Handler&lt;/tt&gt;.  Message levels lower
                  than this level will be discarded.                
                <return>
                    the level of messages being logged.                    
                </return>
            </javadoc>
            <method name="getLevel" type="Level" line="208"/>
            <javadoc line="211">
                Check if this &lt;tt&gt;Handler&lt;/tt&gt; would actually log a given &lt;tt&gt;LogRecord&lt;/tt&gt;.
                  &lt;p&gt;
                  This method checks if the &lt;tt&gt;LogRecord&lt;/tt&gt; has an appropriate
                  &lt;tt&gt;Level&lt;/tt&gt; and  whether it satisfies any &lt;tt&gt;Filter&lt;/tt&gt;.  It also
                  may make other &lt;tt&gt;Handler&lt;/tt&gt; specific checks that might prevent a
                  handler from logging the &lt;tt&gt;LogRecord&lt;/tt&gt;. It will return false if
                  the &lt;tt&gt;LogRecord&lt;/tt&gt; is null.
                  &lt;p&gt;                
                <param>
                    record  a <tt>LogRecord</tt>                    
                </param>
                <return>
                    true if the <tt>LogRecord</tt> would be logged.                    
                </return>
            </javadoc>
            <method name="isLoggable" type="boolean" line="223">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <declaration name="levelValue" type="int" line="224"/>
                <scope line="225"/>
                <declaration name="filter" type="Filter" line="228"/>
                <scope line="229"/>
            </method>
            <method name="checkAccess" type="void" line="234">
                <scope line="235"/>
            </method>
        </class>
    </source>