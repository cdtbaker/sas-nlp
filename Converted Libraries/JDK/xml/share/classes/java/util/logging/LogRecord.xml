<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.util"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="java.io"/>
        <import package="sun.misc.JavaLangAccess"/>
        <import package="sun.misc.SharedSecrets"/>
        <class name="LogRecord" line="35">
            <comment line="525">
                Private method to infer the caller&apos;s class and method names                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="35">
                LogRecord objects are used to pass logging requests between
                  the logging framework and individual log Handlers.
                  &lt;p&gt;
                  When a LogRecord is passed into the logging framework it
                  logically belongs to the framework and should no longer be
                  used or updated by the client application.
                  &lt;p&gt;
                  Note that if the client application has not specified an
                  explicit source method name and source class name, then the
                  LogRecord class will infer them automatically when they are
                  first accessed (due to a call on getSourceMethodName or
                  getSourceClassName) by analyzing the call stack.  Therefore,
                  if a logging Handler wants to pass off a LogRecord to another
                  thread, or to transmit it over RMI, and if it wishes to subsequently
                  obtain method name or class name information it should call
                  one of getSourceClassName or getSourceMethodName to force
                  the values to be filled in.
                  &lt;p&gt;
                  &lt;b&gt; Serialization notes:&lt;/b&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The LogRecord class is serializable.
                  &lt;li&gt; Because objects in the parameters array may not be serializable,
                  during serialization all objects in the parameters array are
                  written as the corresponding Strings (using Object.toString).
                  &lt;li&gt; The ResourceBundle is not transmitted as part of the serialized
                  form, but the resource bundle name is, and the recipient object&apos;s
                  readObject method will attempt to locate a suitable resource bundle.
                  &lt;/ul&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="globalSequenceNumber" type="AtomicLong" line="72"/>
            <declaration name="MIN_SEQUENTIAL_THREAD_ID" type="int" line="75"/>
            <javadoc line="75">
                The default value of threadID will be the current thread&apos;s
                  thread id, for ease of correlation, unless it is greater than
                  MIN_SEQUENTIAL_THREAD_ID, in which case we try harder to keep
                  our promise to keep threadIDs unique by avoiding collisions due
                  to 32-bit wraparound.  Unfortunately, LogRecord.getThreadID()
                  returns int, while Thread.getId() returns long.                
            </javadoc>
            <declaration name="nextThreadId" type="AtomicInteger" line="85"/>
            <declaration name="threadIds" type="ThreadLocal&lt;Integer&gt;" line="88"/>
            <declaration name="level" type="Level" line="90"/>
            <javadoc line="90">
                @serial Logging message level                
            </javadoc>
            <declaration name="sequenceNumber" type="long" line="95"/>
            <javadoc line="95">
                @serial Sequence number                
            </javadoc>
            <declaration name="sourceClassName" type="String" line="100"/>
            <javadoc line="100">
                @serial Class that issued logging call                
            </javadoc>
            <declaration name="sourceMethodName" type="String" line="105"/>
            <javadoc line="105">
                @serial Method that issued logging call                
            </javadoc>
            <declaration name="message" type="String" line="110"/>
            <javadoc line="110">
                @serial Non-localized raw message text                
            </javadoc>
            <declaration name="threadID" type="int" line="115"/>
            <javadoc line="115">
                @serial Thread ID for thread that issued logging call.                
            </javadoc>
            <declaration name="millis" type="long" line="120"/>
            <javadoc line="120">
                @serial Event time in milliseconds since 1970                
            </javadoc>
            <declaration name="thrown" type="Throwable" line="125"/>
            <javadoc line="125">
                @serial The Throwable (if any) associated with log message                
            </javadoc>
            <declaration name="loggerName" type="String" line="130"/>
            <javadoc line="130">
                @serial Name of the source Logger.                
            </javadoc>
            <declaration name="resourceBundleName" type="String" line="135"/>
            <javadoc line="135">
                @serial Resource bundle name to localized log message.                
            </javadoc>
            <declaration name="needToInferCaller" type="boolean" line="140"/>
            <declaration name="parameters" type="Object" line="141"/>
            <declaration name="resourceBundle" type="ResourceBundle" line="142"/>
            <javadoc line="144">
                Returns the default value for a new LogRecord&apos;s threadID.                
            </javadoc>
            <method name="defaultThreadID" type="int" line="147">
                <declaration name="tid" type="long" line="148"/>
                <scope line="149"/>
                <scope line="151">
                    <declaration name="id" type="Integer" line="152"/>
                    <scope line="153"/>
                </scope>
            </method>
            <javadoc line="161">
                Construct a LogRecord with the given level and message values.
                  &lt;p&gt;
                  The sequence property will be initialized with a new unique value.
                  These sequence values are allocated in increasing order within a VM.
                  &lt;p&gt;
                  The millis property will be initialized to the current time.
                  &lt;p&gt;
                  The thread ID property will be initialized with a unique ID for
                  the current thread.
                  &lt;p&gt;
                  All other properties will be initialized to &quot;null&quot;.                
                <param>
                    level  a logging level value                    
                </param>
                <param>
                    msg  the raw non-localized logging message (may be null)                    
                </param>
            </javadoc>
            <method name="LogRecord" type="constructor" line="177">
                <params>
                    <param name="level" type="Level"/>
                    <param name="msg" type="String"/>
                </params>
                <comment line="179">
                    Make sure level isn&apos;t null, by calling random method.                    
                </comment>
                <comment line="183">
                    Assign a thread ID and a unique sequence number.                    
                </comment>
            </method>
            <javadoc line="189">
                Get the source Logger&apos;s name.                
                <return>
                    source logger name (may be null)                    
                </return>
            </javadoc>
            <method name="getLoggerName" type="String" line="194"/>
            <javadoc line="198">
                Set the source Logger&apos;s name.                
                <param>
                    name   the source logger name (may be null)                    
                </param>
            </javadoc>
            <method name="setLoggerName" type="void" line="203">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="207">
                Get the localization resource bundle
                  &lt;p&gt;
                  This is the ResourceBundle that should be used to localize
                  the message string before formatting it.  The result may
                  be null if the message is not localizable, or if no suitable
                  ResourceBundle is available.                
            </javadoc>
            <method name="getResourceBundle" type="ResourceBundle" line="215"/>
            <javadoc line="219">
                Set the localization resource bundle.                
                <param>
                    bundle  localization bundle (may be null)                    
                </param>
            </javadoc>
            <method name="setResourceBundle" type="void" line="224">
                <params>
                    <param name="bundle" type="ResourceBundle"/>
                </params>
            </method>
            <javadoc line="228">
                Get the localization resource bundle name
                  &lt;p&gt;
                  This is the name for the ResourceBundle that should be
                  used to localize the message string before formatting it.
                  The result may be null if the message is not localizable.                
            </javadoc>
            <method name="getResourceBundleName" type="String" line="235"/>
            <javadoc line="239">
                Set the localization resource bundle name.                
                <param>
                    name  localization bundle name (may be null)                    
                </param>
            </javadoc>
            <method name="setResourceBundleName" type="void" line="244">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="248">
                Get the logging message level, for example Level.SEVERE.                
                <return>
                    the logging message level                    
                </return>
            </javadoc>
            <method name="getLevel" type="Level" line="252"/>
            <javadoc line="256">
                Set the logging message level, for example Level.SEVERE.                
                <param>
                    level the logging message level                    
                </param>
            </javadoc>
            <method name="setLevel" type="void" line="260">
                <params>
                    <param name="level" type="Level"/>
                </params>
                <scope line="261"/>
            </method>
            <javadoc line="267">
                Get the sequence number.
                  &lt;p&gt;
                  Sequence numbers are normally assigned in the LogRecord
                  constructor, which assigns unique sequence numbers to
                  each new LogRecord in increasing order.                
                <return>
                    the sequence number                    
                </return>
            </javadoc>
            <method name="getSequenceNumber" type="long" line="275"/>
            <javadoc line="279">
                Set the sequence number.
                  &lt;p&gt;
                  Sequence numbers are normally assigned in the LogRecord constructor,
                  so it should not normally be necessary to use this method.                
            </javadoc>
            <method name="setSequenceNumber" type="void" line="285">
                <params>
                    <param name="seq" type="long"/>
                </params>
            </method>
            <javadoc line="289">
                Get the  name of the class that (allegedly) issued the logging request.
                  &lt;p&gt;
                  Note that this sourceClassName is not verified and may be spoofed.
                  This information may either have been provided as part of the
                  logging call, or it may have been inferred automatically by the
                  logging framework.  In the latter case, the information may only
                  be approximate and may in fact describe an earlier call on the
                  stack frame.
                  &lt;p&gt;
                  May be null if no information could be obtained.                
                <return>
                    the source class name                    
                </return>
            </javadoc>
            <method name="getSourceClassName" type="String" line="303">
                <scope line="304"/>
            </method>
            <javadoc line="310">
                Set the name of the class that (allegedly) issued the logging request.                
                <param>
                    sourceClassName the source class name (may be null)                    
                </param>
            </javadoc>
            <method name="setSourceClassName" type="void" line="315">
                <params>
                    <param name="sourceClassName" type="String"/>
                </params>
            </method>
            <javadoc line="320">
                Get the  name of the method that (allegedly) issued the logging request.
                  &lt;p&gt;
                  Note that this sourceMethodName is not verified and may be spoofed.
                  This information may either have been provided as part of the
                  logging call, or it may have been inferred automatically by the
                  logging framework.  In the latter case, the information may only
                  be approximate and may in fact describe an earlier call on the
                  stack frame.
                  &lt;p&gt;
                  May be null if no information could be obtained.                
                <return>
                    the source method name                    
                </return>
            </javadoc>
            <method name="getSourceMethodName" type="String" line="334">
                <scope line="335"/>
            </method>
            <javadoc line="341">
                Set the name of the method that (allegedly) issued the logging request.                
                <param>
                    sourceMethodName the source method name (may be null)                    
                </param>
            </javadoc>
            <method name="setSourceMethodName" type="void" line="346">
                <params>
                    <param name="sourceMethodName" type="String"/>
                </params>
            </method>
            <javadoc line="351">
                Get the &quot;raw&quot; log message, before localization or formatting.
                  &lt;p&gt;
                  May be null, which is equivalent to the empty string &quot;&quot;.
                  &lt;p&gt;
                  This message may be either the final text or a localization key.
                  &lt;p&gt;
                  During formatting, if the source logger has a localization
                  ResourceBundle and if that ResourceBundle has an entry for
                  this message string, then the message string is replaced
                  with the localized value.                
                <return>
                    the raw message string                    
                </return>
            </javadoc>
            <method name="getMessage" type="String" line="365"/>
            <javadoc line="369">
                Set the &quot;raw&quot; log message, before localization or formatting.                
                <param>
                    message the raw message string (may be null)                    
                </param>
            </javadoc>
            <method name="setMessage" type="void" line="374">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <javadoc line="378">
                Get the parameters to the log message.                
                <return>
                    the log message parameters.  May be null if
                      there are no parameters.                    
                </return>
            </javadoc>
            <method name="getParameters" type="Object[]" line="384"/>
            <javadoc line="388">
                Set the parameters to the log message.                
                <param>
                    parameters the log message parameters. (may be null)                    
                </param>
            </javadoc>
            <method name="setParameters" type="void" line="393">
                <params>
                    <param name="parameters" type="Object"/>
                </params>
            </method>
            <javadoc line="397">
                Get an identifier for the thread where the message originated.
                  &lt;p&gt;
                  This is a thread identifier within the Java VM and may or
                  may not map to any operating system ID.                
                <return>
                    thread ID                    
                </return>
            </javadoc>
            <method name="getThreadID" type="int" line="405"/>
            <javadoc line="409">
                Set an identifier for the thread where the message originated.                
                <param>
                    threadID  the thread ID                    
                </param>
            </javadoc>
            <method name="setThreadID" type="void" line="413">
                <params>
                    <param name="threadID" type="int"/>
                </params>
            </method>
            <javadoc line="417">
                Get event time in milliseconds since 1970.                
                <return>
                    event time in millis since 1970                    
                </return>
            </javadoc>
            <method name="getMillis" type="long" line="422"/>
            <javadoc line="426">
                Set event time.                
                <param>
                    millis event time in millis since 1970                    
                </param>
            </javadoc>
            <method name="setMillis" type="void" line="431">
                <params>
                    <param name="millis" type="long"/>
                </params>
            </method>
            <javadoc line="435">
                Get any throwable associated with the log record.
                  &lt;p&gt;
                  If the event involved an exception, this will be the
                  exception object. Otherwise null.                
                <return>
                    a throwable                    
                </return>
            </javadoc>
            <method name="getThrown" type="Throwable" line="443"/>
            <javadoc line="447">
                Set a throwable associated with the log event.                
                <param>
                    thrown  a throwable (may be null)                    
                </param>
            </javadoc>
            <method name="setThrown" type="void" line="452">
                <params>
                    <param name="thrown" type="Throwable"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="456"/>
            <javadoc line="458">
                @serialData Default fields, followed by a two byte version number
                  (major byte, followed by minor byte), followed by information on
                  the log record parameter array.  If there is no parameter array,
                  then -1 is written.  If there is a parameter array (possible of zero
                  length) then the array length is written as an integer, followed
                  by String values for each parameter.  If a parameter is null, then
                  a null String is written.  Otherwise the output of Object.toString()
                  is written.                
            </javadoc>
            <method name="writeObject" type="void" line="468">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="470">
                    We have to call defaultWriteObject first.                    
                </comment>
                <comment line="473">
                    Write our version number.                    
                </comment>
                <comment line="481">
                    Write string values for the parameters.                    
                </comment>
                <scope line="475"/>
                <scope line="481">
                    <scope line="482"/>
                    <scope line="484"/>
                </scope>
            </method>
            <method name="readObject" type="void" line="491">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="493">
                    We have to call defaultReadObject first.                    
                </comment>
                <comment line="496">
                    Read version number.                    
                </comment>
                <comment line="511">
                    If necessary, try to regenerate the resource bundle.                    
                </comment>
                <comment line="516">
                    This is not a good place to throw an exception,
                     so we simply leave the resourceBundle null.                    
                </comment>
                <declaration name="major" type="byte" line="496"/>
                <declaration name="minor" type="byte" line="497"/>
                <scope line="498"/>
                <declaration name="len" type="int" line="501"/>
                <scope line="502"/>
                <scope line="504">
                    <scope line="506"/>
                </scope>
                <scope line="511">
                    <scope line="512"/>
                    <scope line="514"/>
                </scope>
            </method>
            <method name="inferCaller" type="void" line="525">
                <comment line="534">
                    Calling getStackTraceElement directly prevents the VM
                     from paying the cost of building the entire stack frame.                    
                </comment>
                <comment line="541">
                    Skip all frames until we have found the first logger frame.                    
                </comment>
                <comment line="547">
                    skip reflection call                    
                </comment>
                <comment line="549">
                    We&apos;ve found the relevant frame.                    
                </comment>
                <comment line="557">
                    We haven&apos;t found a suitable frame, so just punt.  This is
                     OK as we are only committed to making a &quot;best effort&quot; here.                    
                </comment>
                <declaration name="access" type="JavaLangAccess" line="527"/>
                <declaration name="throwable" type="Throwable" line="528"/>
                <declaration name="depth" type="int" line="529"/>
                <declaration name="lookingForLogger" type="boolean" line="531"/>
                <scope line="532">
                    <declaration name="frame" type="StackTraceElement" line="535"/>
                    <declaration name="cname" type="String" line="537"/>
                    <declaration name="isLoggerImpl" type="boolean" line="538"/>
                    <scope line="539">
                        <scope line="541"/>
                    </scope>
                    <scope line="544">
                        <scope line="545">
                            <scope line="547"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isLoggerImplFrame" type="boolean" line="560">
                <params>
                    <param name="cname" type="String"/>
                </params>
                <comment line="562">
                    the log record could be created for a platform logger                    
                </comment>
            </method>
        </class>
    </source>