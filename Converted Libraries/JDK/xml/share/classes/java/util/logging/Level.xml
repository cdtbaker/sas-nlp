<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.util.ResourceBundle"/>
        <class name="Level" line="29">
            <comment line="269">
                Serialization magic to prevent &quot;doppelgangers&quot;.
                 This is a performance optimization.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="29">
                The Level class defines a set of standard logging levels that
                  can be used to control logging output.  The logging Level objects
                  are ordered and are specified by ordered integers.  Enabling logging
                  at a given level also enables logging at all higher levels.
                  &lt;p&gt;
                  Clients should normally use the predefined Level constants such
                  as Level.SEVERE.
                  &lt;p&gt;
                  The levels in descending order are:
                  &lt;ul&gt;
                  &lt;li&gt;SEVERE (highest value)
                  &lt;li&gt;WARNING
                  &lt;li&gt;INFO
                  &lt;li&gt;CONFIG
                  &lt;li&gt;FINE
                  &lt;li&gt;FINER
                  &lt;li&gt;FINEST  (lowest value)
                  &lt;/ul&gt;
                  In addition there is a level OFF that can be used to turn
                  off logging, and a level ALL that can be used to enable
                  logging of all messages.
                  &lt;p&gt;
                  It is possible for third parties to define additional logging
                  levels by subclassing Level.  In such cases subclasses should
                  take care to chose unique integer level values and to ensure that
                  they maintain the Object uniqueness property across serialization
                  by defining a suitable readResolve method.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="known" type="java.util.ArrayList&lt;Level&gt;" line="62"/>
            <declaration name="defaultBundle" type="String" line="63"/>
            <declaration name="name" type="String" line="65"/>
            <javadoc line="65">
                @serial  The non-localized name of the level.                
            </javadoc>
            <declaration name="value" type="int" line="70"/>
            <javadoc line="70">
                @serial  The integer value of the level.                
            </javadoc>
            <declaration name="resourceBundleName" type="String" line="75"/>
            <javadoc line="75">
                @serial The resource bundle name to be used in localizing the level name.                
            </javadoc>
            <declaration name="OFF" type="Level" line="80"/>
            <javadoc line="80">
                OFF is a special level that can be used to turn off logging.
                  This level is initialized to &lt;CODE&gt;Integer.MAX_VALUE&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="SEVERE" type="Level" line="86"/>
            <javadoc line="86">
                SEVERE is a message level indicating a serious failure.
                  &lt;p&gt;
                  In general SEVERE messages should describe events that are
                  of considerable importance and which will prevent normal
                  program execution.   They should be reasonably intelligible
                  to end users and to system administrators.
                  This level is initialized to &lt;CODE&gt;1000&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="WARNING" type="Level" line="97"/>
            <javadoc line="97">
                WARNING is a message level indicating a potential problem.
                  &lt;p&gt;
                  In general WARNING messages should describe events that will
                  be of interest to end users or system managers, or which
                  indicate potential problems.
                  This level is initialized to &lt;CODE&gt;900&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="INFO" type="Level" line="107"/>
            <javadoc line="107">
                INFO is a message level for informational messages.
                  &lt;p&gt;
                  Typically INFO messages will be written to the console
                  or its equivalent.  So the INFO level should only be
                  used for reasonably significant messages that will
                  make sense to end users and system administrators.
                  This level is initialized to &lt;CODE&gt;800&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="CONFIG" type="Level" line="118"/>
            <javadoc line="118">
                CONFIG is a message level for static configuration messages.
                  &lt;p&gt;
                  CONFIG messages are intended to provide a variety of static
                  configuration information, to assist in debugging problems
                  that may be associated with particular configurations.
                  For example, CONFIG message might include the CPU type,
                  the graphics depth, the GUI look-and-feel, etc.
                  This level is initialized to &lt;CODE&gt;700&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="FINE" type="Level" line="130"/>
            <javadoc line="130">
                FINE is a message level providing tracing information.
                  &lt;p&gt;
                  All of FINE, FINER, and FINEST are intended for relatively
                  detailed tracing.  The exact meaning of the three levels will
                  vary between subsystems, but in general, FINEST should be used
                  for the most voluminous detailed output, FINER for somewhat
                  less detailed output, and FINE for the  lowest volume (and
                  most important) messages.
                  &lt;p&gt;
                  In general the FINE level should be used for information
                  that will be broadly interesting to developers who do not have
                  a specialized interest in the specific subsystem.
                  &lt;p&gt;
                  FINE messages might include things like minor (recoverable)
                  failures.  Issues indicating potential performance problems
                  are also worth logging as FINE.
                  This level is initialized to &lt;CODE&gt;500&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="FINER" type="Level" line="151"/>
            <javadoc line="151">
                FINER indicates a fairly detailed tracing message.
                  By default logging calls for entering, returning, or throwing
                  an exception are traced at this level.
                  This level is initialized to &lt;CODE&gt;400&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="FINEST" type="Level" line="159"/>
            <javadoc line="159">
                FINEST indicates a highly detailed tracing message.
                  This level is initialized to &lt;CODE&gt;300&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="ALL" type="Level" line="165"/>
            <javadoc line="165">
                ALL indicates that all messages should be logged.
                  This level is initialized to &lt;CODE&gt;Integer.MIN_VALUE&lt;/CODE&gt;.                
            </javadoc>
            <javadoc line="171">
                Create a named Level with a given integer value.
                  &lt;p&gt;
                  Note that this constructor is &quot;protected&quot; to allow subclassing.
                  In general clients of logging should use one of the constant Level
                  objects such as SEVERE or FINEST.  However, if clients need to
                  add new logging levels, they may subclass Level and define new
                  constants.                
                <param>
                    name  the name of the Level, for example &quot;SEVERE&quot;.                    
                </param>
                <param>
                    value an integer value for the level.                    
                </param>
                <throws>
                    NullPointerException if the name is null                    
                </throws>
            </javadoc>
            <method name="Level" type="constructor" line="183">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="187">
                Create a named Level with a given integer value and a
                  given localization resource name.
                  &lt;p&gt;                
                <param>
                    name  the name of the Level, for example &quot;SEVERE&quot;.                    
                </param>
                <param>
                    value an integer value for the level.                    
                </param>
                <param>
                    resourceBundleName name of a resource bundle to use in
                      localizing the given name. If the resourceBundleName is null
                      or an empty string, it is ignored.                    
                </param>
                <throws>
                    NullPointerException if the name is null                    
                </throws>
            </javadoc>
            <method name="Level" type="constructor" line="198">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="int"/>
                    <param name="resourceBundleName" type="String"/>
                </params>
                <scope line="199"/>
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Return the level&apos;s localization resource bundle name, or
                  null if no localization bundle is defined.                
                <return>
                    localization resource bundle name                    
                </return>
            </javadoc>
            <method name="getResourceBundleName" type="String" line="216"/>
            <javadoc line="220">
                Return the non-localized string name of the Level.                
                <return>
                    non-localized name                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="225"/>
            <javadoc line="229">
                Return the localized string name of the Level, for
                  the current default locale.
                  &lt;p&gt;
                  If no localization information is available, the
                  non-localized name is returned.                
                <return>
                    localized name                    
                </return>
            </javadoc>
            <method name="getLocalizedName" type="String" line="238">
                <scope line="239">
                    <declaration name="rb" type="ResourceBundle" line="240"/>
                </scope>
                <scope line="242"/>
            </method>
            <javadoc line="247">
                Returns a string representation of this Level.                
                <return>
                    the non-localized name of the Level, for example &quot;INFO&quot;.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="252"/>
            <javadoc line="256">
                Get the integer value for this level.  This integer value
                  can be used for efficient ordering comparisons between
                  Level objects.                
                <return>
                    the integer value for this level.                    
                </return>
            </javadoc>
            <method name="intValue" type="int" line="262"/>
            <declaration name="serialVersionUID" type="long" line="266"/>
            <method name="readResolve" type="Object" line="270">
                <comment line="282">
                    Woops.  Whoever sent us this object knows
                     about a new log level.  Add it to our list.                    
                </comment>
                <scope line="271">
                    <scope line="272">
                        <declaration name="other" type="Level" line="273"/>
                        <scope line="277"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="288">
                Parse a level name string into a Level.
                  &lt;p&gt;
                  The argument string may consist of either a level name
                  or an integer value.
                  &lt;p&gt;
                  For example:
                  &lt;ul&gt;
                  &lt;li&gt;     &quot;SEVERE&quot;
                  &lt;li&gt;     &quot;1000&quot;
                  &lt;/ul&gt;                
                <param>
                    name   string to be parsed                    
                </param>
                <throws>
                    NullPointerException if the name is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the value is not valid.
                      Valid values are integers between &lt;CODE&gt;Integer.MIN_VALUE&lt;/CODE&gt;
                      and &lt;CODE&gt;Integer.MAX_VALUE&lt;/CODE&gt;, and all known level names.
                      Known names are the levels defined by this class (e.g., &lt;CODE&gt;FINE&lt;/CODE&gt;,
                      &lt;CODE&gt;FINER&lt;/CODE&gt;, &lt;CODE&gt;FINEST&lt;/CODE&gt;), or created by this class with
                      appropriate package access, or new levels defined or created
                      by subclasses.                    
                </throws>
                <return>
                    The parsed value. Passing an integer that corresponds to a known name
                      (e.g., 700) will return the associated name (e.g., &lt;CODE&gt;CONFIG&lt;/CODE&gt;).
                      Passing an integer that does not (e.g., 1) will return a new level name
                      initialized to that value.                    
                </return>
            </javadoc>
            <method name="parse" type="Level" line="314">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="316">
                    Check that name is not null.                    
                </comment>
                <comment line="319">
                    Look for a known Level with the given non-localized name.                    
                </comment>
                <comment line="327">
                    Now, check if the given name is an integer.  If so,
                     first look for a Level with the given value and then
                     if necessary create one.                    
                </comment>
                <comment line="338">
                    Create a new Level.                    
                </comment>
                <comment line="341">
                    Not an integer.
                     Drop through.                    
                </comment>
                <comment line="345">
                    Finally, look for a known level with the given localized name,
                     in the current default locale.
                     This is relatively expensive, but not excessively so.                    
                </comment>
                <comment line="355">
                    OK, we&apos;ve tried everything and failed                    
                </comment>
                <scope line="319">
                    <declaration name="l" type="Level" line="320"/>
                    <scope line="321"/>
                </scope>
                <scope line="329">
                    <declaration name="x" type="int" line="330"/>
                    <scope line="331">
                        <declaration name="l" type="Level" line="332"/>
                        <scope line="333"/>
                    </scope>
                </scope>
                <scope line="339"/>
                <scope line="347">
                    <declaration name="l" type="Level" line="348"/>
                    <scope line="349"/>
                </scope>
            </method>
            <javadoc line="358">
                Compare two objects for value equality.                
                <return>
                    true if and only if the two objects have the same level value.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="362">
                <params>
                    <param name="ox" type="Object"/>
                </params>
                <scope line="363">
                    <declaration name="lx" type="Level" line="364"/>
                </scope>
                <scope line="366"/>
            </method>
            <javadoc line="371">
                Generate a hashcode.                
                <return>
                    a hashcode based on the level value                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="375"/>
        </class>
    </source>