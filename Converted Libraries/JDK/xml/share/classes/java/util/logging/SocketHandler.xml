<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.io"/>
        <import package="java.net"/>
        <class name="SocketHandler" line="4">
            <extends class="StreamHandler"/>
            <javadoc line="4">
                Simple network logging &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;LogRecords&lt;/tt&gt; are published to a network stream connection.  By default
                  the &lt;tt&gt;XMLFormatter&lt;/tt&gt; class is used for formatting.
                  &lt;p&gt;
                  &lt;b&gt;Configuration:&lt;/b&gt;
                  By default each &lt;tt&gt;SocketHandler&lt;/tt&gt; is initialized using the following
                  &lt;tt&gt;LogManager&lt;/tt&gt; configuration properties.  If properties are not defined
                  (or have invalid values) then the specified default values are used.
                  &lt;ul&gt;
                  &lt;li&gt;   java.util.logging.SocketHandler.level
                  specifies the default level for the &lt;tt&gt;Handler&lt;/tt&gt;
                  (defaults to &lt;tt&gt;Level.ALL&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.SocketHandler.filter
                  specifies the name of a &lt;tt&gt;Filter&lt;/tt&gt; class to use
                  (defaults to no &lt;tt&gt;Filter&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.SocketHandler.formatter
                  specifies the name of a &lt;tt&gt;Formatter&lt;/tt&gt; class to use
                  (defaults to &lt;tt&gt;java.util.logging.XMLFormatter&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.SocketHandler.encoding
                  the name of the character set encoding to use (defaults to
                  the default platform encoding).
                  &lt;li&gt;   java.util.logging.SocketHandler.host
                  specifies the target host name to connect to (no default).
                  &lt;li&gt;   java.util.logging.SocketHandler.port
                  specifies the target TCP port to use (no default).
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The output IO stream is buffered, but is flushed after each
                  &lt;tt&gt;LogRecord&lt;/tt&gt; is written.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="sock" type="Socket" line="38"/>
            <declaration name="host" type="String" line="39"/>
            <declaration name="port" type="int" line="40"/>
            <declaration name="portProperty" type="String" line="41"/>
            <method name="configure" type="void" line="42">
                <declaration name="manager" type="LogManager" line="43"/>
                <declaration name="cname" type="String" line="44"/>
                <scope line="48"/>
                <scope line="51">
                    <scope line="52"/>
                    <scope line="55"/>
                </scope>
            </method>
            <javadoc line="61">
                Create a &lt;tt&gt;SocketHandler&lt;/tt&gt;, using only &lt;tt&gt;LogManager&lt;/tt&gt; properties
                  (or their defaults).                
                <throws>
                    IllegalArgumentException if the host or port are invalid or
                      are not specified as LogManager properties.                    
                </throws>
                <throws>
                    IOException if we are unable to connect to the target
                      host and port.                    
                </throws>
            </javadoc>
            <method name="SocketHandler" type="constructor" line="69">
                <scope line="72"/>
                <scope line="75"/>
            </method>
            <javadoc line="81">
                Construct a &lt;tt&gt;SocketHandler&lt;/tt&gt; using a specified host and port.
                  The &lt;tt&gt;SocketHandler&lt;/tt&gt; is configured based on &lt;tt&gt;LogManager&lt;/tt&gt;
                  properties (or their default values) except that the given target host
                  and port arguments are used. If the host argument is empty, but not
                  null String then the localhost is used.                
                <param>
                    host target host.                    
                </param>
                <param>
                    port target port.                    
                </param>
                <throws>
                    IllegalArgumentException if the host or port are invalid.                    
                </throws>
                <throws>
                    IOException if we are unable to connect to the target
                      host and port.                    
                </throws>
            </javadoc>
            <method name="SocketHandler" type="constructor" line="93">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="connect" type="void" line="101">
                <scope line="102"/>
                <scope line="105"/>
                <declaration name="out" type="OutputStream" line="109"/>
                <declaration name="bout" type="BufferedOutputStream" line="110"/>
            </method>
            <javadoc line="113">
                Close this output stream.                
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="118">
                <scope line="120">
                    <scope line="121"/>
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="129">
                Format and publish a &lt;tt&gt;LogRecord&lt;/tt&gt;.                
                <param>
                    record  description of the log event. A null record is
                      silently ignored and is not published                    
                </param>
            </javadoc>
            <method name="publish" type="void" line="134">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <scope line="135"/>
            </method>
        </class>
    </source>