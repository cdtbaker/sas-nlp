<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.io"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util"/>
        <class name="XMLFormatter" line="33">
            <extends class="Formatter"/>
            <comment line="50">
                Append a two digit number.                
            </comment>
            <comment line="58">
                Append the time and date in ISO 8601 format                
            </comment>
            <comment line="74">
                Append to the given StringBuffer an escaped version of the                
            </comment>
            <comment line="75">
                given text string where XML special characters have been escaped.                
            </comment>
            <comment line="76">
                For a null string we append &quot;&lt;null&gt;&quot;                
            </comment>
            <javadoc line="33">
                Format a LogRecord into a standard XML format.
                  &lt;p&gt;
                  The DTD specification is provided as Appendix A to the
                  Java Logging APIs specification.
                  &lt;p&gt;
                  The XMLFormatter can be used with arbitrary character encodings,
                  but it is recommended that it normally be used with UTF-8.  The
                  character encoding can be set on the output Handler.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="manager" type="LogManager" line="47"/>
            <method name="a2" type="void" line="50">
                <params>
                    <param name="sb" type="StringBuffer"/>
                    <param name="x" type="int"/>
                </params>
                <scope line="51"/>
            </method>
            <method name="appendISO8601" type="void" line="58">
                <params>
                    <param name="sb" type="StringBuffer"/>
                    <param name="millis" type="long"/>
                </params>
                <declaration name="date" type="Date" line="59"/>
            </method>
            <method name="escape" type="void" line="76">
                <params>
                    <param name="sb" type="StringBuffer"/>
                    <param name="text" type="String"/>
                </params>
                <scope line="77"/>
                <scope line="80">
                    <declaration name="ch" type="char" line="81"/>
                    <scope line="82"/>
                    <scope line="84"/>
                    <scope line="86"/>
                    <scope line="88"/>
                </scope>
            </method>
            <javadoc line="94">
                Format the given message to XML.
                  &lt;p&gt;
                  This method can be overridden in a subclass.
                  It is recommended to use the {@link Formatter#formatMessage}convenience method to localize and format the message field.                
                <param>
                    record the log record to be formatted.                    
                </param>
                <return>
                    a formatted log record                    
                </return>
            </javadoc>
            <method name="format" type="String" line="104">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <comment line="148">
                    Format the message string and its accompanying parameters.                    
                </comment>
                <comment line="156">
                    If the message is being localized, output the key, resource                    
                </comment>
                <comment line="157">
                    bundle name, and params.                    
                </comment>
                <comment line="169">
                    The message is not in the catalog.  Drop through.                    
                </comment>
                <comment line="173">
                    Check to see if the parameter was not a messagetext format                    
                </comment>
                <comment line="174">
                    or was not null or empty                    
                </comment>
                <comment line="189">
                    Report on the state of the throwable.                    
                </comment>
                <comment line="205">
                    Check for a line number.                    
                </comment>
                <declaration name="sb" type="StringBuffer" line="105"/>
                <declaration name="name" type="String" line="120"/>
                <scope line="121"/>
                <scope line="131"/>
                <scope line="137"/>
                <scope line="147">
                    <declaration name="message" type="String" line="149"/>
                </scope>
                <declaration name="bundle" type="ResourceBundle" line="158"/>
                <scope line="159">
                    <scope line="160"/>
                </scope>
                <scope line="168"/>
                <declaration name="parameters" type="Object" line="172"/>
                <scope line="176">
                    <scope line="177">
                        <scope line="179"/>
                        <scope line="181"/>
                    </scope>
                </scope>
                <scope line="188">
                    <declaration name="th" type="Throwable" line="190"/>
                    <declaration name="trace" type="StackTraceElement" line="195"/>
                    <scope line="196">
                        <declaration name="frame" type="StackTraceElement" line="197"/>
                        <scope line="206"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="220">
                Return the header string for a set of XML formatted records.                
                <param>
                    h  The target handler (can be null)                    
                </param>
                <return>
                    a valid XML string                    
                </return>
            </javadoc>
            <method name="getHead" type="String" line="226">
                <params>
                    <param name="h" type="Handler"/>
                </params>
                <comment line="238">
                    Figure out the default encoding.                    
                </comment>
                <comment line="241">
                    Try to map the encoding name to a canonical name.                    
                </comment>
                <comment line="246">
                    We hit problems finding a canonical name.                    
                </comment>
                <comment line="247">
                    Just use the raw encoding name.                    
                </comment>
                <declaration name="sb" type="StringBuffer" line="227"/>
                <declaration name="encoding" type="String" line="228"/>
                <scope line="231"/>
                <scope line="233"/>
                <scope line="237"/>
                <scope line="242">
                    <declaration name="cs" type="Charset" line="243"/>
                </scope>
                <scope line="245"/>
            </method>
            <javadoc line="259">
                Return the tail string for a set of XML formatted records.                
                <param>
                    h  The target handler (can be null)                    
                </param>
                <return>
                    a valid XML string                    
                </return>
            </javadoc>
            <method name="getTail" type="String" line="265">
                <params>
                    <param name="h" type="Handler"/>
                </params>
            </method>
        </class>
    </source>