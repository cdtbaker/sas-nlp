<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.io"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util"/>
        <class name="XMLFormatter" line="5">
            <extends class="Formatter"/>
            <javadoc line="5">
                Format a LogRecord into a standard XML format.
                  &lt;p&gt;
                  The DTD specification is provided as Appendix A to the
                  Java Logging APIs specification.
                  &lt;p&gt;
                  The XMLFormatter can be used with arbitrary character encodings,
                  but it is recommended that it normally be used with UTF-8.  The
                  character encoding can be set on the output Handler.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="manager" type="LogManager" line="17"/>
            <method name="a2" type="void" line="18">
                <params>
                    <param name="sb" type="StringBuffer"/>
                    <param name="x" type="int"/>
                </params>
                <scope line="19"/>
            </method>
            <method name="appendISO8601" type="void" line="24">
                <params>
                    <param name="sb" type="StringBuffer"/>
                    <param name="millis" type="long"/>
                </params>
                <declaration name="date" type="Date" line="25"/>
            </method>
            <method name="escape" type="void" line="38">
                <params>
                    <param name="sb" type="StringBuffer"/>
                    <param name="text" type="String"/>
                </params>
                <scope line="39"/>
                <scope line="42">
                    <declaration name="ch" type="char" line="43"/>
                    <scope line="44"/>
                    <scope line="47"/>
                    <scope line="50"/>
                    <scope line="53"/>
                </scope>
            </method>
            <javadoc line="58">
                Format the given message to XML.
                  &lt;p&gt;
                  This method can be overridden in a subclass.
                  It is recommended to use the {@link Formatter#formatMessage}convenience method to localize and format the message field.                
                <param>
                    record the log record to be formatted.                    
                </param>
                <return>
                    a formatted log record                    
                </return>
            </javadoc>
            <method name="format" type="String" line="66">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="67"/>
                <declaration name="name" type="String" line="78"/>
                <scope line="79"/>
                <scope line="87"/>
                <scope line="92"/>
                <scope line="100">
                    <declaration name="message" type="String" line="101"/>
                </scope>
                <declaration name="bundle" type="ResourceBundle" line="107"/>
                <scope line="108">
                    <scope line="109"/>
                </scope>
                <scope line="118"/>
                <declaration name="parameters" type="Object" line="120"/>
                <scope line="121">
                    <scope line="122">
                        <scope line="124"/>
                        <scope line="127"/>
                    </scope>
                </scope>
                <scope line="133">
                    <declaration name="th" type="Throwable" line="134"/>
                    <declaration name="trace" type="StackTraceElement" line="139"/>
                    <scope line="140">
                        <declaration name="frame" type="StackTraceElement" line="141"/>
                        <scope line="149"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="161">
                Return the header string for a set of XML formatted records.                
                <param>
                    h  The target handler (can be null)                    
                </param>
                <return>
                    a valid XML string                    
                </return>
            </javadoc>
            <method name="getHead" type="String" line="166">
                <params>
                    <param name="h" type="Handler"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="167"/>
                <declaration name="encoding" type="String" line="168"/>
                <scope line="170"/>
                <scope line="173"/>
                <scope line="176"/>
                <scope line="179">
                    <declaration name="cs" type="Charset" line="180"/>
                </scope>
                <scope line="183"/>
            </method>
            <javadoc line="193">
                Return the tail string for a set of XML formatted records.                
                <param>
                    h  The target handler (can be null)                    
                </param>
                <return>
                    a valid XML string                    
                </return>
            </javadoc>
            <method name="getTail" type="String" line="198">
                <params>
                    <param name="h" type="Handler"/>
                </params>
            </method>
        </class>
    </source>