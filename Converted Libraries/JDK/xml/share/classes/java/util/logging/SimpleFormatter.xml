<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.io"/>
        <import package="java.text"/>
        <import package="java.util.Date"/>
        <import package="sun.util.logging.LoggingSupport"/>
        <class name="SimpleFormatter" line="34">
            <extends class="Formatter"/>
            <comment line="62">
                format string for printing the log record                
            </comment>
            <javadoc line="34">
                Print a brief summary of the {@code LogRecord} in a human readable
                  format.  The summary will typically be 1 or 2 lines.
                  &lt;p&gt;
                  &lt;a name=&quot;formatting&quot;&gt;
                  &lt;b&gt;Configuration:&lt;/b&gt;&lt;/a&gt;
                  The {@code SimpleFormatter} is initialized with the
                  &lt;a href=&quot;../Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;
                  specified in the {@code java.util.logging.SimpleFormatter.format}property to {@linkplain #format format} the log messages.
                  This property can be defined
                  in the {@linkplain LogManager#getProperty logging properties}configuration file
                  or as a system property.  If this property is set in both
                  the logging properties and system properties,
                  the format string specified in the system property will be used.
                  If this property is not defined or the given format string
                  is {@linkplain java.util.IllegalFormatException illegal},
                  the default format is implementation-specific.                
                <since>
                    1.4                    
                </since>
                <see>
                    java.util.Formatter                    
                </see>
            </javadoc>
            <declaration name="format" type="String" line="62"/>
            <declaration name="dat" type="Date" line="63"/>
            <javadoc line="65">
                Format the given LogRecord.
                  &lt;p&gt;
                  The formatting can be customized by specifying the
                  &lt;a href=&quot;../Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;
                  in the &lt;a href=&quot;#formatting&quot;&gt;{@code java.util.logging.SimpleFormatter.format}&lt;/a&gt; property.
                  The given {@code LogRecord} will be formatted as if by calling:
                  &lt;pre&gt;{@link String#format String.format}(format, date, source, logger, level, message, thrown);
                  &lt;/pre&gt;
                  where the arguments are:&lt;br&gt;
                  &lt;ol&gt;
                  &lt;li&gt;{@code format} - the {@link java.util.Formatterjava.util.Formatter} format string specified in the{@code java.util.logging.SimpleFormatter.format} property
                  or the default format.&lt;/li&gt;
                  &lt;li&gt;{@code date} - a {@link Date} object representing{@linkplain LogRecord#getMillis event time} of the log record.&lt;/li&gt;
                  &lt;li&gt;{@code source} - a string representing the caller, if available;
                  otherwise, the logger&apos;s name.&lt;/li&gt;
                  &lt;li&gt;{@code logger} - the logger&apos;s name.&lt;/li&gt;
                  &lt;li&gt;{@code level} - the {@linkplain Level#getLocalizedNamelog level}.&lt;/li&gt;
                  &lt;li&gt;{@code message} - the formatted log message
                  returned from the {@link Formatter#formatMessage(LogRecord)}method.  It uses {@link java.text.MessageFormat java.text}formatting and does not use the {@code java.util.Formatter
                  format} argument.&lt;/li&gt;
                  &lt;li&gt;{@code thrown} - a string representing
                  the {@linkplain LogRecord#getThrown throwable}associated with the log record and its backtrace
                  beginning with a newline character, if any;
                  otherwise, an empty string.&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt;Some example formats:&lt;br&gt;
                  &lt;ul&gt;
                  &lt;li&gt; {@code java.util.logging.SimpleFormatter.format=&quot;%4$s: %5$s [%1$tc]%n&quot;}&lt;p&gt;This prints 1 line with the log level ({@code 4$}),
                  the log message ({@code 5$}) and the timestamp ({@code 1$}) in
                  a square bracket.
                  &lt;pre&gt;
                  WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]
                  &lt;/pre&gt;&lt;/li&gt;
                  &lt;li&gt; {@code java.util.logging.SimpleFormatter.format=&quot;%1$tc %2$s%n%4$s: %5$s%6$s%n&quot;}&lt;p&gt;This prints 2 lines where the first line includes
                  the timestamp ({@code 1$}) and the source ({@code 2$});
                  the second line includes the log level ({@code 4$}) and
                  the log message ({@code 5$}) followed with the throwable
                  and its backtrace ({@code 6$}), if any:
                  &lt;pre&gt;
                  Tue Mar 22 13:11:31 PDT 2011 MyClass fatal
                  SEVERE: several message with an exception
                  java.lang.IllegalArgumentException: invalid argument
                  at MyClass.mash(MyClass.java:9)
                  at MyClass.crunch(MyClass.java:6)
                  at MyClass.main(MyClass.java:3)
                  &lt;/pre&gt;&lt;/li&gt;
                  &lt;li&gt; {@code java.util.logging.SimpleFormatter.format=&quot;%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n&quot;}&lt;p&gt;This prints 2 lines similar to the example above
                  with a different date/time formatting and does not print
                  the throwable and its backtrace:
                  &lt;pre&gt;
                  Mar 22, 2011 1:11:31 PM MyClass fatal
                  SEVERE: several message with an exception
                  &lt;/pre&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;This method can also be overridden in a subclass.
                  It is recommended to use the {@link Formatter#formatMessage}convenience method to localize and format the message field.                
                <param>
                    record the log record to be formatted.                    
                </param>
                <return>
                    a formatted log record                    
                </return>
            </javadoc>
            <method name="format" type="String" line="140">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <declaration name="source" type="String" line="142"/>
                <scope line="143">
                    <scope line="145"/>
                </scope>
                <scope line="148"/>
                <declaration name="message" type="String" line="151"/>
                <declaration name="throwable" type="String" line="152"/>
                <scope line="153">
                    <declaration name="sw" type="StringWriter" line="154"/>
                    <declaration name="pw" type="PrintWriter" line="155"/>
                </scope>
            </method>
        </class>
    </source>