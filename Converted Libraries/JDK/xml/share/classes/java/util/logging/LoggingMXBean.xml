<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <interface name="LoggingMXBean">
            <javadoc line="2">
                The management interface for the logging facility. It is recommended
                  to use the {@link java.lang.management.PlatformLoggingMXBean} management
                  interface that implements all attributes defined in this{@code LoggingMXBean}.  The{@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)ManagementFactory.getPlatformMXBean} method can be used to obtain
                  the {@code PlatformLoggingMXBean} object representing the management
                  interface for logging.
                  &lt;p&gt;There is a single global instance of the &lt;tt&gt;LoggingMXBean&lt;/tt&gt;.
                  This instance is an {@link javax.management.MXBean MXBean} that
                  can be obtained by calling the {@link LogManager#getLoggingMXBean}method or from the{@linkplain java.lang.management.ManagementFactory#getPlatformMBeanServerplatform &lt;tt&gt;MBeanServer&lt;/tt&gt;}.
                  &lt;p&gt;
                  The {@link javax.management.ObjectName ObjectName} that uniquely identifies
                  the management interface for logging within the {@code MBeanServer} is:
                  &lt;pre&gt;{@link LogManager#LOGGING_MXBEAN_NAME java.util.logging:type=Logging}&lt;/pre&gt;
                  &lt;p&gt;
                  The instance registered in the platform {@code MBeanServer}is also a {@link java.lang.management.PlatformLoggingMXBean}.                
                <author>
                    Ron Mann                    
                </author>
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.5                    
                </since>
                <see>
                    java.lang.management.PlatformLoggingMXBean                    
                </see>
            </javadoc>
            <method name="getLoggerNames" type="java.util.List<String>" line="23"/>
            <javadoc line="23">
                Returns the list of currently registered logger names. This method
                  calls {@link LogManager#getLoggerNames} and returns a list
                  of the logger names.                
                <return>
                    A list of <tt>String</tt> each of which is a
                      currently registered <tt>Logger</tt> name.                    
                </return>
            </javadoc>
            <method name="getLoggerLevel" type="String" line="31"/>
            <javadoc line="31">
                Gets the name of the log level associated with the specified logger.
                  If the specified logger does not exist, &lt;tt&gt;null&lt;/tt&gt;
                  is returned.
                  This method first finds the logger of the given name and
                  then returns the name of the log level by calling:
                  &lt;blockquote&gt;{@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  If the &lt;tt&gt;Level&lt;/tt&gt; of the specified logger is &lt;tt&gt;null&lt;/tt&gt;,
                  which means that this logger&apos;s effective level is inherited
                  from its parent, an empty string will be returned.                
                <param>
                    loggerName The name of the <tt>Logger</tt> to be retrieved.                    
                </param>
                <return>
                    The name of the log level of the specified logger; or
                      an empty string if the log level of the specified logger
                      is <tt>null</tt>.  If the specified logger does not
                      exist, <tt>null</tt> is returned.                    
                </return>
                <see>
                    Logger#getLevel                    
                </see>
            </javadoc>
            <method name="setLoggerLevel" type="void" line="51"/>
            <javadoc line="51">
                Sets the specified logger to the specified new level.
                  If the &lt;tt&gt;levelName&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, the level
                  of the specified logger is set to the parsed &lt;tt&gt;Level&lt;/tt&gt;
                  matching the &lt;tt&gt;levelName&lt;/tt&gt;.
                  If the &lt;tt&gt;levelName&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, the level
                  of the specified logger is set to &lt;tt&gt;null&lt;/tt&gt; and
                  the effective level of the logger is inherited from
                  its nearest ancestor with a specific (non-null) level value.                
                <param>
                    loggerName The name of the <tt>Logger</tt> to be set.
                      Must be non-null.                    
                </param>
                <param>
                    levelName The name of the level to set on the specified logger,
                      or <tt>null</tt> if setting the level to inherit
                      from its nearest ancestor.                    
                </param>
                <throws>
                    IllegalArgumentException if the specified logger
                      does not exist, or <tt>levelName</tt> is not a valid level name.                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and if
                      the caller does not have LoggingPermission("control").                    
                </throws>
                <see>
                    Logger#setLevel                    
                </see>
            </javadoc>
            <method name="getParentLoggerName" type="String" line="72"/>
            <javadoc line="72">
                Returns the name of the parent for the specified logger.
                  If the specified logger does not exist, &lt;tt&gt;null&lt;/tt&gt; is returned.
                  If the specified logger is the root &lt;tt&gt;Logger&lt;/tt&gt; in the namespace,
                  the result will be an empty string.                
                <param>
                    loggerName The name of a <tt>Logger</tt>.                    
                </param>
                <return>
                    the name of the nearest existing parent logger;
                      an empty string if the specified logger is the root logger.
                      If the specified logger does not exist, <tt>null</tt>
                      is returned.                    
                </return>
            </javadoc>
        </interface>
    </source>