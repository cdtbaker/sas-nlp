<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <class name="MemoryHandler" line="28">
            <extends class="Handler"/>
            <comment line="84">
                Private method to configure a ConsoleHandler from LogManager                
            </comment>
            <comment line="85">
                properties and/or default values as specified in the class                
            </comment>
            <comment line="86">
                javadoc.                
            </comment>
            <comment line="122">
                Initialize.  Size is a count of LogRecords.                
            </comment>
            <javadoc line="28">
                &lt;tt&gt;Handler&lt;/tt&gt; that buffers requests in a circular buffer in memory.
                  &lt;p&gt;
                  Normally this &lt;tt&gt;Handler&lt;/tt&gt; simply stores incoming &lt;tt&gt;LogRecords&lt;/tt&gt;
                  into its memory buffer and discards earlier records.  This buffering
                  is very cheap and avoids formatting costs.  On certain trigger
                  conditions, the &lt;tt&gt;MemoryHandler&lt;/tt&gt; will push out its current buffer
                  contents to a target &lt;tt&gt;Handler&lt;/tt&gt;, which will typically publish
                  them to the outside world.
                  &lt;p&gt;
                  There are three main models for triggering a push of the buffer:
                  &lt;ul&gt;
                  &lt;li&gt;
                  An incoming &lt;tt&gt;LogRecord&lt;/tt&gt; has a type that is greater than
                  a pre-defined level, the &lt;tt&gt;pushLevel&lt;/tt&gt;.
                  &lt;li&gt;
                  An external class calls the &lt;tt&gt;push&lt;/tt&gt; method explicitly.
                  &lt;li&gt;
                  A subclass overrides the &lt;tt&gt;log&lt;/tt&gt; method and scans each incoming
                  &lt;tt&gt;LogRecord&lt;/tt&gt; and calls &lt;tt&gt;push&lt;/tt&gt; if a record matches some
                  desired criteria.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;b&gt;Configuration:&lt;/b&gt;
                  By default each &lt;tt&gt;MemoryHandler&lt;/tt&gt; is initialized using the following
                  LogManager configuration properties.  If properties are not defined
                  (or have invalid values) then the specified default values are used.
                  If no default value is defined then a RuntimeException is thrown.
                  &lt;ul&gt;
                  &lt;li&gt;   java.util.logging.MemoryHandler.level
                  specifies the level for the &lt;tt&gt;Handler&lt;/tt&gt;
                  (defaults to &lt;tt&gt;Level.ALL&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.MemoryHandler.filter
                  specifies the name of a &lt;tt&gt;Filter&lt;/tt&gt; class to use
                  (defaults to no &lt;tt&gt;Filter&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.MemoryHandler.size
                  defines the buffer size (defaults to 1000).
                  &lt;li&gt;   java.util.logging.MemoryHandler.push
                  defines the &lt;tt&gt;pushLevel&lt;/tt&gt; (defaults to &lt;tt&gt;level.SEVERE&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.MemoryHandler.target
                  specifies the name of the target &lt;tt&gt;Handler &lt;/tt&gt; class.
                  (no default).
                  &lt;/ul&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_SIZE" type="int" line="76"/>
            <declaration name="pushLevel" type="Level" line="77"/>
            <declaration name="size" type="int" line="78"/>
            <declaration name="target" type="Handler" line="79"/>
            <declaration name="buffer" type="LogRecord" line="80"/>
            <declaration name="start" type="int" line="81"/>
            <method name="configure" type="void" line="86">
                <declaration name="manager" type="LogManager" line="87"/>
                <declaration name="cname" type="String" line="88"/>
                <scope line="92"/>
            </method>
            <javadoc line="100">
                Create a &lt;tt&gt;MemoryHandler&lt;/tt&gt; and configure it based on
                  &lt;tt&gt;LogManager&lt;/tt&gt; configuration properties.                
            </javadoc>
            <method name="MemoryHandler" type="constructor" line="104">
                <declaration name="name" type="String" line="109"/>
                <scope line="110">
                    <declaration name="manager" type="LogManager" line="111"/>
                    <declaration name="clz" type="Class" line="113"/>
                </scope>
                <scope line="115"/>
            </method>
            <method name="init" type="void" line="122"/>
            <javadoc line="128">
                Create a &lt;tt&gt;MemoryHandler&lt;/tt&gt;.
                  &lt;p&gt;
                  The &lt;tt&gt;MemoryHandler&lt;/tt&gt; is configured based on &lt;tt&gt;LogManager&lt;/tt&gt;
                  properties (or their default values) except that the given &lt;tt&gt;pushLevel&lt;/tt&gt;
                  argument and buffer size argument are used.                
                <param>
                    target  the Handler to which to publish output.                    
                </param>
                <param>
                    size    the number of log records to buffer (must be greater than zero)                    
                </param>
                <param>
                    pushLevel  message level to push on                    
                </param>
                <throws>
                    IllegalArgumentException if size is <= 0                    
                </throws>
            </javadoc>
            <method name="MemoryHandler" type="constructor" line="141">
                <params>
                    <param name="target" type="Handler"/>
                    <param name="size" type="int"/>
                    <param name="pushLevel" type="Level"/>
                </params>
                <scope line="142"/>
                <scope line="145"/>
            </method>
            <javadoc line="157">
                Store a &lt;tt&gt;LogRecord&lt;/tt&gt; in an internal buffer.
                  &lt;p&gt;
                  If there is a &lt;tt&gt;Filter&lt;/tt&gt;, its &lt;tt&gt;isLoggable&lt;/tt&gt;
                  method is called to check if the given log record is loggable.
                  If not we return.  Otherwise the given record is copied into
                  an internal circular buffer.  Then the record&apos;s level property is
                  compared with the &lt;tt&gt;pushLevel&lt;/tt&gt;. If the given level is
                  greater than or equal to the &lt;tt&gt;pushLevel&lt;/tt&gt; then &lt;tt&gt;push&lt;/tt&gt;
                  is called to write all buffered records to the target output
                  &lt;tt&gt;Handler&lt;/tt&gt;.                
                <param>
                    record  description of the log event. A null record is
                      silently ignored and is not published                    
                </param>
            </javadoc>
            <method name="publish" type="void" line="172">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
                <scope line="173"/>
                <declaration name="ix" type="int" line="176"/>
                <scope line="178"/>
                <scope line="180"/>
                <scope line="184"/>
            </method>
            <javadoc line="189">
                Push any buffered output to the target &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;p&gt;
                  The buffer is then cleared.                
            </javadoc>
            <method name="push" type="void" line="194">
                <comment line="200">
                    Empty the buffer.                    
                </comment>
                <scope line="195">
                    <declaration name="ix" type="int" line="196"/>
                    <declaration name="record" type="LogRecord" line="197"/>
                </scope>
            </method>
            <javadoc line="205">
                Causes a flush on the target &lt;tt&gt;Handler&lt;/tt&gt;.
                  &lt;p&gt;
                  Note that the current contents of the &lt;tt&gt;MemoryHandler&lt;/tt&gt;
                  buffer are &lt;b&gt;not&lt;/b&gt; written out.  That requires a &quot;push&quot;.                
            </javadoc>
            <method name="flush" type="void" line="211"/>
            <javadoc line="215">
                Close the &lt;tt&gt;Handler&lt;/tt&gt; and free all associated resources.
                  This will also close the target &lt;tt&gt;Handler&lt;/tt&gt;.                
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="222"/>
            <javadoc line="227">
                Set the &lt;tt&gt;pushLevel&lt;/tt&gt;.  After a &lt;tt&gt;LogRecord&lt;/tt&gt; is copied
                  into our internal buffer, if its level is greater than or equal to
                  the &lt;tt&gt;pushLevel&lt;/tt&gt;, then &lt;tt&gt;push&lt;/tt&gt; will be called.                
                <param>
                    newLevel the new value of the <tt>pushLevel</tt>                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and if
                      the caller does not have <tt>LoggingPermission("control")</tt>.                    
                </exception>
            </javadoc>
            <method name="setPushLevel" type="void" line="236">
                <params>
                    <param name="newLevel" type="Level"/>
                </params>
                <scope line="237"/>
                <declaration name="manager" type="LogManager" line="240"/>
            </method>
            <javadoc line="245">
                Get the &lt;tt&gt;pushLevel&lt;/tt&gt;.                
                <return>
                    the value of the <tt>pushLevel</tt>                    
                </return>
            </javadoc>
            <method name="getPushLevel" type="Level" line="250"/>
            <javadoc line="254">
                Check if this &lt;tt&gt;Handler&lt;/tt&gt; would actually log a given
                  &lt;tt&gt;LogRecord&lt;/tt&gt; into its internal buffer.
                  &lt;p&gt;
                  This method checks if the &lt;tt&gt;LogRecord&lt;/tt&gt; has an appropriate level and
                  whether it satisfies any &lt;tt&gt;Filter&lt;/tt&gt;.  However it does &lt;b&gt;not&lt;/b&gt;
                  check whether the &lt;tt&gt;LogRecord&lt;/tt&gt; would result in a &quot;push&quot; of the
                  buffer contents. It will return false if the &lt;tt&gt;LogRecord&lt;/tt&gt; is null.
                  &lt;p&gt;                
                <param>
                    record  a <tt>LogRecord</tt>                    
                </param>
                <return>
                    true if the <tt>LogRecord</tt> would be logged.                    
                </return>
            </javadoc>
            <method name="isLoggable" type="boolean" line="267">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
            </method>
        </class>
    </source>