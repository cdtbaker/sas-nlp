<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.logging">
        <import package="java.io"/>
        <import package="java.net"/>
        <class name="ConsoleHandler" line="32">
            <extends class="StreamHandler"/>
            <comment line="60">
                Private method to configure a ConsoleHandler from LogManager
                 properties and/or default values as specified in the class
                 javadoc.                
            </comment>
            <javadoc line="32">
                This &lt;tt&gt;Handler&lt;/tt&gt; publishes log records to &lt;tt&gt;System.err&lt;/tt&gt;.
                  By default the &lt;tt&gt;SimpleFormatter&lt;/tt&gt; is used to generate brief summaries.
                  &lt;p&gt;
                  &lt;b&gt;Configuration:&lt;/b&gt;
                  By default each &lt;tt&gt;ConsoleHandler&lt;/tt&gt; is initialized using the following
                  &lt;tt&gt;LogManager&lt;/tt&gt; configuration properties.  If properties are not defined
                  (or have invalid values) then the specified default values are used.
                  &lt;ul&gt;
                  &lt;li&gt;   java.util.logging.ConsoleHandler.level
                  specifies the default level for the &lt;tt&gt;Handler&lt;/tt&gt;
                  (defaults to &lt;tt&gt;Level.INFO&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.ConsoleHandler.filter
                  specifies the name of a &lt;tt&gt;Filter&lt;/tt&gt; class to use
                  (defaults to no &lt;tt&gt;Filter&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.ConsoleHandler.formatter
                  specifies the name of a &lt;tt&gt;Formatter&lt;/tt&gt; class to use
                  (defaults to &lt;tt&gt;java.util.logging.SimpleFormatter&lt;/tt&gt;).
                  &lt;li&gt;   java.util.logging.ConsoleHandler.encoding
                  the name of the character set encoding to use (defaults to
                  the default platform encoding).
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="configure" type="void" line="62">
                <comment line="76">
                    doing a setEncoding with null should always work.
                     assert false;                    
                </comment>
                <declaration name="manager" type="LogManager" line="63"/>
                <declaration name="cname" type="String" line="64"/>
                <scope line="69"/>
                <scope line="71">
                    <scope line="72"/>
                    <scope line="74"/>
                </scope>
            </method>
            <javadoc line="81">
                Create a &lt;tt&gt;ConsoleHandler&lt;/tt&gt; for &lt;tt&gt;System.err&lt;/tt&gt;.
                  &lt;p&gt;
                  The &lt;tt&gt;ConsoleHandler&lt;/tt&gt; is configured based on
                  &lt;tt&gt;LogManager&lt;/tt&gt; properties (or their default values).                
            </javadoc>
            <method name="ConsoleHandler" type="constructor" line="88"/>
            <javadoc line="95">
                Publish a &lt;tt&gt;LogRecord&lt;/tt&gt;.
                  &lt;p&gt;
                  The logging request was made initially to a &lt;tt&gt;Logger&lt;/tt&gt; object,
                  which initialized the &lt;tt&gt;LogRecord&lt;/tt&gt; and forwarded it here.
                  &lt;p&gt;                
                <param>
                    record  description of the log event. A null record is
                      silently ignored and is not published                    
                </param>
            </javadoc>
            <method name="publish" type="void" line="104">
                <params>
                    <param name="record" type="LogRecord"/>
                </params>
            </method>
            <javadoc line="109">
                Override &lt;tt&gt;StreamHandler.close&lt;/tt&gt; to do a flush but not
                  to close the output stream.  That is, we do &lt;b&gt;not&lt;/b&gt;
                  close &lt;tt&gt;System.err&lt;/tt&gt;.                
            </javadoc>
            <method name="close" type="void" line="114"/>
        </class>
    </source>