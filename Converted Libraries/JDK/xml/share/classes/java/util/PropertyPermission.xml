<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.Serializable"/>
        <import package="java.io.IOException"/>
        <import package="java.security"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Collections"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="PropertyPermission" line="15">
            <extends class="BasicPermission"/>
            <javadoc line="15">
                This class is for property permissions.
                  &lt;P&gt;
                  The name is the name of the property (&quot;java.home&quot;,
                  &quot;os.name&quot;, etc). The naming
                  convention follows the  hierarchical property naming convention.
                  Also, an asterisk
                  may appear at the end of the name, following a &quot;.&quot;, or by itself, to
                  signify a wildcard match. For example: &quot;java.&quot; or &quot;&quot; is valid,
                  &quot;java&quot; or &quot;ab&quot; is not valid.
                  &lt;P&gt;
                  &lt;P&gt;
                  The actions to be granted are passed to the constructor in a string containing
                  a list of one or more comma-separated keywords. The possible keywords are
                  &quot;read&quot; and &quot;write&quot;. Their meaning is defined as follows:
                  &lt;P&gt;
                  &lt;DL&gt;
                  &lt;DT&gt; read
                  &lt;DD&gt; read permission. Allows &lt;code&gt;System.getProperty&lt;/code&gt; to
                  be called.
                  &lt;DT&gt; write
                  &lt;DD&gt; write permission. Allows &lt;code&gt;System.setProperty&lt;/code&gt; to
                  be called.
                  &lt;/DL&gt;
                  &lt;P&gt;
                  The actions string is converted to lowercase before processing.
                  &lt;P&gt;
                  Care should be taken before granting code permission to access
                  certain system properties.  For example, granting permission to
                  access the &quot;java.home&quot; system property gives potentially malevolent
                  code sensitive information about the system environment (the Java
                  installation directory).  Also, granting permission to access
                  the &quot;user.name&quot; and &quot;user.home&quot; system properties gives potentially
                  malevolent code sensitive information about the user environment
                  (the user&apos;s account name and home directory).                
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
                <since>
                    1.2                    
                </since>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="READ" type="int" line="60"/>
            <javadoc line="60">
                Read action.                
            </javadoc>
            <declaration name="WRITE" type="int" line="64"/>
            <javadoc line="64">
                Write action.                
            </javadoc>
            <declaration name="ALL" type="int" line="68"/>
            <javadoc line="68">
                All actions (read,write);                
            </javadoc>
            <declaration name="NONE" type="int" line="72"/>
            <javadoc line="72">
                No actions.                
            </javadoc>
            <declaration name="mask" type="int" line="76"/>
            <javadoc line="76">
                The actions mask.                
            </javadoc>
            <declaration name="actions" type="String" line="80"/>
            <javadoc line="80">
                The actions string.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="85">
                initialize a PropertyPermission object. Common to all constructors.
                  Also called during de-serialization.                
                <param>
                    mask the actions mask to use.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="90">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <javadoc line="96">
                Creates a new PropertyPermission object with the specified name.
                  The name is the name of the system property, and
                  &lt;i&gt;actions&lt;/i&gt; contains a comma-separated list of the
                  desired actions granted on the property. Possible actions are
                  &quot;read&quot; and &quot;write&quot;.                
                <param>
                    name the name of the PropertyPermission.                    
                </param>
                <param>
                    actions the actions string.                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty or if
                      <code>actions</code> is invalid.                    
                </throws>
            </javadoc>
            <method name="PropertyPermission" type="constructor" line="108">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="112">
                Checks if this PropertyPermission object &quot;implies&quot; the specified
                  permission.
                  &lt;P&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instanceof PropertyPermission,&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s actions are a subset of this
                  object&apos;s actions, and &lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s name is implied by this object&apos;s
                  name. For example, &quot;java.&quot; implies &quot;java.home&quot;.
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="128">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="PropertyPermission" line="130"/>
            </method>
            <javadoc line="133">
                Checks two PropertyPermission objects for equality. Checks that &lt;i&gt;obj&lt;/i&gt; is
                  a PropertyPermission, and has the same name and actions as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if obj is a PropertyPermission, and has the same name and
                      actions as this PropertyPermission object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="141">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="PropertyPermission" line="144"/>
            </method>
            <javadoc line="147">
                Returns the hash code value for this object.
                  The hash code used is the hash code of this permissions name, that is,
                  &lt;code&gt;getName().hashCode()&lt;/code&gt;, where &lt;code&gt;getName&lt;/code&gt; is
                  from the Permission superclass.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="154"/>
            <javadoc line="157">
                Converts an actions String to an actions mask.                
                <param>
                    action the action string.                    
                </param>
                <return>
                    the actions mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="162">
                <params>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="mask" type="int" line="163"/>
                <scope line="164"/>
                <scope line="167"/>
                <scope line="170"/>
                <scope line="173"/>
                <declaration name="a" type="char[]" line="176"/>
                <declaration name="i" type="int" line="177"/>
                <scope line="179">
                    <declaration name="c" type="char" line="180"/>
                    <declaration name="matchlen" type="int" line="182"/>
                    <scope line="183"/>
                    <scope line="187"/>
                    <scope line="191"/>
                    <declaration name="seencomma" type="boolean" line="194"/>
                    <scope line="195"/>
                </scope>
            </method>
            <javadoc line="214">
                Return the canonical string representation of the actions.
                  Always returns present actions in the following order:
                  read, write.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="220">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="221"/>
                <declaration name="comma" type="boolean" line="222"/>
                <scope line="223"/>
                <scope line="227"/>
            </method>
            <javadoc line="234">
                Returns the &quot;canonical string representation&quot; of the actions.
                  That is, this method always returns present actions in the following order:
                  read, write. For example, if this PropertyPermission object
                  allows both write and read actions, a call to &lt;code&gt;getActions&lt;/code&gt;
                  will return the string &quot;read,write&quot;.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="242"/>
            <javadoc line="246">
                Return the current action mask.
                  Used by the PropertyPermissionCollection                
                <return>
                    the actions mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="251"/>
            <javadoc line="254">
                Returns a new PermissionCollection object for storing
                  PropertyPermission objects.
                  &lt;p&gt;                
                <return>
                    a new PermissionCollection object suitable for storing
                      PropertyPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="261"/>
            <declaration name="serialVersionUID" type="long" line="264"/>
            <javadoc line="265">
                WriteObject is called to save the state of the PropertyPermission
                  to a stream. The actions are serialized, and the superclass
                  takes care of the name.                
            </javadoc>
            <method name="writeObject" type="void" line="270">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="274">
                readObject is called to restore the state of the PropertyPermission from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="278">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
        <class name="PropertyPermissionCollection" line="283">
            <extends class="PermissionCollection"/>
            <implements interface="Serializable"/>
            <javadoc line="283">
                A PropertyPermissionCollection stores a set of PropertyPermission
                  permissions.                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="perms" type="Map" line="293"/>
            <javadoc line="293">
                Key is property name; value is PropertyPermission.
                  Not serialized; see serialization section at end of class.                
            </javadoc>
            <declaration name="all_allowed" type="boolean" line="298"/>
            <javadoc line="298">
                Boolean saying if &quot;&quot; is in the collection.                
                <see>
                    #serialPersistentFields                    
                </see>
            </javadoc>
            <javadoc line="303">
                Create an empty PropertyPermissions object.                
            </javadoc>
            <method name="PropertyPermissionCollection" type="constructor" line="306"/>
            <javadoc line="310">
                Adds a permission to the PropertyPermissions. The key for the hash is
                  the name.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    IllegalArgumentException - if the permission is not a
                      PropertyPermission                    
                </exception>
                <exception>
                    SecurityException - if this PropertyPermissionCollection
                      object has been marked readonly                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="319">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="pp" type="PropertyPermission" line="322"/>
                <declaration name="propName" type="String" line="323"/>
                <scope line="324">
                    <declaration name="existing" type="PropertyPermission" line="325"/>
                    <scope line="326">
                        <declaration name="oldMask" type="int" line="327"/>
                        <declaration name="newMask" type="int" line="328"/>
                        <scope line="329">
                            <declaration name="effective" type="int" line="330"/>
                            <declaration name="actions" type="String" line="331"/>
                        </scope>
                    </scope>
                    <scope line="335"/>
                </scope>
                <scope line="339"/>
            </method>
            <javadoc line="343">
                Check and see if this set of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if "permission" is a proper subset of a permission in
                      the set, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="350">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="pp" type="PropertyPermission" line="352"/>
                <declaration name="x" type="PropertyPermission" line="353"/>
                <declaration name="desired" type="int" line="354"/>
                <declaration name="effective" type="int" line="355"/>
                <scope line="356">
                    <scope line="357"/>
                    <scope line="360"/>
                </scope>
                <declaration name="name" type="String" line="365"/>
                <scope line="366"/>
                <scope line="369"/>
                <declaration name="last" type="int" line="373"/>
                <scope line="375">
                    <scope line="377"/>
                    <scope line="380"/>
                </scope>
            </method>
            <javadoc line="388">
                Returns an enumeration of all the PropertyPermission objects in the
                  container.                
                <return>
                    an enumeration of all the PropertyPermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration" line="393">
                <scope line="394"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="398"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="399"/>
            <javadoc line="399">
                @serialField permissions java.util.Hashtable
                  A table of the PropertyPermissions.                
                <serialField>
                    all_allowed boolean
                      boolean saying if "" is in the collection.                    
                </serialField>
            </javadoc>
            <javadoc line="406">
                @serialData Default fields.                
            </javadoc>
            <method name="writeObject" type="void" line="409">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="permissions" type="Hashtable" line="410"/>
                <scope line="411"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="414"/>
            </method>
            <method name="readObject" type="void" line="419">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="420"/>
                <declaration name="permissions" type="Hashtable" line="422"/>
            </method>
        </class>
    </source>