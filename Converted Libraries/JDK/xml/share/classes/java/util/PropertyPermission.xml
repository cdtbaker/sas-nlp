<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.Serializable"/>
        <import package="java.io.IOException"/>
        <import package="java.security"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Collections"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="PropertyPermission" line="42">
            <extends class="BasicPermission"/>
            <comment line="124">
                Left null as long as possible, then
                 created and re-used in the getAction function.                
            </comment>
            <comment line="606">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                
                 Table of permissions.
                
                 @serial
                
                 private Hashtable permissions;                
            </comment>
            <comment line="649">
                Reads in a Hashtable of PropertyPermissions and saves them in the
                 perms field. Reads in all_allowed.                
            </comment>
            <javadoc line="42">
                This class is for property permissions.
                  &lt;P&gt;
                  The name is the name of the property (&quot;java.home&quot;,
                  &quot;os.name&quot;, etc). The naming
                  convention follows the  hierarchical property naming convention.
                  Also, an asterisk
                  may appear at the end of the name, following a &quot;.&quot;, or by itself, to
                  signify a wildcard match. For example: &quot;java.&quot; or &quot;&quot; is valid,
                  &quot;java&quot; or &quot;ab&quot; is not valid.
                  &lt;P&gt;
                  &lt;P&gt;
                  The actions to be granted are passed to the constructor in a string containing
                  a list of one or more comma-separated keywords. The possible keywords are
                  &quot;read&quot; and &quot;write&quot;. Their meaning is defined as follows:
                  &lt;P&gt;
                  &lt;DL&gt;
                  &lt;DT&gt; read
                  &lt;DD&gt; read permission. Allows &lt;code&gt;System.getProperty&lt;/code&gt; to
                  be called.
                  &lt;DT&gt; write
                  &lt;DD&gt; write permission. Allows &lt;code&gt;System.setProperty&lt;/code&gt; to
                  be called.
                  &lt;/DL&gt;
                  &lt;P&gt;
                  The actions string is converted to lowercase before processing.
                  &lt;P&gt;
                  Care should be taken before granting code permission to access
                  certain system properties.  For example, granting permission to
                  access the &quot;java.home&quot; system property gives potentially malevolent
                  code sensitive information about the system environment (the Java
                  installation directory).  Also, granting permission to access
                  the &quot;user.name&quot; and &quot;user.home&quot; system properties gives potentially
                  malevolent code sensitive information about the user environment
                  (the user&apos;s account name and home directory).                
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
                <since>
                    1.2                    
                </since>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="READ" type="int" line="94"/>
            <javadoc line="94">
                Read action.                
            </javadoc>
            <declaration name="WRITE" type="int" line="99"/>
            <javadoc line="99">
                Write action.                
            </javadoc>
            <declaration name="ALL" type="int" line="103"/>
            <javadoc line="103">
                All actions (read,write);                
            </javadoc>
            <declaration name="NONE" type="int" line="107"/>
            <javadoc line="107">
                No actions.                
            </javadoc>
            <declaration name="mask" type="int" line="112"/>
            <javadoc line="112">
                The actions mask.                
            </javadoc>
            <declaration name="actions" type="String" line="118"/>
            <javadoc line="118">
                The actions string.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="126">
                initialize a PropertyPermission object. Common to all constructors.
                  Also called during de-serialization.                
                <param>
                    mask the actions mask to use.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="135">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <javadoc line="149">
                Creates a new PropertyPermission object with the specified name.
                  The name is the name of the system property, and
                  &lt;i&gt;actions&lt;/i&gt; contains a comma-separated list of the
                  desired actions granted on the property. Possible actions are
                  &quot;read&quot; and &quot;write&quot;.                
                <param>
                    name the name of the PropertyPermission.                    
                </param>
                <param>
                    actions the actions string.                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty or if
                      <code>actions</code> is invalid.                    
                </throws>
            </javadoc>
            <method name="PropertyPermission" type="constructor" line="165">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="170">
                Checks if this PropertyPermission object &quot;implies&quot; the specified
                  permission.
                  &lt;P&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instanceof PropertyPermission,&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s actions are a subset of this
                  object&apos;s actions, and &lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s name is implied by this object&apos;s
                  name. For example, &quot;java.&quot; implies &quot;java.home&quot;.
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="187">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <comment line="194">
                    we get the effective mask. i.e., the &quot;and&quot; of this and that.
                     They must be equal to that.mask for implies to return true.                    
                </comment>
                <declaration name="that" type="PropertyPermission" line="191"/>
            </method>
            <javadoc line="200">
                Checks two PropertyPermission objects for equality. Checks that &lt;i&gt;obj&lt;/i&gt; is
                  a PropertyPermission, and has the same name and actions as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if obj is a PropertyPermission, and has the same name and
                      actions as this PropertyPermission object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="208">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="PropertyPermission" line="215"/>
            </method>
            <javadoc line="221">
                Returns the hash code value for this object.
                  The hash code used is the hash code of this permissions name, that is,
                  &lt;code&gt;getName().hashCode()&lt;/code&gt;, where &lt;code&gt;getName&lt;/code&gt; is
                  from the Permission superclass.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="230"/>
            <javadoc line="235">
                Converts an actions String to an actions mask.                
                <param>
                    action the action string.                    
                </param>
                <return>
                    the actions mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="241">
                <params>
                    <param name="actions" type="String"/>
                </params>
                <comment line="250">
                    Check against use of constants (used heavily within the JDK)                    
                </comment>
                <comment line="268">
                    skip whitespace                    
                </comment>
                <comment line="276">
                    check for the known strings                    
                </comment>
                <comment line="297">
                    parse error                    
                </comment>
                <comment line="302">
                    make sure we didn&apos;t just match the tail of a word
                     like &quot;ackbarfaccept&quot;.  Also, skip to the comma.                    
                </comment>
                <comment line="309">
                                        
                </comment>
                <comment line="320">
                    point i at the location of the comma minus one (or -1).                    
                </comment>
                <declaration name="mask" type="int" line="243"/>
                <scope line="245"/>
                <scope line="250"/>
                <scope line="252"/>
                <scope line="254"/>
                <declaration name="a" type="char[]" line="258"/>
                <declaration name="i" type="int" line="260"/>
                <scope line="264">
                    <declaration name="c" type="char" line="265"/>
                    <declaration name="matchlen" type="int" line="276"/>
                    <scope line="282"/>
                    <scope line="291"/>
                    <scope line="295"/>
                    <declaration name="seencomma" type="boolean" line="303"/>
                    <scope line="304"/>
                </scope>
            </method>
            <javadoc line="327">
                Return the canonical string representation of the actions.
                  Always returns present actions in the following order:
                  read, write.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="335">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="336"/>
                <declaration name="comma" type="boolean" line="337"/>
                <scope line="339"/>
                <scope line="344"/>
            </method>
            <javadoc line="352">
                Returns the &quot;canonical string representation&quot; of the actions.
                  That is, this method always returns present actions in the following order:
                  read, write. For example, if this PropertyPermission object
                  allows both write and read actions, a call to &lt;code&gt;getActions&lt;/code&gt;
                  will return the string &quot;read,write&quot;.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="362"/>
            <javadoc line="369">
                Return the current action mask.
                  Used by the PropertyPermissionCollection                
                <return>
                    the actions mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="376"/>
            <javadoc line="380">
                Returns a new PermissionCollection object for storing
                  PropertyPermission objects.
                  &lt;p&gt;                
                <return>
                    a new PermissionCollection object suitable for storing
                      PropertyPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="389"/>
            <declaration name="serialVersionUID" type="long" line="394"/>
            <javadoc line="396">
                WriteObject is called to save the state of the PropertyPermission
                  to a stream. The actions are serialized, and the superclass
                  takes care of the name.                
            </javadoc>
            <method name="writeObject" type="void" line="403">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="405">
                    Write out the actions. The superclass takes care of the name
                     call getActions to make sure actions field is initialized                    
                </comment>
            </method>
            <javadoc line="411">
                readObject is called to restore the state of the PropertyPermission from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="417">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="419">
                    Read in the action, then initialize the rest                    
                </comment>
            </method>
        </class>
        <class name="PropertyPermissionCollection" line="424">
            <extends class="PermissionCollection"/>
            <comment line="124">
                Left null as long as possible, then
                 created and re-used in the getAction function.                
            </comment>
            <comment line="606">
                Need to maintain serialization interoperability with earlier releases,
                 which had the serializable field:
                
                 Table of permissions.
                
                 @serial
                
                 private Hashtable permissions;                
            </comment>
            <comment line="649">
                Reads in a Hashtable of PropertyPermissions and saves them in the
                 perms field. Reads in all_allowed.                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="424">
                A PropertyPermissionCollection stores a set of PropertyPermission
                  permissions.                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="perms" type="Map" line="441"/>
            <javadoc line="441">
                Key is property name; value is PropertyPermission.
                  Not serialized; see serialization section at end of class.                
            </javadoc>
            <declaration name="all_allowed" type="boolean" line="447"/>
            <javadoc line="447">
                Boolean saying if &quot;&quot; is in the collection.                
                <see>
                    #serialPersistentFields                    
                </see>
            </javadoc>
            <javadoc line="455">
                Create an empty PropertyPermissions object.                
            </javadoc>
            <method name="PropertyPermissionCollection" type="constructor" line="460">
                <comment line="462">
                    Capacity for default policy                    
                </comment>
            </method>
            <javadoc line="465">
                Adds a permission to the PropertyPermissions. The key for the hash is
                  the name.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    IllegalArgumentException - if the permission is not a
                      PropertyPermission                    
                </exception>
                <exception>
                    SecurityException - if this PropertyPermissionCollection
                      object has been marked readonly                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="479">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="pp" type="PropertyPermission" line="487"/>
                <declaration name="propName" type="String" line="488"/>
                <scope line="490">
                    <declaration name="existing" type="PropertyPermission" line="491"/>
                    <scope line="493">
                        <declaration name="oldMask" type="int" line="494"/>
                        <declaration name="newMask" type="int" line="495"/>
                        <scope line="496">
                            <declaration name="effective" type="int" line="497"/>
                            <declaration name="actions" type="String" line="498"/>
                        </scope>
                    </scope>
                    <scope line="501"/>
                </scope>
                <scope line="506"/>
            </method>
            <javadoc line="512">
                Check and see if this set of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if "permission" is a proper subset of a permission in
                      the set, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="523">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="534">
                    short circuit if the &quot;*&quot; Permission was added                    
                </comment>
                <comment line="546">
                    strategy:
                     Check for full match first. Then work our way up the
                     name looking for matches on a.b.*                    
                </comment>
                <comment line="551">
                    System.out.println(&quot;check &quot;+name);                    
                </comment>
                <comment line="558">
                    we have a direct hit!                    
                </comment>
                <comment line="564">
                    work our way up the tree...                    
                </comment>
                <comment line="572">
                    System.out.println(&quot;check &quot;+name);                    
                </comment>
                <comment line="585">
                    we don&apos;t have to check for &quot;*&quot; as it was already checked
                     at the top (all_allowed), so we just return false                    
                </comment>
                <declaration name="pp" type="PropertyPermission" line="527"/>
                <declaration name="x" type="PropertyPermission" line="528"/>
                <declaration name="desired" type="int" line="530"/>
                <declaration name="effective" type="int" line="531"/>
                <scope line="534">
                    <scope line="535"/>
                    <scope line="538"/>
                </scope>
                <declaration name="name" type="String" line="549"/>
                <scope line="552"/>
                <scope line="556"/>
                <declaration name="last" type="int" line="564"/>
                <scope line="568">
                    <scope line="572"/>
                    <scope line="576"/>
                </scope>
            </method>
            <javadoc line="589">
                Returns an enumeration of all the PropertyPermission objects in the
                  container.                
                <return>
                    an enumeration of all the PropertyPermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration" line="596">
                <comment line="598">
                    Convert Iterator of Map values into an Enumeration                    
                </comment>
                <scope line="598"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="603"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="613"/>
            <javadoc line="613">
                @serialField permissions java.util.Hashtable
                  A table of the PropertyPermissions.                
                <serialField>
                    all_allowed boolean
                      boolean saying if "" is in the collection.                    
                </serialField>
            </javadoc>
            <javadoc line="624">
                @serialData Default fields.                
            </javadoc>
            <method name="writeObject" type="void" line="632">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="628">
                    Writes the contents of the perms field out as a Hashtable for
                     serialization compatibility with earlier releases. all_allowed
                     unchanged.                    
                </comment>
                <comment line="634">
                    Don&apos;t call out.defaultWriteObject()                    
                </comment>
                <comment line="636">
                    Copy perms into a Hashtable                    
                </comment>
                <comment line="642">
                    Write out serializable fields                    
                </comment>
                <declaration name="permissions" type="Hashtable" line="636"/>
                <scope line="637"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="642"/>
            </method>
            <method name="readObject" type="void" line="653">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="655">
                    Don&apos;t call defaultReadObject()                    
                </comment>
                <comment line="657">
                    Read in serialized fields                    
                </comment>
                <comment line="660">
                    Get all_allowed                    
                </comment>
                <comment line="663">
                    Get permissions                    
                </comment>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="657"/>
                <declaration name="permissions" type="Hashtable" line="663"/>
            </method>
        </class>
    </source>