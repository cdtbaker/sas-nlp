<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="ConcurrentModificationException" line="2">
            <extends class="RuntimeException"/>
            <javadoc line="2">
                This exception may be thrown by methods that have detected concurrent
                  modification of an object when such modification is not permissible.
                  &lt;p&gt;
                  For example, it is not generally permissible for one thread to modify a Collection
                  while another thread is iterating over it.  In general, the results of the
                  iteration are undefined under these circumstances.  Some Iterator
                  implementations (including those of all the general purpose collection implementations
                  provided by the JRE) may choose to throw this exception if this behavior is
                  detected.  Iterators that do this are known as &lt;i&gt;fail-fast&lt;/i&gt; iterators,
                  as they fail quickly and cleanly, rather that risking arbitrary,
                  non-deterministic behavior at an undetermined time in the future.
                  &lt;p&gt;
                  Note that this exception does not always indicate that an object has
                  been concurrently modified by a &lt;i&gt;different&lt;/i&gt; thread.  If a single
                  thread issues a sequence of method invocations that violates the
                  contract of an object, the object may throw this exception.  For
                  example, if a thread modifies a collection directly while it is
                  iterating over the collection with a fail-fast iterator, the iterator
                  will throw this exception.
                  &lt;p&gt;Note that fail-fast behavior cannot be guaranteed as it is, generally
                  speaking, impossible to make any hard guarantees in the presence of
                  unsynchronized concurrent modification.  Fail-fast operations
                  throw {@code ConcurrentModificationException} on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness: &lt;i&gt;{@code ConcurrentModificationException}should be used only to detect bugs.&lt;/i&gt;                
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    Iterator                    
                </see>
                <see>
                    ListIterator                    
                </see>
                <see>
                    Vector                    
                </see>
                <see>
                    LinkedList                    
                </see>
                <see>
                    HashSet                    
                </see>
                <see>
                    Hashtable                    
                </see>
                <see>
                    TreeMap                    
                </see>
                <see>
                    AbstractList                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="41"/>
            <javadoc line="42">
                Constructs a ConcurrentModificationException with no
                  detail message.                
            </javadoc>
            <method name="ConcurrentModificationException" type="constructor" line="46"/>
            <javadoc line="48">
                Constructs a {@code ConcurrentModificationException} with the
                  specified detail message.                
                <param>
                    message the detail message pertaining to this exception.                    
                </param>
            </javadoc>
            <method name="ConcurrentModificationException" type="constructor" line="53">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <javadoc line="56">
                Constructs a new exception with the specified cause and a detail
                  message of {@code (cause==null ? null : cause.toString())} (which
                  typically contains the class and detail message of {@code cause}.                
                <param>
                    cause the cause (which is saved for later retrieval by the{@link Throwable#getCause()} method).  (A {@code null} value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ConcurrentModificationException" type="constructor" line="65">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="68">
                Constructs a new exception with the specified detail message and
                  cause.
                  &lt;p&gt;Note that the detail message associated with &lt;code&gt;cause&lt;/code&gt; is
                  &lt;i&gt;not&lt;/i&gt; automatically incorporated in this exception&apos;s detail
                  message.                
                <param>
                    message the detail message (which is saved for later retrieval
                      by the {@link Throwable#getMessage()} method).                    
                </param>
                <param>
                    cause the cause (which is saved for later retrieval by the{@link Throwable#getCause()} method).  (A {@code null} value
                      is permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ConcurrentModificationException" type="constructor" line="81">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
        </class>
    </source>