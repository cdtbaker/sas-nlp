<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="TimerTask" line="28">
            <implements interface="Runnable"/>
            <javadoc line="28">
                A task that can be scheduled for one-time or repeated execution by a Timer.                
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Timer                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="lock" type="Object" line="37"/>
            <javadoc line="37">
                This object is used to control access to the TimerTask internals.                
            </javadoc>
            <declaration name="state" type="int" line="42"/>
            <javadoc line="42">
                The state of this task, chosen from the constants below.                
            </javadoc>
            <declaration name="VIRGIN" type="int" line="47"/>
            <javadoc line="47">
                This task has not yet been scheduled.                
            </javadoc>
            <declaration name="SCHEDULED" type="int" line="52"/>
            <javadoc line="52">
                This task is scheduled for execution.  If it is a non-repeating task,
                  it has not yet been executed.                
            </javadoc>
            <declaration name="EXECUTED" type="int" line="58"/>
            <javadoc line="58">
                This non-repeating task has already executed (or is currently
                  executing) and has not been cancelled.                
            </javadoc>
            <declaration name="CANCELLED" type="int" line="64"/>
            <javadoc line="64">
                This task has been cancelled (with a call to TimerTask.cancel).                
            </javadoc>
            <declaration name="nextExecutionTime" type="long" line="69"/>
            <javadoc line="69">
                Next execution time for this task in the format returned by
                  System.currentTimeMillis, assuming this task is scheduled for execution.
                  For repeating tasks, this field is updated prior to each task execution.                
            </javadoc>
            <declaration name="period" type="long" line="76"/>
            <javadoc line="76">
                Period in milliseconds for repeating tasks.  A positive value indicates
                  fixed-rate execution.  A negative value indicates fixed-delay execution.
                  A value of 0 indicates a non-repeating task.                
            </javadoc>
            <javadoc line="83">
                Creates a new timer task.                
            </javadoc>
            <method name="TimerTask" type="constructor" line="86"/>
            <method name="run" type="void" line="89"/>
            <javadoc line="89">
                The action to be performed by this timer task.                
            </javadoc>
            <javadoc line="94">
                Cancels this timer task.  If the task has been scheduled for one-time
                  execution and has not yet run, or has not yet been scheduled, it will
                  never run.  If the task has been scheduled for repeated execution, it
                  will never run again.  (If the task is running when this call occurs,
                  the task will run to completion, but will never run again.)
                  &lt;p&gt;Note that calling this method from within the &lt;tt&gt;run&lt;/tt&gt; method of
                  a repeating timer task absolutely guarantees that the timer task will
                  not run again.
                  &lt;p&gt;This method may be called repeatedly; the second and subsequent
                  calls have no effect.                
                <return>
                    true if this task is scheduled for one-time execution and has
                      not yet run, or this task is scheduled for repeated execution.
                      Returns false if the task was scheduled for one-time execution
                      and has already run, or if the task was never scheduled, or if
                      the task was already cancelled.  (Loosely speaking, this method
                      returns &lt;tt&gt;true&lt;/tt&gt; if it prevents one or more scheduled
                      executions from taking place.)                    
                </return>
            </javadoc>
            <method name="cancel" type="boolean" line="116">
                <scope line="117">
                    <declaration name="result" type="boolean" line="118"/>
                </scope>
            </method>
            <javadoc line="124">
                Returns the &lt;i&gt;scheduled&lt;/i&gt; execution time of the most recent
                  &lt;i&gt;actual&lt;/i&gt; execution of this task.  (If this method is invoked
                  while task execution is in progress, the return value is the scheduled
                  execution time of the ongoing task execution.)
                  &lt;p&gt;This method is typically invoked from within a task&apos;s run method, to
                  determine whether the current execution of the task is sufficiently
                  timely to warrant performing the scheduled activity:
                  &lt;pre&gt;
                  public void run() {
                  if (System.currentTimeMillis() - scheduledExecutionTime() &gt;=
                  MAX_TARDINESS)
                  return;  // Too late; skip this execution.
                  // Perform the task
                  }
                  &lt;/pre&gt;
                  This method is typically &lt;i&gt;not&lt;/i&gt; used in conjunction with
                  &lt;i&gt;fixed-delay execution&lt;/i&gt; repeating tasks, as their scheduled
                  execution times are allowed to drift over time, and so are not terribly
                  significant.                
                <return>
                    the time at which the most recent execution of this task was
                      scheduled to occur, in the format returned by Date.getTime().
                      The return value is undefined if the task has yet to commence
                      its first execution.                    
                </return>
                <see>
                    Date#getTime()                    
                </see>
            </javadoc>
            <method name="scheduledExecutionTime" type="long" line="152">
                <scope line="153"/>
            </method>
        </class>
    </source>