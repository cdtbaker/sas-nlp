<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="sun.util.ResourceBundleEnumeration"/>
        <class name="ListResourceBundle" line="3">
            <extends class="ResourceBundle"/>
            <javadoc line="3">
                &lt;code&gt;ListResourceBundle&lt;/code&gt; is an abstract subclass of
                  &lt;code&gt;ResourceBundle&lt;/code&gt; that manages resources for a locale
                  in a convenient and easy to use list. See &lt;code&gt;ResourceBundle&lt;/code&gt; for
                  more information about resource bundles in general.
                  &lt;P&gt;
                  Subclasses must override &lt;code&gt;getContents&lt;/code&gt; and provide an array,
                  where each item in the array is a pair of objects.
                  The first element of each pair is the key, which must be a
                  &lt;code&gt;String&lt;/code&gt;, and the second element is the value associated with
                  that key.
                  &lt;p&gt;
                  The following &lt;a name=&quot;sample&quot;&gt;example&lt;/a&gt; shows two members of a resource
                  bundle family with the base name &quot;MyResources&quot;.
                  &quot;MyResources&quot; is the default member of the bundle family, and
                  &quot;MyResources_fr&quot; is the French member.
                  These members are based on &lt;code&gt;ListResourceBundle&lt;/code&gt;
                  (a related &lt;a href=&quot;PropertyResourceBundle.html#sample&quot;&gt;example&lt;/a&gt; shows
                  how you can add a bundle to this family that&apos;s based on a properties file).
                  The keys in this example are of the form &quot;s1&quot; etc. The actual
                  keys are entirely up to your choice, so long as they are the same as
                  the keys you use in your program to retrieve the objects from the bundle.
                  Keys are case-sensitive.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  public class MyResources extends ListResourceBundle {
                  protected Object[][] getContents() {
                  return new Object[][] {
                  // LOCALIZE THIS
                  {&quot;s1&quot;, &quot;The disk \&quot;{1}\&quot; contains {0}.&quot;},  // MessageFormat pattern
                  {&quot;s2&quot;, &quot;1&quot;},                               // location of {0} in pattern
                  {&quot;s3&quot;, &quot;My Disk&quot;},                         // sample disk name
                  {&quot;s4&quot;, &quot;no files&quot;},                        // first ChoiceFormat choice
                  {&quot;s5&quot;, &quot;one file&quot;},                        // second ChoiceFormat choice
                  {&quot;s6&quot;, &quot;{0,number} files&quot;},                // third ChoiceFormat choice
                  {&quot;s7&quot;, &quot;3 Mar 96&quot;},                        // sample date
                  {&quot;s8&quot;, new Dimension(1,5)}                 // real object, not just string
                  // END OF MATERIAL TO LOCALIZE
                  };
                  }
                  }
                  public class MyResources_fr extends ListResourceBundle {
                  protected Object[][] getContents() {
                  return new Object[][] = {
                  // LOCALIZE THIS
                  {&quot;s1&quot;, &quot;Le disque \&quot;{1}\&quot; {0}.&quot;},          // MessageFormat pattern
                  {&quot;s2&quot;, &quot;1&quot;},                               // location of {0} in pattern
                  {&quot;s3&quot;, &quot;Mon disque&quot;},                      // sample disk name
                  {&quot;s4&quot;, &quot;ne contient pas de fichiers&quot;},     // first ChoiceFormat choice
                  {&quot;s5&quot;, &quot;contient un fichier&quot;},             // second ChoiceFormat choice
                  {&quot;s6&quot;, &quot;contient {0,number} fichiers&quot;},    // third ChoiceFormat choice
                  {&quot;s7&quot;, &quot;3 mars 1996&quot;},                     // sample date
                  {&quot;s8&quot;, new Dimension(1,3)}                 // real object, not just string
                  // END OF MATERIAL TO LOCALIZE
                  };
                  }
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;                
                <see>
                    ResourceBundle                    
                </see>
                <see>
                    PropertyResourceBundle                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="67">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="ListResourceBundle" type="constructor" line="71"/>
            <method name="handleGetObject" type="Object" line="73">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="74"/>
                <scope line="77"/>
            </method>
            <javadoc line="82">
                Returns an &lt;code&gt;Enumeration&lt;/code&gt; of the keys contained in
                  this &lt;code&gt;ResourceBundle&lt;/code&gt; and its parent bundles.                
                <return>
                    an &lt;code&gt;Enumeration&lt;/code&gt; of the keys contained in
                      this &lt;code&gt;ResourceBundle&lt;/code&gt; and its parent bundles.                    
                </return>
                <see>
                    #keySet()                    
                </see>
            </javadoc>
            <method name="getKeys" type="Enumeration&lt;String&gt;" line="89">
                <scope line="90"/>
                <declaration name="parent" type="ResourceBundle" line="93"/>
            </method>
            <javadoc line="96">
                Returns a &lt;code&gt;Set&lt;/code&gt; of the keys contained
                  &lt;em&gt;only&lt;/em&gt; in this &lt;code&gt;ResourceBundle&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;Set&lt;/code&gt; of the keys contained only in this
                      &lt;code&gt;ResourceBundle&lt;/code&gt;                    
                </return>
                <since>
                    1.6                    
                </since>
                <see>
                    #keySet()                    
                </see>
            </javadoc>
            <method name="handleKeySet" type="Set&lt;String&gt;" line="104">
                <scope line="105"/>
            </method>
            <method name="getContents" type="Object[][]" line="110"/>
            <javadoc line="110">
                Returns an array in which each item is a pair of objects in an
                  &lt;code&gt;Object&lt;/code&gt; array. The first element of each pair is
                  the key, which must be a &lt;code&gt;String&lt;/code&gt;, and the second
                  element is the value associated with that key.  See the class
                  description for details.                
                <return>
                    an array of an &lt;code&gt;Object&lt;/code&gt; array representing a
                      key-value pair.                    
                </return>
            </javadoc>
            <javadoc line="120">
                We lazily load the lookup hashtable.  This function does the
                  loading.                
            </javadoc>
            <method name="loadLookup" type="void" line="124">
                <declaration name="contents" type="Object[][]" line="126"/>
                <declaration name="temp" type="HashMap&amp;lt;String,Object&amp;gt;" line="127"/>
                <scope line="128">
                    <declaration name="key" type="String" line="129"/>
                    <declaration name="value" type="Object" line="130"/>
                    <scope line="131"/>
                </scope>
            </method>
            <declaration name="lookup" type="Map&amp;lt;String,Object&amp;gt;" line="138"/>
        </class>
    </source>