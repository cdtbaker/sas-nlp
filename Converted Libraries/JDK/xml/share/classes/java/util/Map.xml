<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="Map">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <comment line="119">
                Query Operations                
            </comment>
            <comment line="203">
                Modification Operations                
            </comment>
            <comment line="264">
                Bulk Operations                
            </comment>
            <comment line="297">
                Views                
            </comment>
            <comment line="448">
                Comparison and hashing                
            </comment>
            <javadoc line="28">
                An object that maps keys to values.  A map cannot contain duplicate keys;
                  each key can map to at most one value.
                  &lt;p&gt;This interface takes the place of the &lt;tt&gt;Dictionary&lt;/tt&gt; class, which
                  was a totally abstract class rather than an interface.
                  &lt;p&gt;The &lt;tt&gt;Map&lt;/tt&gt; interface provides three &lt;i&gt;collection views&lt;/i&gt;, which
                  allow a map&apos;s contents to be viewed as a set of keys, collection of values,
                  or set of key-value mappings.  The &lt;i&gt;order&lt;/i&gt; of a map is defined as
                  the order in which the iterators on the map&apos;s collection views return their
                  elements.  Some map implementations, like the &lt;tt&gt;TreeMap&lt;/tt&gt; class, make
                  specific guarantees as to their order; others, like the &lt;tt&gt;HashMap&lt;/tt&gt;
                  class, do not.
                  &lt;p&gt;Note: great care must be exercised if mutable objects are used as map
                  keys.  The behavior of a map is not specified if the value of an object is
                  changed in a manner that affects &lt;tt&gt;equals&lt;/tt&gt; comparisons while the
                  object is a key in the map.  A special case of this prohibition is that it
                  is not permissible for a map to contain itself as a key.  While it is
                  permissible for a map to contain itself as a value, extreme caution is
                  advised: the &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;hashCode&lt;/tt&gt; methods are no longer
                  well defined on such a map.
                  &lt;p&gt;All general-purpose map implementation classes should provide two
                  &quot;standard&quot; constructors: a void (no arguments) constructor which creates an
                  empty map, and a constructor with a single argument of type &lt;tt&gt;Map&lt;/tt&gt;,
                  which creates a new map with the same key-value mappings as its argument.
                  In effect, the latter constructor allows the user to copy any map,
                  producing an equivalent map of the desired class.  There is no way to
                  enforce this recommendation (as interfaces cannot contain constructors) but
                  all of the general-purpose map implementations in the JDK comply.
                  &lt;p&gt;The &quot;destructive&quot; methods contained in this interface, that is, the
                  methods that modify the map on which they operate, are specified to throw
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if this map does not support the
                  operation.  If this is the case, these methods may, but are not required
                  to, throw an &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the invocation would
                  have no effect on the map.  For example, invoking the {@link #putAll(Map)}method on an unmodifiable map may, but is not required to, throw the
                  exception if the map whose mappings are to be &quot;superimposed&quot; is empty.
                  &lt;p&gt;Some map implementations have restrictions on the keys and values they
                  may contain.  For example, some implementations prohibit null keys and
                  values, and some have restrictions on the types of their keys.  Attempting
                  to insert an ineligible key or value throws an unchecked exception,
                  typically &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.
                  Attempting to query the presence of an ineligible key or value may throw an
                  exception, or it may simply return false; some implementations will exhibit
                  the former behavior and some will exhibit the latter.  More generally,
                  attempting an operation on an ineligible key or value whose completion
                  would not result in the insertion of an ineligible element into the map may
                  throw an exception or it may succeed, at the option of the implementation.
                  Such exceptions are marked as &quot;optional&quot; in the specification for this
                  interface.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.
                  &lt;p&gt;Many methods in Collections Framework interfaces are defined
                  in terms of the {@link Object#equals(Object) equals} method.  For
                  example, the specification for the {@link #containsKey(Object)containsKey(Object key)} method says: &quot;returns &lt;tt&gt;true&lt;/tt&gt; if and
                  only if this map contains a mapping for a key &lt;tt&gt;k&lt;/tt&gt; such that
                  &lt;tt&gt;(key==null ? k==null : key.equals(k))&lt;/tt&gt;.&quot; This specification should
                  &lt;i&gt;not&lt;/i&gt; be construed to imply that invoking &lt;tt&gt;Map.containsKey&lt;/tt&gt;
                  with a non-null argument &lt;tt&gt;key&lt;/tt&gt; will cause &lt;tt&gt;key.equals(k)&lt;/tt&gt; to
                  be invoked for any key &lt;tt&gt;k&lt;/tt&gt;.  Implementations are free to
                  implement optimizations whereby the &lt;tt&gt;equals&lt;/tt&gt; invocation is avoided,
                  for example, by first comparing the hash codes of the two keys.  (The{@link Object#hashCode()} specification guarantees that two objects with
                  unequal hash codes cannot be equal.)  More generally, implementations of
                  the various Collections Framework interfaces are free to take advantage of
                  the specified behavior of underlying {@link Object} methods wherever the
                  implementor deems it appropriate.                
                <param>
                    <K>
                       the type of keys maintained by this map                    
                </param>
                <param>
                    <V>
                       the type of mapped values                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    HashMap                    
                </see>
                <see>
                    TreeMap                    
                </see>
                <see>
                    Hashtable                    
                </see>
                <see>
                    SortedMap                    
                </see>
                <see>
                    Collection                    
                </see>
                <see>
                    Set                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="size" type="int" line="120"/>
            <javadoc line="120">
                Returns the number of key-value mappings in this map.  If the
                  map contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns
                  &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.                
                <return>
                    the number of key-value mappings in this map                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="129"/>
            <javadoc line="129">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings.                
                <return>
                    <tt>true</tt> if this map contains no key-value mappings                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="136"/>
            <javadoc line="136">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified
                  key.  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if
                  this map contains a mapping for a key &lt;tt&gt;k&lt;/tt&gt; such that
                  &lt;tt&gt;(key==null ? k==null : key.equals(k))&lt;/tt&gt;.  (There can be
                  at most one such mapping.)                
                <param>
                    key key whose presence in this map is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this map contains a mapping for the specified
                      key                    
                </return>
                <throws>
                    ClassCastException if the key is of an inappropriate type for
                      this map
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null and this map
                      does not permit null keys
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="containsValue" type="boolean" line="155"/>
            <javadoc line="155">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the
                  specified value.  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if
                  this map contains at least one mapping to a value &lt;tt&gt;v&lt;/tt&gt; such that
                  &lt;tt&gt;(value==null ? v==null : value.equals(v))&lt;/tt&gt;.  This operation
                  will probably require time linear in the map size for most
                  implementations of the &lt;tt&gt;Map&lt;/tt&gt; interface.                
                <param>
                    value value whose presence in this map is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this map maps one or more keys to the
                      specified value                    
                </return>
                <throws>
                    ClassCastException if the value is of an inappropriate type for
                      this map
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified value is null and this
                      map does not permit null values
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="get" type="V" line="175"/>
            <javadoc line="175">
                Returns the value to which the specified key is mapped,
                  or {@code null} if this map contains no mapping for the key.
                  &lt;p&gt;More formally, if this map contains a mapping from a key{@code k} to a value {@code v} such that {@code (key==null ? k==null :
                  key.equals(k))}, then this method returns {@code v}; otherwise
                  it returns {@code null}.  (There can be at most one such mapping.)
                  &lt;p&gt;If this map permits null values, then a return value of{@code null} does not &lt;i&gt;necessarily&lt;/i&gt; indicate that the map
                  contains no mapping for the key; it&apos;s also possible that the map
                  explicitly maps the key to {@code null}.  The {@link #containsKeycontainsKey} operation may be used to distinguish these two cases.                
                <param>
                    key the key whose associated value is to be returned                    
                </param>
                <return>
                    the value to which the specified key is mapped, or{@code null} if this map contains no mapping for the key                    
                </return>
                <throws>
                    ClassCastException if the key is of an inappropriate type for
                      this map
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null and this map
                      does not permit null keys
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="put" type="V" line="204"/>
            <javadoc line="204">
                Associates the specified value with the specified key in this map
                  (optional operation).  If the map previously contained a mapping for
                  the key, the old value is replaced by the specified value.  (A map
                  &lt;tt&gt;m&lt;/tt&gt; is said to contain a mapping for a key &lt;tt&gt;k&lt;/tt&gt; if and only
                  if {@link #containsKey(Object) m.containsKey(k)} would return
                  &lt;tt&gt;true&lt;/tt&gt;.)                
                <param>
                    key key with which the specified value is to be associated                    
                </param>
                <param>
                    value value to be associated with the specified key                    
                </param>
                <return>
                    the previous value associated with <tt>key</tt>, or
                      <tt>null</tt> if there was no mapping for <tt>key</tt>.
                      (A <tt>null</tt> return can also indicate that the map
                      previously associated <tt>null</tt> with <tt>key</tt>,
                      if the implementation supports <tt>null</tt> values.)                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>put</tt> operation
                      is not supported by this map                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified key or value
                      prevents it from being stored in this map                    
                </throws>
                <throws>
                    NullPointerException if the specified key or value is null
                      and this map does not permit null keys or values                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified key
                      or value prevents it from being stored in this map                    
                </throws>
            </javadoc>
            <method name="remove" type="V" line="230"/>
            <javadoc line="230">
                Removes the mapping for a key from this map if it is present
                  (optional operation).   More formally, if this map contains a mapping
                  from key &lt;tt&gt;k&lt;/tt&gt; to value &lt;tt&gt;v&lt;/tt&gt; such that
                  &lt;code&gt;(key==null ?  k==null : key.equals(k))&lt;/code&gt;, that mapping
                  is removed.  (The map can contain at most one such mapping.)
                  &lt;p&gt;Returns the value to which this map previously associated the key,
                  or &lt;tt&gt;null&lt;/tt&gt; if the map contained no mapping for the key.
                  &lt;p&gt;If this map permits null values, then a return value of
                  &lt;tt&gt;null&lt;/tt&gt; does not &lt;i&gt;necessarily&lt;/i&gt; indicate that the map
                  contained no mapping for the key; it&apos;s also possible that the map
                  explicitly mapped the key to &lt;tt&gt;null&lt;/tt&gt;.
                  &lt;p&gt;The map will not contain a mapping for the specified key once the
                  call returns.                
                <param>
                    key key whose mapping is to be removed from the map                    
                </param>
                <return>
                    the previous value associated with <tt>key</tt>, or
                      <tt>null</tt> if there was no mapping for <tt>key</tt>.                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>remove</tt> operation
                      is not supported by this map                    
                </throws>
                <throws>
                    ClassCastException if the key is of an inappropriate type for
                      this map
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified key is null and this
                      map does not permit null keys
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="265"/>
            <javadoc line="265">
                Copies all of the mappings from the specified map to this map
                  (optional operation).  The effect of this call is equivalent to that
                  of calling {@link #put(Object,Object) put(k, v)} on this map once
                  for each mapping from key &lt;tt&gt;k&lt;/tt&gt; to value &lt;tt&gt;v&lt;/tt&gt; in the
                  specified map.  The behavior of this operation is undefined if the
                  specified map is modified while the operation is in progress.                
                <param>
                    m mappings to be stored in this map                    
                </param>
                <throws>
                    UnsupportedOperationException if the <tt>putAll</tt> operation
                      is not supported by this map                    
                </throws>
                <throws>
                    ClassCastException if the class of a key or value in the
                      specified map prevents it from being stored in this map                    
                </throws>
                <throws>
                    NullPointerException if the specified map is null, or if
                      this map does not permit null keys or values, and the
                      specified map contains null keys or values                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of a key or value in
                      the specified map prevents it from being stored in this map                    
                </throws>
            </javadoc>
            <method name="clear" type="void" line="286"/>
            <javadoc line="286">
                Removes all of the mappings from this map (optional operation).
                  The map will be empty after this call returns.                
                <throws>
                    UnsupportedOperationException if the <tt>clear</tt> operation
                      is not supported by this map                    
                </throws>
            </javadoc>
            <method name="keySet" type="Set<K>" line="298"/>
            <javadoc line="298">
                Returns a {@link Set} view of the keys contained in this map.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation), the results of
                  the iteration are undefined.  The set supports element removal,
                  which removes the corresponding mapping from the map, via the
                  &lt;tt&gt;Iterator.remove&lt;/tt&gt;, &lt;tt&gt;Set.remove&lt;/tt&gt;,
                  &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt;, and &lt;tt&gt;clear&lt;/tt&gt;
                  operations.  It does not support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt;
                  operations.                
                <return>
                    a set view of the keys contained in this map                    
                </return>
            </javadoc>
            <method name="values" type="Collection<V>" line="315"/>
            <javadoc line="315">
                Returns a {@link Collection} view of the values contained in this map.
                  The collection is backed by the map, so changes to the map are
                  reflected in the collection, and vice-versa.  If the map is
                  modified while an iteration over the collection is in progress
                  (except through the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation),
                  the results of the iteration are undefined.  The collection
                  supports element removal, which removes the corresponding
                  mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,
                  &lt;tt&gt;Collection.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;,
                  &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not
                  support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.                
                <return>
                    a collection view of the values contained in this map                    
                </return>
            </javadoc>
            <method name="entrySet" type="Set<Map.Entry<K,V>>" line="332"/>
            <javadoc line="332">
                Returns a {@link Set} view of the mappings contained in this map.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation, or through the
                  &lt;tt&gt;setValue&lt;/tt&gt; operation on a map entry returned by the
                  iterator) the results of the iteration are undefined.  The set
                  supports element removal, which removes the corresponding
                  mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,
                  &lt;tt&gt;Set.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt; and
                  &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not support the
                  &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.                
                <return>
                    a set view of the mappings contained in this map                    
                </return>
            </javadoc>
            <interface name="Entry">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <javadoc line="350">
                    A map entry (key-value pair).  The &lt;tt&gt;Map.entrySet&lt;/tt&gt; method returns
                      a collection-view of the map, whose elements are of this class.  The
                      &lt;i&gt;only&lt;/i&gt; way to obtain a reference to a map entry is from the
                      iterator of this collection-view.  These &lt;tt&gt;Map.Entry&lt;/tt&gt; objects are
                      valid &lt;i&gt;only&lt;/i&gt; for the duration of the iteration; more formally,
                      the behavior of a map entry is undefined if the backing map has been
                      modified after the entry was returned by the iterator, except through
                      the &lt;tt&gt;setValue&lt;/tt&gt; operation on the map entry.                    
                    <see>
                        Map#entrySet()                        
                    </see>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getKey" type="K" line="364"/>
                <javadoc line="364">
                    Returns the key corresponding to this entry.                    
                    <return>
                        the key corresponding to this entry                        
                    </return>
                    <throws>
                        IllegalStateException implementations may, but are not
                          required to, throw this exception if the entry has been
                          removed from the backing map.                        
                    </throws>
                </javadoc>
                <method name="getValue" type="V" line="374"/>
                <javadoc line="374">
                    Returns the value corresponding to this entry.  If the mapping
                      has been removed from the backing map (by the iterator&apos;s
                      &lt;tt&gt;remove&lt;/tt&gt; operation), the results of this call are undefined.                    
                    <return>
                        the value corresponding to this entry                        
                    </return>
                    <throws>
                        IllegalStateException implementations may, but are not
                          required to, throw this exception if the entry has been
                          removed from the backing map.                        
                    </throws>
                </javadoc>
                <method name="setValue" type="V" line="386"/>
                <javadoc line="386">
                    Replaces the value corresponding to this entry with the specified
                      value (optional operation).  (Writes through to the map.)  The
                      behavior of this call is undefined if the mapping has already been
                      removed from the map (by the iterator&apos;s &lt;tt&gt;remove&lt;/tt&gt; operation).                    
                    <param>
                        value new value to be stored in this entry                        
                    </param>
                    <return>
                        old value corresponding to the entry                        
                    </return>
                    <throws>
                        UnsupportedOperationException if the <tt>put</tt> operation
                          is not supported by the backing map                        
                    </throws>
                    <throws>
                        ClassCastException if the class of the specified value
                          prevents it from being stored in the backing map                        
                    </throws>
                    <throws>
                        NullPointerException if the backing map does not permit
                          null values, and the specified value is null                        
                    </throws>
                    <throws>
                        IllegalArgumentException if some property of this value
                          prevents it from being stored in the backing map                        
                    </throws>
                    <throws>
                        IllegalStateException implementations may, but are not
                          required to, throw this exception if the entry has been
                          removed from the backing map.                        
                    </throws>
                </javadoc>
                <method name="equals" type="boolean" line="408"/>
                <javadoc line="408">
                    Compares the specified object with this entry for equality.
                      Returns &lt;tt&gt;true&lt;/tt&gt; if the given object is also a map entry and
                      the two entries represent the same mapping.  More formally, two
                      entries &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; represent the same mapping
                      if&lt;pre&gt;
                      (e1.getKey()==null ?
                      e2.getKey()==null : e1.getKey().equals(e2.getKey()))  &amp;amp;&amp;amp;
                      (e1.getValue()==null ?
                      e2.getValue()==null : e1.getValue().equals(e2.getValue()))
                      &lt;/pre&gt;
                      This ensures that the &lt;tt&gt;equals&lt;/tt&gt; method works properly across
                      different implementations of the &lt;tt&gt;Map.Entry&lt;/tt&gt; interface.                    
                    <param>
                        o object to be compared for equality with this map entry                        
                    </param>
                    <return>
                        <tt>true</tt> if the specified object is equal to this map
                          entry                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="428"/>
                <javadoc line="428">
                    Returns the hash code value for this map entry.  The hash code
                      of a map entry &lt;tt&gt;e&lt;/tt&gt; is defined to be: &lt;pre&gt;
                      (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^
                      (e.getValue()==null ? 0 : e.getValue().hashCode())
                      &lt;/pre&gt;
                      This ensures that &lt;tt&gt;e1.equals(e2)&lt;/tt&gt; implies that
                      &lt;tt&gt;e1.hashCode()==e2.hashCode()&lt;/tt&gt; for any two Entries
                      &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt;, as required by the general
                      contract of &lt;tt&gt;Object.hashCode&lt;/tt&gt;.                    
                    <return>
                        the hash code value for this map entry                        
                    </return>
                    <see>
                        Object#hashCode()                        
                    </see>
                    <see>
                        Object#equals(Object)                        
                    </see>
                    <see>
                        #equals(Object)                        
                    </see>
                </javadoc>
            </interface>
            <method name="equals" type="boolean" line="449"/>
            <javadoc line="449">
                Compares the specified object with this map for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the given object is also a map and the two maps
                  represent the same mappings.  More formally, two maps &lt;tt&gt;m1&lt;/tt&gt; and
                  &lt;tt&gt;m2&lt;/tt&gt; represent the same mappings if
                  &lt;tt&gt;m1.entrySet().equals(m2.entrySet())&lt;/tt&gt;.  This ensures that the
                  &lt;tt&gt;equals&lt;/tt&gt; method works properly across different implementations
                  of the &lt;tt&gt;Map&lt;/tt&gt; interface.                
                <param>
                    o object to be compared for equality with this map                    
                </param>
                <return>
                    <tt>true</tt> if the specified object is equal to this map                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="463"/>
            <javadoc line="463">
                Returns the hash code value for this map.  The hash code of a map is
                  defined to be the sum of the hash codes of each entry in the map&apos;s
                  &lt;tt&gt;entrySet()&lt;/tt&gt; view.  This ensures that &lt;tt&gt;m1.equals(m2)&lt;/tt&gt;
                  implies that &lt;tt&gt;m1.hashCode()==m2.hashCode()&lt;/tt&gt; for any two maps
                  &lt;tt&gt;m1&lt;/tt&gt; and &lt;tt&gt;m2&lt;/tt&gt;, as required by the general contract of{@link Object#hashCode}.                
                <return>
                    the hash code value for this map                    
                </return>
                <see>
                    Map.Entry#hashCode()                    
                </see>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    #equals(Object)                    
                </see>
            </javadoc>
        </interface>
    </source>