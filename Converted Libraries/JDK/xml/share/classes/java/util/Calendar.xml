<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.OptionalDataException"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.text.DateFormat"/>
        <import package="java.text.DateFormatSymbols"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.util.concurrent.ConcurrentMap"/>
        <import package="sun.util.BuddhistCalendar"/>
        <import package="sun.util.calendar.ZoneInfo"/>
        <import package="sun.util.resources.LocaleData"/>
        <class name="Calendar" line="60">
            <comment line="313">
                Data flow in Calendar                
            </comment>
            <comment line="314">
                ---------------------                
            </comment>
            <comment line="316">
                The current time is represented in two ways by Calendar: as UTC                
            </comment>
            <comment line="317">
                milliseconds from the epoch (1 January 1970 0:00 UTC), and as local                
            </comment>
            <comment line="318">
                fields such as MONTH, HOUR, AM_PM, etc.  It is possible to compute the                
            </comment>
            <comment line="319">
                millis from the fields, and vice versa.  The data needed to do this                
            </comment>
            <comment line="320">
                conversion is encapsulated by a TimeZone object owned by the Calendar.                
            </comment>
            <comment line="321">
                The data provided by the TimeZone object may also be overridden if the                
            </comment>
            <comment line="322">
                user sets the ZONE_OFFSET and/or DST_OFFSET fields directly. The class                
            </comment>
            <comment line="323">
                keeps track of what information was most recently set by the caller, and                
            </comment>
            <comment line="324">
                uses that to compute any other information as needed.                
            </comment>
            <comment line="326">
                If the user sets the fields using set(), the data flow is as follows.                
            </comment>
            <comment line="327">
                This is implemented by the Calendar subclass&apos;s computeTime() method.                
            </comment>
            <comment line="328">
                During this process, certain fields may be ignored.  The disambiguation                
            </comment>
            <comment line="329">
                algorithm for resolving which fields to pay attention to is described                
            </comment>
            <comment line="330">
                in the class documentation.                
            </comment>
            <comment line="332">
                local fields (YEAR, MONTH, DATE, HOUR, MINUTE, etc.)                
            </comment>
            <comment line="333">
                |                
            </comment>
            <comment line="334">
                | Using Calendar-specific algorithm                
            </comment>
            <comment line="335">
                V                
            </comment>
            <comment line="336">
                local standard millis                
            </comment>
            <comment line="337">
                |                
            </comment>
            <comment line="338">
                | Using TimeZone or user-set ZONE_OFFSET / DST_OFFSET                
            </comment>
            <comment line="339">
                V                
            </comment>
            <comment line="340">
                UTC millis (in time data member)                
            </comment>
            <comment line="342">
                If the user sets the UTC millis using setTime() or setTimeInMillis(),                
            </comment>
            <comment line="343">
                the data flow is as follows.  This is implemented by the Calendar                
            </comment>
            <comment line="344">
                subclass&apos;s computeFields() method.                
            </comment>
            <comment line="346">
                UTC millis (in time data member)                
            </comment>
            <comment line="347">
                |                
            </comment>
            <comment line="348">
                | Using TimeZone getOffset()                
            </comment>
            <comment line="349">
                V                
            </comment>
            <comment line="350">
                local standard millis                
            </comment>
            <comment line="351">
                |                
            </comment>
            <comment line="352">
                | Using Calendar-specific algorithm                
            </comment>
            <comment line="353">
                V                
            </comment>
            <comment line="354">
                local fields (YEAR, MONTH, DATE, HOUR, MINUTE, etc.)                
            </comment>
            <comment line="356">
                In general, a round trip from fields, through local and UTC millis, and                
            </comment>
            <comment line="357">
                back out to fields is made when necessary.  This is implemented by the                
            </comment>
            <comment line="358">
                complete() method.  Resolving a partial set of fields into a UTC millis                
            </comment>
            <comment line="359">
                value allows all remaining fields to be generated from that value.  If                
            </comment>
            <comment line="360">
                the Calendar is lenient, the fields are also renormalized to standard                
            </comment>
            <comment line="361">
                ranges when they are regenerated.                
            </comment>
            <comment line="737">
                Internal notes:                
            </comment>
            <comment line="738">
                Calendar contains two kinds of time representations: current &quot;time&quot; in                
            </comment>
            <comment line="739">
                milliseconds, and a set of calendar &quot;fields&quot; representing the current time.                
            </comment>
            <comment line="740">
                The two representations are usually in sync, but can get out of sync                
            </comment>
            <comment line="741">
                as follows.                
            </comment>
            <comment line="742">
                1. Initially, no fields are set, and the time is invalid.                
            </comment>
            <comment line="743">
                2. If the time is set, all fields are computed and in sync.                
            </comment>
            <comment line="744">
                3. If a single field is set, the time is invalid.                
            </comment>
            <comment line="745">
                Recomputation of the time and fields happens when the object needs                
            </comment>
            <comment line="746">
                to return a result to the user, or use a result for a computation.                
            </comment>
            <comment line="846">
                Special values of stamp[]                
            </comment>
            <comment line="878">
                the internal serial version which says which version was written                
            </comment>
            <comment line="879">
                - 0 (default) for version up to JDK 1.1.5                
            </comment>
            <comment line="880">
                - 1 for version from JDK 1.1.6, which writes a correct &apos;time&apos; value                
            </comment>
            <comment line="881">
                as well as compatible values for other fields.  This is a                
            </comment>
            <comment line="882">
                transitional format.                
            </comment>
            <comment line="883">
                - 2 (not implemented yet) a future version, in which fields[],                
            </comment>
            <comment line="884">
                areFieldsSet, and isTimeSet become transient, and isSet[] is                
            </comment>
            <comment line="885">
                removed. In JDK 1.1.6 we write a format compatible with version 2.                
            </comment>
            <comment line="910">
                Proclaim serialization compatibility with JDK 1.1                
            </comment>
            <comment line="913">
                Mask values for calendar fields                
            </comment>
            <comment line="2569">
                =======================privates===============================                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Calendar"/>
                </type_params>
            </implements>
            <javadoc line="60">
                The &lt;code&gt;Calendar&lt;/code&gt; class is an abstract class that provides methods
                  for converting between a specific instant in time and a set of {@link #fields calendar fields} such as &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;,
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;, &lt;code&gt;HOUR&lt;/code&gt;, and so on, and for
                  manipulating the calendar fields, such as getting the date of the next
                  week. An instant in time can be represented by a millisecond value that is
                  an offset from the &lt;a name=&quot;Epoch&quot;&gt;&lt;em&gt;Epoch&lt;/em&gt;&lt;/a&gt;, January 1, 1970
                  00:00:00.000 GMT (Gregorian).
                  &lt;p&gt;The class also provides additional fields and methods for
                  implementing a concrete calendar system outside the package. Those
                  fields and methods are defined as &lt;code&gt;protected&lt;/code&gt;.
                  &lt;p&gt;
                  Like other locale-sensitive classes, &lt;code&gt;Calendar&lt;/code&gt; provides a
                  class method, &lt;code&gt;getInstance&lt;/code&gt;, for getting a generally useful
                  object of this type. &lt;code&gt;Calendar&lt;/code&gt;&apos;s &lt;code&gt;getInstance&lt;/code&gt; method
                  returns a &lt;code&gt;Calendar&lt;/code&gt; object whose
                  calendar fields have been initialized with the current date and time:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  Calendar rightNow = Calendar.getInstance();
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;A &lt;code&gt;Calendar&lt;/code&gt; object can produce all the calendar field values
                  needed to implement the date-time formatting for a particular language and
                  calendar style (for example, Japanese-Gregorian, Japanese-Traditional).
                  &lt;code&gt;Calendar&lt;/code&gt; defines the range of values returned by
                  certain calendar fields, as well as their meaning.  For example,
                  the first month of the calendar system has value &lt;code&gt;MONTH ==
                  JANUARY&lt;/code&gt; for all calendars.  Other values are defined by the
                  concrete subclass, such as &lt;code&gt;ERA&lt;/code&gt;.  See individual field
                  documentation and subclass documentation for details.
                  &lt;h4&gt;Getting and Setting Calendar Field Values&lt;/h4&gt;
                  &lt;p&gt;The calendar field values can be set by calling the &lt;code&gt;set&lt;/code&gt;
                  methods. Any field values set in a &lt;code&gt;Calendar&lt;/code&gt; will not be
                  interpreted until it needs to calculate its time value (milliseconds from
                  the Epoch) or values of the calendar fields. Calling the
                  &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;getTimeInMillis&lt;/code&gt;, &lt;code&gt;getTime&lt;/code&gt;,
                  &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;roll&lt;/code&gt; involves such calculation.
                  &lt;h4&gt;Leniency&lt;/h4&gt;
                  &lt;p&gt;&lt;code&gt;Calendar&lt;/code&gt; has two modes for interpreting the calendar
                  fields, &lt;em&gt;lenient&lt;/em&gt; and &lt;em&gt;non-lenient&lt;/em&gt;.  When a
                  &lt;code&gt;Calendar&lt;/code&gt; is in lenient mode, it accepts a wider range of
                  calendar field values than it produces.  When a &lt;code&gt;Calendar&lt;/code&gt;
                  recomputes calendar field values for return by &lt;code&gt;get()&lt;/code&gt;, all of
                  the calendar fields are normalized. For example, a lenient
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; interprets &lt;code&gt;MONTH == JANUARY&lt;/code&gt;,
                  &lt;code&gt;DAY_OF_MONTH == 32&lt;/code&gt; as February 1.
                  &lt;p&gt;When a &lt;code&gt;Calendar&lt;/code&gt; is in non-lenient mode, it throws an
                  exception if there is any inconsistency in its calendar fields. For
                  example, a &lt;code&gt;GregorianCalendar&lt;/code&gt; always produces
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; values between 1 and the length of the month. A
                  non-lenient &lt;code&gt;GregorianCalendar&lt;/code&gt; throws an exception upon
                  calculating its time or calendar field values if any out-of-range field
                  value has been set.
                  &lt;h4&gt;&lt;a name=&quot;first_week&quot;&gt;First Week&lt;/a&gt;&lt;/h4&gt;
                  &lt;code&gt;Calendar&lt;/code&gt; defines a locale-specific seven day week using two
                  parameters: the first day of the week and the minimal days in first week
                  (from 1 to 7).  These numbers are taken from the locale resource data when a
                  &lt;code&gt;Calendar&lt;/code&gt; is constructed.  They may also be specified explicitly
                  through the methods for setting their values.
                  &lt;p&gt;When setting or getting the &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; or
                  &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; fields, &lt;code&gt;Calendar&lt;/code&gt; must determine the
                  first week of the month or year as a reference point.  The first week of a
                  month or year is defined as the earliest seven day period beginning on
                  &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and containing at least
                  &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; days of that month or year.  Weeks
                  numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow
                  it.  Note that the normalized numbering returned by &lt;code&gt;get()&lt;/code&gt; may be
                  different.  For example, a specific &lt;code&gt;Calendar&lt;/code&gt; subclass may
                  designate the week before week 1 of a year as week &lt;code&gt;&lt;i&gt;n&lt;/i&gt;&lt;/code&gt; of
                  the previous year.
                  &lt;h4&gt;Calendar Fields Resolution&lt;/h4&gt;
                  When computing a date and time from the calendar fields, there
                  may be insufficient information for the computation (such as only
                  year and month with no day of month), or there may be inconsistent
                  information (such as Tuesday, July 15, 1996 (Gregorian) -- July 15,
                  1996 is actually a Monday). &lt;code&gt;Calendar&lt;/code&gt; will resolve
                  calendar field values to determine the date and time in the
                  following way.
                  &lt;p&gt;If there is any conflict in calendar field values,
                  &lt;code&gt;Calendar&lt;/code&gt; gives priorities to calendar fields that have been set
                  more recently. The following are the default combinations of the
                  calendar fields. The most recent combination, as determined by the
                  most recently set single field, will be used.
                  &lt;p&gt;&lt;a name=&quot;date_resolution&quot;&gt;For the date fields&lt;/a&gt;:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  YEAR + MONTH + DAY_OF_MONTH
                  YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
                  YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
                  YEAR + DAY_OF_YEAR
                  YEAR + DAY_OF_WEEK + WEEK_OF_YEAR
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;a name=&quot;time_resolution&quot;&gt;For the time of day fields&lt;/a&gt;:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  HOUR_OF_DAY
                  AM_PM + HOUR
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;If there are any calendar fields whose values haven&apos;t been set in the selected
                  field combination, &lt;code&gt;Calendar&lt;/code&gt; uses their default values. The default
                  value of each field may vary by concrete calendar systems. For example, in
                  &lt;code&gt;GregorianCalendar&lt;/code&gt;, the default of a field is the same as that
                  of the start of the Epoch: i.e., &lt;code&gt;YEAR = 1970&lt;/code&gt;, &lt;code&gt;MONTH =
                  JANUARY&lt;/code&gt;, &lt;code&gt;DAY_OF_MONTH = 1&lt;/code&gt;, etc.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; There are certain possible ambiguities in
                  interpretation of certain singular times, which are resolved in the
                  following ways:
                  &lt;ol&gt;
                  &lt;li&gt; 23:59 is the last minute of the day and 00:00 is the first
                  minute of the next day. Thus, 23:59 on Dec 31, 1999 &amp;lt; 00:00 on
                  Jan 1, 2000 &amp;lt; 00:01 on Jan 1, 2000.
                  &lt;li&gt; Although historically not precise, midnight also belongs to &quot;am&quot;,
                  and noon belongs to &quot;pm&quot;, so on the same day,
                  12:00 am (midnight) &amp;lt; 12:01 am, and 12:00 pm (noon) &amp;lt; 12:01 pm
                  &lt;/ol&gt;
                  &lt;p&gt;
                  The date or time format strings are not part of the definition of a
                  calendar, as those must be modifiable or overridable by the user at
                  runtime. Use {@link DateFormat}to format dates.
                  &lt;h4&gt;Field Manipulation&lt;/h4&gt;
                  The calendar fields can be changed using three methods:
                  &lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;add()&lt;/code&gt;, and &lt;code&gt;roll()&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;&lt;code&gt;set(f, value)&lt;/code&gt;&lt;/strong&gt; changes calendar field
                  &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;.  In addition, it sets an
                  internal member variable to indicate that calendar field &lt;code&gt;f&lt;/code&gt; has
                  been changed. Although calendar field &lt;code&gt;f&lt;/code&gt; is changed immediately,
                  the calendar&apos;s time value in milliseconds is not recomputed until the next call to
                  &lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;getTime()&lt;/code&gt;, &lt;code&gt;getTimeInMillis()&lt;/code&gt;,
                  &lt;code&gt;add()&lt;/code&gt;, or &lt;code&gt;roll()&lt;/code&gt; is made. Thus, multiple calls to
                  &lt;code&gt;set()&lt;/code&gt; do not trigger multiple, unnecessary
                  computations. As a result of changing a calendar field using
                  &lt;code&gt;set()&lt;/code&gt;, other calendar fields may also change, depending on the
                  calendar field, the calendar field value, and the calendar system. In addition,
                  &lt;code&gt;get(f)&lt;/code&gt; will not necessarily return &lt;code&gt;value&lt;/code&gt; set by
                  the call to the &lt;code&gt;set&lt;/code&gt; method
                  after the calendar fields have been recomputed. The specifics are determined by
                  the concrete calendar class.&lt;/p&gt;
                  &lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt;
                  originally set to August 31, 1999. Calling &lt;code&gt;set(Calendar.MONTH,
                  Calendar.SEPTEMBER)&lt;/code&gt; sets the date to September 31,
                  1999. This is a temporary internal representation that resolves to
                  October 1, 1999 if &lt;code&gt;getTime()&lt;/code&gt;is then called. However, a
                  call to &lt;code&gt;set(Calendar.DAY_OF_MONTH, 30)&lt;/code&gt; before the call to
                  &lt;code&gt;getTime()&lt;/code&gt; sets the date to September 30, 1999, since
                  no recomputation occurs after &lt;code&gt;set()&lt;/code&gt; itself.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;&lt;code&gt;add(f, delta)&lt;/code&gt;&lt;/strong&gt; adds &lt;code&gt;delta&lt;/code&gt;
                  to field &lt;code&gt;f&lt;/code&gt;.  This is equivalent to calling &lt;code&gt;set(f,
                  get(f) + delta)&lt;/code&gt; with two adjustments:&lt;/p&gt;
                  &lt;blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;Add rule 1&lt;/strong&gt;. The value of field &lt;code&gt;f&lt;/code&gt;
                  after the call minus the value of field &lt;code&gt;f&lt;/code&gt; before the
                  call is &lt;code&gt;delta&lt;/code&gt;, modulo any overflow that has occurred in
                  field &lt;code&gt;f&lt;/code&gt;. Overflow occurs when a field value exceeds its
                  range and, as a result, the next larger field is incremented or
                  decremented and the field value is adjusted back into its range.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Add rule 2&lt;/strong&gt;. If a smaller field is expected to be
                  invariant, but it is impossible for it to be equal to its
                  prior value because of changes in its minimum or maximum after field
                  &lt;code&gt;f&lt;/code&gt; is changed or other constraints, such as time zone
                  offset changes, then its value is adjusted to be as close
                  as possible to its expected value. A smaller field represents a
                  smaller unit of time. &lt;code&gt;HOUR&lt;/code&gt; is a smaller field than
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;. No adjustment is made to smaller fields
                  that are not expected to be invariant. The calendar system
                  determines what fields are expected to be invariant.&lt;/p&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;In addition, unlike &lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;add()&lt;/code&gt; forces
                  an immediate recomputation of the calendar&apos;s milliseconds and all
                  fields.&lt;/p&gt;
                  &lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: Consider a &lt;code&gt;GregorianCalendar&lt;/code&gt;
                  originally set to August 31, 1999. Calling &lt;code&gt;add(Calendar.MONTH,
                  13)&lt;/code&gt; sets the calendar to September 30, 2000. &lt;strong&gt;Add rule
                  1&lt;/strong&gt; sets the &lt;code&gt;MONTH&lt;/code&gt; field to September, since
                  adding 13 months to August gives September of the next year. Since
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; cannot be 31 in September in a
                  &lt;code&gt;GregorianCalendar&lt;/code&gt;, &lt;strong&gt;add rule 2&lt;/strong&gt; sets the
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; to 30, the closest possible value. Although
                  it is a smaller field, &lt;code&gt;DAY_OF_WEEK&lt;/code&gt; is not adjusted by
                  rule 2, since it is expected to change when the month changes in a
                  &lt;code&gt;GregorianCalendar&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;&lt;code&gt;roll(f, delta)&lt;/code&gt;&lt;/strong&gt; adds
                  &lt;code&gt;delta&lt;/code&gt; to field &lt;code&gt;f&lt;/code&gt; without changing larger
                  fields. This is equivalent to calling &lt;code&gt;add(f, delta)&lt;/code&gt; with
                  the following adjustment:&lt;/p&gt;
                  &lt;blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;Roll rule&lt;/strong&gt;. Larger fields are unchanged after the
                  call. A larger field represents a larger unit of
                  time. &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; is a larger field than
                  &lt;code&gt;HOUR&lt;/code&gt;.&lt;/p&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: See {@link java.util.GregorianCalendar#roll(int,int)}.
                  &lt;p&gt;&lt;strong&gt;Usage model&lt;/strong&gt;. To motivate the behavior of
                  &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;roll()&lt;/code&gt;, consider a user interface
                  component with increment and decrement buttons for the month, day, and
                  year, and an underlying &lt;code&gt;GregorianCalendar&lt;/code&gt;. If the
                  interface reads January 31, 1999 and the user presses the month
                  increment button, what should it read? If the underlying
                  implementation uses &lt;code&gt;set()&lt;/code&gt;, it might read March 3, 1999. A
                  better result would be February 28, 1999. Furthermore, if the user
                  presses the month increment button again, it should read March 31,
                  1999, not March 28, 1999. By saving the original date and using either
                  &lt;code&gt;add()&lt;/code&gt; or &lt;code&gt;roll()&lt;/code&gt;, depending on whether larger
                  fields should be affected, the user interface can behave as most users
                  will intuitively expect.&lt;/p&gt;                
                <see>
                    java.lang.System#currentTimeMillis()                    
                </see>
                <see>
                    Date                    
                </see>
                <see>
                    GregorianCalendar                    
                </see>
                <see>
                    TimeZone                    
                </see>
                <see>
                    java.text.DateFormat                    
                </see>
                <author>
                    Mark Davis, David Goldsmith, Chen-Lieh Huang, Alan Liu                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="ERA" type="int" line="362"/>
            <javadoc line="362">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  era, e.g., AD or BC in the Julian calendar. This is a calendar-specific
                  value; see subclass documentation.                
                <see>
                    GregorianCalendar#AD                    
                </see>
                <see>
                    GregorianCalendar#BC                    
                </see>
            </javadoc>
            <declaration name="YEAR" type="int" line="372"/>
            <javadoc line="372">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  year. This is a calendar-specific value; see subclass documentation.                
            </javadoc>
            <declaration name="MONTH" type="int" line="378"/>
            <javadoc line="378">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  month. This is a calendar-specific value. The first month of
                  the year in the Gregorian and Julian calendars is
                  &lt;code&gt;JANUARY&lt;/code&gt; which is 0; the last depends on the number
                  of months in a year.                
                <see>
                    #JANUARY                    
                </see>
                <see>
                    #FEBRUARY                    
                </see>
                <see>
                    #MARCH                    
                </see>
                <see>
                    #APRIL                    
                </see>
                <see>
                    #MAY                    
                </see>
                <see>
                    #JUNE                    
                </see>
                <see>
                    #JULY                    
                </see>
                <see>
                    #AUGUST                    
                </see>
                <see>
                    #SEPTEMBER                    
                </see>
                <see>
                    #OCTOBER                    
                </see>
                <see>
                    #NOVEMBER                    
                </see>
                <see>
                    #DECEMBER                    
                </see>
                <see>
                    #UNDECIMBER                    
                </see>
            </javadoc>
            <declaration name="WEEK_OF_YEAR" type="int" line="401"/>
            <javadoc line="401">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  week number within the current year.  The first week of the year, as
                  defined by &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and
                  &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;, has value 1.  Subclasses define
                  the value of &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; for days before the first week of
                  the year.                
                <see>
                    #getFirstDayOfWeek                    
                </see>
                <see>
                    #getMinimalDaysInFirstWeek                    
                </see>
            </javadoc>
            <declaration name="WEEK_OF_MONTH" type="int" line="414"/>
            <javadoc line="414">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  week number within the current month.  The first week of the month, as
                  defined by &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and
                  &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;, has value 1.  Subclasses define
                  the value of &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; for days before the first week of
                  the month.                
                <see>
                    #getFirstDayOfWeek                    
                </see>
                <see>
                    #getMinimalDaysInFirstWeek                    
                </see>
            </javadoc>
            <declaration name="DATE" type="int" line="427"/>
            <javadoc line="427">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  day of the month. This is a synonym for &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;.
                  The first day of the month has value 1.                
                <see>
                    #DAY_OF_MONTH                    
                </see>
            </javadoc>
            <declaration name="DAY_OF_MONTH" type="int" line="436"/>
            <javadoc line="436">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  day of the month. This is a synonym for &lt;code&gt;DATE&lt;/code&gt;.
                  The first day of the month has value 1.                
                <see>
                    #DATE                    
                </see>
            </javadoc>
            <declaration name="DAY_OF_YEAR" type="int" line="445"/>
            <javadoc line="445">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the day
                  number within the current year.  The first day of the year has value 1.                
            </javadoc>
            <declaration name="DAY_OF_WEEK" type="int" line="451"/>
            <javadoc line="451">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the day
                  of the week.  This field takes values &lt;code&gt;SUNDAY&lt;/code&gt;,
                  &lt;code&gt;MONDAY&lt;/code&gt;, &lt;code&gt;TUESDAY&lt;/code&gt;, &lt;code&gt;WEDNESDAY&lt;/code&gt;,
                  &lt;code&gt;THURSDAY&lt;/code&gt;, &lt;code&gt;FRIDAY&lt;/code&gt;, and &lt;code&gt;SATURDAY&lt;/code&gt;.                
                <see>
                    #SUNDAY                    
                </see>
                <see>
                    #MONDAY                    
                </see>
                <see>
                    #TUESDAY                    
                </see>
                <see>
                    #WEDNESDAY                    
                </see>
                <see>
                    #THURSDAY                    
                </see>
                <see>
                    #FRIDAY                    
                </see>
                <see>
                    #SATURDAY                    
                </see>
            </javadoc>
            <declaration name="DAY_OF_WEEK_IN_MONTH" type="int" line="467"/>
            <javadoc line="467">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  ordinal number of the day of the week within the current month. Together
                  with the &lt;code&gt;DAY_OF_WEEK&lt;/code&gt; field, this uniquely specifies a day
                  within a month.  Unlike &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; and
                  &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt;, this field&apos;s value does &lt;em&gt;not&lt;/em&gt; depend on
                  &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; or
                  &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;.  &lt;code&gt;DAY_OF_MONTH 1&lt;/code&gt;
                  through &lt;code&gt;7&lt;/code&gt; always correspond to &lt;code&gt;DAY_OF_WEEK_IN_MONTH
                  1&lt;/code&gt;; &lt;code&gt;8&lt;/code&gt; through &lt;code&gt;14&lt;/code&gt; correspond to
                  &lt;code&gt;DAY_OF_WEEK_IN_MONTH 2&lt;/code&gt;, and so on.
                  &lt;code&gt;DAY_OF_WEEK_IN_MONTH 0&lt;/code&gt; indicates the week before
                  &lt;code&gt;DAY_OF_WEEK_IN_MONTH 1&lt;/code&gt;.  Negative values count back from the
                  end of the month, so the last Sunday of a month is specified as
                  &lt;code&gt;DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1&lt;/code&gt;.  Because
                  negative values count backward they will usually be aligned differently
                  within the month than positive values.  For example, if a month has 31
                  days, &lt;code&gt;DAY_OF_WEEK_IN_MONTH -1&lt;/code&gt; will overlap
                  &lt;code&gt;DAY_OF_WEEK_IN_MONTH 5&lt;/code&gt; and the end of &lt;code&gt;4&lt;/code&gt;.                
                <see>
                    #DAY_OF_WEEK                    
                </see>
                <see>
                    #WEEK_OF_MONTH                    
                </see>
            </javadoc>
            <declaration name="AM_PM" type="int" line="492"/>
            <javadoc line="492">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating
                  whether the &lt;code&gt;HOUR&lt;/code&gt; is before or after noon.
                  E.g., at 10:04:15.250 PM the &lt;code&gt;AM_PM&lt;/code&gt; is &lt;code&gt;PM&lt;/code&gt;.                
                <see>
                    #AM                    
                </see>
                <see>
                    #PM                    
                </see>
                <see>
                    #HOUR                    
                </see>
            </javadoc>
            <declaration name="HOUR" type="int" line="503"/>
            <javadoc line="503">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  hour of the morning or afternoon. &lt;code&gt;HOUR&lt;/code&gt; is used for the
                  12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12.
                  E.g., at 10:04:15.250 PM the &lt;code&gt;HOUR&lt;/code&gt; is 10.                
                <see>
                    #AM_PM                    
                </see>
                <see>
                    #HOUR_OF_DAY                    
                </see>
            </javadoc>
            <declaration name="HOUR_OF_DAY" type="int" line="514"/>
            <javadoc line="514">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  hour of the day. &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; is used for the 24-hour clock.
                  E.g., at 10:04:15.250 PM the &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; is 22.                
                <see>
                    #HOUR                    
                </see>
            </javadoc>
            <declaration name="MINUTE" type="int" line="523"/>
            <javadoc line="523">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  minute within the hour.
                  E.g., at 10:04:15.250 PM the &lt;code&gt;MINUTE&lt;/code&gt; is 4.                
            </javadoc>
            <declaration name="SECOND" type="int" line="530"/>
            <javadoc line="530">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  second within the minute.
                  E.g., at 10:04:15.250 PM the &lt;code&gt;SECOND&lt;/code&gt; is 15.                
            </javadoc>
            <declaration name="MILLISECOND" type="int" line="537"/>
            <javadoc line="537">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  millisecond within the second.
                  E.g., at 10:04:15.250 PM the &lt;code&gt;MILLISECOND&lt;/code&gt; is 250.                
            </javadoc>
            <declaration name="ZONE_OFFSET" type="int" line="544"/>
            <javadoc line="544">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;
                  indicating the raw offset from GMT in milliseconds.
                  &lt;p&gt;
                  This field reflects the correct GMT offset value of the time
                  zone of this &lt;code&gt;Calendar&lt;/code&gt; if the
                  &lt;code&gt;TimeZone&lt;/code&gt; implementation subclass supports
                  historical GMT offset changes.                
            </javadoc>
            <declaration name="DST_OFFSET" type="int" line="555"/>
            <javadoc line="555">
                Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the
                  daylight saving offset in milliseconds.
                  &lt;p&gt;
                  This field reflects the correct daylight saving offset value of
                  the time zone of this &lt;code&gt;Calendar&lt;/code&gt; if the
                  &lt;code&gt;TimeZone&lt;/code&gt; implementation subclass supports
                  historical Daylight Saving Time schedule changes.                
            </javadoc>
            <declaration name="FIELD_COUNT" type="int" line="566"/>
            <javadoc line="566">
                The number of distinct fields recognized by &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;.
                  Field numbers range from &lt;code&gt;0..FIELD_COUNT-1&lt;/code&gt;.                
            </javadoc>
            <declaration name="SUNDAY" type="int" line="572"/>
            <javadoc line="572">
                Value of the {@link #DAY_OF_WEEK} field indicating
                  Sunday.                
            </javadoc>
            <declaration name="MONDAY" type="int" line="578"/>
            <javadoc line="578">
                Value of the {@link #DAY_OF_WEEK} field indicating
                  Monday.                
            </javadoc>
            <declaration name="TUESDAY" type="int" line="584"/>
            <javadoc line="584">
                Value of the {@link #DAY_OF_WEEK} field indicating
                  Tuesday.                
            </javadoc>
            <declaration name="WEDNESDAY" type="int" line="590"/>
            <javadoc line="590">
                Value of the {@link #DAY_OF_WEEK} field indicating
                  Wednesday.                
            </javadoc>
            <declaration name="THURSDAY" type="int" line="596"/>
            <javadoc line="596">
                Value of the {@link #DAY_OF_WEEK} field indicating
                  Thursday.                
            </javadoc>
            <declaration name="FRIDAY" type="int" line="602"/>
            <javadoc line="602">
                Value of the {@link #DAY_OF_WEEK} field indicating
                  Friday.                
            </javadoc>
            <declaration name="SATURDAY" type="int" line="608"/>
            <javadoc line="608">
                Value of the {@link #DAY_OF_WEEK} field indicating
                  Saturday.                
            </javadoc>
            <declaration name="JANUARY" type="int" line="614"/>
            <javadoc line="614">
                Value of the {@link #MONTH} field indicating the
                  first month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="FEBRUARY" type="int" line="620"/>
            <javadoc line="620">
                Value of the {@link #MONTH} field indicating the
                  second month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="MARCH" type="int" line="626"/>
            <javadoc line="626">
                Value of the {@link #MONTH} field indicating the
                  third month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="APRIL" type="int" line="632"/>
            <javadoc line="632">
                Value of the {@link #MONTH} field indicating the
                  fourth month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="MAY" type="int" line="638"/>
            <javadoc line="638">
                Value of the {@link #MONTH} field indicating the
                  fifth month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="JUNE" type="int" line="644"/>
            <javadoc line="644">
                Value of the {@link #MONTH} field indicating the
                  sixth month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="JULY" type="int" line="650"/>
            <javadoc line="650">
                Value of the {@link #MONTH} field indicating the
                  seventh month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="AUGUST" type="int" line="656"/>
            <javadoc line="656">
                Value of the {@link #MONTH} field indicating the
                  eighth month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="SEPTEMBER" type="int" line="662"/>
            <javadoc line="662">
                Value of the {@link #MONTH} field indicating the
                  ninth month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="OCTOBER" type="int" line="668"/>
            <javadoc line="668">
                Value of the {@link #MONTH} field indicating the
                  tenth month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="NOVEMBER" type="int" line="674"/>
            <javadoc line="674">
                Value of the {@link #MONTH} field indicating the
                  eleventh month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="DECEMBER" type="int" line="680"/>
            <javadoc line="680">
                Value of the {@link #MONTH} field indicating the
                  twelfth month of the year in the Gregorian and Julian calendars.                
            </javadoc>
            <declaration name="UNDECIMBER" type="int" line="686"/>
            <javadoc line="686">
                Value of the {@link #MONTH} field indicating the
                  thirteenth month of the year. Although &lt;code&gt;GregorianCalendar&lt;/code&gt;
                  does not use this value, lunar calendars do.                
            </javadoc>
            <declaration name="AM" type="int" line="693"/>
            <javadoc line="693">
                Value of the {@link #AM_PM} field indicating the
                  period of the day from midnight to just before noon.                
            </javadoc>
            <declaration name="PM" type="int" line="699"/>
            <javadoc line="699">
                Value of the {@link #AM_PM} field indicating the
                  period of the day from noon to just before midnight.                
            </javadoc>
            <declaration name="ALL_STYLES" type="int" line="705"/>
            <javadoc line="705">
                A style specifier for {@link #getDisplayNames(int,int,Locale)getDisplayNames} indicating names in all styles, such as
                  &quot;January&quot; and &quot;Jan&quot;.                
                <see>
                    #SHORT                    
                </see>
                <see>
                    #LONG                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="SHORT" type="int" line="716"/>
            <javadoc line="716">
                A style specifier for {@link #getDisplayName(int,int,Locale)getDisplayName} and {@link #getDisplayNames(int,int,Locale)getDisplayNames} indicating a short name, such as &quot;Jan&quot;.                
                <see>
                    #LONG                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="LONG" type="int" line="726"/>
            <javadoc line="726">
                A style specifier for {@link #getDisplayName(int,int,Locale)getDisplayName} and {@link #getDisplayNames(int,int,Locale)getDisplayNames} indicating a long name, such as &quot;January&quot;.                
                <see>
                    #SHORT                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="fields" type="int" line="747"/>
            <javadoc line="747">
                The calendar field values for the currently set time for this calendar.
                  This is an array of &lt;code&gt;FIELD_COUNT&lt;/code&gt; integers, with index values
                  &lt;code&gt;ERA&lt;/code&gt; through &lt;code&gt;DST_OFFSET&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="isSet" type="boolean" line="755"/>
            <javadoc line="755">
                The flags which tell if a specified calendar field for the calendar is set.
                  A new object has no fields set.  After the first call to a method
                  which generates the fields, they all remain set after that.
                  This is an array of &lt;code&gt;FIELD_COUNT&lt;/code&gt; booleans, with index values
                  &lt;code&gt;ERA&lt;/code&gt; through &lt;code&gt;DST_OFFSET&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="stamp" type="int" line="765"/>
            <javadoc line="765">
                Pseudo-time-stamps which specify when each field was set. There
                  are two special values, UNSET and COMPUTED. Values from
                  MINIMUM_USER_SET to Integer.MAX_VALUE are legal user set values.                
            </javadoc>
            <declaration name="time" type="long" line="772"/>
            <javadoc line="772">
                The currently set time for this calendar, expressed in milliseconds after
                  January 1, 1970, 0:00:00 GMT.                
                <see>
                    #isTimeSet                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="isTimeSet" type="boolean" line="780"/>
            <javadoc line="780">
                True if then the value of &lt;code&gt;time&lt;/code&gt; is valid.
                  The time is made invalid by a change to an item of &lt;code&gt;field[]&lt;/code&gt;.                
                <see>
                    #time                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="areFieldsSet" type="boolean" line="788"/>
            <javadoc line="788">
                True if &lt;code&gt;fields[]&lt;/code&gt; are in sync with the currently set time.
                  If false, then the next attempt to get the value of a field will
                  force a recomputation of all fields from the current value of
                  &lt;code&gt;time&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="areAllFieldsSet" type="boolean" line="797"/>
            <javadoc line="797">
                True if all fields have been set.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="lenient" type="boolean" line="803"/>
            <javadoc line="803">
                &lt;code&gt;True&lt;/code&gt; if this calendar allows out-of-range field values during computation
                  of &lt;code&gt;time&lt;/code&gt; from &lt;code&gt;fields[]&lt;/code&gt;.                
                <see>
                    #setLenient                    
                </see>
                <see>
                    #isLenient                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="zone" type="TimeZone" line="812"/>
            <javadoc line="812">
                The &lt;code&gt;TimeZone&lt;/code&gt; used by this calendar. &lt;code&gt;Calendar&lt;/code&gt;
                  uses the time zone data to translate between locale and GMT time.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="sharedZone" type="boolean" line="819"/>
            <javadoc line="819">
                &lt;code&gt;True&lt;/code&gt; if zone references to a shared TimeZone object.                
            </javadoc>
            <declaration name="firstDayOfWeek" type="int" line="824"/>
            <javadoc line="824">
                The first day of the week, with possible values &lt;code&gt;SUNDAY&lt;/code&gt;,
                  &lt;code&gt;MONDAY&lt;/code&gt;, etc.  This is a locale-dependent value.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="minimalDaysInFirstWeek" type="int" line="831"/>
            <javadoc line="831">
                The number of days required for the first week in a month or year,
                  with possible values from 1 to 7.  This is a locale-dependent value.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="cachedLocaleData" type="ConcurrentMap&lt;Locale,int[]&gt;" line="838"/>
            <javadoc line="838">
                Cache to hold the firstDayOfWeek and minimalDaysInFirstWeek
                  of a Locale.                
            </javadoc>
            <declaration name="UNSET" type="int" line="846"/>
            <javadoc line="846">
                The corresponding fields[] has no value.                
            </javadoc>
            <declaration name="COMPUTED" type="int" line="851"/>
            <javadoc line="851">
                The value of the corresponding fields[] has been calculated internally.                
            </javadoc>
            <declaration name="MINIMUM_USER_STAMP" type="int" line="856"/>
            <javadoc line="856">
                The value of the corresponding fields[] has been set externally. Stamp
                  values which are greater than 1 represents the (pseudo) time when the
                  corresponding fields[] value was set.                
            </javadoc>
            <declaration name="ALL_FIELDS" type="int" line="863"/>
            <javadoc line="863">
                The mask value that represents all of the fields.                
            </javadoc>
            <declaration name="nextStamp" type="int" line="868"/>
            <javadoc line="868">
                The next available value for &lt;code&gt;stamp[]&lt;/code&gt;, an internal array.
                  This actually should not be written out to the stream, and will probably
                  be removed from the stream in the near future.  In the meantime,
                  a value of &lt;code&gt;MINIMUM_USER_STAMP&lt;/code&gt; should be used.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="currentSerialVersion" type="int" line="885"/>
            <declaration name="serialVersionOnStream" type="int" line="887"/>
            <javadoc line="887">
                The version of the serialized data on the stream.  Possible values:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;0&lt;/b&gt; or not present on stream&lt;/dt&gt;
                  &lt;dd&gt;
                  JDK 1.1.5 or earlier.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;b&gt;1&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  JDK 1.1.6 or later.  Writes a correct &apos;time&apos; value
                  as well as compatible values for other fields.  This is a
                  transitional format.
                  &lt;/dd&gt;
                  &lt;/dl&gt;
                  When streaming out this class, the most recent format
                  and the highest allowable &lt;code&gt;serialVersionOnStream&lt;/code&gt;
                  is written.                
                <serial>
                                        
                </serial>
                <since>
                    JDK1.1.6                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="910"/>
            <declaration name="ERA_MASK" type="int" line="913"/>
            <declaration name="YEAR_MASK" type="int" line="914"/>
            <declaration name="MONTH_MASK" type="int" line="915"/>
            <declaration name="WEEK_OF_YEAR_MASK" type="int" line="916"/>
            <declaration name="WEEK_OF_MONTH_MASK" type="int" line="917"/>
            <declaration name="DAY_OF_MONTH_MASK" type="int" line="918"/>
            <declaration name="DATE_MASK" type="int" line="919"/>
            <declaration name="DAY_OF_YEAR_MASK" type="int" line="920"/>
            <declaration name="DAY_OF_WEEK_MASK" type="int" line="921"/>
            <declaration name="DAY_OF_WEEK_IN_MONTH_MASK" type="int" line="922"/>
            <declaration name="AM_PM_MASK" type="int" line="923"/>
            <declaration name="HOUR_MASK" type="int" line="924"/>
            <declaration name="HOUR_OF_DAY_MASK" type="int" line="925"/>
            <declaration name="MINUTE_MASK" type="int" line="926"/>
            <declaration name="SECOND_MASK" type="int" line="927"/>
            <declaration name="MILLISECOND_MASK" type="int" line="928"/>
            <declaration name="ZONE_OFFSET_MASK" type="int" line="929"/>
            <declaration name="DST_OFFSET_MASK" type="int" line="930"/>
            <javadoc line="932">
                Constructs a Calendar with the default time zone
                  and locale.                
                <see>
                    TimeZone#getDefault                    
                </see>
            </javadoc>
            <method name="Calendar" type="constructor" line="938"/>
            <javadoc line="943">
                Constructs a calendar with the specified time zone and locale.                
                <param>
                    zone the time zone to use                    
                </param>
                <param>
                    aLocale the locale for the week data                    
                </param>
            </javadoc>
            <method name="Calendar" type="constructor" line="950">
                <params>
                    <param name="zone" type="TimeZone"/>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="959">
                Gets a calendar using the default time zone and locale. The
                  &lt;code&gt;Calendar&lt;/code&gt; returned is based on the current time
                  in the default time zone with the default locale.                
                <return>
                    a Calendar.                    
                </return>
            </javadoc>
            <method name="getInstance" type="Calendar" line="967">
                <declaration name="cal" type="Calendar" line="968"/>
            </method>
            <javadoc line="973">
                Gets a calendar using the specified time zone and default locale.
                  The &lt;code&gt;Calendar&lt;/code&gt; returned is based on the current time
                  in the given time zone with the default locale.                
                <param>
                    zone the time zone to use                    
                </param>
                <return>
                    a Calendar.                    
                </return>
            </javadoc>
            <method name="getInstance" type="Calendar" line="982">
                <params>
                    <param name="zone" type="TimeZone"/>
                </params>
            </method>
            <javadoc line="986">
                Gets a calendar using the default time zone and specified locale.
                  The &lt;code&gt;Calendar&lt;/code&gt; returned is based on the current time
                  in the default time zone with the given locale.                
                <param>
                    aLocale the locale for the week data                    
                </param>
                <return>
                    a Calendar.                    
                </return>
            </javadoc>
            <method name="getInstance" type="Calendar" line="995">
                <params>
                    <param name="aLocale" type="Locale"/>
                </params>
                <declaration name="cal" type="Calendar" line="996"/>
            </method>
            <javadoc line="1001">
                Gets a calendar with the specified time zone and locale.
                  The &lt;code&gt;Calendar&lt;/code&gt; returned is based on the current time
                  in the given time zone with the given locale.                
                <param>
                    zone the time zone to use                    
                </param>
                <param>
                    aLocale the locale for the week data                    
                </param>
                <return>
                    a Calendar.                    
                </return>
            </javadoc>
            <method name="getInstance" type="Calendar" line="1012">
                <params>
                    <param name="zone" type="TimeZone"/>
                    <param name="aLocale" type="Locale"/>
                </params>
            </method>
            <method name="createCalendar" type="Calendar" line="1018">
                <params>
                    <param name="zone" type="TimeZone"/>
                    <param name="aLocale" type="Locale"/>
                </params>
                <comment line="1023">
                    Calendar type is not specified.                    
                </comment>
                <comment line="1024">
                    If the specified locale is a Thai locale,                    
                </comment>
                <comment line="1025">
                    returns a BuddhistCalendar instance.                    
                </comment>
                <comment line="1037">
                    Unsupported calendar type.                    
                </comment>
                <comment line="1038">
                    Use Gregorian calendar as a fallback.                    
                </comment>
                <declaration name="cal" type="Calendar" line="1019"/>
                <declaration name="caltype" type="String" line="1021"/>
                <scope line="1022">
                    <scope line="1027"/>
                    <scope line="1029"/>
                </scope>
                <scope line="1032"/>
                <scope line="1034"/>
                <scope line="1036"/>
            </method>
            <javadoc line="1045">
                Returns an array of all locales for which the &lt;code&gt;getInstance&lt;/code&gt;
                  methods of this class can return localized instances.
                  The array returned must contain at least a &lt;code&gt;Locale&lt;/code&gt;
                  instance equal to {@link java.util.Locale#US Locale.US}.                
                <return>
                    An array of locales for which localized
                      <code>Calendar</code> instances are available.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="1055"/>
            <method name="computeTime" type="void" line="1059"/>
            <javadoc line="1059">
                Converts the current calendar field values in {@link #fields fields[]}to the millisecond time value{@link #time}.                
                <see>
                    #complete()                    
                </see>
                <see>
                    #computeFields()                    
                </see>
            </javadoc>
            <method name="computeFields" type="void" line="1069"/>
            <javadoc line="1069">
                Converts the current millisecond time value {@link #time}to calendar field values in {@link #fields fields[]}.
                  This allows you to sync up the calendar field values with
                  a new time that is set for the calendar.  The time is &lt;em&gt;not&lt;/em&gt;
                  recomputed first; to recompute the time, then the fields, call the{@link #complete()} method.                
                <see>
                    #computeTime()                    
                </see>
            </javadoc>
            <javadoc line="1081">
                Returns a &lt;code&gt;Date&lt;/code&gt; object representing this
                  &lt;code&gt;Calendar&lt;/code&gt;&apos;s time value (millisecond offset from the &lt;a
                  href=&quot;#Epoch&quot;&gt;Epoch&lt;/a&gt;&quot;).                
                <return>
                    a <code>Date</code> representing the time value.                    
                </return>
                <see>
                    #setTime(Date)                    
                </see>
                <see>
                    #getTimeInMillis()                    
                </see>
            </javadoc>
            <method name="getTime" type="Date" line="1090"/>
            <javadoc line="1094">
                Sets this Calendar&apos;s time with the given &lt;code&gt;Date&lt;/code&gt;.
                  &lt;p&gt;
                  Note: Calling &lt;code&gt;setTime()&lt;/code&gt; with
                  &lt;code&gt;Date(Long.MAX_VALUE)&lt;/code&gt; or &lt;code&gt;Date(Long.MIN_VALUE)&lt;/code&gt;
                  may yield incorrect field values from &lt;code&gt;get()&lt;/code&gt;.                
                <param>
                    date the given Date.                    
                </param>
                <see>
                    #getTime()                    
                </see>
                <see>
                    #setTimeInMillis(long)                    
                </see>
            </javadoc>
            <method name="setTime" type="void" line="1105">
                <params>
                    <param name="date" type="Date"/>
                </params>
            </method>
            <javadoc line="1109">
                Returns this Calendar&apos;s time value in milliseconds.                
                <return>
                    the current time as UTC milliseconds from the epoch.                    
                </return>
                <see>
                    #getTime()                    
                </see>
                <see>
                    #setTimeInMillis(long)                    
                </see>
            </javadoc>
            <method name="getTimeInMillis" type="long" line="1116">
                <scope line="1117"/>
            </method>
            <javadoc line="1123">
                Sets this Calendar&apos;s current time from the given long value.                
                <param>
                    millis the new time in UTC milliseconds from the epoch.                    
                </param>
                <see>
                    #setTime(Date)                    
                </see>
                <see>
                    #getTimeInMillis()                    
                </see>
            </javadoc>
            <method name="setTimeInMillis" type="void" line="1130">
                <params>
                    <param name="millis" type="long"/>
                </params>
                <comment line="1131">
                    If we don&apos;t need to recalculate the calendar field values,                    
                </comment>
                <comment line="1132">
                    do nothing.                    
                </comment>
                <scope line="1134"/>
            </method>
            <javadoc line="1144">
                Returns the value of the given calendar field. In lenient mode,
                  all calendar fields are normalized. In non-lenient mode, all
                  calendar fields are validated and this method throws an
                  exception if any calendar fields have out-of-range values. The
                  normalization and validation are handled by the{@link #complete()} method, which process is calendar
                  system dependent.                
                <param>
                    field the given calendar field.                    
                </param>
                <return>
                    the value for the given calendar field.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the specified field is out of range
                      (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).                    
                </throws>
                <see>
                    #set(int,int)                    
                </see>
                <see>
                    #complete()                    
                </see>
            </javadoc>
            <method name="get" type="int" line="1161">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1166">
                Returns the value of the given calendar field. This method does
                  not involve normalization or validation of the field value.                
                <param>
                    field the given calendar field.                    
                </param>
                <return>
                    the value for the given calendar field.                    
                </return>
                <see>
                    #get(int)                    
                </see>
            </javadoc>
            <method name="internalGet" type="int" line="1175">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1179">
                Sets the value of the given calendar field. This method does
                  not affect any setting state of the field in this
                  &lt;code&gt;Calendar&lt;/code&gt; instance.                
                <throws>
                    IndexOutOfBoundsException if the specified field is out of range
                      (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).                    
                </throws>
                <see>
                    #areFieldsSet                    
                </see>
                <see>
                    #isTimeSet                    
                </see>
                <see>
                    #areAllFieldsSet                    
                </see>
                <see>
                    #set(int,int)                    
                </see>
            </javadoc>
            <method name="internalSet" type="void" line="1192">
                <params>
                    <param name="field" type="int"/>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="1196">
                Sets the given calendar field to the given value. The value is not
                  interpreted by this method regardless of the leniency mode.                
                <param>
                    field the given calendar field.                    
                </param>
                <param>
                    value the value to be set for the given calendar field.                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the specified field is out of range
                      (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
                      in non-lenient mode.                    
                </throws>
                <see>
                    #set(int,int,int)                    
                </see>
                <see>
                    #set(int,int,int,int,int)                    
                </see>
                <see>
                    #set(int,int,int,int,int,int)                    
                </see>
                <see>
                    #get(int)                    
                </see>
            </javadoc>
            <method name="set" type="void" line="1211">
                <params>
                    <param name="field" type="int"/>
                    <param name="value" type="int"/>
                </params>
                <comment line="1212">
                    If the fields are partially normalized, calculate all the                    
                </comment>
                <comment line="1213">
                    fields before changing any fields.                    
                </comment>
                <scope line="1214"/>
                <scope line="1222"/>
            </method>
            <javadoc line="1227">
                Sets the values for the calendar fields &lt;code&gt;YEAR&lt;/code&gt;,
                  &lt;code&gt;MONTH&lt;/code&gt;, and &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;.
                  Previous values of other calendar fields are retained.  If this is not desired,
                  call {@link #clear()} first.                
                <param>
                    year the value used to set the <code>YEAR</code> calendar field.                    
                </param>
                <param>
                    month the value used to set the <code>MONTH</code> calendar field.
                      Month value is 0-based. e.g., 0 for January.                    
                </param>
                <param>
                    date the value used to set the <code>DAY_OF_MONTH</code> calendar field.                    
                </param>
                <see>
                    #set(int,int)                    
                </see>
                <see>
                    #set(int,int,int,int,int)                    
                </see>
                <see>
                    #set(int,int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="set" type="void" line="1242">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                </params>
            </method>
            <javadoc line="1248">
                Sets the values for the calendar fields &lt;code&gt;YEAR&lt;/code&gt;,
                  &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;,
                  &lt;code&gt;HOUR_OF_DAY&lt;/code&gt;, and &lt;code&gt;MINUTE&lt;/code&gt;.
                  Previous values of other fields are retained.  If this is not desired,
                  call {@link #clear()} first.                
                <param>
                    year the value used to set the <code>YEAR</code> calendar field.                    
                </param>
                <param>
                    month the value used to set the <code>MONTH</code> calendar field.
                      Month value is 0-based. e.g., 0 for January.                    
                </param>
                <param>
                    date the value used to set the <code>DAY_OF_MONTH</code> calendar field.                    
                </param>
                <param>
                    hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field.                    
                </param>
                <param>
                    minute the value used to set the <code>MINUTE</code> calendar field.                    
                </param>
                <see>
                    #set(int,int)                    
                </see>
                <see>
                    #set(int,int,int)                    
                </see>
                <see>
                    #set(int,int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="set" type="void" line="1266">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                    <param name="hourOfDay" type="int"/>
                    <param name="minute" type="int"/>
                </params>
            </method>
            <javadoc line="1274">
                Sets the values for the fields &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;,
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;, &lt;code&gt;HOUR&lt;/code&gt;, &lt;code&gt;MINUTE&lt;/code&gt;, and
                  &lt;code&gt;SECOND&lt;/code&gt;.
                  Previous values of other fields are retained.  If this is not desired,
                  call {@link #clear()} first.                
                <param>
                    year the value used to set the <code>YEAR</code> calendar field.                    
                </param>
                <param>
                    month the value used to set the <code>MONTH</code> calendar field.
                      Month value is 0-based. e.g., 0 for January.                    
                </param>
                <param>
                    date the value used to set the <code>DAY_OF_MONTH</code> calendar field.                    
                </param>
                <param>
                    hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field.                    
                </param>
                <param>
                    minute the value used to set the <code>MINUTE</code> calendar field.                    
                </param>
                <param>
                    second the value used to set the <code>SECOND</code> calendar field.                    
                </param>
                <see>
                    #set(int,int)                    
                </see>
                <see>
                    #set(int,int,int)                    
                </see>
                <see>
                    #set(int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="set" type="void" line="1294">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                    <param name="hourOfDay" type="int"/>
                    <param name="minute" type="int"/>
                    <param name="second" type="int"/>
                </params>
            </method>
            <javadoc line="1303">
                Sets all the calendar field values and the time value
                  (millisecond offset from the &lt;a href=&quot;#Epoch&quot;&gt;Epoch&lt;/a&gt;) of
                  this &lt;code&gt;Calendar&lt;/code&gt; undefined. This means that {@link #isSet(int) isSet()} will return &lt;code&gt;false&lt;/code&gt; for all the
                  calendar fields, and the date and time calculations will treat
                  the fields as if they had never been set. A
                  &lt;code&gt;Calendar&lt;/code&gt; implementation class may use its specific
                  default field values for date/time calculations. For example,
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; uses 1970 if the
                  &lt;code&gt;YEAR&lt;/code&gt; field value is undefined.                
                <see>
                    #clear(int)                    
                </see>
            </javadoc>
            <method name="clear" type="void" line="1318">
                <comment line="1320">
                    UNSET == 0                    
                </comment>
                <scope line="1319"/>
            </method>
            <javadoc line="1327">
                Sets the given calendar field value and the time value
                  (millisecond offset from the &lt;a href=&quot;#Epoch&quot;&gt;Epoch&lt;/a&gt;) of
                  this &lt;code&gt;Calendar&lt;/code&gt; undefined. This means that {@link #isSet(int) isSet(field)} will return &lt;code&gt;false&lt;/code&gt;, and
                  the date and time calculations will treat the field as if it
                  had never been set. A &lt;code&gt;Calendar&lt;/code&gt; implementation
                  class may use the field&apos;s specific default value for date and
                  time calculations.
                  &lt;p&gt;The {@link #HOUR_OF_DAY}, {@link #HOUR} and {@link #AM_PM}fields are handled independently and the &lt;a
                  href=&quot;#time_resolution&quot;&gt;the resolution rule for the time of
                  day&lt;/a&gt; is applied. Clearing one of the fields doesn&apos;t reset
                  the hour of day value of this &lt;code&gt;Calendar&lt;/code&gt;. Use {@link #set(int,int) set(Calendar.HOUR_OF_DAY, 0)} to reset the hour
                  value.                
                <param>
                    field the calendar field to be cleared.                    
                </param>
                <see>
                    #clear()                    
                </see>
            </javadoc>
            <method name="clear" type="void" line="1349">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1358">
                Determines if the given calendar field has a value set,
                  including cases that the value has been set by internal fields
                  calculations triggered by a &lt;code&gt;get&lt;/code&gt; method call.                
                <return>
                    <code>true</code> if the given calendar field has a value set;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isSet" type="boolean" line="1367">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1371">
                Returns the string representation of the calendar
                  &lt;code&gt;field&lt;/code&gt; value in the given &lt;code&gt;style&lt;/code&gt; and
                  &lt;code&gt;locale&lt;/code&gt;.  If no string representation is
                  applicable, &lt;code&gt;null&lt;/code&gt; is returned. This method calls{@link Calendar#get(int) get(field)} to get the calendar
                  &lt;code&gt;field&lt;/code&gt; value if the string representation is
                  applicable to the given calendar &lt;code&gt;field&lt;/code&gt;.
                  &lt;p&gt;For example, if this &lt;code&gt;Calendar&lt;/code&gt; is a
                  &lt;code&gt;GregorianCalendar&lt;/code&gt; and its date is 2005-01-01, then
                  the string representation of the {@link #MONTH} field would be
                  &quot;January&quot; in the long style in an English locale or &quot;Jan&quot; in
                  the short style. However, no string representation would be
                  available for the {@link #DAY_OF_MONTH} field, and this method
                  would return &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;The default implementation supports the calendar fields for
                  which a {@link DateFormatSymbols} has names in the given
                  &lt;code&gt;locale&lt;/code&gt;.                
                <param>
                    fieldthe calendar field for which the string representation
                      is returned                    
                </param>
                <param>
                    stylethe style applied to the string representation; one of{@link #SHORT} or {@link #LONG}.                    
                </param>
                <param>
                    localethe locale for the string representation                    
                </param>
                <return>
                    the string representation of the given
                      <code>field</code> in the given <code>style</code>, or
                      <code>null</code> if no string representation is
                      applicable.                    
                </return>
                <exception>
                    IllegalArgumentExceptionif <code>field</code> or <code>style</code> is invalid,
                      or if this <code>Calendar</code> is non-lenient and any
                      of the calendar fields have invalid values                    
                </exception>
                <exception>
                    NullPointerExceptionif <code>locale</code> is null                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDisplayName" type="String" line="1412">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="1414"/>
                <declaration name="symbols" type="DateFormatSymbols" line="1418"/>
                <declaration name="strings" type="String[]" line="1419"/>
                <scope line="1420">
                    <declaration name="fieldValue" type="int" line="1421"/>
                    <scope line="1422"/>
                </scope>
            </method>
            <javadoc line="1429">
                Returns a &lt;code&gt;Map&lt;/code&gt; containing all names of the calendar
                  &lt;code&gt;field&lt;/code&gt; in the given &lt;code&gt;style&lt;/code&gt; and
                  &lt;code&gt;locale&lt;/code&gt; and their corresponding field values. For
                  example, if this &lt;code&gt;Calendar&lt;/code&gt; is a {@link GregorianCalendar}, the returned map would contain &quot;Jan&quot; to{@link #JANUARY}, &quot;Feb&quot; to {@link #FEBRUARY}, and so on, in the{@linkplain #SHORT short} style in an English locale.
                  &lt;p&gt;The values of other calendar fields may be taken into
                  account to determine a set of display names. For example, if
                  this &lt;code&gt;Calendar&lt;/code&gt; is a lunisolar calendar system and
                  the year value given by the {@link #YEAR} field has a leap
                  month, this method would return month names containing the leap
                  month name, and month names are mapped to their values specific
                  for the year.
                  &lt;p&gt;The default implementation supports display names contained in
                  a {@link DateFormatSymbols}. For example, if &lt;code&gt;field&lt;/code&gt;
                  is {@link #MONTH} and &lt;code&gt;style&lt;/code&gt; is {@link #ALL_STYLES}, this method returns a &lt;code&gt;Map&lt;/code&gt; containing
                  all strings returned by {@link DateFormatSymbols#getShortMonths()}and {@link DateFormatSymbols#getMonths()}.                
                <param>
                    fieldthe calendar field for which the display names are returned                    
                </param>
                <param>
                    stylethe style applied to the display names; one of {@link #SHORT}, {@link #LONG}, or {@link #ALL_STYLES}.                    
                </param>
                <param>
                    localethe locale for the display names                    
                </param>
                <return>
                    a <code>Map</code> containing all display names in
                      <code>style</code> and <code>locale</code> and their
                      field values, or <code>null</code> if no display names
                      are defined for <code>field</code>                    
                </return>
                <exception>
                    IllegalArgumentExceptionif <code>field</code> or <code>style</code> is invalid,
                      or if this <code>Calendar</code> is non-lenient and any
                      of the calendar fields have invalid values                    
                </exception>
                <exception>
                    NullPointerExceptionif <code>locale</code> is null                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDisplayNames" type="Map<String,Integer>" line="1472">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="1478">
                    ALL_STYLES                    
                </comment>
                <comment line="1494">
                    SHORT or LONG                    
                </comment>
                <scope line="1474"/>
                <scope line="1479">
                    <declaration name="shortNames" type="Map&lt;String,Integer&gt;" line="1480"/>
                    <scope line="1481"/>
                    <declaration name="longNames" type="Map&lt;String,Integer&gt;" line="1484"/>
                    <scope line="1485"/>
                    <scope line="1488"/>
                </scope>
            </method>
            <method name="getDisplayNamesImpl" type="Map<String,Integer>" line="1498">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="symbols" type="DateFormatSymbols" line="1499"/>
                <declaration name="strings" type="String[]" line="1500"/>
                <scope line="1501">
                    <declaration name="names" type="Map&lt;String,Integer&gt;" line="1502"/>
                    <scope line="1503">
                        <scope line="1504"/>
                    </scope>
                </scope>
            </method>
            <method name="checkDisplayNameParams" type="boolean" line="1515">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="minStyle" type="int"/>
                    <param name="maxStyle" type="int"/>
                    <param name="locale" type="Locale"/>
                    <param name="fieldMask" type="int"/>
                </params>
                <scope line="1517"/>
                <scope line="1520"/>
            </method>
            <method name="getFieldStrings" type="String[]" line="1526">
                <params>
                    <param name="field" type="int"/>
                    <param name="style" type="int"/>
                    <param name="symbols" type="DateFormatSymbols"/>
                </params>
                <declaration name="strings" type="String[]" line="1527"/>
            </method>
            <javadoc line="1548">
                Fills in any unset fields in the calendar fields. First, the {@link #computeTime()} method is called if the time value (millisecond offset
                  from the &lt;a href=&quot;#Epoch&quot;&gt;Epoch&lt;/a&gt;) has not been calculated from
                  calendar field values. Then, the {@link #computeFields()} method is
                  called to calculate all calendar field values.                
            </javadoc>
            <method name="complete" type="void" line="1556">
                <comment line="1560">
                    fills in unset fields                    
                </comment>
                <scope line="1559"/>
            </method>
            <javadoc line="1565">
                Returns whether the value of the specified calendar field has been set
                  externally by calling one of the setter methods rather than by the
                  internal time calculation.                
                <return>
                    <code>true</code> if the field has been set externally,
                      <code>false</code> otherwise.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if the specified
                      <code>field</code> is out of range
                      (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).                    
                </exception>
                <see>
                    #selectFields()                    
                </see>
                <see>
                    #setFieldsComputed(int)                    
                </see>
            </javadoc>
            <method name="isExternallySet" type="boolean" line="1578">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1582">
                Returns a field mask (bit mask) indicating all calendar fields that
                  have the state of externally or internally set.                
                <return>
                    a bit mask indicating set state fields                    
                </return>
            </javadoc>
            <method name="getSetStateFields" type="int" line="1588">
                <declaration name="mask" type="int" line="1589"/>
                <scope line="1590">
                    <scope line="1591"/>
                </scope>
            </method>
            <javadoc line="1598">
                Sets the state of the specified calendar fields to
                  &lt;em&gt;computed&lt;/em&gt;. This state means that the specified calendar fields
                  have valid values that have been set by internal time calculation
                  rather than by calling one of the setter methods.                
                <param>
                    fieldMask the field to be marked as computed.                    
                </param>
                <exception>
                    IndexOutOfBoundsException if the specified
                      <code>field</code> is out of range
                      (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).                    
                </exception>
                <see>
                    #isExternallySet(int)                    
                </see>
                <see>
                    #selectFields()                    
                </see>
            </javadoc>
            <method name="setFieldsComputed" type="void" line="1611">
                <params>
                    <param name="fieldMask" type="int"/>
                </params>
                <scope line="1612">
                    <scope line="1613"/>
                </scope>
                <scope line="1618">
                    <scope line="1619">
                        <scope line="1620"/>
                        <scope line="1623">
                            <scope line="1624"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1633">
                Sets the state of the calendar fields that are &lt;em&gt;not&lt;/em&gt; specified
                  by &lt;code&gt;fieldMask&lt;/code&gt; to &lt;em&gt;unset&lt;/em&gt;. If &lt;code&gt;fieldMask&lt;/code&gt;
                  specifies all the calendar fields, then the state of this
                  &lt;code&gt;Calendar&lt;/code&gt; becomes that all the calendar fields are in sync
                  with the time value (millisecond offset from the Epoch).                
                <param>
                    fieldMask the field mask indicating which calendar fields are in
                      sync with the time value.                    
                </param>
                <exception>
                    IndexOutOfBoundsException if the specified
                      <code>field</code> is out of range
                      (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).                    
                </exception>
                <see>
                    #isExternallySet(int)                    
                </see>
                <see>
                    #selectFields()                    
                </see>
            </javadoc>
            <method name="setFieldsNormalized" type="void" line="1648">
                <params>
                    <param name="fieldMask" type="int"/>
                </params>
                <comment line="1652">
                    UNSET == 0                    
                </comment>
                <comment line="1659">
                    Some or all of the fields are in sync with the                    
                </comment>
                <comment line="1660">
                    milliseconds, but the stamp values are not normalized yet.                    
                </comment>
                <scope line="1649">
                    <scope line="1650">
                        <scope line="1651"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1665">
                Returns whether the calendar fields are partially in sync with the time
                  value or fully in sync but not stamp values are not normalized yet.                
            </javadoc>
            <method name="isPartiallyNormalized" type="boolean" line="1669"/>
            <javadoc line="1673">
                Returns whether the calendar fields are fully in sync with the time
                  value.                
            </javadoc>
            <method name="isFullyNormalized" type="boolean" line="1677"/>
            <javadoc line="1681">
                Marks this Calendar as not sync&apos;d.                
            </javadoc>
            <method name="setUnnormalized" type="void" line="1684"/>
            <javadoc line="1688">
                Returns whether the specified &lt;code&gt;field&lt;/code&gt; is on in the
                  &lt;code&gt;fieldMask&lt;/code&gt;.                
            </javadoc>
            <method name="isFieldSet" type="boolean" line="1692">
                <params>
                    <param name="fieldMask" type="int"/>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="1696">
                Returns a field mask indicating which calendar field values
                  to be used to calculate the time value. The calendar fields are
                  returned as a bit mask, each bit of which corresponds to a field, i.e.,
                  the mask value of &lt;code&gt;field&lt;/code&gt; is &lt;code&gt;(1 &amp;lt;&amp;lt;
                  field)&lt;/code&gt;. For example, 0x26 represents the &lt;code&gt;YEAR&lt;/code&gt;,
                  &lt;code&gt;MONTH&lt;/code&gt;, and &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; fields (i.e., 0x26 is
                  equal to
                  &lt;code&gt;(1&amp;lt;&amp;lt;YEAR)|(1&amp;lt;&amp;lt;MONTH)|(1&amp;lt;&amp;lt;DAY_OF_MONTH))&lt;/code&gt;.
                  &lt;p&gt;This method supports the calendar fields resolution as described in
                  the class description. If the bit mask for a given field is on and its
                  field has not been set (i.e., &lt;code&gt;isSet(field)&lt;/code&gt; is
                  &lt;code&gt;false&lt;/code&gt;), then the default value of the field has to be
                  used, which case means that the field has been selected because the
                  selected combination involves the field.                
                <return>
                    a bit mask of selected fields                    
                </return>
                <see>
                    #isExternallySet(int)                    
                </see>
                <see>
                    #setInternallySetState(int)                    
                </see>
            </javadoc>
            <method name="selectFields" type="int" line="1717">
                <comment line="1718">
                    This implementation has been taken from the GregorianCalendar class.                    
                </comment>
                <comment line="1720">
                    The YEAR field must always be used regardless of its SET                    
                </comment>
                <comment line="1721">
                    state because YEAR is a mandatory field to determine the date                    
                </comment>
                <comment line="1722">
                    and the default value (EPOCH_YEAR) may change through the                    
                </comment>
                <comment line="1723">
                    normalization process.                    
                </comment>
                <comment line="1729">
                    Find the most recent group of fields specifying the day within                    
                </comment>
                <comment line="1730">
                    the year.  These may be any of the following combinations:                    
                </comment>
                <comment line="1731">
                    MONTH + DAY_OF_MONTH                    
                </comment>
                <comment line="1732">
                    MONTH + WEEK_OF_MONTH + DAY_OF_WEEK                    
                </comment>
                <comment line="1733">
                    MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK                    
                </comment>
                <comment line="1734">
                    DAY_OF_YEAR                    
                </comment>
                <comment line="1735">
                    WEEK_OF_YEAR + DAY_OF_WEEK                    
                </comment>
                <comment line="1736">
                    We look for the most recent of the fields in each group to determine                    
                </comment>
                <comment line="1737">
                    the age of the group.  For groups involving a week-related field such                    
                </comment>
                <comment line="1738">
                    as WEEK_OF_MONTH, DAY_OF_WEEK_IN_MONTH, or WEEK_OF_YEAR, both the                    
                </comment>
                <comment line="1739">
                    week-related field and the DAY_OF_WEEK must be set for the group as a                    
                </comment>
                <comment line="1740">
                    whole to be considered.  (See bug 4153860 - liu 7/24/98.)                    
                </comment>
                <comment line="1763">
                    No complete combination exists.  Look for WEEK_OF_MONTH,
                     DAY_OF_WEEK_IN_MONTH, or WEEK_OF_YEAR alone.  Treat DAY_OF_WEEK alone
                     as DAY_OF_WEEK_IN_MONTH.                    
                </comment>
                <comment line="1773">
                    Treat MONTH alone or no fields at all as DAY_OF_MONTH.  This may
                     result in bestStamp = domStamp = UNSET if no fields are set,
                     which indicates DAY_OF_MONTH.                    
                </comment>
                <comment line="1794">
                    When they are equal, give the priority to                    
                </comment>
                <comment line="1795">
                    WEEK_OF_MONTH for compatibility.                    
                </comment>
                <comment line="1826">
                    Find the best set of fields specifying the time of day.  There                    
                </comment>
                <comment line="1827">
                    are only two possibilities here; the HOUR_OF_DAY or the                    
                </comment>
                <comment line="1828">
                    AM_PM and the HOUR.                    
                </comment>
                <comment line="1833">
                    if bestStamp is still UNSET, then take HOUR or AM_PM. (See 4846659)                    
                </comment>
                <comment line="1838">
                    Hours                    
                </comment>
                <declaration name="fieldMask" type="int" line="1724"/>
                <scope line="1726"/>
                <declaration name="dowStamp" type="int" line="1741"/>
                <declaration name="monthStamp" type="int" line="1742"/>
                <declaration name="domStamp" type="int" line="1743"/>
                <declaration name="womStamp" type="int" line="1744"/>
                <declaration name="dowimStamp" type="int" line="1745"/>
                <declaration name="doyStamp" type="int" line="1746"/>
                <declaration name="woyStamp" type="int" line="1747"/>
                <declaration name="bestStamp" type="int" line="1749"/>
                <scope line="1750"/>
                <scope line="1753"/>
                <scope line="1756"/>
                <scope line="1759"/>
                <scope line="1767">
                    <scope line="1777"/>
                </scope>
                <scope line="1784">
                    <scope line="1786"/>
                    <scope line="1788">
                        <scope line="1790"/>
                        <scope line="1793">
                            <scope line="1796"/>
                            <scope line="1798"/>
                        </scope>
                        <scope line="1801">
                            <scope line="1802"/>
                            <scope line="1804">
                                <scope line="1806"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1812">
                    <scope line="1815"/>
                    <scope line="1817">
                        <scope line="1819"/>
                    </scope>
                </scope>
                <declaration name="hourOfDayStamp" type="int" line="1829"/>
                <declaration name="hourStamp" type="int" line="1830"/>
                <scope line="1834"/>
                <scope line="1839">
                    <scope line="1840"/>
                    <scope line="1842">
                        <scope line="1844"/>
                    </scope>
                </scope>
                <scope line="1849"/>
                <scope line="1852"/>
                <scope line="1855"/>
                <scope line="1858"/>
                <scope line="1861"/>
            </method>
            <javadoc line="1868">
                Returns the pseudo-time-stamp for two fields, given their
                  individual pseudo-time-stamps.  If either of the fields
                  is unset, then the aggregate is unset.  Otherwise, the
                  aggregate is the later of the two stamps.                
            </javadoc>
            <method name="aggregateStamp" type="int" line="1874">
                <params>
                    <param name="stamp_a" type="int"/>
                    <param name="stamp_b" type="int"/>
                </params>
                <scope line="1875"/>
            </method>
            <javadoc line="1881">
                Compares this &lt;code&gt;Calendar&lt;/code&gt; to the specified
                  &lt;code&gt;Object&lt;/code&gt;.  The result is &lt;code&gt;true&lt;/code&gt; if and only if
                  the argument is a &lt;code&gt;Calendar&lt;/code&gt; object of the same calendar
                  system that represents the same time value (millisecond offset from the
                  &lt;a href=&quot;#Epoch&quot;&gt;Epoch&lt;/a&gt;) under the same
                  &lt;code&gt;Calendar&lt;/code&gt; parameters as this object.
                  &lt;p&gt;The &lt;code&gt;Calendar&lt;/code&gt; parameters are the values represented
                  by the &lt;code&gt;isLenient&lt;/code&gt;, &lt;code&gt;getFirstDayOfWeek&lt;/code&gt;,
                  &lt;code&gt;getMinimalDaysInFirstWeek&lt;/code&gt; and &lt;code&gt;getTimeZone&lt;/code&gt;
                  methods. If there is any difference in those parameters
                  between the two &lt;code&gt;Calendar&lt;/code&gt;s, this method returns
                  &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt;Use the {@link #compareTo(Calendar) compareTo} method to
                  compare only the time values.                
                <param>
                    obj the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if this object is equal to <code>obj</code>;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1903">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="1914">
                    Note: GregorianCalendar.computeTime throws                    
                </comment>
                <comment line="1915">
                    IllegalArgumentException if the ERA value is invalid                    
                </comment>
                <comment line="1916">
                    even it&apos;s in lenient mode.                    
                </comment>
                <scope line="1906">
                    <declaration name="that" type="Calendar" line="1907"/>
                </scope>
                <scope line="1913"/>
            </method>
            <javadoc line="1921">
                Returns a hash code for this calendar.                
                <return>
                    a hash code value for this object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="1927">
                <comment line="1928">
                    &apos;otheritems&apos; represents the hash code for the previous versions.                    
                </comment>
                <declaration name="otheritems" type="int" line="1929"/>
                <declaration name="t" type="long" line="1933"/>
            </method>
            <javadoc line="1937">
                Returns whether this &lt;code&gt;Calendar&lt;/code&gt; represents a time
                  before the time represented by the specified
                  &lt;code&gt;Object&lt;/code&gt;. This method is equivalent to:
                  &lt;pre&gt;&lt;blockquote&gt;
                  compareTo(when) &lt; 0
                  &lt;/blockquote&gt;&lt;/pre&gt;
                  if and only if &lt;code&gt;when&lt;/code&gt; is a &lt;code&gt;Calendar&lt;/code&gt;
                  instance. Otherwise, the method returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    when the <code>Object</code> to be compared                    
                </param>
                <return>
                    <code>true</code> if the time of this
                      <code>Calendar</code> is before the time represented by
                      <code>when</code>; <code>false</code> otherwise.                    
                </return>
                <see>
                    #compareTo(Calendar)                    
                </see>
            </javadoc>
            <method name="before" type="boolean" line="1953">
                <params>
                    <param name="when" type="Object"/>
                </params>
            </method>
            <javadoc line="1958">
                Returns whether this &lt;code&gt;Calendar&lt;/code&gt; represents a time
                  after the time represented by the specified
                  &lt;code&gt;Object&lt;/code&gt;. This method is equivalent to:
                  &lt;pre&gt;&lt;blockquote&gt;
                  compareTo(when) &gt; 0
                  &lt;/blockquote&gt;&lt;/pre&gt;
                  if and only if &lt;code&gt;when&lt;/code&gt; is a &lt;code&gt;Calendar&lt;/code&gt;
                  instance. Otherwise, the method returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    when the <code>Object</code> to be compared                    
                </param>
                <return>
                    <code>true</code> if the time of this <code>Calendar</code> is
                      after the time represented by <code>when</code>; <code>false</code>
                      otherwise.                    
                </return>
                <see>
                    #compareTo(Calendar)                    
                </see>
            </javadoc>
            <method name="after" type="boolean" line="1974">
                <params>
                    <param name="when" type="Object"/>
                </params>
            </method>
            <javadoc line="1979">
                Compares the time values (millisecond offsets from the &lt;a
                  href=&quot;#Epoch&quot;&gt;Epoch&lt;/a&gt;) represented by two
                  &lt;code&gt;Calendar&lt;/code&gt; objects.                
                <param>
                    anotherCalendar the <code>Calendar</code> to be compared.                    
                </param>
                <return>
                    the value <code>0</code> if the time represented by the argument
                      is equal to the time represented by this <code>Calendar</code>; a value
                      less than <code>0</code> if the time of this <code>Calendar</code> is
                      before the time represented by the argument; and a value greater than
                      <code>0</code> if the time of this <code>Calendar</code> is after the
                      time represented by the argument.                    
                </return>
                <exception>
                    NullPointerException if the specified <code>Calendar</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if the time value of the
                      specified <code>Calendar</code> object can't be obtained due to
                      any invalid calendar values.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="1998">
                <params>
                    <param name="anotherCalendar" type="Calendar"/>
                </params>
            </method>
            <method name="add" type="void" line="2002"/>
            <javadoc line="2002">
                Adds or subtracts the specified amount of time to the given calendar field,
                  based on the calendar&apos;s rules. For example, to subtract 5 days from
                  the current time of the calendar, you can achieve it by calling:
                  &lt;p&gt;&lt;code&gt;add(Calendar.DAY_OF_MONTH, -5)&lt;/code&gt;.                
                <param>
                    field the calendar field.                    
                </param>
                <param>
                    amount the amount of date or time to be added to the field.                    
                </param>
                <see>
                    #roll(int,int)                    
                </see>
                <see>
                    #set(int,int)                    
                </see>
            </javadoc>
            <method name="roll" type="void" line="2015"/>
            <javadoc line="2015">
                Adds or subtracts (up/down) a single unit of time on the given time
                  field without changing larger fields. For example, to roll the current
                  date up by one day, you can achieve it by calling:
                  &lt;p&gt;roll(Calendar.DATE, true).
                  When rolling on the year or Calendar.YEAR field, it will roll the year
                  value in the range between 1 and the value returned by calling
                  &lt;code&gt;getMaximum(Calendar.YEAR)&lt;/code&gt;.
                  When rolling on the month or Calendar.MONTH field, other fields like
                  date might conflict and, need to be changed. For instance,
                  rolling the month on the date 01/31/96 will result in 02/29/96.
                  When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will
                  roll the hour value in the range between 0 and 23, which is zero-based.                
                <param>
                    field the time field.                    
                </param>
                <param>
                    up indicates if the value of the specified time field is to be
                      rolled up or rolled down. Use true if rolling up, false otherwise.                    
                </param>
                <see>
                    Calendar#add(int,int)                    
                </see>
                <see>
                    Calendar#set(int,int)                    
                </see>
            </javadoc>
            <javadoc line="2037">
                Adds the specified (signed) amount to the specified calendar field
                  without changing larger fields.  A negative amount means to roll
                  down.
                  &lt;p&gt;NOTE:  This default implementation on &lt;code&gt;Calendar&lt;/code&gt; just repeatedly calls the
                  version of {@link #roll(int,boolean) roll()} that rolls by one unit.  This may not
                  always do the right thing.  For example, if the &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field is 31,
                  rolling through February will leave it set to 28.  The &lt;code&gt;GregorianCalendar&lt;/code&gt;
                  version of this function takes care of this problem.  Other subclasses
                  should also provide overrides of this function that do the right thing.                
                <param>
                    field the calendar field.                    
                </param>
                <param>
                    amount the signed amount to add to the calendar <code>field</code>.                    
                </param>
                <since>
                    1.2                    
                </since>
                <see>
                    #roll(int,boolean)                    
                </see>
                <see>
                    #add(int,int)                    
                </see>
                <see>
                    #set(int,int)                    
                </see>
            </javadoc>
            <method name="roll" type="void" line="2057">
                <params>
                    <param name="field" type="int"/>
                    <param name="amount" type="int"/>
                </params>
                <scope line="2058"/>
                <scope line="2062"/>
            </method>
            <javadoc line="2068">
                Sets the time zone with the given time zone value.                
                <param>
                    value the given time zone.                    
                </param>
            </javadoc>
            <method name="setTimeZone" type="void" line="2074">
                <params>
                    <param name="value" type="TimeZone"/>
                </params>
                <comment line="2077">
                    Recompute the fields from the time using the new zone.  This also
                     works if isTimeSet is false (after a call to set()).  In that case
                     the time will be computed from the fields using the new zone, then
                     the fields will get recomputed from that.  Consider the sequence of
                     calls: cal.setTimeZone(EST); cal.set(HOUR, 1); cal.setTimeZone(PST).
                     Is cal set to 1 o&apos;clock EST or 1 o&apos;clock PST?  Answer: PST.  More
                     generally, a call to setTimeZone() affects calls to set() BEFORE AND
                     AFTER it up to the next call to complete().                    
                </comment>
            </method>
            <javadoc line="2089">
                Gets the time zone.                
                <return>
                    the time zone object associated with this calendar.                    
                </return>
            </javadoc>
            <method name="getTimeZone" type="TimeZone" line="2095">
                <comment line="2096">
                    If the TimeZone object is shared by other Calendar instances, then                    
                </comment>
                <comment line="2097">
                    create a clone.                    
                </comment>
                <scope line="2098"/>
            </method>
            <javadoc line="2105">
                Returns the time zone (without cloning).                
            </javadoc>
            <method name="getZone" type="TimeZone" line="2108"/>
            <javadoc line="2112">
                Sets the sharedZone flag to &lt;code&gt;shared&lt;/code&gt;.                
            </javadoc>
            <method name="setZoneShared" type="void" line="2115">
                <params>
                    <param name="shared" type="boolean"/>
                </params>
            </method>
            <javadoc line="2119">
                Specifies whether or not date/time interpretation is to be lenient.  With
                  lenient interpretation, a date such as &quot;February 942, 1996&quot; will be
                  treated as being equivalent to the 941st day after February 1, 1996.
                  With strict (non-lenient) interpretation, such dates will cause an exception to be
                  thrown. The default is lenient.                
                <param>
                    lenient <code>true</code> if the lenient mode is to be turned
                      on; <code>false</code> if it is to be turned off.                    
                </param>
                <see>
                    #isLenient()                    
                </see>
                <see>
                    java.text.DateFormat#setLenient                    
                </see>
            </javadoc>
            <method name="setLenient" type="void" line="2132">
                <params>
                    <param name="lenient" type="boolean"/>
                </params>
            </method>
            <javadoc line="2136">
                Tells whether date/time interpretation is to be lenient.                
                <return>
                    <code>true</code> if the interpretation mode of this calendar is lenient;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    #setLenient(boolean)                    
                </see>
            </javadoc>
            <method name="isLenient" type="boolean" line="2144"/>
            <javadoc line="2148">
                Sets what the first day of the week is; e.g., &lt;code&gt;SUNDAY&lt;/code&gt; in the U.S.,
                  &lt;code&gt;MONDAY&lt;/code&gt; in France.                
                <param>
                    value the given first day of the week.                    
                </param>
                <see>
                    #getFirstDayOfWeek()                    
                </see>
                <see>
                    #getMinimalDaysInFirstWeek()                    
                </see>
            </javadoc>
            <method name="setFirstDayOfWeek" type="void" line="2157">
                <params>
                    <param name="value" type="int"/>
                </params>
                <scope line="2158"/>
            </method>
            <javadoc line="2165">
                Gets what the first day of the week is; e.g., &lt;code&gt;SUNDAY&lt;/code&gt; in the U.S.,
                  &lt;code&gt;MONDAY&lt;/code&gt; in France.                
                <return>
                    the first day of the week.                    
                </return>
                <see>
                    #setFirstDayOfWeek(int)                    
                </see>
                <see>
                    #getMinimalDaysInFirstWeek()                    
                </see>
            </javadoc>
            <method name="getFirstDayOfWeek" type="int" line="2174"/>
            <javadoc line="2178">
                Sets what the minimal days required in the first week of the year are;
                  For example, if the first week is defined as one that contains the first
                  day of the first month of a year, call this method with value 1. If it
                  must be a full week, use value 7.                
                <param>
                    value the given minimal days required in the first week
                      of the year.                    
                </param>
                <see>
                    #getMinimalDaysInFirstWeek()                    
                </see>
            </javadoc>
            <method name="setMinimalDaysInFirstWeek" type="void" line="2189">
                <params>
                    <param name="value" type="int"/>
                </params>
                <scope line="2190"/>
            </method>
            <javadoc line="2197">
                Gets what the minimal days required in the first week of the year are;
                  e.g., if the first week is defined as one that contains the first day
                  of the first month of a year, this method returns 1. If
                  the minimal days required must be a full week, this method
                  returns 7.                
                <return>
                    the minimal days required in the first week of the year.                    
                </return>
                <see>
                    #setMinimalDaysInFirstWeek(int)                    
                </see>
            </javadoc>
            <method name="getMinimalDaysInFirstWeek" type="int" line="2208"/>
            <javadoc line="2212">
                Returns whether this {@code Calendar} supports week dates.
                  &lt;p&gt;The default implementation of this method returns {@code false}.                
                <return>
                    {@code true} if this {@code Calendar} supports week dates;{@code false} otherwise.                    
                </return>
                <see>
                    #getWeekYear()                    
                </see>
                <see>
                    #setWeekDate(int,int,int)                    
                </see>
                <see>
                    #getWeeksInWeekYear()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isWeekDateSupported" type="boolean" line="2224"/>
            <javadoc line="2228">
                Returns the week year represented by this {@code Calendar}. The
                  week year is in sync with the week cycle. The {@linkplain #getFirstDayOfWeek() first day of the first week} is the first
                  day of the week year.
                  &lt;p&gt;The default implementation of this method throws an{@link UnsupportedOperationException}.                
                <return>
                    the week year of this {@code Calendar}                    
                </return>
                <exception>
                    UnsupportedOperationExceptionif any week year numbering isn't supported
                      in this {@code Calendar}.                    
                </exception>
                <see>
                    #isWeekDateSupported()                    
                </see>
                <see>
                    #getFirstDayOfWeek()                    
                </see>
                <see>
                    #getMinimalDaysInFirstWeek()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getWeekYear" type="int" line="2246"/>
            <javadoc line="2250">
                Sets the date of this {@code Calendar} with the the given date
                  specifiers - week year, week of year, and day of week.
                  &lt;p&gt;Unlike the {@code set} method, all of the calendar fields
                  and {@code time} values are calculated upon return.
                  &lt;p&gt;If {@code weekOfYear} is out of the valid week-of-year range
                  in {@code weekYear}, the {@code weekYear} and {@codeweekOfYear} values are adjusted in lenient mode, or an {@codeIllegalArgumentException} is thrown in non-lenient mode.
                  &lt;p&gt;The default implementation of this method throws an{@code UnsupportedOperationException}.                
                <param>
                    weekYear   the week year                    
                </param>
                <param>
                    weekOfYear the week number based on {@code weekYear}                    
                </param>
                <param>
                    dayOfWeek  the day of week value: one of the constants
                      for the {@link #DAY_OF_WEEK} field: {@link #SUNDAY}, ..., {@link #SATURDAY}.                    
                </param>
                <exception>
                    IllegalArgumentExceptionif any of the given date specifiers is invalid
                      or any of the calendar fields are inconsistent
                      with the given date specifiers in non-lenient mode                    
                </exception>
                <exception>
                    UnsupportedOperationExceptionif any week year numbering isn't supported in this{@code Calendar}.                    
                </exception>
                <see>
                    #isWeekDateSupported()                    
                </see>
                <see>
                    #getFirstDayOfWeek()                    
                </see>
                <see>
                    #getMinimalDaysInFirstWeek()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setWeekDate" type="void" line="2282">
                <params>
                    <param name="weekYear" type="int"/>
                    <param name="weekOfYear" type="int"/>
                    <param name="dayOfWeek" type="int"/>
                </params>
            </method>
            <javadoc line="2286">
                Returns the number of weeks in the week year represented by this{@code Calendar}.
                  &lt;p&gt;The default implementation of this method throws an{@code UnsupportedOperationException}.                
                <return>
                    the number of weeks in the week year.                    
                </return>
                <exception>
                    UnsupportedOperationExceptionif any week year numbering isn't supported in this{@code Calendar}.                    
                </exception>
                <see>
                    #WEEK_OF_YEAR                    
                </see>
                <see>
                    #isWeekDateSupported()                    
                </see>
                <see>
                    #getWeekYear()                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getWeeksInWeekYear" type="int" line="2303"/>
            <method name="getMinimum" type="int" line="2307"/>
            <javadoc line="2307">
                Returns the minimum value for the given calendar field of this
                  &lt;code&gt;Calendar&lt;/code&gt; instance. The minimum value is defined as
                  the smallest value returned by the {@link #get(int) get} method
                  for any possible time value.  The minimum value depends on
                  calendar system specific parameters of the instance.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the minimum value for the given calendar field.                    
                </return>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="2324"/>
            <javadoc line="2324">
                Returns the maximum value for the given calendar field of this
                  &lt;code&gt;Calendar&lt;/code&gt; instance. The maximum value is defined as
                  the largest value returned by the {@link #get(int) get} method
                  for any possible time value. The maximum value depends on
                  calendar system specific parameters of the instance.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the maximum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getGreatestMinimum" type="int" line="2341"/>
            <javadoc line="2341">
                Returns the highest minimum value for the given calendar field
                  of this &lt;code&gt;Calendar&lt;/code&gt; instance. The highest minimum
                  value is defined as the largest value returned by {@link #getActualMinimum(int)} for any possible time value. The
                  greatest minimum value depends on calendar system specific
                  parameters of the instance.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the highest minimum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <method name="getLeastMaximum" type="int" line="2359"/>
            <javadoc line="2359">
                Returns the lowest maximum value for the given calendar field
                  of this &lt;code&gt;Calendar&lt;/code&gt; instance. The lowest maximum
                  value is defined as the smallest value returned by {@link #getActualMaximum(int)} for any possible time value. The least
                  maximum value depends on calendar system specific parameters of
                  the instance. For example, a &lt;code&gt;Calendar&lt;/code&gt; for the
                  Gregorian calendar system returns 28 for the
                  &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field, because the 28th is the last
                  day of the shortest month of this calendar, February in a
                  common year.                
                <param>
                    field the calendar field.                    
                </param>
                <return>
                    the lowest maximum value for the given calendar field.                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
            </javadoc>
            <javadoc line="2381">
                Returns the minimum value that the specified calendar field
                  could have, given the time value of this &lt;code&gt;Calendar&lt;/code&gt;.
                  &lt;p&gt;The default implementation of this method uses an iterative
                  algorithm to determine the actual minimum value for the
                  calendar field. Subclasses should, if possible, override this
                  with a more efficient implementation - in many cases, they can
                  simply return &lt;code&gt;getMinimum()&lt;/code&gt;.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the minimum of the given calendar field for the time
                      value of this <code>Calendar</code>                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMaximum(int)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getActualMinimum" type="int" line="2401">
                <params>
                    <param name="field" type="int"/>
                </params>
                <comment line="2405">
                    if we know that the minimum value is always the same, just return it                    
                </comment>
                <comment line="2410">
                    clone the calendar so we don&apos;t mess with the real one, and set it to                    
                </comment>
                <comment line="2411">
                    accept anything for the field values                    
                </comment>
                <comment line="2415">
                    now try each value from getLeastMaximum() to getMaximum() one by one until                    
                </comment>
                <comment line="2416">
                    we get a value that normalizes to another value.  The last value that                    
                </comment>
                <comment line="2417">
                    normalizes to itself is the actual minimum for the current date                    
                </comment>
                <declaration name="fieldValue" type="int" line="2402"/>
                <declaration name="endValue" type="int" line="2403"/>
                <scope line="2406"/>
                <declaration name="work" type="Calendar" line="2412"/>
                <declaration name="result" type="int" line="2418"/>
                <scope line="2420">
                    <scope line="2422"/>
                    <scope line="2424"/>
                </scope>
            </method>
            <javadoc line="2433">
                Returns the maximum value that the specified calendar field
                  could have, given the time value of this
                  &lt;code&gt;Calendar&lt;/code&gt;. For example, the actual maximum value of
                  the &lt;code&gt;MONTH&lt;/code&gt; field is 12 in some years, and 13 in
                  other years in the Hebrew calendar system.
                  &lt;p&gt;The default implementation of this method uses an iterative
                  algorithm to determine the actual maximum value for the
                  calendar field. Subclasses should, if possible, override this
                  with a more efficient implementation.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the maximum of the given calendar field for the time
                      value of this <code>Calendar</code>                    
                </return>
                <see>
                    #getMinimum(int)                    
                </see>
                <see>
                    #getMaximum(int)                    
                </see>
                <see>
                    #getGreatestMinimum(int)                    
                </see>
                <see>
                    #getLeastMaximum(int)                    
                </see>
                <see>
                    #getActualMinimum(int)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getActualMaximum" type="int" line="2455">
                <params>
                    <param name="field" type="int"/>
                </params>
                <comment line="2459">
                    if we know that the maximum value is always the same, just return it.                    
                </comment>
                <comment line="2464">
                    clone the calendar so we don&apos;t mess with the real one, and set it to                    
                </comment>
                <comment line="2465">
                    accept anything for the field values.                    
                </comment>
                <comment line="2469">
                    if we&apos;re counting weeks, set the day of the week to Sunday.  We know the                    
                </comment>
                <comment line="2470">
                    last week of a month or year will contain the first day of the week.                    
                </comment>
                <comment line="2474">
                    now try each value from getLeastMaximum() to getMaximum() one by one until                    
                </comment>
                <comment line="2475">
                    we get a value that normalizes to another value.  The last value that                    
                </comment>
                <comment line="2476">
                    normalizes to itself is the actual maximum for the current date                    
                </comment>
                <declaration name="fieldValue" type="int" line="2456"/>
                <declaration name="endValue" type="int" line="2457"/>
                <scope line="2460"/>
                <declaration name="work" type="Calendar" line="2466"/>
                <declaration name="result" type="int" line="2477"/>
                <scope line="2479">
                    <scope line="2481"/>
                    <scope line="2483"/>
                </scope>
            </method>
            <javadoc line="2492">
                Creates and returns a copy of this object.                
                <return>
                    a copy of this object.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="2498">
                <comment line="2514">
                    this shouldn&apos;t happen, since we are Cloneable                    
                </comment>
                <scope line="2499">
                    <declaration name="other" type="Calendar" line="2500"/>
                    <scope line="2505"/>
                </scope>
                <scope line="2513"/>
            </method>
            <declaration name="FIELD_NAME" type="String[]" line="2519"/>
            <javadoc line="2526">
                Returns the name of the specified calendar field.                
                <param>
                    field the calendar field                    
                </param>
                <return>
                    the calendar field name                    
                </return>
                <exception>
                    IndexOutOfBoundsException if <code>field</code> is negative,
                      equal to or greater then <code>FIELD_COUNT</code>.                    
                </exception>
            </javadoc>
            <method name="getFieldName" type="String" line="2534">
                <params>
                    <param name="field" type="int"/>
                </params>
            </method>
            <javadoc line="2538">
                Return a string representation of this calendar. This method
                  is intended to be used only for debugging purposes, and the
                  format of the returned string may vary between implementations.
                  The returned string may be empty but may not be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this calendar.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="2546">
                <comment line="2547">
                    NOTE: BuddhistCalendar.toString() interprets the string                    
                </comment>
                <comment line="2548">
                    produced by this method so that the Gregorian year number                    
                </comment>
                <comment line="2549">
                    is substituted by its B.E. year value. It relies on                    
                </comment>
                <comment line="2550">
                    &quot;...,YEAR=&lt;year&gt;,...&quot; or &quot;...,YEAR=?,...&quot;.                    
                </comment>
                <declaration name="buffer" type="StringBuilder" line="2551"/>
                <scope line="2560"/>
            </method>
            <method name="appendValue" type="void" line="2570">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="item" type="String"/>
                    <param name="valid" type="boolean"/>
                    <param name="value" type="long"/>
                </params>
                <scope line="2572"/>
                <scope line="2574"/>
            </method>
            <javadoc line="2579">
                Both firstDayOfWeek and minimalDaysInFirstWeek are locale-dependent.
                  They are used to figure out the week count for a specific date for
                  a given locale. These must be set when a Calendar is constructed.                
                <param>
                    desiredLocale the given locale.                    
                </param>
            </javadoc>
            <method name="setWeekCountData" type="void" line="2586">
                <params>
                    <param name="desiredLocale" type="Locale"/>
                </params>
                <comment line="2587">
                                        
                </comment>
                <comment line="2589">
                                        
                </comment>
                <declaration name="data" type="int[]" line="2588"/>
                <scope line="2589">
                    <declaration name="bundle" type="ResourceBundle" line="2590"/>
                </scope>
            </method>
            <javadoc line="2600">
                Recomputes the time and updates the status fields isTimeSet
                  and areFieldsSet.  Callers should check isTimeSet and only
                  call this method if isTimeSet is false.                
            </javadoc>
            <method name="updateTime" type="void" line="2605">
                <comment line="2607">
                    The areFieldsSet and areAllFieldsSet values are no longer                    
                </comment>
                <comment line="2608">
                    controlled here (as of 1.5).                    
                </comment>
            </method>
            <method name="compareTo" type="int" line="2612">
                <params>
                    <param name="t" type="long"/>
                </params>
                <declaration name="thisTime" type="long" line="2613"/>
            </method>
            <method name="getMillisOf" type="long" line="2617">
                <params>
                    <param name="calendar" type="Calendar"/>
                </params>
                <scope line="2618"/>
                <declaration name="cal" type="Calendar" line="2621"/>
            </method>
            <javadoc line="2626">
                Adjusts the stamp[] values before nextStamp overflow. nextStamp
                  is set to the next stamp value upon the return.                
            </javadoc>
            <method name="adjustStamp" type="void" line="2630">
                <declaration name="max" type="int" line="2631"/>
                <declaration name="newStamp" type="int" line="2632"/>
                <scope line="2634">
                    <declaration name="min" type="int" line="2635"/>
                    <scope line="2636">
                        <declaration name="v" type="int" line="2637"/>
                        <scope line="2638"/>
                        <scope line="2641"/>
                    </scope>
                    <scope line="2645"/>
                    <scope line="2648">
                        <scope line="2649"/>
                    </scope>
                    <scope line="2654"/>
                </scope>
            </method>
            <javadoc line="2661">
                Sets the WEEK_OF_MONTH and WEEK_OF_YEAR fields to new values with the
                  new parameter value if they have been calculated internally.                
            </javadoc>
            <method name="invalidateWeekFields" type="void" line="2666">
                <comment line="2672">
                    We have to check the new values of these fields after changing                    
                </comment>
                <comment line="2673">
                    firstDayOfWeek and/or minimalDaysInFirstWeek. If the field values                    
                </comment>
                <comment line="2674">
                    have been changed, then set the new values. (4822110)                    
                </comment>
                <scope line="2668"/>
                <declaration name="cal" type="Calendar" line="2675"/>
                <scope line="2680">
                    <declaration name="weekOfMonth" type="int" line="2681"/>
                    <scope line="2682"/>
                </scope>
                <scope line="2687">
                    <declaration name="weekOfYear" type="int" line="2688"/>
                    <scope line="2689"/>
                </scope>
            </method>
            <javadoc line="2695">
                Save the state of this object to a stream (i.e., serialize it).
                  Ideally, &lt;code&gt;Calendar&lt;/code&gt; would only write out its state data and
                  the current time, and not write any field data out, such as
                  &lt;code&gt;fields[]&lt;/code&gt;, &lt;code&gt;isTimeSet&lt;/code&gt;, &lt;code&gt;areFieldsSet&lt;/code&gt;,
                  and &lt;code&gt;isSet[]&lt;/code&gt;.  &lt;code&gt;nextStamp&lt;/code&gt; also should not be part
                  of the persistent state. Unfortunately, this didn&apos;t happen before JDK 1.1
                  shipped. To be compatible with JDK 1.1, we will always have to write out
                  the field values and state flags.  However, &lt;code&gt;nextStamp&lt;/code&gt; can be
                  removed from the serialization stream; this will probably happen in the
                  near future.                
            </javadoc>
            <method name="writeObject" type="void" line="2710">
                <params>
                    <param name="stream" type="ObjectOutputStream"/>
                </params>
                <comment line="2711">
                    Try to compute the time correctly, for the future (stream                    
                </comment>
                <comment line="2712">
                    version 2) in which we don&apos;t write out fields[] or isSet[].                    
                </comment>
                <comment line="2720">
                    If this Calendar has a ZoneInfo, save it and set a                    
                </comment>
                <comment line="2721">
                    SimpleTimeZone equivalent (as a single DST schedule) for                    
                </comment>
                <comment line="2722">
                    backward compatibility.                    
                </comment>
                <comment line="2733">
                    Write out the 1.1 FCS object.                    
                </comment>
                <comment line="2736">
                    Write out the ZoneInfo object                    
                </comment>
                <comment line="2737">
                    4802409: we write out even if it is null, a temporary workaround                    
                </comment>
                <comment line="2738">
                    the real fix for bug 4844924 in corba-iiop                    
                </comment>
                <scope line="2713">
                    <scope line="2714"/>
                    <scope line="2717"/>
                </scope>
                <declaration name="savedZone" type="TimeZone" line="2723"/>
                <scope line="2724">
                    <declaration name="stz" type="SimpleTimeZone" line="2725"/>
                    <scope line="2726"/>
                </scope>
                <scope line="2740"/>
            </method>
            <class name="CalendarAccessControlContext" line="2745">
                <declaration name="INSTANCE" type="AccessControlContext" line="2746"/>
                <scope line="2747">
                    <declaration name="perm" type="RuntimePermission" line="2748"/>
                    <declaration name="perms" type="PermissionCollection" line="2749"/>
                </scope>
            </class>
            <javadoc line="2757">
                Reconstitutes this object from a stream (i.e., deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="2762">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <comment line="2768">
                    Starting with version 2 (not implemented yet), we expect that                    
                </comment>
                <comment line="2769">
                    fields[], isSet[], isTimeSet, and areFieldsSet may not be                    
                </comment>
                <comment line="2770">
                    streamed out anymore.  We expect &apos;time&apos; to be correct.                    
                </comment>
                <comment line="2785">
                    If there&apos;s a ZoneInfo object, use it for zone.                    
                </comment>
                <comment line="2812">
                    If the deserialized object has a SimpleTimeZone, try to                    
                </comment>
                <comment line="2813">
                    replace it with a ZoneInfo equivalent (as of 1.4) in order                    
                </comment>
                <comment line="2814">
                    to be compatible with the SimpleTimeZone-based                    
                </comment>
                <comment line="2815">
                    implementation as much as possible.                    
                </comment>
                <declaration name="input" type="ObjectInputStream" line="2763"/>
                <scope line="2772"/>
                <scope line="2778"/>
                <declaration name="zi" type="ZoneInfo" line="2786"/>
                <scope line="2787">
                    <anonymous_class line="2789">
                        <method name="run" type="ZoneInfo" line="2790"/>
                    </anonymous_class>
                </scope>
                <scope line="2795">
                    <declaration name="e" type="Exception" line="2796"/>
                    <scope line="2797">
                        <scope line="2798"/>
                        <scope line="2800"/>
                        <scope line="2802"/>
                    </scope>
                </scope>
                <scope line="2808"/>
                <scope line="2816">
                    <declaration name="id" type="String" line="2817"/>
                    <declaration name="tz" type="TimeZone" line="2818"/>
                    <scope line="2819"/>
                </scope>
            </method>
        </class>
    </source>