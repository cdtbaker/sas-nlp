<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.text.DateFormat"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="sun.util.calendar.BaseCalendar"/>
        <import package="sun.util.calendar.CalendarDate"/>
        <import package="sun.util.calendar.CalendarSystem"/>
        <import package="sun.util.calendar.CalendarUtils"/>
        <import package="sun.util.calendar.Era"/>
        <import package="sun.util.calendar.Gregorian"/>
        <import package="sun.util.calendar.ZoneInfo"/>
        <class name="Date" line="41">
            <comment line="139">
                If cdate is null, then fastTime indicates the time in millis.
                 If cdate.isNormalized() is true, then fastTime and cdate are in
                 synch. Otherwise, fastTime is ignored, and cdate indicates the
                 time.                
            </comment>
            <comment line="147">
                Initialized just before the value is used. See parse().                
            </comment>
            <comment line="150">
                use serialVersionUID from modified java.util.Date for
                 interoperability with JDK1.1. The Date was modified to write
                 and read only the UTC time.                
            </comment>
            <comment line="1216">
                fastTime and the returned data are in sync upon return.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <implements interface="Cloneable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Date"/>
                </type_params>
            </implements>
            <javadoc line="41">
                The class &lt;code&gt;Date&lt;/code&gt; represents a specific instant
                  in time, with millisecond precision.
                  &lt;p&gt;
                  Prior to JDK&amp;nbsp;1.1, the class &lt;code&gt;Date&lt;/code&gt; had two additional
                  functions.  It allowed the interpretation of dates as year, month, day, hour,
                  minute, and second values.  It also allowed the formatting and parsing
                  of date strings.  Unfortunately, the API for these functions was not
                  amenable to internationalization.  As of JDK&amp;nbsp;1.1, the
                  &lt;code&gt;Calendar&lt;/code&gt; class should be used to convert between dates and time
                  fields and the &lt;code&gt;DateFormat&lt;/code&gt; class should be used to format and
                  parse date strings.
                  The corresponding methods in &lt;code&gt;Date&lt;/code&gt; are deprecated.
                  &lt;p&gt;
                  Although the &lt;code&gt;Date&lt;/code&gt; class is intended to reflect
                  coordinated universal time (UTC), it may not do so exactly,
                  depending on the host environment of the Java Virtual Machine.
                  Nearly all modern operating systems assume that 1&amp;nbsp;day&amp;nbsp;=
                  24&amp;nbsp;&amp;times;&amp;nbsp;60&amp;nbsp;&amp;times;&amp;nbsp;60&amp;nbsp;= 86400 seconds
                  in all cases. In UTC, however, about once every year or two there
                  is an extra second, called a &quot;leap second.&quot; The leap
                  second is always added as the last second of the day, and always
                  on December 31 or June 30. For example, the last minute of the
                  year 1995 was 61 seconds long, thanks to an added leap second.
                  Most computer clocks are not accurate enough to be able to reflect
                  the leap-second distinction.
                  &lt;p&gt;
                  Some computer standards are defined in terms of Greenwich mean
                  time (GMT), which is equivalent to universal time (UT).  GMT is
                  the &quot;civil&quot; name for the standard; UT is the
                  &quot;scientific&quot; name for the same standard. The
                  distinction between UTC and UT is that UTC is based on an atomic
                  clock and UT is based on astronomical observations, which for all
                  practical purposes is an invisibly fine hair to split. Because the
                  earth&apos;s rotation is not uniform (it slows down and speeds up
                  in complicated ways), UT does not always flow uniformly. Leap
                  seconds are introduced as needed into UTC so as to keep UTC within
                  0.9 seconds of UT1, which is a version of UT with certain
                  corrections applied. There are other time and date systems as
                  well; for example, the time scale used by the satellite-based
                  global positioning system (GPS) is synchronized to UTC but is
                  &lt;i&gt;not&lt;/i&gt; adjusted for leap seconds. An interesting source of
                  further information is the U.S. Naval Observatory, particularly
                  the Directorate of Time at:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &lt;a href=http://tycho.usno.navy.mil&gt;http://tycho.usno.navy.mil&lt;/a&gt;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  and their definitions of &quot;Systems of Time&quot; at:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &lt;a href=http://tycho.usno.navy.mil/systime.html&gt;http://tycho.usno.navy.mil/systime.html&lt;/a&gt;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  In all methods of class &lt;code&gt;Date&lt;/code&gt; that accept or return
                  year, month, date, hours, minutes, and seconds values, the
                  following representations are used:
                  &lt;ul&gt;
                  &lt;li&gt;A year &lt;i&gt;y&lt;/i&gt; is represented by the integer
                  &lt;i&gt;y&lt;/i&gt;&amp;nbsp;&lt;code&gt;-&amp;nbsp;1900&lt;/code&gt;.
                  &lt;li&gt;A month is represented by an integer from 0 to 11; 0 is January,
                  1 is February, and so forth; thus 11 is December.
                  &lt;li&gt;A date (day of month) is represented by an integer from 1 to 31
                  in the usual manner.
                  &lt;li&gt;An hour is represented by an integer from 0 to 23. Thus, the hour
                  from midnight to 1 a.m. is hour 0, and the hour from noon to 1
                  p.m. is hour 12.
                  &lt;li&gt;A minute is represented by an integer from 0 to 59 in the usual manner.
                  &lt;li&gt;A second is represented by an integer from 0 to 61; the values 60 and
                  61 occur only for leap seconds and even then only in Java
                  implementations that actually track leap seconds correctly. Because
                  of the manner in which leap seconds are currently introduced, it is
                  extremely unlikely that two leap seconds will occur in the same
                  minute, but this specification follows the date and time conventions
                  for ISO C.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  In all cases, arguments given to methods for these purposes need
                  not fall within the indicated ranges; for example, a date may be
                  specified as January 32 and is interpreted as meaning February 1.                
                <author>
                    James Gosling                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Alan Liu                    
                </author>
                <see>
                    java.text.DateFormat                    
                </see>
                <see>
                    java.util.Calendar                    
                </see>
                <see>
                    java.util.TimeZone                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="gcal" type="BaseCalendar" line="132"/>
            <declaration name="jcal" type="BaseCalendar" line="134"/>
            <declaration name="fastTime" type="long" line="136"/>
            <declaration name="cdate" type="BaseCalendar.Date" line="144"/>
            <declaration name="defaultCenturyStart" type="int" line="147"/>
            <declaration name="serialVersionUID" type="long" line="153"/>
            <javadoc line="155">
                Allocates a &lt;code&gt;Date&lt;/code&gt; object and initializes it so that
                  it represents the time at which it was allocated, measured to the
                  nearest millisecond.                
                <see>
                    java.lang.System#currentTimeMillis()                    
                </see>
            </javadoc>
            <method name="Date" type="constructor" line="162"/>
            <javadoc line="166">
                Allocates a &lt;code&gt;Date&lt;/code&gt; object and initializes it to
                  represent the specified number of milliseconds since the
                  standard base time known as &quot;the epoch&quot;, namely January 1,
                  1970, 00:00:00 GMT.                
                <param>
                    date   the milliseconds since January 1, 1970, 00:00:00 GMT.                    
                </param>
                <see>
                    java.lang.System#currentTimeMillis()                    
                </see>
            </javadoc>
            <method name="Date" type="constructor" line="175">
                <params>
                    <param name="date" type="long"/>
                </params>
            </method>
            <javadoc line="179">
                Allocates a &lt;code&gt;Date&lt;/code&gt; object and initializes it so that
                  it represents midnight, local time, at the beginning of the day
                  specified by the &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and
                  &lt;code&gt;date&lt;/code&gt; arguments.                
                <param>
                    year    the year minus 1900.                    
                </param>
                <param>
                    month   the month between 0-11.                    
                </param>
                <param>
                    date    the day of the month between 1-31.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(year + 1900, month, date)&lt;/code&gt;
                      or &lt;code&gt;GregorianCalendar(year + 1900, month, date)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="Date" type="constructor" line="194">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                </params>
            </method>
            <javadoc line="198">
                Allocates a &lt;code&gt;Date&lt;/code&gt; object and initializes it so that
                  it represents the instant at the start of the minute specified by
                  the &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;,
                  &lt;code&gt;hrs&lt;/code&gt;, and &lt;code&gt;min&lt;/code&gt; arguments, in the local
                  time zone.                
                <param>
                    year    the year minus 1900.                    
                </param>
                <param>
                    month   the month between 0-11.                    
                </param>
                <param>
                    date    the day of the month between 1-31.                    
                </param>
                <param>
                    hrs     the hours between 0-23.                    
                </param>
                <param>
                    min     the minutes between 0-59.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(year + 1900, month, date,
                      hrs, min)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900,
                      month, date, hrs, min)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="Date" type="constructor" line="217">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                    <param name="hrs" type="int"/>
                    <param name="min" type="int"/>
                </params>
            </method>
            <javadoc line="221">
                Allocates a &lt;code&gt;Date&lt;/code&gt; object and initializes it so that
                  it represents the instant at the start of the second specified
                  by the &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;,
                  &lt;code&gt;hrs&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, and &lt;code&gt;sec&lt;/code&gt; arguments,
                  in the local time zone.                
                <param>
                    year    the year minus 1900.                    
                </param>
                <param>
                    month   the month between 0-11.                    
                </param>
                <param>
                    date    the day of the month between 1-31.                    
                </param>
                <param>
                    hrs     the hours between 0-23.                    
                </param>
                <param>
                    min     the minutes between 0-59.                    
                </param>
                <param>
                    sec     the seconds between 0-59.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(year + 1900, month, date,
                      hrs, min, sec)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900,
                      month, date, hrs, min, sec)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="Date" type="constructor" line="241">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                    <param name="hrs" type="int"/>
                    <param name="min" type="int"/>
                    <param name="sec" type="int"/>
                </params>
                <comment line="244">
                    month is 0-based. So we have to normalize month to support Long.MAX_VALUE.                    
                </comment>
                <declaration name="y" type="int" line="242"/>
                <scope line="244"/>
                <scope line="247"/>
                <declaration name="cal" type="BaseCalendar" line="251"/>
            </method>
            <javadoc line="258">
                Allocates a &lt;code&gt;Date&lt;/code&gt; object and initializes it so that
                  it represents the date and time indicated by the string
                  &lt;code&gt;s&lt;/code&gt;, which is interpreted as if by the{@link Date#parse} method.                
                <param>
                    s   a string representation of the date.                    
                </param>
                <see>
                    java.text.DateFormat                    
                </see>
                <see>
                    java.util.Date#parse(java.lang.String)                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;DateFormat.parse(String s)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="Date" type="constructor" line="271">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="275">
                Return a copy of this object.                
            </javadoc>
            <method name="clone" type="Object" line="278">
                <comment line="286">
                    Won&apos;t happen                    
                </comment>
                <declaration name="d" type="Date" line="279"/>
                <scope line="280">
                    <scope line="282"/>
                </scope>
                <scope line="285"/>
            </method>
            <javadoc line="289">
                Determines the date and time based on the arguments. The
                  arguments are interpreted as a year, month, day of the month,
                  hour of the day, minute within the hour, and second within the
                  minute, exactly as for the &lt;tt&gt;Date&lt;/tt&gt; constructor with six
                  arguments, except that the arguments are interpreted relative
                  to UTC rather than to the local time zone. The time indicated is
                  returned represented as the distance, measured in milliseconds,
                  of that time from the epoch (00:00:00 GMT on January 1, 1970).                
                <param>
                    year    the year minus 1900.                    
                </param>
                <param>
                    month   the month between 0-11.                    
                </param>
                <param>
                    date    the day of the month between 1-31.                    
                </param>
                <param>
                    hrs     the hours between 0-23.                    
                </param>
                <param>
                    min     the minutes between 0-59.                    
                </param>
                <param>
                    sec     the seconds between 0-59.                    
                </param>
                <return>
                    the number of milliseconds since January 1, 1970, 00:00:00 GMT for
                      the date and time specified by the arguments.                    
                </return>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(year + 1900, month, date,
                      hrs, min, sec)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900,
                      month, date, hrs, min, sec)&lt;/code&gt;, using a UTC
                      &lt;code&gt;TimeZone&lt;/code&gt;, followed by &lt;code&gt;Calendar.getTime().getTime()&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="UTC" type="long" line="316">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                    <param name="hrs" type="int"/>
                    <param name="min" type="int"/>
                    <param name="sec" type="int"/>
                </params>
                <comment line="319">
                    month is 0-based. So we have to normalize month to support Long.MAX_VALUE.                    
                </comment>
                <comment line="332">
                    Use a Date instance to perform normalization. Its fastTime
                     is the UTC value after the normalization.                    
                </comment>
                <declaration name="y" type="int" line="317"/>
                <scope line="319"/>
                <scope line="322"/>
                <declaration name="m" type="int" line="326"/>
                <declaration name="cal" type="BaseCalendar" line="327"/>
                <declaration name="udate" type="BaseCalendar.Date" line="328"/>
                <declaration name="d" type="Date" line="333"/>
            </method>
            <javadoc line="338">
                Attempts to interpret the string &lt;tt&gt;s&lt;/tt&gt; as a representation
                  of a date and time. If the attempt is successful, the time
                  indicated is returned represented as the distance, measured in
                  milliseconds, of that time from the epoch (00:00:00 GMT on
                  January 1, 1970). If the attempt fails, an
                  &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; is thrown.
                  &lt;p&gt;
                  It accepts many syntaxes; in particular, it recognizes the IETF
                  standard date syntax: &quot;Sat, 12 Aug 1995 13:30:00 GMT&quot;. It also
                  understands the continental U.S. time-zone abbreviations, but for
                  general use, a time-zone offset should be used: &quot;Sat, 12 Aug 1995
                  13:30:00 GMT+0430&quot; (4 hours, 30 minutes west of the Greenwich
                  meridian). If no time zone is specified, the local time zone is
                  assumed. GMT and UTC are considered equivalent.
                  &lt;p&gt;
                  The string &lt;tt&gt;s&lt;/tt&gt; is processed from left to right, looking for
                  data of interest. Any material in &lt;tt&gt;s&lt;/tt&gt; that is within the
                  ASCII parenthesis characters &lt;tt&gt;(&lt;/tt&gt; and &lt;tt&gt;)&lt;/tt&gt; is ignored.
                  Parentheses may be nested. Otherwise, the only characters permitted
                  within &lt;tt&gt;s&lt;/tt&gt; are these ASCII characters:
                  &lt;blockquote&gt;&lt;pre&gt;
                  abcdefghijklmnopqrstuvwxyz
                  ABCDEFGHIJKLMNOPQRSTUVWXYZ
                  0123456789,+-:/&lt;/pre&gt;&lt;/blockquote&gt;
                  and whitespace characters.&lt;p&gt;
                  A consecutive sequence of decimal digits is treated as a decimal
                  number:&lt;ul&gt;
                  &lt;li&gt;If a number is preceded by &lt;tt&gt;+&lt;/tt&gt; or &lt;tt&gt;-&lt;/tt&gt; and a year
                  has already been recognized, then the number is a time-zone
                  offset. If the number is less than 24, it is an offset measured
                  in hours. Otherwise, it is regarded as an offset in minutes,
                  expressed in 24-hour time format without punctuation. A
                  preceding &lt;tt&gt;-&lt;/tt&gt; means a westward offset. Time zone offsets
                  are always relative to UTC (Greenwich). Thus, for example,
                  &lt;tt&gt;-5&lt;/tt&gt; occurring in the string would mean &quot;five hours west
                  of Greenwich&quot; and &lt;tt&gt;+0430&lt;/tt&gt; would mean &quot;four hours and
                  thirty minutes east of Greenwich.&quot; It is permitted for the
                  string to specify &lt;tt&gt;GMT&lt;/tt&gt;, &lt;tt&gt;UT&lt;/tt&gt;, or &lt;tt&gt;UTC&lt;/tt&gt;
                  redundantly-for example, &lt;tt&gt;GMT-5&lt;/tt&gt; or &lt;tt&gt;utc+0430&lt;/tt&gt;.
                  &lt;li&gt;The number is regarded as a year number if one of the
                  following conditions is true:
                  &lt;ul&gt;
                  &lt;li&gt;The number is equal to or greater than 70 and followed by a
                  space, comma, slash, or end of string
                  &lt;li&gt;The number is less than 70, and both a month and a day of
                  the month have already been recognized&lt;/li&gt;
                  &lt;/ul&gt;
                  If the recognized year number is less than 100, it is
                  interpreted as an abbreviated year relative to a century of
                  which dates are within 80 years before and 19 years after
                  the time when the Date class is initialized.
                  After adjusting the year number, 1900 is subtracted from
                  it. For example, if the current year is 1999 then years in
                  the range 19 to 99 are assumed to mean 1919 to 1999, while
                  years from 0 to 18 are assumed to mean 2000 to 2018.  Note
                  that this is slightly different from the interpretation of
                  years less than 100 that is used in {@link java.text.SimpleDateFormat}.
                  &lt;li&gt;If the number is followed by a colon, it is regarded as an hour,
                  unless an hour has already been recognized, in which case it is
                  regarded as a minute.
                  &lt;li&gt;If the number is followed by a slash, it is regarded as a month
                  (it is decreased by 1 to produce a number in the range &lt;tt&gt;0&lt;/tt&gt;
                  to &lt;tt&gt;11&lt;/tt&gt;), unless a month has already been recognized, in
                  which case it is regarded as a day of the month.
                  &lt;li&gt;If the number is followed by whitespace, a comma, a hyphen, or
                  end of string, then if an hour has been recognized but not a
                  minute, it is regarded as a minute; otherwise, if a minute has
                  been recognized but not a second, it is regarded as a second;
                  otherwise, it is regarded as a day of the month. &lt;/ul&gt;&lt;p&gt;
                  A consecutive sequence of letters is regarded as a word and treated
                  as follows:&lt;ul&gt;
                  &lt;li&gt;A word that matches &lt;tt&gt;AM&lt;/tt&gt;, ignoring case, is ignored (but
                  the parse fails if an hour has not been recognized or is less
                  than &lt;tt&gt;1&lt;/tt&gt; or greater than &lt;tt&gt;12&lt;/tt&gt;).
                  &lt;li&gt;A word that matches &lt;tt&gt;PM&lt;/tt&gt;, ignoring case, adds &lt;tt&gt;12&lt;/tt&gt;
                  to the hour (but the parse fails if an hour has not been
                  recognized or is less than &lt;tt&gt;1&lt;/tt&gt; or greater than &lt;tt&gt;12&lt;/tt&gt;).
                  &lt;li&gt;Any word that matches any prefix of &lt;tt&gt;SUNDAY, MONDAY, TUESDAY,
                  WEDNESDAY, THURSDAY, FRIDAY&lt;/tt&gt;, or &lt;tt&gt;SATURDAY&lt;/tt&gt;, ignoring
                  case, is ignored. For example, &lt;tt&gt;sat, Friday, TUE&lt;/tt&gt;, and
                  &lt;tt&gt;Thurs&lt;/tt&gt; are ignored.
                  &lt;li&gt;Otherwise, any word that matches any prefix of &lt;tt&gt;JANUARY,
                  FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER,
                  OCTOBER, NOVEMBER&lt;/tt&gt;, or &lt;tt&gt;DECEMBER&lt;/tt&gt;, ignoring case, and
                  considering them in the order given here, is recognized as
                  specifying a month and is converted to a number (&lt;tt&gt;0&lt;/tt&gt; to
                  &lt;tt&gt;11&lt;/tt&gt;). For example, &lt;tt&gt;aug, Sept, april&lt;/tt&gt;, and
                  &lt;tt&gt;NOV&lt;/tt&gt; are recognized as months. So is &lt;tt&gt;Ma&lt;/tt&gt;, which
                  is recognized as &lt;tt&gt;MARCH&lt;/tt&gt;, not &lt;tt&gt;MAY&lt;/tt&gt;.
                  &lt;li&gt;Any word that matches &lt;tt&gt;GMT, UT&lt;/tt&gt;, or &lt;tt&gt;UTC&lt;/tt&gt;, ignoring
                  case, is treated as referring to UTC.
                  &lt;li&gt;Any word that matches &lt;tt&gt;EST, CST, MST&lt;/tt&gt;, or &lt;tt&gt;PST&lt;/tt&gt;,
                  ignoring case, is recognized as referring to the time zone in
                  North America that is five, six, seven, or eight hours west of
                  Greenwich, respectively. Any word that matches &lt;tt&gt;EDT, CDT,
                  MDT&lt;/tt&gt;, or &lt;tt&gt;PDT&lt;/tt&gt;, ignoring case, is recognized as
                  referring to the same time zone, respectively, during daylight
                  saving time.&lt;/ul&gt;&lt;p&gt;
                  Once the entire string s has been scanned, it is converted to a time
                  result in one of two ways. If a time zone or time-zone offset has been
                  recognized, then the year, month, day of month, hour, minute, and
                  second are interpreted in UTC and then the time-zone offset is
                  applied. Otherwise, the year, month, day of month, hour, minute, and
                  second are interpreted in the local time zone.                
                <param>
                    s   a string to be parsed as a date.                    
                </param>
                <return>
                    the number of milliseconds since January 1, 1970, 00:00:00 GMT
                      represented by the string argument.                    
                </return>
                <see>
                    java.text.DateFormat                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;DateFormat.parse(String s)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="parse" type="long" line="452">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="477">
                    skip comments                    
                </comment>
                <comment line="496">
                    timezone offset                    
                </comment>
                <comment line="498">
                    EG. &quot;GMT-3&quot;                    
                </comment>
                <comment line="500">
                    eg &quot;GMT-0430&quot;                    
                </comment>
                <comment line="501">
                    plus means east of GMT                    
                </comment>
                <comment line="510">
                    year = n &lt; 1900 ? n : n - 1900;                    
                </comment>
                <comment line="536">
                    Handle two-digit years &lt; 70 (70-99 handled above).                    
                </comment>
                <comment line="559">
                    pm                    
                </comment>
                <comment line="564">
                    am                    
                </comment>
                <comment line="569">
                    month!                    
                </comment>
                <comment line="587">
                    Parse 2-digit years within the correct default century.                    
                </comment>
                <comment line="604">
                    no time zone specified, have to use local                    
                </comment>
                <comment line="610">
                    no time zone                    
                </comment>
                <comment line="615">
                    syntax error                    
                </comment>
                <declaration name="year" type="int" line="453"/>
                <declaration name="mon" type="int" line="454"/>
                <declaration name="mday" type="int" line="455"/>
                <declaration name="hour" type="int" line="456"/>
                <declaration name="min" type="int" line="457"/>
                <declaration name="sec" type="int" line="458"/>
                <declaration name="millis" type="int" line="459"/>
                <declaration name="c" type="int" line="460"/>
                <declaration name="i" type="int" line="461"/>
                <declaration name="n" type="int" line="462"/>
                <declaration name="wst" type="int" line="463"/>
                <declaration name="tzoffset" type="int" line="464"/>
                <declaration name="prevc" type="int" line="465"/>
                <scope line="467">
                    <declaration name="limit" type="int" line="470"/>
                    <scope line="471">
                        <scope line="476">
                            <declaration name="depth" type="int" line="477"/>
                            <scope line="478"/>
                        </scope>
                        <scope line="488">
                            <scope line="490"/>
                            <scope line="494"/>
                        </scope>
                        <scope line="543">
                            <declaration name="st" type="int" line="544"/>
                            <scope line="545"/>
                            <declaration name="k" type="int" line="553"/>
                            <scope line="555">
                                <declaration name="action" type="int" line="556"/>
                                <scope line="557">
                                    <scope line="558"/>
                                    <scope line="563"/>
                                    <scope line="568"/>
                                    <scope line="573"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="587">
                        <scope line="588">
                            <scope line="589"/>
                        </scope>
                    </scope>
                    <declaration name="cal" type="BaseCalendar" line="602"/>
                    <scope line="603">
                        <declaration name="ldate" type="BaseCalendar.Date" line="604"/>
                    </scope>
                    <declaration name="udate" type="BaseCalendar.Date" line="609"/>
                </scope>
            </method>
            <declaration name="wtb" type="String" line="617"/>
            <declaration name="ttb" type="int" line="626"/>
            <javadoc line="636">
                Returns a value that is the result of subtracting 1900 from the
                  year that contains or begins with the instant in time represented
                  by this &lt;code&gt;Date&lt;/code&gt; object, as interpreted in the local
                  time zone.                
                <return>
                    the year represented by this date, minus 1900.                    
                </return>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.get(Calendar.YEAR) - 1900&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="getYear" type="int" line="648"/>
            <javadoc line="652">
                Sets the year of this &lt;tt&gt;Date&lt;/tt&gt; object to be the specified
                  value plus 1900. This &lt;code&gt;Date&lt;/code&gt; object is modified so
                  that it represents a point in time within the specified year,
                  with the month, date, hour, minute, and second the same as
                  before, as interpreted in the local time zone. (Of course, if
                  the date was February 29, for example, and the year is set to a
                  non-leap year, then the new date will be treated as if it were
                  on March 1.)                
                <param>
                    year    the year value.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(Calendar.YEAR, year + 1900)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="setYear" type="void" line="668">
                <params>
                    <param name="year" type="int"/>
                </params>
            </method>
            <javadoc line="672">
                Returns a number representing the month that contains or begins
                  with the instant in time represented by this &lt;tt&gt;Date&lt;/tt&gt; object.
                  The value returned is between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;11&lt;/code&gt;,
                  with the value &lt;code&gt;0&lt;/code&gt; representing January.                
                <return>
                    the month represented by this date.                    
                </return>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.get(Calendar.MONTH)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="getMonth" type="int" line="684">
                <comment line="686">
                    adjust 1-based to 0-based                    
                </comment>
            </method>
            <javadoc line="688">
                Sets the month of this date to the specified value. This
                  &lt;tt&gt;Date&lt;/tt&gt; object is modified so that it represents a point
                  in time within the specified month, with the year, date, hour,
                  minute, and second the same as before, as interpreted in the
                  local time zone. If the date was October 31, for example, and
                  the month is set to June, then the new date will be treated as
                  if it were on July 1, because June has only 30 days.                
                <param>
                    month   the month value between 0-11.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(Calendar.MONTH, int month)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="setMonth" type="void" line="703">
                <params>
                    <param name="month" type="int"/>
                </params>
                <comment line="717">
                    adjust 0-based to 1-based month numbering                    
                </comment>
                <declaration name="y" type="int" line="704"/>
                <scope line="705"/>
                <scope line="708"/>
                <declaration name="d" type="BaseCalendar.Date" line="712"/>
                <scope line="713"/>
            </method>
            <javadoc line="719">
                Returns the day of the month represented by this &lt;tt&gt;Date&lt;/tt&gt; object.
                  The value returned is between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;31&lt;/code&gt;
                  representing the day of the month that contains or begins with the
                  instant in time represented by this &lt;tt&gt;Date&lt;/tt&gt; object, as
                  interpreted in the local time zone.                
                <return>
                    the day of the month represented by this date.                    
                </return>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.get(Calendar.DAY_OF_MONTH)&lt;/code&gt;.                    
                </deprecated>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getDate" type="int" line="733"/>
            <javadoc line="737">
                Sets the day of the month of this &lt;tt&gt;Date&lt;/tt&gt; object to the
                  specified value. This &lt;tt&gt;Date&lt;/tt&gt; object is modified so that
                  it represents a point in time within the specified day of the
                  month, with the year, month, hour, minute, and second the same
                  as before, as interpreted in the local time zone. If the date
                  was April 30, for example, and the date is set to 31, then it
                  will be treated as if it were on May 1, because April has only
                  30 days.                
                <param>
                    date   the day of the month value between 1-31.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(Calendar.DAY_OF_MONTH, int date)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="setDate" type="void" line="753">
                <params>
                    <param name="date" type="int"/>
                </params>
            </method>
            <javadoc line="757">
                Returns the day of the week represented by this date. The
                  returned value (&lt;tt&gt;0&lt;/tt&gt; = Sunday, &lt;tt&gt;1&lt;/tt&gt; = Monday,
                  &lt;tt&gt;2&lt;/tt&gt; = Tuesday, &lt;tt&gt;3&lt;/tt&gt; = Wednesday, &lt;tt&gt;4&lt;/tt&gt; =
                  Thursday, &lt;tt&gt;5&lt;/tt&gt; = Friday, &lt;tt&gt;6&lt;/tt&gt; = Saturday)
                  represents the day of the week that contains or begins with
                  the instant in time represented by this &lt;tt&gt;Date&lt;/tt&gt; object,
                  as interpreted in the local time zone.                
                <return>
                    the day of the week represented by this date.                    
                </return>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.get(Calendar.DAY_OF_WEEK)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="getDay" type="int" line="772"/>
            <javadoc line="776">
                Returns the hour represented by this &lt;tt&gt;Date&lt;/tt&gt; object. The
                  returned value is a number (&lt;tt&gt;0&lt;/tt&gt; through &lt;tt&gt;23&lt;/tt&gt;)
                  representing the hour within the day that contains or begins
                  with the instant in time represented by this &lt;tt&gt;Date&lt;/tt&gt;
                  object, as interpreted in the local time zone.                
                <return>
                    the hour represented by this date.                    
                </return>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.get(Calendar.HOUR_OF_DAY)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="getHours" type="int" line="789"/>
            <javadoc line="793">
                Sets the hour of this &lt;tt&gt;Date&lt;/tt&gt; object to the specified value.
                  This &lt;tt&gt;Date&lt;/tt&gt; object is modified so that it represents a point
                  in time within the specified hour of the day, with the year, month,
                  date, minute, and second the same as before, as interpreted in the
                  local time zone.                
                <param>
                    hours   the hour value.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(Calendar.HOUR_OF_DAY, int hours)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="setHours" type="void" line="806">
                <params>
                    <param name="hours" type="int"/>
                </params>
            </method>
            <javadoc line="810">
                Returns the number of minutes past the hour represented by this date,
                  as interpreted in the local time zone.
                  The value returned is between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;59&lt;/code&gt;.                
                <return>
                    the number of minutes past the hour represented by this date.                    
                </return>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.get(Calendar.MINUTE)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="getMinutes" type="int" line="821"/>
            <javadoc line="825">
                Sets the minutes of this &lt;tt&gt;Date&lt;/tt&gt; object to the specified value.
                  This &lt;tt&gt;Date&lt;/tt&gt; object is modified so that it represents a point
                  in time within the specified minute of the hour, with the year, month,
                  date, hour, and second the same as before, as interpreted in the
                  local time zone.                
                <param>
                    minutes   the value of the minutes.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(Calendar.MINUTE, int minutes)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="setMinutes" type="void" line="838">
                <params>
                    <param name="minutes" type="int"/>
                </params>
            </method>
            <javadoc line="842">
                Returns the number of seconds past the minute represented by this date.
                  The value returned is between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;61&lt;/code&gt;. The
                  values &lt;code&gt;60&lt;/code&gt; and &lt;code&gt;61&lt;/code&gt; can only occur on those
                  Java Virtual Machines that take leap seconds into account.                
                <return>
                    the number of seconds past the minute represented by this date.                    
                </return>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.get(Calendar.SECOND)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="getSeconds" type="int" line="854"/>
            <javadoc line="858">
                Sets the seconds of this &lt;tt&gt;Date&lt;/tt&gt; to the specified value.
                  This &lt;tt&gt;Date&lt;/tt&gt; object is modified so that it represents a
                  point in time within the specified second of the minute, with
                  the year, month, date, hour, and minute the same as before, as
                  interpreted in the local time zone.                
                <param>
                    seconds   the seconds value.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;Calendar.set(Calendar.SECOND, int seconds)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="setSeconds" type="void" line="871">
                <params>
                    <param name="seconds" type="int"/>
                </params>
            </method>
            <javadoc line="875">
                Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
                  represented by this &lt;tt&gt;Date&lt;/tt&gt; object.                
                <return>
                    the number of milliseconds since January 1, 1970, 00:00:00 GMT
                      represented by this date.                    
                </return>
            </javadoc>
            <method name="getTime" type="long" line="882"/>
            <method name="getTimeImpl" type="long" line="886">
                <scope line="887"/>
            </method>
            <javadoc line="893">
                Sets this &lt;code&gt;Date&lt;/code&gt; object to represent a point in time that is
                  &lt;code&gt;time&lt;/code&gt; milliseconds after January 1, 1970 00:00:00 GMT.                
                <param>
                    time   the number of milliseconds.                    
                </param>
            </javadoc>
            <method name="setTime" type="void" line="899">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <javadoc line="904">
                Tests if this date is before the specified date.                
                <param>
                    when   a date.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if and only if the instant of time
                      represented by this &lt;tt&gt;Date&lt;/tt&gt; object is strictly
                      earlier than the instant represented by &lt;tt&gt;when&lt;/tt&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;when&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="before" type="boolean" line="914">
                <params>
                    <param name="when" type="Date"/>
                </params>
            </method>
            <javadoc line="918">
                Tests if this date is after the specified date.                
                <param>
                    when   a date.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if and only if the instant represented
                      by this &lt;tt&gt;Date&lt;/tt&gt; object is strictly later than the
                      instant represented by &lt;tt&gt;when&lt;/tt&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;when&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="after" type="boolean" line="928">
                <params>
                    <param name="when" type="Date"/>
                </params>
            </method>
            <javadoc line="932">
                Compares two dates for equality.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is
                  not &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;Date&lt;/code&gt; object that
                  represents the same point in time, to the millisecond, as this object.
                  &lt;p&gt;
                  Thus, two &lt;code&gt;Date&lt;/code&gt; objects are equal if and only if the
                  &lt;code&gt;getTime&lt;/code&gt; method returns the same &lt;code&gt;long&lt;/code&gt;
                  value for both.                
                <param>
                    obj   the object to compare with.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are the same;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.util.Date#getTime()                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="947">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="951">
                Returns the millisecond value of this &lt;code&gt;Date&lt;/code&gt; object
                  without affecting its internal state.                
            </javadoc>
            <method name="getMillisOf" type="long" line="955">
                <params>
                    <param name="date" type="Date"/>
                </params>
                <scope line="956"/>
                <declaration name="d" type="BaseCalendar.Date" line="959"/>
            </method>
            <javadoc line="963">
                Compares two Dates for ordering.                
                <param>
                    anotherDate   the &lt;code&gt;Date&lt;/code&gt; to be compared.                    
                </param>
                <return>
                    the value &lt;code&gt;0&lt;/code&gt; if the argument Date is equal to
                      this Date; a value less than &lt;code&gt;0&lt;/code&gt; if this Date
                      is before the Date argument; and a value greater than
                      &lt;code&gt;0&lt;/code&gt; if this Date is after the Date argument.                    
                </return>
                <since>
                    1.2                    
                </since>
                <exception>
                    NullPointerException if &lt;code&gt;anotherDate&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="compareTo" type="int" line="974">
                <params>
                    <param name="anotherDate" type="Date"/>
                </params>
                <declaration name="thisTime" type="long" line="975"/>
                <declaration name="anotherTime" type="long" line="976"/>
            </method>
            <javadoc line="980">
                Returns a hash code value for this object. The result is the
                  exclusive OR of the two halves of the primitive &lt;tt&gt;long&lt;/tt&gt;
                  value returned by the {@link Date#getTime}method. That is, the hash code is the value of the expression:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (int)(this.getTime()^(this.getTime() &gt;&gt;&gt; 32))&lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="990">
                <declaration name="ht" type="long" line="991"/>
            </method>
            <javadoc line="995">
                Converts this &lt;code&gt;Date&lt;/code&gt; object to a &lt;code&gt;String&lt;/code&gt;
                  of the form:
                  &lt;blockquote&gt;&lt;pre&gt;
                  dow mon dd hh:mm:ss zzz yyyy&lt;/pre&gt;&lt;/blockquote&gt;
                  where:&lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;dow&lt;/tt&gt; is the day of the week (&lt;tt&gt;Sun, Mon, Tue, Wed,
                  Thu, Fri, Sat&lt;/tt&gt;).
                  &lt;li&gt;&lt;tt&gt;mon&lt;/tt&gt; is the month (&lt;tt&gt;Jan, Feb, Mar, Apr, May, Jun,
                  Jul, Aug, Sep, Oct, Nov, Dec&lt;/tt&gt;).
                  &lt;li&gt;&lt;tt&gt;dd&lt;/tt&gt; is the day of the month (&lt;tt&gt;01&lt;/tt&gt; through
                  &lt;tt&gt;31&lt;/tt&gt;), as two decimal digits.
                  &lt;li&gt;&lt;tt&gt;hh&lt;/tt&gt; is the hour of the day (&lt;tt&gt;00&lt;/tt&gt; through
                  &lt;tt&gt;23&lt;/tt&gt;), as two decimal digits.
                  &lt;li&gt;&lt;tt&gt;mm&lt;/tt&gt; is the minute within the hour (&lt;tt&gt;00&lt;/tt&gt; through
                  &lt;tt&gt;59&lt;/tt&gt;), as two decimal digits.
                  &lt;li&gt;&lt;tt&gt;ss&lt;/tt&gt; is the second within the minute (&lt;tt&gt;00&lt;/tt&gt; through
                  &lt;tt&gt;61&lt;/tt&gt;, as two decimal digits.
                  &lt;li&gt;&lt;tt&gt;zzz&lt;/tt&gt; is the time zone (and may reflect daylight saving
                  time). Standard time zone abbreviations include those
                  recognized by the method &lt;tt&gt;parse&lt;/tt&gt;. If time zone
                  information is not available, then &lt;tt&gt;zzz&lt;/tt&gt; is empty -
                  that is, it consists of no characters at all.
                  &lt;li&gt;&lt;tt&gt;yyyy&lt;/tt&gt; is the year, as four decimal digits.
                  &lt;/ul&gt;                
                <return>
                    a string representation of this date.                    
                </return>
                <see>
                    java.util.Date#toLocaleString()                    
                </see>
                <see>
                    java.util.Date#toGMTString()                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="1025">
                <comment line="1027">
                    &quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;;                    
                </comment>
                <comment line="1034">
                    EEE                    
                </comment>
                <comment line="1035">
                    MMM                    
                </comment>
                <comment line="1036">
                    dd                    
                </comment>
                <comment line="1038">
                    HH                    
                </comment>
                <comment line="1039">
                    mm                    
                </comment>
                <comment line="1040">
                    ss                    
                </comment>
                <comment line="1043">
                    zzz                    
                </comment>
                <comment line="1047">
                    yyyy                    
                </comment>
                <declaration name="date" type="BaseCalendar.Date" line="1027"/>
                <declaration name="sb" type="StringBuilder" line="1028"/>
                <declaration name="index" type="int" line="1029"/>
                <scope line="1030"/>
                <declaration name="zi" type="TimeZone" line="1040"/>
                <scope line="1041"/>
                <scope line="1043"/>
            </method>
            <javadoc line="1050">
                Converts the given name to its 3-letter abbreviation (e.g.,
                  &quot;monday&quot; -&gt; &quot;Mon&quot;) and stored the abbreviation in the given
                  &lt;code&gt;StringBuilder&lt;/code&gt;.                
            </javadoc>
            <method name="convertToAbbr" type="StringBuilder" line="1055">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1061">
                Creates a string representation of this &lt;tt&gt;Date&lt;/tt&gt; object in an
                  implementation-dependent form. The intent is that the form should
                  be familiar to the user of the Java application, wherever it may
                  happen to be running. The intent is comparable to that of the
                  &quot;&lt;code&gt;%c&lt;/code&gt;&quot; format supported by the &lt;code&gt;strftime()&lt;/code&gt;
                  function of ISO&amp;nbsp;C.                
                <return>
                    a string representation of this date, using the locale
                      conventions.                    
                </return>
                <see>
                    java.text.DateFormat                    
                </see>
                <see>
                    java.util.Date#toString()                    
                </see>
                <see>
                    java.util.Date#toGMTString()                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="toLocaleString" type="String" line="1078">
                <declaration name="formatter" type="DateFormat" line="1079"/>
            </method>
            <javadoc line="1083">
                Creates a string representation of this &lt;tt&gt;Date&lt;/tt&gt; object of
                  the form:
                  &lt;blockquote&lt;pre&gt;
                  d mon yyyy hh:mm:ss GMT&lt;/pre&gt;&lt;/blockquote&gt;
                  where:&lt;ul&gt;
                  &lt;li&gt;&lt;i&gt;d&lt;/i&gt; is the day of the month (&lt;tt&gt;1&lt;/tt&gt; through &lt;tt&gt;31&lt;/tt&gt;),
                  as one or two decimal digits.
                  &lt;li&gt;&lt;i&gt;mon&lt;/i&gt; is the month (&lt;tt&gt;Jan, Feb, Mar, Apr, May, Jun, Jul,
                  Aug, Sep, Oct, Nov, Dec&lt;/tt&gt;).
                  &lt;li&gt;&lt;i&gt;yyyy&lt;/i&gt; is the year, as four decimal digits.
                  &lt;li&gt;&lt;i&gt;hh&lt;/i&gt; is the hour of the day (&lt;tt&gt;00&lt;/tt&gt; through &lt;tt&gt;23&lt;/tt&gt;),
                  as two decimal digits.
                  &lt;li&gt;&lt;i&gt;mm&lt;/i&gt; is the minute within the hour (&lt;tt&gt;00&lt;/tt&gt; through
                  &lt;tt&gt;59&lt;/tt&gt;), as two decimal digits.
                  &lt;li&gt;&lt;i&gt;ss&lt;/i&gt; is the second within the minute (&lt;tt&gt;00&lt;/tt&gt; through
                  &lt;tt&gt;61&lt;/tt&gt;), as two decimal digits.
                  &lt;li&gt;&lt;i&gt;GMT&lt;/i&gt; is exactly the ASCII letters &quot;&lt;tt&gt;GMT&lt;/tt&gt;&quot; to indicate
                  Greenwich Mean Time.
                  &lt;/ul&gt;&lt;p&gt;
                  The result does not depend on the local time zone.                
                <return>
                    a string representation of this date, using the Internet GMT
                      conventions.                    
                </return>
                <see>
                    java.text.DateFormat                    
                </see>
                <see>
                    java.util.Date#toString()                    
                </see>
                <see>
                    java.util.Date#toLocaleString()                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt;, using a
                      GMT &lt;code&gt;TimeZone&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="toGMTString" type="String" line="1115">
                <comment line="1117">
                    d MMM yyyy HH:mm:ss &apos;GMT&apos;                    
                </comment>
                <comment line="1123">
                    d                    
                </comment>
                <comment line="1124">
                    MMM                    
                </comment>
                <comment line="1125">
                    yyyy                    
                </comment>
                <comment line="1126">
                    HH                    
                </comment>
                <comment line="1127">
                    mm                    
                </comment>
                <comment line="1128">
                    ss                    
                </comment>
                <comment line="1129">
                    &apos; GMT&apos;                    
                </comment>
                <declaration name="t" type="long" line="1117"/>
                <declaration name="cal" type="BaseCalendar" line="1118"/>
                <declaration name="date" type="BaseCalendar.Date" line="1119"/>
                <declaration name="sb" type="StringBuilder" line="1121"/>
            </method>
            <javadoc line="1132">
                Returns the offset, measured in minutes, for the local time zone
                  relative to UTC that is appropriate for the time represented by
                  this &lt;code&gt;Date&lt;/code&gt; object.
                  &lt;p&gt;
                  For example, in Massachusetts, five time zones west of Greenwich:
                  &lt;blockquote&gt;&lt;pre&gt;
                  new Date(96, 1, 14).getTimezoneOffset() returns 300&lt;/pre&gt;&lt;/blockquote&gt;
                  because on February 14, 1996, standard time (Eastern Standard Time)
                  is in use, which is offset five hours from UTC; but:
                  &lt;blockquote&gt;&lt;pre&gt;
                  new Date(96, 5, 1).getTimezoneOffset() returns 240&lt;/pre&gt;&lt;/blockquote&gt;
                  because on June 1, 1996, daylight saving time (Eastern Daylight Time)
                  is in use, which is offset only four hours from UTC.&lt;p&gt;
                  This method produces the same result as if it computed:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (this.getTime() - UTC(this.getYear(),
                  this.getMonth(),
                  this.getDate(),
                  this.getHours(),
                  this.getMinutes(),
                  this.getSeconds())) / (60  1000)
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    the time-zone offset, in minutes, for the current time zone.                    
                </return>
                <see>
                    java.util.Calendar#ZONE_OFFSET                    
                </see>
                <see>
                    java.util.Calendar#DST_OFFSET                    
                </see>
                <see>
                    java.util.TimeZone#getDefault                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;-(Calendar.get(Calendar.ZONE_OFFSET) +
                      Calendar.get(Calendar.DST_OFFSET)) / (60  1000)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="getTimezoneOffset" type="int" line="1165">
                <comment line="1179">
                    convert to minutes                    
                </comment>
                <declaration name="zoneOffset" type="int" line="1166"/>
                <scope line="1167">
                    <declaration name="tz" type="TimeZone" line="1168"/>
                    <scope line="1169"/>
                    <scope line="1171"/>
                </scope>
                <scope line="1174"/>
            </method>
            <method name="getCalendarDate" type="BaseCalendar.Date" line="1181">
                <scope line="1182">
                    <declaration name="cal" type="BaseCalendar" line="1183"/>
                </scope>
            </method>
            <method name="normalize" type="BaseCalendar.Date" line="1190">
                <comment line="1199">
                    Normalize cdate with the TimeZone in cdate first. This is
                     required for the compatible behavior.                    
                </comment>
                <comment line="1205">
                    If the default TimeZone has changed, then recalculate the
                     fields with the new TimeZone.                    
                </comment>
                <scope line="1191">
                    <declaration name="cal" type="BaseCalendar" line="1192"/>
                </scope>
                <scope line="1200"/>
                <declaration name="tz" type="TimeZone" line="1206"/>
                <scope line="1207">
                    <declaration name="cal" type="CalendarSystem" line="1209"/>
                </scope>
            </method>
            <method name="normalize" type="BaseCalendar.Date" line="1216">
                <params>
                    <param name="date" type="BaseCalendar.Date"/>
                </params>
                <comment line="1227">
                    If the specified year can&apos;t be handled using a long value
                     in milliseconds, GregorianCalendar is used for full
                     compatibility with underflow and overflow. This is required
                     by some JCK tests. The limits are based max year values -
                     years that can be represented by max values of d, hh, mm,
                     ss and ms. Also, let GregorianCalendar handle the default
                     cutover year so that we don&apos;t need to worry about the
                     transition here.                    
                </comment>
                <comment line="1254">
                    Perform the GregorianCalendar-style normalization.                    
                </comment>
                <comment line="1257">
                    In case the normalized date requires the other calendar
                     system, we need to recalculate it using the other one.                    
                </comment>
                <declaration name="y" type="int" line="1217"/>
                <declaration name="m" type="int" line="1218"/>
                <declaration name="d" type="int" line="1219"/>
                <declaration name="hh" type="int" line="1220"/>
                <declaration name="mm" type="int" line="1221"/>
                <declaration name="ss" type="int" line="1222"/>
                <declaration name="ms" type="int" line="1223"/>
                <declaration name="tz" type="TimeZone" line="1224"/>
                <scope line="1234">
                    <scope line="1235"/>
                    <declaration name="gc" type="GregorianCalendar" line="1238"/>
                    <declaration name="cal" type="BaseCalendar" line="1243"/>
                </scope>
                <declaration name="cal" type="BaseCalendar" line="1248"/>
                <scope line="1249"/>
                <declaration name="ncal" type="BaseCalendar" line="1258"/>
                <scope line="1259"/>
            </method>
            <javadoc line="1267">
                Returns the Gregorian or Julian calendar system to use with the
                  given date. Use Gregorian from October 15, 1582.                
                <param>
                    year normalized calendar year (not -1900)                    
                </param>
                <return>
                    the CalendarSystem to use for the specified date                    
                </return>
            </javadoc>
            <method name="getCalendarSystem" type="BaseCalendar" line="1274">
                <params>
                    <param name="year" type="int"/>
                </params>
                <scope line="1275"/>
            </method>
            <method name="getCalendarSystem" type="BaseCalendar" line="1281">
                <params>
                    <param name="utc" type="long"/>
                </params>
                <comment line="1283">
                    Quickly check if the time stamp given by `utc&apos; is the Epoch
                     or later. If it&apos;s before 1970, we convert the cutover to
                     local time to compare.                    
                </comment>
                <scope line="1287"/>
            </method>
            <method name="getCalendarSystem" type="BaseCalendar" line="1293">
                <params>
                    <param name="cdate" type="BaseCalendar.Date"/>
                </params>
                <scope line="1294"/>
                <scope line="1297"/>
            </method>
            <method name="getJulianCalendar" type="BaseCalendar" line="1303">
                <scope line="1304"/>
            </method>
            <javadoc line="1310">
                Save the state of this object to a stream (i.e., serialize it).                
                <serialData>
                    The value returned by &lt;code&gt;getTime()&lt;/code&gt;
                      is emitted (long).  This represents the offset from
                      January 1, 1970, 00:00:00 GMT in milliseconds.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="1319">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="1323">
                Reconstitute this object from a stream (i.e., deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="1328">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>