<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.Serializable"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.util.TimeZoneNameUtility"/>
        <import package="sun.util.calendar.ZoneInfo"/>
        <import package="sun.util.calendar.ZoneInfoFile"/>
        <class name="TimeZone" line="51">
            <comment line="159">
                Constants used internally; unit is milliseconds                
            </comment>
            <comment line="164">
                Proclaim serialization compatibility with JDK 1.1                
            </comment>
            <comment line="752">
                =======================privates===============================                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="51">
                &lt;code&gt;TimeZone&lt;/code&gt; represents a time zone offset, and also figures out daylight
                  savings.
                  &lt;p&gt;
                  Typically, you get a &lt;code&gt;TimeZone&lt;/code&gt; using &lt;code&gt;getDefault&lt;/code&gt;
                  which creates a &lt;code&gt;TimeZone&lt;/code&gt; based on the time zone where the program
                  is running. For example, for a program running in Japan, &lt;code&gt;getDefault&lt;/code&gt;
                  creates a &lt;code&gt;TimeZone&lt;/code&gt; object based on Japanese Standard Time.
                  &lt;p&gt;
                  You can also get a &lt;code&gt;TimeZone&lt;/code&gt; using &lt;code&gt;getTimeZone&lt;/code&gt;
                  along with a time zone ID. For instance, the time zone ID for the
                  U.S. Pacific Time zone is &quot;America/Los_Angeles&quot;. So, you can get a
                  U.S. Pacific Time &lt;code&gt;TimeZone&lt;/code&gt; object with:
                  &lt;blockquote&gt;&lt;pre&gt;
                  TimeZone tz = TimeZone.getTimeZone(&quot;America/Los_Angeles&quot;);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  You can use the &lt;code&gt;getAvailableIDs&lt;/code&gt; method to iterate through
                  all the supported time zone IDs. You can then choose a
                  supported ID to get a &lt;code&gt;TimeZone&lt;/code&gt;.
                  If the time zone you want is not represented by one of the
                  supported IDs, then a custom time zone ID can be specified to
                  produce a TimeZone. The syntax of a custom time zone ID is:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &lt;a name=&quot;CustomID&quot;&gt;&lt;i&gt;CustomID:&lt;/i&gt;&lt;/a&gt;
                  &lt;code&gt;GMT&lt;/code&gt; &lt;i&gt;Sign&lt;/i&gt; &lt;i&gt;Hours&lt;/i&gt; &lt;code&gt;:&lt;/code&gt; &lt;i&gt;Minutes&lt;/i&gt;
                  &lt;code&gt;GMT&lt;/code&gt; &lt;i&gt;Sign&lt;/i&gt; &lt;i&gt;Hours&lt;/i&gt; &lt;i&gt;Minutes&lt;/i&gt;
                  &lt;code&gt;GMT&lt;/code&gt; &lt;i&gt;Sign&lt;/i&gt; &lt;i&gt;Hours&lt;/i&gt;
                  &lt;i&gt;Sign:&lt;/i&gt; one of
                  &lt;code&gt;+ -&lt;/code&gt;
                  &lt;i&gt;Hours:&lt;/i&gt;
                  &lt;i&gt;Digit&lt;/i&gt;
                  &lt;i&gt;Digit&lt;/i&gt; &lt;i&gt;Digit&lt;/i&gt;
                  &lt;i&gt;Minutes:&lt;/i&gt;
                  &lt;i&gt;Digit&lt;/i&gt; &lt;i&gt;Digit&lt;/i&gt;
                  &lt;i&gt;Digit:&lt;/i&gt; one of
                  &lt;code&gt;0 1 2 3 4 5 6 7 8 9&lt;/code&gt;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;i&gt;Hours&lt;/i&gt; must be between 0 to 23 and &lt;i&gt;Minutes&lt;/i&gt; must be
                  between 00 to 59.  For example, &quot;GMT+10&quot; and &quot;GMT+0010&quot; mean ten
                  hours and ten minutes ahead of GMT, respectively.
                  &lt;p&gt;
                  The format is locale independent and digits must be taken from the
                  Basic Latin block of the Unicode standard. No daylight saving time
                  transition schedule can be specified with a custom time zone ID. If
                  the specified string doesn&apos;t match the syntax, &lt;code&gt;&quot;GMT&quot;&lt;/code&gt;
                  is used.
                  &lt;p&gt;
                  When creating a &lt;code&gt;TimeZone&lt;/code&gt;, the specified custom time
                  zone ID is normalized in the following syntax:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &lt;a name=&quot;NormalizedCustomID&quot;&gt;&lt;i&gt;NormalizedCustomID:&lt;/i&gt;&lt;/a&gt;
                  &lt;code&gt;GMT&lt;/code&gt; &lt;i&gt;Sign&lt;/i&gt; &lt;i&gt;TwoDigitHours&lt;/i&gt; &lt;code&gt;:&lt;/code&gt; &lt;i&gt;Minutes&lt;/i&gt;
                  &lt;i&gt;Sign:&lt;/i&gt; one of
                  &lt;code&gt;+ -&lt;/code&gt;
                  &lt;i&gt;TwoDigitHours:&lt;/i&gt;
                  &lt;i&gt;Digit&lt;/i&gt; &lt;i&gt;Digit&lt;/i&gt;
                  &lt;i&gt;Minutes:&lt;/i&gt;
                  &lt;i&gt;Digit&lt;/i&gt; &lt;i&gt;Digit&lt;/i&gt;
                  &lt;i&gt;Digit:&lt;/i&gt; one of
                  &lt;code&gt;0 1 2 3 4 5 6 7 8 9&lt;/code&gt;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  For example, TimeZone.getTimeZone(&quot;GMT-8&quot;).getID() returns &quot;GMT-08:00&quot;.
                  &lt;h4&gt;Three-letter time zone IDs&lt;/h4&gt;
                  For compatibility with JDK 1.1.x, some other three-letter time zone IDs
                  (such as &quot;PST&quot;, &quot;CTT&quot;, &quot;AST&quot;) are also supported. However, &lt;strong&gt;their
                  use is deprecated&lt;/strong&gt; because the same abbreviation is often used
                  for multiple time zones (for example, &quot;CST&quot; could be U.S. &quot;Central Standard
                  Time&quot; and &quot;China Standard Time&quot;), and the Java platform can then only
                  recognize one of them.                
                <see>
                    Calendar                    
                </see>
                <see>
                    GregorianCalendar                    
                </see>
                <see>
                    SimpleTimeZone                    
                </see>
                <author>
                    Mark Davis, David Goldsmith, Chen-Lieh Huang, Alan Liu                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="135">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="TimeZone" type="constructor" line="139"/>
            <declaration name="SHORT" type="int" line="142"/>
            <javadoc line="142">
                A style specifier for &lt;code&gt;getDisplayName()&lt;/code&gt; indicating
                  a short name, such as &quot;PST.&quot;                
                <see>
                    #LONG                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="LONG" type="int" line="150"/>
            <javadoc line="150">
                A style specifier for &lt;code&gt;getDisplayName()&lt;/code&gt; indicating
                  a long name, such as &quot;Pacific Standard Time.&quot;                
                <see>
                    #SHORT                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="ONE_MINUTE" type="int" line="159"/>
            <declaration name="ONE_HOUR" type="int" line="160"/>
            <declaration name="ONE_DAY" type="int" line="161"/>
            <declaration name="serialVersionUID" type="long" line="164"/>
            <method name="getOffset" type="int" line="166"/>
            <javadoc line="166">
                Gets the time zone offset, for current date, modified in case of
                  daylight savings. This is the offset to add to UTC to get local time.
                  &lt;p&gt;
                  This method returns a historically correct offset if an
                  underlying &lt;code&gt;TimeZone&lt;/code&gt; implementation subclass
                  supports historical Daylight Saving Time schedule and GMT
                  offset changes.                
                <param>
                    era the era of the given date.                    
                </param>
                <param>
                    year the year in the given date.                    
                </param>
                <param>
                    month the month in the given date.
                      Month is 0-based. e.g., 0 for January.                    
                </param>
                <param>
                    day the day-in-month of the given date.                    
                </param>
                <param>
                    dayOfWeek the day-of-week of the given date.                    
                </param>
                <param>
                    milliseconds the milliseconds in day in <em>standard</em>
                      local time.                    
                </param>
                <return>
                    the offset in milliseconds to add to GMT to get local time.                    
                </return>
                <see>
                    Calendar#ZONE_OFFSET                    
                </see>
                <see>
                    Calendar#DST_OFFSET                    
                </see>
            </javadoc>
            <javadoc line="192">
                Returns the offset of this time zone from UTC at the specified
                  date. If Daylight Saving Time is in effect at the specified
                  date, the offset value is adjusted with the amount of daylight
                  saving.
                  &lt;p&gt;
                  This method returns a historically correct offset value if an
                  underlying TimeZone implementation subclass supports historical
                  Daylight Saving Time schedule and GMT offset changes.                
                <param>
                    date the date represented in milliseconds since January 1, 1970 00:00:00 GMT                    
                </param>
                <return>
                    the amount of time in milliseconds to add to UTC to get local time.                    
                </return>
                <see>
                    Calendar#ZONE_OFFSET                    
                </see>
                <see>
                    Calendar#DST_OFFSET                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getOffset" type="int" line="209">
                <params>
                    <param name="date" type="long"/>
                </params>
                <scope line="210"/>
            </method>
            <javadoc line="216">
                Gets the raw GMT offset and the amount of daylight saving of this
                  time zone at the given time.                
                <param>
                    date the milliseconds (since January 1, 1970,
                      00:00:00.000 GMT) at which the time zone offset and daylight
                      saving amount are found                    
                </param>
                <param>
                    offset an array of int where the raw GMT offset
                      (offset[0]) and daylight saving amount (offset[1]) are stored,
                      or null if those values are not needed. The method assumes that
                      the length of the given array is two or larger.                    
                </param>
                <return>
                    the total amount of the raw GMT offset and daylight
                      saving at the specified date.                    
                </return>
                <see>
                    Calendar#ZONE_OFFSET                    
                </see>
                <see>
                    Calendar#DST_OFFSET                    
                </see>
            </javadoc>
            <method name="getOffsets" type="int" line="232">
                <params>
                    <param name="date" type="long"/>
                    <param name="offsets" type="int[]"/>
                </params>
                <declaration name="rawoffset" type="int" line="233"/>
                <declaration name="dstoffset" type="int" line="234"/>
                <scope line="235"/>
                <scope line="238"/>
            </method>
            <method name="setRawOffset" type="void" line="245"/>
            <javadoc line="245">
                Sets the base time zone offset to GMT.
                  This is the offset to add to UTC to get local time.
                  &lt;p&gt;
                  If an underlying &lt;code&gt;TimeZone&lt;/code&gt; implementation subclass
                  supports historical GMT offset changes, the specified GMT
                  offset is set as the latest GMT offset and the difference from
                  the known latest GMT offset value is used to adjust all
                  historical GMT offset values.                
                <param>
                    offsetMillis the given base time zone offset to GMT.                    
                </param>
            </javadoc>
            <method name="getRawOffset" type="int" line="259"/>
            <javadoc line="259">
                Returns the amount of time in milliseconds to add to UTC to get
                  standard time in this time zone. Because this value is not
                  affected by daylight saving time, it is called &lt;I&gt;raw
                  offset&lt;/I&gt;.
                  &lt;p&gt;
                  If an underlying &lt;code&gt;TimeZone&lt;/code&gt; implementation subclass
                  supports historical GMT offset changes, the method returns the
                  raw offset value of the current date. In Honolulu, for example,
                  its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and
                  this method always returns -36000000 milliseconds (i.e., -10
                  hours).                
                <return>
                    the amount of raw offset time in milliseconds to add to UTC.                    
                </return>
                <see>
                    Calendar#ZONE_OFFSET                    
                </see>
            </javadoc>
            <javadoc line="277">
                Gets the ID of this time zone.                
                <return>
                    the ID of this time zone.                    
                </return>
            </javadoc>
            <method name="getID" type="String" line="282"/>
            <javadoc line="286">
                Sets the time zone ID. This does not change any other data in
                  the time zone object.                
                <param>
                    ID the new time zone ID.                    
                </param>
            </javadoc>
            <method name="setID" type="void" line="292">
                <params>
                    <param name="ID" type="String"/>
                </params>
                <scope line="293"/>
            </method>
            <javadoc line="299">
                Returns a long standard time name of this {@code TimeZone} suitable for
                  presentation to the user in the default locale.
                  &lt;p&gt;This method is equivalent to:
                  &lt;pre&gt;&lt;blockquote&gt;
                  getDisplayName(false, {@link #LONG},
                  Locale.getDefault({@link Locale.Category#DISPLAY}))
                  &lt;/blockquote&gt;&lt;/pre&gt;                
                <return>
                    the human-readable name of this time zone in the default locale.                    
                </return>
                <since>
                    1.2                    
                </since>
                <see>
                    #getDisplayName(boolean,int,Locale)                    
                </see>
                <see>
                    Locale#getDefault(Locale.Category)                    
                </see>
                <see>
                    Locale.Category                    
                </see>
            </javadoc>
            <method name="getDisplayName" type="String" line="315"/>
            <javadoc line="320">
                Returns a long standard time name of this {@code TimeZone} suitable for
                  presentation to the user in the specified {@code locale}.
                  &lt;p&gt;This method is equivalent to:
                  &lt;pre&gt;&lt;blockquote&gt;
                  getDisplayName(false, {@link #LONG}, locale)
                  &lt;/blockquote&gt;&lt;/pre&gt;                
                <param>
                    locale the locale in which to supply the display name.                    
                </param>
                <return>
                    the human-readable name of this time zone in the given locale.                    
                </return>
                <exception>
                    NullPointerException if {@code locale} is {@code null}.                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    #getDisplayName(boolean,int,Locale)                    
                </see>
            </javadoc>
            <method name="getDisplayName" type="String" line="335">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="339">
                Returns a name in the specified {@code style} of this {@code TimeZone}suitable for presentation to the user in the default locale. If the
                  specified {@code daylight} is {@code true}, a Daylight Saving Time name
                  is returned (even if this {@code TimeZone} doesn&apos;t observe Daylight Saving
                  Time). Otherwise, a Standard Time name is returned.
                  &lt;p&gt;This method is equivalent to:
                  &lt;pre&gt;&lt;blockquote&gt;
                  getDisplayName(daylight, style,
                  Locale.getDefault({@link Locale.Category#DISPLAY}))
                  &lt;/blockquote&gt;&lt;/pre&gt;                
                <param>
                    daylight {@code true} specifying a Daylight Saving Time name, or{@code false} specifying a Standard Time name                    
                </param>
                <param>
                    style either {@link #LONG} or {@link #SHORT}                    
                </param>
                <return>
                    the human-readable name of this time zone in the default locale.                    
                </return>
                <exception>
                    IllegalArgumentException if {@code style} is invalid.                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    #getDisplayName(boolean,int,Locale)                    
                </see>
                <see>
                    Locale#getDefault(Locale.Category)                    
                </see>
                <see>
                    Locale.Category                    
                </see>
                <see>
                    java.text.DateFormatSymbols#getZoneStrings()                    
                </see>
            </javadoc>
            <method name="getDisplayName" type="String" line="363">
                <params>
                    <param name="daylight" type="boolean"/>
                    <param name="style" type="int"/>
                </params>
            </method>
            <javadoc line="368">
                Returns a name in the specified {@code style} of this {@code TimeZone}suitable for presentation to the user in the specified {@codelocale}. If the specified {@code daylight} is {@code true}, a Daylight
                  Saving Time name is returned (even if this {@code TimeZone} doesn&apos;t
                  observe Daylight Saving Time). Otherwise, a Standard Time name is
                  returned.
                  &lt;p&gt;When looking up a time zone name, the {@linkplain ResourceBundle.Control#getCandidateLocales(String,Locale) default
                  &lt;code&gt;Locale&lt;/code&gt; search path of &lt;code&gt;ResourceBundle&lt;/code&gt;} derived
                  from the specified {@code locale} is used. (No {@linkplain ResourceBundle.Control#getFallbackLocale(String,Locale) fallback
                  &lt;code&gt;Locale&lt;/code&gt;} search is performed.) If a time zone name in any{@code Locale} of the search path, including {@link Locale#ROOT}, is
                  found, the name is returned. Otherwise, a string in the
                  &lt;a href=&quot;#NormalizedCustomID&quot;&gt;normalized custom ID format&lt;/a&gt; is returned.                
                <param>
                    daylight {@code true} specifying a Daylight Saving Time name, or{@code false} specifying a Standard Time name                    
                </param>
                <param>
                    style either {@link #LONG} or {@link #SHORT}                    
                </param>
                <param>
                    locale   the locale in which to supply the display name.                    
                </param>
                <return>
                    the human-readable name of this time zone in the given locale.                    
                </return>
                <exception>
                    IllegalArgumentException if {@code style} is invalid.                    
                </exception>
                <exception>
                    NullPointerException if {@code locale} is {@code null}.                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    java.text.DateFormatSymbols#getZoneStrings()                    
                </see>
            </javadoc>
            <method name="getDisplayName" type="String" line="396">
                <params>
                    <param name="daylight" type="boolean"/>
                    <param name="style" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="397"/>
                <declaration name="id" type="String" line="401"/>
                <declaration name="names" type="String[]" line="402"/>
                <scope line="403">
                    <scope line="404">
                        <declaration name="sign" type="char" line="405"/>
                        <scope line="406"/>
                    </scope>
                    <declaration name="offset" type="int" line="410"/>
                    <scope line="411"/>
                </scope>
                <declaration name="index" type="int" line="417"/>
                <scope line="418"/>
            </method>
            <class name="DisplayNames" line="424">
                <comment line="426">
                    Cache for managing display names per timezone per locale
                     The structure is:
                       Map(key=id, value=SoftReference(Map(key=locale, value=displaynames)))                    
                </comment>
                <declaration name="CACHE" type="Map&lt;String,SoftReference&lt;Map&lt;Locale,String[]&gt;&gt;&gt;" line="428"/>
            </class>
            <method name="getDisplayNames" type="String[]" line="432">
                <params>
                    <param name="id" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="displayNames" type="Map&lt;String,SoftReference&lt;Map&lt;Locale,String[]&gt;&gt;&gt;" line="433"/>
                <declaration name="ref" type="SoftReference&lt;Map&lt;Locale,String[]&gt;&gt;" line="435"/>
                <scope line="436">
                    <declaration name="perLocale" type="Map&lt;Locale,String[]&gt;" line="437"/>
                    <scope line="438">
                        <declaration name="names" type="String[]" line="439"/>
                        <scope line="440"/>
                        <scope line="444"/>
                    </scope>
                </scope>
                <declaration name="names" type="String[]" line="451"/>
                <scope line="452">
                    <declaration name="perLocale" type="Map&lt;Locale,String[]&gt;" line="453"/>
                </scope>
            </method>
            <javadoc line="461">
                Returns the amount of time to be added to local standard time
                  to get local wall clock time.
                  &lt;p&gt;The default implementation returns 3600000 milliseconds
                  (i.e., one hour) if a call to {@link #useDaylightTime()}returns {@code true}. Otherwise, 0 (zero) is returned.
                  &lt;p&gt;If an underlying {@code TimeZone} implementation subclass
                  supports historical and future Daylight Saving Time schedule
                  changes, this method returns the amount of saving time of the
                  last known Daylight Saving Time rule that can be a future
                  prediction.
                  &lt;p&gt;If the amount of saving time at any given time stamp is
                  required, construct a {@link Calendar} with this {@codeTimeZone} and the time stamp, and call {@link Calendar#get(int)Calendar.get}{@code (}{@link Calendar#DST_OFFSET}{@code )}.                
                <return>
                    the amount of saving time in milliseconds                    
                </return>
                <since>
                    1.4                    
                </since>
                <see>
                    #inDaylightTime(Date)                    
                </see>
                <see>
                    #getOffset(long)                    
                </see>
                <see>
                    #getOffset(int,int,int,int,int,int)                    
                </see>
                <see>
                    Calendar#ZONE_OFFSET                    
                </see>
            </javadoc>
            <method name="getDSTSavings" type="int" line="487">
                <scope line="488"/>
            </method>
            <method name="useDaylightTime" type="boolean" line="494"/>
            <javadoc line="494">
                Queries if this {@code TimeZone} uses Daylight Saving Time.
                  &lt;p&gt;If an underlying {@code TimeZone} implementation subclass
                  supports historical and future Daylight Saving Time schedule
                  changes, this method refers to the last known Daylight Saving Time
                  rule that can be a future prediction and may not be the same as
                  the current rule. Consider calling {@link #observesDaylightTime()}if the current rule should also be taken into account.                
                <return>
                    {@code true} if this {@code TimeZone} uses Daylight Saving Time,{@code false}, otherwise.                    
                </return>
                <see>
                    #inDaylightTime(Date)                    
                </see>
                <see>
                    Calendar#DST_OFFSET                    
                </see>
            </javadoc>
            <javadoc line="511">
                Returns {@code true} if this {@code TimeZone} is currently in
                  Daylight Saving Time, or if a transition from Standard Time to
                  Daylight Saving Time occurs at any future time.
                  &lt;p&gt;The default implementation returns {@code true} if{@code useDaylightTime()} or {@code inDaylightTime(new Date())}returns {@code true}.                
                <return>
                    {@code true} if this {@code TimeZone} is currently in
                      Daylight Saving Time, or if a transition from Standard Time to
                      Daylight Saving Time occurs at any future time; {@code false}otherwise.                    
                </return>
                <since>
                    1.7                    
                </since>
                <see>
                    #useDaylightTime()                    
                </see>
                <see>
                    #inDaylightTime(Date)                    
                </see>
                <see>
                    Calendar#DST_OFFSET                    
                </see>
            </javadoc>
            <method name="observesDaylightTime" type="boolean" line="529"/>
            <method name="inDaylightTime" type="boolean" line="533"/>
            <javadoc line="533">
                Queries if the given {@code date} is in Daylight Saving Time in
                  this time zone.                
                <param>
                    date the given Date.                    
                </param>
                <return>
                    {@code true} if the given date is in Daylight Saving Time,{@code false}, otherwise.                    
                </return>
            </javadoc>
            <javadoc line="543">
                Gets the &lt;code&gt;TimeZone&lt;/code&gt; for the given ID.                
                <param>
                    ID the ID for a <code>TimeZone</code>, either an abbreviation
                      such as "PST", a full name such as "America/Los_Angeles", or a custom
                      ID such as "GMT-8:00". Note that the support of abbreviations is
                      for JDK 1.1.x compatibility only and full names should be used.                    
                </param>
                <return>
                    the specified <code>TimeZone</code>, or the GMT zone if the given ID
                      cannot be understood.                    
                </return>
            </javadoc>
            <method name="getTimeZone" type="TimeZone" line="554">
                <params>
                    <param name="ID" type="String"/>
                </params>
            </method>
            <method name="getTimeZone" type="TimeZone" line="558">
                <params>
                    <param name="ID" type="String"/>
                    <param name="fallback" type="boolean"/>
                </params>
                <declaration name="tz" type="TimeZone" line="559"/>
                <scope line="560">
                    <scope line="562"/>
                </scope>
            </method>
            <javadoc line="569">
                Gets the available IDs according to the given time zone offset in milliseconds.                
                <param>
                    rawOffset the given time zone GMT offset in milliseconds.                    
                </param>
                <return>
                    an array of IDs, where the time zone for that ID has
                      the specified GMT offset. For example, "America/Phoenix" and "America/Denver"
                      both have GMT-07:00, but differ in daylight saving behavior.                    
                </return>
                <see>
                    #getRawOffset()                    
                </see>
            </javadoc>
            <method name="getAvailableIDs" type="String[]" line="578">
                <params>
                    <param name="rawOffset" type="int"/>
                </params>
            </method>
            <javadoc line="582">
                Gets all the available IDs supported.                
                <return>
                    an array of IDs.                    
                </return>
            </javadoc>
            <method name="getAvailableIDs" type="String[]" line="586"/>
            <method name="getSystemTimeZoneID" type="String" line="590"/>
            <javadoc line="590">
                Gets the platform defined TimeZone ID.                
            </javadoc>
            <method name="getSystemGMTOffsetID" type="String" line="596"/>
            <javadoc line="596">
                Gets the custom time zone ID based on the GMT offset of the
                  platform. (e.g., &quot;GMT+08:00&quot;)                
            </javadoc>
            <javadoc line="602">
                Gets the default &lt;code&gt;TimeZone&lt;/code&gt; for this host.
                  The source of the default &lt;code&gt;TimeZone&lt;/code&gt;
                  may vary with implementation.                
                <return>
                    a default <code>TimeZone</code>.                    
                </return>
                <see>
                    #setDefault                    
                </see>
            </javadoc>
            <method name="getDefault" type="TimeZone" line="609"/>
            <javadoc line="613">
                Returns the reference to the default TimeZone object. This
                  method doesn&apos;t create a clone.                
            </javadoc>
            <method name="getDefaultRef" type="TimeZone" line="617">
                <comment line="623">
                    Need to initialize the default time zone.                    
                </comment>
                <comment line="628">
                    Don&apos;t clone here.                    
                </comment>
                <declaration name="defaultZone" type="TimeZone" line="618"/>
                <scope line="619">
                    <scope line="621"/>
                </scope>
            </method>
            <method name="setDefaultZone" type="TimeZone" line="631">
                <comment line="634">
                    get the time zone ID from the system properties                    
                </comment>
                <comment line="638">
                    if the time zone ID is not set (yet), perform the
                     platform to Java time zone ID mapping.                    
                </comment>
                <comment line="655">
                    Get the time zone for zoneID. But not fall back to
                     &quot;GMT&quot; here.                    
                </comment>
                <comment line="660">
                    If the given zone ID is unknown in Java, try to
                     get the GMT-offset-based time zone ID,
                     a.k.a. custom time zone ID (e.g., &quot;GMT-08:00&quot;).                    
                </comment>
                <declaration name="tz" type="TimeZone" line="632"/>
                <declaration name="zoneID" type="String" line="634"/>
                <scope line="639">
                    <declaration name="country" type="String" line="640"/>
                    <declaration name="javaHome" type="String" line="642"/>
                    <scope line="644">
                        <scope line="646"/>
                    </scope>
                    <scope line="649"/>
                </scope>
                <scope line="658">
                    <declaration name="gmtOffsetID" type="String" line="662"/>
                    <scope line="663"/>
                </scope>
                <declaration name="id" type="String" line="670"/>
                <anonymous_class line="671">
                    <method name="run" type="Object" line="672"/>
                </anonymous_class>
            </method>
            <method name="hasPermission" type="boolean" line="682">
                <declaration name="hasPermission" type="boolean" line="683"/>
                <declaration name="sm" type="SecurityManager" line="684"/>
                <scope line="685">
                    <scope line="686"/>
                    <scope line="689"/>
                </scope>
            </method>
            <javadoc line="696">
                Sets the &lt;code&gt;TimeZone&lt;/code&gt; that is
                  returned by the &lt;code&gt;getDefault&lt;/code&gt; method.  If &lt;code&gt;zone&lt;/code&gt;
                  is null, reset the default to the value it had originally when the
                  VM first started.                
                <param>
                    zone the new default time zone                    
                </param>
                <see>
                    #getDefault                    
                </see>
            </javadoc>
            <method name="setDefault" type="void" line="705">
                <params>
                    <param name="zone" type="TimeZone"/>
                </params>
                <scope line="706">
                    <scope line="707"/>
                </scope>
                <scope line="711"/>
            </method>
            <javadoc line="716">
                Returns true if this zone has the same rule and offset as another zone.
                  That is, if this zone differs only in ID, if at all.  Returns false
                  if the other zone is null.                
                <param>
                    other the <code>TimeZone</code> object to be compared with                    
                </param>
                <return>
                    true if the other zone is not null and is the same as this one,
                      with the possible exception of the ID                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hasSameRules" type="boolean" line="725">
                <params>
                    <param name="other" type="TimeZone"/>
                </params>
            </method>
            <javadoc line="730">
                Creates a copy of this &lt;code&gt;TimeZone&lt;/code&gt;.                
                <return>
                    a clone of this <code>TimeZone</code>                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="736">
                <scope line="737">
                    <declaration name="other" type="TimeZone" line="738"/>
                </scope>
                <scope line="741"/>
            </method>
            <declaration name="NO_TIMEZONE" type="TimeZone" line="746"/>
            <javadoc line="746">
                The null constant as a TimeZone.                
            </javadoc>
            <declaration name="ID" type="String" line="753"/>
            <javadoc line="753">
                The string identifier of this &lt;code&gt;TimeZone&lt;/code&gt;.  This is a
                  programmatic identifier used internally to look up &lt;code&gt;TimeZone&lt;/code&gt;
                  objects from the system table and also to map them to their localized
                  display names.  &lt;code&gt;ID&lt;/code&gt; values are unique in the system
                  table but may not be for dynamically created zones.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="defaultTimeZone" type="TimeZone" line="762"/>
            <declaration name="defaultZoneTL" type="InheritableThreadLocal&lt;TimeZone&gt;" line="763"/>
            <declaration name="GMT_ID" type="String" line="766"/>
            <declaration name="GMT_ID_LENGTH" type="int" line="767"/>
            <javadoc line="769">
                Parses a custom time zone identifier and returns a corresponding zone.
                  This method doesn&apos;t support the RFC 822 time zone format. (e.g., +hhmm)                
                <param>
                    id a string of the <a href="#CustomID">custom ID form</a>.                    
                </param>
                <return>
                    a newly created TimeZone with the given offset and
                      no daylight saving time, or null if the id cannot be parsed.                    
                </return>
            </javadoc>
            <method name="parseCustomTimeZone" type="TimeZone" line="777">
                <params>
                    <param name="id" type="String"/>
                </params>
                <comment line="781">
                    Error if the length of id isn&apos;t long enough or id doesn&apos;t
                     start with &quot;GMT&quot;.                    
                </comment>
                <comment line="790">
                    First, we try to find it in the cache with the given
                     id. Even the id is not normalized, the returned ZoneInfo
                     should have its normalized id.                    
                </comment>
                <declaration name="length" type="int" line="778"/>
                <scope line="783"/>
                <declaration name="zi" type="ZoneInfo" line="787"/>
                <scope line="793"/>
                <declaration name="index" type="int" line="797"/>
                <declaration name="negative" type="boolean" line="798"/>
                <declaration name="c" type="char" line="799"/>
                <scope line="800"/>
                <scope line="802"/>
                <declaration name="hours" type="int" line="806"/>
                <declaration name="num" type="int" line="807"/>
                <declaration name="countDelim" type="int" line="808"/>
                <declaration name="len" type="int" line="809"/>
                <scope line="810">
                    <scope line="812">
                        <scope line="813"/>
                        <scope line="816"/>
                    </scope>
                    <scope line="825"/>
                </scope>
                <scope line="831"/>
                <scope line="834">
                    <scope line="835"/>
                    <scope line="838"/>
                </scope>
                <scope line="842">
                    <scope line="843"/>
                </scope>
                <scope line="847"/>
                <declaration name="gmtOffset" type="int" line="850"/>
                <scope line="852">
                    <scope line="854"/>
                    <scope line="856"/>
                </scope>
                <scope line="859"/>
            </method>
        </class>
    </source>