<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="JumboEnumSet" line="28">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="EnumSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="47">
                Redundant - maintained for performance                
            </comment>
            <comment line="188">
                Modification Operations                
            </comment>
            <comment line="235">
                Bulk Operations                
            </comment>
            <javadoc line="28">
                Private implementation class for EnumSet, for &quot;jumbo&quot; enum types
                  (i.e., those with more than 64 elements).                
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.5                    
                </since>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="37"/>
            <declaration name="elements" type="long" line="39"/>
            <javadoc line="39">
                Bit vector representation of this set.  The ith bit of the jth
                  element of this array represents the  presence of universe[64j +i]
                  in this set.                
            </javadoc>
            <declaration name="size" type="int" line="47"/>
            <method name="JumboEnumSet" type="constructor" line="49">
                <params>
                    <param name="elementType" type="Class<E>"/>
                    <param name="universe" type="Enum[]"/>
                </params>
            </method>
            <method name="addRange" type="void" line="54">
                <params>
                    <param name="from" type="E"/>
                    <param name="to" type="E"/>
                </params>
                <declaration name="fromIndex" type="int" line="55"/>
                <declaration name="toIndex" type="int" line="56"/>
                <scope line="58"/>
                <scope line="61"/>
            </method>
            <method name="addAll" type="void" line="70"/>
            <method name="complement" type="void" line="77"/>
            <javadoc line="84">
                Returns an iterator over the elements contained in this set.  The
                  iterator traverses the elements in their &lt;i&gt;natural order&lt;/i&gt; (which is
                  the order in which the enum constants are declared). The returned
                  Iterator is a &quot;weakly consistent&quot; iterator that will never throw {@link ConcurrentModificationException}.                
                <return>
                    an iterator over the elements contained in this set                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="93"/>
            <class name="EnumSetIterator" line="97">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="unseen" type="long" line="98"/>
                <javadoc line="98">
                    A bit vector representing the elements in the current &quot;word&quot;
                      of the set not yet returned by this iterator.                    
                </javadoc>
                <declaration name="unseenIndex" type="int" line="104"/>
                <javadoc line="104">
                    The index corresponding to unseen in the elements array.                    
                </javadoc>
                <declaration name="lastReturned" type="long" line="109"/>
                <javadoc line="109">
                    The bit representing the last element returned by this iterator
                      but not removed, or zero if no such element exists.                    
                </javadoc>
                <declaration name="lastReturnedIndex" type="int" line="115"/>
                <javadoc line="115">
                    The index corresponding to lastReturned in the elements array.                    
                </javadoc>
                <method name="EnumSetIterator" type="constructor" line="120"/>
                <method name="hasNext" type="boolean" line="124"/>
                <method name="next" type="E" line="130"/>
                <method name="remove" type="void" line="140">
                    <declaration name="oldElements" type="long" line="143"/>
                    <scope line="145"/>
                </method>
            </class>
            <javadoc line="152">
                Returns the number of elements in this set.                
                <return>
                    the number of elements in this set                    
                </return>
            </javadoc>
            <method name="size" type="int" line="157"/>
            <javadoc line="161">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="166"/>
            <javadoc line="170">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element.                
                <param>
                    e element to be checked for containment in this collection                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="176">
                <params>
                    <param name="e" type="Object"/>
                </params>
                <declaration name="eClass" type="Class" line="179"/>
                <declaration name="eOrdinal" type="int" line="183"/>
            </method>
            <javadoc line="189">
                Adds the specified element to this set if it is not already present.                
                <param>
                    e element to be added to this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if &lt;tt&gt;e&lt;/tt&gt; is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="197">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="eOrdinal" type="int" line="200"/>
                <declaration name="eWordNum" type="int" line="201"/>
                <declaration name="oldElements" type="long" line="203"/>
                <declaration name="result" type="boolean" line="205"/>
            </method>
            <javadoc line="211">
                Removes the specified element from this set if it is present.                
                <param>
                    e element to be removed from this set, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the set contained the specified element                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="217">
                <params>
                    <param name="e" type="Object"/>
                </params>
                <declaration name="eClass" type="Class" line="220"/>
                <declaration name="eOrdinal" type="int" line="223"/>
                <declaration name="eWordNum" type="int" line="224"/>
                <declaration name="oldElements" type="long" line="226"/>
                <declaration name="result" type="boolean" line="228"/>
            </method>
            <javadoc line="236">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains all of the elements
                  in the specified collection.                
                <param>
                    c collection to be checked for containment in this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains all of the elements
                      in the specified collection                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="containsAll" type="boolean" line="245">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="es" type="JumboEnumSet" line="249"/>
            </method>
            <javadoc line="259">
                Adds all of the elements in the specified collection to this set.                
                <param>
                    c collection whose elements are to be added to this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection or any of
                      its elements are null                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="267">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="es" type="JumboEnumSet" line="271"/>
                <scope line="272"/>
            </method>
            <javadoc line="285">
                Removes from this set all of its elements that are contained in
                  the specified collection.                
                <param>
                    c elements to be removed from this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="removeAll" type="boolean" line="293">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="es" type="JumboEnumSet" line="297"/>
            </method>
            <javadoc line="306">
                Retains only the elements in this set that are contained in the
                  specified collection.                
                <param>
                    c elements to be retained in this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="retainAll" type="boolean" line="314">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="es" type="JumboEnumSet&lt;?&gt;" line="318"/>
                <scope line="319">
                    <declaration name="changed" type="boolean" line="320"/>
                </scope>
            </method>
            <javadoc line="330">
                Removes all of the elements from this set.                
            </javadoc>
            <method name="clear" type="void" line="333"/>
            <javadoc line="338">
                Compares the specified object with this set for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the given object is also a set, the two sets have
                  the same size, and every member of the given set is contained in
                  this set.                
                <param>
                    e object to be compared for equality with this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this set                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="347">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="es" type="JumboEnumSet" line="351"/>
            </method>
            <javadoc line="358">
                Recalculates the size of the set.  Returns true if it&apos;s changed.                
            </javadoc>
            <method name="recalculateSize" type="boolean" line="361">
                <declaration name="oldSize" type="int" line="362"/>
            </method>
            <method name="clone" type="EnumSet<E>" line="370">
                <declaration name="result" type="JumboEnumSet&lt;E&gt;" line="371"/>
            </method>
        </class>
    </source>