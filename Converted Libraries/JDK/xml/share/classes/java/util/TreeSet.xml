<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="TreeSet" line="28">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="101">
                Dummy value to associate with an Object in the backing Map                
            </comment>
            <comment line="405">
                NavigableSet API methods                
            </comment>
            <implements interface="NavigableSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="28">
                A {@link NavigableSet} implementation based on a {@link TreeMap}.
                  The elements are ordered using their {@linkplain Comparable natural
                  ordering}, or by a {@link Comparator} provided at set creation
                  time, depending on which constructor is used.
                  &lt;p&gt;This implementation provides guaranteed log(n) time cost for the basic
                  operations ({@code add}, {@code remove} and {@code contains}).
                  &lt;p&gt;Note that the ordering maintained by a set (whether or not an explicit
                  comparator is provided) must be &lt;i&gt;consistent with equals&lt;/i&gt; if it is to
                  correctly implement the {@code Set} interface.  (See {@code Comparable}or {@code Comparator} for a precise definition of &lt;i&gt;consistent with
                  equals&lt;/i&gt;.)  This is so because the {@code Set} interface is defined in
                  terms of the {@code equals} operation, but a {@code TreeSet} instance
                  performs all element comparisons using its {@code compareTo} (or{@code compare}) method, so two elements that are deemed equal by this method
                  are, from the standpoint of the set, equal.  The behavior of a set
                  &lt;i&gt;is&lt;/i&gt; well-defined even if its ordering is inconsistent with equals; it
                  just fails to obey the general contract of the {@code Set} interface.
                  &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  If multiple threads access a tree set concurrently, and at least one
                  of the threads modifies the set, it &lt;i&gt;must&lt;/i&gt; be synchronized
                  externally.  This is typically accomplished by synchronizing on some
                  object that naturally encapsulates the set.
                  If no such object exists, the set should be &quot;wrapped&quot; using the{@link Collections#synchronizedSortedSet Collections.synchronizedSortedSet}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access to the set: &lt;pre&gt;
                  SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));&lt;/pre&gt;
                  &lt;p&gt;The iterators returned by this class&apos;s {@code iterator} method are
                  &lt;i&gt;fail-fast&lt;/i&gt;: if the set is modified at any time after the iterator is
                  created, in any way except through the iterator&apos;s own {@code remove}method, the iterator will throw a {@link ConcurrentModificationException}.
                  Thus, in the face of concurrent modification, the iterator fails quickly
                  and cleanly, rather than risking arbitrary, non-deterministic behavior at
                  an undetermined time in the future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw {@code ConcurrentModificationException} on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness:   &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    &lt;E&gt;
                       the type of elements maintained by this set                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    Set                    
                </see>
                <see>
                    HashSet                    
                </see>
                <see>
                    Comparable                    
                </see>
                <see>
                    Comparator                    
                </see>
                <see>
                    TreeMap                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="m" type="NavigableMap&lt;E,Object&gt;" line="95"/>
            <javadoc line="95">
                The backing map.                
            </javadoc>
            <declaration name="PRESENT" type="Object" line="101"/>
            <javadoc line="103">
                Constructs a set backed by the specified navigable map.                
            </javadoc>
            <method name="TreeSet" type="constructor" line="106">
                <params>
                    <param name="m" type="NavigableMap<E,Object>"/>
                </params>
            </method>
            <javadoc line="110">
                Constructs a new, empty tree set, sorted according to the
                  natural ordering of its elements.  All elements inserted into
                  the set must implement the {@link Comparable} interface.
                  Furthermore, all such elements must be &lt;i&gt;mutually
                  comparable&lt;/i&gt;: {@code e1.compareTo(e2)} must not throw a{@code ClassCastException} for any elements {@code e1} and{@code e2} in the set.  If the user attempts to add an element
                  to the set that violates this constraint (for example, the user
                  attempts to add a string element to a set whose elements are
                  integers), the {@code add} call will throw a{@code ClassCastException}.                
            </javadoc>
            <method name="TreeSet" type="constructor" line="123"/>
            <javadoc line="127">
                Constructs a new, empty tree set, sorted according to the specified
                  comparator.  All elements inserted into the set must be &lt;i&gt;mutually
                  comparable&lt;/i&gt; by the specified comparator: {@code comparator.compare(e1,
                  e2)} must not throw a {@code ClassCastException} for any elements{@code e1} and {@code e2} in the set.  If the user attempts to add
                  an element to the set that violates this constraint, the{@code add} call will throw a {@code ClassCastException}.                
                <param>
                    comparator the comparator that will be used to order this set.
                      If {@code null}, the {@linkplain Comparable natural
                      ordering} of the elements will be used.                    
                </param>
            </javadoc>
            <method name="TreeSet" type="constructor" line="140">
                <params>
                    <param name="comparator" type="Comparator<? super E>"/>
                </params>
            </method>
            <javadoc line="144">
                Constructs a new tree set containing the elements in the specified
                  collection, sorted according to the &lt;i&gt;natural ordering&lt;/i&gt; of its
                  elements.  All elements inserted into the set must implement the{@link Comparable} interface.  Furthermore, all such elements must be
                  &lt;i&gt;mutually comparable&lt;/i&gt;: {@code e1.compareTo(e2)} must not throw a{@code ClassCastException} for any elements {@code e1} and{@code e2} in the set.                
                <param>
                    c collection whose elements will comprise the new set                    
                </param>
                <throws>
                    ClassCastException if the elements in {@code c} are
                      not {@link Comparable}, or are not mutually comparable                    
                </throws>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="TreeSet" type="constructor" line="158">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="163">
                Constructs a new tree set containing the same elements and
                  using the same ordering as the specified sorted set.                
                <param>
                    s sorted set whose elements will comprise the new set                    
                </param>
                <throws>
                    NullPointerException if the specified sorted set is null                    
                </throws>
            </javadoc>
            <method name="TreeSet" type="constructor" line="170">
                <params>
                    <param name="s" type="SortedSet<E>"/>
                </params>
            </method>
            <javadoc line="175">
                Returns an iterator over the elements in this set in ascending order.                
                <return>
                    an iterator over the elements in this set in ascending order                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="180"/>
            <javadoc line="184">
                Returns an iterator over the elements in this set in descending order.                
                <return>
                    an iterator over the elements in this set in descending order                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="descendingIterator" type="Iterator<E>" line="190"/>
            <javadoc line="194">
                @since 1.6                
            </javadoc>
            <method name="descendingSet" type="NavigableSet<E>" line="197"/>
            <javadoc line="201">
                Returns the number of elements in this set (its cardinality).                
                <return>
                    the number of elements in this set (its cardinality)                    
                </return>
            </javadoc>
            <method name="size" type="int" line="206"/>
            <javadoc line="210">
                Returns {@code true} if this set contains no elements.                
                <return>
                    {@code true} if this set contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="215"/>
            <javadoc line="219">
                Returns {@code true} if this set contains the specified element.
                  More formally, returns {@code true} if and only if this set
                  contains an element {@code e} such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o object to be checked for containment in this set                    
                </param>
                <return>
                    {@code true} if this set contains the specified element                    
                </return>
                <throws>
                    ClassCastException if the specified object cannot be compared
                      with the elements currently in the set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      and this set uses natural ordering, or its comparator
                      does not permit null elements                    
                </throws>
            </javadoc>
            <method name="contains" type="boolean" line="233">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="237">
                Adds the specified element to this set if it is not already present.
                  More formally, adds the specified element {@code e} to this set if
                  the set contains no element {@code e2} such that
                  &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.
                  If this set already contains the element, the call leaves the set
                  unchanged and returns {@code false}.                
                <param>
                    e element to be added to this set                    
                </param>
                <return>
                    {@code true} if this set did not already contain the specified
                      element                    
                </return>
                <throws>
                    ClassCastException if the specified object cannot be compared
                      with the elements currently in this set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      and this set uses natural ordering, or its comparator
                      does not permit null elements                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="254">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="258">
                Removes the specified element from this set if it is present.
                  More formally, removes an element {@code e} such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;,
                  if this set contains such an element.  Returns {@code true} if
                  this set contained the element (or equivalently, if this set
                  changed as a result of the call).  (This set will not contain the
                  element once the call returns.)                
                <param>
                    o object to be removed from this set, if present                    
                </param>
                <return>
                    {@code true} if this set contained the specified element                    
                </return>
                <throws>
                    ClassCastException if the specified object cannot be compared
                      with the elements currently in this set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      and this set uses natural ordering, or its comparator
                      does not permit null elements                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="275">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="279">
                Removes all of the elements from this set.
                  The set will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="283"/>
            <javadoc line="287">
                Adds all of the elements in the specified collection to this set.                
                <param>
                    c collection containing elements to be added to this set                    
                </param>
                <return>
                    {@code true} if this set changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the elements provided cannot be compared
                      with the elements currently in the set                    
                </throws>
                <throws>
                    NullPointerException if the specified collection is null or
                      if any element is null and this set uses natural ordering, or
                      its comparator does not permit null elements                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="298">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <comment line="300">
                    Use linear-time version if applicable                    
                </comment>
                <scope line="302">
                    <declaration name="set" type="SortedSet&lt;? extends E&gt;" line="303"/>
                    <declaration name="map" type="TreeMap&lt;E,Object&gt;" line="304"/>
                    <declaration name="cc" type="Comparator&lt;? super E&gt;" line="305"/>
                    <declaration name="mc" type="Comparator&lt;? super E&gt;" line="306"/>
                    <scope line="307"/>
                </scope>
            </method>
            <javadoc line="315">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromElement} or {@code toElement}is null and this set uses natural ordering, or its comparator
                      does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="subSet" type="NavigableSet<E>" line="324">
                <params>
                    <param name="fromElement" type="E"/>
                    <param name="fromInclusive" type="boolean"/>
                    <param name="toElement" type="E"/>
                    <param name="toInclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="329">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code toElement} is null and
                      this set uses natural ordering, or its comparator does
                      not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="headSet" type="NavigableSet<E>" line="337">
                <params>
                    <param name="toElement" type="E"/>
                    <param name="inclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="341">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromElement} is null and
                      this set uses natural ordering, or its comparator does
                      not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="tailSet" type="NavigableSet<E>" line="349">
                <params>
                    <param name="fromElement" type="E"/>
                    <param name="inclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="353">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromElement} or{@code toElement} is null and this set uses natural ordering,
                      or its comparator does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="subSet" type="SortedSet<E>" line="360">
                <params>
                    <param name="fromElement" type="E"/>
                    <param name="toElement" type="E"/>
                </params>
            </method>
            <javadoc line="364">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code toElement} is null
                      and this set uses natural ordering, or its comparator does
                      not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="headSet" type="SortedSet<E>" line="371">
                <params>
                    <param name="toElement" type="E"/>
                </params>
            </method>
            <javadoc line="375">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromElement} is null
                      and this set uses natural ordering, or its comparator does
                      not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="tailSet" type="SortedSet<E>" line="382">
                <params>
                    <param name="fromElement" type="E"/>
                </params>
            </method>
            <method name="comparator" type="Comparator<? super E>" line="386"/>
            <javadoc line="390">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="first" type="E" line="393"/>
            <javadoc line="397">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="last" type="E" line="400"/>
            <javadoc line="406">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified element is null
                      and this set uses natural ordering, or its comparator
                      does not permit null elements                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lower" type="E" line="413">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="417">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified element is null
                      and this set uses natural ordering, or its comparator
                      does not permit null elements                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="floor" type="E" line="424">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="428">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified element is null
                      and this set uses natural ordering, or its comparator
                      does not permit null elements                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="ceiling" type="E" line="435">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="439">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified element is null
                      and this set uses natural ordering, or its comparator
                      does not permit null elements                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="higher" type="E" line="446">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="450">
                @since 1.6                
            </javadoc>
            <method name="pollFirst" type="E" line="453">
                <declaration name="e" type="Map.Entry&lt;E,?&gt;" line="454"/>
            </method>
            <javadoc line="458">
                @since 1.6                
            </javadoc>
            <method name="pollLast" type="E" line="461">
                <declaration name="e" type="Map.Entry&lt;E,?&gt;" line="462"/>
            </method>
            <javadoc line="466">
                Returns a shallow copy of this {@code TreeSet} instance. (The elements
                  themselves are not cloned.)                
                <return>
                    a shallow copy of this set                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="472">
                <declaration name="clone" type="TreeSet&lt;E&gt;" line="473"/>
                <scope line="474"/>
                <scope line="476"/>
            </method>
            <javadoc line="484">
                Save the state of the {@code TreeSet} instance to a stream (that is,
                  serialize it).                
                <serialData>
                    Emits the comparator used to order this set, or{@code null} if it obeys its elements&apos; natural ordering
                      (Object), followed by the size of the set (the number of
                      elements it contains) (int), followed by all of its
                      elements (each an Object) in order (as determined by the
                      set&apos;s Comparator, or by the elements&apos; natural ordering if
                      the set has no Comparator).                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="497">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="499">
                    Write out any hidden stuff                    
                </comment>
                <comment line="502">
                    Write out Comparator                    
                </comment>
                <comment line="505">
                    Write out size                    
                </comment>
                <comment line="508">
                    Write out all elements in the proper order.                    
                </comment>
            </method>
            <javadoc line="512">
                Reconstitute the {@code TreeSet} instance from a stream (that is,
                  deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="517">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="519">
                    Read in any hidden stuff                    
                </comment>
                <comment line="522">
                    Read in Comparator                    
                </comment>
                <comment line="525">
                    Create backing TreeMap                    
                </comment>
                <comment line="533">
                    Read in size                    
                </comment>
                <declaration name="c" type="Comparator&lt;? super E&gt;" line="522"/>
                <declaration name="tm" type="TreeMap&lt;E,Object&gt;" line="525"/>
                <declaration name="size" type="int" line="533"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="538"/>
        </class>
    </source>