<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="List">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Collection">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <comment line="111">
                Query Operations                
            </comment>
            <comment line="212">
                Modification Operations                
            </comment>
            <comment line="262">
                Bulk Modification Operations                
            </comment>
            <comment line="388">
                Comparison and hashing                
            </comment>
            <comment line="426">
                Positional Access Operations                
            </comment>
            <comment line="495">
                Search Operations                
            </comment>
            <comment line="536">
                List Iterators                
            </comment>
            <comment line="564">
                View                
            </comment>
            <javadoc line="28">
                An ordered collection (also known as a &lt;i&gt;sequence&lt;/i&gt;).  The user of this
                  interface has precise control over where in the list each element is
                  inserted.  The user can access elements by their integer index (position in
                  the list), and search for elements in the list.&lt;p&gt;
                  Unlike sets, lists typically allow duplicate elements.  More formally,
                  lists typically allow pairs of elements &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt;
                  such that &lt;tt&gt;e1.equals(e2)&lt;/tt&gt;, and they typically allow multiple
                  null elements if they allow null elements at all.  It is not inconceivable
                  that someone might wish to implement a list that prohibits duplicates, by
                  throwing runtime exceptions when the user attempts to insert them, but we
                  expect this usage to be rare.&lt;p&gt;
                  The &lt;tt&gt;List&lt;/tt&gt; interface places additional stipulations, beyond those
                  specified in the &lt;tt&gt;Collection&lt;/tt&gt; interface, on the contracts of the
                  &lt;tt&gt;iterator&lt;/tt&gt;, &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt;, and
                  &lt;tt&gt;hashCode&lt;/tt&gt; methods.  Declarations for other inherited methods are
                  also included here for convenience.&lt;p&gt;
                  The &lt;tt&gt;List&lt;/tt&gt; interface provides four methods for positional (indexed)
                  access to list elements.  Lists (like Java arrays) are zero based.  Note
                  that these operations may execute in time proportional to the index value
                  for some implementations (the &lt;tt&gt;LinkedList&lt;/tt&gt; class, for
                  example). Thus, iterating over the elements in a list is typically
                  preferable to indexing through it if the caller does not know the
                  implementation.&lt;p&gt;
                  The &lt;tt&gt;List&lt;/tt&gt; interface provides a special iterator, called a
                  &lt;tt&gt;ListIterator&lt;/tt&gt;, that allows element insertion and replacement, and
                  bidirectional access in addition to the normal operations that the
                  &lt;tt&gt;Iterator&lt;/tt&gt; interface provides.  A method is provided to obtain a
                  list iterator that starts at a specified position in the list.&lt;p&gt;
                  The &lt;tt&gt;List&lt;/tt&gt; interface provides two methods to search for a specified
                  object.  From a performance standpoint, these methods should be used with
                  caution.  In many implementations they will perform costly linear
                  searches.&lt;p&gt;
                  The &lt;tt&gt;List&lt;/tt&gt; interface provides two methods to efficiently insert and
                  remove multiple elements at an arbitrary point in the list.&lt;p&gt;
                  Note: While it is permissible for lists to contain themselves as elements,
                  extreme caution is advised: the &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;hashCode&lt;/tt&gt;
                  methods are no longer well defined on such a list.
                  &lt;p&gt;Some list implementations have restrictions on the elements that
                  they may contain.  For example, some implementations prohibit null elements,
                  and some have restrictions on the types of their elements.  Attempting to
                  add an ineligible element throws an unchecked exception, typically
                  &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.  Attempting
                  to query the presence of an ineligible element may throw an exception,
                  or it may simply return false; some implementations will exhibit the former
                  behavior and some will exhibit the latter.  More generally, attempting an
                  operation on an ineligible element whose completion would not result in
                  the insertion of an ineligible element into the list may throw an
                  exception or it may succeed, at the option of the implementation.
                  Such exceptions are marked as &quot;optional&quot; in the specification for this
                  interface.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <E>
                       the type of elements in this list                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    Set                    
                </see>
                <see>
                    ArrayList                    
                </see>
                <see>
                    LinkedList                    
                </see>
                <see>
                    Vector                    
                </see>
                <see>
                    Arrays#asList(Object[])                    
                </see>
                <see>
                    Collections#nCopies(int,Object)                    
                </see>
                <see>
                    Collections#EMPTY_LIST                    
                </see>
                <see>
                    AbstractList                    
                </see>
                <see>
                    AbstractSequentialList                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="size" type="int" line="112"/>
            <javadoc line="112">
                Returns the number of elements in this list.  If this list contains
                  more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns
                  &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.                
                <return>
                    the number of elements in this list                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="121"/>
            <javadoc line="121">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements.                
                <return>
                    <tt>true</tt> if this list contains no elements                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="128"/>
            <javadoc line="128">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this list contains
                  at least one element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this list is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this list contains the specified element                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this list
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      list does not permit null elements
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="145"/>
            <javadoc line="145">
                Returns an iterator over the elements in this list in proper sequence.                
                <return>
                    an iterator over the elements in this list in proper sequence                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="152"/>
            <javadoc line="152">
                Returns an array containing all of the elements in this list in proper
                  sequence (from first to last element).
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this list.  (In other words, this method must
                  allocate a new array even if this list is backed by an array).
                  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this list in proper
                      sequence                    
                </return>
                <see>
                    Arrays#asList(Object[])                    
                </see>
            </javadoc>
            <method name="toArray" type="T[]" line="170"/>
            <javadoc line="170">
                Returns an array containing all of the elements in this list in
                  proper sequence (from first to last element); the runtime type of
                  the returned array is that of the specified array.  If the list fits
                  in the specified array, it is returned therein.  Otherwise, a new
                  array is allocated with the runtime type of the specified array and
                  the size of this list.
                  &lt;p&gt;If the list fits in the specified array with room to spare (i.e.,
                  the array has more elements than the list), the element in the array
                  immediately following the end of the list is set to &lt;tt&gt;null&lt;/tt&gt;.
                  (This is useful in determining the length of the list &lt;i&gt;only&lt;/i&gt; if
                  the caller knows that the list does not contain any null elements.)
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a list known to contain only strings.
                  The following code can be used to dump the list into a newly
                  allocated array of &lt;tt&gt;String&lt;/tt&gt;:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of this list are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing the elements of this list                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this list                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="213"/>
            <javadoc line="213">
                Appends the specified element to the end of this list (optional
                  operation).
                  &lt;p&gt;Lists that support this operation may place limitations on what
                  elements may be added to this list.  In particular, some
                  lists will refuse to add null elements, and others will impose
                  restrictions on the type of elements that may be added.  List
                  classes should clearly specify in their documentation any restrictions
                  on what elements may be added.                
                <param>
                    e element to be appended to this list                    
                </param>
                <return>
                    <tt>true</tt> (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>add</tt> operation
                      is not supported by this list                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this list                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      list does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of this element
                      prevents it from being added to this list                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="237"/>
            <javadoc line="237">
                Removes the first occurrence of the specified element from this list,
                  if it is present (optional operation).  If this list does not contain
                  the element, it is unchanged.  More formally, removes the element with
                  the lowest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;
                  (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list
                  contained the specified element (or equivalently, if this list changed
                  as a result of the call).                
                <param>
                    o element to be removed from this list, if present                    
                </param>
                <return>
                    <tt>true</tt> if this list contained the specified element                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this list
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      list does not permit null elements
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    UnsupportedOperationException if the <tt>remove</tt> operation
                      is not supported by this list                    
                </throws>
            </javadoc>
            <method name="containsAll" type="boolean" line="263"/>
            <javadoc line="263">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains all of the elements of the
                  specified collection.                
                <param>
                    c collection to be checked for containment in this list                    
                </param>
                <return>
                    <tt>true</tt> if this list contains all of the elements of the
                      specified collection                    
                </return>
                <throws>
                    ClassCastException if the types of one or more elements
                      in the specified collection are incompatible with this
                      list
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified collection contains one
                      or more null elements and this list does not permit null
                      elements
                      (<a href="Collection.html#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="283"/>
            <javadoc line="283">
                Appends all of the elements in the specified collection to the end of
                  this list, in the order that they are returned by the specified
                  collection&apos;s iterator (optional operation).  The behavior of this
                  operation is undefined if the specified collection is modified while
                  the operation is in progress.  (Note that this will occur if the
                  specified collection is this list, and it&apos;s nonempty.)                
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    <tt>true</tt> if this list changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>addAll</tt> operation
                      is not supported by this list                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of the specified
                      collection prevents it from being added to this list                    
                </throws>
                <throws>
                    NullPointerException if the specified collection contains one
                      or more null elements and this list does not permit null
                      elements, or if the specified collection is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of an element of the
                      specified collection prevents it from being added to this list                    
                </throws>
                <see>
                    #add(Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="306"/>
            <javadoc line="306">
                Inserts all of the elements in the specified collection into this
                  list at the specified position (optional operation).  Shifts the
                  element currently at that position (if any) and any subsequent
                  elements to the right (increases their indices).  The new elements
                  will appear in this list in the order that they are returned by the
                  specified collection&apos;s iterator.  The behavior of this operation is
                  undefined if the specified collection is modified while the
                  operation is in progress.  (Note that this will occur if the specified
                  collection is this list, and it&apos;s nonempty.)                
                <param>
                    index index at which to insert the first element from the
                      specified collection                    
                </param>
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    <tt>true</tt> if this list changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>addAll</tt> operation
                      is not supported by this list                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of the specified
                      collection prevents it from being added to this list                    
                </throws>
                <throws>
                    NullPointerException if the specified collection contains one
                      or more null elements and this list does not permit null
                      elements, or if the specified collection is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of an element of the
                      specified collection prevents it from being added to this list                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      (<tt>index &lt; 0 || index &gt; size()</tt>)                    
                </throws>
            </javadoc>
            <method name="removeAll" type="boolean" line="335"/>
            <javadoc line="335">
                Removes from this list all of its elements that are contained in the
                  specified collection (optional operation).                
                <param>
                    c collection containing elements to be removed from this list                    
                </param>
                <return>
                    <tt>true</tt> if this list changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>removeAll</tt> operation
                      is not supported by this list                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of this list
                      is incompatible with the specified collection
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this list contains a null element and the
                      specified collection does not permit null elements
                      (<a href="Collection.html#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="retainAll" type="boolean" line="355"/>
            <javadoc line="355">
                Retains only the elements in this list that are contained in the
                  specified collection (optional operation).  In other words, removes
                  from this list all of its elements that are not contained in the
                  specified collection.                
                <param>
                    c collection containing elements to be retained in this list                    
                </param>
                <return>
                    <tt>true</tt> if this list changed as a result of the call                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>retainAll</tt> operation
                      is not supported by this list                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of this list
                      is incompatible with the specified collection
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this list contains a null element and the
                      specified collection does not permit null elements
                      (<a href="Collection.html#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="clear" type="void" line="377"/>
            <javadoc line="377">
                Removes all of the elements from this list (optional operation).
                  The list will be empty after this call returns.                
                <throws>
                    UnsupportedOperationException if the <tt>clear</tt> operation
                      is not supported by this list                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="389"/>
            <javadoc line="389">
                Compares the specified object with this list for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if and only if the specified object is also a list, both
                  lists have the same size, and all corresponding pairs of elements in
                  the two lists are &lt;i&gt;equal&lt;/i&gt;.  (Two elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; are &lt;i&gt;equal&lt;/i&gt; if &lt;tt&gt;(e1==null ? e2==null :
                  e1.equals(e2))&lt;/tt&gt;.)  In other words, two lists are defined to be
                  equal if they contain the same elements in the same order.  This
                  definition ensures that the equals method works properly across
                  different implementations of the &lt;tt&gt;List&lt;/tt&gt; interface.                
                <param>
                    o the object to be compared for equality with this list                    
                </param>
                <return>
                    <tt>true</tt> if the specified object is equal to this list                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="405"/>
            <javadoc line="405">
                Returns the hash code value for this list.  The hash code of a list
                  is defined to be the result of the following calculation:
                  &lt;pre&gt;
                  int hashCode = 1;
                  for (E e : list)
                  hashCode = 31hashCode + (e==null ? 0 : e.hashCode());
                  &lt;/pre&gt;
                  This ensures that &lt;tt&gt;list1.equals(list2)&lt;/tt&gt; implies that
                  &lt;tt&gt;list1.hashCode()==list2.hashCode()&lt;/tt&gt; for any two lists,
                  &lt;tt&gt;list1&lt;/tt&gt; and &lt;tt&gt;list2&lt;/tt&gt;, as required by the general
                  contract of {@link Object#hashCode}.                
                <return>
                    the hash code value for this list                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    #equals(Object)                    
                </see>
            </javadoc>
            <method name="get" type="E" line="427"/>
            <javadoc line="427">
                Returns the element at the specified position in this list.                
                <param>
                    index index of the element to return                    
                </param>
                <return>
                    the element at the specified position in this list                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      (<tt>index &lt; 0 || index &gt;= size()</tt>)                    
                </throws>
            </javadoc>
            <method name="set" type="E" line="437"/>
            <javadoc line="437">
                Replaces the element at the specified position in this list with the
                  specified element (optional operation).                
                <param>
                    index index of the element to replace                    
                </param>
                <param>
                    element element to be stored at the specified position                    
                </param>
                <return>
                    the element previously at the specified position                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>set</tt> operation
                      is not supported by this list                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this list                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and
                      this list does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this list                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      (<tt>index &lt; 0 || index &gt;= size()</tt>)                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="457"/>
            <javadoc line="457">
                Inserts the specified element at the specified position in this list
                  (optional operation).  Shifts the element currently at that position
                  (if any) and any subsequent elements to the right (adds one to their
                  indices).                
                <param>
                    index index at which the specified element is to be inserted                    
                </param>
                <param>
                    element element to be inserted                    
                </param>
                <throws>
                    UnsupportedOperationException if the <tt>add</tt> operation
                      is not supported by this list                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this list                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and
                      this list does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this list                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      (<tt>index &lt; 0 || index &gt; size()</tt>)                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="478"/>
            <javadoc line="478">
                Removes the element at the specified position in this list (optional
                  operation).  Shifts any subsequent elements to the left (subtracts one
                  from their indices).  Returns the element that was removed from the
                  list.                
                <param>
                    index the index of the element to be removed                    
                </param>
                <return>
                    the element previously at the specified position                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>remove</tt> operation
                      is not supported by this list                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      (<tt>index &lt; 0 || index &gt;= size()</tt>)                    
                </throws>
            </javadoc>
            <method name="indexOf" type="int" line="496"/>
            <javadoc line="496">
                Returns the index of the first occurrence of the specified element
                  in this list, or -1 if this list does not contain the element.
                  More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    o element to search for                    
                </param>
                <return>
                    the index of the first occurrence of the specified element in
                      this list, or -1 if this list does not contain the element                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this list
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      list does not permit null elements
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="lastIndexOf" type="int" line="515"/>
            <javadoc line="515">
                Returns the index of the last occurrence of the specified element
                  in this list, or -1 if this list does not contain the element.
                  More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    o element to search for                    
                </param>
                <return>
                    the index of the last occurrence of the specified element in
                      this list, or -1 if this list does not contain the element                    
                </return>
                <throws>
                    ClassCastException if the type of the specified element
                      is incompatible with this list
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null and this
                      list does not permit null elements
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="537"/>
            <javadoc line="537">
                Returns a list iterator over the elements in this list (in proper
                  sequence).                
                <return>
                    a list iterator over the elements in this list (in proper
                      sequence)                    
                </return>
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="546"/>
            <javadoc line="546">
                Returns a list iterator over the elements in this list (in proper
                  sequence), starting at the specified position in the list.
                  The specified index indicates the first element that would be
                  returned by an initial call to {@link ListIterator#next next}.
                  An initial call to {@link ListIterator#previous previous} would
                  return the element with the specified index minus one.                
                <param>
                    index index of the first element to be returned from the
                      list iterator (by a call to {@link ListIterator#next next})                    
                </param>
                <return>
                    a list iterator over the elements in this list (in proper
                      sequence), starting at the specified position in the list                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index > size()})                    
                </throws>
            </javadoc>
            <method name="subList" type="List<E>" line="565"/>
            <javadoc line="565">
                Returns a view of the portion of this list between the specified
                  &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, and &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.  (If
                  &lt;tt&gt;fromIndex&lt;/tt&gt; and &lt;tt&gt;toIndex&lt;/tt&gt; are equal, the returned list is
                  empty.)  The returned list is backed by this list, so non-structural
                  changes in the returned list are reflected in this list, and vice-versa.
                  The returned list supports all of the optional list operations supported
                  by this list.&lt;p&gt;
                  This method eliminates the need for explicit range operations (of
                  the sort that commonly exist for arrays).  Any operation that expects
                  a list can be used as a range operation by passing a subList view
                  instead of a whole list.  For example, the following idiom
                  removes a range of elements from a list:
                  &lt;pre&gt;
                  list.subList(from, to).clear();
                  &lt;/pre&gt;
                  Similar idioms may be constructed for &lt;tt&gt;indexOf&lt;/tt&gt; and
                  &lt;tt&gt;lastIndexOf&lt;/tt&gt;, and all of the algorithms in the
                  &lt;tt&gt;Collections&lt;/tt&gt; class can be applied to a subList.&lt;p&gt;
                  The semantics of the list returned by this method become undefined if
                  the backing list (i.e., this list) is &lt;i&gt;structurally modified&lt;/i&gt; in
                  any way other than via the returned list.  (Structural modifications are
                  those that change the size of this list, or otherwise perturb it in such
                  a fashion that iterations in progress may yield incorrect results.)                
                <param>
                    fromIndex low endpoint (inclusive) of the subList                    
                </param>
                <param>
                    toIndex high endpoint (exclusive) of the subList                    
                </param>
                <return>
                    a view of the specified range within this list                    
                </return>
                <throws>
                    IndexOutOfBoundsException for an illegal endpoint index value
                      (<tt>fromIndex &lt; 0 || toIndex &gt; size ||
                      fromIndex &gt; toIndex</tt>)                    
                </throws>
            </javadoc>
        </interface>
    </source>