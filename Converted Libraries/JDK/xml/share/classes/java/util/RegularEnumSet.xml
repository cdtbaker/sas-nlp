<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="RegularEnumSet" line="2">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="EnumSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <javadoc line="2">
                Private implementation class for EnumSet, for &quot;regular sized&quot; enum types
                  (i.e., those with 64 or fewer enum constants).                
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.5                    
                </since>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="10"/>
            <declaration name="elements" type="long" line="11"/>
            <javadoc line="11">
                Bit vector representation of this set.  The 2^k bit indicates the
                  presence of universe[k] in this set.                
            </javadoc>
            <method name="RegularEnumSet" type="constructor" line="16">
                <params>
                    <param name="elementType" type="Class<E>"/>
                    <param name="universe" type="Enum[]"/>
                </params>
            </method>
            <method name="addRange" type="void" line="19">
                <params>
                    <param name="from" type="E"/>
                    <param name="to" type="E"/>
                </params>
            </method>
            <method name="addAll" type="void" line="22"/>
            <method name="complement" type="void" line="25">
                <scope line="26"/>
            </method>
            <javadoc line="31">
                Returns an iterator over the elements contained in this set.  The
                  iterator traverses the elements in their &lt;i&gt;natural order&lt;/i&gt; (which is
                  the order in which the enum constants are declared). The returned
                  Iterator is a &quot;snapshot&quot; iterator that will never throw {@link ConcurrentModificationException}; the elements are traversed as they
                  existed when this call was invoked.                
                <return>
                    an iterator over the elements contained in this set                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="39"/>
            <class name="EnumSetIterator" line="42">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="unseen" type="long" line="43"/>
                <javadoc line="43">
                    A bit vector representing the elements in the set not yet
                      returned by this iterator.                    
                </javadoc>
                <declaration name="lastReturned" type="long" line="48"/>
                <javadoc line="48">
                    The bit representing the last element returned by this iterator
                      but not removed, or zero if no such element exists.                    
                </javadoc>
                <method name="EnumSetIterator" type="constructor" line="53"/>
                <method name="hasNext" type="boolean" line="56"/>
                <method name="next" type="E" line="59"/>
                <method name="remove" type="void" line="65"/>
            </class>
            <javadoc line="71">
                Returns the number of elements in this set.                
                <return>
                    the number of elements in this set                    
                </return>
            </javadoc>
            <method name="size" type="int" line="75"/>
            <javadoc line="78">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements.                
                <return>
                    <tt>true</tt> if this set contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="82"/>
            <javadoc line="85">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element.                
                <param>
                    e element to be checked for containment in this collection                    
                </param>
                <return>
                    <tt>true</tt> if this set contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="90">
                <params>
                    <param name="e" type="Object"/>
                </params>
                <declaration name="eClass" type="Class" line="92"/>
            </method>
            <javadoc line="96">
                Adds the specified element to this set if it is not already present.                
                <param>
                    e element to be added to this set                    
                </param>
                <return>
                    <tt>true</tt> if the set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if <tt>e</tt> is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="102">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="oldElements" type="long" line="104"/>
            </method>
            <javadoc line="108">
                Removes the specified element from this set if it is present.                
                <param>
                    e element to be removed from this set, if present                    
                </param>
                <return>
                    <tt>true</tt> if the set contained the specified element                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="113">
                <params>
                    <param name="e" type="Object"/>
                </params>
                <declaration name="eClass" type="Class" line="115"/>
                <declaration name="oldElements" type="long" line="117"/>
            </method>
            <javadoc line="121">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains all of the elements
                  in the specified collection.                
                <param>
                    c collection to be checked for containment in this set                    
                </param>
                <return>
                    <tt>true</tt> if this set contains all of the elements
                      in the specified collection                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="containsAll" type="boolean" line="129">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="es" type="RegularEnumSet" line="131"/>
            </method>
            <javadoc line="135">
                Adds all of the elements in the specified collection to this set.                
                <param>
                    c collection whose elements are to be added to this set                    
                </param>
                <return>
                    <tt>true</tt> if this set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="142">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="es" type="RegularEnumSet" line="144"/>
                <scope line="145"/>
                <declaration name="oldElements" type="long" line="149"/>
            </method>
            <javadoc line="153">
                Removes from this set all of its elements that are contained in
                  the specified collection.                
                <param>
                    c elements to be removed from this set                    
                </param>
                <return>
                    <tt>true</tt> if this set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="removeAll" type="boolean" line="160">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="es" type="RegularEnumSet" line="162"/>
                <declaration name="oldElements" type="long" line="164"/>
            </method>
            <javadoc line="168">
                Retains only the elements in this set that are contained in the
                  specified collection.                
                <param>
                    c elements to be retained in this set                    
                </param>
                <return>
                    <tt>true</tt> if this set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="retainAll" type="boolean" line="175">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="es" type="RegularEnumSet&lt;?&gt;" line="177"/>
                <scope line="178">
                    <declaration name="changed" type="boolean" line="179"/>
                </scope>
                <declaration name="oldElements" type="long" line="183"/>
            </method>
            <javadoc line="187">
                Removes all of the elements from this set.                
            </javadoc>
            <method name="clear" type="void" line="190"/>
            <javadoc line="193">
                Compares the specified object with this set for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the given object is also a set, the two sets have
                  the same size, and every member of the given set is contained in
                  this set.                
                <param>
                    e object to be compared for equality with this set                    
                </param>
                <return>
                    <tt>true</tt> if the specified object is equal to this set                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="201">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="es" type="RegularEnumSet" line="203"/>
            </method>
        </class>
    </source>