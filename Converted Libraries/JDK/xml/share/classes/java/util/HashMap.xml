<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io"/>
        <class name="HashMap" line="29">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <extends class="AbstractMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <comment line="246">
                internal utilities                
            </comment>
            <comment line="852">
                Subclass overrides these to alter behavior of views&apos; iterator() method                
            </comment>
            <comment line="864">
                Views                
            </comment>
            <comment line="1049">
                These methods are used when serializing HashSets                
            </comment>
            <implements interface="Map">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="29">
                Hash table based implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface.  This
                  implementation provides all of the optional map operations, and permits
                  &lt;tt&gt;null&lt;/tt&gt; values and the &lt;tt&gt;null&lt;/tt&gt; key.  (The &lt;tt&gt;HashMap&lt;/tt&gt;
                  class is roughly equivalent to &lt;tt&gt;Hashtable&lt;/tt&gt;, except that it is
                  unsynchronized and permits nulls.)  This class makes no guarantees as to
                  the order of the map; in particular, it does not guarantee that the order
                  will remain constant over time.
                  &lt;p&gt;This implementation provides constant-time performance for the basic
                  operations (&lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;), assuming the hash function
                  disperses the elements properly among the buckets.  Iteration over
                  collection views requires time proportional to the &quot;capacity&quot; of the
                  &lt;tt&gt;HashMap&lt;/tt&gt; instance (the number of buckets) plus its size (the number
                  of key-value mappings).  Thus, it&apos;s very important not to set the initial
                  capacity too high (or the load factor too low) if iteration performance is
                  important.
                  &lt;p&gt;An instance of &lt;tt&gt;HashMap&lt;/tt&gt; has two parameters that affect its
                  performance: &lt;i&gt;initial capacity&lt;/i&gt; and &lt;i&gt;load factor&lt;/i&gt;.  The
                  &lt;i&gt;capacity&lt;/i&gt; is the number of buckets in the hash table, and the initial
                  capacity is simply the capacity at the time the hash table is created.  The
                  &lt;i&gt;load factor&lt;/i&gt; is a measure of how full the hash table is allowed to
                  get before its capacity is automatically increased.  When the number of
                  entries in the hash table exceeds the product of the load factor and the
                  current capacity, the hash table is &lt;i&gt;rehashed&lt;/i&gt; (that is, internal data
                  structures are rebuilt) so that the hash table has approximately twice the
                  number of buckets.
                  &lt;p&gt;As a general rule, the default load factor (.75) offers a good tradeoff
                  between time and space costs.  Higher values decrease the space overhead
                  but increase the lookup cost (reflected in most of the operations of the
                  &lt;tt&gt;HashMap&lt;/tt&gt; class, including &lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;).  The
                  expected number of entries in the map and its load factor should be taken
                  into account when setting its initial capacity, so as to minimize the
                  number of rehash operations.  If the initial capacity is greater
                  than the maximum number of entries divided by the load factor, no
                  rehash operations will ever occur.
                  &lt;p&gt;If many mappings are to be stored in a &lt;tt&gt;HashMap&lt;/tt&gt; instance,
                  creating it with a sufficiently large capacity will allow the mappings to
                  be stored more efficiently than letting it perform automatic rehashing as
                  needed to grow the table.
                  &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  If multiple threads access a hash map concurrently, and at least one of
                  the threads modifies the map structurally, it &lt;i&gt;must&lt;/i&gt; be
                  synchronized externally.  (A structural modification is any operation
                  that adds or deletes one or more mappings; merely changing the value
                  associated with a key that an instance already contains is not a
                  structural modification.)  This is typically accomplished by
                  synchronizing on some object that naturally encapsulates the map.
                  If no such object exists, the map should be &quot;wrapped&quot; using the{@link Collections#synchronizedMap Collections.synchronizedMap}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access to the map:&lt;pre&gt;
                  Map m = Collections.synchronizedMap(new HashMap(...));&lt;/pre&gt;
                  &lt;p&gt;The iterators returned by all of this class&apos;s &quot;collection view methods&quot;
                  are &lt;i&gt;fail-fast&lt;/i&gt;: if the map is structurally modified at any time after
                  the iterator is created, in any way except through the iterator&apos;s own
                  &lt;tt&gt;remove&lt;/tt&gt; method, the iterator will throw a{@link ConcurrentModificationException}.  Thus, in the face of concurrent
                  modification, the iterator fails quickly and cleanly, rather than risking
                  arbitrary, non-deterministic behavior at an undetermined time in the
                  future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness: &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <K>
                       the type of keys maintained by this map                    
                </param>
                <param>
                    <V>
                       the type of mapped values                    
                </param>
                <author>
                    Doug Lea                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Object#hashCode()                    
                </see>
                <see>
                    Collection                    
                </see>
                <see>
                    Map                    
                </see>
                <see>
                    TreeMap                    
                </see>
                <see>
                    Hashtable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_INITIAL_CAPACITY" type="int" line="129"/>
            <javadoc line="129">
                The default initial capacity - MUST be a power of two.                
            </javadoc>
            <declaration name="MAXIMUM_CAPACITY" type="int" line="134"/>
            <javadoc line="134">
                The maximum capacity, used if a higher value is implicitly specified
                  by either of the constructors with arguments.
                  MUST be a power of two &lt;= 1&lt;&lt;30.                
            </javadoc>
            <declaration name="DEFAULT_LOAD_FACTOR" type="float" line="141"/>
            <javadoc line="141">
                The load factor used when none specified in constructor.                
            </javadoc>
            <declaration name="table" type="Entry[]" line="146"/>
            <javadoc line="146">
                The table, resized as necessary. Length MUST Always be a power of two.                
            </javadoc>
            <declaration name="size" type="int" line="151"/>
            <javadoc line="151">
                The number of key-value mappings contained in this map.                
            </javadoc>
            <declaration name="threshold" type="int" line="156"/>
            <javadoc line="156">
                The next size value at which to resize (capacity  load factor).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="loadFactor" type="float" line="162"/>
            <javadoc line="162">
                The load factor for the hash table.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="modCount" type="int" line="169"/>
            <javadoc line="169">
                The number of times this HashMap has been structurally modified
                  Structural modifications are those that change the number of mappings in
                  the HashMap or otherwise modify its internal structure (e.g.,
                  rehash).  This field is used to make iterators on Collection-views of
                  the HashMap fail-fast.  (See ConcurrentModificationException).                
            </javadoc>
            <javadoc line="178">
                Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial
                  capacity and load factor.                
                <param>
                    initialCapacity the initial capacity                    
                </param>
                <param>
                    loadFactor      the load factor                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is negative
                      or the load factor is nonpositive                    
                </throws>
            </javadoc>
            <method name="HashMap" type="constructor" line="187">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
                <comment line="198">
                    Find a power of 2 &gt;= initialCapacity                    
                </comment>
                <declaration name="capacity" type="int" line="198"/>
            </method>
            <javadoc line="208">
                Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial
                  capacity and the default load factor (0.75).                
                <param>
                    initialCapacity the initial capacity.                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is negative.                    
                </throws>
            </javadoc>
            <method name="HashMap" type="constructor" line="215">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="219">
                Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity
                  (16) and the default load factor (0.75).                
            </javadoc>
            <method name="HashMap" type="constructor" line="223"/>
            <javadoc line="230">
                Constructs a new &lt;tt&gt;HashMap&lt;/tt&gt; with the same mappings as the
                  specified &lt;tt&gt;Map&lt;/tt&gt;.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with
                  default load factor (0.75) and an initial capacity sufficient to
                  hold the mappings in the specified &lt;tt&gt;Map&lt;/tt&gt;.                
                <param>
                    m the map whose mappings are to be placed in this map                    
                </param>
                <throws>
                    NullPointerException if the specified map is null                    
                </throws>
            </javadoc>
            <method name="HashMap" type="constructor" line="239">
                <params>
                    <param name="m" type="Map<? extends K,? extends V>"/>
                </params>
            </method>
            <javadoc line="247">
                Initialization hook for subclasses. This method is called
                  in all constructors and pseudo-constructors (clone, readObject)
                  after HashMap has been initialized but before any entries have
                  been inserted.  (In the absence of this method, readObject would
                  require explicit knowledge of subclasses.)                
            </javadoc>
            <method name="init" type="void" line="254"/>
            <javadoc line="257">
                Applies a supplemental hash function to a given hashCode, which
                  defends against poor quality hash functions.  This is critical
                  because HashMap uses power-of-two length hash tables, that
                  otherwise encounter collisions for hashCodes that do not differ
                  in lower bits. Note: Null keys always map to hash 0, thus index 0.                
            </javadoc>
            <method name="hash" type="int" line="264">
                <params>
                    <param name="h" type="int"/>
                </params>
                <comment line="266">
                    This function ensures that hashCodes that differ only by
                     constant multiples at each bit position have a bounded
                     number of collisions (approximately 8 at default load factor).                    
                </comment>
            </method>
            <javadoc line="272">
                Returns index for hash code h.                
            </javadoc>
            <method name="indexFor" type="int" line="275">
                <params>
                    <param name="h" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="279">
                Returns the number of key-value mappings in this map.                
                <return>
                    the number of key-value mappings in this map                    
                </return>
            </javadoc>
            <method name="size" type="int" line="284"/>
            <javadoc line="288">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings.                
                <return>
                    <tt>true</tt> if this map contains no key-value mappings                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="293"/>
            <javadoc line="297">
                Returns the value to which the specified key is mapped,
                  or {@code null} if this map contains no mapping for the key.
                  &lt;p&gt;More formally, if this map contains a mapping from a key{@code k} to a value {@code v} such that {@code (key==null ? k==null :
                  key.equals(k))}, then this method returns {@code v}; otherwise
                  it returns {@code null}.  (There can be at most one such mapping.)
                  &lt;p&gt;A return value of {@code null} does not &lt;i&gt;necessarily&lt;/i&gt;
                  indicate that the map contains no mapping for the key; it&apos;s also
                  possible that the map explicitly maps the key to {@code null}.
                  The {@link #containsKey containsKey} operation may be used to
                  distinguish these two cases.                
                <see>
                    #put(Object,Object)                    
                </see>
            </javadoc>
            <method name="get" type="V" line="314">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="hash" type="int" line="317"/>
                <scope line="320">
                    <declaration name="k" type="Object" line="321"/>
                </scope>
            </method>
            <javadoc line="328">
                Offloaded version of get() to look up null keys.  Null keys map
                  to index 0.  This null case is split out into separate methods
                  for the sake of performance in the two most commonly used
                  operations (get and put), but incorporated with conditionals in
                  others.                
            </javadoc>
            <method name="getForNullKey" type="V" line="335">
                <scope line="336"/>
            </method>
            <javadoc line="343">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the
                  specified key.                
                <param>
                    key   The key whose presence in this map is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this map contains a mapping for the specified
                      key.                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="351">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="355">
                Returns the entry associated with the specified key in the
                  HashMap.  Returns null if the HashMap contains no mapping
                  for the key.                
            </javadoc>
            <method name="getEntry" type="Entry<K,V>" line="360">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="hash" type="int" line="361"/>
                <scope line="364">
                    <declaration name="k" type="Object" line="365"/>
                </scope>
            </method>
            <javadoc line="374">
                Associates the specified value with the specified key in this map.
                  If the map previously contained a mapping for the key, the old
                  value is replaced.                
                <param>
                    key key with which the specified value is to be associated                    
                </param>
                <param>
                    value value to be associated with the specified key                    
                </param>
                <return>
                    the previous value associated with <tt>key</tt>, or
                      <tt>null</tt> if there was no mapping for <tt>key</tt>.
                      (A <tt>null</tt> return can also indicate that the map
                      previously associated <tt>null</tt> with <tt>key</tt>.)                    
                </return>
            </javadoc>
            <method name="put" type="V" line="386">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
                <declaration name="hash" type="int" line="389"/>
                <declaration name="i" type="int" line="390"/>
                <scope line="391">
                    <declaration name="k" type="Object" line="392"/>
                    <scope line="393">
                        <declaration name="oldValue" type="V" line="394"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="406">
                Offloaded version of put for null keys                
            </javadoc>
            <method name="putForNullKey" type="V" line="409">
                <params>
                    <param name="value" type="V"/>
                </params>
                <scope line="410">
                    <scope line="411">
                        <declaration name="oldValue" type="V" line="412"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="423">
                This method is used instead of put by constructors and
                  pseudoconstructors (clone, readObject).  It does not resize the table,
                  check for comodification, etc.  It calls createEntry rather than
                  addEntry.                
            </javadoc>
            <method name="putForCreate" type="void" line="429">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
                <comment line="434">
                    Look for preexisting entry for key.  This will never happen for
                     clone or deserialize.  It will only happen for construction if the
                     input Map is a sorted map whose ordering is inconsistent w equals.                    
                </comment>
                <declaration name="hash" type="int" line="430"/>
                <declaration name="i" type="int" line="431"/>
                <scope line="438">
                    <declaration name="k" type="Object" line="439"/>
                    <scope line="441"/>
                </scope>
            </method>
            <method name="putAllForCreate" type="void" line="450">
                <params>
                    <param name="m" type="Map<? extends K,? extends V>"/>
                </params>
            </method>
            <javadoc line="455">
                Rehashes the contents of this map into a new array with a
                  larger capacity.  This method is called automatically when the
                  number of keys in this map reaches its threshold.
                  If current capacity is MAXIMUM_CAPACITY, this method does not
                  resize the map, but sets threshold to Integer.MAX_VALUE.
                  This has the effect of preventing future calls.                
                <param>
                    newCapacity the new capacity, MUST be a power of two;
                      must be greater than current capacity unless current
                      capacity is MAXIMUM_CAPACITY (in which case value
                      is irrelevant).                    
                </param>
            </javadoc>
            <method name="resize" type="void" line="469">
                <params>
                    <param name="newCapacity" type="int"/>
                </params>
                <declaration name="oldTable" type="Entry[]" line="470"/>
                <declaration name="oldCapacity" type="int" line="471"/>
                <scope line="472"/>
                <declaration name="newTable" type="Entry[]" line="477"/>
            </method>
            <javadoc line="483">
                Transfers all entries from current table to newTable.                
            </javadoc>
            <method name="transfer" type="void" line="486">
                <params>
                    <param name="newTable" type="Entry[]"/>
                </params>
                <declaration name="src" type="Entry[]" line="487"/>
                <declaration name="newCapacity" type="int" line="488"/>
                <scope line="489">
                    <declaration name="e" type="Entry&lt;K,V&gt;" line="490"/>
                    <scope line="491">
                        <scope line="493">
                            <declaration name="next" type="Entry&lt;K,V&gt;" line="494"/>
                            <declaration name="i" type="int" line="495"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="504">
                Copies all of the mappings from the specified map to this map.
                  These mappings will replace any mappings that this map had for
                  any of the keys currently in the specified map.                
                <param>
                    m mappings to be stored in this map                    
                </param>
                <throws>
                    NullPointerException if the specified map is null                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="512">
                <params>
                    <param name="m" type="Map<? extends K,? extends V>"/>
                </params>
                <comment line="518">
                    Expand the map if the map if the number of mappings to be added
                     is greater than or equal to threshold.  This is conservative; the
                     obvious condition is (m.size() + size) &gt;= threshold, but this
                     condition could result in a map with twice the appropriate capacity,
                     if the keys to be added overlap with the keys already in this map.
                     By using the conservative calculation, we subject ourself
                     to at most one extra resize.                    
                </comment>
                <declaration name="numKeysToBeAdded" type="int" line="513"/>
                <scope line="526">
                    <declaration name="targetCapacity" type="int" line="527"/>
                    <declaration name="newCapacity" type="int" line="530"/>
                </scope>
            </method>
            <javadoc line="541">
                Removes the mapping for the specified key from this map if present.                
                <param>
                    key key whose mapping is to be removed from the map                    
                </param>
                <return>
                    the previous value associated with <tt>key</tt>, or
                      <tt>null</tt> if there was no mapping for <tt>key</tt>.
                      (A <tt>null</tt> return can also indicate that the map
                      previously associated <tt>null</tt> with <tt>key</tt>.)                    
                </return>
            </javadoc>
            <method name="remove" type="V" line="550">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="e" type="Entry&lt;K,V&gt;" line="551"/>
            </method>
            <javadoc line="555">
                Removes and returns the entry associated with the specified key
                  in the HashMap.  Returns null if the HashMap contains no mapping
                  for this key.                
            </javadoc>
            <method name="removeEntryForKey" type="Entry<K,V>" line="560">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="hash" type="int" line="561"/>
                <declaration name="i" type="int" line="562"/>
                <declaration name="prev" type="Entry&lt;K,V&gt;" line="563"/>
                <declaration name="e" type="Entry&lt;K,V&gt;" line="564"/>
                <scope line="566">
                    <declaration name="next" type="Entry&lt;K,V&gt;" line="567"/>
                    <declaration name="k" type="Object" line="568"/>
                    <scope line="570"/>
                </scope>
            </method>
            <javadoc line="587">
                Special version of remove for EntrySet.                
            </javadoc>
            <method name="removeMapping" type="Entry<K,V>" line="590">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="entry" type="Map.Entry&lt;K,V&gt;" line="594"/>
                <declaration name="key" type="Object" line="595"/>
                <declaration name="hash" type="int" line="596"/>
                <declaration name="i" type="int" line="597"/>
                <declaration name="prev" type="Entry&lt;K,V&gt;" line="598"/>
                <declaration name="e" type="Entry&lt;K,V&gt;" line="599"/>
                <scope line="601">
                    <declaration name="next" type="Entry&lt;K,V&gt;" line="602"/>
                    <scope line="603"/>
                </scope>
            </method>
            <javadoc line="620">
                Removes all of the mappings from this map.
                  The map will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="624">
                <declaration name="tab" type="Entry[]" line="626"/>
            </method>
            <javadoc line="632">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the
                  specified value.                
                <param>
                    value value whose presence in this map is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this map maps one or more keys to the
                      specified value                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="640">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="tab" type="Entry[]" line="644"/>
            </method>
            <javadoc line="652">
                Special-case code for containsValue with null argument                
            </javadoc>
            <method name="containsNullValue" type="boolean" line="655">
                <declaration name="tab" type="Entry[]" line="656"/>
            </method>
            <javadoc line="664">
                Returns a shallow copy of this &lt;tt&gt;HashMap&lt;/tt&gt; instance: the keys and
                  values themselves are not cloned.                
                <return>
                    a shallow copy of this map                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="670">
                <comment line="676">
                    assert false;                    
                </comment>
                <declaration name="result" type="HashMap&lt;K,V&gt;" line="671"/>
                <scope line="672"/>
                <scope line="674"/>
            </method>
            <class name="Entry" line="687">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <comment line="787">
                    next entry to return                    
                </comment>
                <comment line="788">
                    For fast-fail                    
                </comment>
                <comment line="789">
                    current slot                    
                </comment>
                <comment line="790">
                    current entry                    
                </comment>
                <implements interface="Map.Entry">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </implements>
                <declaration name="key" type="K" line="688"/>
                <declaration name="value" type="V" line="689"/>
                <declaration name="next" type="Entry&lt;K,V&gt;" line="690"/>
                <declaration name="hash" type="int" line="691"/>
                <javadoc line="693">
                    Creates new entry.                    
                </javadoc>
                <method name="Entry" type="constructor" line="696">
                    <params>
                        <param name="h" type="int"/>
                        <param name="k" type="K"/>
                        <param name="v" type="V"/>
                        <param name="n" type="Entry<K,V>"/>
                    </params>
                </method>
                <method name="getKey" type="K" line="703"/>
                <method name="getValue" type="V" line="707"/>
                <method name="setValue" type="V" line="711">
                    <params>
                        <param name="newValue" type="V"/>
                    </params>
                    <declaration name="oldValue" type="V" line="712"/>
                </method>
                <method name="equals" type="boolean" line="717">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry" line="720"/>
                    <declaration name="k1" type="Object" line="721"/>
                    <declaration name="k2" type="Object" line="722"/>
                    <scope line="723">
                        <declaration name="v1" type="Object" line="724"/>
                        <declaration name="v2" type="Object" line="725"/>
                    </scope>
                </method>
                <method name="hashCode" type="int" line="732"/>
                <method name="toString" type="String" line="737"/>
                <javadoc line="741">
                    This method is invoked whenever the value in an entry is
                      overwritten by an invocation of put(k,v) for a key k that&apos;s already
                      in the HashMap.                    
                </javadoc>
                <method name="recordAccess" type="void" line="746">
                    <params>
                        <param name="m" type="HashMap<K,V>"/>
                    </params>
                </method>
                <javadoc line="749">
                    This method is invoked whenever the entry is
                      removed from the table.                    
                </javadoc>
                <method name="recordRemoval" type="void" line="753">
                    <params>
                        <param name="m" type="HashMap<K,V>"/>
                    </params>
                </method>
            </class>
            <javadoc line="757">
                Adds a new entry with the specified key, value and hash code to
                  the specified bucket.  It is the responsibility of this
                  method to resize the table if appropriate.
                  Subclass overrides this to alter the behavior of put method.                
            </javadoc>
            <method name="addEntry" type="void" line="764">
                <params>
                    <param name="hash" type="int"/>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                    <param name="bucketIndex" type="int"/>
                </params>
                <declaration name="e" type="Entry&lt;K,V&gt;" line="765"/>
            </method>
            <javadoc line="771">
                Like addEntry except that this version is used when creating entries
                  as part of Map construction or &quot;pseudo-construction&quot; (cloning,
                  deserialization).  This version needn&apos;t worry about resizing the table.
                  Subclass overrides this to alter the behavior of HashMap(Map),
                  clone, and readObject.                
            </javadoc>
            <method name="createEntry" type="void" line="779">
                <params>
                    <param name="hash" type="int"/>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                    <param name="bucketIndex" type="int"/>
                </params>
                <declaration name="e" type="Entry&lt;K,V&gt;" line="780"/>
            </method>
            <class name="HashIterator" line="785">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <comment line="787">
                    next entry to return                    
                </comment>
                <comment line="788">
                    For fast-fail                    
                </comment>
                <comment line="789">
                    current slot                    
                </comment>
                <comment line="790">
                    current entry                    
                </comment>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="next" type="Entry&lt;K,V&gt;" line="786"/>
                <declaration name="expectedModCount" type="int" line="787"/>
                <declaration name="index" type="int" line="788"/>
                <declaration name="current" type="Entry&lt;K,V&gt;" line="789"/>
                <method name="HashIterator" type="constructor" line="791">
                    <comment line="794">
                        advance to first entry                        
                    </comment>
                    <scope line="793">
                        <declaration name="t" type="Entry[]" line="794"/>
                    </scope>
                </method>
                <method name="hasNext" type="boolean" line="800"/>
                <method name="nextEntry" type="Entry<K,V>" line="804">
                    <declaration name="e" type="Entry&lt;K,V&gt;" line="807"/>
                    <scope line="811">
                        <declaration name="t" type="Entry[]" line="812"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="820">
                    <declaration name="k" type="Object" line="825"/>
                </method>
            </class>
            <class name="ValueIterator" line="833">
                <extends class="HashIterator">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <comment line="787">
                    next entry to return                    
                </comment>
                <comment line="788">
                    For fast-fail                    
                </comment>
                <comment line="789">
                    current slot                    
                </comment>
                <comment line="790">
                    current entry                    
                </comment>
                <method name="next" type="V" line="834"/>
            </class>
            <class name="KeyIterator" line="839">
                <extends class="HashIterator">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <comment line="787">
                    next entry to return                    
                </comment>
                <comment line="788">
                    For fast-fail                    
                </comment>
                <comment line="789">
                    current slot                    
                </comment>
                <comment line="790">
                    current entry                    
                </comment>
                <method name="next" type="K" line="840"/>
            </class>
            <class name="EntryIterator" line="845">
                <extends class="HashIterator">
                    <type_params>
                        <type_param name="Map.Entry<K,V>"/>
                    </type_params>
                </extends>
                <comment line="787">
                    next entry to return                    
                </comment>
                <comment line="788">
                    For fast-fail                    
                </comment>
                <comment line="789">
                    current slot                    
                </comment>
                <comment line="790">
                    current entry                    
                </comment>
                <method name="next" type="Map.Entry<K,V>" line="846"/>
            </class>
            <method name="newKeyIterator" type="Iterator<K>" line="852"/>
            <method name="newValueIterator" type="Iterator<V>" line="855"/>
            <method name="newEntryIterator" type="Iterator<Map.Entry<K,V>>" line="858"/>
            <declaration name="entrySet" type="Set&lt;Map.Entry&lt;K,V&gt;&gt;" line="865"/>
            <javadoc line="867">
                Returns a {@link Set} view of the keys contained in this map.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation), the results of
                  the iteration are undefined.  The set supports element removal,
                  which removes the corresponding mapping from the map, via the
                  &lt;tt&gt;Iterator.remove&lt;/tt&gt;, &lt;tt&gt;Set.remove&lt;/tt&gt;,
                  &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt;, and &lt;tt&gt;clear&lt;/tt&gt;
                  operations.  It does not support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt;
                  operations.                
            </javadoc>
            <method name="keySet" type="Set<K>" line="880">
                <declaration name="ks" type="Set&lt;K&gt;" line="881"/>
            </method>
            <class name="KeySet" line="885">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <comment line="787">
                    next entry to return                    
                </comment>
                <comment line="788">
                    For fast-fail                    
                </comment>
                <comment line="789">
                    current slot                    
                </comment>
                <comment line="790">
                    current entry                    
                </comment>
                <method name="iterator" type="Iterator<K>" line="886"/>
                <method name="size" type="int" line="889"/>
                <method name="contains" type="boolean" line="892">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="895">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="clear" type="void" line="898"/>
            </class>
            <javadoc line="903">
                Returns a {@link Collection} view of the values contained in this map.
                  The collection is backed by the map, so changes to the map are
                  reflected in the collection, and vice-versa.  If the map is
                  modified while an iteration over the collection is in progress
                  (except through the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation),
                  the results of the iteration are undefined.  The collection
                  supports element removal, which removes the corresponding
                  mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,
                  &lt;tt&gt;Collection.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;,
                  &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not
                  support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.                
            </javadoc>
            <method name="values" type="Collection<V>" line="916">
                <declaration name="vs" type="Collection&lt;V&gt;" line="917"/>
            </method>
            <class name="Values" line="921">
                <extends class="AbstractCollection">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <comment line="787">
                    next entry to return                    
                </comment>
                <comment line="788">
                    For fast-fail                    
                </comment>
                <comment line="789">
                    current slot                    
                </comment>
                <comment line="790">
                    current entry                    
                </comment>
                <method name="iterator" type="Iterator<V>" line="922"/>
                <method name="size" type="int" line="925"/>
                <method name="contains" type="boolean" line="928">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="clear" type="void" line="931"/>
            </class>
            <javadoc line="936">
                Returns a {@link Set} view of the mappings contained in this map.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation, or through the
                  &lt;tt&gt;setValue&lt;/tt&gt; operation on a map entry returned by the
                  iterator) the results of the iteration are undefined.  The set
                  supports element removal, which removes the corresponding
                  mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,
                  &lt;tt&gt;Set.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt; and
                  &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not support the
                  &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.                
                <return>
                    a set view of the mappings contained in this map                    
                </return>
            </javadoc>
            <method name="entrySet" type="Set<Map.Entry<K,V>>" line="952"/>
            <method name="entrySet0" type="Set<Map.Entry<K,V>>" line="956">
                <declaration name="es" type="Set&lt;Map.Entry&lt;K,V&gt;&gt;" line="957"/>
            </method>
            <class name="EntrySet" line="961">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="Map.Entry<K,V>"/>
                    </type_params>
                </extends>
                <comment line="787">
                    next entry to return                    
                </comment>
                <comment line="788">
                    For fast-fail                    
                </comment>
                <comment line="789">
                    current slot                    
                </comment>
                <comment line="790">
                    current entry                    
                </comment>
                <method name="iterator" type="Iterator<Map.Entry<K,V>>" line="962"/>
                <method name="contains" type="boolean" line="965">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry&lt;K,V&gt;" line="968"/>
                    <declaration name="candidate" type="Entry&lt;K,V&gt;" line="969"/>
                </method>
                <method name="remove" type="boolean" line="972">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="size" type="int" line="975"/>
                <method name="clear" type="void" line="978"/>
            </class>
            <javadoc line="983">
                Save the state of the &lt;tt&gt;HashMap&lt;/tt&gt; instance to a stream (i.e.,
                  serialize it).                
                <serialData>
                    The <i>capacity</i> of the HashMap (the length of the
                      bucket array) is emitted (int), followed by the
                      <i>size</i> (an int, the number of key-value
                      mappings), followed by the key (Object) and value (Object)
                      for each key-value mapping.  The key-value mappings are
                      emitted in no particular order.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="996">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="1001">
                    Write out the threshold, loadfactor, and any hidden stuff                    
                </comment>
                <comment line="1004">
                    Write out number of buckets                    
                </comment>
                <comment line="1007">
                    Write out size (number of Mappings)                    
                </comment>
                <comment line="1010">
                    Write out keys and values (alternating)                    
                </comment>
                <declaration name="i" type="Iterator&lt;Map.Entry&lt;K,V&gt;&gt;" line="997"/>
                <scope line="1010">
                    <scope line="1011">
                        <declaration name="e" type="Map.Entry&lt;K,V&gt;" line="1012"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="1019"/>
            <javadoc line="1021">
                Reconstitute the &lt;tt&gt;HashMap&lt;/tt&gt; instance from a stream (i.e.,
                  deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="1027">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="1029">
                    Read in the threshold, loadfactor, and any hidden stuff                    
                </comment>
                <comment line="1032">
                    Read in number of buckets and allocate the bucket array;                    
                </comment>
                <comment line="1036">
                    Give subclass a chance to do its thing.                    
                </comment>
                <comment line="1038">
                    Read in size (number of Mappings)                    
                </comment>
                <comment line="1041">
                    Read the keys and values, and put the mappings in the HashMap                    
                </comment>
                <declaration name="numBuckets" type="int" line="1032"/>
                <declaration name="size" type="int" line="1038"/>
                <scope line="1041">
                    <declaration name="key" type="K" line="1042"/>
                    <declaration name="value" type="V" line="1043"/>
                </scope>
            </method>
            <method name="capacity" type="int" line="1049"/>
            <method name="loadFactor" type="float" line="1050"/>
        </class>
    </source>