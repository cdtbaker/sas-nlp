<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.IOException"/>
        <interface name="Formattable">
            <javadoc line="3">
                The &lt;tt&gt;Formattable&lt;/tt&gt; interface must be implemented by any class that
                  needs to perform custom formatting using the &lt;tt&gt;&apos;s&apos;&lt;/tt&gt; conversion
                  specifier of {@link java.util.Formatter}.  This interface allows basic
                  control for formatting arbitrary objects.
                  For example, the following class prints out different representations of a
                  stock&apos;s name depending on the flags and length constraints:
                  &lt;blockquote&gt;&lt;pre&gt;
                  import java.nio.CharBuffer;
                  import java.util.Formatter;
                  import java.util.Formattable;
                  import java.util.Locale;
                  import static java.util.FormattableFlags.;
                  ...
                  public class StockName implements Formattable {
                  private String symbol, companyName, frenchCompanyName;
                  public StockName(String symbol, String companyName,
                  String frenchCompanyName) {
                  ...
                  }
                  ...
                  public void formatTo(Formatter fmt, int f, int width, int precision) {
                  StringBuilder sb = new StringBuilder();
                  // decide form of name
                  String name = companyName;
                  if (fmt.locale().equals(Locale.FRANCE))
                  name = frenchCompanyName;
                  boolean alternate = (f &amp; ALTERNATE) == ALTERNATE;
                  boolean usesymbol = alternate || (precision != -1 &amp;&amp; precision &lt; 10);
                  String out = (usesymbol ? symbol : name);
                  // apply precision
                  if (precision == -1 || out.length() &lt; precision) {
                  // write it all
                  sb.append(out);
                  } else {
                  sb.append(out.substring(0, precision - 1)).append(&apos;&apos;);
                  }
                  // apply width and justification
                  int len = sb.length();
                  if (len &lt; width)
                  for (int i = 0; i &lt; width - len; i++)
                  if ((f &amp; LEFT_JUSTIFY) == LEFT_JUSTIFY)
                  sb.append(&apos; &apos;);
                  else
                  sb.insert(0, &apos; &apos;);
                  fmt.format(sb.toString());
                  }
                  public String toString() {
                  return String.format(&quot;%s - %s&quot;, symbol, companyName);
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; When used in conjunction with the {@link java.util.Formatter}, the above
                  class produces the following output for various format strings.
                  &lt;blockquote&gt;&lt;pre&gt;
                  Formatter fmt = new Formatter();
                  StockName sn = new StockName(&quot;HUGE&quot;, &quot;Huge Fruit, Inc.&quot;,
                  &quot;Fruit Titanesque, Inc.&quot;);
                  fmt.format(&quot;%s&quot;, sn);                   //   -&gt; &quot;Huge Fruit, Inc.&quot;
                  fmt.format(&quot;%s&quot;, sn.toString());        //   -&gt; &quot;HUGE - Huge Fruit, Inc.&quot;
                  fmt.format(&quot;%#s&quot;, sn);                  //   -&gt; &quot;HUGE&quot;
                  fmt.format(&quot;%-10.8s&quot;, sn);              //   -&gt; &quot;HUGE      &quot;
                  fmt.format(&quot;%.12s&quot;, sn);                //   -&gt; &quot;Huge Fruit,&quot;
                  fmt.format(Locale.FRANCE, &quot;%25s&quot;, sn);  //   -&gt; &quot;   Fruit Titanesque, Inc.&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Formattables are not necessarily safe for multithreaded access.  Thread
                  safety is optional and may be enforced by classes that extend and implement
                  this interface.
                  &lt;p&gt; Unless otherwise specified, passing a &lt;tt&gt;null&lt;/tt&gt; argument to
                  any method in this interface will cause a {@link NullPointerException} to be thrown.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="formatTo" type="void" line="76"/>
            <javadoc line="76">
                Formats the object using the provided {@link Formatter formatter}.                
                <param>
                    formatterThe {@link Formatter formatter}.  Implementing classes may call{@link Formatter#out() formatter.out()} or {@link Formatter#locale() formatter.locale()} to obtain the {@link Appendable} or {@link Locale} used by this
                      &lt;tt&gt;formatter&lt;/tt&gt; respectively.                    
                </param>
                <param>
                    flagsThe flags modify the output format.  The value is interpreted as
                      a bitmask.  Any combination of the following flags may be set:{@link FormattableFlags#LEFT_JUSTIFY}, {@link FormattableFlags#UPPERCASE}, and {@link FormattableFlags#ALTERNATE}.  If no flags are set, the default
                      formatting of the implementing class will apply.                    
                </param>
                <param>
                    widthThe minimum number of characters to be written to the output.
                      If the length of the converted value is less than the
                      &lt;tt&gt;width&lt;/tt&gt; then the output will be padded by
                      &lt;tt&gt;&apos;&amp;nbsp;&amp;nbsp;&apos;&lt;/tt&gt; until the total number of characters
                      equals width.  The padding is at the beginning by default.  If
                      the {@link FormattableFlags#LEFT_JUSTIFY} flag is set then the
                      padding will be at the end.  If &lt;tt&gt;width&lt;/tt&gt; is &lt;tt&gt;-1&lt;/tt&gt;
                      then there is no minimum.                    
                </param>
                <param>
                    precisionThe maximum number of characters to be written to the output.
                      The precision is applied before the width, thus the output will
                      be truncated to &lt;tt&gt;precision&lt;/tt&gt; characters even if the
                      &lt;tt&gt;width&lt;/tt&gt; is greater than the &lt;tt&gt;precision&lt;/tt&gt;.  If
                      &lt;tt&gt;precision&lt;/tt&gt; is &lt;tt&gt;-1&lt;/tt&gt; then there is no explicit
                      limit on the number of characters.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf any of the parameters are invalid.  For specification of all
                      possible formatting errors, see the &lt;a
                      href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
                      formatter class specification.                    
                </throws>
            </javadoc>
        </interface>
    </source>