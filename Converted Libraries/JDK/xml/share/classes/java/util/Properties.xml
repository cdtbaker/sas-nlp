<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.IOException"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.Reader"/>
        <import package="java.io.Writer"/>
        <import package="java.io.OutputStreamWriter"/>
        <import package="java.io.BufferedWriter"/>
        <class name="Properties" line="11">
            <extends class="Hashtable">
                <type_params>
                    <type_param name="Object"/>
                    <type_param name="Object"/>
                </type_params>
            </extends>
            <javadoc line="11">
                The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of
                  properties. The &lt;code&gt;Properties&lt;/code&gt; can be saved to a stream
                  or loaded from a stream. Each key and its corresponding value in
                  the property list is a string.
                  &lt;p&gt;
                  A property list can contain another property list as its
                  &quot;defaults&quot;; this second property list is searched if
                  the property key is not found in the original property list.
                  &lt;p&gt;
                  Because &lt;code&gt;Properties&lt;/code&gt; inherits from &lt;code&gt;Hashtable&lt;/code&gt;, the
                  &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;putAll&lt;/code&gt; methods can be applied to a
                  &lt;code&gt;Properties&lt;/code&gt; object.  Their use is strongly discouraged as they
                  allow the caller to insert entries whose keys or values are not
                  &lt;code&gt;Strings&lt;/code&gt;.  The &lt;code&gt;setProperty&lt;/code&gt; method should be used
                  instead.  If the &lt;code&gt;store&lt;/code&gt; or &lt;code&gt;save&lt;/code&gt; method is called
                  on a &quot;compromised&quot; &lt;code&gt;Properties&lt;/code&gt; object that contains a
                  non-&lt;code&gt;String&lt;/code&gt; key or value, the call will fail. Similarly,
                  the call to the &lt;code&gt;propertyNames&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt; method
                  will fail if it is called on a &quot;compromised&quot; &lt;code&gt;Properties&lt;/code&gt;
                  object that contains a non-&lt;code&gt;String&lt;/code&gt; key.
                  &lt;p&gt;
                  The {@link #load(java.io.Reader) load(Reader)} &lt;tt&gt;/&lt;/tt&gt;{@link #store(java.io.Writer,java.lang.String) store(Writer, String)}methods load and store properties from and to a character based stream
                  in a simple line-oriented format specified below.
                  The {@link #load(java.io.InputStream) load(InputStream)} &lt;tt&gt;/&lt;/tt&gt;{@link #store(java.io.OutputStream,java.lang.String) store(OutputStream, String)}methods work the same way as the load(Reader)/store(Writer, String) pair, except
                  the input/output stream is encoded in ISO 8859-1 character encoding.
                  Characters that cannot be directly represented in this encoding can be written using
                  Unicode escapes as defined in section 3.3 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;;
                  only a single &apos;u&apos; character is allowed in an escape
                  sequence. The native2ascii tool can be used to convert property files to and
                  from other character encodings.
                  &lt;p&gt; The {@link #loadFromXML(InputStream)} and {@link #storeToXML(OutputStream,String,String)} methods load and store properties
                  in a simple XML format.  By default the UTF-8 character encoding is used,
                  however a specific encoding may be specified if required.  An XML properties
                  document has the following DOCTYPE declaration:
                  &lt;pre&gt;
                  &amp;lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&amp;gt;
                  &lt;/pre&gt;
                  Note that the system URI (http://java.sun.com/dtd/properties.dtd) is
                  &lt;i&gt;not&lt;/i&gt; accessed when exporting or importing properties; it merely
                  serves as a string to uniquely identify the DTD, which is:
                  &lt;pre&gt;
                  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
                  &amp;lt;!-- DTD for properties --&amp;gt;
                  &amp;lt;!ELEMENT properties ( comment?, entry ) &amp;gt;
                  &amp;lt;!ATTLIST properties version CDATA #FIXED &quot;1.0&quot;&amp;gt;
                  &amp;lt;!ELEMENT comment (#PCDATA) &amp;gt;
                  &amp;lt;!ELEMENT entry (#PCDATA) &amp;gt;
                  &amp;lt;!ATTLIST entry key CDATA #REQUIRED&amp;gt;
                  &lt;/pre&gt;
                  &lt;p&gt;This class is thread-safe: multiple threads can share a single
                  &lt;tt&gt;Properties&lt;/tt&gt; object without the need for external synchronization.                
                <see>
                    <a href="../../../technotes/tools/solaris/native2ascii.html">native2ascii tool for Solaris</a>                    
                </see>
                <see>
                    <a href="../../../technotes/tools/windows/native2ascii.html">native2ascii tool for Windows</a>                    
                </see>
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Michael McCloskey                    
                </author>
                <author>
                    Xueming Shen                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="72"/>
            <javadoc line="72">
                use serialVersionUID from JDK 1.1.X for interoperability                
            </javadoc>
            <declaration name="defaults" type="Properties" line="76"/>
            <javadoc line="76">
                A property list that contains default values for any keys not
                  found in this property list.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="82">
                Creates an empty property list with no default values.                
            </javadoc>
            <method name="Properties" type="constructor" line="85"/>
            <javadoc line="88">
                Creates an empty property list with the specified defaults.                
                <param>
                    defaults   the defaults.                    
                </param>
            </javadoc>
            <method name="Properties" type="constructor" line="92">
                <params>
                    <param name="defaults" type="Properties"/>
                </params>
            </method>
            <javadoc line="95">
                Calls the &lt;tt&gt;Hashtable&lt;/tt&gt; method &lt;code&gt;put&lt;/code&gt;. Provided for
                  parallelism with the &lt;tt&gt;getProperty&lt;/tt&gt; method. Enforces use of
                  strings for property keys and values. The value returned is the
                  result of the &lt;tt&gt;Hashtable&lt;/tt&gt; call to &lt;code&gt;put&lt;/code&gt;.                
                <param>
                    key the key to be placed into this property list.                    
                </param>
                <param>
                    value the value corresponding to <tt>key</tt>.                    
                </param>
                <return>
                    the previous value of the specified key in this property
                      list, or <code>null</code> if it did not have one.                    
                </return>
                <see>
                    #getProperty                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setProperty" type="Object" line="107">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="110">
                Reads a property list (key and element pairs) from the input
                  character stream in a simple line-oriented format.
                  &lt;p&gt;
                  Properties are processed in terms of lines. There are two
                  kinds of line, &lt;i&gt;natural lines&lt;/i&gt; and &lt;i&gt;logical lines&lt;/i&gt;.
                  A natural line is defined as a line of
                  characters that is terminated either by a set of line terminator
                  characters (&lt;code&gt;\n&lt;/code&gt; or &lt;code&gt;\r&lt;/code&gt; or &lt;code&gt;\r\n&lt;/code&gt;)
                  or by the end of the stream. A natural line may be either a blank line,
                  a comment line, or hold all or some of a key-element pair. A logical
                  line holds all the data of a key-element pair, which may be spread
                  out across several adjacent natural lines by escaping
                  the line terminator sequence with a backslash character
                  &lt;code&gt;\&lt;/code&gt;.  Note that a comment line cannot be extended
                  in this manner; every natural line that is a comment must have
                  its own comment indicator, as described below. Lines are read from
                  input until the end of the stream is reached.
                  &lt;p&gt;
                  A natural line that contains only white space characters is
                  considered blank and is ignored.  A comment line has an ASCII
                  &lt;code&gt;&apos;#&apos;&lt;/code&gt; or &lt;code&gt;&apos;!&apos;&lt;/code&gt; as its first non-white
                  space character; comment lines are also ignored and do not
                  encode key-element information.  In addition to line
                  terminators, this format considers the characters space
                  (&lt;code&gt;&apos; &apos;&lt;/code&gt;, &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt;), tab
                  (&lt;code&gt;&apos;\t&apos;&lt;/code&gt;, &lt;code&gt;&apos;&amp;#92;u0009&apos;&lt;/code&gt;), and form feed
                  (&lt;code&gt;&apos;\f&apos;&lt;/code&gt;, &lt;code&gt;&apos;&amp;#92;u000C&apos;&lt;/code&gt;) to be white
                  space.
                  &lt;p&gt;
                  If a logical line is spread across several natural lines, the
                  backslash escaping the line terminator sequence, the line
                  terminator sequence, and any white space at the start of the
                  following line have no affect on the key or element values.
                  The remainder of the discussion of key and element parsing
                  (when loading) will assume all the characters constituting
                  the key and element appear on a single natural line after
                  line continuation characters have been removed.  Note that
                  it is &lt;i&gt;not&lt;/i&gt; sufficient to only examine the character
                  preceding a line terminator sequence to decide if the line
                  terminator is escaped; there must be an odd number of
                  contiguous backslashes for the line terminator to be escaped.
                  Since the input is processed from left to right, a
                  non-zero even number of 2&lt;i&gt;n&lt;/i&gt; contiguous backslashes
                  before a line terminator (or elsewhere) encodes &lt;i&gt;n&lt;/i&gt;
                  backslashes after escape processing.
                  &lt;p&gt;
                  The key contains all of the characters in the line starting
                  with the first non-white space character and up to, but not
                  including, the first unescaped &lt;code&gt;&apos;=&apos;&lt;/code&gt;,
                  &lt;code&gt;&apos;:&apos;&lt;/code&gt;, or white space character other than a line
                  terminator. All of these key termination characters may be
                  included in the key by escaping them with a preceding backslash
                  character; for example,&lt;p&gt;
                  &lt;code&gt;\:\=&lt;/code&gt;&lt;p&gt;
                  would be the two-character key &lt;code&gt;&quot;:=&quot;&lt;/code&gt;.  Line
                  terminator characters can be included using &lt;code&gt;\r&lt;/code&gt; and
                  &lt;code&gt;\n&lt;/code&gt; escape sequences.  Any white space after the
                  key is skipped; if the first non-white space character after
                  the key is &lt;code&gt;&apos;=&apos;&lt;/code&gt; or &lt;code&gt;&apos;:&apos;&lt;/code&gt;, then it is
                  ignored and any white space characters after it are also
                  skipped.  All remaining characters on the line become part of
                  the associated element string; if there are no remaining
                  characters, the element is the empty string
                  &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.  Once the raw character sequences
                  constituting the key and element are identified, escape
                  processing is performed as described above.
                  &lt;p&gt;
                  As an example, each of the following three lines specifies the key
                  &lt;code&gt;&quot;Truth&quot;&lt;/code&gt; and the associated element value
                  &lt;code&gt;&quot;Beauty&quot;&lt;/code&gt;:
                  &lt;p&gt;
                  &lt;pre&gt;
                  Truth = Beauty
                  Truth:Beauty
                  Truth                    :Beauty
                  &lt;/pre&gt;
                  As another example, the following three lines specify a single
                  property:
                  &lt;p&gt;
                  &lt;pre&gt;
                  fruits                           apple, banana, pear, \
                  cantaloupe, watermelon, \
                  kiwi, mango
                  &lt;/pre&gt;
                  The key is &lt;code&gt;&quot;fruits&quot;&lt;/code&gt; and the associated element is:
                  &lt;p&gt;
                  &lt;pre&gt;&quot;apple, banana, pear, cantaloupe, watermelon, kiwi, mango&quot;&lt;/pre&gt;
                  Note that a space appears before each &lt;code&gt;\&lt;/code&gt; so that a space
                  will appear after each comma in the final result; the &lt;code&gt;\&lt;/code&gt;,
                  line terminator, and leading white space on the continuation line are
                  merely discarded and are &lt;i&gt;not&lt;/i&gt; replaced by one or more other
                  characters.
                  &lt;p&gt;
                  As a third example, the line:
                  &lt;p&gt;
                  &lt;pre&gt;cheeses
                  &lt;/pre&gt;
                  specifies that the key is &lt;code&gt;&quot;cheeses&quot;&lt;/code&gt; and the associated
                  element is the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;p&gt;
                  &lt;p&gt;
                  &lt;a name=&quot;unicodeescapes&quot;&gt;&lt;/a&gt;
                  Characters in keys and elements can be represented in escape
                  sequences similar to those used for character and string literals
                  (see sections 3.3 and 3.10.6 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;).
                  The differences from the character escape sequences and Unicode
                  escapes used for characters and strings are:
                  &lt;ul&gt;
                  &lt;li&gt; Octal escapes are not recognized.
                  &lt;li&gt; The character sequence &lt;code&gt;\b&lt;/code&gt; does &lt;i&gt;not&lt;/i&gt;
                  represent a backspace character.
                  &lt;li&gt; The method does not treat a backslash character,
                  &lt;code&gt;\&lt;/code&gt;, before a non-valid escape character as an
                  error; the backslash is silently dropped.  For example, in a
                  Java string the sequence &lt;code&gt;&quot;\z&quot;&lt;/code&gt; would cause a
                  compile time error.  In contrast, this method silently drops
                  the backslash.  Therefore, this method treats the two character
                  sequence &lt;code&gt;&quot;\b&quot;&lt;/code&gt; as equivalent to the single
                  character &lt;code&gt;&apos;b&apos;&lt;/code&gt;.
                  &lt;li&gt; Escapes are not necessary for single and double quotes;
                  however, by the rule above, single and double quote characters
                  preceded by a backslash still yield single and double quote
                  characters, respectively.
                  &lt;li&gt; Only a single &apos;u&apos; character is allowed in a Uniocde escape
                  sequence.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The specified stream remains open after this method returns.                
                <param>
                    reader   the input character stream.                    
                </param>
                <throws>
                    IOException  if an error occurred when reading from the
                      input stream.                    
                </throws>
                <throws>
                    IllegalArgumentException if a malformed Unicode escape
                      appears in the input.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="load" type="void" line="246">
                <params>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="249">
                Reads a property list (key and element pairs) from the input
                  byte stream. The input stream is in a simple line-oriented
                  format as specified in{@link #load(java.io.Reader) load(Reader)} and is assumed to use
                  the ISO 8859-1 character encoding; that is each byte is one Latin1
                  character. Characters not in Latin1, and certain special characters,
                  are represented in keys and elements using Unicode escapes as defined in
                  section 3.3 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.
                  &lt;p&gt;
                  The specified stream remains open after this method returns.                
                <param>
                    inStream   the input stream.                    
                </param>
                <exception>
                    IOException  if an error occurred when reading from the
                      input stream.                    
                </exception>
                <throws>
                    IllegalArgumentException if the input stream contains a
                      malformed Unicode escape sequence.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="load" type="void" line="267">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
            </method>
            <method name="load0" type="void" line="270">
                <params>
                    <param name="lr" type="LineReader"/>
                </params>
                <declaration name="convtBuf" type="char[]" line="271"/>
                <declaration name="limit" type="int" line="272"/>
                <declaration name="keyLen" type="int" line="273"/>
                <declaration name="valueStart" type="int" line="274"/>
                <declaration name="c" type="char" line="275"/>
                <declaration name="hasSep" type="boolean" line="276"/>
                <declaration name="precedingBackslash" type="boolean" line="277"/>
                <scope line="278">
                    <scope line="284">
                        <scope line="286"/>
                        <scope line="291"/>
                        <scope line="295"/>
                        <scope line="298"/>
                    </scope>
                    <scope line="303">
                        <scope line="305">
                            <scope line="306"/>
                            <scope line="309"/>
                        </scope>
                    </scope>
                    <declaration name="key" type="String" line="315"/>
                    <declaration name="value" type="String" line="316"/>
                </scope>
            </method>
            <class name="LineReader" line="320">
                <method name="LineReader" type="constructor" line="321">
                    <params>
                        <param name="inStream" type="InputStream"/>
                    </params>
                </method>
                <method name="LineReader" type="constructor" line="325">
                    <params>
                        <param name="reader" type="Reader"/>
                    </params>
                </method>
                <declaration name="inByteBuf" type="byte[]" line="329"/>
                <declaration name="inCharBuf" type="char[]" line="330"/>
                <declaration name="lineBuf" type="char[]" line="331"/>
                <declaration name="inLimit" type="int" line="332"/>
                <declaration name="inOff" type="int" line="333"/>
                <declaration name="inStream" type="InputStream" line="334"/>
                <declaration name="reader" type="Reader" line="335"/>
                <method name="readLine" type="int" line="336">
                    <declaration name="len" type="int" line="337"/>
                    <declaration name="c" type="char" line="338"/>
                    <declaration name="skipWhiteSpace" type="boolean" line="339"/>
                    <declaration name="isCommentLine" type="boolean" line="340"/>
                    <declaration name="isNewLine" type="boolean" line="341"/>
                    <declaration name="appendedLineBegin" type="boolean" line="342"/>
                    <declaration name="precedingBackslash" type="boolean" line="343"/>
                    <declaration name="skipLF" type="boolean" line="344"/>
                    <scope line="345">
                        <scope line="346">
                            <scope line="349">
                                <scope line="350"/>
                            </scope>
                        </scope>
                        <scope line="356"/>
                        <scope line="359"/>
                        <scope line="362">
                            <scope line="364"/>
                        </scope>
                        <scope line="368">
                            <scope line="369"/>
                            <scope line="372"/>
                        </scope>
                        <scope line="378">
                            <scope line="380"/>
                        </scope>
                        <scope line="385">
                            <scope line="387">
                                <declaration name="newLength" type="int" line="388"/>
                                <scope line="389"/>
                                <declaration name="buf" type="char[]" line="392"/>
                            </scope>
                            <scope line="396"/>
                            <scope line="399"/>
                        </scope>
                        <scope line="403">
                            <scope line="404"/>
                            <scope line="411">
                                <scope line="414"/>
                            </scope>
                            <scope line="418">
                                <scope line="423"/>
                            </scope>
                            <scope line="427"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="loadConvert" type="String" line="434">
                <params>
                    <param name="in" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="convtBuf" type="char[]"/>
                </params>
                <scope line="435">
                    <declaration name="newLen" type="int" line="436"/>
                    <scope line="437"/>
                </scope>
                <declaration name="aChar" type="char" line="442"/>
                <declaration name="out" type="char[]" line="443"/>
                <declaration name="outLen" type="int" line="444"/>
                <declaration name="end" type="int" line="445"/>
                <scope line="446">
                    <scope line="448">
                        <scope line="450">
                            <declaration name="value" type="int" line="451"/>
                            <scope line="452"/>
                        </scope>
                        <scope line="489"/>
                    </scope>
                    <scope line="497"/>
                </scope>
            </method>
            <method name="saveConvert" type="String" line="503">
                <params>
                    <param name="theString" type="String"/>
                    <param name="escapeSpace" type="boolean"/>
                    <param name="escapeUnicode" type="boolean"/>
                </params>
                <declaration name="len" type="int" line="504"/>
                <declaration name="bufLen" type="int" line="505"/>
                <scope line="506"/>
                <declaration name="outBuffer" type="StringBuffer" line="509"/>
                <scope line="510">
                    <declaration name="aChar" type="char" line="511"/>
                    <scope line="512">
                        <scope line="513"/>
                    </scope>
                    <scope line="550"/>
                    <scope line="558"/>
                </scope>
            </method>
            <method name="writeComments" type="void" line="565">
                <params>
                    <param name="bw" type="BufferedWriter"/>
                    <param name="comments" type="String"/>
                </params>
                <declaration name="len" type="int" line="567"/>
                <declaration name="current" type="int" line="568"/>
                <declaration name="last" type="int" line="569"/>
                <declaration name="uu" type="char[]" line="570"/>
                <scope line="573">
                    <declaration name="c" type="char" line="574"/>
                    <scope line="575">
                        <scope line="577"/>
                        <scope line="584">
                            <scope line="586"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="598">
                Calls the &lt;code&gt;store(OutputStream out, String comments)&lt;/code&gt; method
                  and suppresses IOExceptions that were thrown.                
                <deprecated>
                    This method does not throw an IOException if an I/O error
                      occurs while saving the property list.  The preferred way to save a
                      properties list is via the <code>store(OutputStream out,
                      String comments)</code> method or the
                      <code>storeToXML(OutputStream os, String comment)</code> method.                    
                </deprecated>
                <param>
                    out      an output stream.                    
                </param>
                <param>
                    comments   a description of the property list.                    
                </param>
                <exception>
                    ClassCastException  if this <code>Properties</code> object
                      contains any keys or values that are not
                      <code>Strings</code>.                    
                </exception>
            </javadoc>
            <method name="save" type="void" line="612">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="comments" type="String"/>
                </params>
                <scope line="613"/>
                <scope line="616"/>
            </method>
            <javadoc line="619">
                Writes this property list (key and element pairs) in this
                  &lt;code&gt;Properties&lt;/code&gt; table to the output character stream in a
                  format suitable for using the {@link #load(java.io.Reader) load(Reader)}method.
                  &lt;p&gt;
                  Properties from the defaults table of this &lt;code&gt;Properties&lt;/code&gt;
                  table (if any) are &lt;i&gt;not&lt;/i&gt; written out by this method.
                  &lt;p&gt;
                  If the comments argument is not null, then an ASCII &lt;code&gt;#&lt;/code&gt;
                  character, the comments string, and a line separator are first written
                  to the output stream. Thus, the &lt;code&gt;comments&lt;/code&gt; can serve as an
                  identifying comment. Any one of a line feed (&apos;\n&apos;), a carriage
                  return (&apos;\r&apos;), or a carriage return followed immediately by a line feed
                  in comments is replaced by a line separator generated by the &lt;code&gt;Writer&lt;/code&gt;
                  and if the next character in comments is not character &lt;code&gt;#&lt;/code&gt; or
                  character &lt;code&gt;!&lt;/code&gt; then an ASCII &lt;code&gt;#&lt;/code&gt; is written out
                  after that line separator.
                  &lt;p&gt;
                  Next, a comment line is always written, consisting of an ASCII
                  &lt;code&gt;#&lt;/code&gt; character, the current date and time (as if produced
                  by the &lt;code&gt;toString&lt;/code&gt; method of &lt;code&gt;Date&lt;/code&gt; for the
                  current time), and a line separator as generated by the &lt;code&gt;Writer&lt;/code&gt;.
                  &lt;p&gt;
                  Then every entry in this &lt;code&gt;Properties&lt;/code&gt; table is
                  written out, one per line. For each entry the key string is
                  written, then an ASCII &lt;code&gt;=&lt;/code&gt;, then the associated
                  element string. For the key, all space characters are
                  written with a preceding &lt;code&gt;\&lt;/code&gt; character.  For the
                  element, leading space characters, but not embedded or trailing
                  space characters, are written with a preceding &lt;code&gt;\&lt;/code&gt;
                  character. The key and element characters &lt;code&gt;#&lt;/code&gt;,
                  &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, and &lt;code&gt;:&lt;/code&gt; are written
                  with a preceding backslash to ensure that they are properly loaded.
                  &lt;p&gt;
                  After the entries have been written, the output stream is flushed.
                  The output stream remains open after this method returns.
                  &lt;p&gt;                
                <param>
                    writer      an output character stream writer.                    
                </param>
                <param>
                    comments   a description of the property list.                    
                </param>
                <exception>
                    IOException if writing this property list to the specified
                      output stream throws an <tt>IOException</tt>.                    
                </exception>
                <exception>
                    ClassCastException  if this <code>Properties</code> object
                      contains any keys or values that are not <code>Strings</code>.                    
                </exception>
                <exception>
                    NullPointerException  if <code>writer</code> is null.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="store" type="void" line="665">
                <params>
                    <param name="writer" type="Writer"/>
                    <param name="comments" type="String"/>
                </params>
            </method>
            <javadoc line="668">
                Writes this property list (key and element pairs) in this
                  &lt;code&gt;Properties&lt;/code&gt; table to the output stream in a format suitable
                  for loading into a &lt;code&gt;Properties&lt;/code&gt; table using the{@link #load(InputStream) load(InputStream)} method.
                  &lt;p&gt;
                  Properties from the defaults table of this &lt;code&gt;Properties&lt;/code&gt;
                  table (if any) are &lt;i&gt;not&lt;/i&gt; written out by this method.
                  &lt;p&gt;
                  This method outputs the comments, properties keys and values in
                  the same format as specified in{@link #store(java.io.Writer,java.lang.String) store(Writer)},
                  with the following differences:
                  &lt;ul&gt;
                  &lt;li&gt;The stream is written using the ISO 8859-1 character encoding.
                  &lt;li&gt;Characters not in Latin-1 in the comments are written as
                  &lt;code&gt;&amp;#92;u&lt;/code&gt;&lt;i&gt;xxxx&lt;/i&gt; for their appropriate unicode
                  hexadecimal value &lt;i&gt;xxxx&lt;/i&gt;.
                  &lt;li&gt;Characters less than &lt;code&gt;&amp;#92;u0020&lt;/code&gt; and characters greater
                  than &lt;code&gt;&amp;#92;u007E&lt;/code&gt; in property keys or values are written
                  as &lt;code&gt;&amp;#92;u&lt;/code&gt;&lt;i&gt;xxxx&lt;/i&gt; for the appropriate hexadecimal
                  value &lt;i&gt;xxxx&lt;/i&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  After the entries have been written, the output stream is flushed.
                  The output stream remains open after this method returns.
                  &lt;p&gt;                
                <param>
                    out      an output stream.                    
                </param>
                <param>
                    comments   a description of the property list.                    
                </param>
                <exception>
                    IOException if writing this property list to the specified
                      output stream throws an <tt>IOException</tt>.                    
                </exception>
                <exception>
                    ClassCastException  if this <code>Properties</code> object
                      contains any keys or values that are not <code>Strings</code>.                    
                </exception>
                <exception>
                    NullPointerException  if <code>out</code> is null.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="store" type="void" line="702">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="comments" type="String"/>
                </params>
            </method>
            <method name="store0" type="void" line="705">
                <params>
                    <param name="bw" type="BufferedWriter"/>
                    <param name="comments" type="String"/>
                    <param name="escUnicode" type="boolean"/>
                </params>
                <scope line="706"/>
                <scope line="711">
                    <scope line="712">
                        <declaration name="key" type="String" line="713"/>
                        <declaration name="val" type="String" line="714"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="723">
                Loads all of the properties represented by the XML document on the
                  specified input stream into this properties table.
                  &lt;p&gt;The XML document must have the following DOCTYPE declaration:
                  &lt;pre&gt;
                  &amp;lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&amp;gt;
                  &lt;/pre&gt;
                  Furthermore, the document must satisfy the properties DTD described
                  above.
                  &lt;p&gt;The specified stream is closed after this method returns.                
                <param>
                    in the input stream from which to read the XML document.                    
                </param>
                <throws>
                    IOException if reading from the specified input stream
                      results in an <tt>IOException</tt>.                    
                </throws>
                <throws>
                    InvalidPropertiesFormatException Data on input stream does not
                      constitute a valid XML document with the mandated document type.                    
                </throws>
                <throws>
                    NullPointerException if <code>in</code> is null.                    
                </throws>
                <see>
                    #storeToXML(OutputStream,String,String)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="loadFromXML" type="void" line="742">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="747">
                Emits an XML document representing all of the properties contained
                  in this table.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;props.storeToXML(os,
                  comment)&lt;/tt&gt; behaves in exactly the same way as the invocation
                  &lt;tt&gt;props.storeToXML(os, comment, &quot;UTF-8&quot;);&lt;/tt&gt;.                
                <param>
                    os the output stream on which to emit the XML document.                    
                </param>
                <param>
                    comment a description of the property list, or <code>null</code>
                      if no comment is desired.                    
                </param>
                <throws>
                    IOException if writing to the specified output stream
                      results in an <tt>IOException</tt>.                    
                </throws>
                <throws>
                    NullPointerException if <code>os</code> is null.                    
                </throws>
                <throws>
                    ClassCastException  if this <code>Properties</code> object
                      contains any keys or values that are not
                      <code>Strings</code>.                    
                </throws>
                <see>
                    #loadFromXML(InputStream)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="storeToXML" type="void" line="765">
                <params>
                    <param name="os" type="OutputStream"/>
                    <param name="comment" type="String"/>
                </params>
            </method>
            <javadoc line="769">
                Emits an XML document representing all of the properties contained
                  in this table, using the specified encoding.
                  &lt;p&gt;The XML document will have the following DOCTYPE declaration:
                  &lt;pre&gt;
                  &amp;lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&amp;gt;
                  &lt;/pre&gt;
                  &lt;p&gt;If the specified comment is &lt;code&gt;null&lt;/code&gt; then no comment
                  will be stored in the document.
                  &lt;p&gt;The specified stream remains open after this method returns.                
                <param>
                    os        the output stream on which to emit the XML document.                    
                </param>
                <param>
                    comment   a description of the property list, or <code>null</code>
                      if no comment is desired.                    
                </param>
                <param>
                    encoding the name of a supported
                      <a href="../lang/package-summary.html#charenc">
                      character encoding</a>                    
                </param>
                <throws>
                    IOException if writing to the specified output stream
                      results in an <tt>IOException</tt>.                    
                </throws>
                <throws>
                    NullPointerException if <code>os</code> is <code>null</code>,
                      or if <code>encoding</code> is <code>null</code>.                    
                </throws>
                <throws>
                    ClassCastException  if this <code>Properties</code> object
                      contains any keys or values that are not
                      <code>Strings</code>.                    
                </throws>
                <see>
                    #loadFromXML(InputStream)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="storeToXML" type="void" line="795">
                <params>
                    <param name="os" type="OutputStream"/>
                    <param name="comment" type="String"/>
                    <param name="encoding" type="String"/>
                </params>
            </method>
            <javadoc line="799">
                Searches for the property with the specified key in this property list.
                  If the key is not found in this property list, the default property list,
                  and its defaults, recursively, are then checked. The method returns
                  &lt;code&gt;null&lt;/code&gt; if the property is not found.                
                <param>
                    key   the property key.                    
                </param>
                <return>
                    the value in this property list with the specified key value.                    
                </return>
                <see>
                    #setProperty                    
                </see>
                <see>
                    #defaults                    
                </see>
            </javadoc>
            <method name="getProperty" type="String" line="809">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="oval" type="Object" line="810"/>
                <declaration name="sval" type="String" line="811"/>
            </method>
            <javadoc line="814">
                Searches for the property with the specified key in this property list.
                  If the key is not found in this property list, the default property list,
                  and its defaults, recursively, are then checked. The method returns the
                  default value argument if the property is not found.                
                <param>
                    key            the hashtable key.                    
                </param>
                <param>
                    defaultValue   a default value.                    
                </param>
                <return>
                    the value in this property list with the specified key value.                    
                </return>
                <see>
                    #setProperty                    
                </see>
                <see>
                    #defaults                    
                </see>
            </javadoc>
            <method name="getProperty" type="String" line="825">
                <params>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="String"/>
                </params>
                <declaration name="val" type="String" line="826"/>
            </method>
            <javadoc line="829">
                Returns an enumeration of all the keys in this property list,
                  including distinct keys in the default property list if a key
                  of the same name has not already been found from the main
                  properties list.                
                <return>
                    an enumeration of all the keys in this property list, including
                      the keys in the default property list.                    
                </return>
                <throws>
                    ClassCastException if any key in this property list
                      is not a string.                    
                </throws>
                <see>
                    java.util.Enumeration                    
                </see>
                <see>
                    java.util.Properties#defaults                    
                </see>
                <see>
                    #stringPropertyNames                    
                </see>
            </javadoc>
            <method name="propertyNames" type="Enumeration<?>" line="842">
                <declaration name="h" type="Hashtable" line="843"/>
            </method>
            <javadoc line="847">
                Returns a set of keys in this property list where
                  the key and its corresponding value are strings,
                  including distinct keys in the default property list if a key
                  of the same name has not already been found from the main
                  properties list.  Properties whose key or value is not
                  of type &lt;tt&gt;String&lt;/tt&gt; are omitted.
                  &lt;p&gt;
                  The returned set is not backed by the &lt;tt&gt;Properties&lt;/tt&gt; object.
                  Changes to this &lt;tt&gt;Properties&lt;/tt&gt; are not reflected in the set,
                  or vice versa.                
                <return>
                    a set of keys in this property list where
                      the key and its corresponding value are strings,
                      including the keys in the default property list.                    
                </return>
                <see>
                    java.util.Properties#defaults                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="stringPropertyNames" type="Set<String>" line="864">
                <declaration name="h" type="Hashtable&lt;String,String&gt;" line="865"/>
            </method>
            <javadoc line="869">
                Prints this property list out to the specified output stream.
                  This method is useful for debugging.                
                <param>
                    out   an output stream.                    
                </param>
                <throws>
                    ClassCastException if any key in this property list
                      is not a string.                    
                </throws>
            </javadoc>
            <method name="list" type="void" line="876">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="h" type="Hashtable" line="878"/>
                <scope line="880">
                    <declaration name="key" type="String" line="881"/>
                    <declaration name="val" type="String" line="882"/>
                    <scope line="883"/>
                </scope>
            </method>
            <javadoc line="889">
                Prints this property list out to the specified output stream.
                  This method is useful for debugging.                
                <param>
                    out   an output stream.                    
                </param>
                <throws>
                    ClassCastException if any key in this property list
                      is not a string.                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="list" type="void" line="897">
                <params>
                    <param name="out" type="PrintWriter"/>
                </params>
                <declaration name="h" type="Hashtable" line="899"/>
                <scope line="901">
                    <declaration name="key" type="String" line="902"/>
                    <declaration name="val" type="String" line="903"/>
                    <scope line="904"/>
                </scope>
            </method>
            <javadoc line="910">
                Enumerates all key/value pairs in the specified hashtable.                
                <param>
                    h the hashtable                    
                </param>
                <throws>
                    ClassCastException if any of the property keys
                      is not of String type.                    
                </throws>
            </javadoc>
            <method name="enumerate" type="void" line="916">
                <params>
                    <param name="h" type="Hashtable"/>
                </params>
                <scope line="917"/>
                <scope line="920">
                    <declaration name="key" type="String" line="921"/>
                </scope>
            </method>
            <javadoc line="925">
                Enumerates all key/value pairs in the specified hashtable
                  and omits the property if the key or value is not a string.                
                <param>
                    h the hashtable                    
                </param>
            </javadoc>
            <method name="enumerateStringProperties" type="void" line="930">
                <params>
                    <param name="h" type="Hashtable<String,String>"/>
                </params>
                <scope line="931"/>
                <scope line="934">
                    <declaration name="k" type="Object" line="935"/>
                    <declaration name="v" type="Object" line="936"/>
                    <scope line="937"/>
                </scope>
            </method>
            <javadoc line="942">
                Convert a nibble to a hex character                
                <param>
                    nibble  the nibble to convert.                    
                </param>
            </javadoc>
            <method name="toHex" type="char" line="946">
                <params>
                    <param name="nibble" type="int"/>
                </params>
            </method>
            <declaration name="hexDigit" type="char[]" line="949"/>
            <javadoc line="949">
                A table of hex digits                
            </javadoc>
        </class>
    </source>