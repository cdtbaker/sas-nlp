<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.net.URL"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="ServiceLoader" line="12">
            <type_params>
                <type_param name="S"/>
            </type_params>
            <implements interface="Iterable">
                <type_params>
                    <type_param name="S"/>
                </type_params>
            </implements>
            <javadoc line="12">
                A simple service-provider loading facility.
                  &lt;p&gt; A &lt;i&gt;service&lt;/i&gt; is a well-known set of interfaces and (usually
                  abstract) classes.  A &lt;i&gt;service provider&lt;/i&gt; is a specific implementation
                  of a service.  The classes in a provider typically implement the interfaces
                  and subclass the classes defined in the service itself.  Service providers
                  can be installed in an implementation of the Java platform in the form of
                  extensions, that is, jar files placed into any of the usual extension
                  directories.  Providers can also be made available by adding them to the
                  application&apos;s class path or by some other platform-specific means.
                  &lt;p&gt; For the purpose of loading, a service is represented by a single type,
                  that is, a single interface or abstract class.  (A concrete class can be
                  used, but this is not recommended.)  A provider of a given service contains
                  one or more concrete classes that extend this &lt;i&gt;service type&lt;/i&gt; with data
                  and code specific to the provider.  The &lt;i&gt;provider class&lt;/i&gt; is typically
                  not the entire provider itself but rather a proxy which contains enough
                  information to decide whether the provider is able to satisfy a particular
                  request together with code that can create the actual provider on demand.
                  The details of provider classes tend to be highly service-specific; no
                  single class or interface could possibly unify them, so no such type is
                  defined here.  The only requirement enforced by this facility is that
                  provider classes must have a zero-argument constructor so that they can be
                  instantiated during loading.
                  &lt;p&gt;&lt;a name=&quot;format&quot;&gt; A service provider is identified by placing a
                  &lt;i&gt;provider-configuration file&lt;/i&gt; in the resource directory
                  &lt;tt&gt;META-INF/services&lt;/tt&gt;.  The file&apos;s name is the fully-qualified &lt;a
                  href=&quot;../lang/ClassLoader.html#name&quot;&gt;binary name&lt;/a&gt; of the service&apos;s type.
                  The file contains a list of fully-qualified binary names of concrete
                  provider classes, one per line.  Space and tab characters surrounding each
                  name, as well as blank lines, are ignored.  The comment character is
                  &lt;tt&gt;&apos;#&apos;&lt;/tt&gt; (&lt;tt&gt;&apos;&amp;#92;u0023&apos;&lt;/tt&gt;, &lt;font size=&quot;-1&quot;&gt;NUMBER SIGN&lt;/font&gt;); on
                  each line all characters following the first comment character are ignored.
                  The file must be encoded in UTF-8.
                  &lt;p&gt; If a particular concrete provider class is named in more than one
                  configuration file, or is named in the same configuration file more than
                  once, then the duplicates are ignored.  The configuration file naming a
                  particular provider need not be in the same jar file or other distribution
                  unit as the provider itself.  The provider must be accessible from the same
                  class loader that was initially queried to locate the configuration file;
                  note that this is not necessarily the class loader from which the file was
                  actually loaded.
                  &lt;p&gt; Providers are located and instantiated lazily, that is, on demand.  A
                  service loader maintains a cache of the providers that have been loaded so
                  far.  Each invocation of the {@link #iterator iterator} method returns an
                  iterator that first yields all of the elements of the cache, in
                  instantiation order, and then lazily locates and instantiates any remaining
                  providers, adding each one to the cache in turn.  The cache can be cleared
                  via the {@link #reload reload} method.
                  &lt;p&gt; Service loaders always execute in the security context of the caller.
                  Trusted system code should typically invoke the methods in this class, and
                  the methods of the iterators which they return, from within a privileged
                  security context.
                  &lt;p&gt; Instances of this class are not safe for use by multiple concurrent
                  threads.
                  &lt;p&gt; Unless otherwise specified, passing a &lt;tt&gt;null&lt;/tt&gt; argument to any
                  method in this class will cause a {@link NullPointerException} to be thrown.
                  &lt;p&gt;&lt;span style=&quot;font-weight: bold; padding-right: 1em&quot;&gt;Example&lt;/span&gt;
                  Suppose we have a service type &lt;tt&gt;com.example.CodecSet&lt;/tt&gt; which is
                  intended to represent sets of encoder/decoder pairs for some protocol.  In
                  this case it is an abstract class with two abstract methods:
                  &lt;blockquote&gt;&lt;pre&gt;
                  public abstract Encoder getEncoder(String encodingName);
                  public abstract Decoder getDecoder(String encodingName);&lt;/pre&gt;&lt;/blockquote&gt;
                  Each method returns an appropriate object or &lt;tt&gt;null&lt;/tt&gt; if the provider
                  does not support the given encoding.  Typical providers support more than
                  one encoding.
                  &lt;p&gt; If &lt;tt&gt;com.example.impl.StandardCodecs&lt;/tt&gt; is an implementation of the
                  &lt;tt&gt;CodecSet&lt;/tt&gt; service then its jar file also contains a file named
                  &lt;blockquote&gt;&lt;pre&gt;
                  META-INF/services/com.example.CodecSet&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; This file contains the single line:
                  &lt;blockquote&gt;&lt;pre&gt;
                  com.example.impl.StandardCodecs    # Standard codecs&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The &lt;tt&gt;CodecSet&lt;/tt&gt; class creates and saves a single service instance
                  at initialization:
                  &lt;blockquote&gt;&lt;pre&gt;
                  private static ServiceLoader&amp;lt;CodecSet&amp;gt; codecSetLoader
                  = ServiceLoader.load(CodecSet.class);&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; To locate an encoder for a given encoding name it defines a static
                  factory method which iterates through the known and available providers,
                  returning only when it has located a suitable encoder or has run out of
                  providers.
                  &lt;blockquote&gt;&lt;pre&gt;
                  public static Encoder getEncoder(String encodingName) {
                  for (CodecSet cp : codecSetLoader) {
                  Encoder enc = cp.getEncoder(encodingName);
                  if (enc != null)
                  return enc;
                  }
                  return null;
                  }&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; A &lt;tt&gt;getDecoder&lt;/tt&gt; method is defined similarly.
                  &lt;p&gt;&lt;span style=&quot;font-weight: bold; padding-right: 1em&quot;&gt;Usage Note&lt;/span&gt; If
                  the class path of a class loader that is used for provider loading includes
                  remote network URLs then those URLs will be dereferenced in the process of
                  searching for provider-configuration files.
                  &lt;p&gt; This activity is normal, although it may cause puzzling entries to be
                  created in web-server logs.  If a web server is not configured correctly,
                  however, then this activity may cause the provider-loading algorithm to fail
                  spuriously.
                  &lt;p&gt; A web server should return an HTTP 404 (Not Found) response when a
                  requested resource does not exist.  Sometimes, however, web servers are
                  erroneously configured to return an HTTP 200 (OK) response along with a
                  helpful HTML error page in such cases.  This will cause a {@link ServiceConfigurationError} to be thrown when this class attempts to parse
                  the HTML page as a provider-configuration file.  The best solution to this
                  problem is to fix the misconfigured web server to return the correct
                  response code (HTTP 404) along with the HTML error page.                
                <param>
                    &lt;S&gt;
                      The type of the service to be loaded by this loader                    
                </param>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="PREFIX" type="String" line="125"/>
            <declaration name="service" type="Class&amp;lt;S&amp;gt;" line="126"/>
            <declaration name="loader" type="ClassLoader" line="127"/>
            <declaration name="providers" type="LinkedHashMap&amp;lt;String,S&amp;gt;" line="128"/>
            <declaration name="lookupIterator" type="LazyIterator" line="129"/>
            <javadoc line="130">
                Clear this loader&apos;s provider cache so that all providers will be
                  reloaded.
                  &lt;p&gt; After invoking this method, subsequent invocations of the {@link #iterator() iterator} method will lazily look up and instantiate
                  providers from scratch, just as is done by a newly-created loader.
                  &lt;p&gt; This method is intended for use in situations in which new providers
                  can be installed into a running Java virtual machine.                
            </javadoc>
            <method name="reload" type="void" line="138"/>
            <method name="ServiceLoader" type="constructor" line="142">
                <params>
                    <param name="svc" type="Class&lt;S&gt;"/>
                    <param name="cl" type="ClassLoader"/>
                </params>
            </method>
            <method name="fail" type="void" line="147">
                <params>
                    <param name="service" type="Class"/>
                    <param name="msg" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <method name="fail" type="void" line="150">
                <params>
                    <param name="service" type="Class"/>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="fail" type="void" line="153">
                <params>
                    <param name="service" type="Class"/>
                    <param name="u" type="URL"/>
                    <param name="line" type="int"/>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="parseLine" type="int" line="156">
                <params>
                    <param name="service" type="Class"/>
                    <param name="u" type="URL"/>
                    <param name="r" type="BufferedReader"/>
                    <param name="lc" type="int"/>
                    <param name="names" type="List&lt;String&gt;"/>
                </params>
                <declaration name="ln" type="String" line="157"/>
                <scope line="158"/>
                <declaration name="ci" type="int" line="161"/>
                <declaration name="n" type="int" line="164"/>
                <scope line="165">
                    <declaration name="cp" type="int" line="167"/>
                    <scope line="169"/>
                </scope>
            </method>
            <method name="parse" type="Iterator&lt;String&gt;" line="177">
                <params>
                    <param name="service" type="Class"/>
                    <param name="u" type="URL"/>
                </params>
                <declaration name="in" type="InputStream" line="178"/>
                <declaration name="r" type="BufferedReader" line="179"/>
                <declaration name="names" type="ArrayList&amp;lt;String&amp;gt;" line="180"/>
                <scope line="181">
                    <declaration name="lc" type="int" line="184"/>
                </scope>
                <scope line="187"/>
                <scope line="190">
                    <scope line="191"/>
                    <scope line="195"/>
                </scope>
            </method>
            <class name="LazyIterator" line="201">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="S"/>
                    </type_params>
                </implements>
                <declaration name="service" type="Class&amp;lt;S&amp;gt;" line="202"/>
                <declaration name="loader" type="ClassLoader" line="203"/>
                <declaration name="configs" type="Enumeration&amp;lt;URL&amp;gt;" line="204"/>
                <declaration name="pending" type="Iterator&amp;lt;String&amp;gt;" line="205"/>
                <declaration name="nextName" type="String" line="206"/>
                <method name="LazyIterator" type="constructor" line="207">
                    <params>
                        <param name="service" type="Class&lt;S&gt;"/>
                        <param name="loader" type="ClassLoader"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="211">
                    <scope line="212"/>
                    <scope line="215">
                        <scope line="216">
                            <declaration name="fullName" type="String" line="217"/>
                        </scope>
                        <scope line="221"/>
                    </scope>
                    <scope line="225">
                        <scope line="226"/>
                    </scope>
                </method>
                <method name="next" type="S" line="234">
                    <scope line="235"/>
                    <declaration name="cn" type="String" line="238"/>
                    <scope line="240">
                        <declaration name="p" type="S" line="241"/>
                    </scope>
                    <scope line="245"/>
                    <scope line="248"/>
                </method>
                <method name="remove" type="void" line="253"/>
            </class>
            <javadoc line="257">
                Lazily loads the available providers of this loader&apos;s service.
                  &lt;p&gt; The iterator returned by this method first yields all of the
                  elements of the provider cache, in instantiation order.  It then lazily
                  loads and instantiates any remaining providers, adding each one to the
                  cache in turn.
                  &lt;p&gt; To achieve laziness the actual work of parsing the available
                  provider-configuration files and instantiating providers must be done by
                  the iterator itself.  Its {@link java.util.Iterator#hasNext hasNext} and{@link java.util.Iterator#next next} methods can therefore throw a{@link ServiceConfigurationError} if a provider-configuration file
                  violates the specified format, or if it names a provider class that
                  cannot be found and instantiated, or if the result of instantiating the
                  class is not assignable to the service type, or if any other kind of
                  exception or error is thrown as the next provider is located and
                  instantiated.  To write robust code it is only necessary to catch {@link ServiceConfigurationError} when using a service iterator.
                  &lt;p&gt; If such an error is thrown then subsequent invocations of the
                  iterator will make a best effort to locate and instantiate the next
                  available provider, but in general such recovery cannot be guaranteed.
                  &lt;blockquote style=&quot;font-size: smaller; line-height: 1.2&quot;&gt;&lt;span
                  style=&quot;padding-right: 1em; font-weight: bold&quot;&gt;Design Note&lt;/span&gt;
                  Throwing an error in these cases may seem extreme.  The rationale for
                  this behavior is that a malformed provider-configuration file, like a
                  malformed class file, indicates a serious problem with the way the Java
                  virtual machine is configured or is being used.  As such it is
                  preferable to throw an error rather than try to recover or, even worse,
                  fail silently.&lt;/blockquote&gt;
                  &lt;p&gt; The iterator returned by this method does not support removal.
                  Invoking its {@link java.util.Iterator#remove() remove} method will
                  cause an {@link UnsupportedOperationException} to be thrown.                
                <return>
                    An iterator that lazily loads providers for this loader&apos;s
                      service                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator&lt;S&gt;" line="288">
                <anonymous_class line="289">
                    <declaration name="knownProviders" type="Iterator&amp;lt;Map.Entry&amp;lt;String,S&amp;gt;&amp;gt;" line="290"/>
                    <method name="hasNext" type="boolean" line="291"/>
                    <method name="next" type="S" line="295"/>
                    <method name="remove" type="void" line="299"/>
                </anonymous_class>
            </method>
            <javadoc line="305">
                Creates a new service loader for the given service type and class
                  loader.                
                <param>
                    serviceThe interface or abstract class representing the service                    
                </param>
                <param>
                    loaderThe class loader to be used to load provider-configuration files
                      and provider classes, or &lt;tt&gt;null&lt;/tt&gt; if the system class
                      loader (or, failing that, the bootstrap class loader) is to be
                      used                    
                </param>
                <return>
                    A new service loader                    
                </return>
            </javadoc>
            <method name="load" type="ServiceLoader&lt;S&gt;" line="315">
                <params>
                    <param name="service" type="Class&lt;S&gt;"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="318">
                Creates a new service loader for the given service type, using the
                  current thread&apos;s {@linkplain java.lang.Thread#getContextClassLoadercontext class loader}.
                  &lt;p&gt; An invocation of this convenience method of the form
                  &lt;blockquote&gt;&lt;pre&gt;
                  ServiceLoader.load(&lt;i&gt;service&lt;/i&gt;)&lt;/pre&gt;&lt;/blockquote&gt;
                  is equivalent to
                  &lt;blockquote&gt;&lt;pre&gt;
                  ServiceLoader.load(&lt;i&gt;service&lt;/i&gt;,
                  Thread.currentThread().getContextClassLoader())&lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    serviceThe interface or abstract class representing the service                    
                </param>
                <return>
                    A new service loader                    
                </return>
            </javadoc>
            <method name="load" type="ServiceLoader&lt;S&gt;" line="331">
                <params>
                    <param name="service" type="Class&lt;S&gt;"/>
                </params>
                <declaration name="cl" type="ClassLoader" line="332"/>
            </method>
            <javadoc line="335">
                Creates a new service loader for the given service type, using the
                  extension class loader.
                  &lt;p&gt; This convenience method simply locates the extension class loader,
                  call it &lt;tt&gt;&lt;i&gt;extClassLoader&lt;/i&gt;&lt;/tt&gt;, and then returns
                  &lt;blockquote&gt;&lt;pre&gt;
                  ServiceLoader.load(&lt;i&gt;service&lt;/i&gt;, &lt;i&gt;extClassLoader&lt;/i&gt;)&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; If the extension class loader cannot be found then the system class
                  loader is used; if there is no system class loader then the bootstrap
                  class loader is used.
                  &lt;p&gt; This method is intended for use when only installed providers are
                  desired.  The resulting service will only find and load providers that
                  have been installed into the current Java virtual machine; providers on
                  the application&apos;s class path will be ignored.                
                <param>
                    serviceThe interface or abstract class representing the service                    
                </param>
                <return>
                    A new service loader                    
                </return>
            </javadoc>
            <method name="loadInstalled" type="ServiceLoader&lt;S&gt;" line="352">
                <params>
                    <param name="service" type="Class&lt;S&gt;"/>
                </params>
                <declaration name="cl" type="ClassLoader" line="353"/>
                <declaration name="prev" type="ClassLoader" line="354"/>
                <scope line="355"/>
            </method>
            <javadoc line="361">
                Returns a string describing this service.                
                <return>
                    A descriptive string                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="365"/>
        </class>
    </source>