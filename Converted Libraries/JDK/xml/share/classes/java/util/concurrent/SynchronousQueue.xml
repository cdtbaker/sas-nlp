<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.concurrent.locks"/>
        <import package="java.util.concurrent.atomic"/>
        <import package="java.util"/>
        <class name="SynchronousQueue" line="5">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <implements interface="BlockingQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="java.io.Serializable"/>
            <javadoc line="5">
                A {@linkplain BlockingQueue blocking queue} in which each insert
                  operation must wait for a corresponding remove operation by another
                  thread, and vice versa.  A synchronous queue does not have any
                  internal capacity, not even a capacity of one.  You cannot
                  &lt;tt&gt;peek&lt;/tt&gt; at a synchronous queue because an element is only
                  present when you try to remove it; you cannot insert an element
                  (using any method) unless another thread is trying to remove it;
                  you cannot iterate as there is nothing to iterate.  The
                  &lt;em&gt;head&lt;/em&gt; of the queue is the element that the first queued
                  inserting thread is trying to add to the queue; if there is no such
                  queued thread then no element is available for removal and
                  &lt;tt&gt;poll()&lt;/tt&gt; will return &lt;tt&gt;null&lt;/tt&gt;.  For purposes of other
                  &lt;tt&gt;Collection&lt;/tt&gt; methods (for example &lt;tt&gt;contains&lt;/tt&gt;), a
                  &lt;tt&gt;SynchronousQueue&lt;/tt&gt; acts as an empty collection.  This queue
                  does not permit &lt;tt&gt;null&lt;/tt&gt; elements.
                  &lt;p&gt;Synchronous queues are similar to rendezvous channels used in
                  CSP and Ada. They are well suited for handoff designs, in which an
                  object running in one thread must sync up with an object running
                  in another thread in order to hand it some information, event, or
                  task.
                  &lt;p&gt; This class supports an optional fairness policy for ordering
                  waiting producer and consumer threads.  By default, this ordering
                  is not guaranteed. However, a queue constructed with fairness set
                  to &lt;tt&gt;true&lt;/tt&gt; grants threads access in FIFO order.
                  &lt;p&gt;This class and its iterator implement all of the
                  &lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link Iterator} interfaces.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea and Bill Scherer and Michael Scott                    
                </author>
                <param>
                    <E>
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="41"/>
            <class name="Transferer" line="42">
                <javadoc line="42">
                    Shared internal API for dual stacks and queues.                    
                </javadoc>
                <method name="transfer" type="Object" line="46"/>
                <javadoc line="46">
                    Performs a put or take.                    
                    <param>
                        e if non-null, the item to be handed to a consumer;
                          if null, requests that transfer return an item
                          offered by producer.                        
                    </param>
                    <param>
                        timed if this operation should timeout                        
                    </param>
                    <param>
                        nanos the timeout, in nanoseconds                        
                    </param>
                    <return>
                        if non-null, the item provided or received; if null,
                          the operation failed due to timeout or interrupt --
                          the caller can distinguish which of these occurred
                          by checking Thread.interrupted.                        
                    </return>
                </javadoc>
            </class>
            <declaration name="NCPUS" type="int" line="60"/>
            <javadoc line="60">
                The number of CPUs, for spin control                
            </javadoc>
            <declaration name="maxTimedSpins" type="int" line="64"/>
            <javadoc line="64">
                The number of times to spin before blocking in timed waits.
                  The value is empirically derived -- it works well across a
                  variety of processors and OSes. Empirically, the best value
                  seems not to vary with number of CPUs (beyond 2) so is just
                  a constant.                
            </javadoc>
            <declaration name="maxUntimedSpins" type="int" line="72"/>
            <javadoc line="72">
                The number of times to spin before blocking in untimed waits.
                  This is greater than timed value because untimed waits spin
                  faster since they don&apos;t need to check times on each spin.                
            </javadoc>
            <declaration name="spinForTimeoutThreshold" type="long" line="78"/>
            <javadoc line="78">
                The number of nanoseconds for which it is faster to spin
                  rather than to use timed park. A rough estimate suffices.                
            </javadoc>
            <class name="TransferStack" line="83">
                <extends class="Transferer"/>
                <javadoc line="83">
                    Dual stack                    
                </javadoc>
                <declaration name="REQUEST" type="int" line="87"/>
                <javadoc line="87">
                    Node represents an unfulfilled consumer                    
                </javadoc>
                <declaration name="DATA" type="int" line="91"/>
                <javadoc line="91">
                    Node represents an unfulfilled producer                    
                </javadoc>
                <declaration name="FULFILLING" type="int" line="95"/>
                <javadoc line="95">
                    Node is fulfilling another unfulfilled DATA or REQUEST                    
                </javadoc>
                <javadoc line="99">
                    Return true if m has fulfilling bit set                    
                </javadoc>
                <method name="isFulfilling" type="boolean" line="102">
                    <params>
                        <param name="m" type="int"/>
                    </params>
                </method>
                <class name="SNode" line="105">
                    <javadoc line="105">
                        Node class for TransferStacks.                        
                    </javadoc>
                    <declaration name="next" type="SNode" line="109"/>
                    <declaration name="match" type="SNode" line="110"/>
                    <declaration name="waiter" type="Thread" line="111"/>
                    <declaration name="item" type="Object" line="112"/>
                    <declaration name="mode" type="int" line="113"/>
                    <method name="SNode" type="constructor" line="114">
                        <params>
                            <param name="item" type="Object"/>
                        </params>
                    </method>
                    <method name="casNext" type="boolean" line="117">
                        <params>
                            <param name="cmp" type="SNode"/>
                            <param name="val" type="SNode"/>
                        </params>
                    </method>
                    <javadoc line="120">
                        Tries to match node s to this node, if so, waking up thread.
                          Fulfillers call tryMatch to identify their waiters.
                          Waiters block until they have been matched.                        
                        <param>
                            s the node to match                            
                        </param>
                        <return>
                            true if successfully matched to s                            
                        </return>
                    </javadoc>
                    <method name="tryMatch" type="boolean" line="127">
                        <params>
                            <param name="s" type="SNode"/>
                        </params>
                        <scope line="128">
                            <declaration name="w" type="Thread" line="129"/>
                            <scope line="130"/>
                        </scope>
                    </method>
                    <javadoc line="138">
                        Tries to cancel a wait by matching node to itself.                        
                    </javadoc>
                    <method name="tryCancel" type="void" line="141"/>
                    <method name="isCancelled" type="boolean" line="144"/>
                    <declaration name="UNSAFE" type="sun.misc.Unsafe" line="147"/>
                    <declaration name="matchOffset" type="long" line="148"/>
                    <declaration name="nextOffset" type="long" line="149"/>
                    <scope line="150">
                        <scope line="151">
                            <declaration name="k" type="Class" line="153"/>
                        </scope>
                        <scope line="157"/>
                    </scope>
                </class>
                <declaration name="head" type="SNode" line="162"/>
                <javadoc line="162">
                    The head (top) of the stack                    
                </javadoc>
                <method name="casHead" type="boolean" line="166">
                    <params>
                        <param name="h" type="SNode"/>
                        <param name="nh" type="SNode"/>
                    </params>
                </method>
                <javadoc line="169">
                    Creates or resets fields of a node. Called only from transfer
                      where the node to push on stack is lazily created and
                      reused when possible to help reduce intervals between reads
                      and CASes of head and to avoid surges of garbage when CASes
                      to push nodes fail due to contention.                    
                </javadoc>
                <method name="snode" type="SNode" line="176">
                    <params>
                        <param name="s" type="SNode"/>
                        <param name="e" type="Object"/>
                        <param name="next" type="SNode"/>
                        <param name="mode" type="int"/>
                    </params>
                </method>
                <javadoc line="182">
                    Puts or takes an item.                    
                </javadoc>
                <method name="transfer" type="Object" line="185">
                    <params>
                        <param name="e" type="Object"/>
                        <param name="timed" type="boolean"/>
                        <param name="nanos" type="long"/>
                    </params>
                    <declaration name="s" type="SNode" line="186"/>
                    <declaration name="mode" type="int" line="187"/>
                    <scope line="188">
                        <declaration name="h" type="SNode" line="189"/>
                        <scope line="190">
                            <scope line="191"/>
                            <scope line="195">
                                <declaration name="m" type="SNode" line="196"/>
                                <scope line="197"/>
                            </scope>
                        </scope>
                        <scope line="205">
                            <scope line="207">
                                <scope line="208">
                                    <declaration name="m" type="SNode" line="209"/>
                                    <scope line="210"/>
                                    <declaration name="mn" type="SNode" line="215"/>
                                    <scope line="216"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="224">
                            <declaration name="m" type="SNode" line="225"/>
                            <scope line="227">
                                <declaration name="mn" type="SNode" line="228"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="235">
                    Spins/blocks until node s is matched by a fulfill operation.                    
                    <param>
                        s the waiting node                        
                    </param>
                    <param>
                        timed true if timed wait                        
                    </param>
                    <param>
                        nanos timeout value                        
                    </param>
                    <return>
                        matched node, or s if cancelled                        
                    </return>
                </javadoc>
                <method name="awaitFulfill" type="SNode" line="242">
                    <params>
                        <param name="s" type="SNode"/>
                        <param name="timed" type="boolean"/>
                        <param name="nanos" type="long"/>
                    </params>
                    <declaration name="lastTime" type="long" line="243"/>
                    <declaration name="w" type="Thread" line="244"/>
                    <declaration name="h" type="SNode" line="245"/>
                    <declaration name="spins" type="int" line="246"/>
                    <scope line="247">
                        <declaration name="m" type="SNode" line="249"/>
                        <scope line="251">
                            <declaration name="now" type="long" line="252"/>
                            <scope line="255"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="266">
                    Returns true if node s is at head or there is an active
                      fulfiller.                    
                </javadoc>
                <method name="shouldSpin" type="boolean" line="270">
                    <params>
                        <param name="s" type="SNode"/>
                    </params>
                    <declaration name="h" type="SNode" line="271"/>
                </method>
                <javadoc line="274">
                    Unlinks s from the stack.                    
                </javadoc>
                <method name="clean" type="void" line="277">
                    <params>
                        <param name="s" type="SNode"/>
                    </params>
                    <declaration name="past" type="SNode" line="280"/>
                    <declaration name="p" type="SNode" line="282"/>
                    <scope line="284">
                        <declaration name="n" type="SNode" line="285"/>
                    </scope>
                </method>
                <declaration name="UNSAFE" type="sun.misc.Unsafe" line="290"/>
                <declaration name="headOffset" type="long" line="291"/>
                <scope line="292">
                    <scope line="293">
                        <declaration name="k" type="Class" line="295"/>
                    </scope>
                    <scope line="298"/>
                </scope>
            </class>
            <class name="TransferQueue" line="303">
                <extends class="Transferer"/>
                <javadoc line="303">
                    Dual Queue                    
                </javadoc>
                <class name="QNode" line="307">
                    <javadoc line="307">
                        Node class for TransferQueue.                        
                    </javadoc>
                    <declaration name="next" type="QNode" line="311"/>
                    <declaration name="item" type="Object" line="312"/>
                    <declaration name="waiter" type="Thread" line="313"/>
                    <declaration name="isData" type="boolean" line="314"/>
                    <method name="QNode" type="constructor" line="315">
                        <params>
                            <param name="item" type="Object"/>
                            <param name="isData" type="boolean"/>
                        </params>
                    </method>
                    <method name="casNext" type="boolean" line="319">
                        <params>
                            <param name="cmp" type="QNode"/>
                            <param name="val" type="QNode"/>
                        </params>
                    </method>
                    <method name="casItem" type="boolean" line="322">
                        <params>
                            <param name="cmp" type="Object"/>
                            <param name="val" type="Object"/>
                        </params>
                    </method>
                    <javadoc line="325">
                        Tries to cancel by CAS&apos;ing ref to this as item.                        
                    </javadoc>
                    <method name="tryCancel" type="void" line="328">
                        <params>
                            <param name="cmp" type="Object"/>
                        </params>
                    </method>
                    <method name="isCancelled" type="boolean" line="331"/>
                    <javadoc line="334">
                        Returns true if this node is known to be off the queue
                          because its next pointer has been forgotten due to
                          an advanceHead operation.                        
                    </javadoc>
                    <method name="isOffList" type="boolean" line="339"/>
                    <declaration name="UNSAFE" type="sun.misc.Unsafe" line="342"/>
                    <declaration name="itemOffset" type="long" line="343"/>
                    <declaration name="nextOffset" type="long" line="344"/>
                    <scope line="345">
                        <scope line="346">
                            <declaration name="k" type="Class" line="348"/>
                        </scope>
                        <scope line="352"/>
                    </scope>
                </class>
                <declaration name="head" type="QNode" line="357"/>
                <javadoc line="357">
                    Head of queue                    
                </javadoc>
                <declaration name="tail" type="QNode" line="361"/>
                <javadoc line="361">
                    Tail of queue                    
                </javadoc>
                <declaration name="cleanMe" type="QNode" line="365"/>
                <javadoc line="365">
                    Reference to a cancelled node that might not yet have been
                      unlinked from queue because it was the last inserted node
                      when it cancelled.                    
                </javadoc>
                <method name="TransferQueue" type="constructor" line="371">
                    <declaration name="h" type="QNode" line="372"/>
                </method>
                <javadoc line="376">
                    Tries to cas nh as new head; if successful, unlink
                      old head&apos;s next node to avoid garbage retention.                    
                </javadoc>
                <method name="advanceHead" type="void" line="380">
                    <params>
                        <param name="h" type="QNode"/>
                        <param name="nh" type="QNode"/>
                    </params>
                </method>
                <javadoc line="383">
                    Tries to cas nt as new tail.                    
                </javadoc>
                <method name="advanceTail" type="void" line="386">
                    <params>
                        <param name="t" type="QNode"/>
                        <param name="nt" type="QNode"/>
                    </params>
                </method>
                <javadoc line="389">
                    Tries to CAS cleanMe slot.                    
                </javadoc>
                <method name="casCleanMe" type="boolean" line="392">
                    <params>
                        <param name="cmp" type="QNode"/>
                        <param name="val" type="QNode"/>
                    </params>
                </method>
                <javadoc line="395">
                    Puts or takes an item.                    
                </javadoc>
                <method name="transfer" type="Object" line="398">
                    <params>
                        <param name="e" type="Object"/>
                        <param name="timed" type="boolean"/>
                        <param name="nanos" type="long"/>
                    </params>
                    <declaration name="s" type="QNode" line="399"/>
                    <declaration name="isData" type="boolean" line="400"/>
                    <scope line="401">
                        <declaration name="t" type="QNode" line="402"/>
                        <declaration name="h" type="QNode" line="403"/>
                        <scope line="405">
                            <declaration name="tn" type="QNode" line="406"/>
                            <scope line="408"/>
                            <declaration name="x" type="Object" line="416"/>
                            <scope line="417"/>
                            <scope line="421"/>
                        </scope>
                        <scope line="428">
                            <declaration name="m" type="QNode" line="429"/>
                            <declaration name="x" type="Object" line="431"/>
                            <scope line="432"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="442">
                    Spins/blocks until node s is fulfilled.                    
                    <param>
                        s the waiting node                        
                    </param>
                    <param>
                        e the comparison value for checking match                        
                    </param>
                    <param>
                        timed true if timed wait                        
                    </param>
                    <param>
                        nanos timeout value                        
                    </param>
                    <return>
                        matched item, or s if cancelled                        
                    </return>
                </javadoc>
                <method name="awaitFulfill" type="Object" line="450">
                    <params>
                        <param name="s" type="QNode"/>
                        <param name="e" type="Object"/>
                        <param name="timed" type="boolean"/>
                        <param name="nanos" type="long"/>
                    </params>
                    <declaration name="lastTime" type="long" line="451"/>
                    <declaration name="w" type="Thread" line="452"/>
                    <declaration name="spins" type="int" line="453"/>
                    <scope line="454">
                        <declaration name="x" type="Object" line="456"/>
                        <scope line="458">
                            <declaration name="now" type="long" line="459"/>
                            <scope line="462"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="473">
                    Gets rid of cancelled node s with original predecessor pred.                    
                </javadoc>
                <method name="clean" type="void" line="476">
                    <params>
                        <param name="pred" type="QNode"/>
                        <param name="s" type="QNode"/>
                    </params>
                    <scope line="478">
                        <declaration name="h" type="QNode" line="479"/>
                        <declaration name="hn" type="QNode" line="480"/>
                        <scope line="481"/>
                        <declaration name="t" type="QNode" line="485"/>
                        <declaration name="tn" type="QNode" line="487"/>
                        <scope line="489"/>
                        <scope line="493">
                            <declaration name="sn" type="QNode" line="494"/>
                        </scope>
                        <declaration name="dp" type="QNode" line="497"/>
                        <scope line="498">
                            <declaration name="d" type="QNode" line="499"/>
                            <declaration name="dn" type="QNode" line="500"/>
                        </scope>
                    </scope>
                </method>
                <declaration name="UNSAFE" type="sun.misc.Unsafe" line="507"/>
                <declaration name="headOffset" type="long" line="508"/>
                <declaration name="tailOffset" type="long" line="509"/>
                <declaration name="cleanMeOffset" type="long" line="510"/>
                <scope line="511">
                    <scope line="512">
                        <declaration name="k" type="Class" line="514"/>
                    </scope>
                    <scope line="519"/>
                </scope>
            </class>
            <declaration name="transferer" type="Transferer" line="524"/>
            <javadoc line="524">
                The transferer. Set only in constructor, but cannot be declared
                  as final without further complicating serialization.  Since
                  this is accessed only at most once per public method, there
                  isn&apos;t a noticeable performance penalty for using volatile
                  instead of final here.                
            </javadoc>
            <javadoc line="532">
                Creates a &lt;tt&gt;SynchronousQueue&lt;/tt&gt; with nonfair access policy.                
            </javadoc>
            <method name="SynchronousQueue" type="constructor" line="535"/>
            <javadoc line="538">
                Creates a &lt;tt&gt;SynchronousQueue&lt;/tt&gt; with the specified fairness policy.                
                <param>
                    fair if true, waiting threads contend in FIFO order for
                      access; otherwise the order is unspecified.                    
                </param>
            </javadoc>
            <method name="SynchronousQueue" type="constructor" line="543">
                <params>
                    <param name="fair" type="boolean"/>
                </params>
            </method>
            <javadoc line="546">
                Adds the specified element to this queue, waiting if necessary for
                  another thread to receive it.                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="552">
                <params>
                    <param name="o" type="E"/>
                </params>
                <scope line="554"/>
            </method>
            <javadoc line="559">
                Inserts the specified element into this queue, waiting if necessary
                  up to the specified wait time for another thread to receive it.                
                <return>
                    <tt>true</tt> if successful, or <tt>false</tt> if the
                      specified waiting time elapses before a consumer appears.                    
                </return>
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="567">
                <params>
                    <param name="o" type="E"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="573">
                Inserts the specified element into this queue, if another thread is
                  waiting to receive it.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    <tt>true</tt> if the element was added to this queue, else
                      <tt>false</tt>                    
                </return>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="581">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="585">
                Retrieves and removes the head of this queue, waiting if necessary
                  for another thread to insert it.                
                <return>
                    the head of this queue                    
                </return>
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="take" type="E" line="591">
                <declaration name="e" type="Object" line="592"/>
            </method>
            <javadoc line="597">
                Retrieves and removes the head of this queue, waiting
                  if necessary up to the specified wait time, for another thread
                  to insert it.                
                <return>
                    the head of this queue, or <tt>null</tt> if the
                      specified waiting time elapses before an element is present.                    
                </return>
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="poll" type="E" line="605">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="e" type="Object" line="606"/>
            </method>
            <javadoc line="610">
                Retrieves and removes the head of this queue, if another thread
                  is currently making an element available.                
                <return>
                    the head of this queue, or <tt>null</tt> if no
                      element is available.                    
                </return>
            </javadoc>
            <method name="poll" type="E" line="616"/>
            <javadoc line="619">
                Always returns &lt;tt&gt;true&lt;/tt&gt;.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
                <return>
                    <tt>true</tt>                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="624"/>
            <javadoc line="627">
                Always returns zero.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
                <return>
                    zero.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="632"/>
            <javadoc line="635">
                Always returns zero.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
                <return>
                    zero.                    
                </return>
            </javadoc>
            <method name="remainingCapacity" type="int" line="640"/>
            <javadoc line="643">
                Does nothing.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
            </javadoc>
            <method name="clear" type="void" line="647"/>
            <javadoc line="649">
                Always returns &lt;tt&gt;false&lt;/tt&gt;.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
                <param>
                    o the element                    
                </param>
                <return>
                    <tt>false</tt>                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="655">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="658">
                Always returns &lt;tt&gt;false&lt;/tt&gt;.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
                <param>
                    o the element to remove                    
                </param>
                <return>
                    <tt>false</tt>                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="664">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="667">
                Returns &lt;tt&gt;false&lt;/tt&gt; unless the given collection is empty.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
                <param>
                    c the collection                    
                </param>
                <return>
                    <tt>false</tt> unless given collection is empty                    
                </return>
            </javadoc>
            <method name="containsAll" type="boolean" line="673">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="676">
                Always returns &lt;tt&gt;false&lt;/tt&gt;.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
                <param>
                    c the collection                    
                </param>
                <return>
                    <tt>false</tt>                    
                </return>
            </javadoc>
            <method name="removeAll" type="boolean" line="682">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="685">
                Always returns &lt;tt&gt;false&lt;/tt&gt;.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; has no internal capacity.                
                <param>
                    c the collection                    
                </param>
                <return>
                    <tt>false</tt>                    
                </return>
            </javadoc>
            <method name="retainAll" type="boolean" line="691">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="694">
                Always returns &lt;tt&gt;null&lt;/tt&gt;.
                  A &lt;tt&gt;SynchronousQueue&lt;/tt&gt; does not return elements
                  unless actively waited on.                
                <return>
                    <tt>null</tt>                    
                </return>
            </javadoc>
            <method name="peek" type="E" line="700"/>
            <javadoc line="703">
                Returns an empty iterator in which &lt;tt&gt;hasNext&lt;/tt&gt; always returns
                  &lt;tt&gt;false&lt;/tt&gt;.                
                <return>
                    an empty iterator                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="708"/>
            <javadoc line="711">
                Returns a zero-length array.                
                <return>
                    a zero-length array                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="715"/>
            <javadoc line="718">
                Sets the zeroeth element of the specified array to &lt;tt&gt;null&lt;/tt&gt;
                  (if the array has non-zero length) and returns it.                
                <param>
                    a the array                    
                </param>
                <return>
                    the specified array                    
                </return>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="725">
                <params>
                    <param name="a" type="T[]"/>
                </params>
            </method>
            <javadoc line="729">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="735">
                <params>
                    <param name="c" type="Collection<? super E>"/>
                </params>
                <declaration name="n" type="int" line="738"/>
                <declaration name="e" type="E" line="739"/>
                <scope line="740"/>
            </method>
            <javadoc line="746">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="752">
                <params>
                    <param name="c" type="Collection<? super E>"/>
                    <param name="maxElements" type="int"/>
                </params>
                <declaration name="n" type="int" line="755"/>
                <declaration name="e" type="E" line="756"/>
                <scope line="757"/>
            </method>
            <class name="WaitQueue" line="763">
                <implements interface="java.io.Serializable"/>
            </class>
            <class name="LifoWaitQueue" line="765">
                <extends class="WaitQueue"/>
                <declaration name="serialVersionUID" type="long" line="766"/>
            </class>
            <class name="FifoWaitQueue" line="768">
                <extends class="WaitQueue"/>
                <declaration name="serialVersionUID" type="long" line="769"/>
            </class>
            <declaration name="qlock" type="ReentrantLock" line="771"/>
            <declaration name="waitingProducers" type="WaitQueue" line="772"/>
            <declaration name="waitingConsumers" type="WaitQueue" line="773"/>
            <javadoc line="774">
                Save the state to a stream (that is, serialize it).                
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="writeObject" type="void" line="778">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <declaration name="fair" type="boolean" line="779"/>
                <scope line="780"/>
                <scope line="785"/>
            </method>
            <method name="readObject" type="void" line="792">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <method name="objectFieldOffset" type="long" line="797">
                <params>
                    <param name="UNSAFE" type="sun.misc.Unsafe"/>
                    <param name="field" type="String"/>
                    <param name="klazz" type="Class<?>"/>
                </params>
                <scope line="798"/>
                <scope line="801">
                    <declaration name="error" type="NoSuchFieldError" line="802"/>
                </scope>
            </method>
        </class>
    </source>