<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.Collection"/>
        <import package="java.util.Queue"/>
        <interface name="BlockingQueue">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Queue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="4">
                A {@link java.util.Queue} that additionally supports operations
                  that wait for the queue to become non-empty when retrieving an
                  element, and wait for space to become available in the queue when
                  storing an element.
                  &lt;p&gt;&lt;tt&gt;BlockingQueue&lt;/tt&gt; methods come in four forms, with different ways
                  of handling operations that cannot be satisfied immediately, but may be
                  satisfied at some point in the future:
                  one throws an exception, the second returns a special value (either
                  &lt;tt&gt;null&lt;/tt&gt; or &lt;tt&gt;false&lt;/tt&gt;, depending on the operation), the third
                  blocks the current thread indefinitely until the operation can succeed,
                  and the fourth blocks for only a given maximum time limit before giving
                  up.  These methods are summarized in the following table:
                  &lt;p&gt;
                  &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Special value&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Blocks&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Times out&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Insert&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #add add(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offer offer(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #put put(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offer(Object,long,TimeUnit) offer(e, time, unit)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Remove&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #remove remove()}&lt;/td&gt;
                  &lt;td&gt;{@link #poll poll()}&lt;/td&gt;
                  &lt;td&gt;{@link #take take()}&lt;/td&gt;
                  &lt;td&gt;{@link #poll(long,TimeUnit) poll(time, unit)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Examine&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #element element()}&lt;/td&gt;
                  &lt;td&gt;{@link #peek peek()}&lt;/td&gt;
                  &lt;td&gt;&lt;em&gt;not applicable&lt;/em&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;em&gt;not applicable&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;A &lt;tt&gt;BlockingQueue&lt;/tt&gt; does not accept &lt;tt&gt;null&lt;/tt&gt; elements.
                  Implementations throw &lt;tt&gt;NullPointerException&lt;/tt&gt; on attempts
                  to &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;put&lt;/tt&gt; or &lt;tt&gt;offer&lt;/tt&gt; a &lt;tt&gt;null&lt;/tt&gt;.  A
                  &lt;tt&gt;null&lt;/tt&gt; is used as a sentinel value to indicate failure of
                  &lt;tt&gt;poll&lt;/tt&gt; operations.
                  &lt;p&gt;A &lt;tt&gt;BlockingQueue&lt;/tt&gt; may be capacity bounded. At any given
                  time it may have a &lt;tt&gt;remainingCapacity&lt;/tt&gt; beyond which no
                  additional elements can be &lt;tt&gt;put&lt;/tt&gt; without blocking.
                  A &lt;tt&gt;BlockingQueue&lt;/tt&gt; without any intrinsic capacity constraints always
                  reports a remaining capacity of &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.
                  &lt;p&gt; &lt;tt&gt;BlockingQueue&lt;/tt&gt; implementations are designed to be used
                  primarily for producer-consumer queues, but additionally support
                  the {@link java.util.Collection} interface.  So, for example, it is
                  possible to remove an arbitrary element from a queue using
                  &lt;tt&gt;remove(x)&lt;/tt&gt;. However, such operations are in general
                  &lt;em&gt;not&lt;/em&gt; performed very efficiently, and are intended for only
                  occasional use, such as when a queued message is cancelled.
                  &lt;p&gt; &lt;tt&gt;BlockingQueue&lt;/tt&gt; implementations are thread-safe.  All
                  queuing methods achieve their effects atomically using internal
                  locks or other forms of concurrency control. However, the
                  &lt;em&gt;bulk&lt;/em&gt; Collection operations &lt;tt&gt;addAll&lt;/tt&gt;,
                  &lt;tt&gt;containsAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;removeAll&lt;/tt&gt; are
                  &lt;em&gt;not&lt;/em&gt; necessarily performed atomically unless specified
                  otherwise in an implementation. So it is possible, for example, for
                  &lt;tt&gt;addAll(c)&lt;/tt&gt; to fail (throwing an exception) after adding
                  only some of the elements in &lt;tt&gt;c&lt;/tt&gt;.
                  &lt;p&gt;A &lt;tt&gt;BlockingQueue&lt;/tt&gt; does &lt;em&gt;not&lt;/em&gt; intrinsically support
                  any kind of &amp;quot;close&amp;quot; or &amp;quot;shutdown&amp;quot; operation to
                  indicate that no more items will be added.  The needs and usage of
                  such features tend to be implementation-dependent. For example, a
                  common tactic is for producers to insert special
                  &lt;em&gt;end-of-stream&lt;/em&gt; or &lt;em&gt;poison&lt;/em&gt; objects, that are
                  interpreted accordingly when taken by consumers.
                  &lt;p&gt;
                  Usage example, based on a typical producer-consumer scenario.
                  Note that a &lt;tt&gt;BlockingQueue&lt;/tt&gt; can safely be used with multiple
                  producers and multiple consumers.
                  &lt;pre&gt;
                  class Producer implements Runnable {
                  private final BlockingQueue queue;
                  Producer(BlockingQueue q) { queue = q; }
                  public void run() {
                  try {
                  while (true) { queue.put(produce()); }
                  } catch (InterruptedException ex) { ... handle ...}
                  }
                  Object produce() { ... }
                  }
                  class Consumer implements Runnable {
                  private final BlockingQueue queue;
                  Consumer(BlockingQueue q) { queue = q; }
                  public void run() {
                  try {
                  while (true) { consume(queue.take()); }
                  } catch (InterruptedException ex) { ... handle ...}
                  }
                  void consume(Object x) { ... }
                  }
                  class Setup {
                  void main() {
                  BlockingQueue q = new SomeQueueImplementation();
                  Producer p = new Producer(q);
                  Consumer c1 = new Consumer(q);
                  Consumer c2 = new Consumer(q);
                  new Thread(p).start();
                  new Thread(c1).start();
                  new Thread(c2).start();
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;Memory consistency effects: As with other concurrent
                  collections, actions in a thread prior to placing an object into a{@code BlockingQueue}&lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  actions subsequent to the access or removal of that element from
                  the {@code BlockingQueue} in another thread.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;E&gt;
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <method name="add" type="boolean" line="131"/>
            <javadoc line="131">
                Inserts the specified element into this queue if it is possible to do
                  so immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and throwing an
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; if no space is currently available.
                  When using a capacity-restricted queue, it is generally preferable to
                  use {@link #offer(Object) offer}.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to capacity restrictions                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="149"/>
            <javadoc line="149">
                Inserts the specified element into this queue if it is possible to do
                  so immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and &lt;tt&gt;false&lt;/tt&gt; if no space is currently
                  available.  When using a capacity-restricted queue, this method is
                  generally preferable to {@link #add}, which can fail to insert an
                  element only by throwing an exception.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the element was added to this queue, else
                      &lt;tt&gt;false&lt;/tt&gt;                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="166"/>
            <javadoc line="166">
                Inserts the specified element into this queue, waiting if necessary
                  for space to become available.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="178"/>
            <javadoc line="178">
                Inserts the specified element into this queue, waiting up to the
                  specified wait time if necessary for space to become available.                
                <param>
                    e the element to add                    
                </param>
                <param>
                    timeout how long to wait before giving up, in units of
                      &lt;tt&gt;unit&lt;/tt&gt;                    
                </param>
                <param>
                    unit a &lt;tt&gt;TimeUnit&lt;/tt&gt; determining how to interpret the
                      &lt;tt&gt;timeout&lt;/tt&gt; parameter                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if successful, or &lt;tt&gt;false&lt;/tt&gt; if
                      the specified waiting time elapses before space is available                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="take" type="E" line="196"/>
            <javadoc line="196">
                Retrieves and removes the head of this queue, waiting if necessary
                  until an element becomes available.                
                <return>
                    the head of this queue                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="poll" type="E" line="203"/>
            <javadoc line="203">
                Retrieves and removes the head of this queue, waiting up to the
                  specified wait time if necessary for an element to become available.                
                <param>
                    timeout how long to wait before giving up, in units of
                      &lt;tt&gt;unit&lt;/tt&gt;                    
                </param>
                <param>
                    unit a &lt;tt&gt;TimeUnit&lt;/tt&gt; determining how to interpret the
                      &lt;tt&gt;timeout&lt;/tt&gt; parameter                    
                </param>
                <return>
                    the head of this queue, or &lt;tt&gt;null&lt;/tt&gt; if the
                      specified waiting time elapses before an element is available                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="remainingCapacity" type="int" line="215"/>
            <javadoc line="215">
                Returns the number of additional elements that this queue can ideally
                  (in the absence of memory or resource constraints) accept without
                  blocking, or &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; if there is no intrinsic
                  limit.
                  &lt;p&gt;Note that you &lt;em&gt;cannot&lt;/em&gt; always tell if an attempt to insert
                  an element will succeed by inspecting &lt;tt&gt;remainingCapacity&lt;/tt&gt;
                  because it may be the case that another thread is about to
                  insert or remove an element.                
                <return>
                    the remaining capacity                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="227"/>
            <javadoc line="227">
                Removes a single instance of the specified element from this queue,
                  if it is present.  More formally, removes an element &lt;tt&gt;e&lt;/tt&gt; such
                  that &lt;tt&gt;o.equals(e)&lt;/tt&gt;, if this queue contains one or more such
                  elements.
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this queue contained the specified element
                  (or equivalently, if this queue changed as a result of the call).                
                <param>
                    o element to be removed from this queue, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this queue changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this queue
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="contains" type="boolean" line="243"/>
            <javadoc line="243">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this queue contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this queue contains
                  at least one element &lt;tt&gt;e&lt;/tt&gt; such that &lt;tt&gt;o.equals(e)&lt;/tt&gt;.                
                <param>
                    o object to be checked for containment in this queue                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this queue contains the specified element                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this queue
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="256"/>
            <javadoc line="256">
                Removes all available elements from this queue and adds them
                  to the given collection.  This operation may be more
                  efficient than repeatedly polling this queue.  A failure
                  encountered while attempting to add elements to
                  collection &lt;tt&gt;c&lt;/tt&gt; may result in elements being in neither,
                  either or both collections when the associated exception is
                  thrown.  Attempts to drain a queue to itself result in
                  &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;. Further, the behavior of
                  this operation is undefined if the specified collection is
                  modified while the operation is in progress.                
                <param>
                    c the collection to transfer elements into                    
                </param>
                <return>
                    the number of elements transferred                    
                </return>
                <throws>
                    UnsupportedOperationException if addition of elements
                      is not supported by the specified collection                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of this queue
                      prevents it from being added to the specified collection                    
                </throws>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified collection is this
                      queue, or some property of an element of this queue prevents
                      it from being added to the specified collection                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="279"/>
            <javadoc line="279">
                Removes at most the given number of available elements from
                  this queue and adds them to the given collection.  A failure
                  encountered while attempting to add elements to
                  collection &lt;tt&gt;c&lt;/tt&gt; may result in elements being in neither,
                  either or both collections when the associated exception is
                  thrown.  Attempts to drain a queue to itself result in
                  &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;. Further, the behavior of
                  this operation is undefined if the specified collection is
                  modified while the operation is in progress.                
                <param>
                    c the collection to transfer elements into                    
                </param>
                <param>
                    maxElements the maximum number of elements to transfer                    
                </param>
                <return>
                    the number of elements transferred                    
                </return>
                <throws>
                    UnsupportedOperationException if addition of elements
                      is not supported by the specified collection                    
                </throws>
                <throws>
                    ClassCastException if the class of an element of this queue
                      prevents it from being added to the specified collection                    
                </throws>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified collection is this
                      queue, or some property of an element of this queue prevents
                      it from being added to the specified collection                    
                </throws>
            </javadoc>
        </interface>
    </source>