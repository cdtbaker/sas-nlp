<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <import package="java.util"/>
        <class name="AtomicReferenceArray" line="40">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="java.io.Serializable"/>
            <javadoc line="40">
                An array of object references in which elements may be updated
                  atomically.  See the {@link java.util.concurrent.atomic} package
                  specification for description of the properties of atomic
                  variables.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <E>
                       The base class of elements held in this array                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="50"/>
            <declaration name="unsafe" type="Unsafe" line="52"/>
            <declaration name="base" type="int" line="53"/>
            <declaration name="shift" type="int" line="54"/>
            <declaration name="array" type="Object[]" line="55"/>
            <scope line="57">
                <declaration name="scale" type="int" line="58"/>
            </scope>
            <method name="checkedByteOffset" type="long" line="64">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="byteOffset" type="long" line="71">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="75">
                Creates a new AtomicReferenceArray of the given length, with all
                  elements initially null.                
                <param>
                    length the length of the array                    
                </param>
            </javadoc>
            <method name="AtomicReferenceArray" type="constructor" line="81">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Creates a new AtomicReferenceArray with the same length as, and
                  all elements copied from, the given array.                
                <param>
                    array the array to copy elements from                    
                </param>
                <throws>
                    NullPointerException if array is null                    
                </throws>
            </javadoc>
            <method name="AtomicReferenceArray" type="constructor" line="92">
                <params>
                    <param name="array" type="E[]"/>
                </params>
                <comment line="93">
                    Visibility guaranteed by final field guarantees                    
                </comment>
            </method>
            <javadoc line="97">
                Returns the length of the array.                
                <return>
                    the length of the array                    
                </return>
            </javadoc>
            <method name="length" type="int" line="102"/>
            <javadoc line="106">
                Gets the current value at position {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="E" line="112">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getRaw" type="E" line="116">
                <params>
                    <param name="offset" type="long"/>
                </params>
            </method>
            <javadoc line="120">
                Sets the element at position {@code i} to the given value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="126">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="E"/>
                </params>
            </method>
            <javadoc line="130">
                Eventually sets the element at position {@code i} to the given value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="137">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="E"/>
                </params>
            </method>
            <javadoc line="142">
                Atomically sets the element at position {@code i} to the given
                  value and returns the old value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="E" line="150">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="E"/>
                </params>
                <declaration name="offset" type="long" line="151"/>
                <scope line="152">
                    <declaration name="current" type="E" line="153"/>
                </scope>
            </method>
            <javadoc line="159">
                Atomically sets the element at position {@code i} to the given
                  updated value if the current value {@code ==} the expected value.                
                <param>
                    i the index                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="169">
                <params>
                    <param name="i" type="int"/>
                    <param name="expect" type="E"/>
                    <param name="update" type="E"/>
                </params>
            </method>
            <method name="compareAndSetRaw" type="boolean" line="173">
                <params>
                    <param name="offset" type="long"/>
                    <param name="expect" type="E"/>
                    <param name="update" type="E"/>
                </params>
            </method>
            <javadoc line="177">
                Atomically sets the element at position {@code i} to the given
                  updated value if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    i the index                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="190">
                <params>
                    <param name="i" type="int"/>
                    <param name="expect" type="E"/>
                    <param name="update" type="E"/>
                </params>
            </method>
            <javadoc line="194">
                Returns the String representation of the current values of array.                
                <return>
                    the String representation of the current values of array                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="198">
                <declaration name="iMax" type="int" line="199"/>
                <declaration name="b" type="StringBuilder" line="203"/>
                <scope line="205"/>
            </method>
        </class>
    </source>