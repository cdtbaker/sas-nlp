<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util"/>
        <interface name="BlockingDeque">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="BlockingQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="Deque">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <comment line="202">
                We have &quot;diamond&quot; multiple interface inheritance here, and that
                 introduces ambiguities.  Methods might end up with different
                 specs depending on the branch chosen by javadoc.  Thus a lot of
                 methods specs here are copied from superinterfaces.                
            </comment>
            <comment line="429">
                *** BlockingQueue methods ***                
            </comment>
            <comment line="636">
                *** Stack methods ***                
            </comment>
            <javadoc line="39">
                A {@link Deque} that additionally supports blocking operations that wait
                  for the deque to become non-empty when retrieving an element, and wait for
                  space to become available in the deque when storing an element.
                  &lt;p&gt;&lt;tt&gt;BlockingDeque&lt;/tt&gt; methods come in four forms, with different ways
                  of handling operations that cannot be satisfied immediately, but may be
                  satisfied at some point in the future:
                  one throws an exception, the second returns a special value (either
                  &lt;tt&gt;null&lt;/tt&gt; or &lt;tt&gt;false&lt;/tt&gt;, depending on the operation), the third
                  blocks the current thread indefinitely until the operation can succeed,
                  and the fourth blocks for only a given maximum time limit before giving
                  up.  These methods are summarized in the following table:
                  &lt;p&gt;
                  &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;
                  &lt;tr&gt;
                  &lt;td ALIGN=CENTER COLSPAN = 5&gt; &lt;b&gt;First Element (Head)&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Special value&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Blocks&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Times out&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Insert&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #addFirst addFirst(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerFirst(Object) offerFirst(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #putFirst putFirst(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerFirst(Object,long,TimeUnit) offerFirst(e, time, unit)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Remove&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #removeFirst removeFirst()}&lt;/td&gt;
                  &lt;td&gt;{@link #pollFirst pollFirst()}&lt;/td&gt;
                  &lt;td&gt;{@link #takeFirst takeFirst()}&lt;/td&gt;
                  &lt;td&gt;{@link #pollFirst(long,TimeUnit) pollFirst(time, unit)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Examine&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #getFirst getFirst()}&lt;/td&gt;
                  &lt;td&gt;{@link #peekFirst peekFirst()}&lt;/td&gt;
                  &lt;td&gt;&lt;em&gt;not applicable&lt;/em&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;em&gt;not applicable&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td ALIGN=CENTER COLSPAN = 5&gt; &lt;b&gt;Last Element (Tail)&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Special value&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Blocks&lt;/em&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;em&gt;Times out&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Insert&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #addLast addLast(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerLast(Object) offerLast(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #putLast putLast(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerLast(Object,long,TimeUnit) offerLast(e, time, unit)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Remove&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #removeLast() removeLast()}&lt;/td&gt;
                  &lt;td&gt;{@link #pollLast() pollLast()}&lt;/td&gt;
                  &lt;td&gt;{@link #takeLast takeLast()}&lt;/td&gt;
                  &lt;td&gt;{@link #pollLast(long,TimeUnit) pollLast(time, unit)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Examine&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;{@link #getLast getLast()}&lt;/td&gt;
                  &lt;td&gt;{@link #peekLast peekLast()}&lt;/td&gt;
                  &lt;td&gt;&lt;em&gt;not applicable&lt;/em&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;em&gt;not applicable&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;Like any {@link BlockingQueue}, a &lt;tt&gt;BlockingDeque&lt;/tt&gt; is thread safe,
                  does not permit null elements, and may (or may not) be
                  capacity-constrained.
                  &lt;p&gt;A &lt;tt&gt;BlockingDeque&lt;/tt&gt; implementation may be used directly as a FIFO
                  &lt;tt&gt;BlockingQueue&lt;/tt&gt;. The methods inherited from the
                  &lt;tt&gt;BlockingQueue&lt;/tt&gt; interface are precisely equivalent to
                  &lt;tt&gt;BlockingDeque&lt;/tt&gt; methods as indicated in the following table:
                  &lt;p&gt;
                  &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;
                  &lt;tr&gt;
                  &lt;td ALIGN=CENTER&gt; &lt;b&gt;&lt;tt&gt;BlockingQueue&lt;/tt&gt; Method&lt;/b&gt;&lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt; &lt;b&gt;Equivalent &lt;tt&gt;BlockingDeque&lt;/tt&gt; Method&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td ALIGN=CENTER COLSPAN = 2&gt; &lt;b&gt;Insert&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #add(Object) add(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #addLast(Object) addLast(e)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #offer(Object) offer(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerLast(Object) offerLast(e)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #put(Object) put(e)}&lt;/td&gt;
                  &lt;td&gt;{@link #putLast(Object) putLast(e)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #offer(Object,long,TimeUnit) offer(e, time, unit)}&lt;/td&gt;
                  &lt;td&gt;{@link #offerLast(Object,long,TimeUnit) offerLast(e, time, unit)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td ALIGN=CENTER COLSPAN = 2&gt; &lt;b&gt;Remove&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #remove() remove()}&lt;/td&gt;
                  &lt;td&gt;{@link #removeFirst() removeFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #poll() poll()}&lt;/td&gt;
                  &lt;td&gt;{@link #pollFirst() pollFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #take() take()}&lt;/td&gt;
                  &lt;td&gt;{@link #takeFirst() takeFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #poll(long,TimeUnit) poll(time, unit)}&lt;/td&gt;
                  &lt;td&gt;{@link #pollFirst(long,TimeUnit) pollFirst(time, unit)}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td ALIGN=CENTER COLSPAN = 2&gt; &lt;b&gt;Examine&lt;/b&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #element() element()}&lt;/td&gt;
                  &lt;td&gt;{@link #getFirst() getFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@link #peek() peek()}&lt;/td&gt;
                  &lt;td&gt;{@link #peekFirst() peekFirst()}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;Memory consistency effects: As with other concurrent
                  collections, actions in a thread prior to placing an object into a{@code BlockingDeque}&lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  actions subsequent to the access or removal of that element from
                  the {@code BlockingDeque} in another thread.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.6                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;E&gt;
                       the type of elements held in this collection                    
                </param>
            </javadoc>
            <method name="addFirst" type="void" line="208"/>
            <javadoc line="208">
                Inserts the specified element at the front of this deque if it is
                  possible to do so immediately without violating capacity restrictions,
                  throwing an &lt;tt&gt;IllegalStateException&lt;/tt&gt; if no space is currently
                  available.  When using a capacity-restricted deque, it is generally
                  preferable to use {@link #offerFirst(Object) offerFirst}.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    IllegalStateException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="addLast" type="void" line="223"/>
            <javadoc line="223">
                Inserts the specified element at the end of this deque if it is
                  possible to do so immediately without violating capacity restrictions,
                  throwing an &lt;tt&gt;IllegalStateException&lt;/tt&gt; if no space is currently
                  available.  When using a capacity-restricted deque, it is generally
                  preferable to use {@link #offerLast(Object) offerLast}.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    IllegalStateException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="offerFirst" type="boolean" line="238"/>
            <javadoc line="238">
                Inserts the specified element at the front of this deque if it is
                  possible to do so immediately without violating capacity restrictions,
                  returning &lt;tt&gt;true&lt;/tt&gt; upon success and &lt;tt&gt;false&lt;/tt&gt; if no space is
                  currently available.
                  When using a capacity-restricted deque, this method is generally
                  preferable to the {@link #addFirst(Object) addFirst} method, which can
                  fail to insert an element only by throwing an exception.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    ClassCastException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="offerLast" type="boolean" line="254"/>
            <javadoc line="254">
                Inserts the specified element at the end of this deque if it is
                  possible to do so immediately without violating capacity restrictions,
                  returning &lt;tt&gt;true&lt;/tt&gt; upon success and &lt;tt&gt;false&lt;/tt&gt; if no space is
                  currently available.
                  When using a capacity-restricted deque, this method is generally
                  preferable to the {@link #addLast(Object) addLast} method, which can
                  fail to insert an element only by throwing an exception.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    ClassCastException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="putFirst" type="void" line="270"/>
            <javadoc line="270">
                Inserts the specified element at the front of this deque,
                  waiting if necessary for space to become available.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="putLast" type="void" line="284"/>
            <javadoc line="284">
                Inserts the specified element at the end of this deque,
                  waiting if necessary for space to become available.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="offerFirst" type="boolean" line="298"/>
            <javadoc line="298">
                Inserts the specified element at the front of this deque,
                  waiting up to the specified wait time if necessary for space to
                  become available.                
                <param>
                    e the element to add                    
                </param>
                <param>
                    timeout how long to wait before giving up, in units of
                      &lt;tt&gt;unit&lt;/tt&gt;                    
                </param>
                <param>
                    unit a &lt;tt&gt;TimeUnit&lt;/tt&gt; determining how to interpret the
                      &lt;tt&gt;timeout&lt;/tt&gt; parameter                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if successful, or &lt;tt&gt;false&lt;/tt&gt; if
                      the specified waiting time elapses before space is available                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="offerLast" type="boolean" line="320"/>
            <javadoc line="320">
                Inserts the specified element at the end of this deque,
                  waiting up to the specified wait time if necessary for space to
                  become available.                
                <param>
                    e the element to add                    
                </param>
                <param>
                    timeout how long to wait before giving up, in units of
                      &lt;tt&gt;unit&lt;/tt&gt;                    
                </param>
                <param>
                    unit a &lt;tt&gt;TimeUnit&lt;/tt&gt; determining how to interpret the
                      &lt;tt&gt;timeout&lt;/tt&gt; parameter                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if successful, or &lt;tt&gt;false&lt;/tt&gt; if
                      the specified waiting time elapses before space is available                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="takeFirst" type="E" line="342"/>
            <javadoc line="342">
                Retrieves and removes the first element of this deque, waiting
                  if necessary until an element becomes available.                
                <return>
                    the head of this deque                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="takeLast" type="E" line="351"/>
            <javadoc line="351">
                Retrieves and removes the last element of this deque, waiting
                  if necessary until an element becomes available.                
                <return>
                    the tail of this deque                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="pollFirst" type="E" line="360"/>
            <javadoc line="360">
                Retrieves and removes the first element of this deque, waiting
                  up to the specified wait time if necessary for an element to
                  become available.                
                <param>
                    timeout how long to wait before giving up, in units of
                      &lt;tt&gt;unit&lt;/tt&gt;                    
                </param>
                <param>
                    unit a &lt;tt&gt;TimeUnit&lt;/tt&gt; determining how to interpret the
                      &lt;tt&gt;timeout&lt;/tt&gt; parameter                    
                </param>
                <return>
                    the head of this deque, or &lt;tt&gt;null&lt;/tt&gt; if the specified
                      waiting time elapses before an element is available                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="pollLast" type="E" line="376"/>
            <javadoc line="376">
                Retrieves and removes the last element of this deque, waiting
                  up to the specified wait time if necessary for an element to
                  become available.                
                <param>
                    timeout how long to wait before giving up, in units of
                      &lt;tt&gt;unit&lt;/tt&gt;                    
                </param>
                <param>
                    unit a &lt;tt&gt;TimeUnit&lt;/tt&gt; determining how to interpret the
                      &lt;tt&gt;timeout&lt;/tt&gt; parameter                    
                </param>
                <return>
                    the tail of this deque, or &lt;tt&gt;null&lt;/tt&gt; if the specified
                      waiting time elapses before an element is available                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="removeFirstOccurrence" type="boolean" line="392"/>
            <javadoc line="392">
                Removes the first occurrence of the specified element from this deque.
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the first element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;o.equals(e)&lt;/tt&gt; (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if an element was removed as a result of this call                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this deque
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="removeLastOccurrence" type="boolean" line="410"/>
            <javadoc line="410">
                Removes the last occurrence of the specified element from this deque.
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the last element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;o.equals(e)&lt;/tt&gt; (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if an element was removed as a result of this call                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this deque
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="430"/>
            <javadoc line="430">
                Inserts the specified element into the queue represented by this deque
                  (in other words, at the tail of this deque) if it is possible to do so
                  immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and throwing an
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; if no space is currently available.
                  When using a capacity-restricted deque, it is generally preferable to
                  use {@link #offer(Object) offer}.
                  &lt;p&gt;This method is equivalent to {@link #addLast(Object) addLast}.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    IllegalStateException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="451"/>
            <javadoc line="451">
                Inserts the specified element into the queue represented by this deque
                  (in other words, at the tail of this deque) if it is possible to do so
                  immediately without violating capacity restrictions, returning
                  &lt;tt&gt;true&lt;/tt&gt; upon success and &lt;tt&gt;false&lt;/tt&gt; if no space is currently
                  available.  When using a capacity-restricted deque, this method is
                  generally preferable to the {@link #add} method, which can fail to
                  insert an element only by throwing an exception.
                  &lt;p&gt;This method is equivalent to {@link #offerLast(Object) offerLast}.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="471"/>
            <javadoc line="471">
                Inserts the specified element into the queue represented by this deque
                  (in other words, at the tail of this deque), waiting if necessary for
                  space to become available.
                  &lt;p&gt;This method is equivalent to {@link #putLast(Object) putLast}.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="488"/>
            <javadoc line="488">
                Inserts the specified element into the queue represented by this deque
                  (in other words, at the tail of this deque), waiting up to the
                  specified wait time if necessary for space to become available.
                  &lt;p&gt;This method is equivalent to{@link #offerLast(Object,long,TimeUnit) offerLast}.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the element was added to this deque, else
                      &lt;tt&gt;false&lt;/tt&gt;                    
                </return>
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this deque                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="509"/>
            <javadoc line="509">
                Retrieves and removes the head of the queue represented by this deque
                  (in other words, the first element of this deque).
                  This method differs from {@link #poll poll} only in that it
                  throws an exception if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #removeFirst() removeFirst}.                
                <return>
                    the head of the queue represented by this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="poll" type="E" line="522"/>
            <javadoc line="522">
                Retrieves and removes the head of the queue represented by this deque
                  (in other words, the first element of this deque), or returns
                  &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #pollFirst()}.                
                <return>
                    the head of this deque, or &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="take" type="E" line="533"/>
            <javadoc line="533">
                Retrieves and removes the head of the queue represented by this deque
                  (in other words, the first element of this deque), waiting if
                  necessary until an element becomes available.
                  &lt;p&gt;This method is equivalent to {@link #takeFirst() takeFirst}.                
                <return>
                    the head of this deque                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="poll" type="E" line="545"/>
            <javadoc line="545">
                Retrieves and removes the head of the queue represented by this deque
                  (in other words, the first element of this deque), waiting up to the
                  specified wait time if necessary for an element to become available.
                  &lt;p&gt;This method is equivalent to{@link #pollFirst(long,TimeUnit) pollFirst}.                
                <return>
                    the head of this deque, or &lt;tt&gt;null&lt;/tt&gt; if the
                      specified waiting time elapses before an element is available                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="element" type="E" line="560"/>
            <javadoc line="560">
                Retrieves, but does not remove, the head of the queue represented by
                  this deque (in other words, the first element of this deque).
                  This method differs from {@link #peek peek} only in that it throws an
                  exception if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #getFirst() getFirst}.                
                <return>
                    the head of this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="peek" type="E" line="573"/>
            <javadoc line="573">
                Retrieves, but does not remove, the head of the queue represented by
                  this deque (in other words, the first element of this deque), or
                  returns &lt;tt&gt;null&lt;/tt&gt; if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #peekFirst() peekFirst}.                
                <return>
                    the head of this deque, or &lt;tt&gt;null&lt;/tt&gt; if this deque is empty                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="584"/>
            <javadoc line="584">
                Removes the first occurrence of the specified element from this deque.
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the first element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;o.equals(e)&lt;/tt&gt; (if such an element exists).
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).
                  &lt;p&gt;This method is equivalent to{@link #removeFirstOccurrence(Object) removeFirstOccurrence}.                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this deque changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this deque
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="contains" type="boolean" line="605"/>
            <javadoc line="605">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this deque contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this deque contains
                  at least one element &lt;tt&gt;e&lt;/tt&gt; such that &lt;tt&gt;o.equals(e)&lt;/tt&gt;.                
                <param>
                    o object to be checked for containment in this deque                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this deque contains the specified element                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      is incompatible with this deque
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      (&lt;a href=&quot;../Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)                    
                </throws>
            </javadoc>
            <method name="size" type="int" line="620"/>
            <javadoc line="620">
                Returns the number of elements in this deque.                
                <return>
                    the number of elements in this deque                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="627"/>
            <javadoc line="627">
                Returns an iterator over the elements in this deque in proper sequence.
                  The elements will be returned in order from first (head) to last (tail).                
                <return>
                    an iterator over the elements in this deque in proper sequence                    
                </return>
            </javadoc>
            <method name="push" type="void" line="637"/>
            <javadoc line="637">
                Pushes an element onto the stack represented by this deque.  In other
                  words, inserts the element at the front of this deque unless it would
                  violate capacity restrictions.
                  &lt;p&gt;This method is equivalent to {@link #addFirst(Object) addFirst}.                
                <throws>
                    IllegalStateException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
        </interface>
    </source>