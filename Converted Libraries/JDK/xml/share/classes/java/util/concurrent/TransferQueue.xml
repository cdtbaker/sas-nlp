<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <interface name="TransferQueue">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="BlockingQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="2">
                A {@link BlockingQueue} in which producers may wait for consumers
                  to receive elements.  A {@code TransferQueue} may be useful for
                  example in message passing applications in which producers
                  sometimes (using method {@link #transfer}) await receipt of
                  elements by consumers invoking {@code take} or {@code poll}, while
                  at other times enqueue elements (via method {@code put}) without
                  waiting for receipt.{@linkplain #tryTransfer(Object) Non-blocking} and{@linkplain #tryTransfer(Object,long,TimeUnit) time-out} versions of{@code tryTransfer} are also available.
                  A {@code TransferQueue} may also be queried, via {@link #hasWaitingConsumer}, whether there are any threads waiting for
                  items, which is a converse analogy to a {@code peek} operation.
                  &lt;p&gt;Like other blocking queues, a {@code TransferQueue} may be
                  capacity bounded.  If so, an attempted transfer operation may
                  initially block waiting for available space, and/or subsequently
                  block waiting for reception by a consumer.  Note that in a queue
                  with zero capacity, such as {@link SynchronousQueue}, {@code put}and {@code transfer} are effectively synonymous.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.7                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;E&gt;
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <method name="tryTransfer" type="boolean" line="26"/>
            <javadoc line="26">
                Transfers the element to a waiting consumer immediately, if possible.
                  &lt;p&gt;More precisely, transfers the specified element immediately
                  if there exists a consumer already waiting to receive it (in{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
                  otherwise returning {@code false} without enqueuing the element.                
                <param>
                    e the element to transfer                    
                </param>
                <return>
                    {@code true} if the element was transferred, else{@code false}                    
                </return>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="transfer" type="void" line="40"/>
            <javadoc line="40">
                Transfers the element to a consumer, waiting if necessary to do so.
                  &lt;p&gt;More precisely, transfers the specified element immediately
                  if there exists a consumer already waiting to receive it (in{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
                  else waits until the element is received by a consumer.                
                <param>
                    e the element to transfer                    
                </param>
                <throws>
                    InterruptedException if interrupted while waiting,
                      in which case the element is not left enqueued                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="tryTransfer" type="boolean" line="55"/>
            <javadoc line="55">
                Transfers the element to a consumer if it is possible to do so
                  before the timeout elapses.
                  &lt;p&gt;More precisely, transfers the specified element immediately
                  if there exists a consumer already waiting to receive it (in{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
                  else waits until the element is received by a consumer,
                  returning {@code false} if the specified wait time elapses
                  before the element can be transferred.                
                <param>
                    e the element to transfer                    
                </param>
                <param>
                    timeout how long to wait before giving up, in units of{@code unit}                    
                </param>
                <param>
                    unit a {@code TimeUnit} determining how to interpret the{@code timeout} parameter                    
                </param>
                <return>
                    {@code true} if successful, or {@code false} if
                      the specified waiting time elapses before completion,
                      in which case the element is not left enqueued                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting,
                      in which case the element is not left enqueued                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified element
                      prevents it from being added to this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified
                      element prevents it from being added to this queue                    
                </throws>
            </javadoc>
            <method name="hasWaitingConsumer" type="boolean" line="78"/>
            <javadoc line="78">
                Returns {@code true} if there is at least one consumer waiting
                  to receive an element via {@link #take} or
                  timed {@link #poll(long,TimeUnit) poll}.
                  The return value represents a momentary state of affairs.                
                <return>
                    {@code true} if there is at least one waiting consumer                    
                </return>
            </javadoc>
            <method name="getWaitingConsumerCount" type="int" line="86"/>
            <javadoc line="86">
                Returns an estimate of the number of consumers waiting to
                  receive elements via {@link #take} or timed{@link #poll(long,TimeUnit) poll}.  The return value is an
                  approximation of a momentary state of affairs, that may be
                  inaccurate if consumers have completed or given up waiting.
                  The value may be useful for monitoring and heuristics, but
                  not for synchronization control.  Implementations of this
                  method are likely to be noticeably slower than those for{@link #hasWaitingConsumer}.                
                <return>
                    the number of consumers waiting to receive elements                    
                </return>
            </javadoc>
        </interface>
    </source>