<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <class name="AtomicMarkableReference" line="38">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <comment line="192">
                Unsafe mechanics                
            </comment>
            <javadoc line="38">
                An {@code AtomicMarkableReference} maintains an object reference
                  along with a mark bit, that can be updated atomically.
                  &lt;p&gt;Implementation note: This implementation maintains markable
                  references by creating internal objects representing &quot;boxed&quot;
                  [reference, boolean] pairs.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <V>
                       The type of object referred to by this reference                    
                </param>
            </javadoc>
            <class name="Pair" line="52">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <declaration name="reference" type="T" line="53"/>
                <declaration name="mark" type="boolean" line="54"/>
                <method name="Pair" type="constructor" line="55">
                    <params>
                        <param name="reference" type="T"/>
                        <param name="mark" type="boolean"/>
                    </params>
                </method>
                <method name="of" type="Pair<T>" line="59">
                    <params>
                        <param name="reference" type="T"/>
                        <param name="mark" type="boolean"/>
                    </params>
                </method>
            </class>
            <declaration name="pair" type="Pair&lt;V&gt;" line="64"/>
            <javadoc line="66">
                Creates a new {@code AtomicMarkableReference} with the given
                  initial values.                
                <param>
                    initialRef the initial reference                    
                </param>
                <param>
                    initialMark the initial mark                    
                </param>
            </javadoc>
            <method name="AtomicMarkableReference" type="constructor" line="73">
                <params>
                    <param name="initialRef" type="V"/>
                    <param name="initialMark" type="boolean"/>
                </params>
            </method>
            <javadoc line="77">
                Returns the current value of the reference.                
                <return>
                    the current value of the reference                    
                </return>
            </javadoc>
            <method name="getReference" type="V" line="82"/>
            <javadoc line="86">
                Returns the current value of the mark.                
                <return>
                    the current value of the mark                    
                </return>
            </javadoc>
            <method name="isMarked" type="boolean" line="91"/>
            <javadoc line="95">
                Returns the current values of both the reference and the mark.
                  Typical usage is {@code boolean[1] holder; ref = v.get(holder); }.                
                <param>
                    markHolder an array of size of at least one. On return,{@code markholder[0]} will hold the value of the mark.                    
                </param>
                <return>
                    the current value of the reference                    
                </return>
            </javadoc>
            <method name="get" type="V" line="103">
                <params>
                    <param name="markHolder" type="boolean[]"/>
                </params>
                <declaration name="pair" type="Pair&lt;V&gt;" line="104"/>
            </method>
            <javadoc line="109">
                Atomically sets the value of both the reference and mark
                  to the given update values if the
                  current reference is {@code ==} to the expected reference
                  and the current mark is equal to the expected mark.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    expectedReference the expected value of the reference                    
                </param>
                <param>
                    newReference the new value for the reference                    
                </param>
                <param>
                    expectedMark the expected value of the mark                    
                </param>
                <param>
                    newMark the new value for the mark                    
                </param>
                <return>
                    true if successful                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="128">
                <params>
                    <param name="expectedReference" type="V"/>
                    <param name="newReference" type="V"/>
                    <param name="expectedMark" type="boolean"/>
                    <param name="newMark" type="boolean"/>
                </params>
            </method>
            <javadoc line="133">
                Atomically sets the value of both the reference and mark
                  to the given update values if the
                  current reference is {@code ==} to the expected reference
                  and the current mark is equal to the expected mark.                
                <param>
                    expectedReference the expected value of the reference                    
                </param>
                <param>
                    newReference the new value for the reference                    
                </param>
                <param>
                    expectedMark the expected value of the mark                    
                </param>
                <param>
                    newMark the new value for the mark                    
                </param>
                <return>
                    true if successful                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="148">
                <params>
                    <param name="expectedReference" type="V"/>
                    <param name="newReference" type="V"/>
                    <param name="expectedMark" type="boolean"/>
                    <param name="newMark" type="boolean"/>
                </params>
                <declaration name="current" type="Pair&lt;V&gt;" line="149"/>
            </method>
            <javadoc line="158">
                Unconditionally sets the value of both the reference and mark.                
                <param>
                    newReference the new value for the reference                    
                </param>
                <param>
                    newMark the new value for the mark                    
                </param>
            </javadoc>
            <method name="set" type="void" line="164">
                <params>
                    <param name="newReference" type="V"/>
                    <param name="newMark" type="boolean"/>
                </params>
                <declaration name="current" type="Pair&lt;V&gt;" line="165"/>
            </method>
            <javadoc line="170">
                Atomically sets the value of the mark to the given update value
                  if the current reference is {@code ==} to the expected
                  reference.  Any given invocation of this operation may fail
                  (return {@code false}) spuriously, but repeated invocation
                  when the current value holds the expected value and no other
                  thread is also attempting to set the value will eventually
                  succeed.                
                <param>
                    expectedReference the expected value of the reference                    
                </param>
                <param>
                    newMark the new value for the mark                    
                </param>
                <return>
                    true if successful                    
                </return>
            </javadoc>
            <method name="attemptMark" type="boolean" line="183">
                <params>
                    <param name="expectedReference" type="V"/>
                    <param name="newMark" type="boolean"/>
                </params>
                <declaration name="current" type="Pair&lt;V&gt;" line="184"/>
            </method>
            <declaration name="UNSAFE" type="sun.misc.Unsafe" line="193"/>
            <declaration name="pairOffset" type="long" line="194"/>
            <method name="casPair" type="boolean" line="197">
                <params>
                    <param name="cmp" type="Pair<V>"/>
                    <param name="val" type="Pair<V>"/>
                </params>
            </method>
            <method name="objectFieldOffset" type="long" line="202">
                <params>
                    <param name="UNSAFE" type="sun.misc.Unsafe"/>
                    <param name="field" type="String"/>
                    <param name="klazz" type="Class<?>"/>
                </params>
                <comment line="206">
                    Convert Exception to corresponding Error                    
                </comment>
                <scope line="203"/>
                <scope line="205">
                    <declaration name="error" type="NoSuchFieldError" line="207"/>
                </scope>
            </method>
        </class>
    </source>