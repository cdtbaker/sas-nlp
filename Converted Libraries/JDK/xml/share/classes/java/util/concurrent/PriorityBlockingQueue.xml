<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.concurrent.locks"/>
        <import package="java.util"/>
        <class name="PriorityBlockingQueue" line="41">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="102">
                The implementation uses an array-based binary heap, with public
                 operations protected with a single lock. However, allocation
                 during resizing uses a simple spinlock (used only while not
                 holding main lock) in order to allow takes to operate
                 concurrently with allocation.  This avoids repeated
                 postponement of waiting consumers and consequent element
                 build-up. The need to back away from lock during allocation
                 makes it impossible to simply wrap delegated
                 java.util.PriorityQueue operations within a lock, as was done
                 in a previous version of this class. To maintain
                 interoperability, a plain PriorityQueue is still used during
                 serialization, which maintains compatibility at the espense of
                 transiently doubling overhead.                
            </comment>
            <comment line="966">
                Unsafe mechanics                
            </comment>
            <implements interface="BlockingQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="java.io.Serializable"/>
            <javadoc line="41">
                An unbounded {@linkplain BlockingQueue blocking queue} that uses
                  the same ordering rules as class {@link PriorityQueue} and supplies
                  blocking retrieval operations.  While this queue is logically
                  unbounded, attempted additions may fail due to resource exhaustion
                  (causing {@code OutOfMemoryError}). This class does not permit{@code null} elements.  A priority queue relying on {@linkplain Comparable natural ordering} also does not permit insertion of
                  non-comparable objects (doing so results in{@code ClassCastException}).
                  &lt;p&gt;This class and its iterator implement all of the
                  &lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link Iterator} interfaces.  The Iterator provided in method {@link #iterator()} is &lt;em&gt;not&lt;/em&gt; guaranteed to traverse the elements of
                  the PriorityBlockingQueue in any particular order. If you need
                  ordered traversal, consider using{@code Arrays.sort(pq.toArray())}.  Also, method {@code drainTo}can be used to &lt;em&gt;remove&lt;/em&gt; some or all elements in priority
                  order and place them in another collection.
                  &lt;p&gt;Operations on this class make no guarantees about the ordering
                  of elements with equal priority. If you need to enforce an
                  ordering, you can define custom classes or comparators that use a
                  secondary key to break ties in primary priority values.  For
                  example, here is a class that applies first-in-first-out
                  tie-breaking to comparable elements. To use it, you would insert a{@code new FIFOEntry(anEntry)} instead of a plain entry object.
                  &lt;pre&gt; {@codeclass FIFOEntry&lt;E extends Comparable&lt;? super E&gt;&gt;}implements Comparable&lt;FIFOEntry&lt;E&gt;&gt; 
                  static final AtomicLong seq = new AtomicLong(0);
                  final long seqNum;
                  final E entry;
                  public FIFOEntry(E entry) {
                  seqNum = seq.getAndIncrement();
                  this.entry = entry;
                  }
                  public E getEntry() { return entry; }
                  public int compareTo(FIFOEntry&lt;E&gt; other) {
                  int res = entry.compareTo(other.entry);
                  if (res == 0 &amp;&amp; other.entry != this.entry)
                  res = (seqNum &lt; other.seqNum ? -1 : 1);
                  return res;
                  }
                  }}&lt;/pre&gt;
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;E&gt;
                       the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="99"/>
            <declaration name="DEFAULT_INITIAL_CAPACITY" type="int" line="117"/>
            <javadoc line="117">
                Default array capacity.                
            </javadoc>
            <declaration name="MAX_ARRAY_SIZE" type="int" line="122"/>
            <javadoc line="122">
                The maximum size of array to allocate.
                  Some VMs reserve some header words in an array.
                  Attempts to allocate larger arrays may result in
                  OutOfMemoryError: Requested array size exceeds VM limit                
            </javadoc>
            <declaration name="queue" type="Object[]" line="130"/>
            <javadoc line="130">
                Priority queue represented as a balanced binary heap: the two
                  children of queue[n] are queue[2n+1] and queue[2(n+1)].  The
                  priority queue is ordered by comparator, or by the elements&apos;
                  natural ordering, if comparator is null: For each node n in the
                  heap and each descendant d of n, n &lt;= d.  The element with the
                  lowest value is in queue[0], assuming the queue is nonempty.                
            </javadoc>
            <declaration name="size" type="int" line="140"/>
            <javadoc line="140">
                The number of elements in the priority queue.                
            </javadoc>
            <declaration name="comparator" type="Comparator&lt;? super E&gt;" line="145"/>
            <javadoc line="145">
                The comparator, or null if priority queue uses elements&apos;
                  natural ordering.                
            </javadoc>
            <declaration name="lock" type="ReentrantLock" line="151"/>
            <javadoc line="151">
                Lock used for all public operations                
            </javadoc>
            <declaration name="notEmpty" type="Condition" line="156"/>
            <javadoc line="156">
                Condition for blocking when empty                
            </javadoc>
            <declaration name="allocationSpinLock" type="int" line="161"/>
            <javadoc line="161">
                Spinlock for allocation, acquired via CAS.                
            </javadoc>
            <declaration name="q" type="PriorityQueue" line="166"/>
            <javadoc line="166">
                A plain PriorityQueue used only for serialization,
                  to maintain compatibility with previous versions
                  of this class. Non-null only during serialization/deserialization.                
            </javadoc>
            <javadoc line="173">
                Creates a {@code PriorityBlockingQueue} with the default
                  initial capacity (11) that orders its elements according to
                  their {@linkplain Comparable natural ordering}.                
            </javadoc>
            <method name="PriorityBlockingQueue" type="constructor" line="178"/>
            <javadoc line="182">
                Creates a {@code PriorityBlockingQueue} with the specified
                  initial capacity that orders its elements according to their{@linkplain Comparable natural ordering}.                
                <param>
                    initialCapacity the initial capacity for this priority queue                    
                </param>
                <throws>
                    IllegalArgumentException if {@code initialCapacity} is less
                      than 1                    
                </throws>
            </javadoc>
            <method name="PriorityBlockingQueue" type="constructor" line="191">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="195">
                Creates a {@code PriorityBlockingQueue} with the specified initial
                  capacity that orders its elements according to the specified
                  comparator.                
                <param>
                    initialCapacity the initial capacity for this priority queue                    
                </param>
                <param>
                    comparator the comparator that will be used to order this
                      priority queue.  If {@code null}, the {@linkplain Comparablenatural ordering} of the elements will be used.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code initialCapacity} is less
                      than 1                    
                </throws>
            </javadoc>
            <method name="PriorityBlockingQueue" type="constructor" line="208">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="comparator" type="Comparator<? super E>"/>
                </params>
            </method>
            <javadoc line="217">
                Creates a {@code PriorityBlockingQueue} containing the elements
                  in the specified collection.  If the specified collection is a{@link SortedSet} or a {@link PriorityQueue},  this
                  priority queue will be ordered according to the same ordering.
                  Otherwise, this priority queue will be ordered according to the{@linkplain Comparable natural ordering} of its elements.                
                <param>
                    c the collection whose elements are to be placed
                      into this priority queue                    
                </param>
                <throws>
                    ClassCastException if elements of the specified collection
                      cannot be compared to one another according to the priority
                      queue&apos;s ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified collection or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="PriorityBlockingQueue" type="constructor" line="233">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <comment line="237">
                    true if not known to be in heap order                    
                </comment>
                <comment line="238">
                    true if must screen for nulls                    
                </comment>
                <comment line="249">
                    exact match                    
                </comment>
                <comment line="254">
                    If c.toArray incorrectly doesn&apos;t return Object[], copy it.                    
                </comment>
                <declaration name="heapify" type="boolean" line="236"/>
                <declaration name="screen" type="boolean" line="237"/>
                <scope line="238">
                    <declaration name="ss" type="SortedSet&lt;? extends E&gt;" line="239"/>
                </scope>
                <scope line="243">
                    <declaration name="pq" type="PriorityBlockingQueue&lt;? extends E&gt;" line="244"/>
                </scope>
                <declaration name="a" type="Object[]" line="251"/>
                <declaration name="n" type="int" line="252"/>
                <scope line="256"/>
            </method>
            <javadoc line="267">
                Tries to grow array to accommodate at least one more element
                  (but normally expand by about 50%), giving up (allowing retry)
                  on contention (which we expect to be rare). Call only while
                  holding lock.                
                <param>
                    array the heap array                    
                </param>
                <param>
                    oldCap the length of the array                    
                </param>
            </javadoc>
            <method name="tryGrow" type="void" line="276">
                <params>
                    <param name="array" type="Object[]"/>
                    <param name="oldCap" type="int"/>
                </params>
                <comment line="278">
                    must release and then re-acquire main lock                    
                </comment>
                <comment line="285">
                    grow faster if small                    
                </comment>
                <comment line="287">
                    possible overflow                    
                </comment>
                <comment line="299">
                    back off if another thread is allocating                    
                </comment>
                <declaration name="newArray" type="Object[]" line="278"/>
                <scope line="281">
                    <scope line="282">
                        <declaration name="newCap" type="int" line="283"/>
                        <scope line="286">
                            <declaration name="minCap" type="int" line="287"/>
                        </scope>
                    </scope>
                    <scope line="294"/>
                </scope>
                <scope line="301"/>
            </method>
            <javadoc line="307">
                Mechanics for poll().  Call only while holding lock.                
            </javadoc>
            <method name="extract" type="E" line="310">
                <declaration name="result" type="E" line="311"/>
                <declaration name="n" type="int" line="312"/>
                <scope line="315">
                    <declaration name="array" type="Object[]" line="316"/>
                    <declaration name="x" type="E" line="318"/>
                    <declaration name="cmp" type="Comparator&lt;? super E&gt;" line="320"/>
                </scope>
            </method>
            <javadoc line="330">
                Inserts item x at position k, maintaining heap invariant by
                  promoting x up the tree until it is greater than or equal to
                  its parent, or is the root.
                  To simplify and speed up coercions and comparisons. the
                  Comparable and Comparator versions are separated into different
                  methods that are otherwise identical. (Similarly for siftDown.)
                  These methods are static, with heap state as arguments, to
                  simplify use in light of possible comparator exceptions.                
                <param>
                    k the position to fill                    
                </param>
                <param>
                    x the item to insert                    
                </param>
                <param>
                    array the heap array                    
                </param>
                <param>
                    n heap size                    
                </param>
            </javadoc>
            <method name="siftUpComparable" type="void" line="346">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="T"/>
                    <param name="array" type="Object[]"/>
                </params>
                <declaration name="key" type="Comparable&lt;? super T&gt;" line="347"/>
                <scope line="348">
                    <declaration name="parent" type="int" line="349"/>
                    <declaration name="e" type="Object" line="350"/>
                </scope>
            </method>
            <method name="siftUpUsingComparator" type="void" line="360">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="T"/>
                    <param name="array" type="Object[]"/>
                    <param name="cmp" type="Comparator<? super T>"/>
                </params>
                <scope line="361">
                    <declaration name="parent" type="int" line="362"/>
                    <declaration name="e" type="Object" line="363"/>
                </scope>
            </method>
            <javadoc line="372">
                Inserts item x at position k, maintaining heap invariant by
                  demoting x down the tree repeatedly until it is less than or
                  equal to its children or is a leaf.                
                <param>
                    k the position to fill                    
                </param>
                <param>
                    x the item to insert                    
                </param>
                <param>
                    array the heap array                    
                </param>
                <param>
                    n heap size                    
                </param>
            </javadoc>
            <method name="siftDownComparable" type="void" line="383">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="T"/>
                    <param name="array" type="Object[]"/>
                    <param name="n" type="int"/>
                </params>
                <comment line="386">
                    loop while a non-leaf                    
                </comment>
                <comment line="388">
                    assume left child is least                    
                </comment>
                <declaration name="key" type="Comparable&lt;? super T&gt;" line="384"/>
                <declaration name="half" type="int" line="385"/>
                <scope line="386">
                    <declaration name="child" type="int" line="387"/>
                    <declaration name="c" type="Object" line="388"/>
                    <declaration name="right" type="int" line="389"/>
                </scope>
            </method>
            <method name="siftDownUsingComparator" type="void" line="403">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="T"/>
                    <param name="array" type="Object[]"/>
                    <param name="n" type="int"/>
                    <param name="cmp" type="Comparator<? super T>"/>
                </params>
                <declaration name="half" type="int" line="404"/>
                <scope line="405">
                    <declaration name="child" type="int" line="406"/>
                    <declaration name="c" type="Object" line="407"/>
                    <declaration name="right" type="int" line="408"/>
                </scope>
            </method>
            <javadoc line="419">
                Establishes the heap invariant (described above) in the entire tree,
                  assuming nothing about the order of the elements prior to the call.                
            </javadoc>
            <method name="heapify" type="void" line="423">
                <declaration name="array" type="Object[]" line="424"/>
                <declaration name="n" type="int" line="425"/>
                <declaration name="half" type="int" line="426"/>
                <declaration name="cmp" type="Comparator&lt;? super E&gt;" line="427"/>
                <scope line="428"/>
                <scope line="432"/>
            </method>
            <javadoc line="438">
                Inserts the specified element into this priority queue.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    {@code true} (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be compared
                      with elements currently in the priority queue according to the
                      priority queue&apos;s ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="448">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="452">
                Inserts the specified element into this priority queue.
                  As the queue is unbounded, this method will never return {@code false}.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    {@code true} (as specified by {@link Queue#offer})                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be compared
                      with elements currently in the priority queue according to the
                      priority queue&apos;s ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="463">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="466"/>
                <declaration name="n" type="int" line="468"/>
                <declaration name="array" type="Object[]" line="469"/>
                <scope line="472">
                    <declaration name="cmp" type="Comparator&lt;? super E&gt;" line="473"/>
                </scope>
                <scope line="480"/>
            </method>
            <javadoc line="486">
                Inserts the specified element into this priority queue.
                  As the queue is unbounded, this method will never block.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    ClassCastException if the specified element cannot be compared
                      with elements currently in the priority queue according to the
                      priority queue&apos;s ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="496">
                <params>
                    <param name="e" type="E"/>
                </params>
                <comment line="498">
                    never need to block                    
                </comment>
            </method>
            <javadoc line="500">
                Inserts the specified element into this priority queue.
                  As the queue is unbounded, this method will never block or
                  return {@code false}.                
                <param>
                    e the element to add                    
                </param>
                <param>
                    timeout This parameter is ignored as the method never blocks                    
                </param>
                <param>
                    unit This parameter is ignored as the method never blocks                    
                </param>
                <return>
                    {@code true} (as specified by{@link BlockingQueue#offer(Object,long,TimeUnit) BlockingQueue.offer})                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be compared
                      with elements currently in the priority queue according to the
                      priority queue&apos;s ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="515">
                <params>
                    <param name="e" type="E"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <comment line="517">
                    never need to block                    
                </comment>
            </method>
            <method name="poll" type="E" line="519">
                <declaration name="lock" type="ReentrantLock" line="520"/>
                <declaration name="result" type="E" line="522"/>
                <scope line="523"/>
                <scope line="525"/>
            </method>
            <method name="take" type="E" line="531">
                <declaration name="lock" type="ReentrantLock" line="532"/>
                <declaration name="result" type="E" line="534"/>
                <scope line="535"/>
                <scope line="538"/>
            </method>
            <method name="poll" type="E" line="544">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="nanos" type="long" line="545"/>
                <declaration name="lock" type="ReentrantLock" line="546"/>
                <declaration name="result" type="E" line="548"/>
                <scope line="549"/>
                <scope line="552"/>
            </method>
            <method name="peek" type="E" line="558">
                <declaration name="lock" type="ReentrantLock" line="559"/>
                <declaration name="result" type="E" line="561"/>
                <scope line="562"/>
                <scope line="564"/>
            </method>
            <javadoc line="570">
                Returns the comparator used to order the elements in this queue,
                  or {@code null} if this queue uses the {@linkplain Comparablenatural ordering} of its elements.                
                <return>
                    the comparator used to order the elements in this queue,
                      or {@code null} if this queue uses the natural
                      ordering of its elements                    
                </return>
            </javadoc>
            <method name="comparator" type="Comparator<? super E>" line="579"/>
            <method name="size" type="int" line="583">
                <declaration name="lock" type="ReentrantLock" line="584"/>
                <scope line="586"/>
                <scope line="588"/>
            </method>
            <javadoc line="593">
                Always returns {@code Integer.MAX_VALUE} because
                  a {@code PriorityBlockingQueue} is not capacity constrained.                
                <return>
                    {@code Integer.MAX_VALUE} always                    
                </return>
            </javadoc>
            <method name="remainingCapacity" type="int" line="598"/>
            <method name="indexOf" type="int" line="602">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="603">
                    <declaration name="array" type="Object[]" line="604"/>
                    <declaration name="n" type="int" line="605"/>
                </scope>
            </method>
            <javadoc line="613">
                Removes the ith element from queue.                
            </javadoc>
            <method name="removeAt" type="void" line="616">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="620">
                    removed last element                    
                </comment>
                <declaration name="array" type="Object[]" line="617"/>
                <declaration name="n" type="int" line="618"/>
                <scope line="621">
                    <declaration name="moved" type="E" line="622"/>
                    <declaration name="cmp" type="Comparator&lt;? super E&gt;" line="624"/>
                    <scope line="629"/>
                </scope>
            </method>
            <javadoc line="639">
                Removes a single instance of the specified element from this queue,
                  if it is present.  More formally, removes an element {@code e} such
                  that {@code o.equals(e)}, if this queue contains one or more such
                  elements.  Returns {@code true} if and only if this queue contained
                  the specified element (or equivalently, if this queue changed as a
                  result of the call).                
                <param>
                    o element to be removed from this queue, if present                    
                </param>
                <return>
                    {@code true} if this queue changed as a result of the call                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="650">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="removed" type="boolean" line="651"/>
                <declaration name="lock" type="ReentrantLock" line="652"/>
                <scope line="654">
                    <declaration name="i" type="int" line="655"/>
                    <scope line="656"/>
                </scope>
                <scope line="660"/>
            </method>
            <javadoc line="667">
                Identity-based version for use in Itr.remove                
            </javadoc>
            <method name="removeEQ" type="void" line="670">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="671"/>
                <scope line="673">
                    <declaration name="array" type="Object[]" line="674"/>
                    <declaration name="n" type="int" line="675"/>
                    <scope line="676">
                        <scope line="677"/>
                    </scope>
                </scope>
                <scope line="682"/>
            </method>
            <javadoc line="687">
                Returns {@code true} if this queue contains the specified element.
                  More formally, returns {@code true} if and only if this queue contains
                  at least one element {@code e} such that {@code o.equals(e)}.                
                <param>
                    o object to be checked for containment in this queue                    
                </param>
                <return>
                    {@code true} if this queue contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="695">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="index" type="int" line="696"/>
                <declaration name="lock" type="ReentrantLock" line="697"/>
                <scope line="699"/>
                <scope line="701"/>
            </method>
            <javadoc line="707">
                Returns an array containing all of the elements in this queue.
                  The returned array elements are in no particular order.
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this queue.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this queue                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="720">
                <declaration name="lock" type="ReentrantLock" line="721"/>
                <scope line="723"/>
                <scope line="725"/>
            </method>
            <method name="toString" type="String" line="731">
                <declaration name="lock" type="ReentrantLock" line="732"/>
                <scope line="734">
                    <declaration name="n" type="int" line="735"/>
                    <declaration name="sb" type="StringBuilder" line="738"/>
                    <scope line="740">
                        <declaration name="e" type="E" line="741"/>
                    </scope>
                </scope>
                <scope line="747"/>
            </method>
            <javadoc line="752">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="758">
                <params>
                    <param name="c" type="Collection<? super E>"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="763"/>
                <scope line="765">
                    <declaration name="n" type="int" line="766"/>
                    <declaration name="e" type="E" line="767"/>
                    <scope line="768"/>
                </scope>
                <scope line="773"/>
            </method>
            <javadoc line="778">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="784">
                <params>
                    <param name="c" type="Collection<? super E>"/>
                    <param name="maxElements" type="int"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="791"/>
                <scope line="793">
                    <declaration name="n" type="int" line="794"/>
                    <declaration name="e" type="E" line="795"/>
                    <scope line="796"/>
                </scope>
                <scope line="801"/>
            </method>
            <javadoc line="806">
                Atomically removes all of the elements from this queue.
                  The queue will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="810">
                <declaration name="lock" type="ReentrantLock" line="811"/>
                <scope line="813">
                    <declaration name="array" type="Object[]" line="814"/>
                    <declaration name="n" type="int" line="815"/>
                </scope>
                <scope line="819"/>
            </method>
            <javadoc line="824">
                Returns an array containing all of the elements in this queue; the
                  runtime type of the returned array is that of the specified array.
                  The returned array elements are in no particular order.
                  If the queue fits in the specified array, it is returned therein.
                  Otherwise, a new array is allocated with the runtime type of the
                  specified array and the size of this queue.
                  &lt;p&gt;If this queue fits in the specified array with room to spare
                  (i.e., the array has more elements than this queue), the element in
                  the array immediately following the end of the queue is set to{@code null}.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose {@code x} is a queue known to contain only strings.
                  The following code can be used to dump the queue into a newly
                  allocated array of {@code String}:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that {@code toArray(new Object[0])} is identical in function to{@code toArray()}.                
                <param>
                    a the array into which the elements of the queue are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose                    
                </param>
                <return>
                    an array containing all of the elements in this queue                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="861">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <comment line="868">
                    Make a new array of a&apos;s runtime type, but my contents:                    
                </comment>
                <declaration name="lock" type="ReentrantLock" line="862"/>
                <scope line="864">
                    <declaration name="n" type="int" line="865"/>
                </scope>
                <scope line="873"/>
            </method>
            <javadoc line="878">
                Returns an iterator over the elements in this queue. The
                  iterator does not return the elements in any particular order.
                  &lt;p&gt;The returned iterator is a &quot;weakly consistent&quot; iterator that
                  will never throw {@link java.util.ConcurrentModificationExceptionConcurrentModificationException}, and guarantees to traverse
                  elements as they existed upon construction of the iterator, and
                  may (but is not guaranteed to) reflect any modifications
                  subsequent to construction.                
                <return>
                    an iterator over the elements in this queue                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="891"/>
            <class name="Itr" line="895">
                <comment line="900">
                    Array of all elements                    
                </comment>
                <comment line="901">
                    index of next element to return;                    
                </comment>
                <comment line="902">
                    index of last element, or -1 if no such                    
                </comment>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <javadoc line="895">
                    Snapshot iterator that works off copy of underlying q array.                    
                </javadoc>
                <declaration name="array" type="Object[]" line="899"/>
                <declaration name="cursor" type="int" line="900"/>
                <declaration name="lastRet" type="int" line="901"/>
                <method name="Itr" type="constructor" line="903">
                    <params>
                        <param name="array" type="Object[]"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="908"/>
                <method name="next" type="E" line="912"/>
                <method name="remove" type="void" line="919"/>
            </class>
            <javadoc line="927">
                Saves the state to a stream (that is, serializes it).  For
                  compatibility with previous version of this class,
                  elements are first copied to a java.util.PriorityQueue,
                  which is then serialized.                
            </javadoc>
            <method name="writeObject" type="void" line="934">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="938">
                    avoid zero capacity argument                    
                </comment>
                <scope line="936">
                    <declaration name="n" type="int" line="937"/>
                </scope>
                <scope line="941"/>
            </method>
            <javadoc line="947">
                Reconstitutes the {@code PriorityBlockingQueue} instance from a stream
                  (that is, deserializes it).                
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="954">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <scope line="955"/>
                <scope line="960"/>
            </method>
            <declaration name="UNSAFE" type="sun.misc.Unsafe" line="966"/>
            <declaration name="allocationSpinLockOffset" type="long" line="967"/>
            <scope line="968">
                <scope line="969">
                    <declaration name="k" type="Class" line="971"/>
                </scope>
                <scope line="974"/>
            </scope>
        </class>
    </source>