<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util"/>
        <class name="AbstractExecutorService" line="39">
            <implements interface="ExecutorService"/>
            <javadoc line="39">
                Provides default implementations of {@link ExecutorService}execution methods. This class implements the &lt;tt&gt;submit&lt;/tt&gt;,
                  &lt;tt&gt;invokeAny&lt;/tt&gt; and &lt;tt&gt;invokeAll&lt;/tt&gt; methods using a{@link RunnableFuture} returned by &lt;tt&gt;newTaskFor&lt;/tt&gt;, which defaults
                  to the {@link FutureTask} class provided in this package.  For example,
                  the implementation of &lt;tt&gt;submit(Runnable)&lt;/tt&gt; creates an
                  associated &lt;tt&gt;RunnableFuture&lt;/tt&gt; that is executed and
                  returned. Subclasses may override the &lt;tt&gt;newTaskFor&lt;/tt&gt; methods
                  to return &lt;tt&gt;RunnableFuture&lt;/tt&gt; implementations other than
                  &lt;tt&gt;FutureTask&lt;/tt&gt;.
                  &lt;p&gt; &lt;b&gt;Extension example&lt;/b&gt;. Here is a sketch of a class
                  that customizes {@link ThreadPoolExecutor} to use
                  a &lt;tt&gt;CustomTask&lt;/tt&gt; class instead of the default &lt;tt&gt;FutureTask&lt;/tt&gt;:
                  &lt;pre&gt; {@code}public class CustomThreadPoolExecutor extends ThreadPoolExecutor 
                  static class CustomTask&lt;V&gt; implements RunnableFuture&lt;V&gt; {...}
                  protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Callable&lt;V&gt; c) {
                  return new CustomTask&lt;V&gt;(c);
                  }
                  protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Runnable r, V v) {
                  return new CustomTask&lt;V&gt;(r, v);
                  }
                  // ... add constructors, etc.
                  }}&lt;/pre&gt;                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <javadoc line="73">
                Returns a &lt;tt&gt;RunnableFuture&lt;/tt&gt; for the given runnable and default
                  value.                
                <param>
                    runnable the runnable task being wrapped                    
                </param>
                <param>
                    value the default value for the returned future                    
                </param>
                <return>
                    a <tt>RunnableFuture</tt> which when run will run the
                      underlying runnable and which, as a <tt>Future</tt>, will yield
                      the given value as its result and provide for cancellation of
                      the underlying task.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="newTaskFor" type="RunnableFuture<T>" line="85">
                <params>
                    <param name="runnable" type="Runnable"/>
                    <param name="value" type="T"/>
                </params>
            </method>
            <javadoc line="89">
                Returns a &lt;tt&gt;RunnableFuture&lt;/tt&gt; for the given callable task.                
                <param>
                    callable the callable task being wrapped                    
                </param>
                <return>
                    a <tt>RunnableFuture</tt> which when run will call the
                      underlying callable and which, as a <tt>Future</tt>, will yield
                      the callable's result as its result and provide for
                      cancellation of the underlying task.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="newTaskFor" type="RunnableFuture<T>" line="99">
                <params>
                    <param name="callable" type="Callable<T>"/>
                </params>
            </method>
            <javadoc line="103">
                @throws RejectedExecutionException {@inheritDoc}                
                <throws>
                    NullPointerException       {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<?>" line="107">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <declaration name="ftask" type="RunnableFuture&lt;Void&gt;" line="109"/>
            </method>
            <javadoc line="114">
                @throws RejectedExecutionException {@inheritDoc}                
                <throws>
                    NullPointerException       {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<T>" line="118">
                <params>
                    <param name="task" type="Runnable"/>
                    <param name="result" type="T"/>
                </params>
                <declaration name="ftask" type="RunnableFuture&lt;T&gt;" line="120"/>
            </method>
            <javadoc line="125">
                @throws RejectedExecutionException {@inheritDoc}                
                <throws>
                    NullPointerException       {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<T>" line="129">
                <params>
                    <param name="task" type="Callable<T>"/>
                </params>
                <declaration name="ftask" type="RunnableFuture&lt;T&gt;" line="131"/>
            </method>
            <javadoc line="136">
                the main mechanics of invokeAny.                
            </javadoc>
            <method name="doInvokeAny" type="T" line="141">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                    <param name="timed" type="boolean"/>
                    <param name="nanos" type="long"/>
                </params>
                <comment line="152">
                    For efficiency, especially in executors with limited
                     parallelism, check to see if previously submitted tasks are
                     done before submitting more of them. This interleaving
                     plus the exception mechanics account for messiness of main
                     loop.                    
                </comment>
                <comment line="159">
                    Record exceptions so that if we fail to obtain any
                     result, we can throw the last exception we got.                    
                </comment>
                <comment line="165">
                    Start one task for sure; the rest incrementally                    
                </comment>
                <declaration name="ntasks" type="int" line="144"/>
                <declaration name="futures" type="List&lt;Future&lt;T&gt;&gt;" line="147"/>
                <declaration name="ecs" type="ExecutorCompletionService&lt;T&gt;" line="148"/>
                <scope line="157">
                    <declaration name="ee" type="ExecutionException" line="160"/>
                    <declaration name="lastTime" type="long" line="161"/>
                    <declaration name="it" type="Iterator&lt;? extends Callable&lt;T&gt;&gt;" line="162"/>
                    <declaration name="active" type="int" line="167"/>
                    <scope line="169">
                        <declaration name="f" type="Future&lt;T&gt;" line="170"/>
                        <scope line="171">
                            <scope line="172"/>
                            <scope line="179">
                                <declaration name="now" type="long" line="183"/>
                            </scope>
                        </scope>
                        <scope line="190">
                            <scope line="192"/>
                            <scope line="194"/>
                            <scope line="196"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="206"/>
            </method>
            <method name="invokeAny" type="T" line="213">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                </params>
                <scope line="214"/>
                <scope line="216"/>
            </method>
            <method name="invokeAny" type="T" line="224">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <method name="invokeAll" type="List<Future<T>>" line="229">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                </params>
                <declaration name="futures" type="List&lt;Future&lt;T&gt;&gt;" line="232"/>
                <declaration name="done" type="boolean" line="233"/>
                <scope line="234">
                    <scope line="235">
                        <declaration name="f" type="RunnableFuture&lt;T&gt;" line="236"/>
                    </scope>
                    <scope line="240">
                        <scope line="241">
                            <scope line="242"/>
                            <scope line="244"/>
                            <scope line="245"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="251"/>
            </method>
            <method name="invokeAll" type="List<Future<T>>" line="260">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <comment line="273">
                    Interleave time checks and calls to execute in case
                     executor doesn&apos;t have any/much parallelism.                    
                </comment>
                <declaration name="nanos" type="long" line="263"/>
                <declaration name="futures" type="List&lt;Future&lt;T&gt;&gt;" line="264"/>
                <declaration name="done" type="boolean" line="265"/>
                <scope line="266">
                    <declaration name="lastTime" type="long" line="270"/>
                    <declaration name="it" type="Iterator&lt;Future&lt;T&gt;&gt;" line="274"/>
                    <scope line="275">
                        <declaration name="now" type="long" line="277"/>
                    </scope>
                    <scope line="284">
                        <scope line="285">
                            <scope line="288"/>
                            <scope line="290"/>
                            <scope line="291"/>
                            <scope line="292"/>
                            <declaration name="now" type="long" line="295"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="302"/>
            </method>
        </class>
    </source>