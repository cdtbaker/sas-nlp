<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util"/>
        <class name="AbstractExecutorService" line="3">
            <implements interface="ExecutorService"/>
            <javadoc line="3">
                Provides default implementations of {@link ExecutorService}execution methods. This class implements the &lt;tt&gt;submit&lt;/tt&gt;,
                  &lt;tt&gt;invokeAny&lt;/tt&gt; and &lt;tt&gt;invokeAll&lt;/tt&gt; methods using a{@link RunnableFuture} returned by &lt;tt&gt;newTaskFor&lt;/tt&gt;, which defaults
                  to the {@link FutureTask} class provided in this package.  For example,
                  the implementation of &lt;tt&gt;submit(Runnable)&lt;/tt&gt; creates an
                  associated &lt;tt&gt;RunnableFuture&lt;/tt&gt; that is executed and
                  returned. Subclasses may override the &lt;tt&gt;newTaskFor&lt;/tt&gt; methods
                  to return &lt;tt&gt;RunnableFuture&lt;/tt&gt; implementations other than
                  &lt;tt&gt;FutureTask&lt;/tt&gt;.
                  &lt;p&gt; &lt;b&gt;Extension example&lt;/b&gt;. Here is a sketch of a class
                  that customizes {@link ThreadPoolExecutor} to use
                  a &lt;tt&gt;CustomTask&lt;/tt&gt; class instead of the default &lt;tt&gt;FutureTask&lt;/tt&gt;:
                  &lt;pre&gt; {@code}public class CustomThreadPoolExecutor extends ThreadPoolExecutor 
                  static class CustomTask&lt;V&gt; implements RunnableFuture&lt;V&gt; {...}
                  protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Callable&lt;V&gt; c) {
                  return new CustomTask&lt;V&gt;(c);
                  }
                  protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Runnable r, V v) {
                  return new CustomTask&lt;V&gt;(r, v);
                  }
                  // ... add constructors, etc.
                  }}&lt;/pre&gt;                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <javadoc line="29">
                Returns a &lt;tt&gt;RunnableFuture&lt;/tt&gt; for the given runnable and default
                  value.                
                <param>
                    runnable the runnable task being wrapped                    
                </param>
                <param>
                    value the default value for the returned future                    
                </param>
                <return>
                    a <tt>RunnableFuture</tt> which when run will run the
                      underlying runnable and which, as a <tt>Future</tt>, will yield
                      the given value as its result and provide for cancellation of
                      the underlying task.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="newTaskFor" type="RunnableFuture<T>" line="40">
                <params>
                    <param name="runnable" type="Runnable"/>
                    <param name="value" type="T"/>
                </params>
            </method>
            <javadoc line="43">
                Returns a &lt;tt&gt;RunnableFuture&lt;/tt&gt; for the given callable task.                
                <param>
                    callable the callable task being wrapped                    
                </param>
                <return>
                    a <tt>RunnableFuture</tt> which when run will call the
                      underlying callable and which, as a <tt>Future</tt>, will yield
                      the callable's result as its result and provide for
                      cancellation of the underlying task.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="newTaskFor" type="RunnableFuture<T>" line="52">
                <params>
                    <param name="callable" type="Callable<T>"/>
                </params>
            </method>
            <javadoc line="55">
                @throws RejectedExecutionException {@inheritDoc}                
                <throws>
                    NullPointerException       {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<?>" line="59">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <declaration name="ftask" type="RunnableFuture&lt;Void&gt;" line="61"/>
            </method>
            <javadoc line="65">
                @throws RejectedExecutionException {@inheritDoc}                
                <throws>
                    NullPointerException       {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<T>" line="69">
                <params>
                    <param name="task" type="Runnable"/>
                    <param name="result" type="T"/>
                </params>
                <declaration name="ftask" type="RunnableFuture&lt;T&gt;" line="71"/>
            </method>
            <javadoc line="75">
                @throws RejectedExecutionException {@inheritDoc}                
                <throws>
                    NullPointerException       {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<T>" line="79">
                <params>
                    <param name="task" type="Callable<T>"/>
                </params>
                <declaration name="ftask" type="RunnableFuture&lt;T&gt;" line="81"/>
            </method>
            <javadoc line="85">
                the main mechanics of invokeAny.                
            </javadoc>
            <method name="doInvokeAny" type="T" line="88">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                    <param name="timed" type="boolean"/>
                    <param name="nanos" type="long"/>
                </params>
                <declaration name="ntasks" type="int" line="90"/>
                <declaration name="futures" type="List&lt;Future&lt;T&gt;&gt;" line="92"/>
                <declaration name="ecs" type="ExecutorCompletionService&lt;T&gt;" line="93"/>
                <scope line="94">
                    <declaration name="ee" type="ExecutionException" line="95"/>
                    <declaration name="lastTime" type="long" line="96"/>
                    <declaration name="it" type="Iterator&lt;? extends Callable&lt;T&gt;&gt;" line="97"/>
                    <declaration name="active" type="int" line="100"/>
                    <scope line="101">
                        <declaration name="f" type="Future&lt;T&gt;" line="102"/>
                        <scope line="103">
                            <scope line="104"/>
                            <scope line="110">
                                <declaration name="now" type="long" line="113"/>
                            </scope>
                        </scope>
                        <scope line="119">
                            <scope line="121"/>
                            <scope line="124"/>
                            <scope line="127"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="135"/>
            </method>
            <method name="invokeAny" type="T" line="139">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                </params>
            </method>
            <method name="invokeAny" type="T" line="148">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <method name="invokeAll" type="List<Future<T>>" line="151">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                </params>
                <declaration name="futures" type="List&lt;Future&lt;T&gt;&gt;" line="153"/>
                <declaration name="done" type="boolean" line="154"/>
                <scope line="155">
                    <scope line="156">
                        <declaration name="f" type="RunnableFuture&lt;T&gt;" line="157"/>
                    </scope>
                    <scope line="161">
                        <scope line="162">
                            <scope line="163"/>
                            <scope line="166"/>
                            <scope line="168"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="175"/>
            </method>
            <method name="invokeAll" type="List<Future<T>>" line="179">
                <params>
                    <param name="tasks" type="Collection<? extends Callable<T>>"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="nanos" type="long" line="181"/>
                <declaration name="futures" type="List&lt;Future&lt;T&gt;&gt;" line="182"/>
                <declaration name="done" type="boolean" line="183"/>
                <scope line="184">
                    <declaration name="lastTime" type="long" line="186"/>
                    <declaration name="it" type="Iterator&lt;Future&lt;T&gt;&gt;" line="187"/>
                    <scope line="188">
                        <declaration name="now" type="long" line="190"/>
                    </scope>
                    <scope line="195">
                        <scope line="196">
                            <scope line="198"/>
                            <scope line="201"/>
                            <scope line="203"/>
                            <scope line="205"/>
                            <declaration name="now" type="long" line="208"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="216"/>
            </method>
        </class>
    </source>