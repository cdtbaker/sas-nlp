<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <import package="java.util"/>
        <class name="AtomicLongArray" line="4">
            <implements interface="java.io.Serializable"/>
            <javadoc line="4">
                A {@code long} array in which elements may be updated atomically.
                  See the {@link java.util.concurrent.atomic} package specification
                  for description of the properties of atomic variables.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="12"/>
            <declaration name="unsafe" type="Unsafe" line="13"/>
            <declaration name="base" type="int" line="14"/>
            <declaration name="shift" type="int" line="15"/>
            <declaration name="array" type="long[]" line="16"/>
            <scope line="17">
                <declaration name="scale" type="int" line="18"/>
            </scope>
            <method name="checkedByteOffset" type="long" line="22">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="byteOffset" type="long" line="26">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="29">
                Creates a new AtomicLongArray of the given length, with all
                  elements initially zero.                
                <param>
                    length the length of the array                    
                </param>
            </javadoc>
            <method name="AtomicLongArray" type="constructor" line="34">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="37">
                Creates a new AtomicLongArray with the same length as, and
                  all elements copied from, the given array.                
                <param>
                    array the array to copy elements from                    
                </param>
                <throws>
                    NullPointerException if array is null                    
                </throws>
            </javadoc>
            <method name="AtomicLongArray" type="constructor" line="43">
                <params>
                    <param name="array" type="long[]"/>
                </params>
            </method>
            <javadoc line="46">
                Returns the length of the array.                
                <return>
                    the length of the array                    
                </return>
            </javadoc>
            <method name="length" type="int" line="50"/>
            <javadoc line="53">
                Gets the current value at position {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="long" line="58">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getRaw" type="long" line="61">
                <params>
                    <param name="offset" type="long"/>
                </params>
            </method>
            <javadoc line="64">
                Sets the element at position {@code i} to the given value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="69">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="72">
                Eventually sets the element at position {@code i} to the given value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="78">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="81">
                Atomically sets the element at position {@code i} to the given value
                  and returns the old value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="long" line="88">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="long"/>
                </params>
                <declaration name="offset" type="long" line="89"/>
                <scope line="90">
                    <declaration name="current" type="long" line="91"/>
                </scope>
            </method>
            <javadoc line="95">
                Atomically sets the element at position {@code i} to the given
                  updated value if the current value {@code ==} the expected value.                
                <param>
                    i the index                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="104">
                <params>
                    <param name="i" type="int"/>
                    <param name="expect" type="long"/>
                    <param name="update" type="long"/>
                </params>
            </method>
            <method name="compareAndSetRaw" type="boolean" line="107">
                <params>
                    <param name="offset" type="long"/>
                    <param name="expect" type="long"/>
                    <param name="update" type="long"/>
                </params>
            </method>
            <javadoc line="110">
                Atomically sets the element at position {@code i} to the given
                  updated value if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    i the index                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="121">
                <params>
                    <param name="i" type="int"/>
                    <param name="expect" type="long"/>
                    <param name="update" type="long"/>
                </params>
            </method>
            <javadoc line="124">
                Atomically increments by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndIncrement" type="long" line="129">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="132">
                Atomically decrements by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndDecrement" type="long" line="137">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                Atomically adds the given value to the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndAdd" type="long" line="146">
                <params>
                    <param name="i" type="int"/>
                    <param name="delta" type="long"/>
                </params>
                <declaration name="offset" type="long" line="147"/>
                <scope line="148">
                    <declaration name="current" type="long" line="149"/>
                </scope>
            </method>
            <javadoc line="153">
                Atomically increments by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="incrementAndGet" type="long" line="158">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="161">
                Atomically decrements by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="decrementAndGet" type="long" line="166">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="169">
                Atomically adds the given value to the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="addAndGet" type="long" line="175">
                <params>
                    <param name="i" type="int"/>
                    <param name="delta" type="long"/>
                </params>
                <declaration name="offset" type="long" line="176"/>
                <scope line="177">
                    <declaration name="current" type="long" line="178"/>
                    <declaration name="next" type="long" line="179"/>
                </scope>
            </method>
            <javadoc line="183">
                Returns the String representation of the current values of array.                
                <return>
                    the String representation of the current values of array                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="187">
                <declaration name="iMax" type="int" line="188"/>
                <declaration name="b" type="StringBuilder" line="190"/>
                <scope line="192"/>
            </method>
        </class>
    </source>