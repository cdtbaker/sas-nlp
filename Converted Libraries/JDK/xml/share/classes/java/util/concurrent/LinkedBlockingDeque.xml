<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.AbstractQueue"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.concurrent.locks.Condition"/>
        <import package="java.util.concurrent.locks.ReentrantLock"/>
        <class name="LinkedBlockingDeque" line="8">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <implements interface="BlockingDeque">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="java.io.Serializable"/>
            <javadoc line="8">
                An optionally-bounded {@linkplain BlockingDeque blocking deque} based on
                  linked nodes.
                  &lt;p&gt; The optional capacity bound constructor argument serves as a
                  way to prevent excessive expansion. The capacity, if unspecified,
                  is equal to {@link Integer#MAX_VALUE}.  Linked nodes are
                  dynamically created upon each insertion unless this would bring the
                  deque above capacity.
                  &lt;p&gt;Most operations run in constant time (ignoring time spent
                  blocking).  Exceptions include {@link #remove(Object) remove},{@link #removeFirstOccurrence removeFirstOccurrence}, {@link #removeLastOccurrence removeLastOccurrence}, {@link #containscontains}, {@link #iterator iterator.remove()}, and the bulk
                  operations, all of which run in linear time.
                  &lt;p&gt;This class and its iterator implement all of the
                  &lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link Iterator} interfaces.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.6                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;E&gt;
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="30"/>
            <class name="Node" line="31">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <javadoc line="31">
                    Doubly-linked list node class                    
                </javadoc>
                <declaration name="item" type="E" line="35"/>
                <javadoc line="35">
                    The item, or null if this node has been removed.                    
                </javadoc>
                <declaration name="prev" type="Node&amp;lt;E&amp;gt;" line="39"/>
                <javadoc line="39">
                    One of:
                      - the real predecessor Node
                      - this Node, meaning the predecessor is tail
                      - null, meaning there is no predecessor                    
                </javadoc>
                <declaration name="next" type="Node&amp;lt;E&amp;gt;" line="46"/>
                <javadoc line="46">
                    One of:
                      - the real successor Node
                      - this Node, meaning the successor is head
                      - null, meaning there is no successor                    
                </javadoc>
                <method name="Node" type="constructor" line="53">
                    <params>
                        <param name="x" type="E"/>
                    </params>
                </method>
            </class>
            <declaration name="first" type="Node&amp;lt;E&amp;gt;" line="57"/>
            <javadoc line="57">
                Pointer to first node.
                  Invariant: (first == null &amp;&amp; last == null) ||
                  (first.prev == null &amp;&amp; first.item != null)                
            </javadoc>
            <declaration name="last" type="Node&amp;lt;E&amp;gt;" line="63"/>
            <javadoc line="63">
                Pointer to last node.
                  Invariant: (first == null &amp;&amp; last == null) ||
                  (last.next == null &amp;&amp; last.item != null)                
            </javadoc>
            <declaration name="count" type="int" line="69"/>
            <javadoc line="69">
                Number of items in the deque                
            </javadoc>
            <declaration name="capacity" type="int" line="73"/>
            <javadoc line="73">
                Maximum number of items in the deque                
            </javadoc>
            <declaration name="lock" type="ReentrantLock" line="77"/>
            <javadoc line="77">
                Main lock guarding all access                
            </javadoc>
            <declaration name="notEmpty" type="Condition" line="81"/>
            <javadoc line="81">
                Condition for waiting takes                
            </javadoc>
            <declaration name="notFull" type="Condition" line="85"/>
            <javadoc line="85">
                Condition for waiting puts                
            </javadoc>
            <javadoc line="89">
                Creates a {@code LinkedBlockingDeque} with a capacity of{@link Integer#MAX_VALUE}.                
            </javadoc>
            <method name="LinkedBlockingDeque" type="constructor" line="92"/>
            <javadoc line="95">
                Creates a {@code LinkedBlockingDeque} with the given (fixed) capacity.                
                <param>
                    capacity the capacity of this deque                    
                </param>
                <throws>
                    IllegalArgumentException if {@code capacity} is less than 1                    
                </throws>
            </javadoc>
            <method name="LinkedBlockingDeque" type="constructor" line="100">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="104">
                Creates a {@code LinkedBlockingDeque} with a capacity of{@link Integer#MAX_VALUE}, initially containing the elements of
                  the given collection, added in traversal order of the
                  collection&apos;s iterator.                
                <param>
                    c the collection of elements to initially contain                    
                </param>
                <throws>
                    NullPointerException if the specified collection or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="LinkedBlockingDeque" type="constructor" line="112">
                <params>
                    <param name="c" type="Collection&lt;? extends E&gt;"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="114"/>
                <scope line="116">
                    <scope line="117"/>
                </scope>
                <scope line="122"/>
            </method>
            <javadoc line="126">
                Links node as first element, or returns false if full.                
            </javadoc>
            <method name="linkFirst" type="boolean" line="129">
                <params>
                    <param name="node" type="Node&lt;E&gt;"/>
                </params>
                <declaration name="f" type="Node&amp;lt;E&amp;gt;" line="131"/>
            </method>
            <javadoc line="140">
                Links node as last element, or returns false if full.                
            </javadoc>
            <method name="linkLast" type="boolean" line="143">
                <params>
                    <param name="node" type="Node&lt;E&gt;"/>
                </params>
                <declaration name="l" type="Node&amp;lt;E&amp;gt;" line="145"/>
            </method>
            <javadoc line="154">
                Removes and returns first element, or null if empty.                
            </javadoc>
            <method name="unlinkFirst" type="E" line="157">
                <declaration name="f" type="Node&amp;lt;E&amp;gt;" line="158"/>
                <declaration name="n" type="Node&amp;lt;E&amp;gt;" line="160"/>
                <declaration name="item" type="E" line="161"/>
            </method>
            <javadoc line="171">
                Removes and returns last element, or null if empty.                
            </javadoc>
            <method name="unlinkLast" type="E" line="174">
                <declaration name="l" type="Node&amp;lt;E&amp;gt;" line="175"/>
                <declaration name="p" type="Node&amp;lt;E&amp;gt;" line="177"/>
                <declaration name="item" type="E" line="178"/>
            </method>
            <javadoc line="188">
                Unlinks x.                
            </javadoc>
            <method name="unlink" type="void" line="191">
                <params>
                    <param name="x" type="Node&lt;E&gt;"/>
                </params>
                <declaration name="p" type="Node&amp;lt;E&amp;gt;" line="192"/>
                <declaration name="n" type="Node&amp;lt;E&amp;gt;" line="193"/>
                <scope line="194"/>
                <scope line="197"/>
                <scope line="200"/>
            </method>
            <javadoc line="208">
                @throws IllegalStateException {@inheritDoc}                
                <throws>
                    NullPointerException  {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="addFirst" type="void" line="212">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="215">
                @throws IllegalStateException {@inheritDoc}                
                <throws>
                    NullPointerException  {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="addLast" type="void" line="219">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="222">
                @throws NullPointerException {@inheritDoc}                
            </javadoc>
            <method name="offerFirst" type="boolean" line="225">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="node" type="Node&amp;lt;E&amp;gt;" line="227"/>
                <declaration name="lock" type="ReentrantLock" line="228"/>
                <scope line="230"/>
                <scope line="233"/>
            </method>
            <javadoc line="237">
                @throws NullPointerException {@inheritDoc}                
            </javadoc>
            <method name="offerLast" type="boolean" line="240">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="node" type="Node&amp;lt;E&amp;gt;" line="242"/>
                <declaration name="lock" type="ReentrantLock" line="243"/>
                <scope line="245"/>
                <scope line="248"/>
            </method>
            <javadoc line="252">
                @throws NullPointerException {@inheritDoc}                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="putFirst" type="void" line="256">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="node" type="Node&amp;lt;E&amp;gt;" line="258"/>
                <declaration name="lock" type="ReentrantLock" line="259"/>
                <scope line="261"/>
                <scope line="264"/>
            </method>
            <javadoc line="268">
                @throws NullPointerException {@inheritDoc}                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="putLast" type="void" line="272">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="node" type="Node&amp;lt;E&amp;gt;" line="274"/>
                <declaration name="lock" type="ReentrantLock" line="275"/>
                <scope line="277"/>
                <scope line="280"/>
            </method>
            <javadoc line="284">
                @throws NullPointerException {@inheritDoc}                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="offerFirst" type="boolean" line="288">
                <params>
                    <param name="e" type="E"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="node" type="Node&amp;lt;E&amp;gt;" line="290"/>
                <declaration name="nanos" type="long" line="291"/>
                <declaration name="lock" type="ReentrantLock" line="292"/>
                <scope line="294">
                    <scope line="295"/>
                </scope>
                <scope line="301"/>
            </method>
            <javadoc line="305">
                @throws NullPointerException {@inheritDoc}                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="offerLast" type="boolean" line="309">
                <params>
                    <param name="e" type="E"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="node" type="Node&amp;lt;E&amp;gt;" line="311"/>
                <declaration name="nanos" type="long" line="312"/>
                <declaration name="lock" type="ReentrantLock" line="313"/>
                <scope line="315">
                    <scope line="316"/>
                </scope>
                <scope line="322"/>
            </method>
            <javadoc line="326">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="removeFirst" type="E" line="329">
                <declaration name="x" type="E" line="330"/>
            </method>
            <javadoc line="334">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="removeLast" type="E" line="337">
                <declaration name="x" type="E" line="338"/>
            </method>
            <method name="pollFirst" type="E" line="342">
                <declaration name="lock" type="ReentrantLock" line="343"/>
                <scope line="345"/>
                <scope line="348"/>
            </method>
            <method name="pollLast" type="E" line="352">
                <declaration name="lock" type="ReentrantLock" line="353"/>
                <scope line="355"/>
                <scope line="358"/>
            </method>
            <method name="takeFirst" type="E" line="362">
                <declaration name="lock" type="ReentrantLock" line="363"/>
                <scope line="365">
                    <declaration name="x" type="E" line="366"/>
                </scope>
                <scope line="370"/>
            </method>
            <method name="takeLast" type="E" line="374">
                <declaration name="lock" type="ReentrantLock" line="375"/>
                <scope line="377">
                    <declaration name="x" type="E" line="378"/>
                </scope>
                <scope line="382"/>
            </method>
            <method name="pollFirst" type="E" line="386">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="nanos" type="long" line="387"/>
                <declaration name="lock" type="ReentrantLock" line="388"/>
                <scope line="390">
                    <declaration name="x" type="E" line="391"/>
                    <scope line="392"/>
                </scope>
                <scope line="398"/>
            </method>
            <method name="pollLast" type="E" line="402">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="nanos" type="long" line="403"/>
                <declaration name="lock" type="ReentrantLock" line="404"/>
                <scope line="406">
                    <declaration name="x" type="E" line="407"/>
                    <scope line="408"/>
                </scope>
                <scope line="414"/>
            </method>
            <javadoc line="418">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="getFirst" type="E" line="421">
                <declaration name="x" type="E" line="422"/>
            </method>
            <javadoc line="426">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="getLast" type="E" line="429">
                <declaration name="x" type="E" line="430"/>
            </method>
            <method name="peekFirst" type="E" line="434">
                <declaration name="lock" type="ReentrantLock" line="435"/>
                <scope line="437"/>
                <scope line="440"/>
            </method>
            <method name="peekLast" type="E" line="444">
                <declaration name="lock" type="ReentrantLock" line="445"/>
                <scope line="447"/>
                <scope line="450"/>
            </method>
            <method name="removeFirstOccurrence" type="boolean" line="454">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="456"/>
                <scope line="458">
                    <scope line="459">
                        <scope line="460"/>
                    </scope>
                </scope>
                <scope line="467"/>
            </method>
            <method name="removeLastOccurrence" type="boolean" line="471">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="473"/>
                <scope line="475">
                    <scope line="476">
                        <scope line="477"/>
                    </scope>
                </scope>
                <scope line="484"/>
            </method>
            <javadoc line="488">
                Inserts the specified element at the end of this deque unless it would
                  violate capacity restrictions.  When using a capacity-restricted deque,
                  it is generally preferable to use method {@link #offer(Object) offer}.
                  &lt;p&gt;This method is equivalent to {@link #addLast}.                
                <throws>
                    IllegalStateException if the element cannot be added at this
                      time due to capacity restrictions                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="497">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="501">
                @throws NullPointerException if the specified element is null                
            </javadoc>
            <method name="offer" type="boolean" line="504">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="507">
                @throws NullPointerException {@inheritDoc}                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="511">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="514">
                @throws NullPointerException {@inheritDoc}                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="518">
                <params>
                    <param name="e" type="E"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="521">
                Retrieves and removes the head of the queue represented by this deque.
                  This method differs from {@link #poll poll} only in that it throws an
                  exception if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #removeFirst() removeFirst}.                
                <return>
                    the head of the queue represented by this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="529"/>
            <method name="poll" type="E" line="532"/>
            <method name="take" type="E" line="535"/>
            <method name="poll" type="E" line="538">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="541">
                Retrieves, but does not remove, the head of the queue represented by
                  this deque.  This method differs from {@link #peek peek} only in that
                  it throws an exception if this deque is empty.
                  &lt;p&gt;This method is equivalent to {@link #getFirst() getFirst}.                
                <return>
                    the head of the queue represented by this deque                    
                </return>
                <throws>
                    NoSuchElementException if this deque is empty                    
                </throws>
            </javadoc>
            <method name="element" type="E" line="549"/>
            <method name="peek" type="E" line="552"/>
            <javadoc line="555">
                Returns the number of additional elements that this deque can ideally
                  (in the absence of memory or resource constraints) accept without
                  blocking. This is always equal to the initial capacity of this deque
                  less the current {@code size} of this deque.
                  &lt;p&gt;Note that you &lt;em&gt;cannot&lt;/em&gt; always tell if an attempt to insert
                  an element will succeed by inspecting {@code remainingCapacity}because it may be the case that another thread is about to
                  insert or remove an element.                
            </javadoc>
            <method name="remainingCapacity" type="int" line="564">
                <declaration name="lock" type="ReentrantLock" line="565"/>
                <scope line="567"/>
                <scope line="570"/>
            </method>
            <javadoc line="574">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="580">
                <params>
                    <param name="c" type="Collection&lt;? super E&gt;"/>
                </params>
            </method>
            <javadoc line="583">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="589">
                <params>
                    <param name="c" type="Collection&lt;? super E&gt;"/>
                    <param name="maxElements" type="int"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="592"/>
                <scope line="594">
                    <declaration name="n" type="int" line="595"/>
                    <scope line="596"/>
                </scope>
                <scope line="602"/>
            </method>
            <javadoc line="606">
                @throws IllegalStateException {@inheritDoc}                
                <throws>
                    NullPointerException  {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="push" type="void" line="610">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="613">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="pop" type="E" line="616"/>
            <javadoc line="619">
                Removes the first occurrence of the specified element from this deque.
                  If the deque does not contain the element, it is unchanged.
                  More formally, removes the first element {@code e} such that{@code o.equals(e)} (if such an element exists).
                  Returns {@code true} if this deque contained the specified element
                  (or equivalently, if this deque changed as a result of the call).
                  &lt;p&gt;This method is equivalent to{@link #removeFirstOccurrence(Object) removeFirstOccurrence}.                
                <param>
                    o element to be removed from this deque, if present                    
                </param>
                <return>
                    {@code true} if this deque changed as a result of the call                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="629">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="632">
                Returns the number of elements in this deque.                
                <return>
                    the number of elements in this deque                    
                </return>
            </javadoc>
            <method name="size" type="int" line="636">
                <declaration name="lock" type="ReentrantLock" line="637"/>
                <scope line="639"/>
                <scope line="642"/>
            </method>
            <javadoc line="646">
                Returns {@code true} if this deque contains the specified element.
                  More formally, returns {@code true} if and only if this deque contains
                  at least one element {@code e} such that {@code o.equals(e)}.                
                <param>
                    o object to be checked for containment in this deque                    
                </param>
                <return>
                    {@code true} if this deque contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="653">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="655"/>
                <scope line="657"/>
                <scope line="661"/>
            </method>
            <javadoc line="665">
                Returns an array containing all of the elements in this deque, in
                  proper sequence (from first to last element).
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this deque.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this deque                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="675">
                <declaration name="lock" type="ReentrantLock" line="676"/>
                <scope line="678">
                    <declaration name="a" type="Object[]" line="679"/>
                    <declaration name="k" type="int" line="680"/>
                </scope>
                <scope line="684"/>
            </method>
            <javadoc line="688">
                Returns an array containing all of the elements in this deque, in
                  proper sequence; the runtime type of the returned array is that of
                  the specified array.  If the deque fits in the specified array, it
                  is returned therein.  Otherwise, a new array is allocated with the
                  runtime type of the specified array and the size of this deque.
                  &lt;p&gt;If this deque fits in the specified array with room to spare
                  (i.e., the array has more elements than this deque), the element in
                  the array immediately following the end of the deque is set to{@code null}.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose {@code x} is a deque known to contain only strings.
                  The following code can be used to dump the deque into a newly
                  allocated array of {@code String}:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that {@code toArray(new Object[0])} is identical in function to{@code toArray()}.                
                <param>
                    a the array into which the elements of the deque are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose                    
                </param>
                <return>
                    an array containing all of the elements in this deque                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this deque                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="716">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="717"/>
                <scope line="719">
                    <declaration name="k" type="int" line="721"/>
                </scope>
                <scope line="726"/>
            </method>
            <method name="toString" type="String" line="730">
                <declaration name="lock" type="ReentrantLock" line="731"/>
                <scope line="733">
                    <declaration name="p" type="Node&amp;lt;E&amp;gt;" line="734"/>
                    <declaration name="sb" type="StringBuilder" line="736"/>
                    <scope line="738">
                        <declaration name="e" type="E" line="739"/>
                    </scope>
                </scope>
                <scope line="746"/>
            </method>
            <javadoc line="750">
                Atomically removes all of the elements from this deque.
                  The deque will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="754">
                <declaration name="lock" type="ReentrantLock" line="755"/>
                <scope line="757">
                    <scope line="758">
                        <declaration name="n" type="Node&amp;lt;E&amp;gt;" line="760"/>
                    </scope>
                </scope>
                <scope line="769"/>
            </method>
            <javadoc line="773">
                Returns an iterator over the elements in this deque in proper sequence.
                  The elements will be returned in order from first (head) to last (tail).
                  &lt;p&gt;The returned iterator is a &quot;weakly consistent&quot; iterator that
                  will never throw {@link java.util.ConcurrentModificationExceptionConcurrentModificationException}, and guarantees to traverse
                  elements as they existed upon construction of the iterator, and
                  may (but is not guaranteed to) reflect any modifications
                  subsequent to construction.                
                <return>
                    an iterator over the elements in this deque in proper sequence                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator&lt;E&gt;" line="783"/>
            <javadoc line="786">
                Returns an iterator over the elements in this deque in reverse
                  sequential order.  The elements will be returned in order from
                  last (tail) to first (head).
                  &lt;p&gt;The returned iterator is a &quot;weakly consistent&quot; iterator that
                  will never throw {@link java.util.ConcurrentModificationExceptionConcurrentModificationException}, and guarantees to traverse
                  elements as they existed upon construction of the iterator, and
                  may (but is not guaranteed to) reflect any modifications
                  subsequent to construction.                
                <return>
                    an iterator over the elements in this deque in reverse order                    
                </return>
            </javadoc>
            <method name="descendingIterator" type="Iterator&lt;E&gt;" line="797"/>
            <class name="AbstractItr" line="800">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <javadoc line="800">
                    Base class for Iterators for LinkedBlockingDeque                    
                </javadoc>
                <declaration name="next" type="Node&amp;lt;E&amp;gt;" line="804"/>
                <javadoc line="804">
                    The next node to return in next()                    
                </javadoc>
                <declaration name="nextItem" type="E" line="808"/>
                <javadoc line="808">
                    nextItem holds on to item fields because once we claim that
                      an element exists in hasNext(), we must return item read
                      under lock (in advance()) even if it was in the process of
                      being removed when hasNext() was called.                    
                </javadoc>
                <declaration name="lastRet" type="Node&amp;lt;E&amp;gt;" line="815"/>
                <javadoc line="815">
                    Node returned by most recent call to next. Needed by remove.
                      Reset to null if this element is deleted by a call to remove.                    
                </javadoc>
                <method name="firstNode" type="Node&lt;E&gt;" line="820"/>
                <method name="nextNode" type="Node&lt;E&gt;" line="821"/>
                <method name="AbstractItr" type="constructor" line="822">
                    <declaration name="lock" type="ReentrantLock" line="823"/>
                    <scope line="825"/>
                    <scope line="829"/>
                </method>
                <javadoc line="833">
                    Returns the successor node of the given non-null, but
                      possibly previously deleted, node.                    
                </javadoc>
                <method name="succ" type="Node&lt;E&gt;" line="837">
                    <params>
                        <param name="n" type="Node&lt;E&gt;"/>
                    </params>
                    <scope line="838">
                        <declaration name="s" type="Node&amp;lt;E&amp;gt;" line="839"/>
                    </scope>
                </method>
                <javadoc line="846">
                    Advances next.                    
                </javadoc>
                <method name="advance" type="void" line="849">
                    <declaration name="lock" type="ReentrantLock" line="850"/>
                    <scope line="852"/>
                    <scope line="856"/>
                </method>
                <method name="hasNext" type="boolean" line="860"/>
                <method name="next" type="E" line="863">
                    <declaration name="x" type="E" line="866"/>
                </method>
                <method name="remove" type="void" line="870">
                    <declaration name="n" type="Node&amp;lt;E&amp;gt;" line="871"/>
                    <declaration name="lock" type="ReentrantLock" line="874"/>
                    <scope line="876"/>
                    <scope line="879"/>
                </method>
            </class>
            <class name="Itr" line="884">
                <extends class="AbstractItr"/>
                <javadoc line="884">
                    Forward iterator                    
                </javadoc>
                <method name="firstNode" type="Node&lt;E&gt;" line="888"/>
                <method name="nextNode" type="Node&lt;E&gt;" line="891">
                    <params>
                        <param name="n" type="Node&lt;E&gt;"/>
                    </params>
                </method>
            </class>
            <class name="DescendingItr" line="895">
                <extends class="AbstractItr"/>
                <javadoc line="895">
                    Descending iterator                    
                </javadoc>
                <method name="firstNode" type="Node&lt;E&gt;" line="899"/>
                <method name="nextNode" type="Node&lt;E&gt;" line="902">
                    <params>
                        <param name="n" type="Node&lt;E&gt;"/>
                    </params>
                </method>
            </class>
            <javadoc line="906">
                Save the state of this deque to a stream (that is, serialize it).                
                <serialData>
                    The capacity (int), followed by elements (each an{@code Object}) in the proper order, followed by a null                    
                </serialData>
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="writeObject" type="void" line="911">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="912"/>
                <scope line="914"/>
                <scope line="919"/>
            </method>
            <javadoc line="923">
                Reconstitute this deque from a stream (that is,
                  deserialize it).                
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="928">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <scope line="933">
                    <declaration name="item" type="E" line="934"/>
                </scope>
            </method>
        </class>
    </source>