<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.concurrent.locks"/>
        <import package="java.util"/>
        <class name="ArrayBlockingQueue" line="4">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <implements interface="BlockingQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="java.io.Serializable"/>
            <javadoc line="4">
                A bounded {@linkplain BlockingQueue blocking queue} backed by an
                  array.  This queue orders elements FIFO (first-in-first-out).  The
                  &lt;em&gt;head&lt;/em&gt; of the queue is that element that has been on the
                  queue the longest time.  The &lt;em&gt;tail&lt;/em&gt; of the queue is that
                  element that has been on the queue the shortest time. New elements
                  are inserted at the tail of the queue, and the queue retrieval
                  operations obtain elements at the head of the queue.
                  &lt;p&gt;This is a classic &amp;quot;bounded buffer&amp;quot;, in which a
                  fixed-sized array holds elements inserted by producers and
                  extracted by consumers.  Once created, the capacity cannot be
                  changed.  Attempts to {@code put} an element into a full queue
                  will result in the operation blocking; attempts to {@code take} an
                  element from an empty queue will similarly block.
                  &lt;p&gt;This class supports an optional fairness policy for ordering
                  waiting producer and consumer threads.  By default, this ordering
                  is not guaranteed. However, a queue constructed with fairness set
                  to {@code true} grants threads access in FIFO order. Fairness
                  generally decreases throughput but reduces variability and avoids
                  starvation.
                  &lt;p&gt;This class and its iterator implement all of the
                  &lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link Iterator} interfaces.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <E>
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="35"/>
            <javadoc line="35">
                Serialization ID. This class relies on default serialization
                  even for the items array, which is default-serialized, even if
                  it is empty. Otherwise it could not be declared final, which is
                  necessary here.                
            </javadoc>
            <declaration name="items" type="Object[]" line="42"/>
            <javadoc line="42">
                The queued items                
            </javadoc>
            <declaration name="takeIndex" type="int" line="46"/>
            <javadoc line="46">
                items index for next take, poll, peek or remove                
            </javadoc>
            <declaration name="putIndex" type="int" line="50"/>
            <javadoc line="50">
                items index for next put, offer, or add                
            </javadoc>
            <declaration name="count" type="int" line="54"/>
            <javadoc line="54">
                Number of elements in the queue                
            </javadoc>
            <declaration name="lock" type="ReentrantLock" line="58"/>
            <javadoc line="58">
                Main lock guarding all access                
            </javadoc>
            <declaration name="notEmpty" type="Condition" line="62"/>
            <javadoc line="62">
                Condition for waiting takes                
            </javadoc>
            <declaration name="notFull" type="Condition" line="66"/>
            <javadoc line="66">
                Condition for waiting puts                
            </javadoc>
            <javadoc line="70">
                Circularly increment i.                
            </javadoc>
            <method name="inc" type="int" line="73">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="76">
                Circularly decrement i.                
            </javadoc>
            <method name="dec" type="int" line="79">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="cast" type="E" line="82">
                <params>
                    <param name="item" type="Object"/>
                </params>
            </method>
            <javadoc line="85">
                Returns item at index i.                
            </javadoc>
            <method name="itemAt" type="E" line="88">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="91">
                Throws NullPointerException if argument is null.                
                <param>
                    v the element                    
                </param>
            </javadoc>
            <method name="checkNotNull" type="void" line="95">
                <params>
                    <param name="v" type="Object"/>
                </params>
            </method>
            <javadoc line="98">
                Inserts element at current put position, advances, and signals.
                  Call only when holding lock.                
            </javadoc>
            <method name="insert" type="void" line="102">
                <params>
                    <param name="x" type="E"/>
                </params>
            </method>
            <javadoc line="108">
                Extracts element at current take position, advances, and signals.
                  Call only when holding lock.                
            </javadoc>
            <method name="extract" type="E" line="112">
                <declaration name="items" type="Object[]" line="113"/>
                <declaration name="x" type="E" line="114"/>
            </method>
            <javadoc line="121">
                Deletes item at position i.
                  Utility for remove and iterator.remove.
                  Call only when holding lock.                
            </javadoc>
            <method name="removeAt" type="void" line="126">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="items" type="Object[]" line="127"/>
                <scope line="128"/>
                <scope line="132">
                    <scope line="133">
                        <declaration name="nexti" type="int" line="134"/>
                        <scope line="135"/>
                        <scope line="139"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="149">
                Creates an {@code ArrayBlockingQueue} with the given (fixed)
                  capacity and default access policy.                
                <param>
                    capacity the capacity of this queue                    
                </param>
                <throws>
                    IllegalArgumentException if {@code capacity < 1}                    
                </throws>
            </javadoc>
            <method name="ArrayBlockingQueue" type="constructor" line="155">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="158">
                Creates an {@code ArrayBlockingQueue} with the given (fixed)
                  capacity and the specified access policy.                
                <param>
                    capacity the capacity of this queue                    
                </param>
                <param>
                    fair if {@code true} then queue accesses for threads blocked
                      on insertion or removal, are processed in FIFO order;
                      if {@code false} the access order is unspecified.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code capacity < 1}                    
                </throws>
            </javadoc>
            <method name="ArrayBlockingQueue" type="constructor" line="167">
                <params>
                    <param name="capacity" type="int"/>
                    <param name="fair" type="boolean"/>
                </params>
            </method>
            <javadoc line="174">
                Creates an {@code ArrayBlockingQueue} with the given (fixed)
                  capacity, the specified access policy and initially containing the
                  elements of the given collection,
                  added in traversal order of the collection&apos;s iterator.                
                <param>
                    capacity the capacity of this queue                    
                </param>
                <param>
                    fair if {@code true} then queue accesses for threads blocked
                      on insertion or removal, are processed in FIFO order;
                      if {@code false} the access order is unspecified.                    
                </param>
                <param>
                    c the collection of elements to initially contain                    
                </param>
                <throws>
                    IllegalArgumentException if {@code capacity} is less than{@code c.size()}, or less than 1.                    
                </throws>
                <throws>
                    NullPointerException if the specified collection or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="ArrayBlockingQueue" type="constructor" line="188">
                <params>
                    <param name="capacity" type="int"/>
                    <param name="fair" type="boolean"/>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="190"/>
                <scope line="192">
                    <declaration name="i" type="int" line="193"/>
                    <scope line="194">
                        <scope line="195"/>
                    </scope>
                    <scope line="200"/>
                </scope>
                <scope line="206"/>
            </method>
            <javadoc line="210">
                Inserts the specified element at the tail of this queue if it is
                  possible to do so immediately without exceeding the queue&apos;s capacity,
                  returning {@code true} upon success and throwing an{@code IllegalStateException} if this queue is full.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    {@code true} (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    IllegalStateException if this queue is full                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="219">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="222">
                Inserts the specified element at the tail of this queue if it is
                  possible to do so immediately without exceeding the queue&apos;s capacity,
                  returning {@code true} upon success and {@code false} if this queue
                  is full.  This method is generally preferable to method {@link #add},
                  which can fail to insert an element only by throwing an exception.                
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="230">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="232"/>
                <scope line="234">
                    <scope line="236"/>
                </scope>
                <scope line="241"/>
            </method>
            <javadoc line="245">
                Inserts the specified element at the tail of this queue, waiting
                  for space to become available if the queue is full.                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="251">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="253"/>
                <scope line="255"/>
                <scope line="259"/>
            </method>
            <javadoc line="263">
                Inserts the specified element at the tail of this queue, waiting
                  up to the specified wait time for space to become available if
                  the queue is full.                
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="270">
                <params>
                    <param name="e" type="E"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="nanos" type="long" line="272"/>
                <declaration name="lock" type="ReentrantLock" line="273"/>
                <scope line="275">
                    <scope line="276"/>
                </scope>
                <scope line="283"/>
            </method>
            <method name="poll" type="E" line="287">
                <declaration name="lock" type="ReentrantLock" line="288"/>
                <scope line="290"/>
                <scope line="293"/>
            </method>
            <method name="take" type="E" line="297">
                <declaration name="lock" type="ReentrantLock" line="298"/>
                <scope line="300"/>
                <scope line="304"/>
            </method>
            <method name="poll" type="E" line="308">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="nanos" type="long" line="309"/>
                <declaration name="lock" type="ReentrantLock" line="310"/>
                <scope line="312">
                    <scope line="313"/>
                </scope>
                <scope line="319"/>
            </method>
            <method name="peek" type="E" line="323">
                <declaration name="lock" type="ReentrantLock" line="324"/>
                <scope line="326"/>
                <scope line="329"/>
            </method>
            <javadoc line="333">
                Returns the number of elements in this queue.                
                <return>
                    the number of elements in this queue                    
                </return>
            </javadoc>
            <method name="size" type="int" line="337">
                <declaration name="lock" type="ReentrantLock" line="338"/>
                <scope line="340"/>
                <scope line="343"/>
            </method>
            <javadoc line="347">
                Returns the number of additional elements that this queue can ideally
                  (in the absence of memory or resource constraints) accept without
                  blocking. This is always equal to the initial capacity of this queue
                  less the current {@code size} of this queue.
                  &lt;p&gt;Note that you &lt;em&gt;cannot&lt;/em&gt; always tell if an attempt to insert
                  an element will succeed by inspecting {@code remainingCapacity}because it may be the case that another thread is about to
                  insert or remove an element.                
            </javadoc>
            <method name="remainingCapacity" type="int" line="356">
                <declaration name="lock" type="ReentrantLock" line="357"/>
                <scope line="359"/>
                <scope line="362"/>
            </method>
            <javadoc line="366">
                Removes a single instance of the specified element from this queue,
                  if it is present.  More formally, removes an element {@code e} such
                  that {@code o.equals(e)}, if this queue contains one or more such
                  elements.
                  Returns {@code true} if this queue contained the specified element
                  (or equivalently, if this queue changed as a result of the call).
                  &lt;p&gt;Removal of interior elements in circular array based queues
                  is an intrinsically slow and disruptive operation, so should
                  be undertaken only in exceptional circumstances, ideally
                  only when the queue is known not to be accessible by other
                  threads.                
                <param>
                    o element to be removed from this queue, if present                    
                </param>
                <return>
                    {@code true} if this queue changed as a result of the call                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="381">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="items" type="Object[]" line="383"/>
                <declaration name="lock" type="ReentrantLock" line="384"/>
                <scope line="386">
                    <scope line="387">
                        <scope line="388"/>
                    </scope>
                </scope>
                <scope line="395"/>
            </method>
            <javadoc line="399">
                Returns {@code true} if this queue contains the specified element.
                  More formally, returns {@code true} if and only if this queue contains
                  at least one element {@code e} such that {@code o.equals(e)}.                
                <param>
                    o object to be checked for containment in this queue                    
                </param>
                <return>
                    {@code true} if this queue contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="406">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="items" type="Object[]" line="408"/>
                <declaration name="lock" type="ReentrantLock" line="409"/>
                <scope line="411"/>
                <scope line="415"/>
            </method>
            <javadoc line="419">
                Returns an array containing all of the elements in this queue, in
                  proper sequence.
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this queue.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this queue                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="429">
                <declaration name="items" type="Object[]" line="430"/>
                <declaration name="lock" type="ReentrantLock" line="431"/>
                <scope line="433">
                    <declaration name="count" type="int" line="434"/>
                    <declaration name="a" type="Object[]" line="435"/>
                </scope>
                <scope line="439"/>
            </method>
            <javadoc line="443">
                Returns an array containing all of the elements in this queue, in
                  proper sequence; the runtime type of the returned array is that of
                  the specified array.  If the queue fits in the specified array, it
                  is returned therein.  Otherwise, a new array is allocated with the
                  runtime type of the specified array and the size of this queue.
                  &lt;p&gt;If this queue fits in the specified array with room to spare
                  (i.e., the array has more elements than this queue), the element in
                  the array immediately following the end of the queue is set to{@code null}.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose {@code x} is a queue known to contain only strings.
                  The following code can be used to dump the queue into a newly
                  allocated array of {@code String}:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that {@code toArray(new Object[0])} is identical in function to{@code toArray()}.                
                <param>
                    a the array into which the elements of the queue are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose                    
                </param>
                <return>
                    an array containing all of the elements in this queue                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="471">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <declaration name="items" type="Object[]" line="472"/>
                <declaration name="lock" type="ReentrantLock" line="473"/>
                <scope line="475">
                    <declaration name="count" type="int" line="476"/>
                    <declaration name="len" type="int" line="477"/>
                </scope>
                <scope line="483"/>
            </method>
            <method name="toString" type="String" line="487">
                <declaration name="lock" type="ReentrantLock" line="488"/>
                <scope line="490">
                    <declaration name="k" type="int" line="491"/>
                    <declaration name="sb" type="StringBuilder" line="493"/>
                    <scope line="495">
                        <declaration name="e" type="Object" line="496"/>
                    </scope>
                </scope>
                <scope line="502"/>
            </method>
            <javadoc line="506">
                Atomically removes all of the elements from this queue.
                  The queue will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="510">
                <declaration name="items" type="Object[]" line="511"/>
                <declaration name="lock" type="ReentrantLock" line="512"/>
                <scope line="514"/>
                <scope line="521"/>
            </method>
            <javadoc line="525">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="531">
                <params>
                    <param name="c" type="Collection<? super E>"/>
                </params>
                <declaration name="items" type="Object[]" line="534"/>
                <declaration name="lock" type="ReentrantLock" line="535"/>
                <scope line="537">
                    <declaration name="i" type="int" line="538"/>
                    <declaration name="n" type="int" line="539"/>
                    <declaration name="max" type="int" line="540"/>
                    <scope line="541"/>
                    <scope line="547"/>
                </scope>
                <scope line="555"/>
            </method>
            <javadoc line="559">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="565">
                <params>
                    <param name="c" type="Collection<? super E>"/>
                    <param name="maxElements" type="int"/>
                </params>
                <declaration name="items" type="Object[]" line="569"/>
                <declaration name="lock" type="ReentrantLock" line="570"/>
                <scope line="572">
                    <declaration name="i" type="int" line="573"/>
                    <declaration name="n" type="int" line="574"/>
                    <declaration name="max" type="int" line="575"/>
                    <scope line="576"/>
                    <scope line="582"/>
                </scope>
                <scope line="589"/>
            </method>
            <javadoc line="593">
                Returns an iterator over the elements in this queue in proper sequence.
                  The elements will be returned in order from first (head) to last (tail).
                  &lt;p&gt;The returned {@code Iterator} is a &quot;weakly consistent&quot; iterator that
                  will never throw {@link java.util.ConcurrentModificationExceptionConcurrentModificationException},
                  and guarantees to traverse elements as they existed upon
                  construction of the iterator, and may (but is not guaranteed to)
                  reflect any modifications subsequent to construction.                
                <return>
                    an iterator over the elements in this queue in proper sequence                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="603"/>
            <class name="Itr" line="606">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <javadoc line="606">
                    Iterator for ArrayBlockingQueue. To maintain weak consistency
                      with respect to puts and takes, we (1) read ahead one slot, so
                      as to not report hasNext true but then not have an element to
                      return -- however we later recheck this slot to use the most
                      current value; (2) ensure that each array slot is traversed at
                      most once (by tracking &quot;remaining&quot; elements); (3) skip over
                      null slots, which can occur if takes race ahead of iterators.
                      However, for circular array-based queues, we cannot rely on any
                      well established definition of what it means to be weakly
                      consistent with respect to interior removes since these may
                      require slot overwrites in the process of sliding elements to
                      cover gaps. So we settle for resiliency, operating on
                      established apparent nexts, which may miss some elements that
                      have moved between calls to next.                    
                </javadoc>
                <declaration name="remaining" type="int" line="623"/>
                <declaration name="nextIndex" type="int" line="624"/>
                <declaration name="nextItem" type="E" line="625"/>
                <declaration name="lastItem" type="E" line="626"/>
                <declaration name="lastRet" type="int" line="627"/>
                <method name="Itr" type="constructor" line="628">
                    <declaration name="lock" type="ReentrantLock" line="629"/>
                    <scope line="631"/>
                    <scope line="635"/>
                </method>
                <method name="hasNext" type="boolean" line="639"/>
                <method name="next" type="E" line="642">
                    <declaration name="lock" type="ReentrantLock" line="643"/>
                    <scope line="645">
                        <declaration name="x" type="E" line="648"/>
                        <scope line="649"/>
                    </scope>
                    <scope line="657"/>
                </method>
                <method name="remove" type="void" line="661">
                    <declaration name="lock" type="ReentrantLock" line="662"/>
                    <scope line="664">
                        <declaration name="i" type="int" line="665"/>
                        <declaration name="x" type="E" line="668"/>
                        <scope line="670">
                            <declaration name="removingHead" type="boolean" line="671"/>
                        </scope>
                    </scope>
                    <scope line="676"/>
                </method>
            </class>
        </class>
    </source>