<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.locks">
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="java.util.concurrent.atomic"/>
        <class name="ReentrantLock" line="5">
            <implements interface="Lock"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="5">
                A reentrant mutual exclusion {@link Lock} with the same basic
                  behavior and semantics as the implicit monitor lock accessed using{@code synchronized} methods and statements, but with extended
                  capabilities.
                  &lt;p&gt;A {@code ReentrantLock} is &lt;em&gt;owned&lt;/em&gt; by the thread last
                  successfully locking, but not yet unlocking it. A thread invoking{@code lock} will return, successfully acquiring the lock, when
                  the lock is not owned by another thread. The method will return
                  immediately if the current thread already owns the lock. This can
                  be checked using methods {@link #isHeldByCurrentThread}, and {@link #getHoldCount}.
                  &lt;p&gt;The constructor for this class accepts an optional
                  &lt;em&gt;fairness&lt;/em&gt; parameter.  When set {@code true}, under
                  contention, locks favor granting access to the longest-waiting
                  thread.  Otherwise this lock does not guarantee any particular
                  access order.  Programs using fair locks accessed by many threads
                  may display lower overall throughput (i.e., are slower; often much
                  slower) than those using the default setting, but have smaller
                  variances in times to obtain locks and guarantee lack of
                  starvation. Note however, that fairness of locks does not guarantee
                  fairness of thread scheduling. Thus, one of many threads using a
                  fair lock may obtain it multiple times in succession while other
                  active threads are not progressing and not currently holding the
                  lock.
                  Also note that the untimed {@link #tryLock() tryLock} method does not
                  honor the fairness setting. It will succeed if the lock
                  is available even if other threads are waiting.
                  &lt;p&gt;It is recommended practice to &lt;em&gt;always&lt;/em&gt; immediately
                  follow a call to {@code lock} with a {@code try} block, most
                  typically in a before/after construction such as:
                  &lt;pre&gt;
                  class X {
                  private final ReentrantLock lock = new ReentrantLock();
                  // ...
                  public void m() {
                  lock.lock();  // block until condition holds
                  try {
                  // ... method body
                  } finally {
                  lock.unlock()
                  }
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;In addition to implementing the {@link Lock} interface, this
                  class defines methods {@code isLocked} and{@code getLockQueueLength}, as well as some associated{@code protected} access methods that may be useful for
                  instrumentation and monitoring.
                  &lt;p&gt;Serialization of this class behaves in the same way as built-in
                  locks: a deserialized lock is in the unlocked state, regardless of
                  its state when serialized.
                  &lt;p&gt;This lock supports a maximum of 2147483647 recursive locks by
                  the same thread. Attempts to exceed this limit result in{@link Error} throws from locking methods.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="59"/>
            <declaration name="sync" type="Sync" line="60"/>
            <javadoc line="60">
                Synchronizer providing all implementation mechanics                
            </javadoc>
            <class name="Sync" line="64">
                <extends class="AbstractQueuedSynchronizer"/>
                <javadoc line="64">
                    Base of synchronization control for this lock. Subclassed
                      into fair and nonfair versions below. Uses AQS state to
                      represent the number of holds on the lock.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="70"/>
                <method name="lock" type="void" line="71"/>
                <javadoc line="71">
                    Performs {@link Lock#lock}. The main reason for subclassing
                      is to allow fast path for nonfair version.                    
                </javadoc>
                <javadoc line="76">
                    Performs non-fair tryLock.  tryAcquire is
                      implemented in subclasses, but both need nonfair
                      try for trylock method.                    
                </javadoc>
                <method name="nonfairTryAcquire" type="boolean" line="81">
                    <params>
                        <param name="acquires" type="int"/>
                    </params>
                    <declaration name="current" type="Thread" line="82"/>
                    <declaration name="c" type="int" line="83"/>
                    <scope line="84">
                        <scope line="85"/>
                    </scope>
                    <scope line="90">
                        <declaration name="nextc" type="int" line="91"/>
                    </scope>
                </method>
                <method name="tryRelease" type="boolean" line="98">
                    <params>
                        <param name="releases" type="int"/>
                    </params>
                    <declaration name="c" type="int" line="99"/>
                    <declaration name="free" type="boolean" line="101"/>
                    <scope line="102"/>
                </method>
                <method name="isHeldExclusively" type="boolean" line="109"/>
                <method name="newCondition" type="ConditionObject" line="112"/>
                <method name="getOwner" type="Thread" line="115"/>
                <method name="getHoldCount" type="int" line="118"/>
                <method name="isLocked" type="boolean" line="121"/>
                <javadoc line="124">
                    Reconstitutes this lock instance from a stream.                    
                    <param>
                        s the stream                        
                    </param>
                </javadoc>
                <method name="readObject" type="void" line="128">
                    <params>
                        <param name="s" type="java.io.ObjectInputStream"/>
                    </params>
                </method>
            </class>
            <class name="NonfairSync" line="133">
                <extends class="Sync"/>
                <javadoc line="133">
                    Sync object for non-fair locks                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="137"/>
                <javadoc line="138">
                    Performs lock.  Try immediate barge, backing up to normal
                      acquire on failure.                    
                </javadoc>
                <method name="lock" type="void" line="142"/>
                <method name="tryAcquire" type="boolean" line="146">
                    <params>
                        <param name="acquires" type="int"/>
                    </params>
                </method>
            </class>
            <class name="FairSync" line="150">
                <extends class="Sync"/>
                <javadoc line="150">
                    Sync object for fair locks                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="154"/>
                <method name="lock" type="void" line="155"/>
                <javadoc line="158">
                    Fair version of tryAcquire.  Don&apos;t grant access unless
                      recursive call or no waiters or is first.                    
                </javadoc>
                <method name="tryAcquire" type="boolean" line="162">
                    <params>
                        <param name="acquires" type="int"/>
                    </params>
                    <declaration name="current" type="Thread" line="163"/>
                    <declaration name="c" type="int" line="164"/>
                    <scope line="165">
                        <scope line="166"/>
                    </scope>
                    <scope line="171">
                        <declaration name="nextc" type="int" line="172"/>
                    </scope>
                </method>
            </class>
            <javadoc line="180">
                Creates an instance of {@code ReentrantLock}.
                  This is equivalent to using {@code ReentrantLock(false)}.                
            </javadoc>
            <method name="ReentrantLock" type="constructor" line="184"/>
            <javadoc line="187">
                Creates an instance of {@code ReentrantLock} with the
                  given fairness policy.                
                <param>
                    fair {@code true} if this lock should use a fair ordering policy                    
                </param>
            </javadoc>
            <method name="ReentrantLock" type="constructor" line="192">
                <params>
                    <param name="fair" type="boolean"/>
                </params>
            </method>
            <javadoc line="195">
                Acquires the lock.
                  &lt;p&gt;Acquires the lock if it is not held by another thread and returns
                  immediately, setting the lock hold count to one.
                  &lt;p&gt;If the current thread already holds the lock then the hold
                  count is incremented by one and the method returns immediately.
                  &lt;p&gt;If the lock is held by another thread then the
                  current thread becomes disabled for thread scheduling
                  purposes and lies dormant until the lock has been acquired,
                  at which time the lock hold count is set to one.                
            </javadoc>
            <method name="lock" type="void" line="206"/>
            <javadoc line="209">
                Acquires the lock unless the current thread is{@linkplain Thread#interrupt interrupted}.
                  &lt;p&gt;Acquires the lock if it is not held by another thread and returns
                  immediately, setting the lock hold count to one.
                  &lt;p&gt;If the current thread already holds this lock then the hold count
                  is incremented by one and the method returns immediately.
                  &lt;p&gt;If the lock is held by another thread then the
                  current thread becomes disabled for thread scheduling
                  purposes and lies dormant until one of two things happens:
                  &lt;ul&gt;
                  &lt;li&gt;The lock is acquired by the current thread; or
                  &lt;li&gt;Some other thread {@linkplain Thread#interrupt interrupts} the
                  current thread.
                  &lt;/ul&gt;
                  &lt;p&gt;If the lock is acquired by the current thread then the lock hold
                  count is set to one.
                  &lt;p&gt;If the current thread:
                  &lt;ul&gt;
                  &lt;li&gt;has its interrupted status set on entry to this method; or
                  &lt;li&gt;is {@linkplain Thread#interrupt interrupted} while acquiring
                  the lock,
                  &lt;/ul&gt;
                  then {@link InterruptedException} is thrown and the current thread&apos;s
                  interrupted status is cleared.
                  &lt;p&gt;In this implementation, as this method is an explicit
                  interruption point, preference is given to responding to the
                  interrupt over normal or reentrant acquisition of the lock.                
                <throws>
                    InterruptedException if the current thread is interrupted                    
                </throws>
            </javadoc>
            <method name="lockInterruptibly" type="void" line="238"/>
            <javadoc line="241">
                Acquires the lock only if it is not held by another thread at the time
                  of invocation.
                  &lt;p&gt;Acquires the lock if it is not held by another thread and
                  returns immediately with the value {@code true}, setting the
                  lock hold count to one. Even when this lock has been set to use a
                  fair ordering policy, a call to {@code tryLock()} &lt;em&gt;will&lt;/em&gt;
                  immediately acquire the lock if it is available, whether or not
                  other threads are currently waiting for the lock.
                  This &amp;quot;barging&amp;quot; behavior can be useful in certain
                  circumstances, even though it breaks fairness. If you want to honor
                  the fairness setting for this lock, then use{@link #tryLock(long,TimeUnit) tryLock(0, TimeUnit.SECONDS) }which is almost equivalent (it also detects interruption).
                  &lt;p&gt; If the current thread already holds this lock then the hold
                  count is incremented by one and the method returns {@code true}.
                  &lt;p&gt;If the lock is held by another thread then this method will return
                  immediately with the value {@code false}.                
                <return>
                    {@code true} if the lock was free and was acquired by the
                      current thread, or the lock was already held by the current
                      thread; and {@code false} otherwise                    
                </return>
            </javadoc>
            <method name="tryLock" type="boolean" line="261"/>
            <javadoc line="264">
                Acquires the lock if it is not held by another thread within the given
                  waiting time and the current thread has not been{@linkplain Thread#interrupt interrupted}.
                  &lt;p&gt;Acquires the lock if it is not held by another thread and returns
                  immediately with the value {@code true}, setting the lock hold count
                  to one. If this lock has been set to use a fair ordering policy then
                  an available lock &lt;em&gt;will not&lt;/em&gt; be acquired if any other threads
                  are waiting for the lock. This is in contrast to the {@link #tryLock()}method. If you want a timed {@code tryLock} that does permit barging on
                  a fair lock then combine the timed and un-timed forms together:
                  &lt;pre&gt;if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... }
                  &lt;/pre&gt;
                  &lt;p&gt;If the current thread
                  already holds this lock then the hold count is incremented by one and
                  the method returns {@code true}.
                  &lt;p&gt;If the lock is held by another thread then the
                  current thread becomes disabled for thread scheduling
                  purposes and lies dormant until one of three things happens:
                  &lt;ul&gt;
                  &lt;li&gt;The lock is acquired by the current thread; or
                  &lt;li&gt;Some other thread {@linkplain Thread#interrupt interrupts}the current thread; or
                  &lt;li&gt;The specified waiting time elapses
                  &lt;/ul&gt;
                  &lt;p&gt;If the lock is acquired then the value {@code true} is returned and
                  the lock hold count is set to one.
                  &lt;p&gt;If the current thread:
                  &lt;ul&gt;
                  &lt;li&gt;has its interrupted status set on entry to this method; or
                  &lt;li&gt;is {@linkplain Thread#interrupt interrupted} while
                  acquiring the lock,
                  &lt;/ul&gt;
                  then {@link InterruptedException} is thrown and the current thread&apos;s
                  interrupted status is cleared.
                  &lt;p&gt;If the specified waiting time elapses then the value {@code false}is returned.  If the time is less than or equal to zero, the method
                  will not wait at all.
                  &lt;p&gt;In this implementation, as this method is an explicit
                  interruption point, preference is given to responding to the
                  interrupt over normal or reentrant acquisition of the lock, and
                  over reporting the elapse of the waiting time.                
                <param>
                    timeout the time to wait for the lock                    
                </param>
                <param>
                    unit the time unit of the timeout argument                    
                </param>
                <return>
                    {@code true} if the lock was free and was acquired by the
                      current thread, or the lock was already held by the current
                      thread; and {@code false} if the waiting time elapsed before
                      the lock could be acquired                    
                </return>
                <throws>
                    InterruptedException if the current thread is interrupted                    
                </throws>
                <throws>
                    NullPointerException if the time unit is null                    
                </throws>
            </javadoc>
            <method name="tryLock" type="boolean" line="311">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="314">
                Attempts to release this lock.
                  &lt;p&gt;If the current thread is the holder of this lock then the hold
                  count is decremented.  If the hold count is now zero then the lock
                  is released.  If the current thread is not the holder of this
                  lock then {@link IllegalMonitorStateException} is thrown.                
                <throws>
                    IllegalMonitorStateException if the current thread does not
                      hold this lock                    
                </throws>
            </javadoc>
            <method name="unlock" type="void" line="323"/>
            <javadoc line="326">
                Returns a {@link Condition} instance for use with this{@link Lock} instance.
                  &lt;p&gt;The returned {@link Condition} instance supports the same
                  usages as do the {@link Object} monitor methods ({@link Object#wait() wait}, {@link Object#notify notify}, and {@link Object#notifyAll notifyAll}) when used with the built-in
                  monitor lock.
                  &lt;ul&gt;
                  &lt;li&gt;If this lock is not held when any of the {@link Condition}{@linkplain Condition#await() waiting} or {@linkplain Condition#signal signalling} methods are called, then an {@link IllegalMonitorStateException} is thrown.
                  &lt;li&gt;When the condition {@linkplain Condition#await() waiting}methods are called the lock is released and, before they
                  return, the lock is reacquired and the lock hold count restored
                  to what it was when the method was called.
                  &lt;li&gt;If a thread is {@linkplain Thread#interrupt interrupted}while waiting then the wait will terminate, an {@link InterruptedException} will be thrown, and the thread&apos;s
                  interrupted status will be cleared.
                  &lt;li&gt; Waiting threads are signalled in FIFO order.
                  &lt;li&gt;The ordering of lock reacquisition for threads returning
                  from waiting methods is the same as for threads initially
                  acquiring the lock, which is in the default case not specified,
                  but for &lt;em&gt;fair&lt;/em&gt; locks favors those threads that have been
                  waiting the longest.
                  &lt;/ul&gt;                
                <return>
                    the Condition object                    
                </return>
            </javadoc>
            <method name="newCondition" type="Condition" line="347"/>
            <javadoc line="350">
                Queries the number of holds on this lock by the current thread.
                  &lt;p&gt;A thread has a hold on a lock for each lock action that is not
                  matched by an unlock action.
                  &lt;p&gt;The hold count information is typically only used for testing and
                  debugging purposes. For example, if a certain section of code should
                  not be entered with the lock already held then we can assert that
                  fact:
                  &lt;pre&gt;
                  class X {
                  ReentrantLock lock = new ReentrantLock();
                  // ...
                  public void m() {
                  assert lock.getHoldCount() == 0;
                  lock.lock();
                  try {
                  // ... method body
                  } finally {
                  lock.unlock();
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <return>
                    the number of holds on this lock by the current thread,
                      or zero if this lock is not held by the current thread                    
                </return>
            </javadoc>
            <method name="getHoldCount" type="int" line="376"/>
            <javadoc line="379">
                Queries if this lock is held by the current thread.
                  &lt;p&gt;Analogous to the {@link Thread#holdsLock} method for built-in
                  monitor locks, this method is typically used for debugging and
                  testing. For example, a method that should only be called while
                  a lock is held can assert that this is the case:
                  &lt;pre&gt;
                  class X {
                  ReentrantLock lock = new ReentrantLock();
                  // ...
                  public void m() {
                  assert lock.isHeldByCurrentThread();
                  // ... method body
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;It can also be used to ensure that a reentrant lock is used
                  in a non-reentrant manner, for example:
                  &lt;pre&gt;
                  class X {
                  ReentrantLock lock = new ReentrantLock();
                  // ...
                  public void m() {
                  assert !lock.isHeldByCurrentThread();
                  lock.lock();
                  try {
                  // ... method body
                  } finally {
                  lock.unlock();
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <return>
                    {@code true} if current thread holds this lock and{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isHeldByCurrentThread" type="boolean" line="414"/>
            <javadoc line="417">
                Queries if this lock is held by any thread. This method is
                  designed for use in monitoring of the system state,
                  not for synchronization control.                
                <return>
                    {@code true} if any thread holds this lock and{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isLocked" type="boolean" line="423"/>
            <javadoc line="426">
                Returns {@code true} if this lock has fairness set true.                
                <return>
                    {@code true} if this lock has fairness set true                    
                </return>
            </javadoc>
            <method name="isFair" type="boolean" line="430"/>
            <javadoc line="433">
                Returns the thread that currently owns this lock, or{@code null} if not owned. When this method is called by a
                  thread that is not the owner, the return value reflects a
                  best-effort approximation of current lock status. For example,
                  the owner may be momentarily {@code null} even if there are
                  threads trying to acquire the lock but have not yet done so.
                  This method is designed to facilitate construction of
                  subclasses that provide more extensive lock monitoring
                  facilities.                
                <return>
                    the owner, or {@code null} if not owned                    
                </return>
            </javadoc>
            <method name="getOwner" type="Thread" line="444"/>
            <javadoc line="447">
                Queries whether any threads are waiting to acquire this lock. Note that
                  because cancellations may occur at any time, a {@code true}return does not guarantee that any other thread will ever
                  acquire this lock.  This method is designed primarily for use in
                  monitoring of the system state.                
                <return>
                    {@code true} if there may be other threads waiting to
                      acquire the lock                    
                </return>
            </javadoc>
            <method name="hasQueuedThreads" type="boolean" line="455"/>
            <javadoc line="458">
                Queries whether the given thread is waiting to acquire this
                  lock. Note that because cancellations may occur at any time, a{@code true} return does not guarantee that this thread
                  will ever acquire this lock.  This method is designed primarily for use
                  in monitoring of the system state.                
                <param>
                    thread the thread                    
                </param>
                <return>
                    {@code true} if the given thread is queued waiting for this lock                    
                </return>
                <throws>
                    NullPointerException if the thread is null                    
                </throws>
            </javadoc>
            <method name="hasQueuedThread" type="boolean" line="467">
                <params>
                    <param name="thread" type="Thread"/>
                </params>
            </method>
            <javadoc line="470">
                Returns an estimate of the number of threads waiting to
                  acquire this lock.  The value is only an estimate because the number of
                  threads may change dynamically while this method traverses
                  internal data structures.  This method is designed for use in
                  monitoring of the system state, not for synchronization
                  control.                
                <return>
                    the estimated number of threads waiting for this lock                    
                </return>
            </javadoc>
            <method name="getQueueLength" type="int" line="479"/>
            <javadoc line="482">
                Returns a collection containing threads that may be waiting to
                  acquire this lock.  Because the actual set of threads may change
                  dynamically while constructing this result, the returned
                  collection is only a best-effort estimate.  The elements of the
                  returned collection are in no particular order.  This method is
                  designed to facilitate construction of subclasses that provide
                  more extensive monitoring facilities.                
                <return>
                    the collection of threads                    
                </return>
            </javadoc>
            <method name="getQueuedThreads" type="Collection<Thread>" line="492"/>
            <javadoc line="495">
                Queries whether any threads are waiting on the given condition
                  associated with this lock. Note that because timeouts and
                  interrupts may occur at any time, a {@code true} return does
                  not guarantee that a future {@code signal} will awaken any
                  threads.  This method is designed primarily for use in
                  monitoring of the system state.                
                <param>
                    condition the condition                    
                </param>
                <return>
                    {@code true} if there are any waiting threads                    
                </return>
                <throws>
                    IllegalMonitorStateException if this lock is not held                    
                </throws>
                <throws>
                    IllegalArgumentException if the given condition is
                      not associated with this lock                    
                </throws>
                <throws>
                    NullPointerException if the condition is null                    
                </throws>
            </javadoc>
            <method name="hasWaiters" type="boolean" line="509">
                <params>
                    <param name="condition" type="Condition"/>
                </params>
            </method>
            <javadoc line="514">
                Returns an estimate of the number of threads waiting on the
                  given condition associated with this lock. Note that because
                  timeouts and interrupts may occur at any time, the estimate
                  serves only as an upper bound on the actual number of waiters.
                  This method is designed for use in monitoring of the system
                  state, not for synchronization control.                
                <param>
                    condition the condition                    
                </param>
                <return>
                    the estimated number of waiting threads                    
                </return>
                <throws>
                    IllegalMonitorStateException if this lock is not held                    
                </throws>
                <throws>
                    IllegalArgumentException if the given condition is
                      not associated with this lock                    
                </throws>
                <throws>
                    NullPointerException if the condition is null                    
                </throws>
            </javadoc>
            <method name="getWaitQueueLength" type="int" line="528">
                <params>
                    <param name="condition" type="Condition"/>
                </params>
            </method>
            <javadoc line="533">
                Returns a collection containing those threads that may be
                  waiting on the given condition associated with this lock.
                  Because the actual set of threads may change dynamically while
                  constructing this result, the returned collection is only a
                  best-effort estimate. The elements of the returned collection
                  are in no particular order.  This method is designed to
                  facilitate construction of subclasses that provide more
                  extensive condition monitoring facilities.                
                <param>
                    condition the condition                    
                </param>
                <return>
                    the collection of threads                    
                </return>
                <throws>
                    IllegalMonitorStateException if this lock is not held                    
                </throws>
                <throws>
                    IllegalArgumentException if the given condition is
                      not associated with this lock                    
                </throws>
                <throws>
                    NullPointerException if the condition is null                    
                </throws>
            </javadoc>
            <method name="getWaitingThreads" type="Collection<Thread>" line="549">
                <params>
                    <param name="condition" type="Condition"/>
                </params>
            </method>
            <javadoc line="554">
                Returns a string identifying this lock, as well as its lock state.
                  The state, in brackets, includes either the String {@code &quot;Unlocked&quot;}or the String {@code &quot;Locked by&quot;} followed by the{@linkplain Thread#getName name} of the owning thread.                
                <return>
                    a string identifying this lock, as well as its lock state                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="559">
                <declaration name="o" type="Thread" line="560"/>
            </method>
        </class>
    </source>