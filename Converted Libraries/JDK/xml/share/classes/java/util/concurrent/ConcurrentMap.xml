<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.Map"/>
        <interface name="ConcurrentMap">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <implements interface="Map">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="3">
                A {@link java.util.Map} providing additional atomic
                  &lt;tt&gt;putIfAbsent&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, and &lt;tt&gt;replace&lt;/tt&gt; methods.
                  &lt;p&gt;Memory consistency effects: As with other concurrent
                  collections, actions in a thread prior to placing an object into a{@code ConcurrentMap} as a key or value
                  &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  actions subsequent to the access or removal of that object from
                  the {@code ConcurrentMap} in another thread.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <K>
                      the type of keys maintained by this map                    
                </param>
                <param>
                    <V>
                      the type of mapped values                    
                </param>
            </javadoc>
            <method name="putIfAbsent" type="V" line="22"/>
            <javadoc line="22">
                If the specified key is not already associated
                  with a value, associate it with the given value.
                  This is equivalent to
                  &lt;pre&gt;
                  if (!map.containsKey(key))
                  return map.put(key, value);
                  else
                  return map.get(key);&lt;/pre&gt;
                  except that the action is performed atomically.                
                <param>
                    key key with which the specified value is to be associated                    
                </param>
                <param>
                    value value to be associated with the specified key                    
                </param>
                <return>
                    the previous value associated with the specified key, or
                      <tt>null</tt> if there was no mapping for the key.
                      (A <tt>null</tt> return can also indicate that the map
                      previously associated <tt>null</tt> with the key,
                      if the implementation supports null values.)                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>put</tt> operation
                      is not supported by this map                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified key or value
                      prevents it from being stored in this map                    
                </throws>
                <throws>
                    NullPointerException if the specified key or value is null,
                      and this map does not permit null keys or values                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified key
                      or value prevents it from being stored in this map                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="49"/>
            <javadoc line="49">
                Removes the entry for a key only if currently mapped to a given value.
                  This is equivalent to
                  &lt;pre&gt;
                  if (map.containsKey(key) &amp;amp;&amp;amp; map.get(key).equals(value)) {
                  map.remove(key);
                  return true;
                  } else return false;&lt;/pre&gt;
                  except that the action is performed atomically.                
                <param>
                    key key with which the specified value is associated                    
                </param>
                <param>
                    value value expected to be associated with the specified key                    
                </param>
                <return>
                    <tt>true</tt> if the value was removed                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>remove</tt> operation
                      is not supported by this map                    
                </throws>
                <throws>
                    ClassCastException if the key or value is of an inappropriate
                      type for this map
                      (<a href="../Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if the specified key or value is null,
                      and this map does not permit null keys or values
                      (<a href="../Collection.html#optional-restrictions">optional</a>)                    
                </throws>
            </javadoc>
            <method name="replace" type="boolean" line="71"/>
            <javadoc line="71">
                Replaces the entry for a key only if currently mapped to a given value.
                  This is equivalent to
                  &lt;pre&gt;
                  if (map.containsKey(key) &amp;amp;&amp;amp; map.get(key).equals(oldValue)) {
                  map.put(key, newValue);
                  return true;
                  } else return false;&lt;/pre&gt;
                  except that the action is performed atomically.                
                <param>
                    key key with which the specified value is associated                    
                </param>
                <param>
                    oldValue value expected to be associated with the specified key                    
                </param>
                <param>
                    newValue value to be associated with the specified key                    
                </param>
                <return>
                    <tt>true</tt> if the value was replaced                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>put</tt> operation
                      is not supported by this map                    
                </throws>
                <throws>
                    ClassCastException if the class of a specified key or value
                      prevents it from being stored in this map                    
                </throws>
                <throws>
                    NullPointerException if a specified key or value is null,
                      and this map does not permit null keys or values                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of a specified key
                      or value prevents it from being stored in this map                    
                </throws>
            </javadoc>
            <method name="replace" type="V" line="94"/>
            <javadoc line="94">
                Replaces the entry for a key only if currently mapped to some value.
                  This is equivalent to
                  &lt;pre&gt;
                  if (map.containsKey(key)) {
                  return map.put(key, value);
                  } else return null;&lt;/pre&gt;
                  except that the action is performed atomically.                
                <param>
                    key key with which the specified value is associated                    
                </param>
                <param>
                    value value to be associated with the specified key                    
                </param>
                <return>
                    the previous value associated with the specified key, or
                      <tt>null</tt> if there was no mapping for the key.
                      (A <tt>null</tt> return can also indicate that the map
                      previously associated <tt>null</tt> with the key,
                      if the implementation supports null values.)                    
                </return>
                <throws>
                    UnsupportedOperationException if the <tt>put</tt> operation
                      is not supported by this map                    
                </throws>
                <throws>
                    ClassCastException if the class of the specified key or value
                      prevents it from being stored in this map                    
                </throws>
                <throws>
                    NullPointerException if the specified key or value is null,
                      and this map does not permit null keys or values                    
                </throws>
                <throws>
                    IllegalArgumentException if some property of the specified key
                      or value prevents it from being stored in this map                    
                </throws>
            </javadoc>
        </interface>
    </source>