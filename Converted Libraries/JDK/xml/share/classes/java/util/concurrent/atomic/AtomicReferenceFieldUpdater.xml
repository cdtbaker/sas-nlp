<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <import package="java.lang.reflect"/>
        <class name="AtomicReferenceFieldUpdater" line="40">
            <type_params>
                <type_param name="T"/>
                <type_param name="V"/>
            </type_params>
            <javadoc line="40">
                A reflection-based utility that enables atomic updates to
                  designated {@code volatile} reference fields of designated
                  classes.  This class is designed for use in atomic data structures
                  in which several reference fields of the same node are
                  independently subject to atomic updates. For example, a tree node
                  might be declared as
                  &lt;pre&gt; {@code}class Node 
                  private volatile Node left, right;
                  private static final AtomicReferenceFieldUpdater&lt;Node, Node&gt; leftUpdater =
                  AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, &quot;left&quot;);
                  private static AtomicReferenceFieldUpdater&lt;Node, Node&gt; rightUpdater =
                  AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, &quot;right&quot;);
                  Node getLeft() { return left;  }
                  boolean compareAndSetLeft(Node expect, Node update) {
                  return leftUpdater.compareAndSet(this, expect, update);
                  }
                  // ... and so on
                  }}&lt;/pre&gt;
                  &lt;p&gt;Note that the guarantees of the {@code compareAndSet}method in this class are weaker than in other atomic classes.
                  Because this class cannot ensure that all uses of the field
                  are appropriate for purposes of atomic access, it can
                  guarantee atomicity only with respect to other invocations of{@code compareAndSet} and {@code set} on the same updater.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <T>
                       The type of the object holding the updatable field                    
                </param>
                <param>
                    <V>
                       The type of the field                    
                </param>
            </javadoc>
            <javadoc line="78">
                Creates and returns an updater for objects with the given field.
                  The Class arguments are needed to check that reflective types and
                  generic types match.                
                <param>
                    tclass the class of the objects holding the field.                    
                </param>
                <param>
                    vclass the class of the field                    
                </param>
                <param>
                    fieldName the name of the field to be updated.                    
                </param>
                <return>
                    the updater                    
                </return>
                <throws>
                    IllegalArgumentException if the field is not a volatile reference type.                    
                </throws>
                <throws>
                    RuntimeException with a nested reflection-based
                      exception if the class does not hold field or is the wrong type.                    
                </throws>
            </javadoc>
            <method name="newUpdater" type="AtomicReferenceFieldUpdater<U,W>" line="91">
                <params>
                    <param name="tclass" type="Class<U>"/>
                    <param name="vclass" type="Class<W>"/>
                    <param name="fieldName" type="String"/>
                </params>
            </method>
            <javadoc line="97">
                Protected do-nothing constructor for use by subclasses.                
            </javadoc>
            <method name="AtomicReferenceFieldUpdater" type="constructor" line="100"/>
            <method name="compareAndSet" type="boolean" line="103"/>
            <javadoc line="103">
                Atomically sets the field of the given object managed by this updater
                  to the given updated value if the current value {@code ==} the
                  expected value. This method is guaranteed to be atomic with respect to
                  other calls to {@code compareAndSet} and {@code set}, but not
                  necessarily with respect to other changes in the field.                
                <param>
                    obj An object whose field to conditionally set                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="117"/>
            <javadoc line="117">
                Atomically sets the field of the given object managed by this updater
                  to the given updated value if the current value {@code ==} the
                  expected value. This method is guaranteed to be atomic with respect to
                  other calls to {@code compareAndSet} and {@code set}, but not
                  necessarily with respect to other changes in the field.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    obj An object whose field to conditionally set                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="set" type="void" line="135"/>
            <javadoc line="135">
                Sets the field of the given object managed by this updater to the
                  given updated value. This operation is guaranteed to act as a volatile
                  store with respect to subsequent invocations of {@code compareAndSet}.                
                <param>
                    obj An object whose field to set                    
                </param>
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="lazySet" type="void" line="145"/>
            <javadoc line="145">
                Eventually sets the field of the given object managed by this
                  updater to the given updated value.                
                <param>
                    obj An object whose field to set                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="get" type="V" line="155"/>
            <javadoc line="155">
                Gets the current value held in the field of the given object managed
                  by this updater.                
                <param>
                    obj An object whose field to get                    
                </param>
                <return>
                    the current value                    
                </return>
            </javadoc>
            <javadoc line="164">
                Atomically sets the field of the given object managed by this updater
                  to the given value and returns the old value.                
                <param>
                    obj An object whose field to get and set                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="V" line="172">
                <params>
                    <param name="obj" type="T"/>
                    <param name="newValue" type="V"/>
                </params>
                <scope line="173">
                    <declaration name="current" type="V" line="174"/>
                </scope>
            </method>
            <class name="AtomicReferenceFieldUpdaterImpl" line="180">
                <type_params>
                    <type_param name="T"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="AtomicReferenceFieldUpdater">
                    <type_params>
                        <type_param name="T"/>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <comment line="189">
                    Internal type checks within all update methods contain
                     internal inlined optimizations checking for the common
                     cases where the class is final (in which case a simple
                     getClass comparison suffices) or is of type Object (in
                     which case no check is needed because all objects are
                     instances of Object). The Object case is handled simply by
                     setting vclass to null in constructor.  The targetCheck and
                     updateCheck methods are invoked when these faster
                     screenings fail.                    
                </comment>
                <declaration name="unsafe" type="Unsafe" line="182"/>
                <declaration name="offset" type="long" line="183"/>
                <declaration name="tclass" type="Class&lt;T&gt;" line="184"/>
                <declaration name="vclass" type="Class&lt;V&gt;" line="185"/>
                <declaration name="cclass" type="Class" line="186"/>
                <method name="AtomicReferenceFieldUpdaterImpl" type="constructor" line="202">
                    <params>
                        <param name="tclass" type="Class<T>"/>
                        <param name="vclass" type="Class<V>"/>
                        <param name="fieldName" type="String"/>
                    </params>
                    <declaration name="field" type="Field" line="203"/>
                    <declaration name="fieldClass" type="Class" line="204"/>
                    <declaration name="caller" type="Class" line="205"/>
                    <declaration name="modifiers" type="int" line="206"/>
                    <scope line="207"/>
                    <scope line="215"/>
                </method>
                <method name="targetCheck" type="void" line="235">
                    <params>
                        <param name="obj" type="T"/>
                    </params>
                </method>
                <method name="updateCheck" type="void" line="242">
                    <params>
                        <param name="obj" type="T"/>
                        <param name="update" type="V"/>
                    </params>
                </method>
                <method name="compareAndSet" type="boolean" line="250">
                    <params>
                        <param name="obj" type="T"/>
                        <param name="expect" type="V"/>
                        <param name="update" type="V"/>
                    </params>
                </method>
                <method name="weakCompareAndSet" type="boolean" line="258">
                    <params>
                        <param name="obj" type="T"/>
                        <param name="expect" type="V"/>
                        <param name="update" type="V"/>
                    </params>
                    <comment line="259">
                        same implementation as strong form for now                        
                    </comment>
                </method>
                <method name="set" type="void" line="267">
                    <params>
                        <param name="obj" type="T"/>
                        <param name="newValue" type="V"/>
                    </params>
                </method>
                <method name="lazySet" type="void" line="275">
                    <params>
                        <param name="obj" type="T"/>
                        <param name="newValue" type="V"/>
                    </params>
                </method>
                <method name="get" type="V" line="283">
                    <params>
                        <param name="obj" type="T"/>
                    </params>
                </method>
                <method name="ensureProtectedAccess" type="void" line="289">
                    <params>
                        <param name="obj" type="T"/>
                    </params>
                    <scope line="290"/>
                </method>
            </class>
        </class>
    </source>