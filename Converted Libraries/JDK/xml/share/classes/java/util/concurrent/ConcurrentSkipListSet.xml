<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util"/>
        <import package="sun.misc.Unsafe"/>
        <class name="ConcurrentSkipListSet" line="40">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="173">
                                
            </comment>
            <comment line="280">
                                
            </comment>
            <comment line="332">
                                
            </comment>
            <comment line="377">
                                
            </comment>
            <comment line="475">
                Support for resetting map in clone                
            </comment>
            <implements interface="NavigableSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="40">
                A scalable concurrent {@link NavigableSet} implementation based on
                  a {@link ConcurrentSkipListMap}.  The elements of the set are kept
                  sorted according to their {@linkplain Comparable natural ordering},
                  or by a {@link Comparator} provided at set creation time, depending
                  on which constructor is used.
                  &lt;p&gt;This implementation provides expected average &lt;i&gt;log(n)&lt;/i&gt; time
                  cost for the &lt;tt&gt;contains&lt;/tt&gt;, &lt;tt&gt;add&lt;/tt&gt;, and &lt;tt&gt;remove&lt;/tt&gt;
                  operations and their variants.  Insertion, removal, and access
                  operations safely execute concurrently by multiple threads.
                  Iterators are &lt;i&gt;weakly consistent&lt;/i&gt;, returning elements
                  reflecting the state of the set at some point at or since the
                  creation of the iterator.  They do &lt;em&gt;not&lt;/em&gt; throw {@link ConcurrentModificationException}, and may proceed concurrently with
                  other operations.  Ascending ordered views and their iterators are
                  faster than descending ones.
                  &lt;p&gt;Beware that, unlike in most collections, the &lt;tt&gt;size&lt;/tt&gt;
                  method is &lt;em&gt;not&lt;/em&gt; a constant-time operation. Because of the
                  asynchronous nature of these sets, determining the current number
                  of elements requires a traversal of the elements, and so may report
                  inaccurate results if this collection is modified during traversal.
                  Additionally, the bulk operations &lt;tt&gt;addAll&lt;/tt&gt;,
                  &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt;, &lt;tt&gt;containsAll&lt;/tt&gt;,
                  &lt;tt&gt;equals&lt;/tt&gt;, and &lt;tt&gt;toArray&lt;/tt&gt; are &lt;em&gt;not&lt;/em&gt; guaranteed
                  to be performed atomically. For example, an iterator operating
                  concurrently with an &lt;tt&gt;addAll&lt;/tt&gt; operation might view only some
                  of the added elements.
                  &lt;p&gt;This class and its iterators implement all of the
                  &lt;em&gt;optional&lt;/em&gt; methods of the {@link Set} and {@link Iterator}interfaces. Like most other concurrent collection implementations,
                  this class does not permit the use of &lt;tt&gt;null&lt;/tt&gt; elements,
                  because &lt;tt&gt;null&lt;/tt&gt; arguments and return values cannot be reliably
                  distinguished from the absence of elements.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;E&gt;
                       the type of elements maintained by this set                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="89"/>
            <declaration name="m" type="ConcurrentNavigableMap&lt;E,Object&gt;" line="91"/>
            <javadoc line="91">
                The underlying map. Uses Boolean.TRUE as value for each
                  element.  This field is declared final for the sake of thread
                  safety, which entails some ugliness in clone()                
            </javadoc>
            <javadoc line="98">
                Constructs a new, empty set that orders its elements according to
                  their {@linkplain Comparable natural ordering}.                
            </javadoc>
            <method name="ConcurrentSkipListSet" type="constructor" line="102"/>
            <javadoc line="106">
                Constructs a new, empty set that orders its elements according to
                  the specified comparator.                
                <param>
                    comparator the comparator that will be used to order this set.
                      If &lt;tt&gt;null&lt;/tt&gt;, the {@linkplain Comparable natural
                      ordering} of the elements will be used.                    
                </param>
            </javadoc>
            <method name="ConcurrentSkipListSet" type="constructor" line="114">
                <params>
                    <param name="comparator" type="Comparator<? super E>"/>
                </params>
            </method>
            <javadoc line="118">
                Constructs a new set containing the elements in the specified
                  collection, that orders its elements according to their{@linkplain Comparable natural ordering}.                
                <param>
                    c The elements that will comprise the new set                    
                </param>
                <throws>
                    ClassCastException if the elements in &lt;tt&gt;c&lt;/tt&gt; are
                      not {@link Comparable}, or are not mutually comparable                    
                </throws>
                <throws>
                    NullPointerException if the specified collection or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="ConcurrentSkipListSet" type="constructor" line="129">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="134">
                Constructs a new set containing the same elements and using the
                  same ordering as the specified sorted set.                
                <param>
                    s sorted set whose elements will comprise the new set                    
                </param>
                <throws>
                    NullPointerException if the specified sorted set or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="ConcurrentSkipListSet" type="constructor" line="142">
                <params>
                    <param name="s" type="SortedSet<E>"/>
                </params>
            </method>
            <javadoc line="147">
                For use by submaps                
            </javadoc>
            <method name="ConcurrentSkipListSet" type="constructor" line="150">
                <params>
                    <param name="m" type="ConcurrentNavigableMap<E,Object>"/>
                </params>
            </method>
            <javadoc line="154">
                Returns a shallow copy of this &lt;tt&gt;ConcurrentSkipListSet&lt;/tt&gt;
                  instance. (The elements themselves are not cloned.)                
                <return>
                    a shallow copy of this set                    
                </return>
            </javadoc>
            <method name="clone" type="ConcurrentSkipListSet<E>" line="160">
                <declaration name="clone" type="ConcurrentSkipListSet&lt;E&gt;" line="161"/>
                <scope line="162"/>
                <scope line="165"/>
            </method>
            <javadoc line="174">
                Returns the number of elements in this set.  If this set
                  contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, it
                  returns &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.
                  &lt;p&gt;Beware that, unlike in most collections, this method is
                  &lt;em&gt;NOT&lt;/em&gt; a constant-time operation. Because of the
                  asynchronous nature of these sets, determining the current
                  number of elements requires traversing them all to count them.
                  Additionally, it is possible for the size to change during
                  execution of this method, in which case the returned result
                  will be inaccurate. Thus, this method is typically not very
                  useful in concurrent applications.                
                <return>
                    the number of elements in this set                    
                </return>
            </javadoc>
            <method name="size" type="int" line="190"/>
            <javadoc line="194">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="198"/>
            <javadoc line="202">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this set
                  contains an element &lt;tt&gt;e&lt;/tt&gt; such that &lt;tt&gt;o.equals(e)&lt;/tt&gt;.                
                <param>
                    o object to be checked for containment in this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be
                      compared with the elements currently in this set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="contains" type="boolean" line="213">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="217">
                Adds the specified element to this set if it is not already present.
                  More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if
                  the set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that &lt;tt&gt;e.equals(e2)&lt;/tt&gt;.
                  If this set already contains the element, the call leaves the set
                  unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    e element to be added to this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the
                      specified element                    
                </return>
                <throws>
                    ClassCastException if &lt;tt&gt;e&lt;/tt&gt; cannot be compared
                      with the elements currently in this set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="231">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="235">
                Removes the specified element from this set if it is present.
                  More formally, removes an element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;o.equals(e)&lt;/tt&gt;, if this set contains such an element.
                  Returns &lt;tt&gt;true&lt;/tt&gt; if this set contained the element (or
                  equivalently, if this set changed as a result of the call).
                  (This set will not contain the element once the call returns.)                
                <param>
                    o object to be removed from this set, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contained the specified element                    
                </return>
                <throws>
                    ClassCastException if &lt;tt&gt;o&lt;/tt&gt; cannot be compared
                      with the elements currently in this set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="249">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="253">
                Removes all of the elements from this set.                
            </javadoc>
            <method name="clear" type="void" line="256"/>
            <javadoc line="260">
                Returns an iterator over the elements in this set in ascending order.                
                <return>
                    an iterator over the elements in this set in ascending order                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="265"/>
            <javadoc line="269">
                Returns an iterator over the elements in this set in descending order.                
                <return>
                    an iterator over the elements in this set in descending order                    
                </return>
            </javadoc>
            <method name="descendingIterator" type="Iterator<E>" line="274"/>
            <javadoc line="281">
                Compares the specified object with this set for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the specified object is also a set, the two sets
                  have the same size, and every member of the specified set is
                  contained in this set (or equivalently, every member of this set is
                  contained in the specified set).  This definition ensures that the
                  equals method works properly across different implementations of the
                  set interface.                
                <param>
                    o the object to be compared for equality with this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this set                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="293">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <comment line="295">
                    Override AbstractSet version to avoid calling size()                    
                </comment>
                <declaration name="c" type="Collection&lt;?&gt;" line="299"/>
                <scope line="300"/>
                <scope line="302"/>
                <scope line="304"/>
            </method>
            <javadoc line="309">
                Removes from this set all of its elements that are contained in
                  the specified collection.  If the specified collection is also
                  a set, this operation effectively modifies this set so that its
                  value is the &lt;i&gt;asymmetric set difference&lt;/i&gt; of the two sets.                
                <param>
                    c collection containing elements to be removed from this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the types of one or more elements in this
                      set are incompatible with the specified collection                    
                </throws>
                <throws>
                    NullPointerException if the specified collection or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="removeAll" type="boolean" line="322">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <comment line="324">
                    Override AbstractSet version to avoid unnecessary call to size()                    
                </comment>
                <declaration name="modified" type="boolean" line="324"/>
            </method>
            <javadoc line="333">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="lower" type="E" line="337">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="341">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="floor" type="E" line="345">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="349">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="ceiling" type="E" line="353">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="357">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="higher" type="E" line="361">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <method name="pollFirst" type="E" line="365">
                <declaration name="e" type="Map.Entry&lt;E,Object&gt;" line="366"/>
            </method>
            <method name="pollLast" type="E" line="370">
                <declaration name="e" type="Map.Entry&lt;E,Object&gt;" line="371"/>
            </method>
            <method name="comparator" type="Comparator<? super E>" line="379"/>
            <javadoc line="383">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="first" type="E" line="386"/>
            <javadoc line="390">
                @throws NoSuchElementException {@inheritDoc}                
            </javadoc>
            <method name="last" type="E" line="393"/>
            <javadoc line="397">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromElement} or{@code toElement} is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="subSet" type="NavigableSet<E>" line="406">
                <params>
                    <param name="fromElement" type="E"/>
                    <param name="fromInclusive" type="boolean"/>
                    <param name="toElement" type="E"/>
                    <param name="toInclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="412">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code toElement} is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="headSet" type="NavigableSet<E>" line="417">
                <params>
                    <param name="toElement" type="E"/>
                    <param name="inclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="421">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromElement} is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="tailSet" type="NavigableSet<E>" line="426">
                <params>
                    <param name="fromElement" type="E"/>
                    <param name="inclusive" type="boolean"/>
                </params>
            </method>
            <javadoc line="430">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromElement} or{@code toElement} is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="subSet" type="NavigableSet<E>" line="436">
                <params>
                    <param name="fromElement" type="E"/>
                    <param name="toElement" type="E"/>
                </params>
            </method>
            <javadoc line="440">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code toElement} is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="headSet" type="NavigableSet<E>" line="445">
                <params>
                    <param name="toElement" type="E"/>
                </params>
            </method>
            <javadoc line="449">
                @throws ClassCastException {@inheritDoc}                
                <throws>
                    NullPointerException if {@code fromElement} is null                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="tailSet" type="NavigableSet<E>" line="454">
                <params>
                    <param name="fromElement" type="E"/>
                </params>
            </method>
            <javadoc line="458">
                Returns a reverse order view of the elements contained in this set.
                  The descending set is backed by this set, so changes to the set are
                  reflected in the descending set, and vice-versa.
                  &lt;p&gt;The returned set has an ordering equivalent to
                  &lt;tt&gt;{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())&lt;/tt&gt;.
                  The expression {@code s.descendingSet().descendingSet()} returns a
                  view of {@code s} essentially equivalent to {@code s}.                
                <return>
                    a reverse order view of this set                    
                </return>
            </javadoc>
            <method name="descendingSet" type="NavigableSet<E>" line="470"/>
            <method name="setMap" type="void" line="475">
                <params>
                    <param name="map" type="ConcurrentNavigableMap<E,Object>"/>
                </params>
            </method>
            <declaration name="UNSAFE" type="sun.misc.Unsafe" line="479"/>
            <declaration name="mapOffset" type="long" line="480"/>
            <scope line="481">
                <scope line="482">
                    <declaration name="k" type="Class" line="484"/>
                </scope>
                <scope line="487"/>
            </scope>
        </class>
    </source>