<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <class name="AtomicInteger" line="39">
            <extends class="Number"/>
            <comment line="56">
                setup to use Unsafe.compareAndSwapInt for updates                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="39">
                An {@code int} value that may be updated atomically.  See the{@link java.util.concurrent.atomic} package specification for
                  description of the properties of atomic variables. An{@code AtomicInteger} is used in applications such as atomically
                  incremented counters, and cannot be used as a replacement for an{@link java.lang.Integer}. However, this class does extend{@code Number} to allow uniform access by tools and utilities that
                  deal with numerically-based classes.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="53"/>
            <declaration name="unsafe" type="Unsafe" line="56"/>
            <declaration name="valueOffset" type="long" line="57"/>
            <scope line="59">
                <scope line="60"/>
                <scope line="63"/>
            </scope>
            <declaration name="value" type="int" line="66"/>
            <javadoc line="68">
                Creates a new AtomicInteger with the given initial value.                
                <param>
                    initialValue the initial value                    
                </param>
            </javadoc>
            <method name="AtomicInteger" type="constructor" line="73">
                <params>
                    <param name="initialValue" type="int"/>
                </params>
            </method>
            <javadoc line="77">
                Creates a new AtomicInteger with initial value {@code 0}.                
            </javadoc>
            <method name="AtomicInteger" type="constructor" line="80"/>
            <javadoc line="83">
                Gets the current value.                
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="int" line="88"/>
            <javadoc line="92">
                Sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="97">
                <params>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="101">
                Eventually sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="107">
                <params>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="111">
                Atomically sets to the given value and returns the old value.                
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="int" line="117">
                <params>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="118">
                    <declaration name="current" type="int" line="119"/>
                </scope>
            </method>
            <javadoc line="125">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="134">
                <params>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <javadoc line="138">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="150">
                <params>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <javadoc line="154">
                Atomically increments by one the current value.                
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndIncrement" type="int" line="159">
                <scope line="160">
                    <declaration name="current" type="int" line="161"/>
                    <declaration name="next" type="int" line="162"/>
                </scope>
            </method>
            <javadoc line="168">
                Atomically decrements by one the current value.                
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndDecrement" type="int" line="173">
                <scope line="174">
                    <declaration name="current" type="int" line="175"/>
                    <declaration name="next" type="int" line="176"/>
                </scope>
            </method>
            <javadoc line="182">
                Atomically adds the given value to the current value.                
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndAdd" type="int" line="188">
                <params>
                    <param name="delta" type="int"/>
                </params>
                <scope line="189">
                    <declaration name="current" type="int" line="190"/>
                    <declaration name="next" type="int" line="191"/>
                </scope>
            </method>
            <javadoc line="197">
                Atomically increments by one the current value.                
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="incrementAndGet" type="int" line="202">
                <scope line="203">
                    <declaration name="current" type="int" line="204"/>
                    <declaration name="next" type="int" line="205"/>
                </scope>
            </method>
            <javadoc line="211">
                Atomically decrements by one the current value.                
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="decrementAndGet" type="int" line="216">
                <scope line="217">
                    <declaration name="current" type="int" line="218"/>
                    <declaration name="next" type="int" line="219"/>
                </scope>
            </method>
            <javadoc line="225">
                Atomically adds the given value to the current value.                
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="addAndGet" type="int" line="231">
                <params>
                    <param name="delta" type="int"/>
                </params>
                <scope line="232">
                    <declaration name="current" type="int" line="233"/>
                    <declaration name="next" type="int" line="234"/>
                </scope>
            </method>
            <javadoc line="240">
                Returns the String representation of the current value.                
                <return>
                    the String representation of the current value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="244"/>
            <method name="intValue" type="int" line="249"/>
            <method name="longValue" type="long" line="253"/>
            <method name="floatValue" type="float" line="257"/>
            <method name="doubleValue" type="double" line="261"/>
        </class>
    </source>