<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <class name="AtomicInteger" line="3">
            <extends class="Number"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                An {@code int} value that may be updated atomically.  See the{@link java.util.concurrent.atomic} package specification for
                  description of the properties of atomic variables. An{@code AtomicInteger} is used in applications such as atomically
                  incremented counters, and cannot be used as a replacement for an{@link java.lang.Integer}. However, this class does extend{@code Number} to allow uniform access by tools and utilities that
                  deal with numerically-based classes.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="12"/>
            <declaration name="unsafe" type="Unsafe" line="13"/>
            <declaration name="valueOffset" type="long" line="14"/>
            <scope line="15">
                <scope line="16"/>
                <scope line="19"/>
            </scope>
            <declaration name="value" type="int" line="23"/>
            <javadoc line="24">
                Creates a new AtomicInteger with the given initial value.                
                <param>
                    initialValue the initial value                    
                </param>
            </javadoc>
            <method name="AtomicInteger" type="constructor" line="28">
                <params>
                    <param name="initialValue" type="int"/>
                </params>
            </method>
            <javadoc line="31">
                Creates a new AtomicInteger with initial value {@code 0}.                
            </javadoc>
            <method name="AtomicInteger" type="constructor" line="34"/>
            <javadoc line="36">
                Gets the current value.                
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="int" line="40"/>
            <javadoc line="43">
                Sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="47">
                <params>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Eventually sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="55">
                <params>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Atomically sets to the given value and returns the old value.                
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="int" line="63">
                <params>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="64">
                    <declaration name="current" type="int" line="65"/>
                </scope>
            </method>
            <javadoc line="69">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="77">
                <params>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="90">
                <params>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Atomically increments by one the current value.                
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndIncrement" type="int" line="97">
                <scope line="98">
                    <declaration name="current" type="int" line="99"/>
                    <declaration name="next" type="int" line="100"/>
                </scope>
            </method>
            <javadoc line="104">
                Atomically decrements by one the current value.                
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndDecrement" type="int" line="108">
                <scope line="109">
                    <declaration name="current" type="int" line="110"/>
                    <declaration name="next" type="int" line="111"/>
                </scope>
            </method>
            <javadoc line="115">
                Atomically adds the given value to the current value.                
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndAdd" type="int" line="120">
                <params>
                    <param name="delta" type="int"/>
                </params>
                <scope line="121">
                    <declaration name="current" type="int" line="122"/>
                    <declaration name="next" type="int" line="123"/>
                </scope>
            </method>
            <javadoc line="127">
                Atomically increments by one the current value.                
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="incrementAndGet" type="int" line="131">
                <scope line="132">
                    <declaration name="current" type="int" line="133"/>
                    <declaration name="next" type="int" line="134"/>
                </scope>
            </method>
            <javadoc line="138">
                Atomically decrements by one the current value.                
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="decrementAndGet" type="int" line="142">
                <scope line="143">
                    <declaration name="current" type="int" line="144"/>
                    <declaration name="next" type="int" line="145"/>
                </scope>
            </method>
            <javadoc line="149">
                Atomically adds the given value to the current value.                
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="addAndGet" type="int" line="154">
                <params>
                    <param name="delta" type="int"/>
                </params>
                <scope line="155">
                    <declaration name="current" type="int" line="156"/>
                    <declaration name="next" type="int" line="157"/>
                </scope>
            </method>
            <javadoc line="161">
                Returns the String representation of the current value.                
                <return>
                    the String representation of the current value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="165"/>
            <method name="intValue" type="int" line="168"/>
            <method name="longValue" type="long" line="171"/>
            <method name="floatValue" type="float" line="174"/>
            <method name="doubleValue" type="double" line="177"/>
        </class>
    </source>