<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <interface name="ThreadFactory">
            <javadoc line="2">
                An object that creates new threads on demand.  Using thread factories
                  removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},
                  enabling applications to use special thread subclasses, priorities, etc.
                  &lt;p&gt;
                  The simplest implementation of this interface is just:
                  &lt;pre&gt;
                  class SimpleThreadFactory implements ThreadFactory {
                  public Thread newThread(Runnable r) {
                  return new Thread(r);
                  }
                  }
                  &lt;/pre&gt;
                  The {@link Executors#defaultThreadFactory} method provides a more
                  useful simple implementation, that sets the created thread context
                  to known values before returning it.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <method name="newThread" type="Thread" line="22"/>
            <javadoc line="22">
                Constructs a new {@code Thread}.  Implementations may also initialize
                  priority, name, daemon status, {@code ThreadGroup}, etc.                
                <param>
                    r a runnable to be executed by new thread instance                    
                </param>
                <return>
                    constructed thread, or {@code null} if the request to
                      create a thread is rejected                    
                </return>
            </javadoc>
        </interface>
    </source>