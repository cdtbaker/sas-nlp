<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <class name="AtomicReference" line="3">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                An object reference that may be updated atomically. See the {@link java.util.concurrent.atomic} package specification for description
                  of the properties of atomic variables.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <V>
                      The type of object referred to by this reference                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="12"/>
            <declaration name="unsafe" type="Unsafe" line="13"/>
            <declaration name="valueOffset" type="long" line="14"/>
            <scope line="15">
                <scope line="16"/>
                <scope line="19"/>
            </scope>
            <declaration name="value" type="V" line="23"/>
            <javadoc line="24">
                Creates a new AtomicReference with the given initial value.                
                <param>
                    initialValue the initial value                    
                </param>
            </javadoc>
            <method name="AtomicReference" type="constructor" line="28">
                <params>
                    <param name="initialValue" type="V"/>
                </params>
            </method>
            <javadoc line="31">
                Creates a new AtomicReference with null initial value.                
            </javadoc>
            <method name="AtomicReference" type="constructor" line="34"/>
            <javadoc line="36">
                Gets the current value.                
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="V" line="40"/>
            <javadoc line="43">
                Sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="47">
                <params>
                    <param name="newValue" type="V"/>
                </params>
            </method>
            <javadoc line="50">
                Eventually sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="55">
                <params>
                    <param name="newValue" type="V"/>
                </params>
            </method>
            <javadoc line="58">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="66">
                <params>
                    <param name="expect" type="V"/>
                    <param name="update" type="V"/>
                </params>
            </method>
            <javadoc line="69">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="79">
                <params>
                    <param name="expect" type="V"/>
                    <param name="update" type="V"/>
                </params>
            </method>
            <javadoc line="82">
                Atomically sets to the given value and returns the old value.                
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="V" line="87">
                <params>
                    <param name="newValue" type="V"/>
                </params>
                <scope line="88">
                    <declaration name="x" type="V" line="89"/>
                </scope>
            </method>
            <javadoc line="93">
                Returns the String representation of the current value.                
                <return>
                    the String representation of the current value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="97"/>
        </class>
    </source>