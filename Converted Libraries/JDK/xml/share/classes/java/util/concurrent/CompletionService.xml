<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <interface name="CompletionService">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <javadoc line="2">
                A service that decouples the production of new asynchronous tasks
                  from the consumption of the results of completed tasks.  Producers
                  &lt;tt&gt;submit&lt;/tt&gt; tasks for execution. Consumers &lt;tt&gt;take&lt;/tt&gt;
                  completed tasks and process their results in the order they
                  complete.  A &lt;tt&gt;CompletionService&lt;/tt&gt; can for example be used to
                  manage asynchronous IO, in which tasks that perform reads are
                  submitted in one part of a program or system, and then acted upon
                  in a different part of the program when the reads complete,
                  possibly in a different order than they were requested.
                  &lt;p&gt;Typically, a &lt;tt&gt;CompletionService&lt;/tt&gt; relies on a separate{@link Executor} to actually execute the tasks, in which case the
                  &lt;tt&gt;CompletionService&lt;/tt&gt; only manages an internal completion
                  queue. The {@link ExecutorCompletionService} class provides an
                  implementation of this approach.
                  &lt;p&gt;Memory consistency effects: Actions in a thread prior to
                  submitting a task to a {@code CompletionService}&lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  actions taken by that task, which in turn &lt;i&gt;happen-before&lt;/i&gt;
                  actions following a successful return from the corresponding {@code take()}.                
            </javadoc>
            <method name="submit" type="Future&lt;V&gt;" line="22"/>
            <javadoc line="22">
                Submits a value-returning task for execution and returns a Future
                  representing the pending results of the task.  Upon completion,
                  this task may be taken or polled.                
                <param>
                    task the task to submit                    
                </param>
                <return>
                    a Future representing pending completion of the task                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if the task is null                    
                </throws>
            </javadoc>
            <method name="submit" type="Future&lt;V&gt;" line="33"/>
            <javadoc line="33">
                Submits a Runnable task for execution and returns a Future
                  representing that task.  Upon completion, this task may be
                  taken or polled.                
                <param>
                    task the task to submit                    
                </param>
                <param>
                    result the result to return upon successful completion                    
                </param>
                <return>
                    a Future representing pending completion of the task,
                      and whose &lt;tt&gt;get()&lt;/tt&gt; method will return the given
                      result value upon completion                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if the task is null                    
                </throws>
            </javadoc>
            <method name="take" type="Future&lt;V&gt;" line="47"/>
            <javadoc line="47">
                Retrieves and removes the Future representing the next
                  completed task, waiting if none are yet present.                
                <return>
                    the Future representing the next completed task                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="poll" type="Future&lt;V&gt;" line="54"/>
            <javadoc line="54">
                Retrieves and removes the Future representing the next
                  completed task or &lt;tt&gt;null&lt;/tt&gt; if none are present.                
                <return>
                    the Future representing the next completed task, or
                      &lt;tt&gt;null&lt;/tt&gt; if none are present                    
                </return>
            </javadoc>
            <method name="poll" type="Future&lt;V&gt;" line="61"/>
            <javadoc line="61">
                Retrieves and removes the Future representing the next
                  completed task, waiting if necessary up to the specified wait
                  time if none are yet present.                
                <param>
                    timeout how long to wait before giving up, in units of
                      &lt;tt&gt;unit&lt;/tt&gt;                    
                </param>
                <param>
                    unit a &lt;tt&gt;TimeUnit&lt;/tt&gt; determining how to interpret the
                      &lt;tt&gt;timeout&lt;/tt&gt; parameter                    
                </param>
                <return>
                    the Future representing the next completed task or
                      &lt;tt&gt;null&lt;/tt&gt; if the specified waiting time elapses
                      before one is present                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
        </interface>
    </source>