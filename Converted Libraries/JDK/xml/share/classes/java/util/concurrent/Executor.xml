<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <interface name="Executor">
            <javadoc line="2">
                An object that executes submitted {@link Runnable} tasks. This
                  interface provides a way of decoupling task submission from the
                  mechanics of how each task will be run, including details of thread
                  use, scheduling, etc.  An &lt;tt&gt;Executor&lt;/tt&gt; is normally used
                  instead of explicitly creating threads. For example, rather than
                  invoking &lt;tt&gt;new Thread(new(RunnableTask())).start()&lt;/tt&gt; for each
                  of a set of tasks, you might use:
                  &lt;pre&gt;
                  Executor executor = &lt;em&gt;anExecutor&lt;/em&gt;;
                  executor.execute(new RunnableTask1());
                  executor.execute(new RunnableTask2());
                  ...
                  &lt;/pre&gt;
                  However, the &lt;tt&gt;Executor&lt;/tt&gt; interface does not strictly
                  require that execution be asynchronous. In the simplest case, an
                  executor can run the submitted task immediately in the caller&apos;s
                  thread:
                  &lt;pre&gt;
                  class DirectExecutor implements Executor {
                  public void execute(Runnable r) {
                  r.run();
                  }
                  }&lt;/pre&gt;
                  More typically, tasks are executed in some thread other
                  than the caller&apos;s thread.  The executor below spawns a new thread
                  for each task.
                  &lt;pre&gt;
                  class ThreadPerTaskExecutor implements Executor {
                  public void execute(Runnable r) {
                  new Thread(r).start();
                  }
                  }&lt;/pre&gt;
                  Many &lt;tt&gt;Executor&lt;/tt&gt; implementations impose some sort of
                  limitation on how and when tasks are scheduled.  The executor below
                  serializes the submission of tasks to a second executor,
                  illustrating a composite executor.
                  &lt;pre&gt; {@code}class SerialExecutor implements Executor 
                  final Queue&lt;Runnable&gt; tasks = new ArrayDeque&lt;Runnable&gt;();
                  final Executor executor;
                  Runnable active;
                  SerialExecutor(Executor executor) {
                  this.executor = executor;
                  }
                  public synchronized void execute(final Runnable r) {
                  tasks.offer(new Runnable() {
                  public void run() {
                  try {
                  r.run();
                  } finally {
                  scheduleNext();
                  }
                  }
                  });
                  if (active == null) {
                  scheduleNext();
                  }
                  }
                  protected synchronized void scheduleNext() {
                  if ((active = tasks.poll()) != null) {
                  executor.execute(active);
                  }
                  }
                  }}&lt;/pre&gt;
                  The &lt;tt&gt;Executor&lt;/tt&gt; implementations provided in this package
                  implement {@link ExecutorService}, which is a more extensive
                  interface.  The {@link ThreadPoolExecutor} class provides an
                  extensible thread pool implementation. The {@link Executors} class
                  provides convenient factory methods for these Executors.
                  &lt;p&gt;Memory consistency effects: Actions in a thread prior to
                  submitting a {@code Runnable} object to an {@code Executor}&lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  its execution begins, perhaps in another thread.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <method name="execute" type="void" line="78"/>
            <javadoc line="78">
                Executes the given command at some time in the future.  The command
                  may execute in a new thread, in a pooled thread, or in the calling
                  thread, at the discretion of the &lt;tt&gt;Executor&lt;/tt&gt; implementation.                
                <param>
                    command the runnable task                    
                </param>
                <throws>
                    RejectedExecutionException if this task cannot be
                      accepted for execution.                    
                </throws>
                <throws>
                    NullPointerException if command is null                    
                </throws>
            </javadoc>
        </interface>
    </source>