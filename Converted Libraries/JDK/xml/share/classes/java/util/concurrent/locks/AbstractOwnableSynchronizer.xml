<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.locks">
        <class name="AbstractOwnableSynchronizer" line="2">
            <implements interface="java.io.Serializable"/>
            <javadoc line="2">
                A synchronizer that may be exclusively owned by a thread.  This
                  class provides a basis for creating locks and related synchronizers
                  that may entail a notion of ownership.  The
                  &lt;tt&gt;AbstractOwnableSynchronizer&lt;/tt&gt; class itself does not manage or
                  use this information. However, subclasses and tools may use
                  appropriately maintained values to help control and monitor access
                  and provide diagnostics.                
                <since>
                    1.6                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="14"/>
            <javadoc line="14">
                Use serial ID even though all fields transient.                
            </javadoc>
            <javadoc line="18">
                Empty constructor for use by subclasses.                
            </javadoc>
            <method name="AbstractOwnableSynchronizer" type="constructor" line="21"/>
            <declaration name="exclusiveOwnerThread" type="Thread" line="23"/>
            <javadoc line="23">
                The current owner of exclusive mode synchronization.                
            </javadoc>
            <javadoc line="27">
                Sets the thread that currently owns exclusive access. A
                  &lt;tt&gt;null&lt;/tt&gt; argument indicates that no thread owns access.
                  This method does not otherwise impose any synchronization or
                  &lt;tt&gt;volatile&lt;/tt&gt; field accesses.                
            </javadoc>
            <method name="setExclusiveOwnerThread" type="void" line="33">
                <params>
                    <param name="t" type="Thread"/>
                </params>
            </method>
            <javadoc line="36">
                Returns the thread last set by
                  &lt;tt&gt;setExclusiveOwnerThread&lt;/tt&gt;, or &lt;tt&gt;null&lt;/tt&gt; if never
                  set.  This method does not otherwise impose any synchronization
                  or &lt;tt&gt;volatile&lt;/tt&gt; field accesses.                
                <return>
                    the owner thread                    
                </return>
            </javadoc>
            <method name="getExclusiveOwnerThread" type="Thread" line="43"/>
        </class>
    </source>