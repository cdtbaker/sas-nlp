<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.Random"/>
        <class name="ThreadLocalRandom" line="40">
            <extends class="Random"/>
            <comment line="66">
                same constants as Random, but must be redeclared because private                
            </comment>
            <comment line="84">
                Padding to help avoid memory contention among seed updates in
                 different TLRs in the common case that they are located near
                 each other.                
            </comment>
            <javadoc line="40">
                A random number generator isolated to the current thread.  Like the
                  global {@link java.util.Random} generator used by the {@link java.lang.Math} class, a {@code ThreadLocalRandom} is initialized
                  with an internally generated seed that may not otherwise be
                  modified. When applicable, use of {@code ThreadLocalRandom} rather
                  than shared {@code Random} objects in concurrent programs will
                  typically encounter much less overhead and contention.  Use of{@code ThreadLocalRandom} is particularly appropriate when multiple
                  tasks (for example, each a {@link ForkJoinTask}) use random numbers
                  in parallel in thread pools.
                  &lt;p&gt;Usages of this class should typically be of the form:{@code ThreadLocalRandom.current().nextX(...)} (where{@code X} is {@code Int}, {@code Long}, etc).
                  When all usages are of this form, it is never possible to
                  accidently share a {@code ThreadLocalRandom} across multiple threads.
                  &lt;p&gt;This class also provides additional commonly used bounded random
                  generation methods.                
                <since>
                    1.7                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="multiplier" type="long" line="66"/>
            <declaration name="addend" type="long" line="67"/>
            <declaration name="mask" type="long" line="68"/>
            <declaration name="rnd" type="long" line="70"/>
            <javadoc line="70">
                The random seed. We can&apos;t use super.seed.                
            </javadoc>
            <declaration name="initialized" type="boolean" line="75"/>
            <javadoc line="75">
                Initialization flag to permit calls to setSeed to succeed only
                  while executing the Random constructor.  We can&apos;t allow others
                  since it would cause setting seed in one part of a program to
                  unintentionally impact other usages by the thread.                
            </javadoc>
            <declaration name="pad0" type="long" line="86"/>
            <declaration name="localRandom" type="ThreadLocal&lt;ThreadLocalRandom&gt;" line="88"/>
            <javadoc line="88">
                The actual ThreadLocal                
            </javadoc>
            <anonymous_class line="92">
                <method name="initialValue" type="ThreadLocalRandom" line="93"/>
            </anonymous_class>
            <javadoc line="99">
                Constructor called only by localRandom.initialValue.                
            </javadoc>
            <method name="ThreadLocalRandom" type="constructor" line="102"/>
            <javadoc line="107">
                Returns the current thread&apos;s {@code ThreadLocalRandom}.                
                <return>
                    the current thread's {@code ThreadLocalRandom}                    
                </return>
            </javadoc>
            <method name="current" type="ThreadLocalRandom" line="112"/>
            <javadoc line="116">
                Throws {@code UnsupportedOperationException}.  Setting seeds in
                  this generator is not supported.                
                <throws>
                    UnsupportedOperationException always                    
                </throws>
            </javadoc>
            <method name="setSeed" type="void" line="122">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <method name="next" type="int" line="128">
                <params>
                    <param name="bits" type="int"/>
                </params>
            </method>
            <javadoc line="133">
                Returns a pseudorandom, uniformly distributed value between the
                  given least value (inclusive) and bound (exclusive).                
                <param>
                    least the least value returned                    
                </param>
                <param>
                    bound the upper bound (exclusive)                    
                </param>
                <throws>
                    IllegalArgumentException if least greater than or equal
                      to bound                    
                </throws>
                <return>
                    the next value                    
                </return>
            </javadoc>
            <method name="nextInt" type="int" line="143">
                <params>
                    <param name="least" type="int"/>
                    <param name="bound" type="int"/>
                </params>
            </method>
            <javadoc line="149">
                Returns a pseudorandom, uniformly distributed value
                  between 0 (inclusive) and the specified value (exclusive).                
                <param>
                    n the bound on the random number to be returned.  Must be
                      positive.                    
                </param>
                <return>
                    the next value                    
                </return>
                <throws>
                    IllegalArgumentException if n is not positive                    
                </throws>
            </javadoc>
            <method name="nextLong" type="long" line="158">
                <params>
                    <param name="n" type="long"/>
                </params>
                <comment line="162">
                    Divide n by two until small enough for nextInt. On each
                     iteration (at most 31 of them but usually much less),
                     randomly choose both whether to include high bit in result
                     (offset) and whether to continue with the lower vs upper
                     half (which makes a difference only if odd).                    
                </comment>
                <declaration name="offset" type="long" line="166"/>
                <scope line="167">
                    <declaration name="bits" type="int" line="168"/>
                    <declaration name="half" type="long" line="169"/>
                    <declaration name="nextn" type="long" line="170"/>
                </scope>
            </method>
            <javadoc line="178">
                Returns a pseudorandom, uniformly distributed value between the
                  given least value (inclusive) and bound (exclusive).                
                <param>
                    least the least value returned                    
                </param>
                <param>
                    bound the upper bound (exclusive)                    
                </param>
                <return>
                    the next value                    
                </return>
                <throws>
                    IllegalArgumentException if least greater than or equal
                      to bound                    
                </throws>
            </javadoc>
            <method name="nextLong" type="long" line="188">
                <params>
                    <param name="least" type="long"/>
                    <param name="bound" type="long"/>
                </params>
            </method>
            <javadoc line="194">
                Returns a pseudorandom, uniformly distributed {@code double} value
                  between 0 (inclusive) and the specified value (exclusive).                
                <param>
                    n the bound on the random number to be returned.  Must be
                      positive.                    
                </param>
                <return>
                    the next value                    
                </return>
                <throws>
                    IllegalArgumentException if n is not positive                    
                </throws>
            </javadoc>
            <method name="nextDouble" type="double" line="203">
                <params>
                    <param name="n" type="double"/>
                </params>
            </method>
            <javadoc line="209">
                Returns a pseudorandom, uniformly distributed value between the
                  given least value (inclusive) and bound (exclusive).                
                <param>
                    least the least value returned                    
                </param>
                <param>
                    bound the upper bound (exclusive)                    
                </param>
                <return>
                    the next value                    
                </return>
                <throws>
                    IllegalArgumentException if least greater than or equal
                      to bound                    
                </throws>
            </javadoc>
            <method name="nextDouble" type="double" line="219">
                <params>
                    <param name="least" type="double"/>
                    <param name="bound" type="double"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="225"/>
        </class>
    </source>