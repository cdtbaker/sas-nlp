<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.Random"/>
        <class name="ThreadLocalRandom" line="3">
            <extends class="Random"/>
            <javadoc line="3">
                A random number generator isolated to the current thread.  Like the
                  global {@link java.util.Random} generator used by the {@link java.lang.Math} class, a {@code ThreadLocalRandom} is initialized
                  with an internally generated seed that may not otherwise be
                  modified. When applicable, use of {@code ThreadLocalRandom} rather
                  than shared {@code Random} objects in concurrent programs will
                  typically encounter much less overhead and contention.  Use of{@code ThreadLocalRandom} is particularly appropriate when multiple
                  tasks (for example, each a {@link ForkJoinTask}) use random numbers
                  in parallel in thread pools.
                  &lt;p&gt;Usages of this class should typically be of the form:{@code ThreadLocalRandom.current().nextX(...)} (where{@code X} is {@code Int}, {@code Long}, etc).
                  When all usages are of this form, it is never possible to
                  accidently share a {@code ThreadLocalRandom} across multiple threads.
                  &lt;p&gt;This class also provides additional commonly used bounded random
                  generation methods.                
                <since>
                    1.7                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="multiplier" type="long" line="21"/>
            <declaration name="addend" type="long" line="22"/>
            <declaration name="mask" type="long" line="23"/>
            <declaration name="rnd" type="long" line="24"/>
            <javadoc line="24">
                The random seed. We can&apos;t use super.seed.                
            </javadoc>
            <declaration name="initialized" type="boolean" line="28"/>
            <javadoc line="28">
                Initialization flag to permit calls to setSeed to succeed only
                  while executing the Random constructor.  We can&apos;t allow others
                  since it would cause setting seed in one part of a program to
                  unintentionally impact other usages by the thread.                
            </javadoc>
            <declaration name="pad0" type="long" line="35"/>
            <declaration name="localRandom" type="ThreadLocal&lt;ThreadLocalRandom&gt;" line="36"/>
            <javadoc line="36">
                The actual ThreadLocal                
            </javadoc>
            <anonymous_class line="39">
                <method name="initialValue" type="ThreadLocalRandom" line="40"/>
            </anonymous_class>
            <javadoc line="45">
                Constructor called only by localRandom.initialValue.                
            </javadoc>
            <method name="ThreadLocalRandom" type="constructor" line="48"/>
            <javadoc line="52">
                Returns the current thread&apos;s {@code ThreadLocalRandom}.                
                <return>
                    the current thread's {@code ThreadLocalRandom}                    
                </return>
            </javadoc>
            <method name="current" type="ThreadLocalRandom" line="56"/>
            <javadoc line="59">
                Throws {@code UnsupportedOperationException}.  Setting seeds in
                  this generator is not supported.                
                <throws>
                    UnsupportedOperationException always                    
                </throws>
            </javadoc>
            <method name="setSeed" type="void" line="64">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <method name="next" type="int" line="68">
                <params>
                    <param name="bits" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Returns a pseudorandom, uniformly distributed value between the
                  given least value (inclusive) and bound (exclusive).                
                <param>
                    least the least value returned                    
                </param>
                <param>
                    bound the upper bound (exclusive)                    
                </param>
                <throws>
                    IllegalArgumentException if least greater than or equal
                      to bound                    
                </throws>
                <return>
                    the next value                    
                </return>
            </javadoc>
            <method name="nextInt" type="int" line="81">
                <params>
                    <param name="least" type="int"/>
                    <param name="bound" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Returns a pseudorandom, uniformly distributed value
                  between 0 (inclusive) and the specified value (exclusive).                
                <param>
                    n the bound on the random number to be returned.  Must be
                      positive.                    
                </param>
                <return>
                    the next value                    
                </return>
                <throws>
                    IllegalArgumentException if n is not positive                    
                </throws>
            </javadoc>
            <method name="nextLong" type="long" line="93">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="offset" type="long" line="95"/>
                <scope line="96">
                    <declaration name="bits" type="int" line="97"/>
                    <declaration name="half" type="long" line="98"/>
                    <declaration name="nextn" type="long" line="99"/>
                </scope>
            </method>
            <javadoc line="105">
                Returns a pseudorandom, uniformly distributed value between the
                  given least value (inclusive) and bound (exclusive).                
                <param>
                    least the least value returned                    
                </param>
                <param>
                    bound the upper bound (exclusive)                    
                </param>
                <return>
                    the next value                    
                </return>
                <throws>
                    IllegalArgumentException if least greater than or equal
                      to bound                    
                </throws>
            </javadoc>
            <method name="nextLong" type="long" line="114">
                <params>
                    <param name="least" type="long"/>
                    <param name="bound" type="long"/>
                </params>
            </method>
            <javadoc line="118">
                Returns a pseudorandom, uniformly distributed {@code double} value
                  between 0 (inclusive) and the specified value (exclusive).                
                <param>
                    n the bound on the random number to be returned.  Must be
                      positive.                    
                </param>
                <return>
                    the next value                    
                </return>
                <throws>
                    IllegalArgumentException if n is not positive                    
                </throws>
            </javadoc>
            <method name="nextDouble" type="double" line="126">
                <params>
                    <param name="n" type="double"/>
                </params>
            </method>
            <javadoc line="130">
                Returns a pseudorandom, uniformly distributed value between the
                  given least value (inclusive) and bound (exclusive).                
                <param>
                    least the least value returned                    
                </param>
                <param>
                    bound the upper bound (exclusive)                    
                </param>
                <return>
                    the next value                    
                </return>
                <throws>
                    IllegalArgumentException if least greater than or equal
                      to bound                    
                </throws>
            </javadoc>
            <method name="nextDouble" type="double" line="139">
                <params>
                    <param name="least" type="double"/>
                    <param name="bound" type="double"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="143"/>
        </class>
    </source>