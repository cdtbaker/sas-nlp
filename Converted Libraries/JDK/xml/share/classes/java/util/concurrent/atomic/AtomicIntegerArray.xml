<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <import package="java.util"/>
        <class name="AtomicIntegerArray" line="4">
            <implements interface="java.io.Serializable"/>
            <javadoc line="4">
                An {@code int} array in which elements may be updated atomically.
                  See the {@link java.util.concurrent.atomic} package
                  specification for description of the properties of atomic
                  variables.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="13"/>
            <declaration name="unsafe" type="Unsafe" line="14"/>
            <declaration name="base" type="int" line="15"/>
            <declaration name="shift" type="int" line="16"/>
            <declaration name="array" type="int[]" line="17"/>
            <scope line="18">
                <declaration name="scale" type="int" line="19"/>
            </scope>
            <method name="checkedByteOffset" type="long" line="23">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="byteOffset" type="long" line="27">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="30">
                Creates a new AtomicIntegerArray of the given length, with all
                  elements initially zero.                
                <param>
                    length the length of the array                    
                </param>
            </javadoc>
            <method name="AtomicIntegerArray" type="constructor" line="35">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="38">
                Creates a new AtomicIntegerArray with the same length as, and
                  all elements copied from, the given array.                
                <param>
                    array the array to copy elements from                    
                </param>
                <throws>
                    NullPointerException if array is null                    
                </throws>
            </javadoc>
            <method name="AtomicIntegerArray" type="constructor" line="44">
                <params>
                    <param name="array" type="int[]"/>
                </params>
            </method>
            <javadoc line="47">
                Returns the length of the array.                
                <return>
                    the length of the array                    
                </return>
            </javadoc>
            <method name="length" type="int" line="51"/>
            <javadoc line="54">
                Gets the current value at position {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="int" line="59">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getRaw" type="int" line="62">
                <params>
                    <param name="offset" type="long"/>
                </params>
            </method>
            <javadoc line="65">
                Sets the element at position {@code i} to the given value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="70">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Eventually sets the element at position {@code i} to the given value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="79">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="82">
                Atomically sets the element at position {@code i} to the given
                  value and returns the old value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="int" line="89">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
                <declaration name="offset" type="long" line="90"/>
                <scope line="91">
                    <declaration name="current" type="int" line="92"/>
                </scope>
            </method>
            <javadoc line="96">
                Atomically sets the element at position {@code i} to the given
                  updated value if the current value {@code ==} the expected value.                
                <param>
                    i the index                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="105">
                <params>
                    <param name="i" type="int"/>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <method name="compareAndSetRaw" type="boolean" line="108">
                <params>
                    <param name="offset" type="long"/>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <javadoc line="111">
                Atomically sets the element at position {@code i} to the given
                  updated value if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    i the index                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="122">
                <params>
                    <param name="i" type="int"/>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <javadoc line="125">
                Atomically increments by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndIncrement" type="int" line="130">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="133">
                Atomically decrements by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndDecrement" type="int" line="138">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="141">
                Atomically adds the given value to the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndAdd" type="int" line="147">
                <params>
                    <param name="i" type="int"/>
                    <param name="delta" type="int"/>
                </params>
                <declaration name="offset" type="long" line="148"/>
                <scope line="149">
                    <declaration name="current" type="int" line="150"/>
                </scope>
            </method>
            <javadoc line="154">
                Atomically increments by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="incrementAndGet" type="int" line="159">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="162">
                Atomically decrements by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="decrementAndGet" type="int" line="167">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="170">
                Atomically adds the given value to the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="addAndGet" type="int" line="176">
                <params>
                    <param name="i" type="int"/>
                    <param name="delta" type="int"/>
                </params>
                <declaration name="offset" type="long" line="177"/>
                <scope line="178">
                    <declaration name="current" type="int" line="179"/>
                    <declaration name="next" type="int" line="180"/>
                </scope>
            </method>
            <javadoc line="184">
                Returns the String representation of the current values of array.                
                <return>
                    the String representation of the current values of array                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="188">
                <declaration name="iMax" type="int" line="189"/>
                <declaration name="b" type="StringBuilder" line="191"/>
                <scope line="193"/>
            </method>
        </class>
    </source>