<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <import package="java.util"/>
        <class name="AtomicIntegerArray" line="40">
            <implements interface="java.io.Serializable"/>
            <javadoc line="40">
                An {@code int} array in which elements may be updated atomically.
                  See the {@link java.util.concurrent.atomic} package
                  specification for description of the properties of atomic
                  variables.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <declaration name="unsafe" type="Unsafe" line="51"/>
            <declaration name="base" type="int" line="52"/>
            <declaration name="shift" type="int" line="53"/>
            <declaration name="array" type="int[]" line="54"/>
            <scope line="56">
                <declaration name="scale" type="int" line="57"/>
            </scope>
            <method name="checkedByteOffset" type="long" line="63">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="byteOffset" type="long" line="70">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                Creates a new AtomicIntegerArray of the given length, with all
                  elements initially zero.                
                <param>
                    length the length of the array                    
                </param>
            </javadoc>
            <method name="AtomicIntegerArray" type="constructor" line="80">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Creates a new AtomicIntegerArray with the same length as, and
                  all elements copied from, the given array.                
                <param>
                    array the array to copy elements from                    
                </param>
                <throws>
                    NullPointerException if array is null                    
                </throws>
            </javadoc>
            <method name="AtomicIntegerArray" type="constructor" line="91">
                <params>
                    <param name="array" type="int[]"/>
                </params>
                <comment line="93">
                    Visibility guaranteed by final field guarantees                    
                </comment>
            </method>
            <javadoc line="96">
                Returns the length of the array.                
                <return>
                    the length of the array                    
                </return>
            </javadoc>
            <method name="length" type="int" line="101"/>
            <javadoc line="105">
                Gets the current value at position {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="int" line="111">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getRaw" type="int" line="115">
                <params>
                    <param name="offset" type="long"/>
                </params>
            </method>
            <javadoc line="119">
                Sets the element at position {@code i} to the given value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="125">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="129">
                Eventually sets the element at position {@code i} to the given value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="136">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                Atomically sets the element at position {@code i} to the given
                  value and returns the old value.                
                <param>
                    i the index                    
                </param>
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="int" line="148">
                <params>
                    <param name="i" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
                <declaration name="offset" type="long" line="149"/>
                <scope line="150">
                    <declaration name="current" type="int" line="151"/>
                </scope>
            </method>
            <javadoc line="157">
                Atomically sets the element at position {@code i} to the given
                  updated value if the current value {@code ==} the expected value.                
                <param>
                    i the index                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="167">
                <params>
                    <param name="i" type="int"/>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <method name="compareAndSetRaw" type="boolean" line="171">
                <params>
                    <param name="offset" type="long"/>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <javadoc line="175">
                Atomically sets the element at position {@code i} to the given
                  updated value if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    i the index                    
                </param>
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="188">
                <params>
                    <param name="i" type="int"/>
                    <param name="expect" type="int"/>
                    <param name="update" type="int"/>
                </params>
            </method>
            <javadoc line="192">
                Atomically increments by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndIncrement" type="int" line="198">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="202">
                Atomically decrements by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndDecrement" type="int" line="208">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="212">
                Atomically adds the given value to the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndAdd" type="int" line="219">
                <params>
                    <param name="i" type="int"/>
                    <param name="delta" type="int"/>
                </params>
                <declaration name="offset" type="long" line="220"/>
                <scope line="221">
                    <declaration name="current" type="int" line="222"/>
                </scope>
            </method>
            <javadoc line="228">
                Atomically increments by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="incrementAndGet" type="int" line="234">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="238">
                Atomically decrements by one the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="decrementAndGet" type="int" line="244">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="248">
                Atomically adds the given value to the element at index {@code i}.                
                <param>
                    i the index                    
                </param>
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="addAndGet" type="int" line="255">
                <params>
                    <param name="i" type="int"/>
                    <param name="delta" type="int"/>
                </params>
                <declaration name="offset" type="long" line="256"/>
                <scope line="257">
                    <declaration name="current" type="int" line="258"/>
                    <declaration name="next" type="int" line="259"/>
                </scope>
            </method>
            <javadoc line="265">
                Returns the String representation of the current values of array.                
                <return>
                    the String representation of the current values of array                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="269">
                <declaration name="iMax" type="int" line="270"/>
                <declaration name="b" type="StringBuilder" line="274"/>
                <scope line="276"/>
            </method>
        </class>
    </source>