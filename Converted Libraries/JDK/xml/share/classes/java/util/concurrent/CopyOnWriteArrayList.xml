<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util"/>
        <import package="java.util.concurrent.locks"/>
        <import package="sun.misc.Unsafe"/>
        <class name="CopyOnWriteArrayList" line="5">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="List">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="RandomAccess"/>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="5">
                A thread-safe variant of {@link java.util.ArrayList} in which all mutative
                  operations (&lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, and so on) are implemented by
                  making a fresh copy of the underlying array.
                  &lt;p&gt; This is ordinarily too costly, but may be &lt;em&gt;more&lt;/em&gt; efficient
                  than alternatives when traversal operations vastly outnumber
                  mutations, and is useful when you cannot or don&apos;t want to
                  synchronize traversals, yet need to preclude interference among
                  concurrent threads.  The &quot;snapshot&quot; style iterator method uses a
                  reference to the state of the array at the point that the iterator
                  was created. This array never changes during the lifetime of the
                  iterator, so interference is impossible and the iterator is
                  guaranteed not to throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt;.
                  The iterator will not reflect additions, removals, or changes to
                  the list since the iterator was created.  Element-changing
                  operations on iterators themselves (&lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, and
                  &lt;tt&gt;add&lt;/tt&gt;) are not supported. These methods throw
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;.
                  &lt;p&gt;All elements are permitted, including &lt;tt&gt;null&lt;/tt&gt;.
                  &lt;p&gt;Memory consistency effects: As with other concurrent
                  collections, actions in a thread prior to placing an object into a{@code CopyOnWriteArrayList}&lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  actions subsequent to the access or removal of that element from
                  the {@code CopyOnWriteArrayList} in another thread.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <E>
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="37"/>
            <declaration name="lock" type="ReentrantLock" line="38"/>
            <javadoc line="38">
                The lock protecting all mutators                
            </javadoc>
            <declaration name="array" type="Object[]" line="42"/>
            <javadoc line="42">
                The array, accessed only via getArray/setArray.                
            </javadoc>
            <javadoc line="46">
                Gets the array.  Non-private so as to also be accessible
                  from CopyOnWriteArraySet class.                
            </javadoc>
            <method name="getArray" type="Object[]" line="50"/>
            <javadoc line="53">
                Sets the array.                
            </javadoc>
            <method name="setArray" type="void" line="56">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
            </method>
            <javadoc line="59">
                Creates an empty list.                
            </javadoc>
            <method name="CopyOnWriteArrayList" type="constructor" line="62"/>
            <javadoc line="65">
                Creates a list containing the elements of the specified
                  collection, in the order they are returned by the collection&apos;s
                  iterator.                
                <param>
                    c the collection of initially held elements                    
                </param>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="CopyOnWriteArrayList" type="constructor" line="72">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="elements" type="Object[]" line="73"/>
            </method>
            <javadoc line="77">
                Creates a list holding a copy of the given array.                
                <param>
                    toCopyIn the array (a copy of this array is used as the
                      internal array)                    
                </param>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="CopyOnWriteArrayList" type="constructor" line="83">
                <params>
                    <param name="toCopyIn" type="E[]"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the number of elements in this list.                
                <return>
                    the number of elements in this list                    
                </return>
            </javadoc>
            <method name="size" type="int" line="90"/>
            <javadoc line="93">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements.                
                <return>
                    <tt>true</tt> if this list contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="97"/>
            <javadoc line="100">
                Test for equality, coping with nulls.                
            </javadoc>
            <method name="eq" type="boolean" line="103">
                <params>
                    <param name="o1" type="Object"/>
                    <param name="o2" type="Object"/>
                </params>
            </method>
            <javadoc line="106">
                static version of indexOf, to allow repeated calls without
                  needing to re-acquire array each time.                
                <param>
                    o element to search for                    
                </param>
                <param>
                    elements the array                    
                </param>
                <param>
                    index first index to search                    
                </param>
                <param>
                    fence one past last index to search                    
                </param>
                <return>
                    index of element, or -1 if absent                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="115">
                <params>
                    <param name="o" type="Object"/>
                    <param name="elements" type="Object[]"/>
                    <param name="index" type="int"/>
                    <param name="fence" type="int"/>
                </params>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <javadoc line="124">
                static version of lastIndexOf.                
                <param>
                    o element to search for                    
                </param>
                <param>
                    elements the array                    
                </param>
                <param>
                    index first index to search                    
                </param>
                <return>
                    index of element, or -1 if absent                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="131">
                <params>
                    <param name="o" type="Object"/>
                    <param name="elements" type="Object[]"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="132"/>
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this list contains
                  at least one element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this list is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this list contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="148">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="elements" type="Object[]" line="149"/>
            </method>
            <javadoc line="152">
                {@inheritDoc}                
            </javadoc>
            <method name="indexOf" type="int" line="155">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="elements" type="Object[]" line="156"/>
            </method>
            <javadoc line="159">
                Returns the index of the first occurrence of the specified element in
                  this list, searching forwards from &lt;tt&gt;index&lt;/tt&gt;, or returns -1 if
                  the element is not found.
                  More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(i&amp;nbsp;&amp;gt;=&amp;nbsp;index&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;(e==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;e.equals(get(i))))&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    e element to search for                    
                </param>
                <param>
                    index index to start searching from                    
                </param>
                <return>
                    the index of the first occurrence of the element in
                      this list at position <tt>index</tt> or later in the list;
                      <tt>-1</tt> if the element is not found.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
            </javadoc>
            <method name="indexOf" type="int" line="173">
                <params>
                    <param name="e" type="E"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="elements" type="Object[]" line="174"/>
            </method>
            <javadoc line="177">
                {@inheritDoc}                
            </javadoc>
            <method name="lastIndexOf" type="int" line="180">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="elements" type="Object[]" line="181"/>
            </method>
            <javadoc line="184">
                Returns the index of the last occurrence of the specified element in
                  this list, searching backwards from &lt;tt&gt;index&lt;/tt&gt;, or returns -1 if
                  the element is not found.
                  More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(i&amp;nbsp;&amp;lt;=&amp;nbsp;index&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;(e==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;e.equals(get(i))))&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    e element to search for                    
                </param>
                <param>
                    index index to start searching backwards from                    
                </param>
                <return>
                    the index of the last occurrence of the element at position
                      less than or equal to <tt>index</tt> in this list;
                      -1 if the element is not found.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is greater
                      than or equal to the current size of this list                    
                </throws>
            </javadoc>
            <method name="lastIndexOf" type="int" line="199">
                <params>
                    <param name="e" type="E"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="elements" type="Object[]" line="200"/>
            </method>
            <javadoc line="203">
                Returns a shallow copy of this list.  (The elements themselves
                  are not copied.)                
                <return>
                    a clone of this list                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="208">
                <scope line="209">
                    <declaration name="c" type="CopyOnWriteArrayList" line="210"/>
                </scope>
                <scope line="214"/>
            </method>
            <javadoc line="218">
                Returns an array containing all of the elements in this list
                  in proper sequence (from first to last element).
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this list.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all the elements in this list                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="228">
                <declaration name="elements" type="Object[]" line="229"/>
            </method>
            <javadoc line="232">
                Returns an array containing all of the elements in this list in
                  proper sequence (from first to last element); the runtime type of
                  the returned array is that of the specified array.  If the list fits
                  in the specified array, it is returned therein.  Otherwise, a new
                  array is allocated with the runtime type of the specified array and
                  the size of this list.
                  &lt;p&gt;If this list fits in the specified array with room to spare
                  (i.e., the array has more elements than this list), the element in
                  the array immediately following the end of the list is set to
                  &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of this
                  list &lt;i&gt;only&lt;/i&gt; if the caller knows that this list does not contain
                  any null elements.)
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a list known to contain only strings.
                  The following code can be used to dump the list into a newly
                  allocated array of &lt;tt&gt;String&lt;/tt&gt;:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of the list are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing all the elements in this list                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this list                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="265">
                <params>
                    <param name="a" type="T"/>
                </params>
                <declaration name="elements" type="Object[]" line="266"/>
                <declaration name="len" type="int" line="267"/>
                <scope line="269"/>
            </method>
            <method name="get" type="E" line="275">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="278">
                {@inheritDoc}                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="get" type="E" line="282">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="285">
                Replaces the element at the specified position in this list with the
                  specified element.                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="set" type="E" line="290">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="291"/>
                <scope line="293">
                    <declaration name="elements" type="Object[]" line="294"/>
                    <declaration name="oldValue" type="E" line="295"/>
                    <scope line="296">
                        <declaration name="len" type="int" line="297"/>
                        <declaration name="newElements" type="Object[]" line="298"/>
                    </scope>
                    <scope line="302"/>
                </scope>
                <scope line="307"/>
            </method>
            <javadoc line="311">
                Appends the specified element to the end of this list.                
                <param>
                    e element to be appended to this list                    
                </param>
                <return>
                    <tt>true</tt> (as specified by {@link Collection#add})                    
                </return>
            </javadoc>
            <method name="add" type="boolean" line="316">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="317"/>
                <scope line="319">
                    <declaration name="elements" type="Object[]" line="320"/>
                    <declaration name="len" type="int" line="321"/>
                    <declaration name="newElements" type="Object[]" line="322"/>
                </scope>
                <scope line="327"/>
            </method>
            <javadoc line="331">
                Inserts the specified element at the specified position in this
                  list. Shifts the element currently at that position (if any) and
                  any subsequent elements to the right (adds one to their indices).                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="337">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="338"/>
                <scope line="340">
                    <declaration name="elements" type="Object[]" line="341"/>
                    <declaration name="len" type="int" line="342"/>
                    <declaration name="newElements" type="Object[]" line="344"/>
                    <declaration name="numMoved" type="int" line="345"/>
                    <scope line="347"/>
                </scope>
                <scope line="355"/>
            </method>
            <javadoc line="359">
                Removes the element at the specified position in this list.
                  Shifts any subsequent elements to the left (subtracts one from their
                  indices).  Returns the element that was removed from the list.                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="365">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="366"/>
                <scope line="368">
                    <declaration name="elements" type="Object[]" line="369"/>
                    <declaration name="len" type="int" line="370"/>
                    <declaration name="oldValue" type="E" line="371"/>
                    <declaration name="numMoved" type="int" line="372"/>
                    <scope line="374">
                        <declaration name="newElements" type="Object[]" line="375"/>
                    </scope>
                </scope>
                <scope line="382"/>
            </method>
            <javadoc line="386">
                Removes the first occurrence of the specified element from this list,
                  if it is present.  If this list does not contain the element, it is
                  unchanged.  More formally, removes the element with the lowest index
                  &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;
                  (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list
                  contained the specified element (or equivalently, if this list
                  changed as a result of the call).                
                <param>
                    o element to be removed from this list, if present                    
                </param>
                <return>
                    <tt>true</tt> if this list contained the specified element                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="398">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="399"/>
                <scope line="401">
                    <declaration name="elements" type="Object[]" line="402"/>
                    <declaration name="len" type="int" line="403"/>
                    <scope line="404">
                        <declaration name="newlen" type="int" line="405"/>
                        <declaration name="newElements" type="Object[]" line="406"/>
                        <scope line="407">
                            <scope line="408"/>
                        </scope>
                        <scope line="415"/>
                    </scope>
                </scope>
                <scope line="422"/>
            </method>
            <javadoc line="426">
                Removes from this list all of the elements whose index is between
                  &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, and &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.
                  Shifts any succeeding elements to the left (reduces their index).
                  This call shortens the list by &lt;tt&gt;(toIndex - fromIndex)&lt;/tt&gt; elements.
                  (If &lt;tt&gt;toIndex==fromIndex&lt;/tt&gt;, this operation has no effect.)                
                <param>
                    fromIndex index of first element to be removed                    
                </param>
                <param>
                    toIndex index after last element to be removed                    
                </param>
                <throws>
                    IndexOutOfBoundsException if fromIndex or toIndex out of range
                      ({@code{fromIndex < 0 || toIndex > size() || toIndex < fromIndex})                    
                </throws>
            </javadoc>
            <method name="removeRange" type="void" line="437">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="438"/>
                <scope line="440">
                    <declaration name="elements" type="Object[]" line="441"/>
                    <declaration name="len" type="int" line="442"/>
                    <declaration name="newlen" type="int" line="444"/>
                    <declaration name="numMoved" type="int" line="445"/>
                    <scope line="447">
                        <declaration name="newElements" type="Object[]" line="448"/>
                    </scope>
                </scope>
                <scope line="454"/>
            </method>
            <javadoc line="458">
                Append the element if not present.                
                <param>
                    e element to be added to this list, if absent                    
                </param>
                <return>
                    <tt>true</tt> if the element was added                    
                </return>
            </javadoc>
            <method name="addIfAbsent" type="boolean" line="463">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="464"/>
                <scope line="466">
                    <declaration name="elements" type="Object[]" line="467"/>
                    <declaration name="len" type="int" line="468"/>
                    <declaration name="newElements" type="Object[]" line="469"/>
                    <scope line="470"/>
                </scope>
                <scope line="478"/>
            </method>
            <javadoc line="482">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains all of the elements of the
                  specified collection.                
                <param>
                    c collection to be checked for containment in this list                    
                </param>
                <return>
                    <tt>true</tt> if this list contains all of the elements of the
                      specified collection                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="containsAll" type="boolean" line="491">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="elements" type="Object[]" line="492"/>
                <declaration name="len" type="int" line="493"/>
                <scope line="494"/>
            </method>
            <javadoc line="499">
                Removes from this list all of its elements that are contained in
                  the specified collection. This is a particularly expensive operation
                  in this class because of the need for an internal temporary array.                
                <param>
                    c collection containing elements to be removed from this list                    
                </param>
                <return>
                    <tt>true</tt> if this list changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of an element of this list
                      is incompatible with the specified collection
                      (<a href="../Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this list contains a null element and the
                      specified collection does not permit null elements
                      (<a href="../Collection.html#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
            </javadoc>
            <method name="removeAll" type="boolean" line="514">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="515"/>
                <scope line="517">
                    <declaration name="elements" type="Object[]" line="518"/>
                    <declaration name="len" type="int" line="519"/>
                    <scope line="520">
                        <declaration name="newlen" type="int" line="521"/>
                        <declaration name="temp" type="Object[]" line="522"/>
                        <scope line="523">
                            <declaration name="element" type="Object" line="524"/>
                        </scope>
                        <scope line="527"/>
                    </scope>
                </scope>
                <scope line="534"/>
            </method>
            <javadoc line="538">
                Retains only the elements in this list that are contained in the
                  specified collection.  In other words, removes from this list all of
                  its elements that are not contained in the specified collection.                
                <param>
                    c collection containing elements to be retained in this list                    
                </param>
                <return>
                    <tt>true</tt> if this list changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of an element of this list
                      is incompatible with the specified collection
                      (<a href="../Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this list contains a null element and the
                      specified collection does not permit null elements
                      (<a href="../Collection.html#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
            </javadoc>
            <method name="retainAll" type="boolean" line="553">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="554"/>
                <scope line="556">
                    <declaration name="elements" type="Object[]" line="557"/>
                    <declaration name="len" type="int" line="558"/>
                    <scope line="559">
                        <declaration name="newlen" type="int" line="560"/>
                        <declaration name="temp" type="Object[]" line="561"/>
                        <scope line="562">
                            <declaration name="element" type="Object" line="563"/>
                        </scope>
                        <scope line="566"/>
                    </scope>
                </scope>
                <scope line="573"/>
            </method>
            <javadoc line="577">
                Appends all of the elements in the specified collection that
                  are not already contained in this list, to the end of
                  this list, in the order that they are returned by the
                  specified collection&apos;s iterator.                
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    the number of elements added                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <see>
                    #addIfAbsent(Object)                    
                </see>
            </javadoc>
            <method name="addAllAbsent" type="int" line="587">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="cs" type="Object[]" line="588"/>
                <declaration name="uniq" type="Object[]" line="590"/>
                <declaration name="lock" type="ReentrantLock" line="591"/>
                <scope line="593">
                    <declaration name="elements" type="Object[]" line="594"/>
                    <declaration name="len" type="int" line="595"/>
                    <declaration name="added" type="int" line="596"/>
                    <scope line="597">
                        <declaration name="e" type="Object" line="598"/>
                    </scope>
                    <scope line="601">
                        <declaration name="newElements" type="Object[]" line="602"/>
                    </scope>
                </scope>
                <scope line="608"/>
            </method>
            <javadoc line="612">
                Removes all of the elements from this list.
                  The list will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="616">
                <declaration name="lock" type="ReentrantLock" line="617"/>
                <scope line="619"/>
                <scope line="622"/>
            </method>
            <javadoc line="626">
                Appends all of the elements in the specified collection to the end
                  of this list, in the order that they are returned by the specified
                  collection&apos;s iterator.                
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    <tt>true</tt> if this list changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <see>
                    #add(Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="635">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="cs" type="Object[]" line="636"/>
                <declaration name="lock" type="ReentrantLock" line="638"/>
                <scope line="640">
                    <declaration name="elements" type="Object[]" line="641"/>
                    <declaration name="len" type="int" line="642"/>
                    <declaration name="newElements" type="Object[]" line="643"/>
                </scope>
                <scope line="648"/>
            </method>
            <javadoc line="652">
                Inserts all of the elements in the specified collection into this
                  list, starting at the specified position.  Shifts the element
                  currently at that position (if any) and any subsequent elements to
                  the right (increases their indices).  The new elements will appear
                  in this list in the order that they are returned by the
                  specified collection&apos;s iterator.                
                <param>
                    index index at which to insert the first element
                      from the specified collection                    
                </param>
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    <tt>true</tt> if this list changed as a result of the call                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <see>
                    #add(int,Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="667">
                <params>
                    <param name="index" type="int"/>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="cs" type="Object[]" line="668"/>
                <declaration name="lock" type="ReentrantLock" line="669"/>
                <scope line="671">
                    <declaration name="elements" type="Object[]" line="672"/>
                    <declaration name="len" type="int" line="673"/>
                    <declaration name="numMoved" type="int" line="676"/>
                    <declaration name="newElements" type="Object[]" line="677"/>
                    <scope line="679"/>
                </scope>
                <scope line="688"/>
            </method>
            <javadoc line="692">
                Saves the state of the list to a stream (that is, serializes it).                
                <serialData>
                    The length of the array backing the list is emitted
                      (int), followed by all of its elements (each an Object)
                      in the proper order.                    
                </serialData>
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="writeObject" type="void" line="699">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <declaration name="elements" type="Object[]" line="701"/>
            </method>
            <javadoc line="705">
                Reconstitutes the list from a stream (that is, deserializes it).                
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="709">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <declaration name="len" type="int" line="712"/>
                <declaration name="elements" type="Object[]" line="713"/>
            </method>
            <javadoc line="717">
                Returns a string representation of this list.  The string
                  representation consists of the string representations of the list&apos;s
                  elements in the order they are returned by its iterator, enclosed in
                  square brackets (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by
                  the characters &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).  Elements are
                  converted to strings as by {@link String#valueOf(Object)}.                
                <return>
                    a string representation of this list                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="726"/>
            <javadoc line="729">
                Compares the specified object with this list for equality.
                  Returns {@code true} if the specified object is the same object
                  as this object, or if it is also a {@link List} and the sequence
                  of elements returned by an {@linkplain List#iterator() iterator}over the specified list is the same as the sequence returned by
                  an iterator over this list.  The two sequences are considered to
                  be the same if they have the same length and corresponding
                  elements at the same position in the sequence are &lt;em&gt;equal&lt;/em&gt;.
                  Two elements {@code e1} and {@code e2} are considered
                  &lt;em&gt;equal&lt;/em&gt; if {@code (e1==null ? e2==null : e1.equals(e2))}.                
                <param>
                    o the object to be compared for equality with this list                    
                </param>
                <return>
                    {@code true} if the specified object is equal to this list                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="742">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="list" type="List&lt;?&gt;" line="745"/>
                <declaration name="it" type="Iterator&lt;?&gt;" line="746"/>
                <declaration name="elements" type="Object[]" line="747"/>
                <declaration name="len" type="int" line="748"/>
            </method>
            <javadoc line="753">
                Returns the hash code value for this list.
                  &lt;p&gt;This implementation uses the definition in {@link List#hashCode}.                
                <return>
                    the hash code value for this list                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="758">
                <declaration name="hashCode" type="int" line="759"/>
                <declaration name="elements" type="Object[]" line="760"/>
                <declaration name="len" type="int" line="761"/>
                <scope line="762">
                    <declaration name="obj" type="Object" line="763"/>
                </scope>
            </method>
            <javadoc line="768">
                Returns an iterator over the elements in this list in proper sequence.
                  &lt;p&gt;The returned iterator provides a snapshot of the state of the list
                  when the iterator was constructed. No synchronization is needed while
                  traversing the iterator. The iterator does &lt;em&gt;NOT&lt;/em&gt; support the
                  &lt;tt&gt;remove&lt;/tt&gt; method.                
                <return>
                    an iterator over the elements in this list in proper sequence                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="776"/>
            <javadoc line="779">
                {@inheritDoc}&lt;p&gt;The returned iterator provides a snapshot of the state of the list
                  when the iterator was constructed. No synchronization is needed while
                  traversing the iterator. The iterator does &lt;em&gt;NOT&lt;/em&gt; support the
                  &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt; or &lt;tt&gt;add&lt;/tt&gt; methods.                
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="785"/>
            <javadoc line="788">
                {@inheritDoc}&lt;p&gt;The returned iterator provides a snapshot of the state of the list
                  when the iterator was constructed. No synchronization is needed while
                  traversing the iterator. The iterator does &lt;em&gt;NOT&lt;/em&gt; support the
                  &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt; or &lt;tt&gt;add&lt;/tt&gt; methods.                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="795">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="elements" type="Object[]" line="796"/>
                <declaration name="len" type="int" line="797"/>
            </method>
            <class name="COWIterator" line="801">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <implements interface="ListIterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="snapshot" type="Object[]" line="802"/>
                <javadoc line="802">
                    Snapshot of the array                    
                </javadoc>
                <declaration name="cursor" type="int" line="806"/>
                <javadoc line="806">
                    Index of element to be returned by subsequent call to next.                    
                </javadoc>
                <method name="COWIterator" type="constructor" line="810">
                    <params>
                        <param name="elements" type="Object[]"/>
                        <param name="initialCursor" type="int"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="814"/>
                <method name="hasPrevious" type="boolean" line="817"/>
                <method name="next" type="E" line="820"/>
                <method name="previous" type="E" line="824"/>
                <method name="nextIndex" type="int" line="828"/>
                <method name="previousIndex" type="int" line="831"/>
                <javadoc line="834">
                    Not supported. Always throws UnsupportedOperationException.                    
                    <throws>
                        UnsupportedOperationException always; <tt>remove</tt>
                          is not supported by this iterator.                        
                    </throws>
                </javadoc>
                <method name="remove" type="void" line="839"/>
                <javadoc line="842">
                    Not supported. Always throws UnsupportedOperationException.                    
                    <throws>
                        UnsupportedOperationException always; <tt>set</tt>
                          is not supported by this iterator.                        
                    </throws>
                </javadoc>
                <method name="set" type="void" line="847">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <javadoc line="850">
                    Not supported. Always throws UnsupportedOperationException.                    
                    <throws>
                        UnsupportedOperationException always; <tt>add</tt>
                          is not supported by this iterator.                        
                    </throws>
                </javadoc>
                <method name="add" type="void" line="855">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
            </class>
            <javadoc line="859">
                Returns a view of the portion of this list between
                  &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, and &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive.
                  The returned list is backed by this list, so changes in the
                  returned list are reflected in this list.
                  &lt;p&gt;The semantics of the list returned by this method become
                  undefined if the backing list (i.e., this list) is modified in
                  any way other than via the returned list.                
                <param>
                    fromIndex low endpoint (inclusive) of the subList                    
                </param>
                <param>
                    toIndex high endpoint (exclusive) of the subList                    
                </param>
                <return>
                    a view of the specified range within this list                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="subList" type="List<E>" line="872">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="873"/>
                <scope line="875">
                    <declaration name="elements" type="Object[]" line="876"/>
                    <declaration name="len" type="int" line="877"/>
                </scope>
                <scope line="881"/>
            </method>
            <class name="COWSubList" line="885">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <extends class="AbstractList">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </extends>
                <implements interface="RandomAccess"/>
                <javadoc line="885">
                    Sublist for CopyOnWriteArrayList.
                      This class extends AbstractList merely for convenience, to
                      avoid having to define addAll, etc. This doesn&apos;t hurt, but
                      is wasteful.  This class does not need or use modCount
                      mechanics in AbstractList, but does need to check for
                      concurrent modification using similar mechanics.  On each
                      operation, the array that we expect the backing list to use
                      is checked and updated.  Since we do this for all of the
                      base operations invoked by those defined in AbstractList,
                      all is well.  While inefficient, this is not worth
                      improving.  The kinds of list operations inherited from
                      AbstractList are already so slow on COW sublists that
                      adding a bit more space/time doesn&apos;t seem even noticeable.                    
                </javadoc>
                <declaration name="l" type="CopyOnWriteArrayList&lt;E&gt;" line="901"/>
                <declaration name="offset" type="int" line="902"/>
                <declaration name="size" type="int" line="903"/>
                <declaration name="expectedArray" type="Object[]" line="904"/>
                <method name="COWSubList" type="constructor" line="905">
                    <params>
                        <param name="list" type="CopyOnWriteArrayList<E>"/>
                        <param name="fromIndex" type="int"/>
                        <param name="toIndex" type="int"/>
                    </params>
                </method>
                <method name="checkForComodification" type="void" line="911"/>
                <method name="rangeCheck" type="void" line="914">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="set" type="E" line="917">
                    <params>
                        <param name="index" type="int"/>
                        <param name="element" type="E"/>
                    </params>
                    <declaration name="lock" type="ReentrantLock" line="918"/>
                    <scope line="920">
                        <declaration name="x" type="E" line="923"/>
                    </scope>
                    <scope line="927"/>
                </method>
                <method name="get" type="E" line="931">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="lock" type="ReentrantLock" line="932"/>
                    <scope line="934"/>
                    <scope line="939"/>
                </method>
                <method name="size" type="int" line="943">
                    <declaration name="lock" type="ReentrantLock" line="944"/>
                    <scope line="946"/>
                    <scope line="950"/>
                </method>
                <method name="add" type="void" line="954">
                    <params>
                        <param name="index" type="int"/>
                        <param name="element" type="E"/>
                    </params>
                    <declaration name="lock" type="ReentrantLock" line="955"/>
                    <scope line="957"/>
                    <scope line="964"/>
                </method>
                <method name="clear" type="void" line="968">
                    <declaration name="lock" type="ReentrantLock" line="969"/>
                    <scope line="971"/>
                    <scope line="977"/>
                </method>
                <method name="remove" type="E" line="981">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="lock" type="ReentrantLock" line="982"/>
                    <scope line="984">
                        <declaration name="result" type="E" line="987"/>
                    </scope>
                    <scope line="992"/>
                </method>
                <method name="remove" type="boolean" line="996">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="index" type="int" line="997"/>
                </method>
                <method name="iterator" type="Iterator<E>" line="1002">
                    <declaration name="lock" type="ReentrantLock" line="1003"/>
                    <scope line="1005"/>
                    <scope line="1009"/>
                </method>
                <method name="listIterator" type="ListIterator<E>" line="1013">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="lock" type="ReentrantLock" line="1014"/>
                    <scope line="1016"/>
                    <scope line="1021"/>
                </method>
                <method name="subList" type="List<E>" line="1025">
                    <params>
                        <param name="fromIndex" type="int"/>
                        <param name="toIndex" type="int"/>
                    </params>
                    <declaration name="lock" type="ReentrantLock" line="1026"/>
                    <scope line="1028"/>
                    <scope line="1033"/>
                </method>
            </class>
            <class name="COWSubListIterator" line="1038">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <implements interface="ListIterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="i" type="ListIterator&lt;E&gt;" line="1039"/>
                <declaration name="index" type="int" line="1040"/>
                <declaration name="offset" type="int" line="1041"/>
                <declaration name="size" type="int" line="1042"/>
                <method name="COWSubListIterator" type="constructor" line="1043">
                    <params>
                        <param name="l" type="List<E>"/>
                        <param name="index" type="int"/>
                        <param name="offset" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="1049"/>
                <method name="next" type="E" line="1052"/>
                <method name="hasPrevious" type="boolean" line="1056"/>
                <method name="previous" type="E" line="1059"/>
                <method name="nextIndex" type="int" line="1063"/>
                <method name="previousIndex" type="int" line="1066"/>
                <method name="remove" type="void" line="1069"/>
                <method name="set" type="void" line="1072">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <method name="add" type="void" line="1075">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
            </class>
            <method name="resetLock" type="void" line="1079"/>
            <declaration name="UNSAFE" type="sun.misc.Unsafe" line="1082"/>
            <declaration name="lockOffset" type="long" line="1083"/>
            <scope line="1084">
                <scope line="1085">
                    <declaration name="k" type="Class" line="1087"/>
                </scope>
                <scope line="1090"/>
            </scope>
        </class>
    </source>