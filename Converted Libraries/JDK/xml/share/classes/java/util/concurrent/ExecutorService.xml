<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.List"/>
        <import package="java.util.Collection"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <interface name="ExecutorService">
            <implements interface="Executor"/>
            <javadoc line="42">
                An {@link Executor} that provides methods to manage termination and
                  methods that can produce a {@link Future} for tracking progress of
                  one or more asynchronous tasks.
                  &lt;p&gt; An &lt;tt&gt;ExecutorService&lt;/tt&gt; can be shut down, which will cause
                  it to reject new tasks.  Two different methods are provided for
                  shutting down an &lt;tt&gt;ExecutorService&lt;/tt&gt;. The {@link #shutdown}method will allow previously submitted tasks to execute before
                  terminating, while the {@link #shutdownNow} method prevents waiting
                  tasks from starting and attempts to stop currently executing tasks.
                  Upon termination, an executor has no tasks actively executing, no
                  tasks awaiting execution, and no new tasks can be submitted.  An
                  unused &lt;tt&gt;ExecutorService&lt;/tt&gt; should be shut down to allow
                  reclamation of its resources.
                  &lt;p&gt; Method &lt;tt&gt;submit&lt;/tt&gt; extends base method {@link Executor#execute} by creating and returning a {@link Future} that
                  can be used to cancel execution and/or wait for completion.
                  Methods &lt;tt&gt;invokeAny&lt;/tt&gt; and &lt;tt&gt;invokeAll&lt;/tt&gt; perform the most
                  commonly useful forms of bulk execution, executing a collection of
                  tasks and then waiting for at least one, or all, to
                  complete. (Class {@link ExecutorCompletionService} can be used to
                  write customized variants of these methods.)
                  &lt;p&gt;The {@link Executors} class provides factory methods for the
                  executor services provided in this package.
                  &lt;h3&gt;Usage Examples&lt;/h3&gt;
                  Here is a sketch of a network service in which threads in a thread
                  pool service incoming requests. It uses the preconfigured {@link Executors#newFixedThreadPool} factory method:
                  &lt;pre&gt;
                  class NetworkService implements Runnable {
                  private final ServerSocket serverSocket;
                  private final ExecutorService pool;
                  public NetworkService(int port, int poolSize)
                  throws IOException {
                  serverSocket = new ServerSocket(port);
                  pool = Executors.newFixedThreadPool(poolSize);
                  }
                  public void run() { // run the service
                  try {
                  for (;;) {
                  pool.execute(new Handler(serverSocket.accept()));
                  }
                  } catch (IOException ex) {
                  pool.shutdown();
                  }
                  }
                  }
                  class Handler implements Runnable {
                  private final Socket socket;
                  Handler(Socket socket) { this.socket = socket; }
                  public void run() {
                  // read and service request on socket
                  }
                  }
                  &lt;/pre&gt;
                  The following method shuts down an &lt;tt&gt;ExecutorService&lt;/tt&gt; in two phases,
                  first by calling &lt;tt&gt;shutdown&lt;/tt&gt; to reject incoming tasks, and then
                  calling &lt;tt&gt;shutdownNow&lt;/tt&gt;, if necessary, to cancel any lingering tasks:
                  &lt;pre&gt;
                  void shutdownAndAwaitTermination(ExecutorService pool) {
                  pool.shutdown(); // Disable new tasks from being submitted
                  try {
                  // Wait a while for existing tasks to terminate
                  if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
                  pool.shutdownNow(); // Cancel currently executing tasks
                  // Wait a while for tasks to respond to being cancelled
                  if (!pool.awaitTermination(60, TimeUnit.SECONDS))
                  System.err.println(&quot;Pool did not terminate&quot;);
                  }
                  } catch (InterruptedException ie) {
                  // (Re-)Cancel if current thread also interrupted
                  pool.shutdownNow();
                  // Preserve interrupt status
                  Thread.currentThread().interrupt();
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;Memory consistency effects: Actions in a thread prior to the
                  submission of a {@code Runnable} or {@code Callable} task to an{@code ExecutorService}&lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  any actions taken by that task, which in turn &lt;i&gt;happen-before&lt;/i&gt; the
                  result is retrieved via {@code Future.get()}.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <method name="shutdown" type="void" line="143"/>
            <javadoc line="143">
                Initiates an orderly shutdown in which previously submitted
                  tasks are executed, but no new tasks will be accepted.
                  Invocation has no additional effect if already shut down.
                  &lt;p&gt;This method does not wait for previously submitted tasks to
                  complete execution.  Use {@link #awaitTermination awaitTermination}to do that.                
                <throws>
                    SecurityException if a security manager exists and
                      shutting down this ExecutorService may manipulate
                      threads that the caller is not permitted to modify
                      because it does not hold {@link java.lang.RuntimePermission}<tt>("modifyThread")</tt>,
                      or the security manager's <tt>checkAccess</tt> method
                      denies access.                    
                </throws>
            </javadoc>
            <method name="shutdownNow" type="List<Runnable>" line="162"/>
            <javadoc line="162">
                Attempts to stop all actively executing tasks, halts the
                  processing of waiting tasks, and returns a list of the tasks
                  that were awaiting execution.
                  &lt;p&gt;This method does not wait for actively executing tasks to
                  terminate.  Use {@link #awaitTermination awaitTermination} to
                  do that.
                  &lt;p&gt;There are no guarantees beyond best-effort attempts to stop
                  processing actively executing tasks.  For example, typical
                  implementations will cancel via {@link Thread#interrupt}, so any
                  task that fails to respond to interrupts may never terminate.                
                <return>
                    list of tasks that never commenced execution                    
                </return>
                <throws>
                    SecurityException if a security manager exists and
                      shutting down this ExecutorService may manipulate
                      threads that the caller is not permitted to modify
                      because it does not hold {@link java.lang.RuntimePermission}<tt>("modifyThread")</tt>,
                      or the security manager's <tt>checkAccess</tt> method
                      denies access.                    
                </throws>
            </javadoc>
            <method name="isShutdown" type="boolean" line="187"/>
            <javadoc line="187">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this executor has been shut down.                
                <return>
                    <tt>true</tt> if this executor has been shut down                    
                </return>
            </javadoc>
            <method name="isTerminated" type="boolean" line="194"/>
            <javadoc line="194">
                Returns &lt;tt&gt;true&lt;/tt&gt; if all tasks have completed following shut down.
                  Note that &lt;tt&gt;isTerminated&lt;/tt&gt; is never &lt;tt&gt;true&lt;/tt&gt; unless
                  either &lt;tt&gt;shutdown&lt;/tt&gt; or &lt;tt&gt;shutdownNow&lt;/tt&gt; was called first.                
                <return>
                    <tt>true</tt> if all tasks have completed following shut down                    
                </return>
            </javadoc>
            <method name="awaitTermination" type="boolean" line="203"/>
            <javadoc line="203">
                Blocks until all tasks have completed execution after a shutdown
                  request, or the timeout occurs, or the current thread is
                  interrupted, whichever happens first.                
                <param>
                    timeout the maximum time to wait                    
                </param>
                <param>
                    unit the time unit of the timeout argument                    
                </param>
                <return>
                    <tt>true</tt> if this executor terminated and
                      <tt>false</tt> if the timeout elapsed before termination                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<T>" line="218"/>
            <javadoc line="218">
                Submits a value-returning task for execution and returns a
                  Future representing the pending results of the task. The
                  Future&apos;s &lt;tt&gt;get&lt;/tt&gt; method will return the task&apos;s result upon
                  successful completion.
                  &lt;p&gt;
                  If you would like to immediately block waiting
                  for a task, you can use constructions of the form
                  &lt;tt&gt;result = exec.submit(aCallable).get();&lt;/tt&gt;
                  &lt;p&gt; Note: The {@link Executors} class includes a set of methods
                  that can convert some other common closure-like objects,
                  for example, {@link java.security.PrivilegedAction} to{@link Callable} form so they can be submitted.                
                <param>
                    task the task to submit                    
                </param>
                <return>
                    a Future representing pending completion of the task                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if the task is null                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<T>" line="242"/>
            <javadoc line="242">
                Submits a Runnable task for execution and returns a Future
                  representing that task. The Future&apos;s &lt;tt&gt;get&lt;/tt&gt; method will
                  return the given result upon successful completion.                
                <param>
                    task the task to submit                    
                </param>
                <param>
                    result the result to return                    
                </param>
                <return>
                    a Future representing pending completion of the task                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if the task is null                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<?>" line="256"/>
            <javadoc line="256">
                Submits a Runnable task for execution and returns a Future
                  representing that task. The Future&apos;s &lt;tt&gt;get&lt;/tt&gt; method will
                  return &lt;tt&gt;null&lt;/tt&gt; upon &lt;em&gt;successful&lt;/em&gt; completion.                
                <param>
                    task the task to submit                    
                </param>
                <return>
                    a Future representing pending completion of the task                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if the task is null                    
                </throws>
            </javadoc>
            <method name="invokeAll" type="List<Future<T>>" line="269"/>
            <javadoc line="269">
                Executes the given tasks, returning a list of Futures holding
                  their status and results when all complete.{@link Future#isDone} is &lt;tt&gt;true&lt;/tt&gt; for each
                  element of the returned list.
                  Note that a &lt;em&gt;completed&lt;/em&gt; task could have
                  terminated either normally or by throwing an exception.
                  The results of this method are undefined if the given
                  collection is modified while this operation is in progress.                
                <param>
                    tasks the collection of tasks                    
                </param>
                <return>
                    A list of Futures representing the tasks, in the same
                      sequential order as produced by the iterator for the
                      given task list, each of which has completed.                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting, in
                      which case unfinished tasks are cancelled.                    
                </throws>
                <throws>
                    NullPointerException if tasks or any of its elements are <tt>null</tt>                    
                </throws>
                <throws>
                    RejectedExecutionException if any task cannot be
                      scheduled for execution                    
                </throws>
            </javadoc>
            <method name="invokeAll" type="List<Future<T>>" line="293"/>
            <javadoc line="293">
                Executes the given tasks, returning a list of Futures holding
                  their status and results
                  when all complete or the timeout expires, whichever happens first.{@link Future#isDone} is &lt;tt&gt;true&lt;/tt&gt; for each
                  element of the returned list.
                  Upon return, tasks that have not completed are cancelled.
                  Note that a &lt;em&gt;completed&lt;/em&gt; task could have
                  terminated either normally or by throwing an exception.
                  The results of this method are undefined if the given
                  collection is modified while this operation is in progress.                
                <param>
                    tasks the collection of tasks                    
                </param>
                <param>
                    timeout the maximum time to wait                    
                </param>
                <param>
                    unit the time unit of the timeout argument                    
                </param>
                <return>
                    a list of Futures representing the tasks, in the same
                      sequential order as produced by the iterator for the
                      given task list. If the operation did not time out,
                      each task will have completed. If it did time out, some
                      of these tasks will not have completed.                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting, in
                      which case unfinished tasks are cancelled                    
                </throws>
                <throws>
                    NullPointerException if tasks, any of its elements, or
                      unit are <tt>null</tt>                    
                </throws>
                <throws>
                    RejectedExecutionException if any task cannot be scheduled
                      for execution                    
                </throws>
            </javadoc>
            <method name="invokeAny" type="T" line="324"/>
            <javadoc line="324">
                Executes the given tasks, returning the result
                  of one that has completed successfully (i.e., without throwing
                  an exception), if any do. Upon normal or exceptional return,
                  tasks that have not completed are cancelled.
                  The results of this method are undefined if the given
                  collection is modified while this operation is in progress.                
                <param>
                    tasks the collection of tasks                    
                </param>
                <return>
                    the result returned by one of the tasks                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
                <throws>
                    NullPointerException if tasks or any element task
                      subject to execution is <tt>null</tt>                    
                </throws>
                <throws>
                    IllegalArgumentException if tasks is empty                    
                </throws>
                <throws>
                    ExecutionException if no task successfully completes                    
                </throws>
                <throws>
                    RejectedExecutionException if tasks cannot be scheduled
                      for execution                    
                </throws>
            </javadoc>
            <method name="invokeAny" type="T" line="345"/>
            <javadoc line="345">
                Executes the given tasks, returning the result
                  of one that has completed successfully (i.e., without throwing
                  an exception), if any do before the given timeout elapses.
                  Upon normal or exceptional return, tasks that have not
                  completed are cancelled.
                  The results of this method are undefined if the given
                  collection is modified while this operation is in progress.                
                <param>
                    tasks the collection of tasks                    
                </param>
                <param>
                    timeout the maximum time to wait                    
                </param>
                <param>
                    unit the time unit of the timeout argument                    
                </param>
                <return>
                    the result returned by one of the tasks.                    
                </return>
                <throws>
                    InterruptedException if interrupted while waiting                    
                </throws>
                <throws>
                    NullPointerException if tasks, or unit, or any element
                      task subject to execution is <tt>null</tt>                    
                </throws>
                <throws>
                    TimeoutException if the given timeout elapses before
                      any task successfully completes                    
                </throws>
                <throws>
                    ExecutionException if no task successfully completes                    
                </throws>
                <throws>
                    RejectedExecutionException if tasks cannot be scheduled
                      for execution                    
                </throws>
            </javadoc>
        </interface>
    </source>