<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.concurrent.atomic"/>
        <import package="java.util"/>
        <interface name="ScheduledExecutorService">
            <implements interface="ExecutorService"/>
            <javadoc line="4">
                An {@link ExecutorService} that can schedule commands to run after a given
                  delay, or to execute periodically.
                  &lt;p&gt; The &lt;tt&gt;schedule&lt;/tt&gt; methods create tasks with various delays
                  and return a task object that can be used to cancel or check
                  execution. The &lt;tt&gt;scheduleAtFixedRate&lt;/tt&gt; and
                  &lt;tt&gt;scheduleWithFixedDelay&lt;/tt&gt; methods create and execute tasks
                  that run periodically until cancelled.
                  &lt;p&gt; Commands submitted using the {@link Executor#execute} and{@link ExecutorService} &lt;tt&gt;submit&lt;/tt&gt; methods are scheduled with
                  a requested delay of zero. Zero and negative delays (but not
                  periods) are also allowed in &lt;tt&gt;schedule&lt;/tt&gt; methods, and are
                  treated as requests for immediate execution.
                  &lt;p&gt;All &lt;tt&gt;schedule&lt;/tt&gt; methods accept &lt;em&gt;relative&lt;/em&gt; delays and
                  periods as arguments, not absolute times or dates. It is a simple
                  matter to transform an absolute time represented as a {@link java.util.Date} to the required form. For example, to schedule at
                  a certain future &lt;tt&gt;date&lt;/tt&gt;, you can use: &lt;tt&gt;schedule(task,
                  date.getTime() - System.currentTimeMillis(),
                  TimeUnit.MILLISECONDS)&lt;/tt&gt;. Beware however that expiration of a
                  relative delay need not coincide with the current &lt;tt&gt;Date&lt;/tt&gt; at
                  which the task is enabled due to network time synchronization
                  protocols, clock drift, or other factors.
                  The {@link Executors} class provides convenient factory methods for
                  the ScheduledExecutorService implementations provided in this package.
                  &lt;h3&gt;Usage Example&lt;/h3&gt;
                  Here is a class with a method that sets up a ScheduledExecutorService
                  to beep every ten seconds for an hour:
                  &lt;pre&gt; {@codeimport static java.util.concurrent.TimeUnit.;}class BeeperControl 
                  private final ScheduledExecutorService scheduler =
                  Executors.newScheduledThreadPool(1);
                  public void beepForAnHour() {
                  final Runnable beeper = new Runnable() {
                  public void run() { System.out.println(&quot;beep&quot;); }
                  };
                  final ScheduledFuture&lt;?&gt; beeperHandle =
                  scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);
                  scheduler.schedule(new Runnable() {
                  public void run() { beeperHandle.cancel(true); }
                  }, 60  60, SECONDS);
                  }
                  }}&lt;/pre&gt;                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <method name="schedule" type="ScheduledFuture<?>" line="48"/>
            <javadoc line="48">
                Creates and executes a one-shot action that becomes enabled
                  after the given delay.                
                <param>
                    command the task to execute                    
                </param>
                <param>
                    delay the time from now to delay execution                    
                </param>
                <param>
                    unit the time unit of the delay parameter                    
                </param>
                <return>
                    a ScheduledFuture representing pending completion of
                      the task and whose <tt>get()</tt> method will return
                      <tt>null</tt> upon completion                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if command is null                    
                </throws>
            </javadoc>
            <method name="schedule" type="ScheduledFuture<V>" line="62"/>
            <javadoc line="62">
                Creates and executes a ScheduledFuture that becomes enabled after the
                  given delay.                
                <param>
                    callable the function to execute                    
                </param>
                <param>
                    delay the time from now to delay execution                    
                </param>
                <param>
                    unit the time unit of the delay parameter                    
                </param>
                <return>
                    a ScheduledFuture that can be used to extract result or cancel                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if callable is null                    
                </throws>
            </javadoc>
            <method name="scheduleAtFixedRate" type="ScheduledFuture<?>" line="74"/>
            <javadoc line="74">
                Creates and executes a periodic action that becomes enabled first
                  after the given initial delay, and subsequently with the given
                  period; that is executions will commence after
                  &lt;tt&gt;initialDelay&lt;/tt&gt; then &lt;tt&gt;initialDelay+period&lt;/tt&gt;, then
                  &lt;tt&gt;initialDelay + 2  period&lt;/tt&gt;, and so on.
                  If any execution of the task
                  encounters an exception, subsequent executions are suppressed.
                  Otherwise, the task will only terminate via cancellation or
                  termination of the executor.  If any execution of this task
                  takes longer than its period, then subsequent executions
                  may start late, but will not concurrently execute.                
                <param>
                    command the task to execute                    
                </param>
                <param>
                    initialDelay the time to delay first execution                    
                </param>
                <param>
                    period the period between successive executions                    
                </param>
                <param>
                    unit the time unit of the initialDelay and period parameters                    
                </param>
                <return>
                    a ScheduledFuture representing pending completion of
                      the task, and whose <tt>get()</tt> method will throw an
                      exception upon cancellation                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if command is null                    
                </throws>
                <throws>
                    IllegalArgumentException if period less than or equal to zero                    
                </throws>
            </javadoc>
            <method name="scheduleWithFixedDelay" type="ScheduledFuture<?>" line="99"/>
            <javadoc line="99">
                Creates and executes a periodic action that becomes enabled first
                  after the given initial delay, and subsequently with the
                  given delay between the termination of one execution and the
                  commencement of the next.  If any execution of the task
                  encounters an exception, subsequent executions are suppressed.
                  Otherwise, the task will only terminate via cancellation or
                  termination of the executor.                
                <param>
                    command the task to execute                    
                </param>
                <param>
                    initialDelay the time to delay first execution                    
                </param>
                <param>
                    delay the delay between the termination of one
                      execution and the commencement of the next                    
                </param>
                <param>
                    unit the time unit of the initialDelay and delay parameters                    
                </param>
                <return>
                    a ScheduledFuture representing pending completion of
                      the task, and whose <tt>get()</tt> method will throw an
                      exception upon cancellation                    
                </return>
                <throws>
                    RejectedExecutionException if the task cannot be
                      scheduled for execution                    
                </throws>
                <throws>
                    NullPointerException if command is null                    
                </throws>
                <throws>
                    IllegalArgumentException if delay less than or equal to zero                    
                </throws>
            </javadoc>
        </interface>
    </source>