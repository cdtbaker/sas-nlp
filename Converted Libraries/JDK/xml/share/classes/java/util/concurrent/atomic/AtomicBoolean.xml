<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <class name="AtomicBoolean" line="39">
            <comment line="53">
                setup to use Unsafe.compareAndSwapInt for updates                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="39">
                A {@code boolean} value that may be updated atomically. See the{@link java.util.concurrent.atomic} package specification for
                  description of the properties of atomic variables. An{@code AtomicBoolean} is used in applications such as atomically
                  updated flags, and cannot be used as a replacement for a{@link java.lang.Boolean}.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <declaration name="unsafe" type="Unsafe" line="53"/>
            <declaration name="valueOffset" type="long" line="54"/>
            <scope line="56">
                <scope line="57"/>
                <scope line="60"/>
            </scope>
            <declaration name="value" type="int" line="63"/>
            <javadoc line="65">
                Creates a new {@code AtomicBoolean} with the given initial value.                
                <param>
                    initialValue the initial value                    
                </param>
            </javadoc>
            <method name="AtomicBoolean" type="constructor" line="70">
                <params>
                    <param name="initialValue" type="boolean"/>
                </params>
            </method>
            <javadoc line="74">
                Creates a new {@code AtomicBoolean} with initial value {@code false}.                
            </javadoc>
            <method name="AtomicBoolean" type="constructor" line="77"/>
            <javadoc line="80">
                Returns the current value.                
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="boolean" line="85"/>
            <javadoc line="89">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="98">
                <params>
                    <param name="expect" type="boolean"/>
                    <param name="update" type="boolean"/>
                </params>
                <declaration name="e" type="int" line="99"/>
                <declaration name="u" type="int" line="100"/>
            </method>
            <javadoc line="104">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="116">
                <params>
                    <param name="expect" type="boolean"/>
                    <param name="update" type="boolean"/>
                </params>
                <declaration name="e" type="int" line="117"/>
                <declaration name="u" type="int" line="118"/>
            </method>
            <javadoc line="122">
                Unconditionally sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="127">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
            <javadoc line="131">
                Eventually sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="137">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="v" type="int" line="138"/>
            </method>
            <javadoc line="142">
                Atomically sets to the given value and returns the previous value.                
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="boolean" line="148">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <scope line="149">
                    <declaration name="current" type="boolean" line="150"/>
                </scope>
            </method>
            <javadoc line="156">
                Returns the String representation of the current value.                
                <return>
                    the String representation of the current value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="160"/>
        </class>
    </source>