<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.RandomAccess"/>
        <import package="java.util.Map"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.util.concurrent.Callable"/>
        <import package="java.util.concurrent.CancellationException"/>
        <import package="java.util.concurrent.ExecutionException"/>
        <import package="java.util.concurrent.Executor"/>
        <import package="java.util.concurrent.ExecutorService"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.util.concurrent.RejectedExecutionException"/>
        <import package="java.util.concurrent.RunnableFuture"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="java.util.concurrent.TimeoutException"/>
        <import package="java.util.concurrent.locks.ReentrantLock"/>
        <import package="java.lang.reflect.Constructor"/>
        <class name="ForkJoinTask" line="22">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <implements interface="Future">
                <type_params>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="22">
                Abstract base class for tasks that run within a {@link ForkJoinPool}.
                  A {@code ForkJoinTask} is a thread-like entity that is much
                  lighter weight than a normal thread.  Huge numbers of tasks and
                  subtasks may be hosted by a small number of actual threads in a
                  ForkJoinPool, at the price of some usage limitations.
                  &lt;p&gt;A &quot;main&quot; {@code ForkJoinTask} begins execution when submitted
                  to a {@link ForkJoinPool}.  Once started, it will usually in turn
                  start other subtasks.  As indicated by the name of this class,
                  many programs using {@code ForkJoinTask} employ only methods{@link #fork} and {@link #join}, or derivatives such as {@link #invokeAll(ForkJoinTask) invokeAll}.  However, this class also
                  provides a number of other methods that can come into play in
                  advanced usages, as well as extension mechanics that allow
                  support of new forms of fork/join processing.
                  &lt;p&gt;A {@code ForkJoinTask} is a lightweight form of {@link Future}.
                  The efficiency of {@code ForkJoinTask}s stems from a set of
                  restrictions (that are only partially statically enforceable)
                  reflecting their intended use as computational tasks calculating
                  pure functions or operating on purely isolated objects.  The
                  primary coordination mechanisms are {@link #fork}, that arranges
                  asynchronous execution, and {@link #join}, that doesn&apos;t proceed
                  until the task&apos;s result has been computed.  Computations should
                  avoid {@code synchronized} methods or blocks, and should minimize
                  other blocking synchronization apart from joining other tasks or
                  using synchronizers such as Phasers that are advertised to
                  cooperate with fork/join scheduling. Tasks should also not perform
                  blocking IO, and should ideally access variables that are
                  completely independent of those accessed by other running
                  tasks. Minor breaches of these restrictions, for example using
                  shared output streams, may be tolerable in practice, but frequent
                  use may result in poor performance, and the potential to
                  indefinitely stall if the number of threads not waiting for IO or
                  other external synchronization becomes exhausted. This usage
                  restriction is in part enforced by not permitting checked
                  exceptions such as {@code IOExceptions} to be thrown. However,
                  computations may still encounter unchecked exceptions, that are
                  rethrown to callers attempting to join them. These exceptions may
                  additionally include {@link RejectedExecutionException} stemming
                  from internal resource exhaustion, such as failure to allocate
                  internal task queues. Rethrown exceptions behave in the same way as
                  regular exceptions, but, when possible, contain stack traces (as
                  displayed for example using {@code ex.printStackTrace()}) of both
                  the thread that initiated the computation as well as the thread
                  actually encountering the exception; minimally only the latter.
                  &lt;p&gt;The primary method for awaiting completion and extracting
                  results of a task is {@link #join}, but there are several variants:
                  The {@link Future#get} methods support interruptible and/or timed
                  waits for completion and report results using {@code Future}conventions. Method {@link #invoke} is semantically
                  equivalent to {@code fork(); join()} but always attempts to begin
                  execution in the current thread. The &quot;&lt;em&gt;quiet&lt;/em&gt;&quot; forms of
                  these methods do not extract results or report exceptions. These
                  may be useful when a set of tasks are being executed, and you need
                  to delay processing of results or exceptions until all complete.
                  Method {@code invokeAll} (available in multiple versions)
                  performs the most common form of parallel invocation: forking a set
                  of tasks and joining them all.
                  &lt;p&gt;The execution status of tasks may be queried at several levels
                  of detail: {@link #isDone} is true if a task completed in any way
                  (including the case where a task was cancelled without executing);{@link #isCompletedNormally} is true if a task completed without
                  cancellation or encountering an exception; {@link #isCancelled} is
                  true if the task was cancelled (in which case {@link #getException}returns a {@link java.util.concurrent.CancellationException}); and{@link #isCompletedAbnormally} is true if a task was either
                  cancelled or encountered an exception, in which case {@link #getException} will return either the encountered exception or{@link java.util.concurrent.CancellationException}.
                  &lt;p&gt;The ForkJoinTask class is not usually directly subclassed.
                  Instead, you subclass one of the abstract classes that support a
                  particular style of fork/join processing, typically {@link RecursiveAction} for computations that do not return results, or{@link RecursiveTask} for those that do.  Normally, a concrete
                  ForkJoinTask subclass declares fields comprising its parameters,
                  established in a constructor, and then defines a {@code compute}method that somehow uses the control methods supplied by this base
                  class. While these methods have {@code public} access (to allow
                  instances of different task subclasses to call each other&apos;s
                  methods), some of them may only be called from within other
                  ForkJoinTasks (as may be determined using method {@link #inForkJoinPool}).  Attempts to invoke them in other contexts
                  result in exceptions or errors, possibly including{@code ClassCastException}.
                  &lt;p&gt;Method {@link #join} and its variants are appropriate for use
                  only when completion dependencies are acyclic; that is, the
                  parallel computation can be described as a directed acyclic graph
                  (DAG). Otherwise, executions may encounter a form of deadlock as
                  tasks cyclically wait for each other.  However, this framework
                  supports other methods and techniques (for example the use of{@link Phaser}, {@link #helpQuiesce}, and {@link #complete}) that
                  may be of use in constructing custom subclasses for problems that
                  are not statically structured as DAGs.
                  &lt;p&gt;Most base support methods are {@code final}, to prevent
                  overriding of implementations that are intrinsically tied to the
                  underlying lightweight task scheduling framework.  Developers
                  creating new basic styles of fork/join processing should minimally
                  implement {@code protected} methods {@link #exec}, {@link #setRawResult}, and {@link #getRawResult}, while also introducing
                  an abstract computational method that can be implemented in its
                  subclasses, possibly relying on other {@code protected} methods
                  provided by this class.
                  &lt;p&gt;ForkJoinTasks should perform relatively small amounts of
                  computation. Large tasks should be split into smaller subtasks,
                  usually via recursive decomposition. As a very rough rule of thumb,
                  a task should perform more than 100 and less than 10000 basic
                  computational steps, and should avoid indefinite looping. If tasks
                  are too big, then parallelism cannot improve throughput. If too
                  small, then memory and internal task maintenance overhead may
                  overwhelm processing.
                  &lt;p&gt;This class provides {@code adapt} methods for {@link Runnable}and {@link Callable}, that may be of use when mixing execution of{@code ForkJoinTasks} with other kinds of tasks. When all tasks are
                  of this form, consider using a pool constructed in &lt;em&gt;asyncMode&lt;/em&gt;.
                  &lt;p&gt;ForkJoinTasks are {@code Serializable}, which enables them to be
                  used in extensions such as remote execution frameworks. It is
                  sensible to serialize tasks only before or after, but not during,
                  execution. Serialization is not relied on during execution itself.                
                <since>
                    1.7                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="status" type="int" line="127"/>
            <javadoc line="127">
                The run status of this task                
            </javadoc>
            <declaration name="NORMAL" type="int" line="131"/>
            <declaration name="CANCELLED" type="int" line="132"/>
            <declaration name="EXCEPTIONAL" type="int" line="133"/>
            <declaration name="SIGNAL" type="int" line="134"/>
            <javadoc line="135">
                Marks completion and wakes up threads waiting to join this task,
                  also clearing signal request bits.                
                <param>
                    completion one of NORMAL, CANCELLED, EXCEPTIONAL                    
                </param>
                <return>
                    completion status on exit                    
                </return>
            </javadoc>
            <method name="setCompletion" type="int" line="141">
                <params>
                    <param name="completion" type="int"/>
                </params>
                <scope line="142">
                    <scope line="144">
                        <scope line="145"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="152">
                Tries to block a worker thread until completed or timed out.
                  Uses Object.wait time argument conventions.
                  May fail on contention or interrupt.                
                <param>
                    millis if > 0, wait time.                    
                </param>
            </javadoc>
            <method name="tryAwaitDone" type="void" line="158">
                <params>
                    <param name="millis" type="long"/>
                </params>
                <declaration name="s" type="int" line="159"/>
                <scope line="160">
                    <scope line="161">
                        <scope line="162"/>
                    </scope>
                </scope>
                <scope line="167"/>
            </method>
            <javadoc line="170">
                Blocks a non-worker-thread until completion.                
                <return>
                    status upon completion                    
                </return>
            </javadoc>
            <method name="externalAwaitDone" type="int" line="174">
                <declaration name="s" type="int" line="175"/>
                <scope line="176">
                    <declaration name="interrupted" type="boolean" line="177"/>
                    <scope line="178">
                        <scope line="179">
                            <scope line="181">
                                <scope line="182"/>
                                <scope line="185"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="195">
                Blocks a non-worker-thread until completion or interruption or timeout.                
            </javadoc>
            <method name="externalInterruptibleAwaitDone" type="int" line="198">
                <params>
                    <param name="millis" type="long"/>
                </params>
                <declaration name="s" type="int" line="199"/>
                <scope line="201">
                    <scope line="202">
                        <scope line="203">
                            <scope line="205"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="214">
                Primary execution method for stolen tasks. Unless done, calls
                  exec and records status if completed, but doesn&apos;t wait for
                  completion otherwise.                
            </javadoc>
            <method name="doExec" type="void" line="219">
                <scope line="220">
                    <declaration name="completed" type="boolean" line="221"/>
                    <scope line="222"/>
                    <scope line="225"/>
                </scope>
            </method>
            <javadoc line="232">
                Primary mechanics for join, get, quietlyJoin.                
                <return>
                    status upon completion                    
                </return>
            </javadoc>
            <method name="doJoin" type="int" line="236">
                <declaration name="t" type="Thread" line="237"/>
                <declaration name="w" type="ForkJoinWorkerThread" line="238"/>
                <declaration name="s" type="int" line="239"/>
                <declaration name="completed" type="boolean" line="240"/>
                <scope line="241">
                    <scope line="243">
                        <scope line="244"/>
                        <scope line="247"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="256">
                Primary mechanics for invoke, quietlyInvoke.                
                <return>
                    status upon completion                    
                </return>
            </javadoc>
            <method name="doInvoke" type="int" line="260">
                <declaration name="s" type="int" line="261"/>
                <declaration name="completed" type="boolean" line="262"/>
                <scope line="264"/>
                <scope line="267"/>
            </method>
            <declaration name="exceptionTable" type="ExceptionNode[]" line="273"/>
            <javadoc line="273">
                Table of exceptions thrown by tasks, to enable reporting by
                  callers. Because exceptions are rare, we don&apos;t directly keep
                  them with task objects, but instead use a weak ref table.  Note
                  that cancellation exceptions don&apos;t appear in the table, but are
                  instead recorded as status values.
                  Note: These statics are initialized below in static block.                
            </javadoc>
            <declaration name="exceptionTableLock" type="ReentrantLock" line="282"/>
            <declaration name="exceptionTableRefQueue" type="ReferenceQueue&lt;Object&gt;" line="283"/>
            <declaration name="EXCEPTION_MAP_CAPACITY" type="int" line="284"/>
            <javadoc line="284">
                Fixed capacity for exceptionTable.                
            </javadoc>
            <class name="ExceptionNode" line="288">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="ForkJoinTask<?>"/>
                    </type_params>
                </extends>
                <javadoc line="288">
                    Key-value nodes for exception table.  The chained hash table
                      uses identity comparisons, full locking, and weak references
                      for keys. The table has a fixed capacity because it only
                      maintains task exceptions long enough for joiners to access
                      them, so should never become very large for sustained
                      periods. However, since we do not know when the last joiner
                      completes, we must use weak references and expunge them. We do
                      so on each operation (hence full locking). Also, some thread in
                      any ForkJoinPool will call helpExpungeStaleExceptions when its
                      pool becomes isQuiescent.                    
                </javadoc>
                <declaration name="ex" type="Throwable" line="301"/>
                <declaration name="next" type="ExceptionNode" line="302"/>
                <declaration name="thrower" type="long" line="303"/>
                <method name="ExceptionNode" type="constructor" line="304">
                    <params>
                        <param name="task" type="ForkJoinTask<?>"/>
                        <param name="ex" type="Throwable"/>
                        <param name="next" type="ExceptionNode"/>
                    </params>
                </method>
            </class>
            <javadoc line="311">
                Records exception and sets exceptional completion.                
                <return>
                    status on exit                    
                </return>
            </javadoc>
            <method name="setExceptionalCompletion" type="int" line="315">
                <params>
                    <param name="ex" type="Throwable"/>
                </params>
                <declaration name="h" type="int" line="316"/>
                <declaration name="lock" type="ReentrantLock" line="317"/>
                <scope line="319">
                    <declaration name="t" type="ExceptionNode[]" line="321"/>
                    <declaration name="i" type="int" line="322"/>
                    <scope line="323">
                        <scope line="324"/>
                    </scope>
                </scope>
                <scope line="331"/>
            </method>
            <javadoc line="336">
                Removes exception node and clears status                
            </javadoc>
            <method name="clearExceptionalCompletion" type="void" line="339">
                <declaration name="h" type="int" line="340"/>
                <declaration name="lock" type="ReentrantLock" line="341"/>
                <scope line="343">
                    <declaration name="t" type="ExceptionNode[]" line="344"/>
                    <declaration name="i" type="int" line="345"/>
                    <declaration name="e" type="ExceptionNode" line="346"/>
                    <declaration name="pred" type="ExceptionNode" line="347"/>
                    <scope line="348">
                        <declaration name="next" type="ExceptionNode" line="349"/>
                        <scope line="350"/>
                    </scope>
                </scope>
                <scope line="361"/>
            </method>
            <javadoc line="365">
                Returns a rethrowable exception for the given task, if
                  available. To provide accurate stack traces, if the exception
                  was not thrown by the current thread, we try to create a new
                  exception of the same type as the one thrown, but with the
                  recorded exception as its cause. If there is no such
                  constructor, we instead try to use a no-arg constructor,
                  followed by initCause, to the same effect. If none of these
                  apply, or any fail due to other exceptions, we return the
                  recorded exception, which is still correct, although it may
                  contain a misleading stack trace.                
                <return>
                    the exception, or null if none                    
                </return>
            </javadoc>
            <method name="getThrowableException" type="Throwable" line="378">
                <declaration name="h" type="int" line="380"/>
                <declaration name="e" type="ExceptionNode" line="381"/>
                <declaration name="lock" type="ReentrantLock" line="382"/>
                <scope line="384">
                    <declaration name="t" type="ExceptionNode[]" line="386"/>
                </scope>
                <scope line="390"/>
                <declaration name="ex" type="Throwable" line="393"/>
                <scope line="395">
                    <declaration name="ec" type="Class" line="396"/>
                    <scope line="397">
                        <declaration name="noArgCtor" type="Constructor&lt;?&gt;" line="398"/>
                        <declaration name="cs" type="Constructor&lt;?&gt;[]" line="399"/>
                        <scope line="400">
                            <declaration name="c" type="Constructor&lt;?&gt;" line="401"/>
                            <declaration name="ps" type="Class&lt;?&gt;[]" line="402"/>
                        </scope>
                        <scope line="406">
                            <declaration name="wx" type="Throwable" line="407"/>
                        </scope>
                    </scope>
                    <scope line="412"/>
                </scope>
            </method>
            <javadoc line="417">
                Poll stale refs and remove them. Call only while holding lock.                
            </javadoc>
            <method name="expungeStaleExceptions" type="void" line="420">
                <scope line="421">
                    <scope line="422">
                        <declaration name="key" type="ForkJoinTask&lt;?&gt;" line="423"/>
                        <declaration name="t" type="ExceptionNode[]" line="424"/>
                        <declaration name="i" type="int" line="425"/>
                        <declaration name="e" type="ExceptionNode" line="426"/>
                        <declaration name="pred" type="ExceptionNode" line="427"/>
                        <scope line="428">
                            <declaration name="next" type="ExceptionNode" line="429"/>
                            <scope line="430"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="441">
                If lock is available, poll stale refs and remove them.
                  Called from ForkJoinPool when pools become quiescent.                
            </javadoc>
            <method name="helpExpungeStaleExceptions" type="void" line="445">
                <declaration name="lock" type="ReentrantLock" line="446"/>
                <scope line="447">
                    <scope line="448"/>
                    <scope line="451"/>
                </scope>
            </method>
            <javadoc line="456">
                Report the result of invoke or join; called only upon
                  non-normal return of internal versions.                
            </javadoc>
            <method name="reportResult" type="V" line="460">
                <declaration name="s" type="int" line="461"/>
                <declaration name="ex" type="Throwable" line="462"/>
            </method>
            <javadoc line="467">
                Arranges to asynchronously execute this task.  While it is not
                  necessarily enforced, it is a usage error to fork a task more
                  than once unless it has completed and been reinitialized.
                  Subsequent modifications to the state of this task or any data
                  it operates on are not necessarily consistently observable by
                  any thread other than the one executing it unless preceded by a
                  call to {@link #join} or related methods, or a call to {@link #isDone} returning {@code true}.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <return>
                    {@code this}, to simplify usage                    
                </return>
            </javadoc>
            <method name="fork" type="ForkJoinTask<V>" line="479"/>
            <javadoc line="483">
                Returns the result of the computation when it {@link #isDone is
                  done}.  This method differs from {@link #get()} in that
                  abnormal completion results in {@code RuntimeException} or{@code Error}, not {@code ExecutionException}, and that
                  interrupts of the calling thread do &lt;em&gt;not&lt;/em&gt; cause the
                  method to abruptly return by throwing {@codeInterruptedException}.                
                <return>
                    the computed result                    
                </return>
            </javadoc>
            <method name="join" type="V" line="491"/>
            <javadoc line="495">
                Commences performing this task, awaits its completion if
                  necessary, and returns its result, or throws an (unchecked){@code RuntimeException} or {@code Error} if the underlying
                  computation did so.                
                <return>
                    the computed result                    
                </return>
            </javadoc>
            <method name="invoke" type="V" line="501"/>
            <javadoc line="505">
                Forks the given tasks, returning when {@code isDone} holds for
                  each task or an (unchecked) exception is encountered, in which
                  case the exception is rethrown. If more than one task
                  encounters an exception, then this method throws any one of
                  these exceptions. If any task encounters an exception, the
                  other may be cancelled. However, the execution status of
                  individual tasks is not guaranteed upon exceptional return. The
                  status of each task may be obtained using {@link #getException()} and related methods to check if they have been
                  cancelled, completed normally or exceptionally, or left
                  unprocessed.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <param>
                    t1 the first task                    
                </param>
                <param>
                    t2 the second task                    
                </param>
                <throws>
                    NullPointerException if any task is null                    
                </throws>
            </javadoc>
            <method name="invokeAll" type="void" line="522">
                <params>
                    <param name="t1" type="ForkJoinTask<?>"/>
                    <param name="t2" type="ForkJoinTask<?>"/>
                </params>
            </method>
            <javadoc line="527">
                Forks the given tasks, returning when {@code isDone} holds for
                  each task or an (unchecked) exception is encountered, in which
                  case the exception is rethrown. If more than one task
                  encounters an exception, then this method throws any one of
                  these exceptions. If any task encounters an exception, others
                  may be cancelled. However, the execution status of individual
                  tasks is not guaranteed upon exceptional return. The status of
                  each task may be obtained using {@link #getException()} and
                  related methods to check if they have been cancelled, completed
                  normally or exceptionally, or left unprocessed.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <param>
                    tasks the tasks                    
                </param>
                <throws>
                    NullPointerException if any task is null                    
                </throws>
            </javadoc>
            <method name="invokeAll" type="void" line="543">
                <params>
                    <param name="tasks" type="ForkJoinTask<?>"/>
                </params>
                <declaration name="ex" type="Throwable" line="544"/>
                <declaration name="last" type="int" line="545"/>
                <scope line="546">
                    <declaration name="t" type="ForkJoinTask&lt;?&gt;" line="547"/>
                    <scope line="548"/>
                </scope>
                <scope line="554">
                    <declaration name="t" type="ForkJoinTask&lt;?&gt;" line="555"/>
                    <scope line="556"/>
                </scope>
            </method>
            <javadoc line="563">
                Forks all tasks in the specified collection, returning when{@code isDone} holds for each task or an (unchecked) exception
                  is encountered, in which case the exception is rethrown. If
                  more than one task encounters an exception, then this method
                  throws any one of these exceptions. If any task encounters an
                  exception, others may be cancelled. However, the execution
                  status of individual tasks is not guaranteed upon exceptional
                  return. The status of each task may be obtained using {@link #getException()} and related methods to check if they have been
                  cancelled, completed normally or exceptionally, or left
                  unprocessed.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <param>
                    tasks the collection of tasks                    
                </param>
                <return>
                    the tasks argument, to simplify usage                    
                </return>
                <throws>
                    NullPointerException if tasks or any element are null                    
                </throws>
            </javadoc>
            <method name="invokeAll" type="Collection<T>" line="579">
                <params>
                    <param name="tasks" type="Collection<T>"/>
                </params>
                <scope line="580"/>
                <declaration name="ts" type="List&lt;? extends ForkJoinTask&lt;?&gt;&gt;" line="584"/>
                <declaration name="ex" type="Throwable" line="585"/>
                <declaration name="last" type="int" line="586"/>
                <scope line="587">
                    <declaration name="t" type="ForkJoinTask&lt;?&gt;" line="588"/>
                    <scope line="589"/>
                </scope>
                <scope line="595">
                    <declaration name="t" type="ForkJoinTask&lt;?&gt;" line="596"/>
                    <scope line="597"/>
                </scope>
            </method>
            <javadoc line="605">
                Attempts to cancel execution of this task. This attempt will
                  fail if the task has already completed or could not be
                  cancelled for some other reason. If successful, and this task
                  has not started when {@code cancel} is called, execution of
                  this task is suppressed. After this method returns
                  successfully, unless there is an intervening call to {@link #reinitialize}, subsequent calls to {@link #isCancelled},{@link #isDone}, and {@code cancel} will return {@code true}and calls to {@link #join} and related methods will result in{@code CancellationException}.
                  &lt;p&gt;This method may be overridden in subclasses, but if so, must
                  still ensure that these properties hold. In particular, the{@code cancel} method itself must not throw exceptions.
                  &lt;p&gt;This method is designed to be invoked by &lt;em&gt;other&lt;/em&gt;
                  tasks. To terminate the current task, you can just return or
                  throw an unchecked exception from its computation method, or
                  invoke {@link #completeExceptionally}.                
                <param>
                    mayInterruptIfRunning this value has no effect in the
                      default implementation because interrupts are not used to
                      control cancellation.                    
                </param>
                <return>
                    {@code true} if this task is now cancelled                    
                </return>
            </javadoc>
            <method name="cancel" type="boolean" line="623">
                <params>
                    <param name="mayInterruptIfRunning" type="boolean"/>
                </params>
            </method>
            <javadoc line="626">
                Cancels, ignoring any exceptions thrown by cancel. Used during
                  worker and pool shutdown. Cancel is spec&apos;ed not to throw any
                  exceptions, but if it does anyway, we have no recourse during
                  shutdown, so guard against this case.                
            </javadoc>
            <method name="cancelIgnoringExceptions" type="void" line="632">
                <scope line="633"/>
                <scope line="636"/>
            </method>
            <method name="isDone" type="boolean" line="639"/>
            <method name="isCancelled" type="boolean" line="642"/>
            <javadoc line="645">
                Returns {@code true} if this task threw an exception or was cancelled.                
                <return>
                    {@code true} if this task threw an exception or was cancelled                    
                </return>
            </javadoc>
            <method name="isCompletedAbnormally" type="boolean" line="649"/>
            <javadoc line="652">
                Returns {@code true} if this task completed without throwing an
                  exception and was not cancelled.                
                <return>
                    {@code true} if this task completed without throwing an
                      exception and was not cancelled                    
                </return>
            </javadoc>
            <method name="isCompletedNormally" type="boolean" line="658"/>
            <javadoc line="661">
                Returns the exception thrown by the base computation, or a{@code CancellationException} if cancelled, or {@code null} if
                  none or if the method has not yet completed.                
                <return>
                    the exception, or {@code null} if none                    
                </return>
            </javadoc>
            <method name="getException" type="Throwable" line="666">
                <declaration name="s" type="int" line="667"/>
            </method>
            <javadoc line="670">
                Completes this task abnormally, and if not already aborted or
                  cancelled, causes it to throw the given exception upon{@code join} and related operations. This method may be used
                  to induce exceptions in asynchronous tasks, or to force
                  completion of tasks that would not otherwise complete.  Its use
                  in other situations is discouraged.  This method is
                  overridable, but overridden versions must invoke {@code super}implementation to maintain guarantees.                
                <param>
                    ex the exception to throw. If this exception is not a{@code RuntimeException} or {@code Error}, the actual exception
                      thrown will be a {@code RuntimeException} with cause {@code ex}.                    
                </param>
            </javadoc>
            <method name="completeExceptionally" type="void" line="680">
                <params>
                    <param name="ex" type="Throwable"/>
                </params>
            </method>
            <javadoc line="683">
                Completes this task, and if not already aborted or cancelled,
                  returning the given value as the result of subsequent
                  invocations of {@code join} and related operations. This method
                  may be used to provide results for asynchronous tasks, or to
                  provide alternative handling for tasks that would not otherwise
                  complete normally. Its use in other situations is
                  discouraged. This method is overridable, but overridden
                  versions must invoke {@code super} implementation to maintain
                  guarantees.                
                <param>
                    value the result value for this task                    
                </param>
            </javadoc>
            <method name="complete" type="void" line="695">
                <params>
                    <param name="value" type="V"/>
                </params>
                <scope line="696"/>
                <scope line="699"/>
            </method>
            <javadoc line="705">
                Waits if necessary for the computation to complete, and then
                  retrieves its result.                
                <return>
                    the computed result                    
                </return>
                <throws>
                    CancellationException if the computation was cancelled                    
                </throws>
                <throws>
                    ExecutionException if the computation threw an
                      exception                    
                </throws>
                <throws>
                    InterruptedException if the current thread is not a
                      member of a ForkJoinPool and was interrupted while waiting                    
                </throws>
            </javadoc>
            <method name="get" type="V" line="715">
                <declaration name="s" type="int" line="716"/>
                <declaration name="ex" type="Throwable" line="717"/>
            </method>
            <javadoc line="722">
                Waits if necessary for at most the given time for the computation
                  to complete, and then retrieves its result, if available.                
                <param>
                    timeout the maximum time to wait                    
                </param>
                <param>
                    unit the time unit of the timeout argument                    
                </param>
                <return>
                    the computed result                    
                </return>
                <throws>
                    CancellationException if the computation was cancelled                    
                </throws>
                <throws>
                    ExecutionException if the computation threw an
                      exception                    
                </throws>
                <throws>
                    InterruptedException if the current thread is not a
                      member of a ForkJoinPool and was interrupted while waiting                    
                </throws>
                <throws>
                    TimeoutException if the wait timed out                    
                </throws>
            </javadoc>
            <method name="get" type="V" line="735">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="t" type="Thread" line="736"/>
                <scope line="737">
                    <declaration name="w" type="ForkJoinWorkerThread" line="738"/>
                    <declaration name="nanos" type="long" line="739"/>
                    <scope line="740">
                        <declaration name="completed" type="boolean" line="741"/>
                        <scope line="742">
                            <scope line="743"/>
                            <scope line="746"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="754">
                    <declaration name="millis" type="long" line="755"/>
                </scope>
                <declaration name="s" type="int" line="758"/>
                <scope line="759">
                    <declaration name="ex" type="Throwable" line="760"/>
                </scope>
            </method>
            <javadoc line="767">
                Joins this task, without returning its result or throwing its
                  exception. This method may be useful when processing
                  collections of tasks when some have been cancelled or otherwise
                  known to have aborted.                
            </javadoc>
            <method name="quietlyJoin" type="void" line="773"/>
            <javadoc line="776">
                Commences performing this task and awaits its completion if
                  necessary, without returning its result or throwing its
                  exception.                
            </javadoc>
            <method name="quietlyInvoke" type="void" line="781"/>
            <javadoc line="784">
                Possibly executes tasks until the pool hosting the current task{@link ForkJoinPool#isQuiescent is quiescent}. This method may
                  be of use in designs in which many tasks are forked, but none
                  are explicitly joined, instead executing them until all are
                  processed.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
            </javadoc>
            <method name="helpQuiesce" type="void" line="792"/>
            <javadoc line="795">
                Resets the internal bookkeeping state of this task, allowing a
                  subsequent {@code fork}. This method allows repeated reuse of
                  this task, but only if reuse occurs when this task has either
                  never been forked, or has been forked, then completed and all
                  outstanding joins of this task have also completed. Effects
                  under any other usage conditions are not guaranteed.
                  This method may be useful when executing
                  pre-constructed trees of subtasks in loops.
                  &lt;p&gt;Upon completion of this method, {@code isDone()} reports{@code false}, and {@code getException()} reports {@codenull}. However, the value returned by {@code getRawResult} is
                  unaffected. To clear this value, you can invoke                
            </javadoc>
            <method name="reinitialize" type="void" line="807"/>
            <javadoc line="811">
                Returns the pool hosting the current task execution, or null
                  if this task is executing outside of any ForkJoinPool.                
                <see>
                    #inForkJoinPool                    
                </see>
                <return>
                    the pool, or {@code null} if none                    
                </return>
            </javadoc>
            <method name="getPool" type="ForkJoinPool" line="817">
                <declaration name="t" type="Thread" line="818"/>
            </method>
            <javadoc line="821">
                Returns {@code true} if the current thread is a {@link ForkJoinWorkerThread} executing as a ForkJoinPool computation.                
                <return>
                    {@code true} if the current thread is a {@link ForkJoinWorkerThread} executing as a ForkJoinPool computation,
                      or {@code false} otherwise                    
                </return>
            </javadoc>
            <method name="inForkJoinPool" type="boolean" line="826"/>
            <javadoc line="829">
                Tries to unschedule this task for execution. This method will
                  typically succeed if this task is the most recently forked task
                  by the current thread, and has not commenced executing in
                  another thread.  This method may be useful when arranging
                  alternative local processing of tasks that could have been, but
                  were not, stolen.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <return>
                    {@code true} if unforked                    
                </return>
            </javadoc>
            <method name="tryUnfork" type="boolean" line="840"/>
            <javadoc line="843">
                Returns an estimate of the number of tasks that have been
                  forked by the current worker thread but not yet executed. This
                  value may be useful for heuristic decisions about whether to
                  fork other tasks.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <return>
                    the number of tasks                    
                </return>
            </javadoc>
            <method name="getQueuedTaskCount" type="int" line="852"/>
            <javadoc line="855">
                Returns an estimate of how many more locally queued tasks are
                  held by the current worker thread than there are other worker
                  threads that might steal them.  This value may be useful for
                  heuristic decisions about whether to fork other tasks. In many
                  usages of ForkJoinTasks, at steady state, each worker should
                  aim to maintain a small constant surplus (for example, 3) of
                  tasks, and to process computations locally if this threshold is
                  exceeded.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <return>
                    the surplus number of tasks, which may be negative                    
                </return>
            </javadoc>
            <method name="getSurplusQueuedTaskCount" type="int" line="868"/>
            <method name="getRawResult" type="V" line="871"/>
            <javadoc line="871">
                Returns the result that would be returned by {@link #join}, even
                  if this task completed abnormally, or {@code null} if this task
                  is not known to have been completed.  This method is designed
                  to aid debugging, as well as to support extensions. Its use in
                  any other context is discouraged.                
                <return>
                    the result, or {@code null} if not completed                    
                </return>
            </javadoc>
            <method name="setRawResult" type="void" line="880"/>
            <javadoc line="880">
                Forces the given value to be returned as a result.  This method
                  is designed to support extensions, and should not in general be
                  called otherwise.                
                <param>
                    value the value                    
                </param>
            </javadoc>
            <method name="exec" type="boolean" line="887"/>
            <javadoc line="887">
                Immediately performs the base action of this task.  This method
                  is designed to support extensions, and should not in general be
                  called otherwise. The return value controls whether this task
                  is considered to be done normally. It may return false in
                  asynchronous actions that require explicit invocations of{@link #complete} to become joinable. It may also throw an
                  (unchecked) exception to indicate abnormal exit.                
                <return>
                    {@code true} if completed normally                    
                </return>
            </javadoc>
            <javadoc line="897">
                Returns, but does not unschedule or execute, a task queued by
                  the current thread but not yet executed, if one is immediately
                  available. There is no guarantee that this task will actually
                  be polled or executed next. Conversely, this method may return
                  null even if a task exists but cannot be accessed without
                  contention with other threads.  This method is designed
                  primarily to support extensions, and is unlikely to be useful
                  otherwise.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <return>
                    the next task, or {@code null} if none are available                    
                </return>
            </javadoc>
            <method name="peekNextLocalTask" type="ForkJoinTask<?>" line="910"/>
            <javadoc line="913">
                Unschedules and returns, without executing, the next task
                  queued by the current thread but not yet executed.  This method
                  is designed primarily to support extensions, and is unlikely to
                  be useful otherwise.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <return>
                    the next task, or {@code null} if none are available                    
                </return>
            </javadoc>
            <method name="pollNextLocalTask" type="ForkJoinTask<?>" line="922"/>
            <javadoc line="925">
                Unschedules and returns, without executing, the next task
                  queued by the current thread but not yet executed, if one is
                  available, or if not available, a task that was forked by some
                  other thread, if available. Availability may be transient, so a{@code null} result does not necessarily imply quiescence
                  of the pool this task is operating in.  This method is designed
                  primarily to support extensions, and is unlikely to be useful
                  otherwise.
                  &lt;p&gt;This method may be invoked only from within {@codeForkJoinPool} computations (as may be determined using method{@link #inForkJoinPool}).  Attempts to invoke in other contexts
                  result in exceptions or errors, possibly including {@codeClassCastException}.                
                <return>
                    a task, or {@code null} if none are available                    
                </return>
            </javadoc>
            <method name="pollTask" type="ForkJoinTask<?>" line="937"/>
            <class name="AdaptedRunnable" line="940">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <extends class="ForkJoinTask">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </extends>
                <implements interface="RunnableFuture">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <javadoc line="940">
                    Adaptor for Runnables. This implements RunnableFuture
                      to be compliant with AbstractExecutorService constraints
                      when used in ForkJoinPool.                    
                </javadoc>
                <declaration name="runnable" type="Runnable" line="946"/>
                <declaration name="resultOnCompletion" type="T" line="947"/>
                <declaration name="result" type="T" line="948"/>
                <method name="AdaptedRunnable" type="constructor" line="949">
                    <params>
                        <param name="runnable" type="Runnable"/>
                        <param name="result" type="T"/>
                    </params>
                </method>
                <method name="getRawResult" type="T" line="954"/>
                <method name="setRawResult" type="void" line="957">
                    <params>
                        <param name="v" type="T"/>
                    </params>
                </method>
                <method name="exec" type="boolean" line="960"/>
                <method name="run" type="void" line="965"/>
                <declaration name="serialVersionUID" type="long" line="968"/>
            </class>
            <class name="AdaptedCallable" line="970">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <extends class="ForkJoinTask">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </extends>
                <implements interface="RunnableFuture">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <javadoc line="970">
                    Adaptor for Callables                    
                </javadoc>
                <declaration name="callable" type="Callable&lt;? extends T&gt;" line="974"/>
                <declaration name="result" type="T" line="975"/>
                <method name="AdaptedCallable" type="constructor" line="976">
                    <params>
                        <param name="callable" type="Callable<? extends T>"/>
                    </params>
                </method>
                <method name="getRawResult" type="T" line="980"/>
                <method name="setRawResult" type="void" line="983">
                    <params>
                        <param name="v" type="T"/>
                    </params>
                </method>
                <method name="exec" type="boolean" line="986">
                    <scope line="987"/>
                    <scope line="991"/>
                    <scope line="994"/>
                    <scope line="997"/>
                </method>
                <method name="run" type="void" line="1001"/>
                <declaration name="serialVersionUID" type="long" line="1004"/>
            </class>
            <javadoc line="1006">
                Returns a new {@code ForkJoinTask} that performs the {@code run}method of the given {@code Runnable} as its action, and returns
                  a null result upon {@link #join}.                
                <param>
                    runnable the runnable action                    
                </param>
                <return>
                    the task                    
                </return>
            </javadoc>
            <method name="adapt" type="ForkJoinTask<?>" line="1012">
                <params>
                    <param name="runnable" type="Runnable"/>
                </params>
            </method>
            <javadoc line="1015">
                Returns a new {@code ForkJoinTask} that performs the {@code run}method of the given {@code Runnable} as its action, and returns
                  the given result upon {@link #join}.                
                <param>
                    runnable the runnable action                    
                </param>
                <param>
                    result the result upon completion                    
                </param>
                <return>
                    the task                    
                </return>
            </javadoc>
            <method name="adapt" type="ForkJoinTask<T>" line="1022">
                <params>
                    <param name="runnable" type="Runnable"/>
                    <param name="result" type="T"/>
                </params>
            </method>
            <javadoc line="1025">
                Returns a new {@code ForkJoinTask} that performs the {@code call}method of the given {@code Callable} as its action, and returns
                  its result upon {@link #join}, translating any checked exceptions
                  encountered into {@code RuntimeException}.                
                <param>
                    callable the callable action                    
                </param>
                <return>
                    the task                    
                </return>
            </javadoc>
            <method name="adapt" type="ForkJoinTask<T>" line="1032">
                <params>
                    <param name="callable" type="Callable<? extends T>"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="1035"/>
            <javadoc line="1036">
                Saves the state to a stream (that is, serializes it).                
                <serialData>
                    the current run status and the exception thrown
                      during execution, or {@code null} if none                    
                </serialData>
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="writeObject" type="void" line="1042">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="1046">
                Reconstitutes the instance from a stream (that is, deserializes it).                
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="1050">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <declaration name="ex" type="Object" line="1052"/>
            </method>
            <declaration name="UNSAFE" type="sun.misc.Unsafe" line="1055"/>
            <declaration name="statusOffset" type="long" line="1056"/>
            <scope line="1057">
                <scope line="1061"/>
                <scope line="1065"/>
            </scope>
        </class>
    </source>