<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util"/>
        <class name="CopyOnWriteArraySet" line="39">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <implements interface="java.io.Serializable"/>
            <javadoc line="39">
                A {@link java.util.Set} that uses an internal {@link CopyOnWriteArrayList}for all of its operations.  Thus, it shares the same basic properties:
                  &lt;ul&gt;
                  &lt;li&gt;It is best suited for applications in which set sizes generally
                  stay small, read-only operations
                  vastly outnumber mutative operations, and you need
                  to prevent interference among threads during traversal.
                  &lt;li&gt;It is thread-safe.
                  &lt;li&gt;Mutative operations (&lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, etc.)
                  are expensive since they usually entail copying the entire underlying
                  array.
                  &lt;li&gt;Iterators do not support the mutative &lt;tt&gt;remove&lt;/tt&gt; operation.
                  &lt;li&gt;Traversal via iterators is fast and cannot encounter
                  interference from other threads. Iterators rely on
                  unchanging snapshots of the array at the time the iterators were
                  constructed.
                  &lt;/ul&gt;
                  &lt;p&gt; &lt;b&gt;Sample Usage.&lt;/b&gt; The following code sketch uses a
                  copy-on-write set to maintain a set of Handler objects that
                  perform some action upon state updates.
                  &lt;pre&gt; {@code}class Handler 
                  void handle(); ... }
                  class X {
                  private final CopyOnWriteArraySet&lt;Handler&gt; handlers
                  = new CopyOnWriteArraySet&lt;Handler&gt;();
                  public void addHandler(Handler h) { handlers.add(h); }
                  private long internalState;
                  private synchronized void changeState() { internalState = ...; }
                  public void update() {
                  changeState();
                  for (Handler handler : handlers)
                  handler.handle();
                  }
                  }}&lt;/pre&gt;
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <see>
                    CopyOnWriteArrayList                    
                </see>
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <E>
                       the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="91"/>
            <declaration name="al" type="CopyOnWriteArrayList&lt;E&gt;" line="93"/>
            <javadoc line="95">
                Creates an empty set.                
            </javadoc>
            <method name="CopyOnWriteArraySet" type="constructor" line="98"/>
            <javadoc line="102">
                Creates a set containing all of the elements of the specified
                  collection.                
                <param>
                    c the collection of elements to initially contain                    
                </param>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="CopyOnWriteArraySet" type="constructor" line="109">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="114">
                Returns the number of elements in this set.                
                <return>
                    the number of elements in this set                    
                </return>
            </javadoc>
            <method name="size" type="int" line="119"/>
            <javadoc line="123">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements.                
                <return>
                    <tt>true</tt> if this set contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="128"/>
            <javadoc line="132">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this set
                  contains an element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this set is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this set contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="141">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="145">
                Returns an array containing all of the elements in this set.
                  If this set makes any guarantees as to what order its elements
                  are returned by its iterator, this method must return the
                  elements in the same order.
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it
                  are maintained by this set.  (In other words, this method must
                  allocate a new array even if this set is backed by an array).
                  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all the elements in this set                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="161"/>
            <javadoc line="165">
                Returns an array containing all of the elements in this set; the
                  runtime type of the returned array is that of the specified array.
                  If the set fits in the specified array, it is returned therein.
                  Otherwise, a new array is allocated with the runtime type of the
                  specified array and the size of this set.
                  &lt;p&gt;If this set fits in the specified array with room to spare
                  (i.e., the array has more elements than this set), the element in
                  the array immediately following the end of the set is set to
                  &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of this
                  set &lt;i&gt;only&lt;/i&gt; if the caller knows that this set does not contain
                  any null elements.)
                  &lt;p&gt;If this set makes any guarantees as to what order its elements
                  are returned by its iterator, this method must return the elements
                  in the same order.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a set known to contain only strings.
                  The following code can be used to dump the set into a newly allocated
                  array of &lt;tt&gt;String&lt;/tt&gt;:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of this set are to be
                      stored, if it is big enough; otherwise, a new array of the same
                      runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing all the elements in this set                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in this
                      set                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="207">
                <params>
                    <param name="a" type="T[]"/>
                </params>
            </method>
            <javadoc line="211">
                Removes all of the elements from this set.
                  The set will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="215"/>
            <javadoc line="219">
                Removes the specified element from this set if it is present.
                  More formally, removes an element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;,
                  if this set contains such an element.  Returns &lt;tt&gt;true&lt;/tt&gt; if
                  this set contained the element (or equivalently, if this set
                  changed as a result of the call).  (This set will not contain the
                  element once the call returns.)                
                <param>
                    o object to be removed from this set, if present                    
                </param>
                <return>
                    <tt>true</tt> if this set contained the specified element                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="231">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="235">
                Adds the specified element to this set if it is not already present.
                  More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if
                  the set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that
                  &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.
                  If this set already contains the element, the call leaves the set
                  unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    e element to be added to this set                    
                </param>
                <return>
                    <tt>true</tt> if this set did not already contain the specified
                      element                    
                </return>
            </javadoc>
            <method name="add" type="boolean" line="247">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="251">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains all of the elements of the
                  specified collection.  If the specified collection is also a set, this
                  method returns &lt;tt&gt;true&lt;/tt&gt; if it is a &lt;i&gt;subset&lt;/i&gt; of this set.                
                <param>
                    c collection to be checked for containment in this set                    
                </param>
                <return>
                    <tt>true</tt> if this set contains all of the elements of the
                      specified collection                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="containsAll" type="boolean" line="262">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="266">
                Adds all of the elements in the specified collection to this set if
                  they&apos;re not already present.  If the specified collection is also a
                  set, the &lt;tt&gt;addAll&lt;/tt&gt; operation effectively modifies this set so
                  that its value is the &lt;i&gt;union&lt;/i&gt; of the two sets.  The behavior of
                  this operation is undefined if the specified collection is modified
                  while the operation is in progress.                
                <param>
                    c collection containing elements to be added to this set                    
                </param>
                <return>
                    <tt>true</tt> if this set changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <see>
                    #add(Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="279">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="283">
                Removes from this set all of its elements that are contained in the
                  specified collection.  If the specified collection is also a set,
                  this operation effectively modifies this set so that its value is the
                  &lt;i&gt;asymmetric set difference&lt;/i&gt; of the two sets.                
                <param>
                    c collection containing elements to be removed from this set                    
                </param>
                <return>
                    <tt>true</tt> if this set changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of an element of this set
                      is incompatible with the specified collection (optional)                    
                </throws>
                <throws>
                    NullPointerException if this set contains a null element and the
                      specified collection does not permit null elements (optional),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
            </javadoc>
            <method name="removeAll" type="boolean" line="298">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="302">
                Retains only the elements in this set that are contained in the
                  specified collection.  In other words, removes from this set all of
                  its elements that are not contained in the specified collection.  If
                  the specified collection is also a set, this operation effectively
                  modifies this set so that its value is the &lt;i&gt;intersection&lt;/i&gt; of the
                  two sets.                
                <param>
                    c collection containing elements to be retained in this set                    
                </param>
                <return>
                    <tt>true</tt> if this set changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the class of an element of this set
                      is incompatible with the specified collection (optional)                    
                </throws>
                <throws>
                    NullPointerException if this set contains a null element and the
                      specified collection does not permit null elements (optional),
                      or if the specified collection is null                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
            </javadoc>
            <method name="retainAll" type="boolean" line="319">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="323">
                Returns an iterator over the elements contained in this set
                  in the order in which these elements were added.
                  &lt;p&gt;The returned iterator provides a snapshot of the state of the set
                  when the iterator was constructed. No synchronization is needed while
                  traversing the iterator. The iterator does &lt;em&gt;NOT&lt;/em&gt; support the
                  &lt;tt&gt;remove&lt;/tt&gt; method.                
                <return>
                    an iterator over the elements in this set                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="334"/>
            <javadoc line="338">
                Compares the specified object with this set for equality.
                  Returns {@code true} if the specified object is the same object
                  as this object, or if it is also a {@link Set} and the elements
                  returned by an {@linkplain List#iterator() iterator} over the
                  specified set are the same as the elements returned by an
                  iterator over this set.  More formally, the two iterators are
                  considered to return the same elements if they return the same
                  number of elements and for every element {@code e1} returned by
                  the iterator over the specified set, there is an element{@code e2} returned by the iterator over this set such that{@code (e1==null ? e2==null : e1.equals(e2))}.                
                <param>
                    o object to be compared for equality with this set                    
                </param>
                <return>
                    {@code true} if the specified object is equal to this set                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="354">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <comment line="362">
                    Uses O(n^2) algorithm that is only appropriate                    
                </comment>
                <comment line="363">
                    for small sets, which CopyOnWriteArraySets should be.                    
                </comment>
                <comment line="365">
                    Use a single snapshot of underlying array                    
                </comment>
                <comment line="368">
                    Mark matched elements to avoid re-checking                    
                </comment>
                <declaration name="set" type="Set&lt;?&gt;" line="359"/>
                <declaration name="it" type="Iterator&lt;?&gt;" line="360"/>
                <declaration name="elements" type="Object[]" line="366"/>
                <declaration name="len" type="int" line="367"/>
                <declaration name="matched" type="boolean[]" line="369"/>
                <declaration name="k" type="int" line="370"/>
                <scope line="371">
                    <declaration name="x" type="Object" line="374"/>
                    <scope line="375">
                        <scope line="376"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="386">
                Test for equality, coping with nulls.                
            </javadoc>
            <method name="eq" type="boolean" line="389">
                <params>
                    <param name="o1" type="Object"/>
                    <param name="o2" type="Object"/>
                </params>
            </method>
        </class>
    </source>