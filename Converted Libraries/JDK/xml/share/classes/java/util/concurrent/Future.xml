<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <interface name="Future">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <javadoc line="2">
                A &lt;tt&gt;Future&lt;/tt&gt; represents the result of an asynchronous
                  computation.  Methods are provided to check if the computation is
                  complete, to wait for its completion, and to retrieve the result of
                  the computation.  The result can only be retrieved using method
                  &lt;tt&gt;get&lt;/tt&gt; when the computation has completed, blocking if
                  necessary until it is ready.  Cancellation is performed by the
                  &lt;tt&gt;cancel&lt;/tt&gt; method.  Additional methods are provided to
                  determine if the task completed normally or was cancelled. Once a
                  computation has completed, the computation cannot be cancelled.
                  If you would like to use a &lt;tt&gt;Future&lt;/tt&gt; for the sake
                  of cancellability but not provide a usable result, you can
                  declare types of the form {@code Future&lt;?&gt;} and
                  return &lt;tt&gt;null&lt;/tt&gt; as a result of the underlying task.
                  &lt;p&gt;
                  &lt;b&gt;Sample Usage&lt;/b&gt; (Note that the following classes are all
                  made-up.) &lt;p&gt;
                  &lt;pre&gt; {@code}interface ArchiveSearcher 
                  String search(String target); }
                  class App {
                  ExecutorService executor = ...
                  ArchiveSearcher searcher = ...
                  void showSearch(final String target)
                  throws InterruptedException {
                  Future&lt;String&gt; future
                  = executor.submit(new Callable&lt;String&gt;() {
                  public String call() {
                  return searcher.search(target);
                  }});
                  displayOtherThings(); // do other things while searching
                  try {
                  displayText(future.get()); // use future
                  } catch (ExecutionException ex) { cleanup(); return; }
                  }
                  }}&lt;/pre&gt;
                  The {@link FutureTask} class is an implementation of &lt;tt&gt;Future&lt;/tt&gt; that
                  implements &lt;tt&gt;Runnable&lt;/tt&gt;, and so may be executed by an &lt;tt&gt;Executor&lt;/tt&gt;.
                  For example, the above construction with &lt;tt&gt;submit&lt;/tt&gt; could be replaced by:
                  &lt;pre&gt; {@codeFutureTask&lt;String&gt; future =}new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() 
                  public String call() {
                  return searcher.search(target);
                  }});
                  executor.execute(future);}&lt;/pre&gt;
                  &lt;p&gt;Memory consistency effects: Actions taken by the asynchronous computation
                  &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt; &lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  actions following the corresponding {@code Future.get()} in another thread.                
                <see>
                    FutureTask                    
                </see>
                <see>
                    Executor                    
                </see>
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;V&gt;
                      The result type returned by this Future&apos;s &lt;tt&gt;get&lt;/tt&gt; method                    
                </param>
            </javadoc>
            <method name="cancel" type="boolean" line="56"/>
            <javadoc line="56">
                Attempts to cancel execution of this task.  This attempt will
                  fail if the task has already completed, has already been cancelled,
                  or could not be cancelled for some other reason. If successful,
                  and this task has not started when &lt;tt&gt;cancel&lt;/tt&gt; is called,
                  this task should never run.  If the task has already started,
                  then the &lt;tt&gt;mayInterruptIfRunning&lt;/tt&gt; parameter determines
                  whether the thread executing this task should be interrupted in
                  an attempt to stop the task.
                  &lt;p&gt;After this method returns, subsequent calls to {@link #isDone} will
                  always return &lt;tt&gt;true&lt;/tt&gt;.  Subsequent calls to {@link #isCancelled}will always return &lt;tt&gt;true&lt;/tt&gt; if this method returned &lt;tt&gt;true&lt;/tt&gt;.                
                <param>
                    mayInterruptIfRunning &lt;tt&gt;true&lt;/tt&gt; if the thread executing this
                      task should be interrupted; otherwise, in-progress tasks are allowed
                      to complete                    
                </param>
                <return>
                    &lt;tt&gt;false&lt;/tt&gt; if the task could not be cancelled,
                      typically because it has already completed normally;
                      &lt;tt&gt;true&lt;/tt&gt; otherwise                    
                </return>
            </javadoc>
            <method name="isCancelled" type="boolean" line="75"/>
            <javadoc line="75">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this task was cancelled before it completed
                  normally.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this task was cancelled before it completed                    
                </return>
            </javadoc>
            <method name="isDone" type="boolean" line="81"/>
            <javadoc line="81">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this task completed.
                  Completion may be due to normal termination, an exception, or
                  cancellation -- in all of these cases, this method will return
                  &lt;tt&gt;true&lt;/tt&gt;.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this task completed                    
                </return>
            </javadoc>
            <method name="get" type="V" line="89"/>
            <javadoc line="89">
                Waits if necessary for the computation to complete, and then
                  retrieves its result.                
                <return>
                    the computed result                    
                </return>
                <throws>
                    CancellationException if the computation was cancelled                    
                </throws>
                <throws>
                    ExecutionException if the computation threw an
                      exception                    
                </throws>
                <throws>
                    InterruptedException if the current thread was interrupted
                      while waiting                    
                </throws>
            </javadoc>
            <method name="get" type="V" line="100"/>
            <javadoc line="100">
                Waits if necessary for at most the given time for the computation
                  to complete, and then retrieves its result, if available.                
                <param>
                    timeout the maximum time to wait                    
                </param>
                <param>
                    unit the time unit of the timeout argument                    
                </param>
                <return>
                    the computed result                    
                </return>
                <throws>
                    CancellationException if the computation was cancelled                    
                </throws>
                <throws>
                    ExecutionException if the computation threw an
                      exception                    
                </throws>
                <throws>
                    InterruptedException if the current thread was interrupted
                      while waiting                    
                </throws>
                <throws>
                    TimeoutException if the wait timed out                    
                </throws>
            </javadoc>
        </interface>
    </source>