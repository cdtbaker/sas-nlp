<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <class name="AtomicLong" line="3">
            <extends class="Number"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                A {@code long} value that may be updated atomically.  See the{@link java.util.concurrent.atomic} package specification for
                  description of the properties of atomic variables. An{@code AtomicLong} is used in applications such as atomically
                  incremented sequence numbers, and cannot be used as a replacement
                  for a {@link java.lang.Long}. However, this class does extend{@code Number} to allow uniform access by tools and utilities that
                  deal with numerically-based classes.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="13"/>
            <declaration name="unsafe" type="Unsafe" line="14"/>
            <declaration name="valueOffset" type="long" line="15"/>
            <declaration name="VM_SUPPORTS_LONG_CAS" type="boolean" line="16"/>
            <javadoc line="16">
                Records whether the underlying JVM supports lockless
                  compareAndSwap for longs. While the Unsafe.compareAndSwapLong
                  method works in either case, some constructions should be
                  handled at Java level to avoid locking user-visible locks.                
            </javadoc>
            <method name="VMSupportsCS8" type="boolean" line="23"/>
            <javadoc line="23">
                Returns whether underlying JVM supports lockless CompareAndSet
                  for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.                
            </javadoc>
            <scope line="28">
                <scope line="29"/>
                <scope line="32"/>
            </scope>
            <declaration name="value" type="long" line="36"/>
            <javadoc line="37">
                Creates a new AtomicLong with the given initial value.                
                <param>
                    initialValue the initial value                    
                </param>
            </javadoc>
            <method name="AtomicLong" type="constructor" line="41">
                <params>
                    <param name="initialValue" type="long"/>
                </params>
            </method>
            <javadoc line="44">
                Creates a new AtomicLong with initial value {@code 0}.                
            </javadoc>
            <method name="AtomicLong" type="constructor" line="47"/>
            <javadoc line="49">
                Gets the current value.                
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="long" line="53"/>
            <javadoc line="56">
                Sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="60">
                <params>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="63">
                Eventually sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="68">
                <params>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="71">
                Atomically sets to the given value and returns the old value.                
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="long" line="76">
                <params>
                    <param name="newValue" type="long"/>
                </params>
                <scope line="77">
                    <declaration name="current" type="long" line="78"/>
                </scope>
            </method>
            <javadoc line="82">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="90">
                <params>
                    <param name="expect" type="long"/>
                    <param name="update" type="long"/>
                </params>
            </method>
            <javadoc line="93">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="103">
                <params>
                    <param name="expect" type="long"/>
                    <param name="update" type="long"/>
                </params>
            </method>
            <javadoc line="106">
                Atomically increments by one the current value.                
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndIncrement" type="long" line="110">
                <scope line="111">
                    <declaration name="current" type="long" line="112"/>
                    <declaration name="next" type="long" line="113"/>
                </scope>
            </method>
            <javadoc line="117">
                Atomically decrements by one the current value.                
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndDecrement" type="long" line="121">
                <scope line="122">
                    <declaration name="current" type="long" line="123"/>
                    <declaration name="next" type="long" line="124"/>
                </scope>
            </method>
            <javadoc line="128">
                Atomically adds the given value to the current value.                
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndAdd" type="long" line="133">
                <params>
                    <param name="delta" type="long"/>
                </params>
                <scope line="134">
                    <declaration name="current" type="long" line="135"/>
                    <declaration name="next" type="long" line="136"/>
                </scope>
            </method>
            <javadoc line="140">
                Atomically increments by one the current value.                
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="incrementAndGet" type="long" line="144">
                <scope line="145">
                    <declaration name="current" type="long" line="146"/>
                    <declaration name="next" type="long" line="147"/>
                </scope>
            </method>
            <javadoc line="151">
                Atomically decrements by one the current value.                
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="decrementAndGet" type="long" line="155">
                <scope line="156">
                    <declaration name="current" type="long" line="157"/>
                    <declaration name="next" type="long" line="158"/>
                </scope>
            </method>
            <javadoc line="162">
                Atomically adds the given value to the current value.                
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="addAndGet" type="long" line="167">
                <params>
                    <param name="delta" type="long"/>
                </params>
                <scope line="168">
                    <declaration name="current" type="long" line="169"/>
                    <declaration name="next" type="long" line="170"/>
                </scope>
            </method>
            <javadoc line="174">
                Returns the String representation of the current value.                
                <return>
                    the String representation of the current value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="178"/>
            <method name="intValue" type="int" line="181"/>
            <method name="longValue" type="long" line="184"/>
            <method name="floatValue" type="float" line="187"/>
            <method name="doubleValue" type="double" line="190"/>
        </class>
    </source>