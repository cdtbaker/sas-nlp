<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent.atomic">
        <import package="sun.misc.Unsafe"/>
        <class name="AtomicLong" line="39">
            <extends class="Number"/>
            <comment line="56">
                setup to use Unsafe.compareAndSwapLong for updates                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="39">
                A {@code long} value that may be updated atomically.  See the{@link java.util.concurrent.atomic} package specification for
                  description of the properties of atomic variables. An{@code AtomicLong} is used in applications such as atomically
                  incremented sequence numbers, and cannot be used as a replacement
                  for a {@link java.lang.Long}. However, this class does extend{@code Number} to allow uniform access by tools and utilities that
                  deal with numerically-based classes.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="53"/>
            <declaration name="unsafe" type="Unsafe" line="56"/>
            <declaration name="valueOffset" type="long" line="57"/>
            <declaration name="VM_SUPPORTS_LONG_CAS" type="boolean" line="59"/>
            <javadoc line="59">
                Records whether the underlying JVM supports lockless
                  compareAndSwap for longs. While the Unsafe.compareAndSwapLong
                  method works in either case, some constructions should be
                  handled at Java level to avoid locking user-visible locks.                
            </javadoc>
            <method name="VMSupportsCS8" type="boolean" line="67"/>
            <javadoc line="67">
                Returns whether underlying JVM supports lockless CompareAndSet
                  for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.                
            </javadoc>
            <scope line="73">
                <scope line="74"/>
                <scope line="77"/>
            </scope>
            <declaration name="value" type="long" line="80"/>
            <javadoc line="82">
                Creates a new AtomicLong with the given initial value.                
                <param>
                    initialValue the initial value                    
                </param>
            </javadoc>
            <method name="AtomicLong" type="constructor" line="87">
                <params>
                    <param name="initialValue" type="long"/>
                </params>
            </method>
            <javadoc line="91">
                Creates a new AtomicLong with initial value {@code 0}.                
            </javadoc>
            <method name="AtomicLong" type="constructor" line="94"/>
            <javadoc line="97">
                Gets the current value.                
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="get" type="long" line="102"/>
            <javadoc line="106">
                Sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="111">
                <params>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="115">
                Eventually sets to the given value.                
                <param>
                    newValue the new value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lazySet" type="void" line="121">
                <params>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="125">
                Atomically sets to the given value and returns the old value.                
                <param>
                    newValue the new value                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndSet" type="long" line="131">
                <params>
                    <param name="newValue" type="long"/>
                </params>
                <scope line="132">
                    <declaration name="current" type="long" line="133"/>
                </scope>
            </method>
            <javadoc line="139">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful. False return indicates that
                      the actual value was not equal to the expected value.                    
                </return>
            </javadoc>
            <method name="compareAndSet" type="boolean" line="148">
                <params>
                    <param name="expect" type="long"/>
                    <param name="update" type="long"/>
                </params>
            </method>
            <javadoc line="152">
                Atomically sets the value to the given updated value
                  if the current value {@code ==} the expected value.
                  &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt;
                  and does not provide ordering guarantees, so is only rarely an
                  appropriate alternative to {@code compareAndSet}.                
                <param>
                    expect the expected value                    
                </param>
                <param>
                    update the new value                    
                </param>
                <return>
                    true if successful.                    
                </return>
            </javadoc>
            <method name="weakCompareAndSet" type="boolean" line="164">
                <params>
                    <param name="expect" type="long"/>
                    <param name="update" type="long"/>
                </params>
            </method>
            <javadoc line="168">
                Atomically increments by one the current value.                
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndIncrement" type="long" line="173">
                <scope line="174">
                    <declaration name="current" type="long" line="175"/>
                    <declaration name="next" type="long" line="176"/>
                </scope>
            </method>
            <javadoc line="182">
                Atomically decrements by one the current value.                
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndDecrement" type="long" line="187">
                <scope line="188">
                    <declaration name="current" type="long" line="189"/>
                    <declaration name="next" type="long" line="190"/>
                </scope>
            </method>
            <javadoc line="196">
                Atomically adds the given value to the current value.                
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the previous value                    
                </return>
            </javadoc>
            <method name="getAndAdd" type="long" line="202">
                <params>
                    <param name="delta" type="long"/>
                </params>
                <scope line="203">
                    <declaration name="current" type="long" line="204"/>
                    <declaration name="next" type="long" line="205"/>
                </scope>
            </method>
            <javadoc line="211">
                Atomically increments by one the current value.                
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="incrementAndGet" type="long" line="216">
                <scope line="217">
                    <declaration name="current" type="long" line="218"/>
                    <declaration name="next" type="long" line="219"/>
                </scope>
            </method>
            <javadoc line="225">
                Atomically decrements by one the current value.                
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="decrementAndGet" type="long" line="230">
                <scope line="231">
                    <declaration name="current" type="long" line="232"/>
                    <declaration name="next" type="long" line="233"/>
                </scope>
            </method>
            <javadoc line="239">
                Atomically adds the given value to the current value.                
                <param>
                    delta the value to add                    
                </param>
                <return>
                    the updated value                    
                </return>
            </javadoc>
            <method name="addAndGet" type="long" line="245">
                <params>
                    <param name="delta" type="long"/>
                </params>
                <scope line="246">
                    <declaration name="current" type="long" line="247"/>
                    <declaration name="next" type="long" line="248"/>
                </scope>
            </method>
            <javadoc line="254">
                Returns the String representation of the current value.                
                <return>
                    the String representation of the current value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="258"/>
            <method name="intValue" type="int" line="263"/>
            <method name="longValue" type="long" line="267"/>
            <method name="floatValue" type="float" line="271"/>
            <method name="doubleValue" type="double" line="275"/>
        </class>
    </source>