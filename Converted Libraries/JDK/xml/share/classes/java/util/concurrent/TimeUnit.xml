<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <javadoc line="38">
            A &lt;tt&gt;TimeUnit&lt;/tt&gt; represents time durations at a given unit of
              granularity and provides utility methods to convert across units,
              and to perform timing and delay operations in these units.  A
              &lt;tt&gt;TimeUnit&lt;/tt&gt; does not maintain time information, but only
              helps organize and use time representations that may be maintained
              separately across various contexts.  A nanosecond is defined as one
              thousandth of a microsecond, a microsecond as one thousandth of a
              millisecond, a millisecond as one thousandth of a second, a minute
              as sixty seconds, an hour as sixty minutes, and a day as twenty four
              hours.
              &lt;p&gt;A &lt;tt&gt;TimeUnit&lt;/tt&gt; is mainly used to inform time-based methods
              how a given timing parameter should be interpreted. For example,
              the following code will timeout in 50 milliseconds if the {@link java.util.concurrent.locks.Lock lock} is not available:
              &lt;pre&gt;  Lock lock = ...;
              if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...
              &lt;/pre&gt;
              while this code will timeout in 50 seconds:
              &lt;pre&gt;
              Lock lock = ...;
              if (lock.tryLock(50L, TimeUnit.SECONDS)) ...
              &lt;/pre&gt;
              Note however, that there is no guarantee that a particular timeout
              implementation will be able to notice the passage of time at the
              same granularity as the given &lt;tt&gt;TimeUnit&lt;/tt&gt;.            
            <since>
                1.5                
            </since>
            <author>
                Doug Lea                
            </author>
        </javadoc>
        <anonymous_class line="72">
            <method name="toNanos" type="long" line="73">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMicros" type="long" line="74">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMillis" type="long" line="75">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toSeconds" type="long" line="76">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMinutes" type="long" line="77">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toHours" type="long" line="78">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toDays" type="long" line="79">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="convert" type="long" line="80">
                <params>
                    <param name="d" type="long"/>
                    <param name="u" type="TimeUnit"/>
                </params>
            </method>
            <method name="excessNanos" type="int" line="81">
                <params>
                    <param name="d" type="long"/>
                    <param name="m" type="long"/>
                </params>
            </method>
        </anonymous_class>
        <anonymous_class line="83">
            <method name="toNanos" type="long" line="84">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMicros" type="long" line="85">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMillis" type="long" line="86">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toSeconds" type="long" line="87">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMinutes" type="long" line="88">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toHours" type="long" line="89">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toDays" type="long" line="90">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="convert" type="long" line="91">
                <params>
                    <param name="d" type="long"/>
                    <param name="u" type="TimeUnit"/>
                </params>
            </method>
            <method name="excessNanos" type="int" line="92">
                <params>
                    <param name="d" type="long"/>
                    <param name="m" type="long"/>
                </params>
            </method>
        </anonymous_class>
        <anonymous_class line="94">
            <method name="toNanos" type="long" line="95">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMicros" type="long" line="96">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMillis" type="long" line="97">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toSeconds" type="long" line="98">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMinutes" type="long" line="99">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toHours" type="long" line="100">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toDays" type="long" line="101">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="convert" type="long" line="102">
                <params>
                    <param name="d" type="long"/>
                    <param name="u" type="TimeUnit"/>
                </params>
            </method>
            <method name="excessNanos" type="int" line="103">
                <params>
                    <param name="d" type="long"/>
                    <param name="m" type="long"/>
                </params>
            </method>
        </anonymous_class>
        <anonymous_class line="105">
            <method name="toNanos" type="long" line="106">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMicros" type="long" line="107">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMillis" type="long" line="108">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toSeconds" type="long" line="109">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMinutes" type="long" line="110">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toHours" type="long" line="111">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toDays" type="long" line="112">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="convert" type="long" line="113">
                <params>
                    <param name="d" type="long"/>
                    <param name="u" type="TimeUnit"/>
                </params>
            </method>
            <method name="excessNanos" type="int" line="114">
                <params>
                    <param name="d" type="long"/>
                    <param name="m" type="long"/>
                </params>
            </method>
        </anonymous_class>
        <anonymous_class line="116">
            <method name="toNanos" type="long" line="117">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMicros" type="long" line="118">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMillis" type="long" line="119">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toSeconds" type="long" line="120">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMinutes" type="long" line="121">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toHours" type="long" line="122">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toDays" type="long" line="123">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="convert" type="long" line="124">
                <params>
                    <param name="d" type="long"/>
                    <param name="u" type="TimeUnit"/>
                </params>
            </method>
            <method name="excessNanos" type="int" line="125">
                <params>
                    <param name="d" type="long"/>
                    <param name="m" type="long"/>
                </params>
            </method>
        </anonymous_class>
        <anonymous_class line="127">
            <method name="toNanos" type="long" line="128">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMicros" type="long" line="129">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMillis" type="long" line="130">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toSeconds" type="long" line="131">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMinutes" type="long" line="132">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toHours" type="long" line="133">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toDays" type="long" line="134">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="convert" type="long" line="135">
                <params>
                    <param name="d" type="long"/>
                    <param name="u" type="TimeUnit"/>
                </params>
            </method>
            <method name="excessNanos" type="int" line="136">
                <params>
                    <param name="d" type="long"/>
                    <param name="m" type="long"/>
                </params>
            </method>
        </anonymous_class>
        <anonymous_class line="138">
            <method name="toNanos" type="long" line="139">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMicros" type="long" line="140">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMillis" type="long" line="141">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toSeconds" type="long" line="142">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toMinutes" type="long" line="143">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toHours" type="long" line="144">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="toDays" type="long" line="145">
                <params>
                    <param name="d" type="long"/>
                </params>
            </method>
            <method name="convert" type="long" line="146">
                <params>
                    <param name="d" type="long"/>
                    <param name="u" type="TimeUnit"/>
                </params>
            </method>
            <method name="excessNanos" type="int" line="147">
                <params>
                    <param name="d" type="long"/>
                    <param name="m" type="long"/>
                </params>
            </method>
        </anonymous_class>
        <declaration name="C0" type="long" line="151"/>
        <declaration name="C1" type="long" line="152"/>
        <declaration name="C2" type="long" line="153"/>
        <declaration name="C3" type="long" line="154"/>
        <declaration name="C4" type="long" line="155"/>
        <declaration name="C5" type="long" line="156"/>
        <declaration name="C6" type="long" line="157"/>
        <declaration name="MAX" type="long" line="159"/>
        <javadoc line="161">
            Scale d by m, checking for overflow.
              This has a short name to make above code more readable.            
        </javadoc>
        <method name="x" type="long" line="165">
            <params>
                <param name="d" type="long"/>
                <param name="m" type="long"/>
                <param name="over" type="long"/>
            </params>
        </method>
        <javadoc line="176">
            Convert the given time duration in the given unit to this
              unit.  Conversions from finer to coarser granularities
              truncate, so lose precision. For example converting
              &lt;tt&gt;999&lt;/tt&gt; milliseconds to seconds results in
              &lt;tt&gt;0&lt;/tt&gt;. Conversions from coarser to finer granularities
              with arguments that would numerically overflow saturate to
              &lt;tt&gt;Long.MIN_VALUE&lt;/tt&gt; if negative or &lt;tt&gt;Long.MAX_VALUE&lt;/tt&gt;
              if positive.
              &lt;p&gt;For example, to convert 10 minutes to milliseconds, use:
              &lt;tt&gt;TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)&lt;/tt&gt;            
            <param>
                sourceDuration the time duration in the given <tt>sourceUnit</tt>                
            </param>
            <param>
                sourceUnit the unit of the <tt>sourceDuration</tt> argument                
            </param>
            <return>
                the converted duration in this unit,
                  or <tt>Long.MIN_VALUE</tt> if conversion would negatively
                  overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.                
            </return>
        </javadoc>
        <method name="convert" type="long" line="195">
            <params>
                <param name="sourceDuration" type="long"/>
                <param name="sourceUnit" type="TimeUnit"/>
            </params>
        </method>
        <javadoc line="199">
            Equivalent to &lt;tt&gt;NANOSECONDS.convert(duration, this)&lt;/tt&gt;.            
            <param>
                duration the duration                
            </param>
            <return>
                the converted duration,
                  or <tt>Long.MIN_VALUE</tt> if conversion would negatively
                  overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.                
            </return>
            <see>
                #convert                
            </see>
        </javadoc>
        <method name="toNanos" type="long" line="207">
            <params>
                <param name="duration" type="long"/>
            </params>
        </method>
        <javadoc line="211">
            Equivalent to &lt;tt&gt;MICROSECONDS.convert(duration, this)&lt;/tt&gt;.            
            <param>
                duration the duration                
            </param>
            <return>
                the converted duration,
                  or <tt>Long.MIN_VALUE</tt> if conversion would negatively
                  overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.                
            </return>
            <see>
                #convert                
            </see>
        </javadoc>
        <method name="toMicros" type="long" line="219">
            <params>
                <param name="duration" type="long"/>
            </params>
        </method>
        <javadoc line="223">
            Equivalent to &lt;tt&gt;MILLISECONDS.convert(duration, this)&lt;/tt&gt;.            
            <param>
                duration the duration                
            </param>
            <return>
                the converted duration,
                  or <tt>Long.MIN_VALUE</tt> if conversion would negatively
                  overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.                
            </return>
            <see>
                #convert                
            </see>
        </javadoc>
        <method name="toMillis" type="long" line="231">
            <params>
                <param name="duration" type="long"/>
            </params>
        </method>
        <javadoc line="235">
            Equivalent to &lt;tt&gt;SECONDS.convert(duration, this)&lt;/tt&gt;.            
            <param>
                duration the duration                
            </param>
            <return>
                the converted duration,
                  or <tt>Long.MIN_VALUE</tt> if conversion would negatively
                  overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.                
            </return>
            <see>
                #convert                
            </see>
        </javadoc>
        <method name="toSeconds" type="long" line="243">
            <params>
                <param name="duration" type="long"/>
            </params>
        </method>
        <javadoc line="247">
            Equivalent to &lt;tt&gt;MINUTES.convert(duration, this)&lt;/tt&gt;.            
            <param>
                duration the duration                
            </param>
            <return>
                the converted duration,
                  or <tt>Long.MIN_VALUE</tt> if conversion would negatively
                  overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.                
            </return>
            <see>
                #convert                
            </see>
            <since>
                1.6                
            </since>
        </javadoc>
        <method name="toMinutes" type="long" line="256">
            <params>
                <param name="duration" type="long"/>
            </params>
        </method>
        <javadoc line="260">
            Equivalent to &lt;tt&gt;HOURS.convert(duration, this)&lt;/tt&gt;.            
            <param>
                duration the duration                
            </param>
            <return>
                the converted duration,
                  or <tt>Long.MIN_VALUE</tt> if conversion would negatively
                  overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.                
            </return>
            <see>
                #convert                
            </see>
            <since>
                1.6                
            </since>
        </javadoc>
        <method name="toHours" type="long" line="269">
            <params>
                <param name="duration" type="long"/>
            </params>
        </method>
        <javadoc line="273">
            Equivalent to &lt;tt&gt;DAYS.convert(duration, this)&lt;/tt&gt;.            
            <param>
                duration the duration                
            </param>
            <return>
                the converted duration                
            </return>
            <see>
                #convert                
            </see>
            <since>
                1.6                
            </since>
        </javadoc>
        <method name="toDays" type="long" line="280">
            <params>
                <param name="duration" type="long"/>
            </params>
        </method>
        <method name="excessNanos" type="int" line="284"/>
        <javadoc line="284">
            Utility to compute the excess-nanosecond argument to wait,
              sleep, join.            
            <param>
                d the duration                
            </param>
            <param>
                m the number of milliseconds                
            </param>
            <return>
                the number of nanoseconds                
            </return>
        </javadoc>
        <javadoc line="293">
            Performs a timed {@link Object#wait(long,int) Object.wait}using this time unit.
              This is a convenience method that converts timeout arguments
              into the form required by the &lt;tt&gt;Object.wait&lt;/tt&gt; method.
              &lt;p&gt;For example, you could implement a blocking &lt;tt&gt;poll&lt;/tt&gt;
              method (see {@link BlockingQueue#poll BlockingQueue.poll})
              using:
              &lt;pre&gt; {@codepublic synchronized Object poll(long timeout, TimeUnit unit)}throws InterruptedException 
              while (empty) {
              unit.timedWait(this, timeout);
              ...
              }
              }}&lt;/pre&gt;            
            <param>
                obj the object to wait on                
            </param>
            <param>
                timeout the maximum time to wait. If less than
                  or equal to zero, do not wait at all.                
            </param>
            <throws>
                InterruptedException if interrupted while waiting                
            </throws>
        </javadoc>
        <method name="timedWait" type="void" line="318">
            <params>
                <param name="obj" type="Object"/>
                <param name="timeout" type="long"/>
            </params>
            <scope line="319">
                <declaration name="ms" type="long" line="320"/>
                <declaration name="ns" type="int" line="321"/>
            </scope>
        </method>
        <javadoc line="326">
            Performs a timed {@link Thread#join(long,int) Thread.join}using this time unit.
              This is a convenience method that converts time arguments into the
              form required by the &lt;tt&gt;Thread.join&lt;/tt&gt; method.            
            <param>
                thread the thread to wait for                
            </param>
            <param>
                timeout the maximum time to wait. If less than
                  or equal to zero, do not wait at all.                
            </param>
            <throws>
                InterruptedException if interrupted while waiting                
            </throws>
        </javadoc>
        <method name="timedJoin" type="void" line="338">
            <params>
                <param name="thread" type="Thread"/>
                <param name="timeout" type="long"/>
            </params>
            <scope line="339">
                <declaration name="ms" type="long" line="340"/>
                <declaration name="ns" type="int" line="341"/>
            </scope>
        </method>
        <javadoc line="346">
            Performs a {@link Thread#sleep(long,int) Thread.sleep} using
              this time unit.
              This is a convenience method that converts time arguments into the
              form required by the &lt;tt&gt;Thread.sleep&lt;/tt&gt; method.            
            <param>
                timeout the minimum time to sleep. If less than
                  or equal to zero, do not sleep at all.                
            </param>
            <throws>
                InterruptedException if interrupted while sleeping                
            </throws>
        </javadoc>
        <method name="sleep" type="void" line="356">
            <params>
                <param name="timeout" type="long"/>
            </params>
            <scope line="357">
                <declaration name="ms" type="long" line="358"/>
                <declaration name="ns" type="int" line="359"/>
            </scope>
        </method>
    </source>