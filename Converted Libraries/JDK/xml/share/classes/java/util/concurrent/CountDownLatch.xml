<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.concurrent.locks"/>
        <import package="java.util.concurrent.atomic"/>
        <class name="CountDownLatch" line="40">
            <javadoc line="40">
                A synchronization aid that allows one or more threads to wait until
                  a set of operations being performed in other threads completes.
                  &lt;p&gt;A {@code CountDownLatch} is initialized with a given &lt;em&gt;count&lt;/em&gt;.
                  The {@link #await await} methods block until the current count reaches
                  zero due to invocations of the {@link #countDown} method, after which
                  all waiting threads are released and any subsequent invocations of{@link #await await} return immediately.  This is a one-shot phenomenon
                  -- the count cannot be reset.  If you need a version that resets the
                  count, consider using a {@link CyclicBarrier}.
                  &lt;p&gt;A {@code CountDownLatch} is a versatile synchronization tool
                  and can be used for a number of purposes.  A{@code CountDownLatch} initialized with a count of one serves as a
                  simple on/off latch, or gate: all threads invoking {@link #await await}wait at the gate until it is opened by a thread invoking {@link #countDown}.  A {@code CountDownLatch} initialized to &lt;em&gt;N&lt;/em&gt;
                  can be used to make one thread wait until &lt;em&gt;N&lt;/em&gt; threads have
                  completed some action, or some action has been completed N times.
                  &lt;p&gt;A useful property of a {@code CountDownLatch} is that it
                  doesn&apos;t require that threads calling {@code countDown} wait for
                  the count to reach zero before proceeding, it simply prevents any
                  thread from proceeding past an {@link #await await} until all
                  threads could pass.
                  &lt;p&gt;&lt;b&gt;Sample usage:&lt;/b&gt; Here is a pair of classes in which a group
                  of worker threads use two countdown latches:
                  &lt;ul&gt;
                  &lt;li&gt;The first is a start signal that prevents any worker from proceeding
                  until the driver is ready for them to proceed;
                  &lt;li&gt;The second is a completion signal that allows the driver to wait
                  until all workers have completed.
                  &lt;/ul&gt;
                  &lt;pre&gt;
                  class Driver { // ...
                  void main() throws InterruptedException {
                  CountDownLatch startSignal = new CountDownLatch(1);
                  CountDownLatch doneSignal = new CountDownLatch(N);
                  for (int i = 0; i &lt; N; ++i) // create and start threads
                  new Thread(new Worker(startSignal, doneSignal)).start();
                  doSomethingElse();            // don&apos;t let run yet
                  startSignal.countDown();      // let all threads proceed
                  doSomethingElse();
                  doneSignal.await();           // wait for all to finish
                  }
                  }
                  class Worker implements Runnable {
                  private final CountDownLatch startSignal;
                  private final CountDownLatch doneSignal;
                  Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {
                  this.startSignal = startSignal;
                  this.doneSignal = doneSignal;
                  }
                  public void run() {
                  try {
                  startSignal.await();
                  doWork();
                  doneSignal.countDown();
                  } catch (InterruptedException ex) {} // return;
                  }
                  void doWork() { ... }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;Another typical usage would be to divide a problem into N parts,
                  describe each part with a Runnable that executes that portion and
                  counts down on the latch, and queue all the Runnables to an
                  Executor.  When all sub-parts are complete, the coordinating thread
                  will be able to pass through await. (When threads must repeatedly
                  count down in this way, instead use a {@link CyclicBarrier}.)
                  &lt;pre&gt;
                  class Driver2 { // ...
                  void main() throws InterruptedException {
                  CountDownLatch doneSignal = new CountDownLatch(N);
                  Executor e = ...
                  for (int i = 0; i &lt; N; ++i) // create and start threads
                  e.execute(new WorkerRunnable(doneSignal, i));
                  doneSignal.await();           // wait for all to finish
                  }
                  }
                  class WorkerRunnable implements Runnable {
                  private final CountDownLatch doneSignal;
                  private final int i;
                  WorkerRunnable(CountDownLatch doneSignal, int i) {
                  this.doneSignal = doneSignal;
                  this.i = i;
                  }
                  public void run() {
                  try {
                  doWork(i);
                  doneSignal.countDown();
                  } catch (InterruptedException ex) {} // return;
                  }
                  void doWork() { ... }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;Memory consistency effects: Until the count reaches
                  zero, actions in a thread prior to calling{@code countDown()}&lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;
                  actions following a successful return from a corresponding{@code await()} in another thread.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
            </javadoc>
            <class name="Sync" line="162">
                <extends class="AbstractQueuedSynchronizer"/>
                <javadoc line="162">
                    Synchronization control For CountDownLatch.
                      Uses AQS state to represent count.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="167"/>
                <method name="Sync" type="constructor" line="169">
                    <params>
                        <param name="count" type="int"/>
                    </params>
                </method>
                <method name="getCount" type="int" line="173"/>
                <method name="tryAcquireShared" type="int" line="177">
                    <params>
                        <param name="acquires" type="int"/>
                    </params>
                </method>
                <method name="tryReleaseShared" type="boolean" line="181">
                    <params>
                        <param name="releases" type="int"/>
                    </params>
                    <comment line="182">
                        Decrement count; signal when transition to zero                        
                    </comment>
                    <scope line="183">
                        <declaration name="c" type="int" line="184"/>
                        <declaration name="nextc" type="int" line="187"/>
                    </scope>
                </method>
            </class>
            <declaration name="sync" type="Sync" line="194"/>
            <javadoc line="196">
                Constructs a {@code CountDownLatch} initialized with the given count.                
                <param>
                    count the number of times {@link #countDown} must be invoked
                      before threads can pass through {@link #await}                    
                </param>
                <throws>
                    IllegalArgumentException if {@code count} is negative                    
                </throws>
            </javadoc>
            <method name="CountDownLatch" type="constructor" line="203">
                <params>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="208">
                Causes the current thread to wait until the latch has counted down to
                  zero, unless the thread is {@linkplain Thread#interrupt interrupted}.
                  &lt;p&gt;If the current count is zero then this method returns immediately.
                  &lt;p&gt;If the current count is greater than zero then the current
                  thread becomes disabled for thread scheduling purposes and lies
                  dormant until one of two things happen:
                  &lt;ul&gt;
                  &lt;li&gt;The count reaches zero due to invocations of the{@link #countDown} method; or
                  &lt;li&gt;Some other thread {@linkplain Thread#interrupt interrupts}the current thread.
                  &lt;/ul&gt;
                  &lt;p&gt;If the current thread:
                  &lt;ul&gt;
                  &lt;li&gt;has its interrupted status set on entry to this method; or
                  &lt;li&gt;is {@linkplain Thread#interrupt interrupted} while waiting,
                  &lt;/ul&gt;
                  then {@link InterruptedException} is thrown and the current thread&apos;s
                  interrupted status is cleared.                
                <throws>
                    InterruptedException if the current thread is interrupted
                      while waiting                    
                </throws>
            </javadoc>
            <method name="await" type="void" line="235"/>
            <javadoc line="239">
                Causes the current thread to wait until the latch has counted down to
                  zero, unless the thread is {@linkplain Thread#interrupt interrupted},
                  or the specified waiting time elapses.
                  &lt;p&gt;If the current count is zero then this method returns immediately
                  with the value {@code true}.
                  &lt;p&gt;If the current count is greater than zero then the current
                  thread becomes disabled for thread scheduling purposes and lies
                  dormant until one of three things happen:
                  &lt;ul&gt;
                  &lt;li&gt;The count reaches zero due to invocations of the{@link #countDown} method; or
                  &lt;li&gt;Some other thread {@linkplain Thread#interrupt interrupts}the current thread; or
                  &lt;li&gt;The specified waiting time elapses.
                  &lt;/ul&gt;
                  &lt;p&gt;If the count reaches zero then the method returns with the
                  value {@code true}.
                  &lt;p&gt;If the current thread:
                  &lt;ul&gt;
                  &lt;li&gt;has its interrupted status set on entry to this method; or
                  &lt;li&gt;is {@linkplain Thread#interrupt interrupted} while waiting,
                  &lt;/ul&gt;
                  then {@link InterruptedException} is thrown and the current thread&apos;s
                  interrupted status is cleared.
                  &lt;p&gt;If the specified waiting time elapses then the value {@code false}is returned.  If the time is less than or equal to zero, the method
                  will not wait at all.                
                <param>
                    timeout the maximum time to wait                    
                </param>
                <param>
                    unit the time unit of the {@code timeout} argument                    
                </param>
                <return>
                    {@code true} if the count reached zero and {@code false}if the waiting time elapsed before the count reached zero                    
                </return>
                <throws>
                    InterruptedException if the current thread is interrupted
                      while waiting                    
                </throws>
            </javadoc>
            <method name="await" type="boolean" line="281">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="285">
                Decrements the count of the latch, releasing all waiting threads if
                  the count reaches zero.
                  &lt;p&gt;If the current count is greater than zero then it is decremented.
                  If the new count is zero then all waiting threads are re-enabled for
                  thread scheduling purposes.
                  &lt;p&gt;If the current count equals zero then nothing happens.                
            </javadoc>
            <method name="countDown" type="void" line="295"/>
            <javadoc line="299">
                Returns the current count.
                  &lt;p&gt;This method is typically used for debugging and testing purposes.                
                <return>
                    the current count                    
                </return>
            </javadoc>
            <method name="getCount" type="long" line="306"/>
            <javadoc line="310">
                Returns a string identifying this latch, as well as its state.
                  The state, in brackets, includes the String {@code &quot;Count =&quot;}followed by the current count.                
                <return>
                    a string identifying this latch, as well as its state                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="317"/>
        </class>
    </source>