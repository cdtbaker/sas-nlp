<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.concurrent.locks"/>
        <import package="java.util"/>
        <class name="DelayQueue" line="4">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <implements interface="BlockingQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="4">
                An unbounded {@linkplain BlockingQueue blocking queue} of
                  &lt;tt&gt;Delayed&lt;/tt&gt; elements, in which an element can only be taken
                  when its delay has expired.  The &lt;em&gt;head&lt;/em&gt; of the queue is that
                  &lt;tt&gt;Delayed&lt;/tt&gt; element whose delay expired furthest in the
                  past.  If no delay has expired there is no head and &lt;tt&gt;poll&lt;/tt&gt;
                  will return &lt;tt&gt;null&lt;/tt&gt;. Expiration occurs when an element&apos;s
                  &lt;tt&gt;getDelay(TimeUnit.NANOSECONDS)&lt;/tt&gt; method returns a value less
                  than or equal to zero.  Even though unexpired elements cannot be
                  removed using &lt;tt&gt;take&lt;/tt&gt; or &lt;tt&gt;poll&lt;/tt&gt;, they are otherwise
                  treated as normal elements. For example, the &lt;tt&gt;size&lt;/tt&gt; method
                  returns the count of both expired and unexpired elements.
                  This queue does not permit null elements.
                  &lt;p&gt;This class and its iterator implement all of the
                  &lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link Iterator} interfaces.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    <E>
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="lock" type="ReentrantLock" line="28"/>
            <declaration name="q" type="PriorityQueue&lt;E&gt;" line="29"/>
            <declaration name="leader" type="Thread" line="30"/>
            <javadoc line="30">
                Thread designated to wait for the element at the head of
                  the queue.  This variant of the Leader-Follower pattern
                  (http://www.cs.wustl.edu/~schmidt/POSA/POSA2/) serves to
                  minimize unnecessary timed waiting.  When a thread becomes
                  the leader, it waits only for the next delay to elapse, but
                  other threads await indefinitely.  The leader thread must
                  signal some other thread before returning from take() or
                  poll(...), unless some other thread becomes leader in the
                  interim.  Whenever the head of the queue is replaced with
                  an element with an earlier expiration time, the leader
                  field is invalidated by being reset to null, and some
                  waiting thread, but not necessarily the current leader, is
                  signalled.  So waiting threads must be prepared to acquire
                  and lose leadership while waiting.                
            </javadoc>
            <declaration name="available" type="Condition" line="47"/>
            <javadoc line="47">
                Condition signalled when a newer element becomes available
                  at the head of the queue or a new thread may need to
                  become leader.                
            </javadoc>
            <javadoc line="53">
                Creates a new &lt;tt&gt;DelayQueue&lt;/tt&gt; that is initially empty.                
            </javadoc>
            <method name="DelayQueue" type="constructor" line="56"/>
            <javadoc line="58">
                Creates a &lt;tt&gt;DelayQueue&lt;/tt&gt; initially containing the elements of the
                  given collection of {@link Delayed} instances.                
                <param>
                    c the collection of elements to initially contain                    
                </param>
                <throws>
                    NullPointerException if the specified collection or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="DelayQueue" type="constructor" line="65">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="68">
                Inserts the specified element into this delay queue.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    <tt>true</tt> (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="74">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="77">
                Inserts the specified element into this delay queue.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    <tt>true</tt>                    
                </return>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="83">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="84"/>
                <scope line="86">
                    <scope line="88"/>
                </scope>
                <scope line="94"/>
            </method>
            <javadoc line="98">
                Inserts the specified element into this delay queue. As the queue is
                  unbounded this method will never block.                
                <param>
                    e the element to add                    
                </param>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="104">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="107">
                Inserts the specified element into this delay queue. As the queue is
                  unbounded this method will never block.                
                <param>
                    e the element to add                    
                </param>
                <param>
                    timeout This parameter is ignored as the method never blocks                    
                </param>
                <param>
                    unit This parameter is ignored as the method never blocks                    
                </param>
                <return>
                    <tt>true</tt>                    
                </return>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="116">
                <params>
                    <param name="e" type="E"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="119">
                Retrieves and removes the head of this queue, or returns &lt;tt&gt;null&lt;/tt&gt;
                  if this queue has no elements with an expired delay.                
                <return>
                    the head of this queue, or <tt>null</tt> if this
                      queue has no elements with an expired delay                    
                </return>
            </javadoc>
            <method name="poll" type="E" line="125">
                <declaration name="lock" type="ReentrantLock" line="126"/>
                <scope line="128">
                    <declaration name="first" type="E" line="129"/>
                </scope>
                <scope line="133"/>
            </method>
            <javadoc line="137">
                Retrieves and removes the head of this queue, waiting if necessary
                  until an element with an expired delay is available on this queue.                
                <return>
                    the head of this queue                    
                </return>
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="take" type="E" line="143">
                <declaration name="lock" type="ReentrantLock" line="144"/>
                <scope line="146">
                    <scope line="147">
                        <declaration name="first" type="E" line="148"/>
                        <scope line="150">
                            <declaration name="delay" type="long" line="151"/>
                            <scope line="154">
                                <declaration name="thisThread" type="Thread" line="155"/>
                                <scope line="157"/>
                                <scope line="160"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="167"/>
            </method>
            <javadoc line="172">
                Retrieves and removes the head of this queue, waiting if necessary
                  until an element with an expired delay is available on this queue,
                  or the specified wait time expires.                
                <return>
                    the head of this queue, or <tt>null</tt> if the
                      specified waiting time elapses before an element with
                      an expired delay becomes available                    
                </return>
                <throws>
                    InterruptedException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="poll" type="E" line="181">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <declaration name="nanos" type="long" line="182"/>
                <declaration name="lock" type="ReentrantLock" line="183"/>
                <scope line="185">
                    <scope line="186">
                        <declaration name="first" type="E" line="187"/>
                        <scope line="188"/>
                        <scope line="192">
                            <declaration name="delay" type="long" line="193"/>
                            <scope line="197">
                                <declaration name="thisThread" type="Thread" line="198"/>
                                <scope line="200">
                                    <declaration name="timeLeft" type="long" line="201"/>
                                </scope>
                                <scope line="204"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="211"/>
            </method>
            <javadoc line="216">
                Retrieves, but does not remove, the head of this queue, or
                  returns &lt;tt&gt;null&lt;/tt&gt; if this queue is empty.  Unlike
                  &lt;tt&gt;poll&lt;/tt&gt;, if no expired elements are available in the queue,
                  this method returns the element that will expire next,
                  if one exists.                
                <return>
                    the head of this queue, or <tt>null</tt> if this
                      queue is empty.                    
                </return>
            </javadoc>
            <method name="peek" type="E" line="225">
                <declaration name="lock" type="ReentrantLock" line="226"/>
                <scope line="228"/>
                <scope line="231"/>
            </method>
            <method name="size" type="int" line="235">
                <declaration name="lock" type="ReentrantLock" line="236"/>
                <scope line="238"/>
                <scope line="241"/>
            </method>
            <javadoc line="245">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="251">
                <params>
                    <param name="c" type="Collection<? super E>"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="254"/>
                <scope line="256">
                    <declaration name="n" type="int" line="257"/>
                    <scope line="258">
                        <declaration name="first" type="E" line="259"/>
                    </scope>
                </scope>
                <scope line="266"/>
            </method>
            <javadoc line="270">
                @throws UnsupportedOperationException {@inheritDoc}                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="drainTo" type="int" line="276">
                <params>
                    <param name="c" type="Collection<? super E>"/>
                    <param name="maxElements" type="int"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="280"/>
                <scope line="282">
                    <declaration name="n" type="int" line="283"/>
                    <scope line="284">
                        <declaration name="first" type="E" line="285"/>
                    </scope>
                </scope>
                <scope line="292"/>
            </method>
            <javadoc line="296">
                Atomically removes all of the elements from this delay queue.
                  The queue will be empty after this call returns.
                  Elements with an unexpired delay are not waited for; they are
                  simply discarded from the queue.                
            </javadoc>
            <method name="clear" type="void" line="302">
                <declaration name="lock" type="ReentrantLock" line="303"/>
                <scope line="305"/>
                <scope line="308"/>
            </method>
            <javadoc line="312">
                Always returns &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; because
                  a &lt;tt&gt;DelayQueue&lt;/tt&gt; is not capacity constrained.                
                <return>
                    <tt>Integer.MAX_VALUE</tt>                    
                </return>
            </javadoc>
            <method name="remainingCapacity" type="int" line="317"/>
            <javadoc line="320">
                Returns an array containing all of the elements in this queue.
                  The returned array elements are in no particular order.
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this queue.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this queue                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="330">
                <declaration name="lock" type="ReentrantLock" line="331"/>
                <scope line="333"/>
                <scope line="336"/>
            </method>
            <javadoc line="340">
                Returns an array containing all of the elements in this queue; the
                  runtime type of the returned array is that of the specified array.
                  The returned array elements are in no particular order.
                  If the queue fits in the specified array, it is returned therein.
                  Otherwise, a new array is allocated with the runtime type of the
                  specified array and the size of this queue.
                  &lt;p&gt;If this queue fits in the specified array with room to spare
                  (i.e., the array has more elements than this queue), the element in
                  the array immediately following the end of the queue is set to
                  &lt;tt&gt;null&lt;/tt&gt;.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;The following code can be used to dump a delay queue into a newly
                  allocated array of &lt;tt&gt;Delayed&lt;/tt&gt;:
                  &lt;pre&gt;
                  Delayed[] a = q.toArray(new Delayed[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of the queue are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose                    
                </param>
                <return>
                    an array containing all of the elements in this queue                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="370">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="371"/>
                <scope line="373"/>
                <scope line="376"/>
            </method>
            <javadoc line="380">
                Removes a single instance of the specified element from this
                  queue, if it is present, whether or not it has expired.                
            </javadoc>
            <method name="remove" type="boolean" line="384">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="lock" type="ReentrantLock" line="385"/>
                <scope line="387"/>
                <scope line="390"/>
            </method>
            <javadoc line="394">
                Returns an iterator over all the elements (both expired and
                  unexpired) in this queue. The iterator does not return the
                  elements in any particular order.
                  &lt;p&gt;The returned iterator is a &quot;weakly consistent&quot; iterator that
                  will never throw {@link java.util.ConcurrentModificationExceptionConcurrentModificationException}, and guarantees to traverse
                  elements as they existed upon construction of the iterator, and
                  may (but is not guaranteed to) reflect any modifications
                  subsequent to construction.                
                <return>
                    an iterator over the elements in this queue                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="405"/>
            <class name="Itr" line="408">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <javadoc line="408">
                    Snapshot iterator that works off copy of underlying q array.                    
                </javadoc>
                <declaration name="array" type="Object[]" line="412"/>
                <declaration name="cursor" type="int" line="413"/>
                <declaration name="lastRet" type="int" line="414"/>
                <method name="Itr" type="constructor" line="415">
                    <params>
                        <param name="array" type="Object[]"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="419"/>
                <method name="next" type="E" line="422"/>
                <method name="remove" type="void" line="427">
                    <declaration name="x" type="Object" line="429"/>
                    <scope line="432">
                        <scope line="433">
                            <scope line="434"/>
                        </scope>
                    </scope>
                    <scope line="440"/>
                </method>
            </class>
        </class>
    </source>