<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.concurrent">
        <import package="java.util.concurrent.locks"/>
        <class name="FutureTask" line="3">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <implements interface="RunnableFuture">
                <type_params>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="3">
                A cancellable asynchronous computation.  This class provides a base
                  implementation of {@link Future}, with methods to start and cancel
                  a computation, query to see if the computation is complete, and
                  retrieve the result of the computation.  The result can only be
                  retrieved when the computation has completed; the &lt;tt&gt;get&lt;/tt&gt;
                  method will block if the computation has not yet completed.  Once
                  the computation has completed, the computation cannot be restarted
                  or cancelled.
                  &lt;p&gt;A &lt;tt&gt;FutureTask&lt;/tt&gt; can be used to wrap a {@link Callable} or{@link java.lang.Runnable} object.  Because &lt;tt&gt;FutureTask&lt;/tt&gt;
                  implements &lt;tt&gt;Runnable&lt;/tt&gt;, a &lt;tt&gt;FutureTask&lt;/tt&gt; can be
                  submitted to an {@link Executor} for execution.
                  &lt;p&gt;In addition to serving as a standalone class, this class provides
                  &lt;tt&gt;protected&lt;/tt&gt; functionality that may be useful when creating
                  customized task classes.                
                <since>
                    1.5                    
                </since>
                <author>
                    Doug Lea                    
                </author>
                <param>
                    &lt;V&gt;
                      The result type returned by this FutureTask&apos;s &lt;tt&gt;get&lt;/tt&gt; method                    
                </param>
            </javadoc>
            <declaration name="sync" type="Sync" line="24"/>
            <javadoc line="24">
                Synchronization control for FutureTask                
            </javadoc>
            <javadoc line="28">
                Creates a &lt;tt&gt;FutureTask&lt;/tt&gt; that will, upon running, execute the
                  given &lt;tt&gt;Callable&lt;/tt&gt;.                
                <param>
                    callable the callable task                    
                </param>
                <throws>
                    NullPointerException if callable is null                    
                </throws>
            </javadoc>
            <method name="FutureTask" type="constructor" line="34">
                <params>
                    <param name="callable" type="Callable&lt;V&gt;"/>
                </params>
            </method>
            <javadoc line="38">
                Creates a &lt;tt&gt;FutureTask&lt;/tt&gt; that will, upon running, execute the
                  given &lt;tt&gt;Runnable&lt;/tt&gt;, and arrange that &lt;tt&gt;get&lt;/tt&gt; will return the
                  given result on successful completion.                
                <param>
                    runnable the runnable task                    
                </param>
                <param>
                    result the result to return on successful completion. If
                      you don&apos;t need a particular result, consider using
                      constructions of the form:{@code Future&lt;?&gt; f = new FutureTask&lt;Void&gt;(runnable, null)}                    
                </param>
                <throws>
                    NullPointerException if runnable is null                    
                </throws>
            </javadoc>
            <method name="FutureTask" type="constructor" line="48">
                <params>
                    <param name="runnable" type="Runnable"/>
                    <param name="result" type="V"/>
                </params>
            </method>
            <method name="isCancelled" type="boolean" line="51"/>
            <method name="isDone" type="boolean" line="54"/>
            <method name="cancel" type="boolean" line="57">
                <params>
                    <param name="mayInterruptIfRunning" type="boolean"/>
                </params>
            </method>
            <javadoc line="60">
                @throws CancellationException {@inheritDoc}                
            </javadoc>
            <method name="get" type="V" line="63"/>
            <javadoc line="66">
                @throws CancellationException {@inheritDoc}                
            </javadoc>
            <method name="get" type="V" line="69">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="72">
                Protected method invoked when this task transitions to state
                  &lt;tt&gt;isDone&lt;/tt&gt; (whether normally or via cancellation). The
                  default implementation does nothing.  Subclasses may override
                  this method to invoke completion callbacks or perform
                  bookkeeping. Note that you can query status inside the
                  implementation of this method to determine whether this task
                  has been cancelled.                
            </javadoc>
            <method name="done" type="void" line="81"/>
            <javadoc line="83">
                Sets the result of this Future to the given value unless
                  this future has already been set or has been cancelled.
                  This method is invoked internally by the &lt;tt&gt;run&lt;/tt&gt; method
                  upon successful completion of the computation.                
                <param>
                    v the value                    
                </param>
            </javadoc>
            <method name="set" type="void" line="90">
                <params>
                    <param name="v" type="V"/>
                </params>
            </method>
            <javadoc line="93">
                Causes this future to report an &lt;tt&gt;ExecutionException&lt;/tt&gt;
                  with the given throwable as its cause, unless this Future has
                  already been set or has been cancelled.
                  This method is invoked internally by the &lt;tt&gt;run&lt;/tt&gt; method
                  upon failure of the computation.                
                <param>
                    t the cause of failure                    
                </param>
            </javadoc>
            <method name="setException" type="void" line="101">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <javadoc line="104">
                Sets this Future to the result of its computation
                  unless it has been cancelled.                
            </javadoc>
            <method name="run" type="void" line="108"/>
            <javadoc line="111">
                Executes the computation without setting its result, and then
                  resets this Future to initial state, failing to do so if the
                  computation encounters an exception or is cancelled.  This is
                  designed for use with tasks that intrinsically execute more
                  than once.                
                <return>
                    true if successfully run and reset                    
                </return>
            </javadoc>
            <method name="runAndReset" type="boolean" line="119"/>
            <class name="Sync" line="122">
                <extends class="AbstractQueuedSynchronizer"/>
                <javadoc line="122">
                    Synchronization control for FutureTask. Note that this must be
                      a non-static inner class in order to invoke the protected
                      &lt;tt&gt;done&lt;/tt&gt; method. For clarity, all inner class support
                      methods are same as outer, prefixed with &quot;inner&quot;.
                      Uses AQS sync state to represent run status                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="130"/>
                <declaration name="READY" type="int" line="131"/>
                <javadoc line="131">
                    State value representing that task is ready to run                    
                </javadoc>
                <declaration name="RUNNING" type="int" line="135"/>
                <javadoc line="135">
                    State value representing that task is running                    
                </javadoc>
                <declaration name="RAN" type="int" line="139"/>
                <javadoc line="139">
                    State value representing that task ran                    
                </javadoc>
                <declaration name="CANCELLED" type="int" line="143"/>
                <javadoc line="143">
                    State value representing that task was cancelled                    
                </javadoc>
                <declaration name="callable" type="Callable&amp;lt;V&amp;gt;" line="147"/>
                <javadoc line="147">
                    The underlying callable                    
                </javadoc>
                <declaration name="result" type="V" line="151"/>
                <javadoc line="151">
                    The result to return from get()                    
                </javadoc>
                <declaration name="exception" type="Throwable" line="155"/>
                <javadoc line="155">
                    The exception to throw from get()                    
                </javadoc>
                <declaration name="runner" type="Thread" line="159"/>
                <javadoc line="159">
                    The thread running task. When nulled after set/cancel, this
                      indicates that the results are accessible.  Must be
                      volatile, to ensure visibility upon completion.                    
                </javadoc>
                <method name="Sync" type="constructor" line="165">
                    <params>
                        <param name="callable" type="Callable&lt;V&gt;"/>
                    </params>
                </method>
                <method name="ranOrCancelled" type="boolean" line="168">
                    <params>
                        <param name="state" type="int"/>
                    </params>
                </method>
                <javadoc line="171">
                    Implements AQS base acquire to succeed if ran or cancelled                    
                </javadoc>
                <method name="tryAcquireShared" type="int" line="174">
                    <params>
                        <param name="ignore" type="int"/>
                    </params>
                </method>
                <javadoc line="177">
                    Implements AQS base release to always signal after setting
                      final done status by nulling runner thread.                    
                </javadoc>
                <method name="tryReleaseShared" type="boolean" line="181">
                    <params>
                        <param name="ignore" type="int"/>
                    </params>
                </method>
                <method name="innerIsCancelled" type="boolean" line="185"/>
                <method name="innerIsDone" type="boolean" line="188"/>
                <method name="innerGet" type="V" line="191"/>
                <method name="innerGet" type="V" line="197">
                    <params>
                        <param name="nanosTimeout" type="long"/>
                    </params>
                </method>
                <method name="innerSet" type="void" line="203">
                    <params>
                        <param name="v" type="V"/>
                    </params>
                    <scope line="204">
                        <declaration name="s" type="int" line="205"/>
                        <scope line="207"/>
                        <scope line="211"/>
                    </scope>
                </method>
                <method name="innerSetException" type="void" line="219">
                    <params>
                        <param name="t" type="Throwable"/>
                    </params>
                    <scope line="220">
                        <declaration name="s" type="int" line="221"/>
                        <scope line="223"/>
                        <scope line="227"/>
                    </scope>
                </method>
                <method name="innerCancel" type="boolean" line="235">
                    <params>
                        <param name="mayInterruptIfRunning" type="boolean"/>
                    </params>
                    <scope line="236">
                        <declaration name="s" type="int" line="237"/>
                    </scope>
                    <scope line="241">
                        <declaration name="r" type="Thread" line="242"/>
                    </scope>
                </method>
                <method name="innerRun" type="void" line="249">
                    <scope line="252">
                        <declaration name="result" type="V" line="253"/>
                        <scope line="254"/>
                        <scope line="257"/>
                    </scope>
                    <scope line="263"/>
                </method>
                <method name="innerRunAndReset" type="boolean" line="267">
                    <scope line="269"/>
                    <scope line="275"/>
                </method>
            </class>
        </class>
    </source>