<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="HashSet" line="28">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="96">
                Dummy value to associate with an Object in the backing Map                
            </comment>
            <implements interface="Set">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="28">
                This class implements the &lt;tt&gt;Set&lt;/tt&gt; interface, backed by a hash table
                  (actually a &lt;tt&gt;HashMap&lt;/tt&gt; instance).  It makes no guarantees as to the
                  iteration order of the set; in particular, it does not guarantee that the
                  order will remain constant over time.  This class permits the &lt;tt&gt;null&lt;/tt&gt;
                  element.
                  &lt;p&gt;This class offers constant time performance for the basic operations
                  (&lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;contains&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;),
                  assuming the hash function disperses the elements properly among the
                  buckets.  Iterating over this set requires time proportional to the sum of
                  the &lt;tt&gt;HashSet&lt;/tt&gt; instance&apos;s size (the number of elements) plus the
                  &quot;capacity&quot; of the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance (the number of
                  buckets).  Thus, it&apos;s very important not to set the initial capacity too
                  high (or the load factor too low) if iteration performance is important.
                  &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  If multiple threads access a hash set concurrently, and at least one of
                  the threads modifies the set, it &lt;i&gt;must&lt;/i&gt; be synchronized externally.
                  This is typically accomplished by synchronizing on some object that
                  naturally encapsulates the set.
                  If no such object exists, the set should be &quot;wrapped&quot; using the{@link Collections#synchronizedSet Collections.synchronizedSet}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access to the set:&lt;pre&gt;
                  Set s = Collections.synchronizedSet(new HashSet(...));&lt;/pre&gt;
                  &lt;p&gt;The iterators returned by this class&apos;s &lt;tt&gt;iterator&lt;/tt&gt; method are
                  &lt;i&gt;fail-fast&lt;/i&gt;: if the set is modified at any time after the iterator is
                  created, in any way except through the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt;
                  method, the Iterator throws a {@link ConcurrentModificationException}.
                  Thus, in the face of concurrent modification, the iterator fails quickly
                  and cleanly, rather than risking arbitrary, non-deterministic behavior at
                  an undetermined time in the future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness: &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    &lt;E&gt;
                       the type of elements maintained by this set                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    Set                    
                </see>
                <see>
                    TreeSet                    
                </see>
                <see>
                    HashMap                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="91"/>
            <declaration name="map" type="HashMap&lt;E,Object&gt;" line="93"/>
            <declaration name="PRESENT" type="Object" line="96"/>
            <javadoc line="98">
                Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has
                  default initial capacity (16) and load factor (0.75).                
            </javadoc>
            <method name="HashSet" type="constructor" line="102"/>
            <javadoc line="106">
                Constructs a new set containing the elements in the specified
                  collection.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with default load factor
                  (0.75) and an initial capacity sufficient to contain the elements in
                  the specified collection.                
                <param>
                    c the collection whose elements are to be placed into this set                    
                </param>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="HashSet" type="constructor" line="115">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="120">
                Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has
                  the specified initial capacity and the specified load factor.                
                <param>
                    initialCapacity   the initial capacity of the hash map                    
                </param>
                <param>
                    loadFactor        the load factor of the hash map                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is less
                      than zero, or if the load factor is nonpositive                    
                </throws>
            </javadoc>
            <method name="HashSet" type="constructor" line="129">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <javadoc line="133">
                Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has
                  the specified initial capacity and default load factor (0.75).                
                <param>
                    initialCapacity   the initial capacity of the hash table                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is less
                      than zero                    
                </throws>
            </javadoc>
            <method name="HashSet" type="constructor" line="141">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Constructs a new, empty linked hash set.  (This package private
                  constructor is only used by LinkedHashSet.) The backing
                  HashMap instance is a LinkedHashMap with the specified initial
                  capacity and the specified load factor.                
                <param>
                    initialCapacity   the initial capacity of the hash map                    
                </param>
                <param>
                    loadFactor        the load factor of the hash map                    
                </param>
                <param>
                    dummy             ignored (distinguishes this
                      constructor from other int, float constructor.)                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is less
                      than zero, or if the load factor is nonpositive                    
                </throws>
            </javadoc>
            <method name="HashSet" type="constructor" line="158">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                    <param name="dummy" type="boolean"/>
                </params>
            </method>
            <javadoc line="162">
                Returns an iterator over the elements in this set.  The elements
                  are returned in no particular order.                
                <return>
                    an Iterator over the elements in this set                    
                </return>
                <see>
                    ConcurrentModificationException                    
                </see>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="169"/>
            <javadoc line="173">
                Returns the number of elements in this set (its cardinality).                
                <return>
                    the number of elements in this set (its cardinality)                    
                </return>
            </javadoc>
            <method name="size" type="int" line="178"/>
            <javadoc line="182">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="187"/>
            <javadoc line="191">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this set
                  contains an element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this set is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="200">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="204">
                Adds the specified element to this set if it is not already present.
                  More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if
                  this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that
                  &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.
                  If this set already contains the element, the call leaves the set
                  unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    e element to be added to this set                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified
                      element                    
                </return>
            </javadoc>
            <method name="add" type="boolean" line="216">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="220">
                Removes the specified element from this set if it is present.
                  More formally, removes an element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;,
                  if this set contains such an element.  Returns &lt;tt&gt;true&lt;/tt&gt; if
                  this set contained the element (or equivalently, if this set
                  changed as a result of the call).  (This set will not contain the
                  element once the call returns.)                
                <param>
                    o object to be removed from this set, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the set contained the specified element                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="232">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="236">
                Removes all of the elements from this set.
                  The set will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="240"/>
            <javadoc line="244">
                Returns a shallow copy of this &lt;tt&gt;HashSet&lt;/tt&gt; instance: the elements
                  themselves are not cloned.                
                <return>
                    a shallow copy of this set                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="250">
                <scope line="251">
                    <declaration name="newSet" type="HashSet&lt;E&gt;" line="252"/>
                </scope>
                <scope line="255"/>
            </method>
            <javadoc line="260">
                Save the state of this &lt;tt&gt;HashSet&lt;/tt&gt; instance to a stream (that is,
                  serialize it).                
                <serialData>
                    The capacity of the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance
                      (int), and its load factor (float) are emitted, followed by
                      the size of the set (the number of elements it contains)
                      (int), followed by all of its elements (each an Object) in
                      no particular order.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="271">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="273">
                    Write out any hidden serialization magic                    
                </comment>
                <comment line="276">
                    Write out HashMap capacity and load factor                    
                </comment>
                <comment line="280">
                    Write out size                    
                </comment>
                <comment line="283">
                    Write out all elements in the proper order.                    
                </comment>
            </method>
            <javadoc line="287">
                Reconstitute the &lt;tt&gt;HashSet&lt;/tt&gt; instance from a stream (that is,
                  deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="292">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="294">
                    Read in any hidden serialization magic                    
                </comment>
                <comment line="297">
                    Read in HashMap capacity and load factor and create backing HashMap                    
                </comment>
                <comment line="304">
                    Read in size                    
                </comment>
                <comment line="307">
                    Read in all elements in the proper order.                    
                </comment>
                <declaration name="capacity" type="int" line="297"/>
                <declaration name="loadFactor" type="float" line="298"/>
                <declaration name="size" type="int" line="304"/>
                <scope line="307">
                    <declaration name="e" type="E" line="308"/>
                </scope>
            </method>
        </class>
    </source>