<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="Vector" line="28">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractList">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="727">
                Positional Access Operations                
            </comment>
            <comment line="850">
                Bulk Operations                
            </comment>
            <implements interface="List">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="RandomAccess"/>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="28">
                The {@code Vector} class implements a growable array of
                  objects. Like an array, it contains components that can be
                  accessed using an integer index. However, the size of a{@code Vector} can grow or shrink as needed to accommodate
                  adding and removing items after the {@code Vector} has been created.
                  &lt;p&gt;Each vector tries to optimize storage management by maintaining a{@code capacity} and a {@code capacityIncrement}. The{@code capacity} is always at least as large as the vector
                  size; it is usually larger because as components are added to the
                  vector, the vector&apos;s storage increases in chunks the size of{@code capacityIncrement}. An application can increase the
                  capacity of a vector before inserting a large number of
                  components; this reduces the amount of incremental reallocation.
                  &lt;p&gt;&lt;a name=&quot;fail-fast&quot;/&gt;
                  The iterators returned by this class&apos;s {@link #iterator() iterator} and{@link #listIterator(int) listIterator} methods are &lt;em&gt;fail-fast&lt;/em&gt;:
                  if the vector is structurally modified at any time after the iterator is
                  created, in any way except through the iterator&apos;s own{@link ListIterator#remove() remove} or{@link ListIterator#add(Object) add} methods, the iterator will throw a{@link ConcurrentModificationException}.  Thus, in the face of
                  concurrent modification, the iterator fails quickly and cleanly, rather
                  than risking arbitrary, non-deterministic behavior at an undetermined
                  time in the future.  The {@link Enumeration Enumerations} returned by
                  the {@link #elements() elements} method are &lt;em&gt;not&lt;/em&gt; fail-fast.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw {@code ConcurrentModificationException} on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness:  &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;
                  &lt;p&gt;As of the Java 2 platform v1.2, this class was retrofitted to
                  implement the {@link List} interface, making it a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.  Unlike the new collection
                  implementations, {@code Vector} is synchronized.  If a thread-safe
                  implementation is not needed, it is recommended to use {@link ArrayList} in place of {@code Vector}.                
                <author>
                    Lee Boynton                    
                </author>
                <author>
                    Jonathan Payne                    
                </author>
                <see>
                    Collection                    
                </see>
                <see>
                    LinkedList                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="elementData" type="Object[]" line="83"/>
            <javadoc line="83">
                The array buffer into which the components of the vector are
                  stored. The capacity of the vector is the length of this array buffer,
                  and is at least large enough to contain all the vector&apos;s elements.
                  &lt;p&gt;Any array elements following the last element in the Vector are null.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="elementCount" type="int" line="94"/>
            <javadoc line="94">
                The number of valid components in this {@code Vector} object.
                  Components {@code elementData[0]} through{@code elementData[elementCount-1]} are the actual items.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="capacityIncrement" type="int" line="103"/>
            <javadoc line="103">
                The amount by which the capacity of the vector is automatically
                  incremented when its size becomes greater than its capacity.  If
                  the capacity increment is less than or equal to zero, the capacity
                  of the vector is doubled each time it needs to grow.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="113"/>
            <javadoc line="113">
                use serialVersionUID from JDK 1.0.2 for interoperability                
            </javadoc>
            <javadoc line="116">
                Constructs an empty vector with the specified initial capacity and
                  capacity increment.                
                <param>
                    initialCapacity     the initial capacity of the vector                    
                </param>
                <param>
                    capacityIncrement   the amount by which the capacity is
                      increased when the vector overflows                    
                </param>
                <throws>
                    IllegalArgumentException if the specified initial capacity
                      is negative                    
                </throws>
            </javadoc>
            <method name="Vector" type="constructor" line="126">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="capacityIncrement" type="int"/>
                </params>
            </method>
            <javadoc line="135">
                Constructs an empty vector with the specified initial capacity and
                  with its capacity increment equal to zero.                
                <param>
                    initialCapacity   the initial capacity of the vector                    
                </param>
                <throws>
                    IllegalArgumentException if the specified initial capacity
                      is negative                    
                </throws>
            </javadoc>
            <method name="Vector" type="constructor" line="143">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="147">
                Constructs an empty vector so that its internal data array
                  has size {@code 10} and its standard capacity increment is
                  zero.                
            </javadoc>
            <method name="Vector" type="constructor" line="152"/>
            <javadoc line="156">
                Constructs a vector containing the elements of the specified
                  collection, in the order they are returned by the collection&apos;s
                  iterator.                
                <param>
                    c the collection whose elements are to be placed into this
                      vector                    
                </param>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Vector" type="constructor" line="166">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <comment line="169">
                    c.toArray might (incorrectly) not return Object[] (see 6260652)                    
                </comment>
            </method>
            <javadoc line="174">
                Copies the components of this vector into the specified array.
                  The item at index {@code k} in this vector is copied into
                  component {@code k} of {@code anArray}.                
                <param>
                    anArray the array into which the components get copied                    
                </param>
                <throws>
                    NullPointerException if the given array is null                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the specified array is not
                      large enough to hold all the components of this vector                    
                </throws>
                <throws>
                    ArrayStoreException if a component of this vector is not of
                      a runtime type that can be stored in the specified array                    
                </throws>
                <see>
                    #toArray(Object[])                    
                </see>
            </javadoc>
            <method name="copyInto" type="void" line="187">
                <params>
                    <param name="anArray" type="Object[]"/>
                </params>
            </method>
            <javadoc line="191">
                Trims the capacity of this vector to be the vector&apos;s current
                  size. If the capacity of this vector is larger than its current
                  size, then the capacity is changed to equal the size by replacing
                  its internal data array, kept in the field {@code elementData},
                  with a smaller one. An application can use this operation to
                  minimize the storage of a vector.                
            </javadoc>
            <method name="trimToSize" type="void" line="199">
                <declaration name="oldCapacity" type="int" line="201"/>
                <scope line="202"/>
            </method>
            <javadoc line="207">
                Increases the capacity of this vector, if necessary, to ensure
                  that it can hold at least the number of components specified by
                  the minimum capacity argument.
                  &lt;p&gt;If the current capacity of this vector is less than{@code minCapacity}, then its capacity is increased by replacing its
                  internal data array, kept in the field {@code elementData}, with a
                  larger one.  The size of the new data array will be the old size plus{@code capacityIncrement}, unless the value of{@code capacityIncrement} is less than or equal to zero, in which case
                  the new capacity will be twice the old capacity; but if this new size
                  is still smaller than {@code minCapacity}, then the new capacity will
                  be {@code minCapacity}.                
                <param>
                    minCapacity the desired minimum capacity                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="224">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <scope line="225"/>
            </method>
            <javadoc line="231">
                This implements the unsynchronized semantics of ensureCapacity.
                  Synchronized methods in this class can internally call this
                  method for ensuring capacity without incurring the cost of an
                  extra synchronization.                
                <see>
                    #ensureCapacity(int)                    
                </see>
            </javadoc>
            <method name="ensureCapacityHelper" type="void" line="239">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="240">
                    overflow-conscious code                    
                </comment>
            </method>
            <declaration name="MAX_ARRAY_SIZE" type="int" line="245"/>
            <javadoc line="245">
                The maximum size of array to allocate.
                  Some VMs reserve some header words in an array.
                  Attempts to allocate larger arrays may result in
                  OutOfMemoryError: Requested array size exceeds VM limit                
            </javadoc>
            <method name="grow" type="void" line="253">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="254">
                    overflow-conscious code                    
                </comment>
                <declaration name="oldCapacity" type="int" line="255"/>
                <declaration name="newCapacity" type="int" line="256"/>
            </method>
            <method name="hugeCapacity" type="int" line="265">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="266">
                    overflow                    
                </comment>
            </method>
            <javadoc line="273">
                Sets the size of this vector. If the new size is greater than the
                  current size, new {@code null} items are added to the end of
                  the vector. If the new size is less than the current size, all
                  components at index {@code newSize} and greater are discarded.                
                <param>
                    newSize   the new size of this vector                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the new size is negative                    
                </throws>
            </javadoc>
            <method name="setSize" type="void" line="282">
                <params>
                    <param name="newSize" type="int"/>
                </params>
                <scope line="284"/>
                <scope line="286">
                    <scope line="287"/>
                </scope>
            </method>
            <javadoc line="294">
                Returns the current capacity of this vector.                
                <return>
                    the current capacity (the length of its internal
                      data array, kept in the field {@code elementData}of this vector)                    
                </return>
            </javadoc>
            <method name="capacity" type="int" line="301"/>
            <javadoc line="305">
                Returns the number of components in this vector.                
                <return>
                    the number of components in this vector                    
                </return>
            </javadoc>
            <method name="size" type="int" line="310"/>
            <javadoc line="314">
                Tests if this vector has no components.                
                <return>
                    {@code true} if and only if this vector has
                      no components, that is, its size is zero;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="321"/>
            <javadoc line="325">
                Returns an enumeration of the components of this vector. The
                  returned {@code Enumeration} object will generate all items in
                  this vector. The first item generated is the item at index {@code 0},
                  then the item at index {@code 1}, and so on.                
                <return>
                    an enumeration of the components of this vector                    
                </return>
                <see>
                    Iterator                    
                </see>
            </javadoc>
            <method name="elements" type="Enumeration<E>" line="334">
                <anonymous_class line="335">
                    <declaration name="count" type="int" line="336"/>
                    <method name="hasMoreElements" type="boolean" line="338"/>
                    <method name="nextElement" type="E" line="342">
                        <scope line="343">
                            <scope line="344"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="353">
                Returns {@code true} if this vector contains the specified element.
                  More formally, returns {@code true} if and only if this vector
                  contains at least one element {@code e} such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.                
                <param>
                    o element whose presence in this vector is to be tested                    
                </param>
                <return>
                    {@code true} if this vector contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="362">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="366">
                Returns the index of the first occurrence of the specified element
                  in this vector, or -1 if this vector does not contain the element.
                  More formally, returns the lowest index {@code i} such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    o element to search for                    
                </param>
                <return>
                    the index of the first occurrence of the specified element in
                      this vector, or -1 if this vector does not contain the element                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="377">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="381">
                Returns the index of the first occurrence of the specified element in
                  this vector, searching forwards from {@code index}, or returns -1 if
                  the element is not found.
                  More formally, returns the lowest index {@code i} such that
                  &lt;tt&gt;(i&amp;nbsp;&amp;gt;=&amp;nbsp;index&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i))))&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    o element to search for                    
                </param>
                <param>
                    index index to start searching from                    
                </param>
                <return>
                    the index of the first occurrence of the element in
                      this vector at position {@code index} or later in the vector;{@code -1} if the element is not found.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is negative                    
                </throws>
                <see>
                    Object#equals(Object)                    
                </see>
            </javadoc>
            <method name="indexOf" type="int" line="397">
                <params>
                    <param name="o" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="398"/>
                <scope line="402"/>
            </method>
            <javadoc line="410">
                Returns the index of the last occurrence of the specified element
                  in this vector, or -1 if this vector does not contain the element.
                  More formally, returns the highest index {@code i} such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    o element to search for                    
                </param>
                <return>
                    the index of the last occurrence of the specified element in
                      this vector, or -1 if this vector does not contain the element                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="421">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="425">
                Returns the index of the last occurrence of the specified element in
                  this vector, searching backwards from {@code index}, or returns -1 if
                  the element is not found.
                  More formally, returns the highest index {@code i} such that
                  &lt;tt&gt;(i&amp;nbsp;&amp;lt;=&amp;nbsp;index&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i))))&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    o element to search for                    
                </param>
                <param>
                    index index to start searching backwards from                    
                </param>
                <return>
                    the index of the last occurrence of the element at position
                      less than or equal to {@code index} in this vector;
                      -1 if the element is not found.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is greater
                      than or equal to the current size of this vector                    
                </throws>
            </javadoc>
            <method name="lastIndexOf" type="int" line="441">
                <params>
                    <param name="o" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="445"/>
                <scope line="449"/>
            </method>
            <javadoc line="457">
                Returns the component at the specified index.
                  &lt;p&gt;This method is identical in functionality to the {@link #get(int)}method (which is part of the {@link List} interface).                
                <param>
                    index   an index into this vector                    
                </param>
                <return>
                    the component at the specified index                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index >= size()})                    
                </throws>
            </javadoc>
            <method name="elementAt" type="E" line="468">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="469"/>
            </method>
            <javadoc line="476">
                Returns the first component (the item at index {@code 0}) of
                  this vector.                
                <return>
                    the first component of this vector                    
                </return>
                <throws>
                    NoSuchElementException if this vector has no components                    
                </throws>
            </javadoc>
            <method name="firstElement" type="E" line="483">
                <scope line="484"/>
            </method>
            <javadoc line="490">
                Returns the last component of the vector.                
                <return>
                    the last component of the vector, i.e., the component at index
                      <code>size()&nbsp;-&nbsp;1</code>.                    
                </return>
                <throws>
                    NoSuchElementException if this vector is empty                    
                </throws>
            </javadoc>
            <method name="lastElement" type="E" line="497">
                <scope line="498"/>
            </method>
            <javadoc line="504">
                Sets the component at the specified {@code index} of this
                  vector to be the specified object. The previous component at that
                  position is discarded.
                  &lt;p&gt;The index must be a value greater than or equal to {@code 0}and less than the current size of the vector.
                  &lt;p&gt;This method is identical in functionality to the{@link #set(int,Object) set(int, E)}method (which is part of the {@link List} interface). Note that the{@code set} method reverses the order of the parameters, to more closely
                  match array usage.  Note also that the {@code set} method returns the
                  old value that was stored at the specified position.                
                <param>
                    obj     what the component is to be set to                    
                </param>
                <param>
                    index   the specified index                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index >= size()})                    
                </throws>
            </javadoc>
            <method name="setElementAt" type="void" line="524">
                <params>
                    <param name="obj" type="E"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="525"/>
            </method>
            <javadoc line="532">
                Deletes the component at the specified index. Each component in
                  this vector with an index greater or equal to the specified{@code index} is shifted downward to have an index one
                  smaller than the value it had previously. The size of this vector
                  is decreased by {@code 1}.
                  &lt;p&gt;The index must be a value greater than or equal to {@code 0}and less than the current size of the vector.
                  &lt;p&gt;This method is identical in functionality to the {@link #remove(int)}method (which is part of the {@link List} interface).  Note that the{@code remove} method returns the old value that was stored at the
                  specified position.                
                <param>
                    index   the index of the object to remove                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index >= size()})                    
                </throws>
            </javadoc>
            <method name="removeElementAt" type="void" line="551">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="565">
                                        
                </comment>
                <scope line="553"/>
                <scope line="557"/>
                <declaration name="j" type="int" line="560"/>
                <scope line="561"/>
            </method>
            <javadoc line="568">
                Inserts the specified object as a component in this vector at the
                  specified {@code index}. Each component in this vector with
                  an index greater or equal to the specified {@code index} is
                  shifted upward to have an index one greater than the value it had
                  previously.
                  &lt;p&gt;The index must be a value greater than or equal to {@code 0}and less than or equal to the current size of the vector. (If the
                  index is equal to the current size of the vector, the new element
                  is appended to the Vector.)
                  &lt;p&gt;This method is identical in functionality to the{@link #add(int,Object) add(int, E)}method (which is part of the {@link List} interface).  Note that the{@code add} method reverses the order of the parameters, to more closely
                  match array usage.                
                <param>
                    obj     the component to insert                    
                </param>
                <param>
                    index   where to insert the new component                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index > size()})                    
                </throws>
            </javadoc>
            <method name="insertElementAt" type="void" line="591">
                <params>
                    <param name="obj" type="E"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="593"/>
            </method>
            <javadoc line="603">
                Adds the specified component to the end of this vector,
                  increasing its size by one. The capacity of this vector is
                  increased if its size becomes greater than its capacity.
                  &lt;p&gt;This method is identical in functionality to the{@link #add(Object) add(E)}method (which is part of the {@link List} interface).                
                <param>
                    obj   the component to be added                    
                </param>
            </javadoc>
            <method name="addElement" type="void" line="614">
                <params>
                    <param name="obj" type="E"/>
                </params>
            </method>
            <javadoc line="620">
                Removes the first (lowest-indexed) occurrence of the argument
                  from this vector. If the object is found in this vector, each
                  component in the vector with an index greater or equal to the
                  object&apos;s index is shifted downward to have an index one smaller
                  than the value it had previously.
                  &lt;p&gt;This method is identical in functionality to the{@link #remove(Object)} method (which is part of the{@link List} interface).                
                <param>
                    obj   the component to be removed                    
                </param>
                <return>
                    {@code true} if the argument was a component of this
                      vector; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="removeElement" type="boolean" line="635">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="i" type="int" line="637"/>
                <scope line="638"/>
            </method>
            <javadoc line="645">
                Removes all components from this vector and sets its size to zero.
                  &lt;p&gt;This method is identical in functionality to the {@link #clear}method (which is part of the {@link List} interface).                
            </javadoc>
            <method name="removeAllElements" type="void" line="651">
                <comment line="653">
                    Let gc do its work                    
                </comment>
            </method>
            <javadoc line="660">
                Returns a clone of this vector. The copy will contain a
                  reference to a clone of the internal data array, not a reference
                  to the original internal data array of this {@code Vector} object.                
                <return>
                    a clone of this vector                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="667">
                <comment line="675">
                    this shouldn&apos;t happen, since we are Cloneable                    
                </comment>
                <scope line="668">
                    <declaration name="v" type="Vector&lt;E&gt;" line="669"/>
                </scope>
                <scope line="674"/>
            </method>
            <javadoc line="680">
                Returns an array containing all of the elements in this Vector
                  in the correct order.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="toArray" type="Object[]" line="686"/>
            <javadoc line="690">
                Returns an array containing all of the elements in this Vector in the
                  correct order; the runtime type of the returned array is that of the
                  specified array.  If the Vector fits in the specified array, it is
                  returned therein.  Otherwise, a new array is allocated with the runtime
                  type of the specified array and the size of this Vector.
                  &lt;p&gt;If the Vector fits in the specified array with room to spare
                  (i.e., the array has more elements than the Vector),
                  the element in the array immediately following the end of the
                  Vector is set to null.  (This is useful in determining the length
                  of the Vector &lt;em&gt;only&lt;/em&gt; if the caller knows that the Vector
                  does not contain any null elements.)                
                <param>
                    a the array into which the elements of the Vector are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing the elements of the Vector                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of a is not a supertype
                      of the runtime type of every element in this Vector                    
                </throws>
                <throws>
                    NullPointerException if the given array is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="toArray" type="T[]" line="714">
                <params>
                    <param name="a" type="T[]"/>
                </params>
            </method>
            <method name="elementData" type="E" line="729">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="733">
                Returns the element at the specified position in this Vector.                
                <param>
                    index index of the element to return                    
                </param>
                <return>
                    object at the specified index                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index >= size()})                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="get" type="E" line="742">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="749">
                Replaces the element at the specified position in this Vector with the
                  specified element.                
                <param>
                    index index of the element to replace                    
                </param>
                <param>
                    element element to be stored at the specified position                    
                </param>
                <return>
                    the element previously at the specified position                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index >= size()})                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="set" type="E" line="760">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <declaration name="oldValue" type="E" line="764"/>
            </method>
            <javadoc line="769">
                Appends the specified element to the end of this Vector.                
                <param>
                    e element to be appended to this Vector                    
                </param>
                <return>
                    {@code true} (as specified by {@link Collection#add})                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="add" type="boolean" line="776">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="783">
                Removes the first occurrence of the specified element in this Vector
                  If the Vector does not contain the element, it is unchanged.  More
                  formally, removes the element with the lowest index i such that{@code (o==null ? get(i)==null : o.equals(get(i)))} (if such
                  an element exists).                
                <param>
                    o element to be removed from this Vector, if present                    
                </param>
                <return>
                    true if the Vector contained the specified element                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="remove" type="boolean" line="794">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="798">
                Inserts the specified element at the specified position in this Vector.
                  Shifts the element currently at that position (if any) and any
                  subsequent elements to the right (adds one to their indices).                
                <param>
                    index index at which the specified element is to be inserted                    
                </param>
                <param>
                    element element to be inserted                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index > size()})                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="add" type="void" line="809">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
            </method>
            <javadoc line="813">
                Removes the element at the specified position in this Vector.
                  Shifts any subsequent elements to the left (subtracts one from their
                  indices).  Returns the element that was removed from the Vector.                
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index >= size()})                    
                </throws>
                <param>
                    index the index of the element to be removed                    
                </param>
                <return>
                    element that was removed                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="remove" type="E" line="824">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="834">
                    Let gc do its work                    
                </comment>
                <declaration name="oldValue" type="E" line="828"/>
                <declaration name="numMoved" type="int" line="830"/>
            </method>
            <javadoc line="839">
                Removes all of the elements from this Vector.  The Vector will
                  be empty after this call returns (unless it throws an exception).                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="clear" type="void" line="845"/>
            <javadoc line="851">
                Returns true if this Vector contains all of the elements in the
                  specified Collection.                
                <param>
                    c a collection whose elements will be tested for containment
                      in this Vector                    
                </param>
                <return>
                    true if this Vector contains all of the elements in the
                      specified collection                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="containsAll" type="boolean" line="861">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="865">
                Appends all of the elements in the specified Collection to the end of
                  this Vector, in the order that they are returned by the specified
                  Collection&apos;s Iterator.  The behavior of this operation is undefined if
                  the specified Collection is modified while the operation is in progress.
                  (This implies that the behavior of this call is undefined if the
                  specified Collection is this Vector, and this Vector is nonempty.)                
                <param>
                    c elements to be inserted into this Vector                    
                </param>
                <return>
                    {@code true} if this Vector changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addAll" type="boolean" line="878">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="a" type="Object[]" line="880"/>
                <declaration name="numNew" type="int" line="881"/>
            </method>
            <javadoc line="888">
                Removes from this Vector all of its elements that are contained in the
                  specified Collection.                
                <param>
                    c a collection of elements to be removed from the Vector                    
                </param>
                <return>
                    true if this Vector changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the types of one or more elements
                      in this vector are incompatible with the specified
                      collection
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this vector contains one or more null
                      elements and the specified collection does not support null
                      elements
                      (<a href="Collection.html#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="removeAll" type="boolean" line="905">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="909">
                Retains only the elements in this Vector that are contained in the
                  specified Collection.  In other words, removes from this Vector all
                  of its elements that are not contained in the specified Collection.                
                <param>
                    c a collection of elements to be retained in this Vector
                      (all other elements are removed)                    
                </param>
                <return>
                    true if this Vector changed as a result of the call                    
                </return>
                <throws>
                    ClassCastException if the types of one or more elements
                      in this vector are incompatible with the specified
                      collection
                      (<a href="Collection.html#optional-restrictions">optional</a>)                    
                </throws>
                <throws>
                    NullPointerException if this vector contains one or more null
                      elements and the specified collection does not support null
                      elements
                      (<a href="Collection.html#optional-restrictions">optional</a>),
                      or if the specified collection is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="retainAll" type="boolean" line="928">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="932">
                Inserts all of the elements in the specified Collection into this
                  Vector at the specified position.  Shifts the element currently at
                  that position (if any) and any subsequent elements to the right
                  (increases their indices).  The new elements will appear in the Vector
                  in the order that they are returned by the specified Collection&apos;s
                  iterator.                
                <param>
                    index index at which to insert the first element from the
                      specified collection                    
                </param>
                <param>
                    c elements to be inserted into this Vector                    
                </param>
                <return>
                    {@code true} if this Vector changed as a result of the call                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the index is out of range
                      ({@code index < 0 || index > size()})                    
                </throws>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addAll" type="boolean" line="949">
                <params>
                    <param name="index" type="int"/>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="a" type="Object[]" line="954"/>
                <declaration name="numNew" type="int" line="955"/>
                <declaration name="numMoved" type="int" line="958"/>
            </method>
            <javadoc line="968">
                Compares the specified Object with this Vector for equality.  Returns
                  true if and only if the specified Object is also a List, both Lists
                  have the same size, and all corresponding pairs of elements in the two
                  Lists are &lt;em&gt;equal&lt;/em&gt;.  (Two elements {@code e1} and{@code e2} are &lt;em&gt;equal&lt;/em&gt; if {@code (e1==null ? e2==null :
                  e1.equals(e2))}.)  In other words, two Lists are defined to be
                  equal if they contain the same elements in the same order.                
                <param>
                    o the Object to be compared for equality with this Vector                    
                </param>
                <return>
                    true if the specified Object is equal to this Vector                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="980">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="984">
                Returns the hash code value for this Vector.                
            </javadoc>
            <method name="hashCode" type="int" line="987"/>
            <javadoc line="991">
                Returns a string representation of this Vector, containing
                  the String representation of each element.                
            </javadoc>
            <method name="toString" type="String" line="995"/>
            <javadoc line="999">
                Returns a view of the portion of this List between fromIndex,
                  inclusive, and toIndex, exclusive.  (If fromIndex and toIndex are
                  equal, the returned List is empty.)  The returned List is backed by this
                  List, so changes in the returned List are reflected in this List, and
                  vice-versa.  The returned List supports all of the optional List
                  operations supported by this List.
                  &lt;p&gt;This method eliminates the need for explicit range operations (of
                  the sort that commonly exist for arrays).  Any operation that expects
                  a List can be used as a range operation by operating on a subList view
                  instead of a whole List.  For example, the following idiom
                  removes a range of elements from a List:
                  &lt;pre&gt;
                  list.subList(from, to).clear();
                  &lt;/pre&gt;
                  Similar idioms may be constructed for indexOf and lastIndexOf,
                  and all of the algorithms in the Collections class can be applied to
                  a subList.
                  &lt;p&gt;The semantics of the List returned by this method become undefined if
                  the backing list (i.e., this List) is &lt;i&gt;structurally modified&lt;/i&gt; in
                  any way other than via the returned List.  (Structural modifications are
                  those that change the size of the List, or otherwise perturb it in such
                  a fashion that iterations in progress may yield incorrect results.)                
                <param>
                    fromIndex low endpoint (inclusive) of the subList                    
                </param>
                <param>
                    toIndex high endpoint (exclusive) of the subList                    
                </param>
                <return>
                    a view of the specified range within this List                    
                </return>
                <throws>
                    IndexOutOfBoundsException if an endpoint index value is out of range{@code (fromIndex < 0 || toIndex > size)}                    
                </throws>
                <throws>
                    IllegalArgumentException if the endpoint indices are out of order{@code (fromIndex > toIndex)}                    
                </throws>
            </javadoc>
            <method name="subList" type="List<E>" line="1033">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1038">
                Removes from this list all of the elements whose index is between{@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
                  Shifts any succeeding elements to the left (reduces their index).
                  This call shortens the list by {@code (toIndex - fromIndex)} elements.
                  (If {@code toIndex==fromIndex}, this operation has no effect.)                
            </javadoc>
            <method name="removeRange" type="void" line="1045">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <comment line="1051">
                    Let gc do its work                    
                </comment>
                <declaration name="numMoved" type="int" line="1047"/>
                <declaration name="newElementCount" type="int" line="1052"/>
            </method>
            <javadoc line="1057">
                Save the state of the {@code Vector} instance to a stream (that
                  is, serialize it).
                  This method performs synchronization to ensure the consistency
                  of the serialized data.                
            </javadoc>
            <method name="writeObject" type="void" line="1064">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <declaration name="fields" type="java.io.ObjectOutputStream.PutField" line="1065"/>
                <declaration name="data" type="Object[]" line="1066"/>
                <scope line="1067"/>
            </method>
            <javadoc line="1076">
                Returns a list iterator over the elements in this list (in proper
                  sequence), starting at the specified position in the list.
                  The specified index indicates the first element that would be
                  returned by an initial call to {@link ListIterator#next next}.
                  An initial call to {@link ListIterator#previous previous} would
                  return the element with the specified index minus one.
                  &lt;p&gt;The returned list iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="1088">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="1094">
                Returns a list iterator over the elements in this list (in proper
                  sequence).
                  &lt;p&gt;The returned list iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.                
                <see>
                    #listIterator(int)                    
                </see>
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="1102"/>
            <javadoc line="1106">
                Returns an iterator over the elements in this list in proper sequence.
                  &lt;p&gt;The returned iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.                
                <return>
                    an iterator over the elements in this list in proper sequence                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="1113"/>
            <class name="Itr" line="1117">
                <comment line="1122">
                    index of next element to return                    
                </comment>
                <comment line="1123">
                    index of last element returned; -1 if no such                    
                </comment>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <javadoc line="1117">
                    An optimized version of AbstractList.Itr                    
                </javadoc>
                <declaration name="cursor" type="int" line="1121"/>
                <declaration name="lastRet" type="int" line="1122"/>
                <declaration name="expectedModCount" type="int" line="1123"/>
                <method name="hasNext" type="boolean" line="1125">
                    <comment line="1126">
                        Racy but within spec, since modifications are checked                        
                    </comment>
                    <comment line="1127">
                        within or after synchronization in next/previous                        
                    </comment>
                </method>
                <method name="next" type="E" line="1131">
                    <scope line="1132">
                        <declaration name="i" type="int" line="1134"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="1142">
                    <scope line="1145"/>
                </method>
                <method name="checkForComodification" type="void" line="1154"/>
            </class>
            <class name="ListItr" line="1160">
                <extends class="Itr"/>
                <comment line="1122">
                    index of next element to return                    
                </comment>
                <comment line="1123">
                    index of last element returned; -1 if no such                    
                </comment>
                <implements interface="ListIterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <javadoc line="1160">
                    An optimized version of AbstractList.ListItr                    
                </javadoc>
                <method name="ListItr" type="constructor" line="1164">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="hasPrevious" type="boolean" line="1169"/>
                <method name="nextIndex" type="int" line="1173"/>
                <method name="previousIndex" type="int" line="1177"/>
                <method name="previous" type="E" line="1181">
                    <scope line="1182">
                        <declaration name="i" type="int" line="1184"/>
                    </scope>
                </method>
                <method name="set" type="void" line="1192">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                    <scope line="1195"/>
                </method>
                <method name="add" type="void" line="1201">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                    <declaration name="i" type="int" line="1202"/>
                    <scope line="1203"/>
                </method>
            </class>
        </class>
    </source>