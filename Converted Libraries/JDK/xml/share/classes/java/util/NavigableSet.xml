<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="NavigableSet">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="SortedSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="2">
                A {@link SortedSet} extended with navigation methods reporting
                  closest matches for given search targets. Methods {@code lower},{@code floor}, {@code ceiling}, and {@code higher} return elements
                  respectively less than, less than or equal, greater than or equal,
                  and greater than a given element, returning {@code null} if there
                  is no such element.  A {@code NavigableSet} may be accessed and
                  traversed in either ascending or descending order.  The {@codedescendingSet} method returns a view of the set with the senses of
                  all relational and directional methods inverted. The performance of
                  ascending operations and views is likely to be faster than that of
                  descending ones.  This interface additionally defines methods{@code pollFirst} and {@code pollLast} that return and remove the
                  lowest and highest element, if one exists, else returning {@codenull}.  Methods {@code subSet}, {@code headSet},
                  and {@code tailSet} differ from the like-named {@codeSortedSet} methods in accepting additional arguments describing
                  whether lower and upper bounds are inclusive versus exclusive.
                  Subsets of any {@code NavigableSet} must implement the {@codeNavigableSet} interface.
                  &lt;p&gt; The return values of navigation methods may be ambiguous in
                  implementations that permit {@code null} elements. However, even
                  in this case the result can be disambiguated by checking{@code contains(null)}. To avoid such issues, implementations of
                  this interface are encouraged to &lt;em&gt;not&lt;/em&gt; permit insertion of{@code null} elements. (Note that sorted sets of {@link Comparable} elements intrinsically do not permit {@code null}.)
                  &lt;p&gt;Methods{@link #subSet(Object,Object) subSet(E, E)},{@link #headSet(Object) headSet(E)}, and{@link #tailSet(Object) tailSet(E)}are specified to return {@code SortedSet} to allow existing
                  implementations of {@code SortedSet} to be compatibly retrofitted to
                  implement {@code NavigableSet}, but extensions and implementations
                  of this interface are encouraged to override these methods to return{@code NavigableSet}.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Doug Lea                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <param>
                    &lt;E&gt;
                      the type of elements maintained by this set                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lower" type="E" line="34"/>
            <javadoc line="34">
                Returns the greatest element in this set strictly less than the
                  given element, or {@code null} if there is no such element.                
                <param>
                    e the value to match                    
                </param>
                <return>
                    the greatest element less than {@code e},
                      or {@code null} if there is no such element                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be
                      compared with the elements currently in the set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      and this set does not permit null elements                    
                </throws>
            </javadoc>
            <method name="floor" type="E" line="46"/>
            <javadoc line="46">
                Returns the greatest element in this set less than or equal to
                  the given element, or {@code null} if there is no such element.                
                <param>
                    e the value to match                    
                </param>
                <return>
                    the greatest element less than or equal to {@code e},
                      or {@code null} if there is no such element                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be
                      compared with the elements currently in the set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      and this set does not permit null elements                    
                </throws>
            </javadoc>
            <method name="ceiling" type="E" line="58"/>
            <javadoc line="58">
                Returns the least element in this set greater than or equal to
                  the given element, or {@code null} if there is no such element.                
                <param>
                    e the value to match                    
                </param>
                <return>
                    the least element greater than or equal to {@code e},
                      or {@code null} if there is no such element                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be
                      compared with the elements currently in the set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      and this set does not permit null elements                    
                </throws>
            </javadoc>
            <method name="higher" type="E" line="70"/>
            <javadoc line="70">
                Returns the least element in this set strictly greater than the
                  given element, or {@code null} if there is no such element.                
                <param>
                    e the value to match                    
                </param>
                <return>
                    the least element greater than {@code e},
                      or {@code null} if there is no such element                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be
                      compared with the elements currently in the set                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null
                      and this set does not permit null elements                    
                </throws>
            </javadoc>
            <method name="pollFirst" type="E" line="82"/>
            <javadoc line="82">
                Retrieves and removes the first (lowest) element,
                  or returns {@code null} if this set is empty.                
                <return>
                    the first element, or {@code null} if this set is empty                    
                </return>
            </javadoc>
            <method name="pollLast" type="E" line="88"/>
            <javadoc line="88">
                Retrieves and removes the last (highest) element,
                  or returns {@code null} if this set is empty.                
                <return>
                    the last element, or {@code null} if this set is empty                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator&lt;E&gt;" line="94"/>
            <javadoc line="94">
                Returns an iterator over the elements in this set, in ascending order.                
                <return>
                    an iterator over the elements in this set, in ascending order                    
                </return>
            </javadoc>
            <method name="descendingSet" type="NavigableSet&lt;E&gt;" line="99"/>
            <javadoc line="99">
                Returns a reverse order view of the elements contained in this set.
                  The descending set is backed by this set, so changes to the set are
                  reflected in the descending set, and vice-versa.  If either set is
                  modified while an iteration over either set is in progress (except
                  through the iterator&apos;s own {@code remove} operation), the results of
                  the iteration are undefined.
                  &lt;p&gt;The returned set has an ordering equivalent to
                  &lt;tt&gt;{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())&lt;/tt&gt;.
                  The expression {@code s.descendingSet().descendingSet()} returns a
                  view of {@code s} essentially equivalent to {@code s}.                
                <return>
                    a reverse order view of this set                    
                </return>
            </javadoc>
            <method name="descendingIterator" type="Iterator&lt;E&gt;" line="113"/>
            <javadoc line="113">
                Returns an iterator over the elements in this set, in descending order.
                  Equivalent in effect to {@code descendingSet().iterator()}.                
                <return>
                    an iterator over the elements in this set, in descending order                    
                </return>
            </javadoc>
            <method name="subSet" type="NavigableSet&lt;E&gt;" line="119"/>
            <javadoc line="119">
                Returns a view of the portion of this set whose elements range from{@code fromElement} to {@code toElement}.  If {@code fromElement} and{@code toElement} are equal, the returned set is empty unless {@codefromInclusive} and {@code toInclusive} are both true.  The returned set
                  is backed by this set, so changes in the returned set are reflected in
                  this set, and vice-versa.  The returned set supports all optional set
                  operations that this set supports.
                  &lt;p&gt;The returned set will throw an {@code IllegalArgumentException}on an attempt to insert an element outside its range.                
                <param>
                    fromElement low endpoint of the returned set                    
                </param>
                <param>
                    fromInclusive {@code true} if the low endpoint
                      is to be included in the returned view                    
                </param>
                <param>
                    toElement high endpoint of the returned set                    
                </param>
                <param>
                    toInclusive {@code true} if the high endpoint
                      is to be included in the returned view                    
                </param>
                <return>
                    a view of the portion of this set whose elements range from{@code fromElement}, inclusive, to {@code toElement}, exclusive                    
                </return>
                <throws>
                    ClassCastException if {@code fromElement} and{@code toElement} cannot be compared to one another using this
                      set&apos;s comparator (or, if the set has no comparator, using
                      natural ordering).  Implementations may, but are not required
                      to, throw this exception if {@code fromElement} or{@code toElement} cannot be compared to elements currently in
                      the set.                    
                </throws>
                <throws>
                    NullPointerException if {@code fromElement} or{@code toElement} is null and this set does
                      not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code fromElement} is
                      greater than {@code toElement}; or if this set itself
                      has a restricted range, and {@code fromElement} or{@code toElement} lies outside the bounds of the range.                    
                </throws>
            </javadoc>
            <method name="headSet" type="NavigableSet&lt;E&gt;" line="144"/>
            <javadoc line="144">
                Returns a view of the portion of this set whose elements are less than
                  (or equal to, if {@code inclusive} is true) {@code toElement}.  The
                  returned set is backed by this set, so changes in the returned set are
                  reflected in this set, and vice-versa.  The returned set supports all
                  optional set operations that this set supports.
                  &lt;p&gt;The returned set will throw an {@code IllegalArgumentException}on an attempt to insert an element outside its range.                
                <param>
                    toElement high endpoint of the returned set                    
                </param>
                <param>
                    inclusive {@code true} if the high endpoint
                      is to be included in the returned view                    
                </param>
                <return>
                    a view of the portion of this set whose elements are less than
                      (or equal to, if {@code inclusive} is true) {@code toElement}                    
                </return>
                <throws>
                    ClassCastException if {@code toElement} is not compatible
                      with this set&apos;s comparator (or, if the set has no comparator,
                      if {@code toElement} does not implement {@link Comparable}).
                      Implementations may, but are not required to, throw this
                      exception if {@code toElement} cannot be compared to elements
                      currently in the set.                    
                </throws>
                <throws>
                    NullPointerException if {@code toElement} is null and
                      this set does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if this set itself has a
                      restricted range, and {@code toElement} lies outside the
                      bounds of the range                    
                </throws>
            </javadoc>
            <method name="tailSet" type="NavigableSet&lt;E&gt;" line="169"/>
            <javadoc line="169">
                Returns a view of the portion of this set whose elements are greater
                  than (or equal to, if {@code inclusive} is true) {@code fromElement}.
                  The returned set is backed by this set, so changes in the returned set
                  are reflected in this set, and vice-versa.  The returned set supports
                  all optional set operations that this set supports.
                  &lt;p&gt;The returned set will throw an {@code IllegalArgumentException}on an attempt to insert an element outside its range.                
                <param>
                    fromElement low endpoint of the returned set                    
                </param>
                <param>
                    inclusive {@code true} if the low endpoint
                      is to be included in the returned view                    
                </param>
                <return>
                    a view of the portion of this set whose elements are greater
                      than or equal to {@code fromElement}                    
                </return>
                <throws>
                    ClassCastException if {@code fromElement} is not compatible
                      with this set&apos;s comparator (or, if the set has no comparator,
                      if {@code fromElement} does not implement {@link Comparable}).
                      Implementations may, but are not required to, throw this
                      exception if {@code fromElement} cannot be compared to elements
                      currently in the set.                    
                </throws>
                <throws>
                    NullPointerException if {@code fromElement} is null
                      and this set does not permit null elements                    
                </throws>
                <throws>
                    IllegalArgumentException if this set itself has a
                      restricted range, and {@code fromElement} lies outside the
                      bounds of the range                    
                </throws>
            </javadoc>
            <method name="subSet" type="SortedSet&lt;E&gt;" line="194"/>
            <javadoc line="194">
                {@inheritDoc}&lt;p&gt;Equivalent to {@code subSet(fromElement, true, toElement, false)}.                
                <throws>
                    ClassCastException       {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException     {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="headSet" type="SortedSet&lt;E&gt;" line="201"/>
            <javadoc line="201">
                {@inheritDoc}&lt;p&gt;Equivalent to {@code headSet(toElement, false)}.                
                <throws>
                    ClassCastException       {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException     {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}na                    
                </throws>
            </javadoc>
            <method name="tailSet" type="SortedSet&lt;E&gt;" line="208"/>
            <javadoc line="208">
                {@inheritDoc}&lt;p&gt;Equivalent to {@code tailSet(fromElement, true)}.                
                <throws>
                    ClassCastException       {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException     {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
        </interface>
    </source>