<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.regex.Pattern"/>
        <import package="java.util.regex.Matcher"/>
        <import package="java.util.spi.CurrencyNameProvider"/>
        <import package="java.util.spi.LocaleServiceProvider"/>
        <import package="sun.util.LocaleServiceProviderPool"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.util.resources.LocaleData"/>
        <import package="sun.util.resources.OpenListResourceBundle"/>
        <class name="Currency" line="20">
            <implements interface="Serializable"/>
            <javadoc line="20">
                Represents a currency. Currencies are identified by their ISO 4217 currency
                  codes. Visit the &lt;a href=&quot;http://www.iso.org/iso/en/prods-services/popstds/currencycodes.html&quot;&gt;
                  ISO web site&lt;/a&gt; for more information, including a table of
                  currency codes.
                  &lt;p&gt;
                  The class is designed so that there&apos;s never more than one
                  &lt;code&gt;Currency&lt;/code&gt; instance for any given currency. Therefore, there&apos;s
                  no public constructor. You obtain a &lt;code&gt;Currency&lt;/code&gt; instance using
                  the &lt;code&gt;getInstance&lt;/code&gt; methods.
                  &lt;p&gt;
                  Users can supersede the Java runtime currency data by creating a properties
                  file named &lt;code&gt;&amp;lt;JAVA_HOME&amp;gt;/lib/currency.properties&lt;/code&gt;.  The contents
                  of the properties file are key/value pairs of the ISO 3166 country codes
                  and the ISO 4217 currency data respectively.  The value part consists of
                  three ISO 4217 values of a currency, i.e., an alphabetic code, a numeric
                  code, and a minor unit.  Those three ISO 4217 values are separated by commas.
                  The lines which start with &apos;#&apos;s are considered comment lines.  For example,
                  &lt;p&gt;
                  &lt;code&gt;
                  #Sample currency properties&lt;br&gt;
                  JP=JPZ,999,0
                  &lt;/code&gt;
                  &lt;p&gt;
                  will supersede the currency data for Japan.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="48"/>
            <declaration name="currencyCode" type="String" line="49"/>
            <javadoc line="49">
                ISO 4217 currency code for this currency.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="defaultFractionDigits" type="int" line="54"/>
            <javadoc line="54">
                Default fraction digits for this currency.
                  Set from currency data tables.                
            </javadoc>
            <declaration name="numericCode" type="int" line="59"/>
            <javadoc line="59">
                ISO 4217 numeric code for this currency.
                  Set from currency data tables.                
            </javadoc>
            <declaration name="instances" type="HashMap&amp;lt;String,Currency&amp;gt;" line="64"/>
            <declaration name="available" type="HashSet&amp;lt;Currency&amp;gt;" line="65"/>
            <declaration name="formatVersion" type="int" line="66"/>
            <declaration name="dataVersion" type="int" line="67"/>
            <declaration name="mainTable" type="int[]" line="68"/>
            <declaration name="scCutOverTimes" type="long[]" line="69"/>
            <declaration name="scOldCurrencies" type="String[]" line="70"/>
            <declaration name="scNewCurrencies" type="String[]" line="71"/>
            <declaration name="scOldCurrenciesDFD" type="int[]" line="72"/>
            <declaration name="scNewCurrenciesDFD" type="int[]" line="73"/>
            <declaration name="scOldCurrenciesNumericCode" type="int[]" line="74"/>
            <declaration name="scNewCurrenciesNumericCode" type="int[]" line="75"/>
            <declaration name="otherCurrencies" type="String" line="76"/>
            <declaration name="otherCurrenciesDFD" type="int[]" line="77"/>
            <declaration name="otherCurrenciesNumericCode" type="int[]" line="78"/>
            <declaration name="MAGIC_NUMBER" type="int" line="79"/>
            <declaration name="A_TO_Z" type="int" line="80"/>
            <declaration name="INVALID_COUNTRY_ENTRY" type="int" line="81"/>
            <declaration name="COUNTRY_WITHOUT_CURRENCY_ENTRY" type="int" line="82"/>
            <declaration name="SIMPLE_CASE_COUNTRY_MASK" type="int" line="83"/>
            <declaration name="SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK" type="int" line="84"/>
            <declaration name="SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK" type="int" line="85"/>
            <declaration name="SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT" type="int" line="86"/>
            <declaration name="SPECIAL_CASE_COUNTRY_MASK" type="int" line="87"/>
            <declaration name="SPECIAL_CASE_COUNTRY_INDEX_MASK" type="int" line="88"/>
            <declaration name="SPECIAL_CASE_COUNTRY_INDEX_DELTA" type="int" line="89"/>
            <declaration name="COUNTRY_TYPE_MASK" type="int" line="90"/>
            <declaration name="NUMERIC_CODE_MASK" type="int" line="91"/>
            <declaration name="NUMERIC_CODE_SHIFT" type="int" line="92"/>
            <declaration name="VALID_FORMAT_VERSION" type="int" line="93"/>
            <scope line="94"/>
            <declaration name="SYMBOL" type="int" line="151"/>
            <javadoc line="151">
                Constants for retrieving localized names from the name providers.                
            </javadoc>
            <declaration name="DISPLAYNAME" type="int" line="155"/>
            <javadoc line="156">
                Constructs a &lt;code&gt;Currency&lt;/code&gt; instance. The constructor is private
                  so that we can insure that there&apos;s never more than one instance for a
                  given currency.                
            </javadoc>
            <method name="Currency" type="constructor" line="161">
                <params>
                    <param name="currencyCode" type="String"/>
                    <param name="defaultFractionDigits" type="int"/>
                    <param name="numericCode" type="int"/>
                </params>
            </method>
            <javadoc line="166">
                Returns the &lt;code&gt;Currency&lt;/code&gt; instance for the given currency code.                
                <param>
                    currencyCode the ISO 4217 code of the currency                    
                </param>
                <return>
                    the &lt;code&gt;Currency&lt;/code&gt; instance for the given currency code                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;currencyCode&lt;/code&gt; is null                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;currencyCode&lt;/code&gt; is not
                      a supported ISO 4217 code.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="Currency" line="174">
                <params>
                    <param name="currencyCode" type="String"/>
                </params>
            </method>
            <method name="getInstance" type="Currency" line="177">
                <params>
                    <param name="currencyCode" type="String"/>
                    <param name="defaultFractionDigits" type="int"/>
                    <param name="numericCode" type="int"/>
                </params>
                <scope line="178">
                    <declaration name="instance" type="Currency" line="179"/>
                    <scope line="180"/>
                    <scope line="183">
                        <scope line="184"/>
                        <declaration name="char1" type="char" line="187"/>
                        <declaration name="char2" type="char" line="188"/>
                        <declaration name="tableEntry" type="int" line="189"/>
                        <scope line="190"/>
                        <scope line="194">
                            <scope line="195"/>
                            <declaration name="index" type="int" line="198"/>
                            <scope line="199"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="211">
                Returns the &lt;code&gt;Currency&lt;/code&gt; instance for the country of the
                  given locale. The language and variant components of the locale
                  are ignored. The result may vary over time, as countries change their
                  currencies. For example, for the original member countries of the
                  European Monetary Union, the method returns the old national currencies
                  until December 31, 2001, and the Euro from January 1, 2002, local time
                  of the respective countries.
                  &lt;p&gt;
                  The method returns &lt;code&gt;null&lt;/code&gt; for territories that don&apos;t
                  have a currency, such as Antarctica.                
                <param>
                    locale the locale for whose country a &lt;code&gt;Currency&lt;/code&gt;
                      instance is needed                    
                </param>
                <return>
                    the &lt;code&gt;Currency&lt;/code&gt; instance for the country of the given
                      locale, or null                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; or its country
                      code is null                    
                </exception>
                <exception>
                    IllegalArgumentException if the country of the given locale
                      is not a supported ISO 3166 country code.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="Currency" line="231">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="country" type="String" line="232"/>
                <scope line="233"/>
                <scope line="236"/>
                <declaration name="char1" type="char" line="239"/>
                <declaration name="char2" type="char" line="240"/>
                <declaration name="tableEntry" type="int" line="241"/>
                <scope line="242">
                    <declaration name="finalChar" type="char" line="243"/>
                    <declaration name="defaultFractionDigits" type="int" line="244"/>
                    <declaration name="numericCode" type="int" line="245"/>
                    <declaration name="sb" type="StringBuffer" line="246"/>
                </scope>
                <scope line="250">
                    <scope line="251"/>
                    <scope line="254"/>
                    <scope line="257">
                        <declaration name="index" type="int" line="258"/>
                        <scope line="259"/>
                        <scope line="262"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="268">
                Gets the set of available currencies.  The returned set of currencies
                  contains all of the available currencies, which may include currencies
                  that represent obsolete ISO 4217 codes.  The set can be modified
                  without affecting the available currencies in the runtime.                
                <return>
                    the set of available currencies.  If there is no currency
                      available in the runtime, the returned set is empty.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getAvailableCurrencies" type="Set&lt;Currency&gt;" line="277">
                <scope line="278">
                    <scope line="279">
                        <scope line="281">
                            <scope line="282">
                                <declaration name="tableEntry" type="int" line="283"/>
                                <scope line="284">
                                    <declaration name="finalChar" type="char" line="285"/>
                                    <declaration name="defaultFractionDigits" type="int" line="286"/>
                                    <declaration name="numericCode" type="int" line="287"/>
                                    <declaration name="sb" type="StringBuilder" line="288"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="st" type="StringTokenizer" line="296"/>
                        <scope line="297"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="304">
                Gets the ISO 4217 currency code of this currency.                
                <return>
                    the ISO 4217 currency code of this currency.                    
                </return>
            </javadoc>
            <method name="getCurrencyCode" type="String" line="308"/>
            <javadoc line="311">
                Gets the symbol of this currency for the default locale.
                  For example, for the US Dollar, the symbol is &quot;$&quot; if the default
                  locale is the US, while for other locales it may be &quot;US$&quot;. If no
                  symbol can be determined, the ISO 4217 currency code is returned.                
                <return>
                    the symbol of this currency for the default locale                    
                </return>
            </javadoc>
            <method name="getSymbol" type="String" line="318"/>
            <javadoc line="321">
                Gets the symbol of this currency for the specified locale.
                  For example, for the US Dollar, the symbol is &quot;$&quot; if the specified
                  locale is the US, while for other locales it may be &quot;US$&quot;. If no
                  symbol can be determined, the ISO 4217 currency code is returned.                
                <param>
                    locale the locale for which a display name for this currency is
                      needed                    
                </param>
                <return>
                    the symbol of this currency for the specified locale                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
            </javadoc>
            <method name="getSymbol" type="String" line="331">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="332">
                    <declaration name="pool" type="LocaleServiceProviderPool" line="333"/>
                    <scope line="334">
                        <declaration name="symbol" type="String" line="335"/>
                        <scope line="336"/>
                    </scope>
                    <declaration name="bundle" type="ResourceBundle" line="340"/>
                </scope>
                <scope line="343"/>
            </method>
            <javadoc line="347">
                Gets the default number of fraction digits used with this currency.
                  For example, the default number of fraction digits for the Euro is 2,
                  while for the Japanese Yen it&apos;s 0.
                  In the case of pseudo-currencies, such as IMF Special Drawing Rights,
                  -1 is returned.                
                <return>
                    the default number of fraction digits used with this currency                    
                </return>
            </javadoc>
            <method name="getDefaultFractionDigits" type="int" line="355"/>
            <javadoc line="358">
                Returns the ISO 4217 numeric code of this currency.                
                <return>
                    the ISO 4217 numeric code of this currency                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getNumericCode" type="int" line="363"/>
            <javadoc line="366">
                Gets the name that is suitable for displaying this currency for
                  the default locale.  If there is no suitable display name found
                  for the default locale, the ISO 4217 currency code is returned.                
                <return>
                    the display name of this currency for the default locale                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getDisplayName" type="String" line="373"/>
            <javadoc line="376">
                Gets the name that is suitable for displaying this currency for
                  the specified locale.  If there is no suitable display name found
                  for the specified locale, the ISO 4217 currency code is returned.                
                <param>
                    locale the locale for which a display name for this currency is
                      needed                    
                </param>
                <return>
                    the display name of this currency for the specified locale                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getDisplayName" type="String" line="386">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="387">
                    <declaration name="bundle" type="OpenListResourceBundle" line="388"/>
                    <declaration name="result" type="String" line="389"/>
                    <declaration name="bundleKey" type="String" line="390"/>
                    <declaration name="pool" type="LocaleServiceProviderPool" line="391"/>
                    <scope line="392"/>
                    <scope line="395"/>
                    <scope line="398"/>
                </scope>
                <scope line="402"/>
            </method>
            <javadoc line="406">
                Returns the ISO 4217 currency code of this currency.                
                <return>
                    the ISO 4217 currency code of this currency                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="410"/>
            <javadoc line="413">
                Resolves instances being deserialized to a single instance per currency.                
            </javadoc>
            <method name="readResolve" type="Object" line="416"/>
            <javadoc line="419">
                Gets the main table entry for the country whose country code consists
                  of char1 and char2.                
            </javadoc>
            <method name="getMainTableEntry" type="int" line="423">
                <params>
                    <param name="char1" type="char"/>
                    <param name="char2" type="char"/>
                </params>
                <scope line="424"/>
            </method>
            <javadoc line="429">
                Sets the main table entry for the country whose country code consists
                  of char1 and char2.                
            </javadoc>
            <method name="setMainTableEntry" type="void" line="433">
                <params>
                    <param name="char1" type="char"/>
                    <param name="char2" type="char"/>
                    <param name="entry" type="int"/>
                </params>
                <scope line="434"/>
            </method>
            <class name="CurrencyNameGetter" line="439">
                <implements interface="LocaleServiceProviderPool.LocalizedObjectGetter">
                    <type_params>
                        <type_param name="CurrencyNameProvider"/>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <javadoc line="439">
                    Obtains a localized currency names from a CurrencyNameProvider
                      implementation.                    
                </javadoc>
                <declaration name="INSTANCE" type="CurrencyNameGetter" line="444"/>
                <method name="getObject" type="String" line="445">
                    <params>
                        <param name="currencyNameProvider" type="CurrencyNameProvider"/>
                        <param name="locale" type="Locale"/>
                        <param name="key" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                </method>
            </class>
            <method name="readIntArray" type="int[]" line="459">
                <params>
                    <param name="dis" type="DataInputStream"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="ret" type="int[]" line="460"/>
                <scope line="461"/>
            </method>
            <method name="readLongArray" type="long[]" line="466">
                <params>
                    <param name="dis" type="DataInputStream"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="ret" type="long[]" line="467"/>
                <scope line="468"/>
            </method>
            <method name="readStringArray" type="String[]" line="473">
                <params>
                    <param name="dis" type="DataInputStream"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="ret" type="String[]" line="474"/>
                <scope line="475"/>
            </method>
            <javadoc line="480">
                                
            </javadoc>
            <method name="replaceCurrencyData" type="void" line="482">
                <params>
                    <param name="pattern" type="Pattern"/>
                    <param name="ctry" type="String"/>
                    <param name="curdata" type="String"/>
                </params>
                <scope line="483">
                    <declaration name="message" type="String" line="484"/>
                </scope>
                <declaration name="m" type="Matcher" line="488"/>
                <scope line="489">
                    <declaration name="message" type="String" line="490"/>
                </scope>
                <declaration name="code" type="String" line="494"/>
                <declaration name="numeric" type="int" line="495"/>
                <declaration name="fraction" type="int" line="496"/>
                <declaration name="entry" type="int" line="497"/>
                <declaration name="index" type="int" line="498"/>
                <scope line="499">
                    <scope line="500"/>
                </scope>
                <scope line="504"/>
                <scope line="507"/>
            </method>
            <method name="info" type="void" line="512">
                <params>
                    <param name="message" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
                <declaration name="logger" type="PlatformLogger" line="513"/>
                <scope line="514">
                    <scope line="515"/>
                    <scope line="518"/>
                </scope>
            </method>
        </class>
    </source>