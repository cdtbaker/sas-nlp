<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="AbstractCollection" line="28">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <comment line="70">
                Query Operations                
            </comment>
            <comment line="238">
                Modification Operations                
            </comment>
            <comment line="293">
                Bulk Operations                
            </comment>
            <comment line="430">
                String conversion                
            </comment>
            <implements interface="Collection">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="28">
                This class provides a skeletal implementation of the &lt;tt&gt;Collection&lt;/tt&gt;
                  interface, to minimize the effort required to implement this interface. &lt;p&gt;
                  To implement an unmodifiable collection, the programmer needs only to
                  extend this class and provide implementations for the &lt;tt&gt;iterator&lt;/tt&gt; and
                  &lt;tt&gt;size&lt;/tt&gt; methods.  (The iterator returned by the &lt;tt&gt;iterator&lt;/tt&gt;
                  method must implement &lt;tt&gt;hasNext&lt;/tt&gt; and &lt;tt&gt;next&lt;/tt&gt;.)&lt;p&gt;
                  To implement a modifiable collection, the programmer must additionally
                  override this class&apos;s &lt;tt&gt;add&lt;/tt&gt; method (which otherwise throws an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;), and the iterator returned by the
                  &lt;tt&gt;iterator&lt;/tt&gt; method must additionally implement its &lt;tt&gt;remove&lt;/tt&gt;
                  method.&lt;p&gt;
                  The programmer should generally provide a void (no argument) and
                  &lt;tt&gt;Collection&lt;/tt&gt; constructor, as per the recommendation in the
                  &lt;tt&gt;Collection&lt;/tt&gt; interface specification.&lt;p&gt;
                  The documentation for each non-abstract method in this class describes its
                  implementation in detail.  Each of these methods may be overridden if
                  the collection being implemented admits a more efficient implementation.&lt;p&gt;
                  This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Collection                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="62">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="AbstractCollection" type="constructor" line="66"/>
            <method name="iterator" type="Iterator<E>" line="71"/>
            <javadoc line="71">
                Returns an iterator over the elements contained in this collection.                
                <return>
                    an iterator over the elements contained in this collection                    
                </return>
            </javadoc>
            <method name="size" type="int" line="78"/>
            <javadoc line="80">
                {@inheritDoc}&lt;p&gt;This implementation returns &lt;tt&gt;size() == 0&lt;/tt&gt;.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="85"/>
            <javadoc line="89">
                {@inheritDoc}&lt;p&gt;This implementation iterates over the elements in the collection,
                  checking each element in turn for equality with the specified element.                
                <throws>
                    ClassCastException   {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="contains" type="boolean" line="98">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="it" type="Iterator&lt;E&gt;" line="99"/>
                <scope line="100"/>
                <scope line="104"/>
            </method>
            <javadoc line="112">
                {@inheritDoc}&lt;p&gt;This implementation returns an array containing all the elements
                  returned by this collection&apos;s iterator, in the same order, stored in
                  consecutive elements of the array, starting with index {@code 0}.
                  The length of the returned array is equal to the number of elements
                  returned by the iterator, even if the size of this collection changes
                  during iteration, as might happen if the collection permits
                  concurrent modification during iteration.  The {@code size} method is
                  called only as an optimization hint; the correct result is returned
                  even if the iterator returns a different number of elements.
                  &lt;p&gt;This method is equivalent to:
                  &lt;pre&gt; {@codeList&lt;E&gt; list = new ArrayList&lt;E&gt;(size());
                  for (E e : this)
                  list.add(e);
                  return list.toArray();}&lt;/pre&gt;                
            </javadoc>
            <method name="toArray" type="Object[]" line="134">
                <comment line="135">
                    Estimate size of array; be prepared to see more or fewer elements                    
                </comment>
                <comment line="139">
                    fewer elements than expected                    
                </comment>
                <declaration name="r" type="Object[]" line="136"/>
                <declaration name="it" type="Iterator&lt;E&gt;" line="137"/>
                <scope line="138"/>
            </method>
            <javadoc line="146">
                {@inheritDoc}&lt;p&gt;This implementation returns an array containing all the elements
                  returned by this collection&apos;s iterator in the same order, stored in
                  consecutive elements of the array, starting with index {@code 0}.
                  If the number of elements returned by the iterator is too large to
                  fit into the specified array, then the elements are returned in a
                  newly allocated array with length equal to the number of elements
                  returned by the iterator, even if the size of this collection
                  changes during iteration, as might happen if the collection permits
                  concurrent modification during iteration.  The {@code size} method is
                  called only as an optimization hint; the correct result is returned
                  even if the iterator returns a different number of elements.
                  &lt;p&gt;This method is equivalent to:
                  &lt;pre&gt; {@codeList&lt;E&gt; list = new ArrayList&lt;E&gt;(size());
                  for (E e : this)
                  list.add(e);
                  return list.toArray(a);}&lt;/pre&gt;                
                <throws>
                    ArrayStoreException  {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="173">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <comment line="174">
                    Estimate size of array; be prepared to see more or fewer elements                    
                </comment>
                <comment line="182">
                    fewer elements than expected                    
                </comment>
                <comment line="185">
                    null-terminate                    
                </comment>
                <declaration name="size" type="int" line="175"/>
                <declaration name="r" type="T[]" line="176"/>
                <declaration name="it" type="Iterator&lt;E&gt;" line="179"/>
                <scope line="181">
                    <scope line="182"/>
                </scope>
            </method>
            <declaration name="MAX_ARRAY_SIZE" type="int" line="193"/>
            <javadoc line="193">
                The maximum size of array to allocate.
                  Some VMs reserve some header words in an array.
                  Attempts to allocate larger arrays may result in
                  OutOfMemoryError: Requested array size exceeds VM limit                
            </javadoc>
            <javadoc line="201">
                Reallocates the array being used within toArray when the iterator
                  returned more elements than expected, and finishes filling it from
                  the iterator.                
                <param>
                    r the array, replete with previously stored elements                    
                </param>
                <param>
                    it the in-progress iterator over this collection                    
                </param>
                <return>
                    array containing the elements in the given array, plus any
                      further elements returned by the iterator, trimmed to size                    
                </return>
            </javadoc>
            <method name="finishToArray" type="T[]" line="211">
                <params>
                    <param name="r" type="T[]"/>
                    <param name="it" type="Iterator<?>"/>
                </params>
                <comment line="217">
                    overflow-conscious code                    
                </comment>
                <comment line="224">
                    trim if overallocated                    
                </comment>
                <declaration name="i" type="int" line="212"/>
                <scope line="213">
                    <declaration name="cap" type="int" line="214"/>
                    <scope line="215">
                        <declaration name="newCap" type="int" line="216"/>
                    </scope>
                </scope>
            </method>
            <method name="hugeCapacity" type="int" line="228">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="229">
                    overflow                    
                </comment>
            </method>
            <javadoc line="239">
                {@inheritDoc}&lt;p&gt;This implementation always throws an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalStateException         {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="251">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="255">
                {@inheritDoc}&lt;p&gt;This implementation iterates over the collection looking for the
                  specified element.  If it finds the element, it removes the element
                  from the collection using the iterator&apos;s remove method.
                  &lt;p&gt;Note that this implementation throws an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the iterator returned by this
                  collection&apos;s iterator method does not implement the &lt;tt&gt;remove&lt;/tt&gt;
                  method and this collection contains the specified object.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="271">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="it" type="Iterator&lt;E&gt;" line="272"/>
                <scope line="273">
                    <scope line="274">
                        <scope line="275"/>
                    </scope>
                </scope>
                <scope line="280">
                    <scope line="281">
                        <scope line="282"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="294">
                {@inheritDoc}&lt;p&gt;This implementation iterates over the specified collection,
                  checking each element returned by the iterator in turn to see
                  if it&apos;s contained in this collection.  If all elements are so
                  contained &lt;tt&gt;true&lt;/tt&gt; is returned, otherwise &lt;tt&gt;false&lt;/tt&gt;.                
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="containsAll" type="boolean" line="306">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="313">
                {@inheritDoc}&lt;p&gt;This implementation iterates over the specified collection, and adds
                  each object returned by the iterator to this collection, in turn.
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; unless &lt;tt&gt;add&lt;/tt&gt; is
                  overridden (assuming the specified collection is non-empty).                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException      {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalStateException         {@inheritDoc}                    
                </throws>
                <see>
                    #add(Object)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="331">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="modified" type="boolean" line="332"/>
            </method>
            <javadoc line="339">
                {@inheritDoc}&lt;p&gt;This implementation iterates over this collection, checking each
                  element returned by the iterator in turn to see if it&apos;s contained
                  in the specified collection.  If it&apos;s so contained, it&apos;s removed from
                  this collection with the iterator&apos;s &lt;tt&gt;remove&lt;/tt&gt; method.
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the iterator returned by the
                  &lt;tt&gt;iterator&lt;/tt&gt; method does not implement the &lt;tt&gt;remove&lt;/tt&gt; method
                  and this collection contains one or more elements in common with the
                  specified collection.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="removeAll" type="boolean" line="360">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="modified" type="boolean" line="361"/>
                <declaration name="it" type="Iterator&lt;?&gt;" line="362"/>
                <scope line="363">
                    <scope line="364"/>
                </scope>
            </method>
            <javadoc line="372">
                {@inheritDoc}&lt;p&gt;This implementation iterates over this collection, checking each
                  element returned by the iterator in turn to see if it&apos;s contained
                  in the specified collection.  If it&apos;s not so contained, it&apos;s removed
                  from this collection with the iterator&apos;s &lt;tt&gt;remove&lt;/tt&gt; method.
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the iterator returned by the
                  &lt;tt&gt;iterator&lt;/tt&gt; method does not implement the &lt;tt&gt;remove&lt;/tt&gt; method
                  and this collection contains one or more elements not present in the
                  specified collection.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
                <throws>
                    ClassCastException            {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException          {@inheritDoc}                    
                </throws>
                <see>
                    #remove(Object)                    
                </see>
                <see>
                    #contains(Object)                    
                </see>
            </javadoc>
            <method name="retainAll" type="boolean" line="393">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <declaration name="modified" type="boolean" line="394"/>
                <declaration name="it" type="Iterator&lt;E&gt;" line="395"/>
                <scope line="396">
                    <scope line="397"/>
                </scope>
            </method>
            <javadoc line="405">
                {@inheritDoc}&lt;p&gt;This implementation iterates over this collection, removing each
                  element using the &lt;tt&gt;Iterator.remove&lt;/tt&gt; operation.  Most
                  implementations will probably choose to override this method for
                  efficiency.
                  &lt;p&gt;Note that this implementation will throw an
                  &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; if the iterator returned by this
                  collection&apos;s &lt;tt&gt;iterator&lt;/tt&gt; method does not implement the
                  &lt;tt&gt;remove&lt;/tt&gt; method and this collection is non-empty.                
                <throws>
                    UnsupportedOperationException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="clear" type="void" line="420">
                <declaration name="it" type="Iterator&lt;E&gt;" line="421"/>
                <scope line="422"/>
            </method>
            <javadoc line="431">
                Returns a string representation of this collection.  The string
                  representation consists of a list of the collection&apos;s elements in the
                  order they are returned by its iterator, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).  Elements are converted to strings as
                  by {@link String#valueOf(Object)}.                
                <return>
                    a string representation of this collection                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="441">
                <declaration name="it" type="Iterator&lt;E&gt;" line="442"/>
                <declaration name="sb" type="StringBuilder" line="446"/>
                <scope line="448">
                    <declaration name="e" type="E" line="449"/>
                </scope>
            </method>
        </class>
    </source>