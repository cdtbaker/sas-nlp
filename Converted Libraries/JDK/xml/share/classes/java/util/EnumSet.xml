<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="sun.misc.SharedSecrets"/>
        <class name="EnumSet" line="30">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractSet">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="438">
                readObject method for the serialization proxy pattern
                 See Effective Java, Second Ed., Item 78.                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="30">
                A specialized {@link Set} implementation for use with enum types.  All of
                  the elements in an enum set must come from a single enum type that is
                  specified, explicitly or implicitly, when the set is created.  Enum sets
                  are represented internally as bit vectors.  This representation is
                  extremely compact and efficient. The space and time performance of this
                  class should be good enough to allow its use as a high-quality, typesafe
                  alternative to traditional &lt;tt&gt;int&lt;/tt&gt;-based &quot;bit flags.&quot;  Even bulk
                  operations (such as &lt;tt&gt;containsAll&lt;/tt&gt; and &lt;tt&gt;retainAll&lt;/tt&gt;) should
                  run very quickly if their argument is also an enum set.
                  &lt;p&gt;The iterator returned by the &lt;tt&gt;iterator&lt;/tt&gt; method traverses the
                  elements in their &lt;i&gt;natural order&lt;/i&gt; (the order in which the enum
                  constants are declared).  The returned iterator is &lt;i&gt;weakly
                  consistent&lt;/i&gt;: it will never throw {@link ConcurrentModificationException}and it may or may not show the effects of any modifications to the set that
                  occur while the iteration is in progress.
                  &lt;p&gt;Null elements are not permitted.  Attempts to insert a null element
                  will throw {@link NullPointerException}.  Attempts to test for the
                  presence of a null element or to remove one will, however, function
                  properly.
                  &lt;P&gt;Like most collection implementations, &lt;tt&gt;EnumSet&lt;/tt&gt; is not
                  synchronized.  If multiple threads access an enum set concurrently, and at
                  least one of the threads modifies the set, it should be synchronized
                  externally.  This is typically accomplished by synchronizing on some
                  object that naturally encapsulates the enum set.  If no such object exists,
                  the set should be &quot;wrapped&quot; using the {@link Collections#synchronizedSet}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access:
                  &lt;pre&gt;
                  Set&amp;lt;MyEnum&amp;gt; s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));
                  &lt;/pre&gt;
                  &lt;p&gt;Implementation note: All basic operations execute in constant time.
                  They are likely (though not guaranteed) to be much faster than their{@link HashSet} counterparts.  Even bulk operations execute in
                  constant time if their argument is also an enum set.
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.5                    
                </since>
                <see>
                    EnumMap                    
                </see>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="elementType" type="Class&lt;E&gt;" line="83"/>
            <javadoc line="83">
                The class of all the elements of this set.                
            </javadoc>
            <declaration name="universe" type="Enum[]" line="88"/>
            <javadoc line="88">
                All of the values comprising T.  (Cached for performance.)                
            </javadoc>
            <declaration name="ZERO_LENGTH_ENUM_ARRAY" type="Enum[]" line="93"/>
            <method name="EnumSet" type="constructor" line="95">
                <params>
                    <param name="elementType" type="Class<E>"/>
                    <param name="universe" type="Enum[]"/>
                </params>
            </method>
            <javadoc line="100">
                Creates an empty enum set with the specified element type.                
                <param>
                    elementType the class object of the element type for this enum
                      set                    
                </param>
                <throws>
                    NullPointerException if <tt>elementType</tt> is null                    
                </throws>
            </javadoc>
            <method name="noneOf" type="EnumSet<E>" line="107">
                <params>
                    <param name="elementType" type="Class<E>"/>
                </params>
                <declaration name="universe" type="Enum[]" line="108"/>
            </method>
            <javadoc line="118">
                Creates an enum set containing all of the elements in the specified
                  element type.                
                <param>
                    elementType the class object of the element type for this enum
                      set                    
                </param>
                <throws>
                    NullPointerException if <tt>elementType</tt> is null                    
                </throws>
            </javadoc>
            <method name="allOf" type="EnumSet<E>" line="126">
                <params>
                    <param name="elementType" type="Class<E>"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="127"/>
            </method>
            <method name="addAll" type="void" line="132"/>
            <javadoc line="132">
                Adds all of the elements from the appropriate enum type to this enum
                  set, which is empty prior to the call.                
            </javadoc>
            <javadoc line="138">
                Creates an enum set with the same element type as the specified enum
                  set, initially containing the same elements (if any).                
                <param>
                    s the enum set from which to initialize this enum set                    
                </param>
                <throws>
                    NullPointerException if <tt>s</tt> is null                    
                </throws>
            </javadoc>
            <method name="copyOf" type="EnumSet<E>" line="145">
                <params>
                    <param name="s" type="EnumSet<E>"/>
                </params>
            </method>
            <javadoc line="149">
                Creates an enum set initialized from the specified collection.  If
                  the specified collection is an &lt;tt&gt;EnumSet&lt;/tt&gt; instance, this static
                  factory method behaves identically to {@link #copyOf(EnumSet)}.
                  Otherwise, the specified collection must contain at least one element
                  (in order to determine the new enum set&apos;s element type).                
                <param>
                    c the collection from which to initialize this enum set                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>c</tt> is not an
                      <tt>EnumSet</tt> instance and contains no elements                    
                </throws>
                <throws>
                    NullPointerException if <tt>c</tt> is null                    
                </throws>
            </javadoc>
            <method name="copyOf" type="EnumSet<E>" line="161">
                <params>
                    <param name="c" type="Collection<E>"/>
                </params>
                <scope line="162"/>
                <scope line="164">
                    <declaration name="i" type="Iterator&lt;E&gt;" line="167"/>
                    <declaration name="first" type="E" line="168"/>
                    <declaration name="result" type="EnumSet&lt;E&gt;" line="169"/>
                </scope>
            </method>
            <javadoc line="176">
                Creates an enum set with the same element type as the specified enum
                  set, initially containing all the elements of this type that are
                  &lt;i&gt;not&lt;/i&gt; contained in the specified set.                
                <param>
                    s the enum set from whose complement to initialize this enum set                    
                </param>
                <throws>
                    NullPointerException if <tt>s</tt> is null                    
                </throws>
            </javadoc>
            <method name="complementOf" type="EnumSet<E>" line="184">
                <params>
                    <param name="s" type="EnumSet<E>"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="185"/>
            </method>
            <javadoc line="190">
                Creates an enum set initially containing the specified element.
                  Overloadings of this method exist to initialize an enum set with
                  one through five elements.  A sixth overloading is provided that
                  uses the varargs feature.  This overloading may be used to create
                  an enum set initially containing an arbitrary number of elements, but
                  is likely to run slower than the overloadings that do not use varargs.                
                <param>
                    e the element that this set is to contain initially                    
                </param>
                <throws>
                    NullPointerException if <tt>e</tt> is null                    
                </throws>
                <return>
                    an enum set initially containing the specified element                    
                </return>
            </javadoc>
            <method name="of" type="EnumSet<E>" line="203">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="204"/>
            </method>
            <javadoc line="209">
                Creates an enum set initially containing the specified elements.
                  Overloadings of this method exist to initialize an enum set with
                  one through five elements.  A sixth overloading is provided that
                  uses the varargs feature.  This overloading may be used to create
                  an enum set initially containing an arbitrary number of elements, but
                  is likely to run slower than the overloadings that do not use varargs.                
                <param>
                    e1 an element that this set is to contain initially                    
                </param>
                <param>
                    e2 another element that this set is to contain initially                    
                </param>
                <throws>
                    NullPointerException if any parameters are null                    
                </throws>
                <return>
                    an enum set initially containing the specified elements                    
                </return>
            </javadoc>
            <method name="of" type="EnumSet<E>" line="223">
                <params>
                    <param name="e1" type="E"/>
                    <param name="e2" type="E"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="224"/>
            </method>
            <javadoc line="230">
                Creates an enum set initially containing the specified elements.
                  Overloadings of this method exist to initialize an enum set with
                  one through five elements.  A sixth overloading is provided that
                  uses the varargs feature.  This overloading may be used to create
                  an enum set initially containing an arbitrary number of elements, but
                  is likely to run slower than the overloadings that do not use varargs.                
                <param>
                    e1 an element that this set is to contain initially                    
                </param>
                <param>
                    e2 another element that this set is to contain initially                    
                </param>
                <param>
                    e3 another element that this set is to contain initially                    
                </param>
                <throws>
                    NullPointerException if any parameters are null                    
                </throws>
                <return>
                    an enum set initially containing the specified elements                    
                </return>
            </javadoc>
            <method name="of" type="EnumSet<E>" line="245">
                <params>
                    <param name="e1" type="E"/>
                    <param name="e2" type="E"/>
                    <param name="e3" type="E"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="246"/>
            </method>
            <javadoc line="253">
                Creates an enum set initially containing the specified elements.
                  Overloadings of this method exist to initialize an enum set with
                  one through five elements.  A sixth overloading is provided that
                  uses the varargs feature.  This overloading may be used to create
                  an enum set initially containing an arbitrary number of elements, but
                  is likely to run slower than the overloadings that do not use varargs.                
                <param>
                    e1 an element that this set is to contain initially                    
                </param>
                <param>
                    e2 another element that this set is to contain initially                    
                </param>
                <param>
                    e3 another element that this set is to contain initially                    
                </param>
                <param>
                    e4 another element that this set is to contain initially                    
                </param>
                <throws>
                    NullPointerException if any parameters are null                    
                </throws>
                <return>
                    an enum set initially containing the specified elements                    
                </return>
            </javadoc>
            <method name="of" type="EnumSet<E>" line="269">
                <params>
                    <param name="e1" type="E"/>
                    <param name="e2" type="E"/>
                    <param name="e3" type="E"/>
                    <param name="e4" type="E"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="270"/>
            </method>
            <javadoc line="278">
                Creates an enum set initially containing the specified elements.
                  Overloadings of this method exist to initialize an enum set with
                  one through five elements.  A sixth overloading is provided that
                  uses the varargs feature.  This overloading may be used to create
                  an enum set initially containing an arbitrary number of elements, but
                  is likely to run slower than the overloadings that do not use varargs.                
                <param>
                    e1 an element that this set is to contain initially                    
                </param>
                <param>
                    e2 another element that this set is to contain initially                    
                </param>
                <param>
                    e3 another element that this set is to contain initially                    
                </param>
                <param>
                    e4 another element that this set is to contain initially                    
                </param>
                <param>
                    e5 another element that this set is to contain initially                    
                </param>
                <throws>
                    NullPointerException if any parameters are null                    
                </throws>
                <return>
                    an enum set initially containing the specified elements                    
                </return>
            </javadoc>
            <method name="of" type="EnumSet<E>" line="297">
                <params>
                    <param name="e1" type="E"/>
                    <param name="e2" type="E"/>
                    <param name="e3" type="E"/>
                    <param name="e4" type="E"/>
                    <param name="e5" type="E"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="298"/>
            </method>
            <javadoc line="307">
                Creates an enum set initially containing the specified elements.
                  This factory, whose parameter list uses the varargs feature, may
                  be used to create an enum set initially containing an arbitrary
                  number of elements, but it is likely to run slower than the overloadings
                  that do not use varargs.                
                <param>
                    first an element that the set is to contain initially                    
                </param>
                <param>
                    rest the remaining elements the set is to contain initially                    
                </param>
                <throws>
                    NullPointerException if any of the specified elements are null,
                      or if <tt>rest</tt> is null                    
                </throws>
                <return>
                    an enum set initially containing the specified elements                    
                </return>
            </javadoc>
            <method name="of" type="EnumSet<E>" line="321">
                <params>
                    <param name="first" type="E"/>
                    <param name="rest" type="E"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="322"/>
            </method>
            <javadoc line="329">
                Creates an enum set initially containing all of the elements in the
                  range defined by the two specified endpoints.  The returned set will
                  contain the endpoints themselves, which may be identical but must not
                  be out of order.                
                <param>
                    from the first element in the range                    
                </param>
                <param>
                    to the last element in the range                    
                </param>
                <throws>
                    NullPointerException if {@code from} or {@code to} are null                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code from.compareTo(to) > 0}                    
                </throws>
                <return>
                    an enum set initially containing all of the elements in the
                      range defined by the two specified endpoints                    
                </return>
            </javadoc>
            <method name="range" type="EnumSet<E>" line="342">
                <params>
                    <param name="from" type="E"/>
                    <param name="to" type="E"/>
                </params>
                <declaration name="result" type="EnumSet&lt;E&gt;" line="345"/>
            </method>
            <method name="addRange" type="void" line="350"/>
            <javadoc line="350">
                Adds the specified range to this enum set, which is empty prior
                  to the call.                
            </javadoc>
            <javadoc line="356">
                Returns a copy of this set.                
                <return>
                    a copy of this set                    
                </return>
            </javadoc>
            <method name="clone" type="EnumSet<E>" line="361">
                <scope line="362"/>
                <scope line="364"/>
            </method>
            <method name="complement" type="void" line="369"/>
            <javadoc line="369">
                Complements the contents of this enum set.                
            </javadoc>
            <javadoc line="374">
                Throws an exception if e is not of the correct type for this enum set.                
            </javadoc>
            <method name="typeCheck" type="void" line="377">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="eClass" type="Class" line="378"/>
            </method>
            <javadoc line="383">
                Returns all of the values comprising E.
                  The result is uncloned, cached, and shared by all callers.                
            </javadoc>
            <method name="getUniverse" type="E[]" line="387">
                <params>
                    <param name="elementType" type="Class<E>"/>
                </params>
            </method>
            <class name="SerializationProxy" line="392">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <implements interface="java.io.Serializable"/>
                <javadoc line="392">
                    This class is used to serialize all EnumSet instances, regardless of
                      implementation type.  It captures their &quot;logical contents&quot; and they
                      are reconstructed using public static factories.  This is necessary
                      to ensure that the existence of a particular implementation type is
                      an implementation detail.                    
                    <serial>
                        include                        
                    </serial>
                </javadoc>
                <declaration name="elementType" type="Class&lt;E&gt;" line="404"/>
                <javadoc line="404">
                    The element type of this enum set.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="elements" type="Enum[]" line="411"/>
                <javadoc line="411">
                    The elements contained in this enum set.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <method name="SerializationProxy" type="constructor" line="418">
                    <params>
                        <param name="set" type="EnumSet<E>"/>
                    </params>
                </method>
                <method name="readResolve" type="Object" line="423">
                    <declaration name="result" type="EnumSet&lt;E&gt;" line="424"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="430"/>
            </class>
            <method name="writeReplace" type="Object" line="433"/>
            <method name="readObject" type="void" line="440">
                <params>
                    <param name="stream" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>