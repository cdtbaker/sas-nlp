<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <class name="WeakHashMap" line="4">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <extends class="AbstractMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <implements interface="Map">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="4">
                Hash table based implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface, with
                  &lt;em&gt;weak keys&lt;/em&gt;.
                  An entry in a &lt;tt&gt;WeakHashMap&lt;/tt&gt; will automatically be removed when
                  its key is no longer in ordinary use.  More precisely, the presence of a
                  mapping for a given key will not prevent the key from being discarded by the
                  garbage collector, that is, made finalizable, finalized, and then reclaimed.
                  When a key has been discarded its entry is effectively removed from the map,
                  so this class behaves somewhat differently from other &lt;tt&gt;Map&lt;/tt&gt;
                  implementations.
                  &lt;p&gt; Both null values and the null key are supported. This class has
                  performance characteristics similar to those of the &lt;tt&gt;HashMap&lt;/tt&gt;
                  class, and has the same efficiency parameters of &lt;em&gt;initial capacity&lt;/em&gt;
                  and &lt;em&gt;load factor&lt;/em&gt;.
                  &lt;p&gt; Like most collection classes, this class is not synchronized.
                  A synchronized &lt;tt&gt;WeakHashMap&lt;/tt&gt; may be constructed using the{@link Collections#synchronizedMap Collections.synchronizedMap}method.
                  &lt;p&gt; This class is intended primarily for use with key objects whose
                  &lt;tt&gt;equals&lt;/tt&gt; methods test for object identity using the
                  &lt;tt&gt;==&lt;/tt&gt; operator.  Once such a key is discarded it can never be
                  recreated, so it is impossible to do a lookup of that key in a
                  &lt;tt&gt;WeakHashMap&lt;/tt&gt; at some later time and be surprised that its entry
                  has been removed.  This class will work perfectly well with key objects
                  whose &lt;tt&gt;equals&lt;/tt&gt; methods are not based upon object identity, such
                  as &lt;tt&gt;String&lt;/tt&gt; instances.  With such recreatable key objects,
                  however, the automatic removal of &lt;tt&gt;WeakHashMap&lt;/tt&gt; entries whose
                  keys have been discarded may prove to be confusing.
                  &lt;p&gt; The behavior of the &lt;tt&gt;WeakHashMap&lt;/tt&gt; class depends in part upon
                  the actions of the garbage collector, so several familiar (though not
                  required) &lt;tt&gt;Map&lt;/tt&gt; invariants do not hold for this class.  Because
                  the garbage collector may discard keys at any time, a
                  &lt;tt&gt;WeakHashMap&lt;/tt&gt; may behave as though an unknown thread is silently
                  removing entries.  In particular, even if you synchronize on a
                  &lt;tt&gt;WeakHashMap&lt;/tt&gt; instance and invoke none of its mutator methods, it
                  is possible for the &lt;tt&gt;size&lt;/tt&gt; method to return smaller values over
                  time, for the &lt;tt&gt;isEmpty&lt;/tt&gt; method to return &lt;tt&gt;false&lt;/tt&gt; and
                  then &lt;tt&gt;true&lt;/tt&gt;, for the &lt;tt&gt;containsKey&lt;/tt&gt; method to return
                  &lt;tt&gt;true&lt;/tt&gt; and later &lt;tt&gt;false&lt;/tt&gt; for a given key, for the
                  &lt;tt&gt;get&lt;/tt&gt; method to return a value for a given key but later return
                  &lt;tt&gt;null&lt;/tt&gt;, for the &lt;tt&gt;put&lt;/tt&gt; method to return
                  &lt;tt&gt;null&lt;/tt&gt; and the &lt;tt&gt;remove&lt;/tt&gt; method to return
                  &lt;tt&gt;false&lt;/tt&gt; for a key that previously appeared to be in the map, and
                  for successive examinations of the key set, the value collection, and
                  the entry set to yield successively smaller numbers of elements.
                  &lt;p&gt; Each key object in a &lt;tt&gt;WeakHashMap&lt;/tt&gt; is stored indirectly as
                  the referent of a weak reference.  Therefore a key will automatically be
                  removed only after the weak references to it, both inside and outside of the
                  map, have been cleared by the garbage collector.
                  &lt;p&gt; &lt;strong&gt;Implementation note:&lt;/strong&gt; The value objects in a
                  &lt;tt&gt;WeakHashMap&lt;/tt&gt; are held by ordinary strong references.  Thus care
                  should be taken to ensure that value objects do not strongly refer to their
                  own keys, either directly or indirectly, since that will prevent the keys
                  from being discarded.  Note that a value object may refer indirectly to its
                  key via the &lt;tt&gt;WeakHashMap&lt;/tt&gt; itself; that is, a value object may
                  strongly refer to some other key object whose associated value object, in
                  turn, strongly refers to the key of the first value object.  One way
                  to deal with this is to wrap values themselves within
                  &lt;tt&gt;WeakReferences&lt;/tt&gt; before
                  inserting, as in: &lt;tt&gt;m.put(key, new WeakReference(value))&lt;/tt&gt;,
                  and then unwrapping upon each &lt;tt&gt;get&lt;/tt&gt;.
                  &lt;p&gt;The iterators returned by the &lt;tt&gt;iterator&lt;/tt&gt; method of the collections
                  returned by all of this class&apos;s &quot;collection view methods&quot; are
                  &lt;i&gt;fail-fast&lt;/i&gt;: if the map is structurally modified at any time after the
                  iterator is created, in any way except through the iterator&apos;s own
                  &lt;tt&gt;remove&lt;/tt&gt; method, the iterator will throw a {@link ConcurrentModificationException}.  Thus, in the face of concurrent
                  modification, the iterator fails quickly and cleanly, rather than risking
                  arbitrary, non-deterministic behavior at an undetermined time in the future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness:  &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    &lt;K&gt;
                      the type of keys maintained by this map                    
                </param>
                <param>
                    &lt;V&gt;
                      the type of mapped values                    
                </param>
                <author>
                    Doug Lea                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
                <see>
                    java.util.HashMap                    
                </see>
                <see>
                    java.lang.ref.WeakReference                    
                </see>
            </javadoc>
            <declaration name="DEFAULT_INITIAL_CAPACITY" type="int" line="92"/>
            <javadoc line="92">
                The default initial capacity -- MUST be a power of two.                
            </javadoc>
            <declaration name="MAXIMUM_CAPACITY" type="int" line="96"/>
            <javadoc line="96">
                The maximum capacity, used if a higher value is implicitly specified
                  by either of the constructors with arguments.
                  MUST be a power of two &lt;= 1&lt;&lt;30.                
            </javadoc>
            <declaration name="DEFAULT_LOAD_FACTOR" type="float" line="102"/>
            <javadoc line="102">
                The load factor used when none specified in constructor.                
            </javadoc>
            <declaration name="table" type="Entry&amp;lt;K,V&amp;gt;[]" line="106"/>
            <javadoc line="106">
                The table, resized as necessary. Length MUST Always be a power of two.                
            </javadoc>
            <declaration name="size" type="int" line="110"/>
            <javadoc line="110">
                The number of key-value mappings contained in this weak hash map.                
            </javadoc>
            <declaration name="threshold" type="int" line="114"/>
            <javadoc line="114">
                The next size value at which to resize (capacity  load factor).                
            </javadoc>
            <declaration name="loadFactor" type="float" line="118"/>
            <javadoc line="118">
                The load factor for the hash table.                
            </javadoc>
            <declaration name="queue" type="ReferenceQueue&amp;lt;Object&amp;gt;" line="122"/>
            <javadoc line="122">
                Reference queue for cleared WeakEntries                
            </javadoc>
            <declaration name="modCount" type="int" line="126"/>
            <javadoc line="126">
                The number of times this WeakHashMap has been structurally modified.
                  Structural modifications are those that change the number of
                  mappings in the map or otherwise modify its internal structure
                  (e.g., rehash).  This field is used to make iterators on
                  Collection-views of the map fail-fast.                
                <see>
                    ConcurrentModificationException                    
                </see>
            </javadoc>
            <method name="newTable" type="Entry&lt;K,V&gt;[]" line="135">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="138">
                Constructs a new, empty &lt;tt&gt;WeakHashMap&lt;/tt&gt; with the given initial
                  capacity and the given load factor.                
                <param>
                    initialCapacity The initial capacity of the &lt;tt&gt;WeakHashMap&lt;/tt&gt;                    
                </param>
                <param>
                    loadFactor      The load factor of the &lt;tt&gt;WeakHashMap&lt;/tt&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is negative,
                      or if the load factor is nonpositive.                    
                </throws>
            </javadoc>
            <method name="WeakHashMap" type="constructor" line="146">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
                <declaration name="capacity" type="int" line="150"/>
            </method>
            <javadoc line="156">
                Constructs a new, empty &lt;tt&gt;WeakHashMap&lt;/tt&gt; with the given initial
                  capacity and the default load factor (0.75).                
                <param>
                    initialCapacity The initial capacity of the &lt;tt&gt;WeakHashMap&lt;/tt&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is negative                    
                </throws>
            </javadoc>
            <method name="WeakHashMap" type="constructor" line="162">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="165">
                Constructs a new, empty &lt;tt&gt;WeakHashMap&lt;/tt&gt; with the default initial
                  capacity (16) and load factor (0.75).                
            </javadoc>
            <method name="WeakHashMap" type="constructor" line="169"/>
            <javadoc line="174">
                Constructs a new &lt;tt&gt;WeakHashMap&lt;/tt&gt; with the same mappings as the
                  specified map.  The &lt;tt&gt;WeakHashMap&lt;/tt&gt; is created with the default
                  load factor (0.75) and an initial capacity sufficient to hold the
                  mappings in the specified map.                
                <param>
                    m the map whose mappings are to be placed in this map                    
                </param>
                <throws>
                    NullPointerException if the specified map is null                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="WeakHashMap" type="constructor" line="183">
                <params>
                    <param name="m" type="Map&lt;? extends K,? extends V&gt;"/>
                </params>
            </method>
            <declaration name="NULL_KEY" type="Object" line="187"/>
            <javadoc line="187">
                Value representing null keys inside tables.                
            </javadoc>
            <javadoc line="191">
                Use NULL_KEY for key if it is null.                
            </javadoc>
            <method name="maskNull" type="Object" line="194">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="197">
                Returns internal representation of null key back to caller as null.                
            </javadoc>
            <method name="unmaskNull" type="Object" line="200">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="203">
                Checks for equality of non-null reference x and possibly-null y.  By
                  default uses Object.equals.                
            </javadoc>
            <method name="eq" type="boolean" line="207">
                <params>
                    <param name="x" type="Object"/>
                    <param name="y" type="Object"/>
                </params>
            </method>
            <javadoc line="210">
                Returns index for hash code h.                
            </javadoc>
            <method name="indexFor" type="int" line="213">
                <params>
                    <param name="h" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="216">
                Expunges stale entries from the table.                
            </javadoc>
            <method name="expungeStaleEntries" type="void" line="219">
                <scope line="220">
                    <scope line="221">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="222"/>
                        <declaration name="i" type="int" line="223"/>
                        <declaration name="prev" type="Entry&amp;lt;K,V&amp;gt;" line="224"/>
                        <declaration name="p" type="Entry&amp;lt;K,V&amp;gt;" line="225"/>
                        <scope line="226">
                            <declaration name="next" type="Entry&amp;lt;K,V&amp;gt;" line="227"/>
                            <scope line="228"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="241">
                Returns the table after first expunging stale entries.                
            </javadoc>
            <method name="getTable" type="Entry&lt;K,V&gt;[]" line="244"/>
            <javadoc line="248">
                Returns the number of key-value mappings in this map.
                  This result is a snapshot, and may not reflect unprocessed
                  entries that will be removed before next attempted access
                  because they are no longer referenced.                
            </javadoc>
            <method name="size" type="int" line="254"/>
            <javadoc line="259">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings.
                  This result is a snapshot, and may not reflect unprocessed
                  entries that will be removed before next attempted access
                  because they are no longer referenced.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="265"/>
            <javadoc line="268">
                Returns the value to which the specified key is mapped,
                  or {@code null} if this map contains no mapping for the key.
                  &lt;p&gt;More formally, if this map contains a mapping from a key{@code k} to a value {@code v} such that {@code (key==null ? k==null :
                  key.equals(k))}, then this method returns {@code v}; otherwise
                  it returns {@code null}.  (There can be at most one such mapping.)
                  &lt;p&gt;A return value of {@code null} does not &lt;i&gt;necessarily&lt;/i&gt;
                  indicate that the map contains no mapping for the key; it&apos;s also
                  possible that the map explicitly maps the key to {@code null}.
                  The {@link #containsKey containsKey} operation may be used to
                  distinguish these two cases.                
                <see>
                    #put(Object,Object)                    
                </see>
            </javadoc>
            <method name="get" type="V" line="281">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="k" type="Object" line="282"/>
                <declaration name="h" type="int" line="283"/>
                <declaration name="tab" type="Entry&amp;lt;K,V&amp;gt;[]" line="284"/>
                <declaration name="index" type="int" line="285"/>
                <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="286"/>
                <scope line="287"/>
            </method>
            <javadoc line="293">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the
                  specified key.                
                <param>
                    key   The key whose presence in this map is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if there is a mapping for &lt;tt&gt;key&lt;/tt&gt;;
                      &lt;tt&gt;false&lt;/tt&gt; otherwise                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="300">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="303">
                Returns the entry associated with the specified key in this map.
                  Returns null if the map contains no mapping for this key.                
            </javadoc>
            <method name="getEntry" type="Entry&lt;K,V&gt;" line="307">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="k" type="Object" line="308"/>
                <declaration name="h" type="int" line="309"/>
                <declaration name="tab" type="Entry&amp;lt;K,V&amp;gt;[]" line="310"/>
                <declaration name="index" type="int" line="311"/>
                <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="312"/>
            </method>
            <javadoc line="316">
                Associates the specified value with the specified key in this map.
                  If the map previously contained a mapping for this key, the old
                  value is replaced.                
                <param>
                    key key with which the specified value is to be associated.                    
                </param>
                <param>
                    value value to be associated with the specified key.                    
                </param>
                <return>
                    the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or
                      &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.
                      (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map
                      previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)                    
                </return>
            </javadoc>
            <method name="put" type="V" line="327">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
                <declaration name="k" type="Object" line="328"/>
                <declaration name="h" type="int" line="329"/>
                <declaration name="tab" type="Entry&amp;lt;K,V&amp;gt;[]" line="330"/>
                <declaration name="i" type="int" line="331"/>
                <scope line="332">
                    <scope line="333">
                        <declaration name="oldValue" type="V" line="334"/>
                    </scope>
                </scope>
                <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="340"/>
            </method>
            <javadoc line="345">
                Rehashes the contents of this map into a new array with a
                  larger capacity.  This method is called automatically when the
                  number of keys in this map reaches its threshold.
                  If current capacity is MAXIMUM_CAPACITY, this method does not
                  resize the map, but sets threshold to Integer.MAX_VALUE.
                  This has the effect of preventing future calls.                
                <param>
                    newCapacity the new capacity, MUST be a power of two;
                      must be greater than current capacity unless current
                      capacity is MAXIMUM_CAPACITY (in which case value
                      is irrelevant).                    
                </param>
            </javadoc>
            <method name="resize" type="void" line="357">
                <params>
                    <param name="newCapacity" type="int"/>
                </params>
                <declaration name="oldTable" type="Entry&amp;lt;K,V&amp;gt;[]" line="358"/>
                <declaration name="oldCapacity" type="int" line="359"/>
                <scope line="360"/>
                <declaration name="newTable" type="Entry&amp;lt;K,V&amp;gt;[]" line="364"/>
                <scope line="367"/>
                <scope line="370"/>
            </method>
            <javadoc line="376">
                Transfers all entries from src to dest tables                
            </javadoc>
            <method name="transfer" type="void" line="379">
                <params>
                    <param name="src" type="Entry&lt;K,V&gt;[]"/>
                    <param name="dest" type="Entry&lt;K,V&gt;[]"/>
                </params>
                <scope line="380">
                    <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="381"/>
                    <scope line="383">
                        <declaration name="next" type="Entry&amp;lt;K,V&amp;gt;" line="384"/>
                        <declaration name="key" type="Object" line="385"/>
                        <scope line="386"/>
                        <scope line="391">
                            <declaration name="i" type="int" line="392"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="400">
                Copies all of the mappings from the specified map to this map.
                  These mappings will replace any mappings that this map had for any
                  of the keys currently in the specified map.                
                <param>
                    m mappings to be stored in this map.                    
                </param>
                <throws>
                    NullPointerException if the specified map is null.                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="407">
                <params>
                    <param name="m" type="Map&lt;? extends K,? extends V&gt;"/>
                </params>
                <declaration name="numKeysToBeAdded" type="int" line="408"/>
                <scope line="410">
                    <declaration name="targetCapacity" type="int" line="411"/>
                    <declaration name="newCapacity" type="int" line="413"/>
                </scope>
            </method>
            <javadoc line="419">
                Removes the mapping for a key from this weak hash map if it is present.
                  More formally, if this map contains a mapping from key &lt;tt&gt;k&lt;/tt&gt; to
                  value &lt;tt&gt;v&lt;/tt&gt; such that &lt;code&gt;(key==null ?  k==null :
                  key.equals(k))&lt;/code&gt;, that mapping is removed.  (The map can contain
                  at most one such mapping.)
                  &lt;p&gt;Returns the value to which this map previously associated the key,
                  or &lt;tt&gt;null&lt;/tt&gt; if the map contained no mapping for the key.  A
                  return value of &lt;tt&gt;null&lt;/tt&gt; does not &lt;i&gt;necessarily&lt;/i&gt; indicate
                  that the map contained no mapping for the key; it&apos;s also possible
                  that the map explicitly mapped the key to &lt;tt&gt;null&lt;/tt&gt;.
                  &lt;p&gt;The map will not contain a mapping for the specified key once the
                  call returns.                
                <param>
                    key key whose mapping is to be removed from the map                    
                </param>
                <return>
                    the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or
                      &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;                    
                </return>
            </javadoc>
            <method name="remove" type="V" line="436">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="k" type="Object" line="437"/>
                <declaration name="h" type="int" line="438"/>
                <declaration name="tab" type="Entry&amp;lt;K,V&amp;gt;[]" line="439"/>
                <declaration name="i" type="int" line="440"/>
                <declaration name="prev" type="Entry&amp;lt;K,V&amp;gt;" line="441"/>
                <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="442"/>
                <scope line="443">
                    <declaration name="next" type="Entry&amp;lt;K,V&amp;gt;" line="444"/>
                    <scope line="445"/>
                </scope>
            </method>
            <javadoc line="457">
                Special version of remove needed by Entry set                
            </javadoc>
            <method name="removeMapping" type="boolean" line="460">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="tab" type="Entry&amp;lt;K,V&amp;gt;[]" line="462"/>
                <declaration name="entry" type="Map.Entry&amp;lt;?,?&amp;gt;" line="463"/>
                <declaration name="k" type="Object" line="464"/>
                <declaration name="h" type="int" line="465"/>
                <declaration name="i" type="int" line="466"/>
                <declaration name="prev" type="Entry&amp;lt;K,V&amp;gt;" line="467"/>
                <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="468"/>
                <scope line="469">
                    <declaration name="next" type="Entry&amp;lt;K,V&amp;gt;" line="470"/>
                    <scope line="471"/>
                </scope>
            </method>
            <javadoc line="483">
                Removes all of the mappings from this map.
                  The map will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="487"/>
            <javadoc line="494">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the
                  specified value.                
                <param>
                    value value whose presence in this map is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the
                      specified value                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="501">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="tab" type="Entry&amp;lt;K,V&amp;gt;[]" line="503"/>
            </method>
            <javadoc line="507">
                Special-case code for containsValue with null argument                
            </javadoc>
            <method name="containsNullValue" type="boolean" line="510">
                <declaration name="tab" type="Entry&amp;lt;K,V&amp;gt;[]" line="511"/>
            </method>
            <class name="Entry" line="515">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="Object"/>
                    </type_params>
                </extends>
                <implements interface="Map.Entry">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </implements>
                <javadoc line="515">
                    The entries in this hash table extend WeakReference, using its main ref
                      field as the key.                    
                </javadoc>
                <declaration name="value" type="V" line="520"/>
                <declaration name="hash" type="int" line="521"/>
                <declaration name="next" type="Entry&amp;lt;K,V&amp;gt;" line="522"/>
                <javadoc line="523">
                    Creates new entry.                    
                </javadoc>
                <method name="Entry" type="constructor" line="526">
                    <params>
                        <param name="key" type="Object"/>
                        <param name="value" type="V"/>
                        <param name="queue" type="ReferenceQueue&lt;Object&gt;"/>
                        <param name="hash" type="int"/>
                        <param name="next" type="Entry&lt;K,V&gt;"/>
                    </params>
                </method>
                <method name="getKey" type="K" line="532"/>
                <method name="getValue" type="V" line="535"/>
                <method name="setValue" type="V" line="538">
                    <params>
                        <param name="newValue" type="V"/>
                    </params>
                    <declaration name="oldValue" type="V" line="539"/>
                </method>
                <method name="equals" type="boolean" line="543">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry&amp;lt;?,?&amp;gt;" line="545"/>
                    <declaration name="k1" type="K" line="546"/>
                    <declaration name="k2" type="Object" line="547"/>
                    <scope line="548">
                        <declaration name="v1" type="V" line="549"/>
                        <declaration name="v2" type="Object" line="550"/>
                    </scope>
                </method>
                <method name="hashCode" type="int" line="555">
                    <declaration name="k" type="K" line="556"/>
                    <declaration name="v" type="V" line="557"/>
                </method>
                <method name="toString" type="String" line="560"/>
            </class>
            <class name="HashIterator" line="564">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <declaration name="index" type="int" line="565"/>
                <declaration name="entry" type="Entry&amp;lt;K,V&amp;gt;" line="566"/>
                <declaration name="lastReturned" type="Entry&amp;lt;K,V&amp;gt;" line="567"/>
                <declaration name="expectedModCount" type="int" line="568"/>
                <declaration name="nextKey" type="Object" line="569"/>
                <javadoc line="569">
                    Strong reference needed to avoid disappearance of key
                      between hasNext and next                    
                </javadoc>
                <declaration name="currentKey" type="Object" line="574"/>
                <javadoc line="574">
                    Strong reference needed to avoid disappearance of key
                      between nextEntry() and any use of the entry                    
                </javadoc>
                <method name="HashIterator" type="constructor" line="579"/>
                <method name="hasNext" type="boolean" line="582">
                    <declaration name="t" type="Entry&amp;lt;K,V&amp;gt;[]" line="583"/>
                    <scope line="584">
                        <declaration name="e" type="Entry&amp;lt;K,V&amp;gt;" line="585"/>
                        <declaration name="i" type="int" line="586"/>
                        <scope line="590"/>
                    </scope>
                </method>
                <javadoc line="599">
                    The common parts of next() across different types of iterators                    
                </javadoc>
                <method name="nextEntry" type="Entry&lt;K,V&gt;" line="602"/>
                <method name="remove" type="void" line="611"/>
            </class>
            <class name="ValueIterator" line="620">
                <extends class="HashIterator">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <method name="next" type="V" line="621"/>
            </class>
            <class name="KeyIterator" line="625">
                <extends class="HashIterator">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <method name="next" type="K" line="626"/>
            </class>
            <class name="EntryIterator" line="630">
                <extends class="HashIterator">
                    <type_params>
                        <type_param name="Map.Entry&lt;K,V&gt;"/>
                    </type_params>
                </extends>
                <method name="next" type="Map.Entry&lt;K,V&gt;" line="631"/>
            </class>
            <declaration name="entrySet" type="Set&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="635"/>
            <javadoc line="636">
                Returns a {@link Set} view of the keys contained in this map.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation), the results of
                  the iteration are undefined.  The set supports element removal,
                  which removes the corresponding mapping from the map, via the
                  &lt;tt&gt;Iterator.remove&lt;/tt&gt;, &lt;tt&gt;Set.remove&lt;/tt&gt;,
                  &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt;, and &lt;tt&gt;clear&lt;/tt&gt;
                  operations.  It does not support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt;
                  operations.                
            </javadoc>
            <method name="keySet" type="Set&lt;K&gt;" line="649">
                <declaration name="ks" type="Set&amp;lt;K&amp;gt;" line="650"/>
            </method>
            <class name="KeySet" line="653">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <method name="iterator" type="Iterator&lt;K&gt;" line="654"/>
                <method name="size" type="int" line="657"/>
                <method name="contains" type="boolean" line="660">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="663">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="664"/>
                </method>
                <method name="clear" type="void" line="670"/>
            </class>
            <javadoc line="674">
                Returns a {@link Collection} view of the values contained in this map.
                  The collection is backed by the map, so changes to the map are
                  reflected in the collection, and vice-versa.  If the map is
                  modified while an iteration over the collection is in progress
                  (except through the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation),
                  the results of the iteration are undefined.  The collection
                  supports element removal, which removes the corresponding
                  mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,
                  &lt;tt&gt;Collection.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;,
                  &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not
                  support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.                
            </javadoc>
            <method name="values" type="Collection&lt;V&gt;" line="687">
                <declaration name="vs" type="Collection&amp;lt;V&amp;gt;" line="688"/>
            </method>
            <class name="Values" line="691">
                <extends class="AbstractCollection">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <method name="iterator" type="Iterator&lt;V&gt;" line="692"/>
                <method name="size" type="int" line="695"/>
                <method name="contains" type="boolean" line="698">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="clear" type="void" line="701"/>
            </class>
            <javadoc line="705">
                Returns a {@link Set} view of the mappings contained in this map.
                  The set is backed by the map, so changes to the map are
                  reflected in the set, and vice-versa.  If the map is modified
                  while an iteration over the set is in progress (except through
                  the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation, or through the
                  &lt;tt&gt;setValue&lt;/tt&gt; operation on a map entry returned by the
                  iterator) the results of the iteration are undefined.  The set
                  supports element removal, which removes the corresponding
                  mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,
                  &lt;tt&gt;Set.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt; and
                  &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not support the
                  &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.                
            </javadoc>
            <method name="entrySet" type="Set&lt;Map.Entry&lt;K,V&gt;&gt;" line="719">
                <declaration name="es" type="Set&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="720"/>
            </method>
            <class name="EntrySet" line="723">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="Map.Entry&lt;K,V&gt;"/>
                    </type_params>
                </extends>
                <method name="iterator" type="Iterator&lt;Map.Entry&lt;K,V&gt;&gt;" line="724"/>
                <method name="contains" type="boolean" line="727">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry&amp;lt;?,?&amp;gt;" line="729"/>
                    <declaration name="candidate" type="Entry&amp;lt;K,V&amp;gt;" line="730"/>
                </method>
                <method name="remove" type="boolean" line="733">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="size" type="int" line="736"/>
                <method name="clear" type="void" line="739"/>
                <method name="deepCopy" type="List&lt;Map.Entry&lt;K,V&gt;&gt;" line="742">
                    <declaration name="list" type="List&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;" line="743"/>
                </method>
                <method name="toArray" type="Object[]" line="747"/>
                <method name="toArray" type="T[]" line="750">
                    <params>
                        <param name="a" type="T[]"/>
                    </params>
                </method>
            </class>
        </class>
    </source>