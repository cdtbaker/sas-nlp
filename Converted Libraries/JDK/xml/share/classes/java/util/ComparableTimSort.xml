<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="ComparableTimSort" line="28">
            <comment line="104">
                Number of pending runs on stack                
            </comment>
            <comment line="140">
                The next two methods (which are package private and static) constitute
                 the entire API of this class.  Each of these methods obeys the contract
                 of the public method with the same signature in java.util.Arrays.                
            </comment>
            <javadoc line="28">
                This is a near duplicate of {@link TimSort}, modified for use with
                  arrays of objects that implement {@link Comparable}, instead of using
                  explicit comparators.
                  &lt;p&gt;If you are using an optimizing VM, you may find that ComparableTimSort
                  offers no performance benefit over TimSort in conjunction with a
                  comparator that simply returns {@code ((Comparable)first).compareTo(Second)}.
                  If this is the case, you are better off deleting ComparableTimSort to
                  eliminate the code duplication.  (See Arrays.java for details.)                
                <author>
                    Josh Bloch                    
                </author>
            </javadoc>
            <declaration name="MIN_MERGE" type="int" line="42"/>
            <javadoc line="42">
                This is the minimum sized sequence that will be merged.  Shorter
                  sequences will be lengthened by calling binarySort.  If the entire
                  array is less than this length, no merges will be performed.
                  This constant should be a power of two.  It was 64 in Tim Peter&apos;s C
                  implementation, but 32 was empirically determined to work better in
                  this implementation.  In the unlikely event that you set this constant
                  to be a number that&apos;s not a power of two, you&apos;ll need to change the{@link #minRunLength} computation.
                  If you decrease this constant, you must change the stackLen
                  computation in the TimSort constructor, or you risk an
                  ArrayOutOfBounds exception.  See listsort.txt for a discussion
                  of the minimum stack length required as a function of the length
                  of the array being sorted and the minimum merge sequence length.                
            </javadoc>
            <declaration name="a" type="Object[]" line="61"/>
            <javadoc line="61">
                The array being sorted.                
            </javadoc>
            <declaration name="MIN_GALLOP" type="int" line="66"/>
            <javadoc line="66">
                When we get into galloping mode, we stay there until both runs win less
                  often than MIN_GALLOP consecutive times.                
            </javadoc>
            <declaration name="minGallop" type="int" line="72"/>
            <javadoc line="72">
                This controls when we get into galloping mode.  It is initialized
                  to MIN_GALLOP.  The mergeLo and mergeHi methods nudge it higher for
                  random data, and lower for highly structured data.                
            </javadoc>
            <declaration name="INITIAL_TMP_STORAGE_LENGTH" type="int" line="79"/>
            <javadoc line="79">
                Maximum initial size of tmp array, which is used for merging.  The array
                  can grow to accommodate demand.
                  Unlike Tim&apos;s original C version, we do not allocate this much storage
                  when sorting smaller arrays.  This change was required for performance.                
            </javadoc>
            <declaration name="tmp" type="Object[]" line="88"/>
            <javadoc line="88">
                Temp storage for merges.                
            </javadoc>
            <declaration name="stackSize" type="int" line="93"/>
            <javadoc line="93">
                A stack of pending runs yet to be merged.  Run i starts at
                  address base[i] and extends for len[i] elements.  It&apos;s always
                  true (so long as the indices are in bounds) that:
                  runBase[i] + runLen[i] == runBase[i + 1]
                  so we could cut the storage for this, but it&apos;s a minor amount,
                  and keeping all the info explicit simplifies the code.                
            </javadoc>
            <declaration name="runBase" type="int[]" line="104"/>
            <declaration name="runLen" type="int[]" line="105"/>
            <javadoc line="107">
                Creates a TimSort instance to maintain the state of an ongoing sort.                
                <param>
                    a the array to be sorted                    
                </param>
            </javadoc>
            <method name="ComparableTimSort" type="constructor" line="112">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
                <comment line="116">
                    Allocate temp storage (which may be increased later if necessary)                    
                </comment>
                <comment line="123">
                    Allocate runs-to-be-merged stack (which cannot be expanded).  The
                     stack length requirements are described in listsort.txt.  The C
                     version always uses the same stack length (85), but this was
                     measured to be too expensive when sorting &quot;mid-sized&quot; arrays (e.g.,
                     100 elements) in Java.  Therefore, we use smaller (but sufficiently
                     large) stack lengths for smaller arrays.  The &quot;magic numbers&quot; in the
                     computation below must be changed if MIN_MERGE is decreased.  See
                     the MIN_MERGE declaration above for more information.                    
                </comment>
                <declaration name="len" type="int" line="116"/>
                <declaration name="newArray" type="Object[]" line="117"/>
                <declaration name="stackLen" type="int" line="132"/>
            </method>
            <method name="sort" type="void" line="145">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
            </method>
            <method name="sort" type="void" line="149">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                </params>
                <comment line="154">
                    Arrays of size 0 and 1 are always sorted                    
                </comment>
                <comment line="156">
                    If array is small, do a &quot;mini-TimSort&quot; with no merges                    
                </comment>
                <comment line="163">
                    March over the array once, left to right, finding natural runs,
                     extending short natural runs to minRun elements, and merging runs
                     to maintain stack invariant.                    
                </comment>
                <comment line="171">
                    Identify next run                    
                </comment>
                <comment line="174">
                    If run is short, extend to min(minRun, nRemaining)                    
                </comment>
                <comment line="181">
                    Push run onto pending-run stack, and maybe merge                    
                </comment>
                <comment line="185">
                    Advance to find next run                    
                </comment>
                <comment line="190">
                    Merge all remaining runs to complete sort                    
                </comment>
                <declaration name="nRemaining" type="int" line="151"/>
                <scope line="156">
                    <declaration name="initRunLen" type="int" line="157"/>
                </scope>
                <declaration name="ts" type="ComparableTimSort" line="167"/>
                <declaration name="minRun" type="int" line="168"/>
                <scope line="169">
                    <declaration name="runLen" type="int" line="171"/>
                    <scope line="174">
                        <declaration name="force" type="int" line="175"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="195">
                Sorts the specified portion of the specified array using a binary
                  insertion sort.  This is the best method for sorting small numbers
                  of elements.  It requires O(n log n) compares, but O(n^2) data
                  movement (worst case).
                  If the initial part of the specified range is already sorted,
                  this method can take advantage of it: the method assumes that the
                  elements from index {@code lo}, inclusive, to {@code start},
                  exclusive are already sorted.                
                <param>
                    a the array in which a range is to be sorted                    
                </param>
                <param>
                    lo the index of the first element in the range to be sorted                    
                </param>
                <param>
                    hi the index after the last element in the range to be sorted                    
                </param>
                <param>
                    start the index of the first element in the range that is
                      not already known to be sorted ({@code lo &lt;= start &lt;= hi})                    
                </param>
            </javadoc>
            <method name="binarySort" type="void" line="213">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                    <param name="start" type="int"/>
                </params>
                <comment line="222">
                    Set left (and right) to the index where a[start] (pivot) belongs                    
                </comment>
                <comment line="226">
                    Invariants:
                       pivot &gt;= all in [lo, left).
                       pivot &lt;  all in [right, start).                    
                </comment>
                <comment line="240">
                    The invariants still hold: pivot &gt;= all in [lo, left) and
                     pivot &lt; all in [left, start), so pivot belongs at left.  Note
                     that if there are elements equal to pivot, left points to the
                     first slot after them -- that&apos;s why this sort is stable.
                     Slide elements over to make room for pivot.                    
                </comment>
                <comment line="247">
                    The number of elements to move                    
                </comment>
                <comment line="248">
                    Switch is just an optimization for arraycopy in default case                    
                </comment>
                <scope line="217">
                    <declaration name="pivot" type="Comparable&lt;Object&gt;" line="218"/>
                    <declaration name="left" type="int" line="222"/>
                    <declaration name="right" type="int" line="223"/>
                    <scope line="230">
                        <declaration name="mid" type="int" line="231"/>
                    </scope>
                    <declaration name="n" type="int" line="246"/>
                </scope>
            </method>
            <javadoc line="258">
                Returns the length of the run beginning at the specified position in
                  the specified array and reverses the run if it is descending (ensuring
                  that the run will always be ascending when the method returns).
                  A run is the longest ascending sequence with:
                  a[lo] &lt;= a[lo + 1] &lt;= a[lo + 2] &lt;= ...
                  or the longest descending sequence with:
                  a[lo] &gt;  a[lo + 1] &gt;  a[lo + 2] &gt;  ...
                  For its intended use in a stable mergesort, the strictness of the
                  definition of &quot;descending&quot; is needed so that the call can safely
                  reverse a descending sequence without violating stability.                
                <param>
                    a the array in which a run is to be counted and possibly reversed                    
                </param>
                <param>
                    lo index of the first element in the run                    
                </param>
                <param>
                    hi index after the last element that may be contained in the run.
                      It is required that {@code lo &lt; hi}.                    
                </param>
                <return>
                    the length of the run beginning at the specified position in
                      the specified array                    
                </return>
            </javadoc>
            <method name="countRunAndMakeAscending" type="int" line="283">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                </params>
                <comment line="290">
                    Find end of run, and reverse range if descending                    
                </comment>
                <comment line="291">
                    Descending                    
                </comment>
                <comment line="295">
                    Ascending                    
                </comment>
                <declaration name="runHi" type="int" line="285"/>
                <scope line="290"/>
                <scope line="294"/>
            </method>
            <javadoc line="302">
                Reverse the specified range of the specified array.                
                <param>
                    a the array in which a range is to be reversed                    
                </param>
                <param>
                    lo the index of the first element in the range to be reversed                    
                </param>
                <param>
                    hi the index after the last element in the range to be reversed                    
                </param>
            </javadoc>
            <method name="reverseRange" type="void" line="309">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="lo" type="int"/>
                    <param name="hi" type="int"/>
                </params>
                <scope line="311">
                    <declaration name="t" type="Object" line="312"/>
                </scope>
            </method>
            <javadoc line="318">
                Returns the minimum acceptable run length for an array of the specified
                  length. Natural runs shorter than this will be extended with{@link #binarySort}.
                  Roughly speaking, the computation is:
                  If n &lt; MIN_MERGE, return n (it&apos;s too small to bother with fancy stuff).
                  Else if n is an exact power of 2, return MIN_MERGE/2.
                  Else return an int k, MIN_MERGE/2 &lt;= k &lt;= MIN_MERGE, such that n/k
                  is close to, but strictly less than, an exact power of 2.
                  For the rationale, see listsort.txt.                
                <param>
                    n the length of the array to be sorted                    
                </param>
                <return>
                    the length of the minimum run to be merged                    
                </return>
            </javadoc>
            <method name="minRunLength" type="int" line="335">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="338">
                    Becomes 1 if any 1 bits are shifted off                    
                </comment>
                <declaration name="r" type="int" line="337"/>
                <scope line="338"/>
            </method>
            <javadoc line="345">
                Pushes the specified run onto the pending-run stack.                
                <param>
                    runBase index of the first element in the run                    
                </param>
                <param>
                    runLen  the number of elements in the run                    
                </param>
            </javadoc>
            <method name="pushRun" type="void" line="351">
                <params>
                    <param name="runBase" type="int"/>
                    <param name="runLen" type="int"/>
                </params>
            </method>
            <javadoc line="357">
                Examines the stack of runs waiting to be merged and merges adjacent runs
                  until the stack invariants are reestablished:
                  1. runLen[i - 3] &gt; runLen[i - 2] + runLen[i - 1]
                  2. runLen[i - 2] &gt; runLen[i - 1]
                  This method is called each time a new run is pushed onto the stack,
                  so the invariants are guaranteed to hold for i &lt; stackSize upon
                  entry to the method.                
            </javadoc>
            <method name="mergeCollapse" type="void" line="368">
                <comment line="379">
                    Invariant is established                    
                </comment>
                <scope line="369">
                    <declaration name="n" type="int" line="370"/>
                    <scope line="371"/>
                    <scope line="375"/>
                    <scope line="377"/>
                </scope>
            </method>
            <javadoc line="383">
                Merges all runs on the stack until only one remains.  This method is
                  called once, to complete the sort.                
            </javadoc>
            <method name="mergeForceCollapse" type="void" line="387">
                <scope line="388">
                    <declaration name="n" type="int" line="389"/>
                </scope>
            </method>
            <javadoc line="396">
                Merges the two runs at stack indices i and i+1.  Run i must be
                  the penultimate or antepenultimate run on the stack.  In other words,
                  i must be equal to stackSize-2 or stackSize-3.                
                <param>
                    i stack index of the first of the two runs to merge                    
                </param>
            </javadoc>
            <method name="mergeAt" type="void" line="404">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="417">
                    Record the length of the combined runs; if i is the 3rd-last
                     run now, also slide over the last run (which isn&apos;t involved
                     in this merge).  The current run (i+1) goes away in any case.                    
                </comment>
                <comment line="429">
                    Find where the first element of run2 goes in run1. Prior elements
                     in run1 can be ignored (because they&apos;re already in place).                    
                </comment>
                <comment line="440">
                    Find where the last element of run1 goes in run2. Subsequent elements
                     in run2 can be ignored (because they&apos;re already in place).                    
                </comment>
                <comment line="450">
                    Merge remaining runs, using tmp array with min(len1, len2) elements                    
                </comment>
                <declaration name="base1" type="int" line="409"/>
                <declaration name="len1" type="int" line="410"/>
                <declaration name="base2" type="int" line="411"/>
                <declaration name="len2" type="int" line="412"/>
                <scope line="422"/>
                <declaration name="k" type="int" line="432"/>
            </method>
            <javadoc line="456">
                Locates the position at which to insert the specified key into the
                  specified sorted range; if the range contains an element equal to key,
                  returns the index of the leftmost equal element.                
                <param>
                    key the key whose insertion point to search for                    
                </param>
                <param>
                    a the array in which to search                    
                </param>
                <param>
                    base the index of the first element in the range                    
                </param>
                <param>
                    len the length of the range; must be &gt; 0                    
                </param>
                <param>
                    hint the index at which to begin the search, 0 &lt;= hint &lt; n.
                      The closer hint is to the result, the faster this method will run.                    
                </param>
                <return>
                    the int k,  0 &lt;= k &lt;= n such that a[b + k - 1] &lt; key &lt;= a[b + k],
                      pretending that a[b - 1] is minus infinity and a[b + n] is infinity.
                      In other words, key belongs at index b + k; or in other words,
                      the first k elements of a should precede key, and the last n - k
                      should follow it.                    
                </return>
            </javadoc>
            <method name="gallopLeft" type="int" line="474">
                <params>
                    <param name="key" type="Comparable<Object>"/>
                    <param name="a" type="Object[]"/>
                    <param name="base" type="int"/>
                    <param name="len" type="int"/>
                    <param name="hint" type="int"/>
                </params>
                <comment line="481">
                    Gallop right until a[base+hint+lastOfs] &lt; key &lt;= a[base+hint+ofs]                    
                </comment>
                <comment line="486">
                    int overflow                    
                </comment>
                <comment line="492">
                    Make offsets relative to base                    
                </comment>
                <comment line="495">
                    key &lt;= a[base + hint]                    
                </comment>
                <comment line="496">
                    Gallop left until a[base+hint-ofs] &lt; key &lt;= a[base+hint-lastOfs]                    
                </comment>
                <comment line="501">
                    int overflow                    
                </comment>
                <comment line="507">
                    Make offsets relative to base                    
                </comment>
                <comment line="514">
                    Now a[base+lastOfs] &lt; key &lt;= a[base+ofs], so key belongs somewhere
                     to the right of lastOfs but no farther right than ofs.  Do a binary
                     search, with invariant a[base + lastOfs - 1] &lt; key &lt;= a[base + ofs].                    
                </comment>
                <comment line="524">
                    a[base + m] &lt; key                    
                </comment>
                <comment line="526">
                    key &lt;= a[base + m]                    
                </comment>
                <comment line="528">
                    so a[base + ofs - 1] &lt; key &lt;= a[base + ofs]                    
                </comment>
                <declaration name="lastOfs" type="int" line="477"/>
                <declaration name="ofs" type="int" line="478"/>
                <scope line="479">
                    <declaration name="maxOfs" type="int" line="481"/>
                    <scope line="482"/>
                </scope>
                <scope line="494">
                    <declaration name="maxOfs" type="int" line="496"/>
                    <scope line="497"/>
                    <declaration name="tmp" type="int" line="507"/>
                </scope>
                <scope line="519">
                    <declaration name="m" type="int" line="520"/>
                </scope>
            </method>
            <javadoc line="531">
                Like gallopLeft, except that if the range contains an element equal to
                  key, gallopRight returns the index after the rightmost equal element.                
                <param>
                    key the key whose insertion point to search for                    
                </param>
                <param>
                    a the array in which to search                    
                </param>
                <param>
                    base the index of the first element in the range                    
                </param>
                <param>
                    len the length of the range; must be &gt; 0                    
                </param>
                <param>
                    hint the index at which to begin the search, 0 &lt;= hint &lt; n.
                      The closer hint is to the result, the faster this method will run.                    
                </param>
                <return>
                    the int k,  0 &lt;= k &lt;= n such that a[b + k - 1] &lt;= key &lt; a[b + k]                    
                </return>
            </javadoc>
            <method name="gallopRight" type="int" line="544">
                <params>
                    <param name="key" type="Comparable<Object>"/>
                    <param name="a" type="Object[]"/>
                    <param name="base" type="int"/>
                    <param name="len" type="int"/>
                    <param name="hint" type="int"/>
                </params>
                <comment line="551">
                    Gallop left until a[b+hint - ofs] &lt;= key &lt; a[b+hint - lastOfs]                    
                </comment>
                <comment line="556">
                    int overflow                    
                </comment>
                <comment line="562">
                    Make offsets relative to b                    
                </comment>
                <comment line="566">
                    a[b + hint] &lt;= key                    
                </comment>
                <comment line="567">
                    Gallop right until a[b+hint + lastOfs] &lt;= key &lt; a[b+hint + ofs]                    
                </comment>
                <comment line="572">
                    int overflow                    
                </comment>
                <comment line="578">
                    Make offsets relative to b                    
                </comment>
                <comment line="584">
                    Now a[b + lastOfs] &lt;= key &lt; a[b + ofs], so key belongs somewhere to
                     the right of lastOfs but no farther right than ofs.  Do a binary
                     search, with invariant a[b + lastOfs - 1] &lt;= key &lt; a[b + ofs].                    
                </comment>
                <comment line="594">
                    key &lt; a[b + m]                    
                </comment>
                <comment line="596">
                    a[b + m] &lt;= key                    
                </comment>
                <comment line="598">
                    so a[b + ofs - 1] &lt;= key &lt; a[b + ofs]                    
                </comment>
                <declaration name="ofs" type="int" line="547"/>
                <declaration name="lastOfs" type="int" line="548"/>
                <scope line="549">
                    <declaration name="maxOfs" type="int" line="551"/>
                    <scope line="552"/>
                    <declaration name="tmp" type="int" line="562"/>
                </scope>
                <scope line="565">
                    <declaration name="maxOfs" type="int" line="567"/>
                    <scope line="568"/>
                </scope>
                <scope line="589">
                    <declaration name="m" type="int" line="590"/>
                </scope>
            </method>
            <javadoc line="601">
                Merges two adjacent runs in place, in a stable fashion.  The first
                  element of the first run must be greater than the first element of the
                  second run (a[base1] &gt; a[base2]), and the last element of the first run
                  (a[base1 + len1-1]) must be greater than all elements of the second run.
                  For performance, this method should be called only when len1 &lt;= len2;
                  its twin, mergeHi should be called if len1 &gt;= len2.  (Either method
                  may be called if len1 == len2.)                
                <param>
                    base1 index of first element in first run to be merged                    
                </param>
                <param>
                    len1  length of first run to be merged (must be &gt; 0)                    
                </param>
                <param>
                    base2 index of first element in second run to be merged
                      (must be aBase + aLen)                    
                </param>
                <param>
                    len2  length of second run to be merged (must be &gt; 0)                    
                </param>
            </javadoc>
            <method name="mergeLo" type="void" line="618">
                <params>
                    <param name="base1" type="int"/>
                    <param name="len1" type="int"/>
                    <param name="base2" type="int"/>
                    <param name="len2" type="int"/>
                </params>
                <comment line="622">
                    Copy first run into temp array                    
                </comment>
                <comment line="623">
                    For performance                    
                </comment>
                <comment line="627">
                    Indexes into tmp array                    
                </comment>
                <comment line="628">
                    Indexes int a                    
                </comment>
                <comment line="629">
                    Indexes int a                    
                </comment>
                <comment line="631">
                    Move first element of second run and deal with degenerate cases                    
                </comment>
                <comment line="639">
                    Last elt of run 1 to end of merge                    
                </comment>
                <comment line="643">
                    Use local variable for performance                    
                </comment>
                <comment line="646">
                    Number of times in a row that first run won                    
                </comment>
                <comment line="647">
                    Number of times in a row that second run won                    
                </comment>
                <comment line="649">
                    Do the straightforward thing until (if ever) one run starts
                     winning consistently.                    
                </comment>
                <comment line="670">
                    One run is winning so consistently that galloping may be a
                     huge win. So try that, and continue galloping until (if ever)
                     neither run appears to be winning consistently anymore.                    
                </comment>
                <comment line="683">
                    len1 == 1 || len1 == 0                    
                </comment>
                <comment line="706">
                    Penalize for leaving gallop mode                    
                </comment>
                <comment line="707">
                    End of &quot;outer&quot; loop                    
                </comment>
                <comment line="708">
                    Write back to field                    
                </comment>
                <comment line="713">
                    Last elt of run 1 to end of merge                    
                </comment>
                <declaration name="a" type="Object[]" line="622"/>
                <declaration name="tmp" type="Object[]" line="623"/>
                <declaration name="cursor1" type="int" line="626"/>
                <declaration name="cursor2" type="int" line="627"/>
                <declaration name="dest" type="int" line="628"/>
                <scope line="632"/>
                <scope line="636"/>
                <declaration name="minGallop" type="int" line="642"/>
                <scope line="644">
                    <declaration name="count1" type="int" line="645"/>
                    <declaration name="count2" type="int" line="646"/>
                    <scope line="652">
                        <scope line="654"/>
                        <scope line="660"/>
                    </scope>
                    <scope line="674">
                        <scope line="677"/>
                        <scope line="690"/>
                    </scope>
                </scope>
                <scope line="709"/>
                <scope line="713"/>
                <scope line="716"/>
            </method>
            <javadoc line="723">
                Like mergeLo, except that this method should be called only if
                  len1 &gt;= len2; mergeLo should be called if len1 &lt;= len2.  (Either method
                  may be called if len1 == len2.)                
                <param>
                    base1 index of first element in first run to be merged                    
                </param>
                <param>
                    len1  length of first run to be merged (must be &gt; 0)                    
                </param>
                <param>
                    base2 index of first element in second run to be merged
                      (must be aBase + aLen)                    
                </param>
                <param>
                    len2  length of second run to be merged (must be &gt; 0)                    
                </param>
            </javadoc>
            <method name="mergeHi" type="void" line="735">
                <params>
                    <param name="base1" type="int"/>
                    <param name="len1" type="int"/>
                    <param name="base2" type="int"/>
                    <param name="len2" type="int"/>
                </params>
                <comment line="739">
                    Copy second run into temp array                    
                </comment>
                <comment line="740">
                    For performance                    
                </comment>
                <comment line="744">
                    Indexes into a                    
                </comment>
                <comment line="745">
                    Indexes into tmp array                    
                </comment>
                <comment line="746">
                    Indexes into a                    
                </comment>
                <comment line="748">
                    Move last element of first run and deal with degenerate cases                    
                </comment>
                <comment line="762">
                    Use local variable for performance                    
                </comment>
                <comment line="765">
                    Number of times in a row that first run won                    
                </comment>
                <comment line="766">
                    Number of times in a row that second run won                    
                </comment>
                <comment line="768">
                    Do the straightforward thing until (if ever) one run
                     appears to win consistently.                    
                </comment>
                <comment line="789">
                    One run is winning so consistently that galloping may be a
                     huge win. So try that, and continue galloping until (if ever)
                     neither run appears to be winning consistently anymore.                    
                </comment>
                <comment line="816">
                    len2 == 1 || len2 == 0                    
                </comment>
                <comment line="825">
                    Penalize for leaving gallop mode                    
                </comment>
                <comment line="826">
                    End of &quot;outer&quot; loop                    
                </comment>
                <comment line="827">
                    Write back to field                    
                </comment>
                <comment line="834">
                    Move first elt of run2 to front of merge                    
                </comment>
                <declaration name="a" type="Object[]" line="739"/>
                <declaration name="tmp" type="Object[]" line="740"/>
                <declaration name="cursor1" type="int" line="743"/>
                <declaration name="cursor2" type="int" line="744"/>
                <declaration name="dest" type="int" line="745"/>
                <scope line="749"/>
                <scope line="753"/>
                <declaration name="minGallop" type="int" line="761"/>
                <scope line="763">
                    <declaration name="count1" type="int" line="764"/>
                    <declaration name="count2" type="int" line="765"/>
                    <scope line="771">
                        <scope line="773"/>
                        <scope line="779"/>
                    </scope>
                    <scope line="793">
                        <scope line="796"/>
                        <scope line="809"/>
                    </scope>
                </scope>
                <scope line="828"/>
                <scope line="834"/>
                <scope line="837"/>
            </method>
            <javadoc line="844">
                Ensures that the external array tmp has at least the specified
                  number of elements, increasing its size if necessary.  The size
                  increases exponentially to ensure amortized linear time complexity.                
                <param>
                    minCapacity the minimum required capacity of the tmp array                    
                </param>
                <return>
                    tmp, whether or not it grew                    
                </return>
            </javadoc>
            <method name="ensureCapacity" type="Object[]" line="852">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="855">
                    Compute smallest power of 2 &gt; minCapacity                    
                </comment>
                <comment line="864">
                    Not bloody likely!                    
                </comment>
                <scope line="853">
                    <declaration name="newSize" type="int" line="855"/>
                    <declaration name="newArray" type="Object[]" line="868"/>
                </scope>
            </method>
            <javadoc line="875">
                Checks that fromIndex and toIndex are in range, and throws an
                  appropriate exception if they aren&apos;t.                
                <param>
                    arrayLen the length of the array                    
                </param>
                <param>
                    fromIndex the index of the first element of the range                    
                </param>
                <param>
                    toIndex the index after the last element of the range                    
                </param>
                <throws>
                    IllegalArgumentException if fromIndex &gt; toIndex                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if fromIndex &lt; 0
                      or toIndex &gt; arrayLen                    
                </throws>
            </javadoc>
            <method name="rangeCheck" type="void" line="886">
                <params>
                    <param name="arrayLen" type="int"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
        </class>
    </source>