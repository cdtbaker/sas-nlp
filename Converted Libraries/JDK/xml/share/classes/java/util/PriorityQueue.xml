<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <class name="PriorityQueue" line="2">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractQueue">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <implements interface="java.io.Serializable"/>
            <javadoc line="2">
                An unbounded priority {@linkplain Queue queue} based on a priority heap.
                  The elements of the priority queue are ordered according to their{@linkplain Comparable natural ordering}, or by a {@link Comparator}provided at queue construction time, depending on which constructor is
                  used.  A priority queue does not permit {@code null} elements.
                  A priority queue relying on natural ordering also does not permit
                  insertion of non-comparable objects (doing so may result in{@code ClassCastException}).
                  &lt;p&gt;The &lt;em&gt;head&lt;/em&gt; of this queue is the &lt;em&gt;least&lt;/em&gt; element
                  with respect to the specified ordering.  If multiple elements are
                  tied for least value, the head is one of those elements -- ties are
                  broken arbitrarily.  The queue retrieval operations {@code poll},{@code remove}, {@code peek}, and {@code element} access the
                  element at the head of the queue.
                  &lt;p&gt;A priority queue is unbounded, but has an internal
                  &lt;i&gt;capacity&lt;/i&gt; governing the size of an array used to store the
                  elements on the queue.  It is always at least as large as the queue
                  size.  As elements are added to a priority queue, its capacity
                  grows automatically.  The details of the growth policy are not
                  specified.
                  &lt;p&gt;This class and its iterator implement all of the
                  &lt;em&gt;optional&lt;/em&gt; methods of the {@link Collection} and {@link Iterator} interfaces.  The Iterator provided in method {@link #iterator()} is &lt;em&gt;not&lt;/em&gt; guaranteed to traverse the elements of
                  the priority queue in any particular order. If you need ordered
                  traversal, consider using {@code Arrays.sort(pq.toArray())}.
                  &lt;p&gt; &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  Multiple threads should not access a {@code PriorityQueue}instance concurrently if any of the threads modifies the queue.
                  Instead, use the thread-safe {@link java.util.concurrent.PriorityBlockingQueue} class.
                  &lt;p&gt;Implementation note: this implementation provides
                  O(log(n)) time for the enqueing and dequeing methods
                  ({@code offer}, {@code poll}, {@code remove()} and {@code add});
                  linear time for the {@code remove(Object)} and {@code contains(Object)}methods; and constant time for the retrieval methods
                  ({@code peek}, {@code element}, and {@code size}).
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <since>
                    1.5                    
                </since>
                <author>
                    Josh Bloch, Doug Lea                    
                </author>
                <param>
                    <E>
                      the type of elements held in this collection                    
                </param>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <declaration name="DEFAULT_INITIAL_CAPACITY" type="int" line="41"/>
            <declaration name="queue" type="Object[]" line="42"/>
            <javadoc line="42">
                Priority queue represented as a balanced binary heap: the two
                  children of queue[n] are queue[2n+1] and queue[2(n+1)].  The
                  priority queue is ordered by comparator, or by the elements&apos;
                  natural ordering, if comparator is null: For each node n in the
                  heap and each descendant d of n, n &lt;= d.  The element with the
                  lowest value is in queue[0], assuming the queue is nonempty.                
            </javadoc>
            <declaration name="size" type="int" line="51"/>
            <javadoc line="51">
                The number of elements in the priority queue.                
            </javadoc>
            <declaration name="comparator" type="Comparator&lt;? super E&gt;" line="55"/>
            <javadoc line="55">
                The comparator, or null if priority queue uses elements&apos;
                  natural ordering.                
            </javadoc>
            <declaration name="modCount" type="int" line="60"/>
            <javadoc line="60">
                The number of times this priority queue has been
                  &lt;i&gt;structurally modified&lt;/i&gt;.  See AbstractList for gory details.                
            </javadoc>
            <javadoc line="65">
                Creates a {@code PriorityQueue} with the default initial
                  capacity (11) that orders its elements according to their{@linkplain Comparable natural ordering}.                
            </javadoc>
            <method name="PriorityQueue" type="constructor" line="69"/>
            <javadoc line="72">
                Creates a {@code PriorityQueue} with the specified initial
                  capacity that orders its elements according to their{@linkplain Comparable natural ordering}.                
                <param>
                    initialCapacity the initial capacity for this priority queue                    
                </param>
                <throws>
                    IllegalArgumentException if {@code initialCapacity} is less
                      than 1                    
                </throws>
            </javadoc>
            <method name="PriorityQueue" type="constructor" line="79">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="82">
                Creates a {@code PriorityQueue} with the specified initial capacity
                  that orders its elements according to the specified comparator.                
                <param>
                    initialCapacity the initial capacity for this priority queue                    
                </param>
                <param>
                    comparator the comparator that will be used to order this
                      priority queue.  If {@code null}, the {@linkplain Comparablenatural ordering} of the elements will be used.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code initialCapacity} is
                      less than 1                    
                </throws>
            </javadoc>
            <method name="PriorityQueue" type="constructor" line="91">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="comparator" type="Comparator<? super E>"/>
                </params>
            </method>
            <javadoc line="96">
                Creates a {@code PriorityQueue} containing the elements in the
                  specified collection.  If the specified collection is an instance of
                  a {@link SortedSet} or is another {@code PriorityQueue}, this
                  priority queue will be ordered according to the same ordering.
                  Otherwise, this priority queue will be ordered according to the{@linkplain Comparable natural ordering} of its elements.                
                <param>
                    c the collection whose elements are to be placed
                      into this priority queue                    
                </param>
                <throws>
                    ClassCastException if elements of the specified collection
                      cannot be compared to one another according to the priority
                      queue's ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified collection or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="PriorityQueue" type="constructor" line="110">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <scope line="111">
                    <declaration name="ss" type="SortedSet&lt;? extends E&gt;" line="112"/>
                </scope>
                <scope line="116">
                    <declaration name="pq" type="PriorityQueue&lt;? extends E&gt;" line="117"/>
                </scope>
                <scope line="121"/>
            </method>
            <javadoc line="126">
                Creates a {@code PriorityQueue} containing the elements in the
                  specified priority queue.  This priority queue will be
                  ordered according to the same ordering as the given priority
                  queue.                
                <param>
                    c the priority queue whose elements are to be placed
                      into this priority queue                    
                </param>
                <throws>
                    ClassCastException if elements of {@code c} cannot be
                      compared to one another according to {@code c}'s
                      ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified priority queue or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="PriorityQueue" type="constructor" line="139">
                <params>
                    <param name="c" type="PriorityQueue<? extends E>"/>
                </params>
            </method>
            <javadoc line="143">
                Creates a {@code PriorityQueue} containing the elements in the
                  specified sorted set.   This priority queue will be ordered
                  according to the same ordering as the given sorted set.                
                <param>
                    c the sorted set whose elements are to be placed
                      into this priority queue                    
                </param>
                <throws>
                    ClassCastException if elements of the specified sorted
                      set cannot be compared to one another according to the
                      sorted set's ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified sorted set or any
                      of its elements are null                    
                </throws>
            </javadoc>
            <method name="PriorityQueue" type="constructor" line="155">
                <params>
                    <param name="c" type="SortedSet<? extends E>"/>
                </params>
            </method>
            <method name="initFromPriorityQueue" type="void" line="159">
                <params>
                    <param name="c" type="PriorityQueue<? extends E>"/>
                </params>
                <scope line="160"/>
                <scope line="164"/>
            </method>
            <method name="initElementsFromCollection" type="void" line="168">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="a" type="Object[]" line="169"/>
                <declaration name="len" type="int" line="171"/>
            </method>
            <javadoc line="176">
                Initializes queue array with elements from the given Collection.                
                <param>
                    c the collection                    
                </param>
            </javadoc>
            <method name="initFromCollection" type="void" line="180">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <declaration name="MAX_ARRAY_SIZE" type="int" line="184"/>
            <javadoc line="184">
                The maximum size of array to allocate.
                  Some VMs reserve some header words in an array.
                  Attempts to allocate larger arrays may result in
                  OutOfMemoryError: Requested array size exceeds VM limit                
            </javadoc>
            <javadoc line="191">
                Increases the capacity of the array.                
                <param>
                    minCapacity the desired minimum capacity                    
                </param>
            </javadoc>
            <method name="grow" type="void" line="195">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="196"/>
                <declaration name="newCapacity" type="int" line="197"/>
            </method>
            <method name="hugeCapacity" type="int" line="201">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="205">
                Inserts the specified element into this priority queue.                
                <return>
                    {@code true} (as specified by {@link Collection#add})                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be
                      compared with elements currently in this priority queue
                      according to the priority queue's ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="213">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="216">
                Inserts the specified element into this priority queue.                
                <return>
                    {@code true} (as specified by {@link Queue#offer})                    
                </return>
                <throws>
                    ClassCastException if the specified element cannot be
                      compared with elements currently in this priority queue
                      according to the priority queue's ordering                    
                </throws>
                <throws>
                    NullPointerException if the specified element is null                    
                </throws>
            </javadoc>
            <method name="offer" type="boolean" line="224">
                <params>
                    <param name="e" type="E"/>
                </params>
                <declaration name="i" type="int" line="227"/>
            </method>
            <method name="peek" type="E" line="234"/>
            <method name="indexOf" type="int" line="238">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Removes a single instance of the specified element from this queue,
                  if it is present.  More formally, removes an element {@code e} such
                  that {@code o.equals(e)}, if this queue contains one or more such
                  elements.  Returns {@code true} if and only if this queue contained
                  the specified element (or equivalently, if this queue changed as a
                  result of the call).                
                <param>
                    o element to be removed from this queue, if present                    
                </param>
                <return>
                    {@code true} if this queue changed as a result of the call                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="254">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="i" type="int" line="255"/>
                <scope line="257"/>
            </method>
            <javadoc line="262">
                Version of remove using reference equality, not equals.
                  Needed by iterator.remove.                
                <param>
                    o element to be removed from this queue, if present                    
                </param>
                <return>
                    {@code true} if removed                    
                </return>
            </javadoc>
            <method name="removeEq" type="boolean" line="268">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="269">
                    <scope line="270"/>
                </scope>
            </method>
            <javadoc line="277">
                Returns {@code true} if this queue contains the specified element.
                  More formally, returns {@code true} if and only if this queue contains
                  at least one element {@code e} such that {@code o.equals(e)}.                
                <param>
                    o object to be checked for containment in this queue                    
                </param>
                <return>
                    {@code true} if this queue contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="284">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="287">
                Returns an array containing all of the elements in this queue.
                  The elements are in no particular order.
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this queue.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this queue                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="297"/>
            <javadoc line="300">
                Returns an array containing all of the elements in this queue; the
                  runtime type of the returned array is that of the specified array.
                  The returned array elements are in no particular order.
                  If the queue fits in the specified array, it is returned therein.
                  Otherwise, a new array is allocated with the runtime type of the
                  specified array and the size of this queue.
                  &lt;p&gt;If the queue fits in the specified array with room to spare
                  (i.e., the array has more elements than the queue), the element in
                  the array immediately following the end of the collection is set to{@code null}.
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a queue known to contain only strings.
                  The following code can be used to dump the queue into a newly
                  allocated array of &lt;tt&gt;String&lt;/tt&gt;:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of the queue are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing all of the elements in this queue                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this queue                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="330">
                <params>
                    <param name="a" type="T[]"/>
                </params>
            </method>
            <javadoc line="336">
                Returns an iterator over the elements in this queue. The iterator
                  does not return the elements in any particular order.                
                <return>
                    an iterator over the elements in this queue                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<E>" line="341"/>
            <class name="Itr" line="344">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="cursor" type="int" line="345"/>
                <javadoc line="345">
                    Index (into queue array) of element to be returned by
                      subsequent call to next.                    
                </javadoc>
                <declaration name="lastRet" type="int" line="350"/>
                <javadoc line="350">
                    Index of element returned by most recent call to next,
                      unless that element came from the forgetMeNot list.
                      Set to -1 if element is deleted by a call to remove.                    
                </javadoc>
                <declaration name="forgetMeNot" type="ArrayDeque&lt;E&gt;" line="356"/>
                <javadoc line="356">
                    A queue of elements that were moved from the unvisited portion of
                      the heap into the visited portion as a result of &quot;unlucky&quot; element
                      removals during the iteration.  (Unlucky element removals are those
                      that require a siftup instead of a siftdown.)  We must visit all of
                      the elements in this list to complete the iteration.  We do this
                      after we&apos;ve completed the &quot;normal&quot; iteration.
                      We expect that most iterations, even those involving removals,
                      will not need to store elements in this field.                    
                </javadoc>
                <declaration name="lastRetElt" type="E" line="367"/>
                <javadoc line="367">
                    Element returned by the most recent call to next iff that
                      element was drawn from the forgetMeNot list.                    
                </javadoc>
                <declaration name="expectedModCount" type="int" line="372"/>
                <javadoc line="372">
                    The modCount value that the iterator believes that the backing
                      Queue should have.  If this expectation is violated, the iterator
                      has detected concurrent modification.                    
                </javadoc>
                <method name="hasNext" type="boolean" line="378"/>
                <method name="next" type="E" line="381">
                    <scope line="384"/>
                </method>
                <method name="remove" type="void" line="391">
                    <scope line="393">
                        <declaration name="moved" type="E" line="394"/>
                        <scope line="397"/>
                    </scope>
                    <scope line="402"/>
                    <scope line="406"/>
                </method>
            </class>
            <method name="size" type="int" line="412"/>
            <javadoc line="415">
                Removes all of the elements from this priority queue.
                  The queue will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="419"/>
            <method name="poll" type="E" line="424">
                <declaration name="s" type="int" line="426"/>
                <declaration name="result" type="E" line="428"/>
                <declaration name="x" type="E" line="429"/>
            </method>
            <javadoc line="434">
                Removes the ith element from queue.
                  Normally this method leaves the elements at up to i-1,
                  inclusive, untouched.  Under these circumstances, it returns
                  null.  Occasionally, in order to maintain the heap invariant,
                  it must swap a later element of the list with one earlier than
                  i.  Under these circumstances, this method returns the element
                  that was previously at the end of the list and is now at some
                  position before i. This fact is used by iterator.remove so as to
                  avoid missing traversing elements.                
            </javadoc>
            <method name="removeAt" type="E" line="445">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="461">
                Inserts item x at position k, maintaining heap invariant by
                  promoting x up the tree until it is greater than or equal to
                  its parent, or is the root.
                  To simplify and speed up coercions and comparisons. the
                  Comparable and Comparator versions are separated into different
                  methods that are otherwise identical. (Similarly for siftDown.)                
                <param>
                    k the position to fill                    
                </param>
                <param>
                    x the item to insert                    
                </param>
            </javadoc>
            <method name="siftUp" type="void" line="471">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="E"/>
                </params>
            </method>
            <method name="siftUpComparable" type="void" line="475">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="E"/>
                </params>
                <declaration name="key" type="Comparable&lt;? super E&gt;" line="476"/>
                <scope line="477">
                    <declaration name="parent" type="int" line="478"/>
                    <declaration name="e" type="Object" line="479"/>
                </scope>
            </method>
            <method name="siftUpUsingComparator" type="void" line="486">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="E"/>
                </params>
                <scope line="487">
                    <declaration name="parent" type="int" line="488"/>
                    <declaration name="e" type="Object" line="489"/>
                </scope>
            </method>
            <javadoc line="496">
                Inserts item x at position k, maintaining heap invariant by
                  demoting x down the tree repeatedly until it is less than or
                  equal to its children or is a leaf.                
                <param>
                    k the position to fill                    
                </param>
                <param>
                    x the item to insert                    
                </param>
            </javadoc>
            <method name="siftDown" type="void" line="503">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="E"/>
                </params>
            </method>
            <method name="siftDownComparable" type="void" line="507">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="E"/>
                </params>
                <declaration name="key" type="Comparable&lt;? super E&gt;" line="508"/>
                <declaration name="half" type="int" line="509"/>
                <scope line="510">
                    <declaration name="child" type="int" line="511"/>
                    <declaration name="c" type="Object" line="512"/>
                    <declaration name="right" type="int" line="513"/>
                </scope>
            </method>
            <method name="siftDownUsingComparator" type="void" line="521">
                <params>
                    <param name="k" type="int"/>
                    <param name="x" type="E"/>
                </params>
                <declaration name="half" type="int" line="522"/>
                <scope line="523">
                    <declaration name="child" type="int" line="524"/>
                    <declaration name="c" type="Object" line="525"/>
                    <declaration name="right" type="int" line="526"/>
                </scope>
            </method>
            <javadoc line="534">
                Establishes the heap invariant (described above) in the entire tree,
                  assuming nothing about the order of the elements prior to the call.                
            </javadoc>
            <method name="heapify" type="void" line="538"/>
            <javadoc line="541">
                Returns the comparator used to order the elements in this
                  queue, or {@code null} if this queue is sorted according to
                  the {@linkplain Comparable natural ordering} of its elements.                
                <return>
                    the comparator used to order this queue, or{@code null} if this queue is sorted according to the
                      natural ordering of its elements                    
                </return>
            </javadoc>
            <method name="comparator" type="Comparator<? super E>" line="548"/>
            <javadoc line="551">
                Saves the state of the instance to a stream (that
                  is, serializes it).                
                <serialData>
                    The length of the array backing the instance is
                      emitted (int), followed by all of its elements
                      (each an {@code Object}) in the proper order.                    
                </serialData>
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="writeObject" type="void" line="559">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="564">
                Reconstitutes the {@code PriorityQueue} instance from a stream
                  (that is, deserializes it).                
                <param>
                    s the stream                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="569">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>