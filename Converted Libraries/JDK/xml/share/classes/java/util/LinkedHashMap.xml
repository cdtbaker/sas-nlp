<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io"/>
        <class name="LinkedHashMap" line="3">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <extends class="HashMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <implements interface="Map">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="3">
                &lt;p&gt;Hash table and linked list implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface,
                  with predictable iteration order.  This implementation differs from
                  &lt;tt&gt;HashMap&lt;/tt&gt; in that it maintains a doubly-linked list running through
                  all of its entries.  This linked list defines the iteration ordering,
                  which is normally the order in which keys were inserted into the map
                  (&lt;i&gt;insertion-order&lt;/i&gt;).  Note that insertion order is not affected
                  if a key is &lt;i&gt;re-inserted&lt;/i&gt; into the map.  (A key &lt;tt&gt;k&lt;/tt&gt; is
                  reinserted into a map &lt;tt&gt;m&lt;/tt&gt; if &lt;tt&gt;m.put(k, v)&lt;/tt&gt; is invoked when
                  &lt;tt&gt;m.containsKey(k)&lt;/tt&gt; would return &lt;tt&gt;true&lt;/tt&gt; immediately prior to
                  the invocation.)
                  &lt;p&gt;This implementation spares its clients from the unspecified, generally
                  chaotic ordering provided by {@link HashMap} (and {@link Hashtable}),
                  without incurring the increased cost associated with {@link TreeMap}.  It
                  can be used to produce a copy of a map that has the same order as the
                  original, regardless of the original map&apos;s implementation:
                  &lt;pre&gt;
                  void foo(Map m) {
                  Map copy = new LinkedHashMap(m);
                  ...
                  }
                  &lt;/pre&gt;
                  This technique is particularly useful if a module takes a map on input,
                  copies it, and later returns results whose order is determined by that of
                  the copy.  (Clients generally appreciate having things returned in the same
                  order they were presented.)
                  &lt;p&gt;A special {@link #LinkedHashMap(int,float,boolean) constructor} is
                  provided to create a linked hash map whose order of iteration is the order
                  in which its entries were last accessed, from least-recently accessed to
                  most-recently (&lt;i&gt;access-order&lt;/i&gt;).  This kind of map is well-suited to
                  building LRU caches.  Invoking the &lt;tt&gt;put&lt;/tt&gt; or &lt;tt&gt;get&lt;/tt&gt; method
                  results in an access to the corresponding entry (assuming it exists after
                  the invocation completes).  The &lt;tt&gt;putAll&lt;/tt&gt; method generates one entry
                  access for each mapping in the specified map, in the order that key-value
                  mappings are provided by the specified map&apos;s entry set iterator.  &lt;i&gt;No
                  other methods generate entry accesses.&lt;/i&gt; In particular, operations on
                  collection-views do &lt;i&gt;not&lt;/i&gt; affect the order of iteration of the backing
                  map.
                  &lt;p&gt;The {@link #removeEldestEntry(Map.Entry)} method may be overridden to
                  impose a policy for removing stale mappings automatically when new mappings
                  are added to the map.
                  &lt;p&gt;This class provides all of the optional &lt;tt&gt;Map&lt;/tt&gt; operations, and
                  permits null elements.  Like &lt;tt&gt;HashMap&lt;/tt&gt;, it provides constant-time
                  performance for the basic operations (&lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;contains&lt;/tt&gt; and
                  &lt;tt&gt;remove&lt;/tt&gt;), assuming the hash function disperses elements
                  properly among the buckets.  Performance is likely to be just slightly
                  below that of &lt;tt&gt;HashMap&lt;/tt&gt;, due to the added expense of maintaining the
                  linked list, with one exception: Iteration over the collection-views
                  of a &lt;tt&gt;LinkedHashMap&lt;/tt&gt; requires time proportional to the &lt;i&gt;size&lt;/i&gt;
                  of the map, regardless of its capacity.  Iteration over a &lt;tt&gt;HashMap&lt;/tt&gt;
                  is likely to be more expensive, requiring time proportional to its
                  &lt;i&gt;capacity&lt;/i&gt;.
                  &lt;p&gt;A linked hash map has two parameters that affect its performance:
                  &lt;i&gt;initial capacity&lt;/i&gt; and &lt;i&gt;load factor&lt;/i&gt;.  They are defined precisely
                  as for &lt;tt&gt;HashMap&lt;/tt&gt;.  Note, however, that the penalty for choosing an
                  excessively high value for initial capacity is less severe for this class
                  than for &lt;tt&gt;HashMap&lt;/tt&gt;, as iteration times for this class are unaffected
                  by capacity.
                  &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  If multiple threads access a linked hash map concurrently, and at least
                  one of the threads modifies the map structurally, it &lt;em&gt;must&lt;/em&gt; be
                  synchronized externally.  This is typically accomplished by
                  synchronizing on some object that naturally encapsulates the map.
                  If no such object exists, the map should be &quot;wrapped&quot; using the{@link Collections#synchronizedMap Collections.synchronizedMap}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access to the map:&lt;pre&gt;
                  Map m = Collections.synchronizedMap(new LinkedHashMap(...));&lt;/pre&gt;
                  A structural modification is any operation that adds or deletes one or more
                  mappings or, in the case of access-ordered linked hash maps, affects
                  iteration order.  In insertion-ordered linked hash maps, merely changing
                  the value associated with a key that is already contained in the map is not
                  a structural modification.  &lt;strong&gt;In access-ordered linked hash maps,
                  merely querying the map with &lt;tt&gt;get&lt;/tt&gt; is a structural
                  modification.&lt;/strong&gt;)
                  &lt;p&gt;The iterators returned by the &lt;tt&gt;iterator&lt;/tt&gt; method of the collections
                  returned by all of this class&apos;s collection view methods are
                  &lt;em&gt;fail-fast&lt;/em&gt;: if the map is structurally modified at any time after
                  the iterator is created, in any way except through the iterator&apos;s own
                  &lt;tt&gt;remove&lt;/tt&gt; method, the iterator will throw a {@link ConcurrentModificationException}.  Thus, in the face of concurrent
                  modification, the iterator fails quickly and cleanly, rather than risking
                  arbitrary, non-deterministic behavior at an undetermined time in the future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness:   &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;
                  &lt;p&gt;This class is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <K>
                      the type of keys maintained by this map                    
                </param>
                <param>
                    <V>
                      the type of mapped values                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Object#hashCode()                    
                </see>
                <see>
                    Collection                    
                </see>
                <see>
                    Map                    
                </see>
                <see>
                    HashMap                    
                </see>
                <see>
                    TreeMap                    
                </see>
                <see>
                    Hashtable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="107"/>
            <declaration name="header" type="Entry&lt;K,V&gt;" line="108"/>
            <javadoc line="108">
                The head of the doubly linked list.                
            </javadoc>
            <declaration name="accessOrder" type="boolean" line="112"/>
            <javadoc line="112">
                The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;
                  for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="118">
                Constructs an empty insertion-ordered &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance
                  with the specified initial capacity and load factor.                
                <param>
                    initialCapacity the initial capacity                    
                </param>
                <param>
                    loadFactor      the load factor                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is negative
                      or the load factor is nonpositive                    
                </throws>
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="126">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <javadoc line="130">
                Constructs an empty insertion-ordered &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance
                  with the specified initial capacity and a default load factor (0.75).                
                <param>
                    initialCapacity the initial capacity                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is negative                    
                </throws>
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="136">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                Constructs an empty insertion-ordered &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance
                  with the default initial capacity (16) and load factor (0.75).                
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="144"/>
            <javadoc line="148">
                Constructs an insertion-ordered &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance with
                  the same mappings as the specified map.  The &lt;tt&gt;LinkedHashMap&lt;/tt&gt;
                  instance is created with a default load factor (0.75) and an initial
                  capacity sufficient to hold the mappings in the specified map.                
                <param>
                    m the map whose mappings are to be placed in this map                    
                </param>
                <throws>
                    NullPointerException if the specified map is null                    
                </throws>
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="156">
                <params>
                    <param name="m" type="Map<? extends K,? extends V>"/>
                </params>
            </method>
            <javadoc line="160">
                Constructs an empty &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance with the
                  specified initial capacity, load factor and ordering mode.                
                <param>
                    initialCapacity the initial capacity                    
                </param>
                <param>
                    loadFactor      the load factor                    
                </param>
                <param>
                    accessOrder     the ordering mode - <tt>true</tt> for
                      access-order, <tt>false</tt> for insertion-order                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is negative
                      or the load factor is nonpositive                    
                </throws>
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="170">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                    <param name="accessOrder" type="boolean"/>
                </params>
            </method>
            <javadoc line="174">
                Called by superclass constructors and pseudoconstructors (clone,
                  readObject) before any entries are inserted into the map.  Initializes
                  the chain.                
            </javadoc>
            <method name="init" type="void" line="179"/>
            <javadoc line="183">
                Transfers all entries to new table array.  This method is called
                  by superclass resize.  It is overridden for performance, as it is
                  faster to iterate using our linked list.                
            </javadoc>
            <method name="transfer" type="void" line="188">
                <params>
                    <param name="newTable" type="HashMap.Entry[]"/>
                </params>
                <declaration name="newCapacity" type="int" line="189"/>
                <scope line="190">
                    <declaration name="index" type="int" line="191"/>
                </scope>
            </method>
            <javadoc line="196">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the
                  specified value.                
                <param>
                    value value whose presence in this map is to be tested                    
                </param>
                <return>
                    <tt>true</tt> if this map maps one or more keys to the
                      specified value                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="203">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="204"/>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Returns the value to which the specified key is mapped,
                  or {@code null} if this map contains no mapping for the key.
                  &lt;p&gt;More formally, if this map contains a mapping from a key{@code k} to a value {@code v} such that {@code (key==null ? k==null :
                  key.equals(k))}, then this method returns {@code v}; otherwise
                  it returns {@code null}.  (There can be at most one such mapping.)
                  &lt;p&gt;A return value of {@code null} does not &lt;i&gt;necessarily&lt;/i&gt;
                  indicate that the map contains no mapping for the key; it&apos;s also
                  possible that the map explicitly maps the key to {@code null}.
                  The {@link #containsKey containsKey} operation may be used to
                  distinguish these two cases.                
            </javadoc>
            <method name="get" type="V" line="224">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="e" type="Entry&lt;K,V&gt;" line="225"/>
            </method>
            <javadoc line="230">
                Removes all of the mappings from this map.
                  The map will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="234"/>
            <class name="Entry" line="238">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="HashMap.Entry">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <javadoc line="238">
                    LinkedHashMap entry.                    
                </javadoc>
                <declaration name="before" type="Entry&lt;K,V&gt;" line="242"/>
                <method name="Entry" type="constructor" line="243">
                    <params>
                        <param name="hash" type="int"/>
                        <param name="key" type="K"/>
                        <param name="value" type="V"/>
                        <param name="next" type="HashMap.Entry<K,V>"/>
                    </params>
                </method>
                <javadoc line="246">
                    Removes this entry from the linked list.                    
                </javadoc>
                <method name="remove" type="void" line="249"/>
                <javadoc line="253">
                    Inserts this entry before the specified existing entry in the list.                    
                </javadoc>
                <method name="addBefore" type="void" line="256">
                    <params>
                        <param name="existingEntry" type="Entry<K,V>"/>
                    </params>
                </method>
                <javadoc line="262">
                    This method is invoked by the superclass whenever the value
                      of a pre-existing entry is read by Map.get or modified by Map.set.
                      If the enclosing Map is access-ordered, it moves the entry
                      to the end of the list; otherwise, it does nothing.                    
                </javadoc>
                <method name="recordAccess" type="void" line="268">
                    <params>
                        <param name="m" type="HashMap<K,V>"/>
                    </params>
                    <declaration name="lm" type="LinkedHashMap&lt;K,V&gt;" line="269"/>
                    <scope line="270"/>
                </method>
                <method name="recordRemoval" type="void" line="276">
                    <params>
                        <param name="m" type="HashMap<K,V>"/>
                    </params>
                </method>
            </class>
            <class name="LinkedHashIterator" line="280">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <declaration name="nextEntry" type="Entry&lt;K,V&gt;" line="281"/>
                <declaration name="lastReturned" type="Entry&lt;K,V&gt;" line="282"/>
                <declaration name="expectedModCount" type="int" line="283"/>
                <javadoc line="283">
                    The modCount value that the iterator believes that the backing
                      List should have.  If this expectation is violated, the iterator
                      has detected concurrent modification.                    
                </javadoc>
                <method name="hasNext" type="boolean" line="289"/>
                <method name="remove" type="void" line="292"/>
                <method name="nextEntry" type="Entry<K,V>" line="299">
                    <declaration name="e" type="Entry&lt;K,V&gt;" line="302"/>
                </method>
            </class>
            <class name="KeyIterator" line="307">
                <extends class="LinkedHashIterator">
                    <type_params>
                        <type_param name="K"/>
                    </type_params>
                </extends>
                <method name="next" type="K" line="308"/>
            </class>
            <class name="ValueIterator" line="312">
                <extends class="LinkedHashIterator">
                    <type_params>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <method name="next" type="V" line="313"/>
            </class>
            <class name="EntryIterator" line="317">
                <extends class="LinkedHashIterator">
                    <type_params>
                        <type_param name="Map.Entry<K,V>"/>
                    </type_params>
                </extends>
                <method name="next" type="Map.Entry<K,V>" line="318"/>
            </class>
            <method name="newKeyIterator" type="Iterator<K>" line="322"/>
            <method name="newValueIterator" type="Iterator<V>" line="325"/>
            <method name="newEntryIterator" type="Iterator<Map.Entry<K,V>>" line="328"/>
            <javadoc line="331">
                This override alters behavior of superclass put method. It causes newly
                  allocated entry to get inserted at the end of the linked list and
                  removes the eldest entry if appropriate.                
            </javadoc>
            <method name="addEntry" type="void" line="336">
                <params>
                    <param name="hash" type="int"/>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                    <param name="bucketIndex" type="int"/>
                </params>
                <declaration name="eldest" type="Entry&lt;K,V&gt;" line="338"/>
                <scope line="339"/>
                <scope line="342"/>
            </method>
            <javadoc line="346">
                This override differs from addEntry in that it doesn&apos;t resize the
                  table or remove the eldest entry.                
            </javadoc>
            <method name="createEntry" type="void" line="350">
                <params>
                    <param name="hash" type="int"/>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                    <param name="bucketIndex" type="int"/>
                </params>
                <declaration name="old" type="HashMap.Entry&lt;K,V&gt;" line="351"/>
                <declaration name="e" type="Entry&lt;K,V&gt;" line="352"/>
            </method>
            <javadoc line="357">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map should remove its eldest entry.
                  This method is invoked by &lt;tt&gt;put&lt;/tt&gt; and &lt;tt&gt;putAll&lt;/tt&gt; after
                  inserting a new entry into the map.  It provides the implementor
                  with the opportunity to remove the eldest entry each time a new one
                  is added.  This is useful if the map represents a cache: it allows
                  the map to reduce memory consumption by deleting stale entries.
                  &lt;p&gt;Sample use: this override will allow the map to grow up to 100
                  entries and then delete the eldest entry each time a new entry is
                  added, maintaining a steady state of 100 entries.
                  &lt;pre&gt;
                  private static final int MAX_ENTRIES = 100;
                  protected boolean removeEldestEntry(Map.Entry eldest) {
                  return size() &gt; MAX_ENTRIES;
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;This method typically does not modify the map in any way,
                  instead allowing the map to modify itself as directed by its
                  return value.  It &lt;i&gt;is&lt;/i&gt; permitted for this method to modify
                  the map directly, but if it does so, it &lt;i&gt;must&lt;/i&gt; return
                  &lt;tt&gt;false&lt;/tt&gt; (indicating that the map should not attempt any
                  further modification).  The effects of returning &lt;tt&gt;true&lt;/tt&gt;
                  after modifying the map from within this method are unspecified.
                  &lt;p&gt;This implementation merely returns &lt;tt&gt;false&lt;/tt&gt; (so that this
                  map acts like a normal map - the eldest element is never removed).                
                <param>
                    eldest The least recently inserted entry in the map, or if
                      this is an access-ordered map, the least recently accessed
                      entry.  This is the entry that will be removed it this
                      method returns <tt>true</tt>.  If the map was empty prior
                      to the <tt>put</tt> or <tt>putAll</tt> invocation resulting
                      in this invocation, this will be the entry that was just
                      inserted; in other words, if the map contains a single
                      entry, the eldest entry is also the newest.                    
                </param>
                <return>
                    <tt>true</tt> if the eldest entry should be removed
                      from the map; <tt>false</tt> if it should be retained.                    
                </return>
            </javadoc>
            <method name="removeEldestEntry" type="boolean" line="393">
                <params>
                    <param name="eldest" type="Map.Entry<K,V>"/>
                </params>
            </method>
        </class>
    </source>