<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.util.calendar.CalendarSystem"/>
        <import package="sun.util.calendar.CalendarUtils"/>
        <import package="sun.util.calendar.BaseCalendar"/>
        <import package="sun.util.calendar.Gregorian"/>
        <class name="SimpleTimeZone" line="9">
            <extends class="TimeZone"/>
            <javadoc line="9">
                &lt;code&gt;SimpleTimeZone&lt;/code&gt; is a concrete subclass of &lt;code&gt;TimeZone&lt;/code&gt;
                  that represents a time zone for use with a Gregorian calendar.
                  The class holds an offset from GMT, called &lt;em&gt;raw offset&lt;/em&gt;, and start
                  and end rules for a daylight saving time schedule.  Since it only holds
                  single values for each, it cannot handle historical changes in the offset
                  from GMT and the daylight saving schedule, except that the {@link #setStartYear setStartYear} method can specify the year when the daylight
                  saving time schedule starts in effect.
                  &lt;p&gt;
                  To construct a &lt;code&gt;SimpleTimeZone&lt;/code&gt; with a daylight saving time
                  schedule, the schedule can be described with a set of rules,
                  &lt;em&gt;start-rule&lt;/em&gt; and &lt;em&gt;end-rule&lt;/em&gt;. A day when daylight saving time
                  starts or ends is specified by a combination of &lt;em&gt;month&lt;/em&gt;,
                  &lt;em&gt;day-of-month&lt;/em&gt;, and &lt;em&gt;day-of-week&lt;/em&gt; values. The &lt;em&gt;month&lt;/em&gt;
                  value is represented by a Calendar {@link Calendar#MONTH MONTH} field
                  value, such as {@link Calendar#MARCH}. The &lt;em&gt;day-of-week&lt;/em&gt; value is
                  represented by a Calendar {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value,
                  such as {@link Calendar#SUNDAY SUNDAY}. The meanings of value combinations
                  are as follows.
                  &lt;ul&gt;
                  &lt;li&gt;&lt;b&gt;Exact day of month&lt;/b&gt;&lt;br&gt;
                  To specify an exact day of month, set the &lt;em&gt;month&lt;/em&gt; and
                  &lt;em&gt;day-of-month&lt;/em&gt; to an exact value, and &lt;em&gt;day-of-week&lt;/em&gt; to zero. For
                  example, to specify March 1, set the &lt;em&gt;month&lt;/em&gt; to {@link Calendar#MARCHMARCH}, &lt;em&gt;day-of-month&lt;/em&gt; to 1, and &lt;em&gt;day-of-week&lt;/em&gt; to 0.&lt;/li&gt;
                  &lt;li&gt;&lt;b&gt;Day of week on or after day of month&lt;/b&gt;&lt;br&gt;
                  To specify a day of week on or after an exact day of month, set the
                  &lt;em&gt;month&lt;/em&gt; to an exact month value, &lt;em&gt;day-of-month&lt;/em&gt; to the day on
                  or after which the rule is applied, and &lt;em&gt;day-of-week&lt;/em&gt; to a negative {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} field value. For example, to specify the
                  second Sunday of April, set &lt;em&gt;month&lt;/em&gt; to {@link Calendar#APRIL APRIL},
                  &lt;em&gt;day-of-month&lt;/em&gt; to 8, and &lt;em&gt;day-of-week&lt;/em&gt; to &lt;code&gt;-&lt;/code&gt;{@link Calendar#SUNDAY SUNDAY}.&lt;/li&gt;
                  &lt;li&gt;&lt;b&gt;Day of week on or before day of month&lt;/b&gt;&lt;br&gt;
                  To specify a day of the week on or before an exact day of the month, set
                  &lt;em&gt;day-of-month&lt;/em&gt; and &lt;em&gt;day-of-week&lt;/em&gt; to a negative value. For
                  example, to specify the last Wednesday on or before the 21st of March, set
                  &lt;em&gt;month&lt;/em&gt; to {@link Calendar#MARCH MARCH}, &lt;em&gt;day-of-month&lt;/em&gt; is -21
                  and &lt;em&gt;day-of-week&lt;/em&gt; is &lt;code&gt;-&lt;/code&gt;{@link Calendar#WEDNESDAY WEDNESDAY}. &lt;/li&gt;
                  &lt;li&gt;&lt;b&gt;Last day-of-week of month&lt;/b&gt;&lt;br&gt;
                  To specify, the last day-of-week of the month, set &lt;em&gt;day-of-week&lt;/em&gt; to a{@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value and &lt;em&gt;day-of-month&lt;/em&gt; to
                  -1. For example, to specify the last Sunday of October, set &lt;em&gt;month&lt;/em&gt;
                  to {@link Calendar#OCTOBER OCTOBER}, &lt;em&gt;day-of-week&lt;/em&gt; to {@link Calendar#SUNDAY SUNDAY} and &lt;em&gt;day-of-month&lt;/em&gt; to -1.  &lt;/li&gt;
                  &lt;/ul&gt;
                  The time of the day at which daylight saving time starts or ends is
                  specified by a millisecond value within the day. There are three kinds of
                  &lt;em&gt;mode&lt;/em&gt;s to specify the time: {@link #WALL_TIME}, {@link #STANDARD_TIME} and {@link #UTC_TIME}. For example, if daylight
                  saving time ends
                  at 2:00 am in the wall clock time, it can be specified by 7200000
                  milliseconds in the {@link #WALL_TIME} mode. In this case, the wall clock time
                  for an &lt;em&gt;end-rule&lt;/em&gt; means the same thing as the daylight time.
                  &lt;p&gt;
                  The following are examples of parameters for constructing time zone objects.
                  &lt;pre&gt;&lt;code&gt;
                  // Base GMT offset: -8:00
                  // DST starts:      at 2:00am in standard time
                  //                  on the first Sunday in April
                  // DST ends:        at 2:00am in daylight time
                  //                  on the last Sunday in October
                  // Save:            1 hour
                  SimpleTimeZone(-28800000,
                  &quot;America/Los_Angeles&quot;,
                  Calendar.APRIL, 1, -Calendar.SUNDAY,
                  7200000,
                  Calendar.OCTOBER, -1, Calendar.SUNDAY,
                  7200000,
                  3600000)
                  // Base GMT offset: +1:00
                  // DST starts:      at 1:00am in UTC time
                  //                  on the last Sunday in March
                  // DST ends:        at 1:00am in UTC time
                  //                  on the last Sunday in October
                  // Save:            1 hour
                  SimpleTimeZone(3600000,
                  &quot;Europe/Paris&quot;,
                  Calendar.MARCH, -1, Calendar.SUNDAY,
                  3600000, SimpleTimeZone.UTC_TIME,
                  Calendar.OCTOBER, -1, Calendar.SUNDAY,
                  3600000, SimpleTimeZone.UTC_TIME,
                  3600000)
                  &lt;/code&gt;&lt;/pre&gt;
                  These parameter rules are also applicable to the set rule methods, such as
                  &lt;code&gt;setStartRule&lt;/code&gt;.                
                <since>
                    1.1                    
                </since>
                <see>
                    Calendar                    
                </see>
                <see>
                    GregorianCalendar                    
                </see>
                <see>
                    TimeZone                    
                </see>
                <author>
                    David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu                    
                </author>
            </javadoc>
            <javadoc line="96">
                Constructs a SimpleTimeZone with the given base time zone offset from GMT
                  and time zone ID with no daylight saving time schedule.                
                <param>
                    rawOffset  The base time zone offset in milliseconds to GMT.                    
                </param>
                <param>
                    ID         The time zone name that is given to this instance.                    
                </param>
            </javadoc>
            <method name="SimpleTimeZone" type="constructor" line="102">
                <params>
                    <param name="rawOffset" type="int"/>
                    <param name="ID" type="String"/>
                </params>
            </method>
            <javadoc line="107">
                Constructs a SimpleTimeZone with the given base time zone offset from
                  GMT, time zone ID, and rules for starting and ending the daylight
                  time.
                  Both &lt;code&gt;startTime&lt;/code&gt; and &lt;code&gt;endTime&lt;/code&gt; are specified to be
                  represented in the wall clock time. The amount of daylight saving is
                  assumed to be 3600000 milliseconds (i.e., one hour). This constructor is
                  equivalent to:
                  &lt;pre&gt;&lt;code&gt;
                  SimpleTimeZone(rawOffset,
                  ID,
                  startMonth,
                  startDay,
                  startDayOfWeek,
                  startTime,
                  SimpleTimeZone.{@link #WALL_TIME},
                  endMonth,
                  endDay,
                  endDayOfWeek,
                  endTime,
                  SimpleTimeZone.{@link #WALL_TIME},
                  3600000)
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    rawOffset       The given base time zone offset from GMT.                    
                </param>
                <param>
                    ID              The time zone ID which is given to this object.                    
                </param>
                <param>
                    startMonth      The daylight saving time starting month. Month is
                      a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 0
                      for January).                    
                </param>
                <param>
                    startDay        The day of the month on which the daylight saving time starts.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    startDayOfWeek  The daylight saving time starting day-of-week.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    startTime       The daylight saving time starting time in local wall clock
                      time (in milliseconds within the day), which is local
                      standard time in this case.                    
                </param>
                <param>
                    endMonth        The daylight saving time ending month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 9 for October).                    
                </param>
                <param>
                    endDay          The day of the month on which the daylight saving time ends.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    endDayOfWeek    The daylight saving time ending day-of-week.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    endTime         The daylight saving ending time in local wall clock time,
                      (in milliseconds within the day) which is local daylight
                      time in this case.                    
                </param>
                <exception>
                    IllegalArgumentException if the month, day, dayOfWeek, or time
                      parameters are out of range for the start or end rule                    
                </exception>
            </javadoc>
            <method name="SimpleTimeZone" type="constructor" line="155">
                <params>
                    <param name="rawOffset" type="int"/>
                    <param name="ID" type="String"/>
                    <param name="startMonth" type="int"/>
                    <param name="startDay" type="int"/>
                    <param name="startDayOfWeek" type="int"/>
                    <param name="startTime" type="int"/>
                    <param name="endMonth" type="int"/>
                    <param name="endDay" type="int"/>
                    <param name="endDayOfWeek" type="int"/>
                    <param name="endTime" type="int"/>
                </params>
            </method>
            <javadoc line="158">
                Constructs a SimpleTimeZone with the given base time zone offset from
                  GMT, time zone ID, and rules for starting and ending the daylight
                  time.
                  Both &lt;code&gt;startTime&lt;/code&gt; and &lt;code&gt;endTime&lt;/code&gt; are assumed to be
                  represented in the wall clock time. This constructor is equivalent to:
                  &lt;pre&gt;&lt;code&gt;
                  SimpleTimeZone(rawOffset,
                  ID,
                  startMonth,
                  startDay,
                  startDayOfWeek,
                  startTime,
                  SimpleTimeZone.{@link #WALL_TIME},
                  endMonth,
                  endDay,
                  endDayOfWeek,
                  endTime,
                  SimpleTimeZone.{@link #WALL_TIME},
                  dstSavings)
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    rawOffset       The given base time zone offset from GMT.                    
                </param>
                <param>
                    ID              The time zone ID which is given to this object.                    
                </param>
                <param>
                    startMonth      The daylight saving time starting month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 0 for January).                    
                </param>
                <param>
                    startDay        The day of the month on which the daylight saving time starts.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    startDayOfWeek  The daylight saving time starting day-of-week.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    startTime       The daylight saving time starting time in local wall clock
                      time, which is local standard time in this case.                    
                </param>
                <param>
                    endMonth        The daylight saving time ending month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 9 for October).                    
                </param>
                <param>
                    endDay          The day of the month on which the daylight saving time ends.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    endDayOfWeek    The daylight saving time ending day-of-week.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    endTime         The daylight saving ending time in local wall clock time,
                      which is local daylight time in this case.                    
                </param>
                <param>
                    dstSavings      The amount of time in milliseconds saved during
                      daylight saving time.                    
                </param>
                <exception>
                    IllegalArgumentException if the month, day, dayOfWeek, or time
                      parameters are out of range for the start or end rule                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="SimpleTimeZone" type="constructor" line="205">
                <params>
                    <param name="rawOffset" type="int"/>
                    <param name="ID" type="String"/>
                    <param name="startMonth" type="int"/>
                    <param name="startDay" type="int"/>
                    <param name="startDayOfWeek" type="int"/>
                    <param name="startTime" type="int"/>
                    <param name="endMonth" type="int"/>
                    <param name="endDay" type="int"/>
                    <param name="endDayOfWeek" type="int"/>
                    <param name="endTime" type="int"/>
                    <param name="dstSavings" type="int"/>
                </params>
            </method>
            <javadoc line="208">
                Constructs a SimpleTimeZone with the given base time zone offset from
                  GMT, time zone ID, and rules for starting and ending the daylight
                  time.
                  This constructor takes the full set of the start and end rules
                  parameters, including modes of &lt;code&gt;startTime&lt;/code&gt; and
                  &lt;code&gt;endTime&lt;/code&gt;. The mode specifies either {@link #WALL_TIME wall
                  time} or {@link #STANDARD_TIME standard time} or {@link #UTC_TIME UTC
                  time}.                
                <param>
                    rawOffset       The given base time zone offset from GMT.                    
                </param>
                <param>
                    ID              The time zone ID which is given to this object.                    
                </param>
                <param>
                    startMonth      The daylight saving time starting month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 0 for January).                    
                </param>
                <param>
                    startDay        The day of the month on which the daylight saving time starts.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    startDayOfWeek  The daylight saving time starting day-of-week.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    startTime       The daylight saving time starting time in the time mode
                      specified by &lt;code&gt;startTimeMode&lt;/code&gt;.                    
                </param>
                <param>
                    startTimeMode   The mode of the start time specified by startTime.                    
                </param>
                <param>
                    endMonth        The daylight saving time ending month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 9 for October).                    
                </param>
                <param>
                    endDay          The day of the month on which the daylight saving time ends.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    endDayOfWeek    The daylight saving time ending day-of-week.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    endTime         The daylight saving ending time in time time mode
                      specified by &lt;code&gt;endTimeMode&lt;/code&gt;.                    
                </param>
                <param>
                    endTimeMode     The mode of the end time specified by endTime                    
                </param>
                <param>
                    dstSavings      The amount of time in milliseconds saved during
                      daylight saving time.                    
                </param>
                <exception>
                    IllegalArgumentException if the month, day, dayOfWeek, time more, or
                      time parameters are out of range for the start or end rule, or if a time mode
                      value is invalid.                    
                </exception>
                <see>
                    #WALL_TIME                    
                </see>
                <see>
                    #STANDARD_TIME                    
                </see>
                <see>
                    #UTC_TIME                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="SimpleTimeZone" type="constructor" line="249">
                <params>
                    <param name="rawOffset" type="int"/>
                    <param name="ID" type="String"/>
                    <param name="startMonth" type="int"/>
                    <param name="startDay" type="int"/>
                    <param name="startDayOfWeek" type="int"/>
                    <param name="startTime" type="int"/>
                    <param name="startTimeMode" type="int"/>
                    <param name="endMonth" type="int"/>
                    <param name="endDay" type="int"/>
                    <param name="endDayOfWeek" type="int"/>
                    <param name="endTime" type="int"/>
                    <param name="endTimeMode" type="int"/>
                    <param name="dstSavings" type="int"/>
                </params>
                <scope line="264"/>
            </method>
            <javadoc line="268">
                Sets the daylight saving time starting year.                
                <param>
                    year  The daylight saving starting year.                    
                </param>
            </javadoc>
            <method name="setStartYear" type="void" line="272">
                <params>
                    <param name="year" type="int"/>
                </params>
            </method>
            <javadoc line="276">
                Sets the daylight saving time start rule. For example, if daylight saving
                  time starts on the first Sunday in April at 2 am in local wall clock
                  time, you can set the start rule by calling:
                  &lt;pre&gt;&lt;code&gt;setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 260601000);&lt;/code&gt;&lt;/pre&gt;                
                <param>
                    startMonth      The daylight saving time starting month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 0 for January).                    
                </param>
                <param>
                    startDay        The day of the month on which the daylight saving time starts.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    startDayOfWeek  The daylight saving time starting day-of-week.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    startTime       The daylight saving time starting time in local wall clock
                      time, which is local standard time in this case.                    
                </param>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;startMonth&lt;/code&gt;, &lt;code&gt;startDay&lt;/code&gt;,
                      &lt;code&gt;startDayOfWeek&lt;/code&gt;, or &lt;code&gt;startTime&lt;/code&gt; parameters are out of range                    
                </exception>
            </javadoc>
            <method name="setStartRule" type="void" line="293">
                <params>
                    <param name="startMonth" type="int"/>
                    <param name="startDay" type="int"/>
                    <param name="startDayOfWeek" type="int"/>
                    <param name="startTime" type="int"/>
                </params>
            </method>
            <javadoc line="302">
                Sets the daylight saving time start rule to a fixed date within a month.
                  This method is equivalent to:
                  &lt;pre&gt;&lt;code&gt;setStartRule(startMonth, startDay, 0, startTime)&lt;/code&gt;&lt;/pre&gt;                
                <param>
                    startMonth      The daylight saving time starting month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 0 for January).                    
                </param>
                <param>
                    startDay        The day of the month on which the daylight saving time starts.                    
                </param>
                <param>
                    startTime       The daylight saving time starting time in local wall clock
                      time, which is local standard time in this case.
                      See the class description for the special cases of this parameter.                    
                </param>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;startMonth&lt;/code&gt;,
                      &lt;code&gt;startDayOfMonth&lt;/code&gt;, or &lt;code&gt;startTime&lt;/code&gt; parameters are out of range                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setStartRule" type="void" line="317">
                <params>
                    <param name="startMonth" type="int"/>
                    <param name="startDay" type="int"/>
                    <param name="startTime" type="int"/>
                </params>
            </method>
            <javadoc line="320">
                Sets the daylight saving time start rule to a weekday before or after the given date within
                  a month, e.g., the first Monday on or after the 8th.                
                <param>
                    startMonth      The daylight saving time starting month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 0 for January).                    
                </param>
                <param>
                    startDay        The day of the month on which the daylight saving time starts.                    
                </param>
                <param>
                    startDayOfWeek  The daylight saving time starting day-of-week.                    
                </param>
                <param>
                    startTime       The daylight saving time starting time in local wall clock
                      time, which is local standard time in this case.                    
                </param>
                <param>
                    after           If true, this rule selects the first &lt;code&gt;dayOfWeek&lt;/code&gt; on or
                      &lt;em&gt;after&lt;/em&gt; &lt;code&gt;dayOfMonth&lt;/code&gt;.  If false, this rule
                      selects the last &lt;code&gt;dayOfWeek&lt;/code&gt; on or &lt;em&gt;before&lt;/em&gt;
                      &lt;code&gt;dayOfMonth&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;startMonth&lt;/code&gt;, &lt;code&gt;startDay&lt;/code&gt;,
                      &lt;code&gt;startDayOfWeek&lt;/code&gt;, or &lt;code&gt;startTime&lt;/code&gt; parameters are out of range                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setStartRule" type="void" line="338">
                <params>
                    <param name="startMonth" type="int"/>
                    <param name="startDay" type="int"/>
                    <param name="startDayOfWeek" type="int"/>
                    <param name="startTime" type="int"/>
                    <param name="after" type="boolean"/>
                </params>
                <scope line="339"/>
                <scope line="342"/>
            </method>
            <javadoc line="346">
                Sets the daylight saving time end rule. For example, if daylight saving time
                  ends on the last Sunday in October at 2 am in wall clock time,
                  you can set the end rule by calling:
                  &lt;code&gt;setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 260601000);&lt;/code&gt;                
                <param>
                    endMonth        The daylight saving time ending month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 9 for October).                    
                </param>
                <param>
                    endDay          The day of the month on which the daylight saving time ends.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    endDayOfWeek    The daylight saving time ending day-of-week.
                      See the class description for the special cases of this parameter.                    
                </param>
                <param>
                    endTime         The daylight saving ending time in local wall clock time,
                      (in milliseconds within the day) which is local daylight
                      time in this case.                    
                </param>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;endMonth&lt;/code&gt;, &lt;code&gt;endDay&lt;/code&gt;,
                      &lt;code&gt;endDayOfWeek&lt;/code&gt;, or &lt;code&gt;endTime&lt;/code&gt; parameters are out of range                    
                </exception>
            </javadoc>
            <method name="setEndRule" type="void" line="364">
                <params>
                    <param name="endMonth" type="int"/>
                    <param name="endDay" type="int"/>
                    <param name="endDayOfWeek" type="int"/>
                    <param name="endTime" type="int"/>
                </params>
            </method>
            <javadoc line="373">
                Sets the daylight saving time end rule to a fixed date within a month.
                  This method is equivalent to:
                  &lt;pre&gt;&lt;code&gt;setEndRule(endMonth, endDay, 0, endTime)&lt;/code&gt;&lt;/pre&gt;                
                <param>
                    endMonth        The daylight saving time ending month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 9 for October).                    
                </param>
                <param>
                    endDay          The day of the month on which the daylight saving time ends.                    
                </param>
                <param>
                    endTime         The daylight saving ending time in local wall clock time,
                      (in milliseconds within the day) which is local daylight
                      time in this case.                    
                </param>
                <exception>
                    IllegalArgumentException the &lt;code&gt;endMonth&lt;/code&gt;, &lt;code&gt;endDay&lt;/code&gt;,
                      or &lt;code&gt;endTime&lt;/code&gt; parameters are out of range                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setEndRule" type="void" line="388">
                <params>
                    <param name="endMonth" type="int"/>
                    <param name="endDay" type="int"/>
                    <param name="endTime" type="int"/>
                </params>
            </method>
            <javadoc line="391">
                Sets the daylight saving time end rule to a weekday before or after the given date within
                  a month, e.g., the first Monday on or after the 8th.                
                <param>
                    endMonth        The daylight saving time ending month. Month is
                      a {@link Calendar#MONTH MONTH} field
                      value (0-based. e.g., 9 for October).                    
                </param>
                <param>
                    endDay          The day of the month on which the daylight saving time ends.                    
                </param>
                <param>
                    endDayOfWeek    The daylight saving time ending day-of-week.                    
                </param>
                <param>
                    endTime         The daylight saving ending time in local wall clock time,
                      (in milliseconds within the day) which is local daylight
                      time in this case.                    
                </param>
                <param>
                    after           If true, this rule selects the first &lt;code&gt;endDayOfWeek&lt;/code&gt; on
                      or &lt;em&gt;after&lt;/em&gt; &lt;code&gt;endDay&lt;/code&gt;.  If false, this rule
                      selects the last &lt;code&gt;endDayOfWeek&lt;/code&gt; on or before
                      &lt;code&gt;endDay&lt;/code&gt; of the month.                    
                </param>
                <exception>
                    IllegalArgumentException the &lt;code&gt;endMonth&lt;/code&gt;, &lt;code&gt;endDay&lt;/code&gt;,
                      &lt;code&gt;endDayOfWeek&lt;/code&gt;, or &lt;code&gt;endTime&lt;/code&gt; parameters are out of range                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setEndRule" type="void" line="410">
                <params>
                    <param name="endMonth" type="int"/>
                    <param name="endDay" type="int"/>
                    <param name="endDayOfWeek" type="int"/>
                    <param name="endTime" type="int"/>
                    <param name="after" type="boolean"/>
                </params>
                <scope line="411"/>
                <scope line="414"/>
            </method>
            <javadoc line="418">
                Returns the offset of this time zone from UTC at the given
                  time. If daylight saving time is in effect at the given time,
                  the offset value is adjusted with the amount of daylight
                  saving.                
                <param>
                    date the time at which the time zone offset is found                    
                </param>
                <return>
                    the amount of time in milliseconds to add to UTC to get
                      local time.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getOffset" type="int" line="428">
                <params>
                    <param name="date" type="long"/>
                </params>
            </method>
            <javadoc line="431">
                @see TimeZone#getOffsets                
            </javadoc>
            <method name="getOffsets" type="int" line="434">
                <params>
                    <param name="date" type="long"/>
                    <param name="offsets" type="int[]"/>
                </params>
                <declaration name="offset" type="int" line="435"/>
                <scope line="436">
                    <scope line="437">
                        <scope line="438">
                            <scope line="439"/>
                        </scope>
                    </scope>
                    <declaration name="cal" type="BaseCalendar" line="445"/>
                    <declaration name="cdate" type="BaseCalendar.Date" line="446"/>
                    <declaration name="year" type="int" line="448"/>
                    <scope line="449"/>
                </scope>
                <scope line="454"/>
            </method>
            <javadoc line="460">
                Returns the difference in milliseconds between local time and
                  UTC, taking into account both the raw offset and the effect of
                  daylight saving, for the specified date and time.  This method
                  assumes that the start and end month are distinct.  It also
                  uses a default {@link GregorianCalendar} object as its
                  underlying calendar, such as for determining leap years.  Do
                  not use the result of this method with a calendar other than a
                  default &lt;code&gt;GregorianCalendar&lt;/code&gt;.
                  &lt;p&gt;&lt;em&gt;Note:  In general, clients should use
                  &lt;code&gt;Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)&lt;/code&gt;
                  instead of calling this method.&lt;/em&gt;                
                <param>
                    era       The era of the given date.                    
                </param>
                <param>
                    year      The year in the given date.                    
                </param>
                <param>
                    month     The month in the given date. Month is 0-based. e.g.,
                      0 for January.                    
                </param>
                <param>
                    day       The day-in-month of the given date.                    
                </param>
                <param>
                    dayOfWeek The day-of-week of the given date.                    
                </param>
                <param>
                    millis    The milliseconds in day in &lt;em&gt;standard&lt;/em&gt; local time.                    
                </param>
                <return>
                    The milliseconds to add to UTC to get local time.                    
                </return>
                <exception>
                    IllegalArgumentException the &lt;code&gt;era&lt;/code&gt;,
                      &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;dayOfWeek&lt;/code&gt;,
                      or &lt;code&gt;millis&lt;/code&gt; parameters are out of range                    
                </exception>
            </javadoc>
            <method name="getOffset" type="int" line="484">
                <params>
                    <param name="era" type="int"/>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="day" type="int"/>
                    <param name="dayOfWeek" type="int"/>
                    <param name="millis" type="int"/>
                </params>
                <scope line="485"/>
                <declaration name="y" type="int" line="488"/>
                <scope line="489"/>
                <scope line="492"/>
                <scope line="495"/>
                <declaration name="m" type="int" line="498"/>
                <declaration name="cal" type="BaseCalendar" line="499"/>
                <declaration name="cdate" type="BaseCalendar.Date" line="500"/>
                <declaration name="time" type="long" line="502"/>
                <scope line="504"/>
                <scope line="510"/>
                <scope line="513"/>
            </method>
            <method name="getOffset" type="int" line="518">
                <params>
                    <param name="cal" type="BaseCalendar"/>
                    <param name="cdate" type="BaseCalendar.Date"/>
                    <param name="year" type="int"/>
                    <param name="time" type="long"/>
                </params>
                <scope line="519">
                    <scope line="520">
                        <scope line="521"/>
                        <scope line="524"/>
                    </scope>
                </scope>
                <declaration name="start" type="long" line="529"/>
                <declaration name="end" type="long" line="530"/>
                <declaration name="offset" type="int" line="531"/>
                <scope line="532">
                    <scope line="533"/>
                    <scope line="536"/>
                </scope>
                <scope line="542">
                    <scope line="543">
                        <scope line="545"/>
                    </scope>
                    <scope line="549">
                        <scope line="551"/>
                    </scope>
                    <scope line="555">
                        <scope line="556"/>
                    </scope>
                </scope>
            </method>
            <method name="getStart" type="long" line="565">
                <params>
                    <param name="cal" type="BaseCalendar"/>
                    <param name="cdate" type="BaseCalendar.Date"/>
                    <param name="year" type="int"/>
                </params>
                <declaration name="time" type="int" line="566"/>
                <scope line="567"/>
            </method>
            <method name="getEnd" type="long" line="572">
                <params>
                    <param name="cal" type="BaseCalendar"/>
                    <param name="cdate" type="BaseCalendar.Date"/>
                    <param name="year" type="int"/>
                </params>
                <declaration name="time" type="int" line="573"/>
                <scope line="574"/>
                <scope line="577"/>
            </method>
            <method name="getTransition" type="long" line="582">
                <params>
                    <param name="cal" type="BaseCalendar"/>
                    <param name="cdate" type="BaseCalendar.Date"/>
                    <param name="mode" type="int"/>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="dayOfMonth" type="int"/>
                    <param name="dayOfWeek" type="int"/>
                    <param name="timeOfDay" type="int"/>
                </params>
                <scope line="591"/>
            </method>
            <javadoc line="607">
                Gets the GMT offset for this time zone.                
                <return>
                    the GMT offset value in milliseconds                    
                </return>
                <see>
                    #setRawOffset                    
                </see>
            </javadoc>
            <method name="getRawOffset" type="int" line="612"/>
            <javadoc line="615">
                Sets the base time zone offset to GMT.
                  This is the offset to add to UTC to get local time.                
                <see>
                    #getRawOffset                    
                </see>
            </javadoc>
            <method name="setRawOffset" type="void" line="620">
                <params>
                    <param name="offsetMillis" type="int"/>
                </params>
            </method>
            <javadoc line="623">
                Sets the amount of time in milliseconds that the clock is advanced
                  during daylight saving time.                
                <param>
                    millisSavedDuringDST the number of milliseconds the time is
                      advanced with respect to standard time when the daylight saving time rules
                      are in effect. A positive number, typically one hour (3600000).                    
                </param>
                <see>
                    #getDSTSavings                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setDSTSavings" type="void" line="632">
                <params>
                    <param name="millisSavedDuringDST" type="int"/>
                </params>
                <scope line="633"/>
            </method>
            <javadoc line="638">
                Returns the amount of time in milliseconds that the clock is
                  advanced during daylight saving time.                
                <return>
                    the number of milliseconds the time is advanced with
                      respect to standard time when the daylight saving rules are in
                      effect, or 0 (zero) if this time zone doesn&apos;t observe daylight
                      saving time.                    
                </return>
                <see>
                    #setDSTSavings                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getDSTSavings" type="int" line="648"/>
            <javadoc line="651">
                Queries if this time zone uses daylight saving time.                
                <return>
                    true if this time zone uses daylight saving time;
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="useDaylightTime" type="boolean" line="656"/>
            <javadoc line="659">
                Returns {@code true} if this {@code SimpleTimeZone} observes
                  Daylight Saving Time. This method is equivalent to {@link #useDaylightTime()}.                
                <return>
                    {@code true} if this {@code SimpleTimeZone} observes
                      Daylight Saving Time; {@code false} otherwise.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="observesDaylightTime" type="boolean" line="666"/>
            <javadoc line="669">
                Queries if the given date is in daylight saving time.                
                <return>
                    true if daylight saving time is in effective at the
                      given date; false otherwise.                    
                </return>
            </javadoc>
            <method name="inDaylightTime" type="boolean" line="674">
                <params>
                    <param name="date" type="Date"/>
                </params>
            </method>
            <javadoc line="677">
                Returns a clone of this &lt;code&gt;SimpleTimeZone&lt;/code&gt; instance.                
                <return>
                    a clone of this instance.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="681"/>
            <javadoc line="684">
                Generates the hash code for the SimpleDateFormat object.                
                <return>
                    the hash code for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="688"/>
            <javadoc line="691">
                Compares the equality of two &lt;code&gt;SimpleTimeZone&lt;/code&gt; objects.                
                <param>
                    obj  The &lt;code&gt;SimpleTimeZone&lt;/code&gt; object to be compared with.                    
                </param>
                <return>
                    True if the given &lt;code&gt;obj&lt;/code&gt; is the same as this
                      &lt;code&gt;SimpleTimeZone&lt;/code&gt; object; false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="697">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="698"/>
                <scope line="701"/>
                <declaration name="that" type="SimpleTimeZone" line="704"/>
            </method>
            <javadoc line="707">
                Returns &lt;code&gt;true&lt;/code&gt; if this zone has the same rules and offset as another zone.                
                <param>
                    other the TimeZone object to be compared with                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the given zone is a SimpleTimeZone and has the
                      same rules and offset as this one                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hasSameRules" type="boolean" line="714">
                <params>
                    <param name="other" type="TimeZone"/>
                </params>
                <scope line="715"/>
                <scope line="718"/>
                <declaration name="that" type="SimpleTimeZone" line="721"/>
            </method>
            <javadoc line="724">
                Returns a string representation of this time zone.                
                <return>
                    a string representation of this time zone.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="728"/>
            <declaration name="startMonth" type="int" line="731"/>
            <javadoc line="731">
                The month in which daylight saving time starts.  This value must be
                  between &lt;code&gt;Calendar.JANUARY&lt;/code&gt; and
                  &lt;code&gt;Calendar.DECEMBER&lt;/code&gt; inclusive.  This value must not equal
                  &lt;code&gt;endMonth&lt;/code&gt;.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="startDay" type="int" line="740"/>
            <javadoc line="740">
                This field has two possible interpretations:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;code&gt;startMode == DOW_IN_MONTH&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  &lt;code&gt;startDay&lt;/code&gt; indicates the day of the month of
                  &lt;code&gt;startMonth&lt;/code&gt; on which daylight
                  saving time starts, from 1 to 28, 30, or 31, depending on the
                  &lt;code&gt;startMonth&lt;/code&gt;.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;code&gt;startMode != DOW_IN_MONTH&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  &lt;code&gt;startDay&lt;/code&gt; indicates which &lt;code&gt;startDayOfWeek&lt;/code&gt; in the
                  month &lt;code&gt;startMonth&lt;/code&gt; daylight
                  saving time starts on.  For example, a value of +1 and a
                  &lt;code&gt;startDayOfWeek&lt;/code&gt; of &lt;code&gt;Calendar.SUNDAY&lt;/code&gt; indicates the
                  first Sunday of &lt;code&gt;startMonth&lt;/code&gt;.  Likewise, +2 would indicate the
                  second Sunday, and -1 the last Sunday.  A value of 0 is illegal.
                  &lt;/dd&gt;
                  &lt;/dl&gt;
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="startDayOfWeek" type="int" line="764"/>
            <javadoc line="764">
                The day of the week on which daylight saving time starts.  This value
                  must be between &lt;code&gt;Calendar.SUNDAY&lt;/code&gt; and
                  &lt;code&gt;Calendar.SATURDAY&lt;/code&gt; inclusive.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false or
                  &lt;code&gt;startMode == DAY_OF_MONTH&lt;/code&gt;, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="startTime" type="int" line="773"/>
            <javadoc line="773">
                The time in milliseconds after midnight at which daylight saving
                  time starts.  This value is expressed as wall time, standard time,
                  or UTC time, depending on the setting of &lt;code&gt;startTimeMode&lt;/code&gt;.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="startTimeMode" type="int" line="781"/>
            <javadoc line="781">
                The format of startTime, either WALL_TIME, STANDARD_TIME, or UTC_TIME.                
                <serial>
                                        
                </serial>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="endMonth" type="int" line="787"/>
            <javadoc line="787">
                The month in which daylight saving time ends.  This value must be
                  between &lt;code&gt;Calendar.JANUARY&lt;/code&gt; and
                  &lt;code&gt;Calendar.UNDECIMBER&lt;/code&gt;.  This value must not equal
                  &lt;code&gt;startMonth&lt;/code&gt;.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="endDay" type="int" line="796"/>
            <javadoc line="796">
                This field has two possible interpretations:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;code&gt;endMode == DOW_IN_MONTH&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  &lt;code&gt;endDay&lt;/code&gt; indicates the day of the month of
                  &lt;code&gt;endMonth&lt;/code&gt; on which daylight
                  saving time ends, from 1 to 28, 30, or 31, depending on the
                  &lt;code&gt;endMonth&lt;/code&gt;.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;code&gt;endMode != DOW_IN_MONTH&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  &lt;code&gt;endDay&lt;/code&gt; indicates which &lt;code&gt;endDayOfWeek&lt;/code&gt; in th
                  month &lt;code&gt;endMonth&lt;/code&gt; daylight
                  saving time ends on.  For example, a value of +1 and a
                  &lt;code&gt;endDayOfWeek&lt;/code&gt; of &lt;code&gt;Calendar.SUNDAY&lt;/code&gt; indicates the
                  first Sunday of &lt;code&gt;endMonth&lt;/code&gt;.  Likewise, +2 would indicate the
                  second Sunday, and -1 the last Sunday.  A value of 0 is illegal.
                  &lt;/dd&gt;
                  &lt;/dl&gt;
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="endDayOfWeek" type="int" line="820"/>
            <javadoc line="820">
                The day of the week on which daylight saving time ends.  This value
                  must be between &lt;code&gt;Calendar.SUNDAY&lt;/code&gt; and
                  &lt;code&gt;Calendar.SATURDAY&lt;/code&gt; inclusive.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false or
                  &lt;code&gt;endMode == DAY_OF_MONTH&lt;/code&gt;, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="endTime" type="int" line="829"/>
            <javadoc line="829">
                The time in milliseconds after midnight at which daylight saving
                  time ends.  This value is expressed as wall time, standard time,
                  or UTC time, depending on the setting of &lt;code&gt;endTimeMode&lt;/code&gt;.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="endTimeMode" type="int" line="837"/>
            <javadoc line="837">
                The format of endTime, either &lt;code&gt;WALL_TIME&lt;/code&gt;,
                  &lt;code&gt;STANDARD_TIME&lt;/code&gt;, or &lt;code&gt;UTC_TIME&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="startYear" type="int" line="844"/>
            <javadoc line="844">
                The year in which daylight saving time is first observed.  This is an {@link GregorianCalendar#AD AD}value.  If this value is less than 1 then daylight saving time is observed
                  for all &lt;code&gt;AD&lt;/code&gt; years.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="rawOffset" type="int" line="851"/>
            <javadoc line="851">
                The offset in milliseconds between this zone and GMT.  Negative offsets
                  are to the west of Greenwich.  To obtain local &lt;em&gt;standard&lt;/em&gt; time,
                  add the offset to GMT time.  To obtain local wall time it may also be
                  necessary to add &lt;code&gt;dstSavings&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="useDaylight" type="boolean" line="859"/>
            <javadoc line="859">
                A boolean value which is true if and only if this zone uses daylight
                  saving time.  If this value is false, several other fields are ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="millisPerHour" type="int" line="865"/>
            <declaration name="millisPerDay" type="int" line="866"/>
            <declaration name="monthLength" type="byte" line="867"/>
            <javadoc line="867">
                This field was serialized in JDK 1.1, so we have to keep it that way
                  to maintain serialization compatibility. However, there&apos;s no need to
                  recreate the array each time we create a new time zone.                
                <serial>
                    An array of bytes containing the values {31, 28, 31, 30, 31, 30,
                      31, 31, 30, 31, 30, 31}.  This is ignored as of the Java 2 platform v1.2, however, it must
                      be streamed out for compatibility with JDK 1.1.                    
                </serial>
            </javadoc>
            <declaration name="staticMonthLength" type="byte" line="876"/>
            <declaration name="staticLeapMonthLength" type="byte" line="877"/>
            <declaration name="startMode" type="int" line="878"/>
            <javadoc line="878">
                Variables specifying the mode of the start rule.  Takes the following
                  values:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;code&gt;DOM_MODE&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  Exact day of week; e.g., March 1.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;code&gt;DOW_IN_MONTH_MODE&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  Day of week in month; e.g., last Sunday in March.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;code&gt;DOW_GE_DOM_MODE&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  Day of week after day of month; e.g., Sunday on or after March 15.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;code&gt;DOW_LE_DOM_MODE&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  Day of week before day of month; e.g., Sunday on or before March 15.
                  &lt;/dd&gt;
                  &lt;/dl&gt;
                  The setting of this field affects the interpretation of the
                  &lt;code&gt;startDay&lt;/code&gt; field.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
                <since>
                    1.1.4                    
                </since>
            </javadoc>
            <declaration name="endMode" type="int" line="906"/>
            <javadoc line="906">
                Variables specifying the mode of the end rule.  Takes the following
                  values:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;code&gt;DOM_MODE&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  Exact day of week; e.g., March 1.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;code&gt;DOW_IN_MONTH_MODE&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  Day of week in month; e.g., last Sunday in March.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;code&gt;DOW_GE_DOM_MODE&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  Day of week after day of month; e.g., Sunday on or after March 15.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;code&gt;DOW_LE_DOM_MODE&lt;/code&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  Day of week before day of month; e.g., Sunday on or before March 15.
                  &lt;/dd&gt;
                  &lt;/dl&gt;
                  The setting of this field affects the interpretation of the
                  &lt;code&gt;endDay&lt;/code&gt; field.
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
                <since>
                    1.1.4                    
                </since>
            </javadoc>
            <declaration name="dstSavings" type="int" line="934"/>
            <javadoc line="934">
                A positive value indicating the amount of time saved during DST in
                  milliseconds.
                  Typically one hour (3600000); sometimes 30 minutes (1800000).
                  &lt;p&gt;If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is ignored.                
                <serial>
                                        
                </serial>
                <since>
                    1.1.4                    
                </since>
            </javadoc>
            <declaration name="gcal" type="Gregorian" line="943"/>
            <declaration name="cacheYear" type="long" line="944"/>
            <javadoc line="944">
                Cache values representing a single period of daylight saving
                  time. When the cache values are valid, cacheStart is the start
                  time (inclusive) of daylight saving time and cacheEnd is the
                  end time (exclusive).
                  cacheYear has a year value if both cacheStart and cacheEnd are
                  in the same year. cacheYear is set to startYear - 1 if
                  cacheStart and cacheEnd are in different years. cacheStart is 0
                  if the cache values are void. cacheYear is a long to support
                  Integer.MIN_VALUE - 1 (JCK requirement).                
            </javadoc>
            <declaration name="cacheStart" type="long" line="956"/>
            <declaration name="cacheEnd" type="long" line="957"/>
            <declaration name="DOM_MODE" type="int" line="958"/>
            <javadoc line="958">
                Constants specifying values of startMode and endMode.                
            </javadoc>
            <declaration name="DOW_IN_MONTH_MODE" type="int" line="962"/>
            <declaration name="DOW_GE_DOM_MODE" type="int" line="963"/>
            <declaration name="DOW_LE_DOM_MODE" type="int" line="964"/>
            <declaration name="WALL_TIME" type="int" line="965"/>
            <javadoc line="965">
                Constant for a mode of start or end time specified as wall clock
                  time.  Wall clock time is standard time for the onset rule, and
                  daylight time for the end rule.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="STANDARD_TIME" type="int" line="972"/>
            <javadoc line="972">
                Constant for a mode of start or end time specified as standard time.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="UTC_TIME" type="int" line="977"/>
            <javadoc line="977">
                Constant for a mode of start or end time specified as UTC. European
                  Union rules are specified as UTC time, for example.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="983"/>
            <declaration name="currentSerialVersion" type="int" line="984"/>
            <declaration name="serialVersionOnStream" type="int" line="985"/>
            <javadoc line="985">
                The version of the serialized data on the stream.  Possible values:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;0&lt;/b&gt; or not present on stream&lt;/dt&gt;
                  &lt;dd&gt;
                  JDK 1.1.3 or earlier.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;b&gt;1&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  JDK 1.1.4 or later.  Includes three new fields: &lt;code&gt;startMode&lt;/code&gt;,
                  &lt;code&gt;endMode&lt;/code&gt;, and &lt;code&gt;dstSavings&lt;/code&gt;.
                  &lt;/dd&gt;
                  &lt;dt&gt;&lt;b&gt;2&lt;/b&gt;&lt;/dt&gt;
                  &lt;dd&gt;
                  JDK 1.3 or later.  Includes two new fields: &lt;code&gt;startTimeMode&lt;/code&gt;
                  and &lt;code&gt;endTimeMode&lt;/code&gt;.
                  &lt;/dd&gt;
                  &lt;/dl&gt;
                  When streaming out this class, the most recent format
                  and the highest allowable &lt;code&gt;serialVersionOnStream&lt;/code&gt;
                  is written.                
                <serial>
                                        
                </serial>
                <since>
                    1.1.4                    
                </since>
            </javadoc>
            <method name="invalidateCache" type="void" line="1010"/>
            <javadoc line="1014">
                Given a set of encoded rules in startDay and startDayOfMonth, decode
                  them and set the startMode appropriately.  Do the same for endDay and
                  endDayOfMonth.  Upon entry, the day of week variables may be zero or
                  negative, in order to indicate special modes.  The day of month
                  variables may also be negative.  Upon exit, the mode variables will be
                  set, and the day of week and day of month variables will be positive.
                  This method also recognizes a startDay or endDay of zero as indicating
                  no DST.                
            </javadoc>
            <method name="decodeRules" type="void" line="1024"/>
            <javadoc line="1028">
                Decode the start rule and validate the parameters.  The parameters are
                  expected to be in encoded form, which represents the various rule modes
                  by negating or zeroing certain values.  Representation formats are:
                  &lt;p&gt;
                  &lt;pre&gt;
                  DOW_IN_MONTH  DOM    DOW&gt;=DOM  DOW&lt;=DOM  no DST
                  ------------  -----  --------  --------  ----------
                  month       0..11        same    same      same     don&apos;t care
                  day        -5..5         1..31   1..31    -1..-31   0
                  dayOfWeek   1..7         0      -1..-7    -1..-7    don&apos;t care
                  time        0..ONEDAY    same    same      same     don&apos;t care
                  &lt;/pre&gt;
                  The range for month does not include UNDECIMBER since this class is
                  really specific to GregorianCalendar, which does not use that month.
                  The range for time includes ONEDAY (vs. ending at ONEDAY-1) because the
                  end rule is an exclusive limit point.  That is, the range of times that
                  are in DST include those &gt;= the start and &lt; the end.  For this reason,
                  it should be possible to specify an end of ONEDAY in order to include the
                  entire day.  Although this is equivalent to time 0 of the following day,
                  it&apos;s not always possible to specify that, for example, on December 31.
                  While arguably the start range should still be 0..ONEDAY-1, we keep
                  the start and end ranges the same for consistency.                
            </javadoc>
            <method name="decodeStartRule" type="void" line="1052">
                <scope line="1054">
                    <scope line="1055"/>
                    <scope line="1058"/>
                    <scope line="1061"/>
                    <scope line="1064">
                        <scope line="1065"/>
                        <scope line="1068">
                            <scope line="1070"/>
                            <scope line="1073"/>
                        </scope>
                        <scope line="1078"/>
                    </scope>
                    <scope line="1082">
                        <scope line="1083"/>
                    </scope>
                    <scope line="1087"/>
                </scope>
            </method>
            <javadoc line="1092">
                Decode the end rule and validate the parameters.  This method is exactly
                  analogous to decodeStartRule().                
                <see>
                    decodeStartRule                    
                </see>
            </javadoc>
            <method name="decodeEndRule" type="void" line="1097">
                <scope line="1099">
                    <scope line="1100"/>
                    <scope line="1103"/>
                    <scope line="1106"/>
                    <scope line="1109">
                        <scope line="1110"/>
                        <scope line="1113">
                            <scope line="1115"/>
                            <scope line="1118"/>
                        </scope>
                        <scope line="1123"/>
                    </scope>
                    <scope line="1127">
                        <scope line="1128"/>
                    </scope>
                    <scope line="1132"/>
                </scope>
            </method>
            <javadoc line="1137">
                Make rules compatible to 1.1 FCS code.  Since 1.1 FCS code only understands
                  day-of-week-in-month rules, we must modify other modes of rules to their
                  approximate equivalent in 1.1 FCS terms.  This method is used when streaming
                  out objects of this class.  After it is called, the rules will be modified,
                  with a possible loss of information.  startMode and endMode will NOT be
                  altered, even though semantically they should be set to DOW_IN_MONTH_MODE,
                  since the rule modification is only intended to be temporary.                
            </javadoc>
            <method name="makeRulesCompatible" type="void" line="1146">
                <scope line="1153"/>
                <scope line="1158"/>
                <scope line="1161"/>
                <scope line="1172"/>
                <scope line="1177"/>
                <scope line="1180"/>
                <scope line="1190"/>
                <scope line="1194"/>
                <scope line="1205"/>
                <scope line="1209"/>
            </method>
            <javadoc line="1214">
                Pack the start and end rules into an array of bytes.  Only pack
                  data which is not preserved by makeRulesCompatible.                
            </javadoc>
            <method name="packRules" type="byte[]" line="1218">
                <declaration name="rules" type="byte[]" line="1219"/>
            </method>
            <javadoc line="1228">
                Given an array of bytes produced by packRules, interpret them
                  as the start and end rules.                
            </javadoc>
            <method name="unpackRules" type="void" line="1232">
                <params>
                    <param name="rules" type="byte[]"/>
                </params>
                <scope line="1237"/>
            </method>
            <javadoc line="1242">
                Pack the start and end times into an array of bytes.  This is required
                  as of serial version 2.                
            </javadoc>
            <method name="packTimes" type="int[]" line="1246">
                <declaration name="times" type="int[]" line="1247"/>
            </method>
            <javadoc line="1252">
                Unpack the start and end times from an array of bytes.  This is required
                  as of serial version 2.                
            </javadoc>
            <method name="unpackTimes" type="void" line="1256">
                <params>
                    <param name="times" type="int[]"/>
                </params>
            </method>
            <javadoc line="1260">
                Save the state of this object to a stream (i.e., serialize it).                
                <serialData>
                    We write out two formats, a JDK 1.1 compatible format, using
                      &lt;code&gt;DOW_IN_MONTH_MODE&lt;/code&gt; rules, in the required section, followed
                      by the full rules, in packed format, in the optional section.  The
                      optional section will be ignored by JDK 1.1 code upon stream in.
                      &lt;p&gt; Contents of the optional section: The length of a byte array is
                      emitted (int); this is 4 as of this release. The byte array of the given
                      length is emitted. The contents of the byte array are the true values of
                      the fields &lt;code&gt;startDay&lt;/code&gt;, &lt;code&gt;startDayOfWeek&lt;/code&gt;,
                      &lt;code&gt;endDay&lt;/code&gt;, and &lt;code&gt;endDayOfWeek&lt;/code&gt;.  The values of these
                      fields in the required section are approximate values suited to the rule
                      mode &lt;code&gt;DOW_IN_MONTH_MODE&lt;/code&gt;, which is the only mode recognized by
                      JDK 1.1.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="1275">
                <params>
                    <param name="stream" type="ObjectOutputStream"/>
                </params>
                <declaration name="rules" type="byte[]" line="1276"/>
                <declaration name="times" type="int[]" line="1277"/>
            </method>
            <javadoc line="1286">
                Reconstitute this object from a stream (i.e., deserialize it).
                  We handle both JDK 1.1
                  binary formats and full formats with a packed byte array.                
            </javadoc>
            <method name="readObject" type="void" line="1291">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <scope line="1293">
                    <scope line="1294"/>
                    <scope line="1297"/>
                </scope>
                <scope line="1303">
                    <declaration name="length" type="int" line="1304"/>
                    <declaration name="rules" type="byte[]" line="1305"/>
                </scope>
                <scope line="1309">
                    <declaration name="times" type="int[]" line="1310"/>
                </scope>
            </method>
        </class>
    </source>