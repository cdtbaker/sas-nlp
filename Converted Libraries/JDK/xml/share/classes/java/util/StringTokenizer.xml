<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.lang"/>
        <class name="StringTokenizer" line="3">
            <implements interface="Enumeration">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </implements>
            <javadoc line="3">
                The string tokenizer class allows an application to break a
                  string into tokens. The tokenization method is much simpler than
                  the one used by the &lt;code&gt;StreamTokenizer&lt;/code&gt; class. The
                  &lt;code&gt;StringTokenizer&lt;/code&gt; methods do not distinguish among
                  identifiers, numbers, and quoted strings, nor do they recognize
                  and skip comments.
                  &lt;p&gt;
                  The set of delimiters (the characters that separate tokens) may
                  be specified either at creation time or on a per-token basis.
                  &lt;p&gt;
                  An instance of &lt;code&gt;StringTokenizer&lt;/code&gt; behaves in one of two
                  ways, depending on whether it was created with the
                  &lt;code&gt;returnDelims&lt;/code&gt; flag having the value &lt;code&gt;true&lt;/code&gt;
                  or &lt;code&gt;false&lt;/code&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;If the flag is &lt;code&gt;false&lt;/code&gt;, delimiter characters serve to
                  separate tokens. A token is a maximal sequence of consecutive
                  characters that are not delimiters.
                  &lt;li&gt;If the flag is &lt;code&gt;true&lt;/code&gt;, delimiter characters are themselves
                  considered to be tokens. A token is thus either one delimiter
                  character, or a maximal sequence of consecutive characters that are
                  not delimiters.
                  &lt;/ul&gt;&lt;p&gt;
                  A &lt;tt&gt;StringTokenizer&lt;/tt&gt; object internally maintains a current
                  position within the string to be tokenized. Some operations advance this
                  current position past the characters processed.&lt;p&gt;
                  A token is returned by taking a substring of the string that was used to
                  create the &lt;tt&gt;StringTokenizer&lt;/tt&gt; object.
                  &lt;p&gt;
                  The following is one example of the use of the tokenizer. The code:
                  &lt;blockquote&gt;&lt;pre&gt;
                  StringTokenizer st = new StringTokenizer(&quot;this is a test&quot;);
                  while (st.hasMoreTokens()) {
                  System.out.println(st.nextToken());
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  prints the following output:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this
                  is
                  a
                  test
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  &lt;tt&gt;StringTokenizer&lt;/tt&gt; is a legacy class that is retained for
                  compatibility reasons although its use is discouraged in new code. It is
                  recommended that anyone seeking this functionality use the &lt;tt&gt;split&lt;/tt&gt;
                  method of &lt;tt&gt;String&lt;/tt&gt; or the java.util.regex package instead.
                  &lt;p&gt;
                  The following example illustrates how the &lt;tt&gt;String.split&lt;/tt&gt;
                  method can be used to break up a string into its basic tokens:
                  &lt;blockquote&gt;&lt;pre&gt;
                  String[] result = &quot;this is a test&quot;.split(&quot;\\s&quot;);
                  for (int x=0; x&amp;lt;result.length; x++)
                  System.out.println(result[x]);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  prints the following output:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this
                  is
                  a
                  test
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <author>
                    unascribed                    
                </author>
                <see>
                    java.io.StreamTokenizer                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="currentPosition" type="int" line="74"/>
            <declaration name="newPosition" type="int" line="75"/>
            <declaration name="maxPosition" type="int" line="76"/>
            <declaration name="str" type="String" line="77"/>
            <declaration name="delimiters" type="String" line="78"/>
            <declaration name="retDelims" type="boolean" line="79"/>
            <declaration name="delimsChanged" type="boolean" line="80"/>
            <declaration name="maxDelimCodePoint" type="int" line="81"/>
            <javadoc line="81">
                maxDelimCodePoint stores the value of the delimiter character with the
                  highest value. It is used to optimize the detection of delimiter
                  characters.
                  It is unlikely to provide any optimization benefit in the
                  hasSurrogates case because most string characters will be
                  smaller than the limit, but we keep it so that the two code
                  paths remain similar.                
            </javadoc>
            <declaration name="hasSurrogates" type="boolean" line="91"/>
            <javadoc line="91">
                If delimiters include any surrogates (including surrogate
                  pairs), hasSurrogates is true and the tokenizer uses the
                  different code path. This is because String.indexOf(int)
                  doesn&apos;t handle unpaired surrogates as a single character.                
            </javadoc>
            <declaration name="delimiterCodePoints" type="int[]" line="98"/>
            <javadoc line="98">
                When hasSurrogates is true, delimiters are converted to code
                  points and isDelimiter(int) is used to determine if the given
                  codepoint is a delimiter.                
            </javadoc>
            <javadoc line="104">
                Set maxDelimCodePoint to the highest char in the delimiter set.                
            </javadoc>
            <method name="setMaxDelimCodePoint" type="void" line="107">
                <scope line="108"/>
                <declaration name="m" type="int" line="112"/>
                <declaration name="c" type="int" line="113"/>
                <declaration name="count" type="int" line="114"/>
                <scope line="115">
                    <scope line="117"/>
                </scope>
                <scope line="125">
                    <scope line="127"/>
                </scope>
            </method>
            <javadoc line="133">
                Constructs a string tokenizer for the specified string. All
                  characters in the &lt;code&gt;delim&lt;/code&gt; argument are the delimiters
                  for separating tokens.
                  &lt;p&gt;
                  If the &lt;code&gt;returnDelims&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;, then
                  the delimiter characters are also returned as tokens. Each
                  delimiter is returned as a string of length one. If the flag is
                  &lt;code&gt;false&lt;/code&gt;, the delimiter characters are skipped and only
                  serve as separators between tokens.
                  &lt;p&gt;
                  Note that if &lt;tt&gt;delim&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this constructor does
                  not throw an exception. However, trying to invoke other methods on the
                  resulting &lt;tt&gt;StringTokenizer&lt;/tt&gt; may result in a
                  &lt;tt&gt;NullPointerException&lt;/tt&gt;.                
                <param>
                    str            a string to be parsed.                    
                </param>
                <param>
                    delim          the delimiters.                    
                </param>
                <param>
                    returnDelims   flag indicating whether to return the delimiters
                      as tokens.                    
                </param>
                <exception>
                    NullPointerException if str is <CODE>null</CODE>                    
                </exception>
            </javadoc>
            <method name="StringTokenizer" type="constructor" line="154">
                <params>
                    <param name="str" type="String"/>
                    <param name="delim" type="String"/>
                    <param name="returnDelims" type="boolean"/>
                </params>
            </method>
            <javadoc line="164">
                Constructs a string tokenizer for the specified string. The
                  characters in the &lt;code&gt;delim&lt;/code&gt; argument are the delimiters
                  for separating tokens. Delimiter characters themselves will not
                  be treated as tokens.
                  &lt;p&gt;
                  Note that if &lt;tt&gt;delim&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this constructor does
                  not throw an exception. However, trying to invoke other methods on the
                  resulting &lt;tt&gt;StringTokenizer&lt;/tt&gt; may result in a
                  &lt;tt&gt;NullPointerException&lt;/tt&gt;.                
                <param>
                    str     a string to be parsed.                    
                </param>
                <param>
                    delim   the delimiters.                    
                </param>
                <exception>
                    NullPointerException if str is <CODE>null</CODE>                    
                </exception>
            </javadoc>
            <method name="StringTokenizer" type="constructor" line="178">
                <params>
                    <param name="str" type="String"/>
                    <param name="delim" type="String"/>
                </params>
            </method>
            <javadoc line="181">
                Constructs a string tokenizer for the specified string. The
                  tokenizer uses the default delimiter set, which is
                  &lt;code&gt;&quot;&amp;nbsp;&amp;#92;t&amp;#92;n&amp;#92;r&amp;#92;f&quot;&lt;/code&gt;: the space character,
                  the tab character, the newline character, the carriage-return character,
                  and the form-feed character. Delimiter characters themselves will
                  not be treated as tokens.                
                <param>
                    str   a string to be parsed.                    
                </param>
                <exception>
                    NullPointerException if str is <CODE>null</CODE>                    
                </exception>
            </javadoc>
            <method name="StringTokenizer" type="constructor" line="191">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="194">
                Skips delimiters starting from the specified position. If retDelims
                  is false, returns the index of the first non-delimiter character at or
                  after startPos. If retDelims is true, startPos is returned.                
            </javadoc>
            <method name="skipDelimiters" type="int" line="199">
                <params>
                    <param name="startPos" type="int"/>
                </params>
                <declaration name="position" type="int" line="201"/>
                <scope line="202">
                    <scope line="203">
                        <declaration name="c" type="char" line="204"/>
                    </scope>
                    <scope line="208">
                        <declaration name="c" type="int" line="209"/>
                        <scope line="210"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="218">
                Skips ahead from startPos and returns the index of the next delimiter
                  character encountered, or maxPosition if no such delimiter is found.                
            </javadoc>
            <method name="scanToken" type="int" line="222">
                <params>
                    <param name="startPos" type="int"/>
                </params>
                <declaration name="position" type="int" line="223"/>
                <scope line="224">
                    <scope line="225">
                        <declaration name="c" type="char" line="226"/>
                    </scope>
                    <scope line="230">
                        <declaration name="c" type="int" line="231"/>
                    </scope>
                </scope>
                <scope line="236">
                    <scope line="237">
                        <declaration name="c" type="char" line="238"/>
                    </scope>
                    <scope line="241">
                        <declaration name="c" type="int" line="242"/>
                    </scope>
                </scope>
            </method>
            <method name="isDelimiter" type="boolean" line="248">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <scope line="249">
                    <scope line="250"/>
                </scope>
            </method>
            <javadoc line="256">
                Tests if there are more tokens available from this tokenizer&apos;s string.
                  If this method returns &lt;tt&gt;true&lt;/tt&gt;, then a subsequent call to
                  &lt;tt&gt;nextToken&lt;/tt&gt; with no argument will successfully return a token.                
                <return>
                    <code>true</code> if and only if there is at least one token
                      in the string after the current position; <code>false</code>
                      otherwise.                    
                </return>
            </javadoc>
            <method name="hasMoreTokens" type="boolean" line="264"/>
            <javadoc line="268">
                Returns the next token from this string tokenizer.                
                <return>
                    the next token from this string tokenizer.                    
                </return>
                <exception>
                    NoSuchElementException  if there are no more tokens in this
                      tokenizer's string.                    
                </exception>
            </javadoc>
            <method name="nextToken" type="String" line="274">
                <declaration name="start" type="int" line="279"/>
            </method>
            <javadoc line="283">
                Returns the next token in this string tokenizer&apos;s string. First,
                  the set of characters considered to be delimiters by this
                  &lt;tt&gt;StringTokenizer&lt;/tt&gt; object is changed to be the characters in
                  the string &lt;tt&gt;delim&lt;/tt&gt;. Then the next token in the string
                  after the current position is returned. The current position is
                  advanced beyond the recognized token.  The new delimiter set
                  remains the default after this call.                
                <param>
                    delim   the new delimiters.                    
                </param>
                <return>
                    the next token, after switching to the new delimiter set.                    
                </return>
                <exception>
                    NoSuchElementException  if there are no more tokens in this
                      tokenizer's string.                    
                </exception>
                <exception>
                    NullPointerException if delim is <CODE>null</CODE>                    
                </exception>
            </javadoc>
            <method name="nextToken" type="String" line="297">
                <params>
                    <param name="delim" type="String"/>
                </params>
            </method>
            <javadoc line="303">
                Returns the same value as the &lt;code&gt;hasMoreTokens&lt;/code&gt;
                  method. It exists so that this class can implement the
                  &lt;code&gt;Enumeration&lt;/code&gt; interface.                
                <return>
                    <code>true</code> if there are more tokens;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.util.Enumeration                    
                </see>
                <see>
                    java.util.StringTokenizer#hasMoreTokens()                    
                </see>
            </javadoc>
            <method name="hasMoreElements" type="boolean" line="312"/>
            <javadoc line="315">
                Returns the same value as the &lt;code&gt;nextToken&lt;/code&gt; method,
                  except that its declared return value is &lt;code&gt;Object&lt;/code&gt; rather than
                  &lt;code&gt;String&lt;/code&gt;. It exists so that this class can implement the
                  &lt;code&gt;Enumeration&lt;/code&gt; interface.                
                <return>
                    the next token in the string.                    
                </return>
                <exception>
                    NoSuchElementException  if there are no more tokens in this
                      tokenizer's string.                    
                </exception>
                <see>
                    java.util.Enumeration                    
                </see>
                <see>
                    java.util.StringTokenizer#nextToken()                    
                </see>
            </javadoc>
            <method name="nextElement" type="Object" line="326"/>
            <javadoc line="329">
                Calculates the number of times that this tokenizer&apos;s
                  &lt;code&gt;nextToken&lt;/code&gt; method can be called before it generates an
                  exception. The current position is not advanced.                
                <return>
                    the number of tokens remaining in the string using the current
                      delimiter set.                    
                </return>
                <see>
                    java.util.StringTokenizer#nextToken()                    
                </see>
            </javadoc>
            <method name="countTokens" type="int" line="337">
                <declaration name="count" type="int" line="338"/>
                <declaration name="currpos" type="int" line="339"/>
                <scope line="340"/>
            </method>
        </class>
    </source>