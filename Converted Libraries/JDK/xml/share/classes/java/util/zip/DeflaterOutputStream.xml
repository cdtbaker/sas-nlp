<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.FilterOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <class name="DeflaterOutputStream" line="6">
            <extends class="FilterOutputStream"/>
            <javadoc line="6">
                This class implements an output stream filter for compressing data in
                  the &quot;deflate&quot; compression format. It is also used as the basis for other
                  types of compression filters, such as GZIPOutputStream.                
                <see>
                    Deflater                    
                </see>
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="def" type="Deflater" line="14"/>
            <javadoc line="14">
                Compressor for this stream.                
            </javadoc>
            <declaration name="buf" type="byte[]" line="18"/>
            <javadoc line="18">
                Output buffer for writing compressed data.                
            </javadoc>
            <declaration name="closed" type="boolean" line="22"/>
            <javadoc line="22">
                Indicates that the stream has been closed.                
            </javadoc>
            <declaration name="syncFlush" type="boolean" line="26"/>
            <javadoc line="27">
                Creates a new output stream with the specified compressor,
                  buffer size and flush mode.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    def the compressor ("deflater")                    
                </param>
                <param>
                    size the output buffer size                    
                </param>
                <param>
                    syncFlushif {@code true} the {@link #flush()} method of this
                      instance flushes the compressor with flush mode{@link Deflater#SYNC_FLUSH} before flushing the output
                      stream, otherwise only flushes the output stream                    
                </param>
                <throws>
                    IllegalArgumentException if size is <= 0                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="DeflaterOutputStream" type="constructor" line="39">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="def" type="Deflater"/>
                    <param name="size" type="int"/>
                    <param name="syncFlush" type="boolean"/>
                </params>
                <scope line="41"/>
                <scope line="44"/>
            </method>
            <javadoc line="51">
                Creates a new output stream with the specified compressor and
                  buffer size.
                  &lt;p&gt;The new output stream instance is created as if by invoking
                  the 4-argument constructor DeflaterOutputStream(out, def, size, false).                
                <param>
                    out the output stream                    
                </param>
                <param>
                    def the compressor ("deflater")                    
                </param>
                <param>
                    size the output buffer size                    
                </param>
                <exception>
                    IllegalArgumentException if size is <= 0                    
                </exception>
            </javadoc>
            <method name="DeflaterOutputStream" type="constructor" line="61">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="def" type="Deflater"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="64">
                Creates a new output stream with the specified compressor, flush
                  mode and a default buffer size.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    def the compressor ("deflater")                    
                </param>
                <param>
                    syncFlushif {@code true} the {@link #flush()} method of this
                      instance flushes the compressor with flush mode{@link Deflater#SYNC_FLUSH} before flushing the output
                      stream, otherwise only flushes the output stream                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="DeflaterOutputStream" type="constructor" line="74">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="def" type="Deflater"/>
                    <param name="syncFlush" type="boolean"/>
                </params>
            </method>
            <javadoc line="77">
                Creates a new output stream with the specified compressor and
                  a default buffer size.
                  &lt;p&gt;The new output stream instance is created as if by invoking
                  the 3-argument constructor DeflaterOutputStream(out, def, false).                
                <param>
                    out the output stream                    
                </param>
                <param>
                    def the compressor ("deflater")                    
                </param>
            </javadoc>
            <method name="DeflaterOutputStream" type="constructor" line="85">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="def" type="Deflater"/>
                </params>
            </method>
            <declaration name="usesDefaultDeflater" type="boolean" line="88"/>
            <javadoc line="89">
                Creates a new output stream with a default compressor, a default
                  buffer size and the specified flush mode.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    syncFlushif {@code true} the {@link #flush()} method of this
                      instance flushes the compressor with flush mode{@link Deflater#SYNC_FLUSH} before flushing the output
                      stream, otherwise only flushes the output stream                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="DeflaterOutputStream" type="constructor" line="98">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="syncFlush" type="boolean"/>
                </params>
            </method>
            <javadoc line="102">
                Creates a new output stream with a default compressor and buffer size.
                  &lt;p&gt;The new output stream instance is created as if by invoking
                  the 2-argument constructor DeflaterOutputStream(out, false).                
                <param>
                    out the output stream                    
                </param>
            </javadoc>
            <method name="DeflaterOutputStream" type="constructor" line="108">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="112">
                Writes a byte to the compressed output stream. This method will
                  block until the byte can be written.                
                <param>
                    b the byte to be written                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="118">
                <params>
                    <param name="b" type="int"/>
                </params>
                <declaration name="buf" type="byte[]" line="119"/>
            </method>
            <javadoc line="123">
                Writes an array of bytes to the compressed output stream. This
                  method will block until all the bytes are written.                
                <param>
                    b the data to be written                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the length of the data                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="131">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="132"/>
                <scope line="135"/>
                <scope line="138"/>
                <scope line="141">
                    <scope line="143"/>
                </scope>
            </method>
            <javadoc line="148">
                Finishes writing compressed data to the output stream without closing
                  the underlying stream. Use this method when applying multiple filters
                  in succession to the same output stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="finish" type="void" line="154">
                <scope line="155">
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="162">
                Writes remaining compressed data to the output stream and closes the
                  underlying stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="167">
                <scope line="168"/>
            </method>
            <javadoc line="175">
                Writes next block of compressed data to the output stream.                
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
            </javadoc>
            <method name="deflate" type="void" line="179">
                <declaration name="len" type="int" line="180"/>
                <scope line="181"/>
            </method>
            <javadoc line="185">
                Flushes the compressed output stream.
                  If {@link #DeflaterOutputStream(OutputStream,Deflater,int,boolean)syncFlush} is {@code true} when this compressed output stream is
                  constructed, this method first flushes the underlying {@code compressor}with the flush mode {@link Deflater#SYNC_FLUSH} to force
                  all pending data to be flushed out to the output stream and then
                  flushes the output stream. Otherwise this method only flushes the
                  output stream without flushing the {@code compressor}.                
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="flush" type="void" line="195">
                <scope line="196">
                    <declaration name="len" type="int" line="197"/>
                    <scope line="198"/>
                </scope>
            </method>
        </class>
    </source>