<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.FilterOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <class name="InflaterOutputStream" line="32">
            <extends class="FilterOutputStream"/>
            <javadoc line="32">
                Implements an output stream filter for uncompressing data stored in the
                  &quot;deflate&quot; compression format.                
                <since>
                    1.6                    
                </since>
                <author>
                    David R Tribble (david@tribble.com)                    
                </author>
                <see>
                    InflaterInputStream                    
                </see>
                <see>
                    DeflaterInputStream                    
                </see>
                <see>
                    DeflaterOutputStream                    
                </see>
            </javadoc>
            <declaration name="inf" type="Inflater" line="45"/>
            <javadoc line="45">
                Decompressor for this stream.                
            </javadoc>
            <declaration name="buf" type="byte[]" line="48"/>
            <javadoc line="48">
                Output buffer for writing uncompressed data.                
            </javadoc>
            <declaration name="wbuf" type="byte[]" line="51"/>
            <javadoc line="51">
                Temporary write buffer.                
            </javadoc>
            <declaration name="usesDefaultInflater" type="boolean" line="54"/>
            <javadoc line="54">
                Default decompressor is used.                
            </javadoc>
            <declaration name="closed" type="boolean" line="57"/>
            <javadoc line="57">
                true iff {@link #close()} has been called.                
            </javadoc>
            <javadoc line="60">
                Checks to make sure that this stream has not been closed.                
            </javadoc>
            <method name="ensureOpen" type="void" line="63">
                <scope line="64"/>
            </method>
            <javadoc line="69">
                Creates a new output stream with a default decompressor and buffer
                  size.                
                <param>
                    out output stream to write the uncompressed data to                    
                </param>
                <throws>
                    NullPointerException if {@code out} is null                    
                </throws>
            </javadoc>
            <method name="InflaterOutputStream" type="constructor" line="76">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="81">
                Creates a new output stream with the specified decompressor and a
                  default buffer size.                
                <param>
                    out output stream to write the uncompressed data to                    
                </param>
                <param>
                    infl decompressor ("inflater") for this stream                    
                </param>
                <throws>
                    NullPointerException if {@code out} or {@code infl} is null                    
                </throws>
            </javadoc>
            <method name="InflaterOutputStream" type="constructor" line="89">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="infl" type="Inflater"/>
                </params>
            </method>
            <javadoc line="93">
                Creates a new output stream with the specified decompressor and
                  buffer size.                
                <param>
                    out output stream to write the uncompressed data to                    
                </param>
                <param>
                    infl decompressor ("inflater") for this stream                    
                </param>
                <param>
                    bufLen decompression buffer size                    
                </param>
                <throws>
                    IllegalArgumentException if {@code bufLen} is <= 0                    
                </throws>
                <throws>
                    NullPointerException if {@code out} or {@code infl} is null                    
                </throws>
            </javadoc>
            <method name="InflaterOutputStream" type="constructor" line="103">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="infl" type="Inflater"/>
                    <param name="bufLen" type="int"/>
                </params>
                <comment line="106">
                    Sanity checks                    
                </comment>
                <comment line="114">
                    Initialize                    
                </comment>
            </method>
            <javadoc line="119">
                Writes any remaining uncompressed data to the output stream and closes
                  the underlying output stream.                
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="125">
                <comment line="127">
                    Complete the uncompressed output                    
                </comment>
                <scope line="126">
                    <scope line="128"/>
                    <scope line="130"/>
                </scope>
            </method>
            <javadoc line="137">
                Flushes this output stream, forcing any pending buffered output bytes to be
                  written.                
                <throws>
                    IOException if an I/O error occurs or this stream is already
                      closed                    
                </throws>
            </javadoc>
            <method name="flush" type="void" line="144">
                <comment line="147">
                    Finish decompressing and writing pending output data                    
                </comment>
                <comment line="153">
                    Decompress pending output data                    
                </comment>
                <comment line="159">
                    Write the uncompressed output data block                    
                </comment>
                <comment line="164">
                    Improperly formatted compressed (ZIP) data                    
                </comment>
                <scope line="148">
                    <scope line="149">
                        <scope line="150">
                            <declaration name="n" type="int" line="151"/>
                            <scope line="155"/>
                        </scope>
                    </scope>
                    <scope line="163">
                        <declaration name="msg" type="String" line="165"/>
                        <scope line="166"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="174">
                Finishes writing uncompressed data to the output stream without closing
                  the underlying stream.  Use this method when applying multiple filters in
                  succession to the same output stream.                
                <throws>
                    IOException if an I/O error occurs or this stream is already
                      closed                    
                </throws>
            </javadoc>
            <method name="finish" type="void" line="182">
                <comment line="185">
                    Finish decompressing and writing pending output data                    
                </comment>
                <scope line="187"/>
            </method>
            <javadoc line="192">
                Writes a byte to the uncompressed output stream.                
                <param>
                    b a single byte of compressed data to decompress and write to
                      the output stream                    
                </param>
                <throws>
                    IOException if an I/O error occurs or this stream is already
                      closed                    
                </throws>
                <throws>
                    ZipException if a compression (ZIP) format error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="201">
                <params>
                    <param name="b" type="int"/>
                </params>
                <comment line="202">
                    Write a single byte of data                    
                </comment>
            </method>
            <javadoc line="207">
                Writes an array of bytes to the uncompressed output stream.                
                <param>
                    b buffer containing compressed data to decompress and write to
                      the output stream                    
                </param>
                <param>
                    off starting offset of the compressed data within {@code b}                    
                </param>
                <param>
                    len number of bytes to decompress from {@code b}                    
                </param>
                <throws>
                    IndexOutOfBoundsException if {@code off} < 0, or if{@code len} < 0, or if {@code len} > {@code b.length - off}                    
                </throws>
                <throws>
                    IOException if an I/O error occurs or this stream is already
                      closed                    
                </throws>
                <throws>
                    NullPointerException if {@code b} is null                    
                </throws>
                <throws>
                    ZipException if a compression (ZIP) format error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="221">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="222">
                    Sanity checks                    
                </comment>
                <comment line="232">
                    Write uncompressed data to the output stream                    
                </comment>
                <comment line="237">
                    Fill the decompressor buffer with output data                    
                </comment>
                <comment line="251">
                    Decompress and write blocks of output data                    
                </comment>
                <comment line="259">
                    Check the decompressor                    
                </comment>
                <comment line="268">
                    Improperly formatted compressed (ZIP) data                    
                </comment>
                <scope line="224"/>
                <scope line="226"/>
                <scope line="228"/>
                <scope line="233">
                    <scope line="234">
                        <declaration name="n" type="int" line="235"/>
                        <scope line="238">
                            <declaration name="part" type="int" line="239"/>
                            <scope line="241"/>
                        </scope>
                        <scope line="252">
                            <scope line="254"/>
                        </scope>
                        <scope line="260"/>
                        <scope line="263"/>
                    </scope>
                </scope>
                <scope line="267">
                    <declaration name="msg" type="String" line="269"/>
                    <scope line="270"/>
                </scope>
            </method>
        </class>
    </source>