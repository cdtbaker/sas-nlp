<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.FilterOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <class name="InflaterOutputStream" line="5">
            <extends class="FilterOutputStream"/>
            <javadoc line="5">
                Implements an output stream filter for uncompressing data stored in the
                  &quot;deflate&quot; compression format.                
                <since>
                    1.6                    
                </since>
                <author>
                    David R Tribble (david@tribble.com)                    
                </author>
                <see>
                    InflaterInputStream                    
                </see>
                <see>
                    DeflaterInputStream                    
                </see>
                <see>
                    DeflaterOutputStream                    
                </see>
            </javadoc>
            <declaration name="inf" type="Inflater" line="15"/>
            <javadoc line="15">
                Decompressor for this stream.                
            </javadoc>
            <declaration name="buf" type="byte[]" line="19"/>
            <javadoc line="19">
                Output buffer for writing uncompressed data.                
            </javadoc>
            <declaration name="wbuf" type="byte[]" line="23"/>
            <javadoc line="23">
                Temporary write buffer.                
            </javadoc>
            <declaration name="usesDefaultInflater" type="boolean" line="27"/>
            <javadoc line="27">
                Default decompressor is used.                
            </javadoc>
            <declaration name="closed" type="boolean" line="31"/>
            <javadoc line="31">
                true iff {@link #close()} has been called.                
            </javadoc>
            <javadoc line="35">
                Checks to make sure that this stream has not been closed.                
            </javadoc>
            <method name="ensureOpen" type="void" line="38">
                <scope line="39"/>
            </method>
            <javadoc line="43">
                Creates a new output stream with a default decompressor and buffer
                  size.                
                <param>
                    out output stream to write the uncompressed data to                    
                </param>
                <throws>
                    NullPointerException if {@code out} is null                    
                </throws>
            </javadoc>
            <method name="InflaterOutputStream" type="constructor" line="49">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="53">
                Creates a new output stream with the specified decompressor and a
                  default buffer size.                
                <param>
                    out output stream to write the uncompressed data to                    
                </param>
                <param>
                    infl decompressor (&quot;inflater&quot;) for this stream                    
                </param>
                <throws>
                    NullPointerException if {@code out} or {@code infl} is null                    
                </throws>
            </javadoc>
            <method name="InflaterOutputStream" type="constructor" line="60">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="infl" type="Inflater"/>
                </params>
            </method>
            <javadoc line="63">
                Creates a new output stream with the specified decompressor and
                  buffer size.                
                <param>
                    out output stream to write the uncompressed data to                    
                </param>
                <param>
                    infl decompressor (&quot;inflater&quot;) for this stream                    
                </param>
                <param>
                    bufLen decompression buffer size                    
                </param>
                <throws>
                    IllegalArgumentException if {@code bufLen} is &lt;= 0                    
                </throws>
                <throws>
                    NullPointerException if {@code out} or {@code infl} is null                    
                </throws>
            </javadoc>
            <method name="InflaterOutputStream" type="constructor" line="72">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="infl" type="Inflater"/>
                    <param name="bufLen" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Writes any remaining uncompressed data to the output stream and closes
                  the underlying output stream.                
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="85">
                <scope line="86">
                    <scope line="87"/>
                    <scope line="90"/>
                </scope>
            </method>
            <javadoc line="96">
                Flushes this output stream, forcing any pending buffered output bytes to be
                  written.                
                <throws>
                    IOException if an I/O error occurs or this stream is already
                      closed                    
                </throws>
            </javadoc>
            <method name="flush" type="void" line="102">
                <scope line="104">
                    <scope line="105">
                        <scope line="106">
                            <declaration name="n" type="int" line="107"/>
                            <scope line="109"/>
                        </scope>
                    </scope>
                    <scope line="116">
                        <declaration name="msg" type="String" line="117"/>
                        <scope line="118"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="125">
                Finishes writing uncompressed data to the output stream without closing
                  the underlying stream.  Use this method when applying multiple filters in
                  succession to the same output stream.                
                <throws>
                    IOException if an I/O error occurs or this stream is already
                      closed                    
                </throws>
            </javadoc>
            <method name="finish" type="void" line="132">
                <scope line="135"/>
            </method>
            <javadoc line="139">
                Writes a byte to the uncompressed output stream.                
                <param>
                    b a single byte of compressed data to decompress and write to
                      the output stream                    
                </param>
                <throws>
                    IOException if an I/O error occurs or this stream is already
                      closed                    
                </throws>
                <throws>
                    ZipException if a compression (ZIP) format error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="147">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="151">
                Writes an array of bytes to the uncompressed output stream.                
                <param>
                    b buffer containing compressed data to decompress and write to
                      the output stream                    
                </param>
                <param>
                    off starting offset of the compressed data within {@code b}                    
                </param>
                <param>
                    len number of bytes to decompress from {@code b}                    
                </param>
                <throws>
                    IndexOutOfBoundsException if {@code off} &lt; 0, or if{@code len} &lt; 0, or if {@code len} &gt; {@code b.length - off}                    
                </throws>
                <throws>
                    IOException if an I/O error occurs or this stream is already
                      closed                    
                </throws>
                <throws>
                    NullPointerException if {@code b} is null                    
                </throws>
                <throws>
                    ZipException if a compression (ZIP) format error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="163">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
                <scope line="174">
                    <scope line="175">
                        <declaration name="n" type="int" line="176"/>
                        <scope line="177">
                            <declaration name="part" type="int" line="178"/>
                            <scope line="179"/>
                        </scope>
                        <scope line="187">
                            <scope line="189"/>
                        </scope>
                        <scope line="194"/>
                        <scope line="197"/>
                    </scope>
                </scope>
                <scope line="202">
                    <declaration name="msg" type="String" line="203"/>
                    <scope line="204"/>
                </scope>
            </method>
        </class>
    </source>