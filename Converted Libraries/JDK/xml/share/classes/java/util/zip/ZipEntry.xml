<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.util.Date"/>
        <class name="ZipEntry" line="30">
            <comment line="38">
                entry name                
            </comment>
            <comment line="39">
                modification time (in DOS time)                
            </comment>
            <comment line="40">
                crc-32 of entry data                
            </comment>
            <comment line="41">
                uncompressed size of entry data                
            </comment>
            <comment line="42">
                compressed size of entry data                
            </comment>
            <comment line="43">
                compression method                
            </comment>
            <comment line="44">
                general purpose flag                
            </comment>
            <comment line="45">
                optional extra field data for entry                
            </comment>
            <comment line="46">
                optional comment string for entry                
            </comment>
            <comment line="93">
                Creates a new un-initialized zip entry                
            </comment>
            <comment line="281">
                Converts DOS time to Java time (number of milliseconds since epoch).                
            </comment>
            <comment line="294">
                Converts Java time to DOS time.                
            </comment>
            <implements interface="ZipConstants"/>
            <implements interface="Cloneable"/>
            <javadoc line="30">
                This class is used to represent a ZIP file entry.                
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="37"/>
            <declaration name="time" type="long" line="38"/>
            <declaration name="crc" type="long" line="39"/>
            <declaration name="size" type="long" line="40"/>
            <declaration name="csize" type="long" line="41"/>
            <declaration name="method" type="int" line="42"/>
            <declaration name="flag" type="int" line="43"/>
            <declaration name="extra" type="byte[]" line="44"/>
            <declaration name="comment" type="String" line="45"/>
            <declaration name="STORED" type="int" line="47"/>
            <javadoc line="47">
                Compression method for uncompressed entries.                
            </javadoc>
            <declaration name="DEFLATED" type="int" line="52"/>
            <javadoc line="52">
                Compression method for compressed (deflated) entries.                
            </javadoc>
            <javadoc line="57">
                Creates a new zip entry with the specified name.                
                <param>
                    name the entry name                    
                </param>
                <exception>
                    NullPointerException if the entry name is null                    
                </exception>
                <exception>
                    IllegalArgumentException if the entry name is longer than
                      0xFFFF bytes                    
                </exception>
            </javadoc>
            <method name="ZipEntry" type="constructor" line="65">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="66"/>
                <scope line="69"/>
            </method>
            <javadoc line="75">
                Creates a new zip entry with fields taken from the specified
                  zip entry.                
                <param>
                    e a zip Entry object                    
                </param>
            </javadoc>
            <method name="ZipEntry" type="constructor" line="80">
                <params>
                    <param name="e" type="ZipEntry"/>
                </params>
            </method>
            <method name="ZipEntry" type="constructor" line="95"/>
            <javadoc line="97">
                Returns the name of the entry.                
                <return>
                    the name of the entry                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="101"/>
            <javadoc line="105">
                Sets the modification time of the entry.                
                <param>
                    time the entry modification time in number of milliseconds
                      since the epoch                    
                </param>
                <see>
                    #getTime()                    
                </see>
            </javadoc>
            <method name="setTime" type="void" line="111">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <javadoc line="115">
                Returns the modification time of the entry, or -1 if not specified.                
                <return>
                    the modification time of the entry, or -1 if not specified                    
                </return>
                <see>
                    #setTime(long)                    
                </see>
            </javadoc>
            <method name="getTime" type="long" line="120"/>
            <javadoc line="124">
                Sets the uncompressed size of the entry data.                
                <param>
                    size the uncompressed size in bytes                    
                </param>
                <exception>
                    IllegalArgumentException if the specified size is less
                      than 0, is greater than 0xFFFFFFFF when
                      <a href="package-summary.html#zip64">ZIP64 format</a> is not supported,
                      or is less than 0 when ZIP64 is supported                    
                </exception>
                <see>
                    #getSize()                    
                </see>
            </javadoc>
            <method name="setSize" type="void" line="133">
                <params>
                    <param name="size" type="long"/>
                </params>
                <scope line="134"/>
            </method>
            <javadoc line="140">
                Returns the uncompressed size of the entry data, or -1 if not known.                
                <return>
                    the uncompressed size of the entry data, or -1 if not known                    
                </return>
                <see>
                    #setSize(long)                    
                </see>
            </javadoc>
            <method name="getSize" type="long" line="145"/>
            <javadoc line="149">
                Returns the size of the compressed entry data, or -1 if not known.
                  In the case of a stored entry, the compressed size will be the same
                  as the uncompressed size of the entry.                
                <return>
                    the size of the compressed entry data, or -1 if not known                    
                </return>
                <see>
                    #setCompressedSize(long)                    
                </see>
            </javadoc>
            <method name="getCompressedSize" type="long" line="156"/>
            <javadoc line="160">
                Sets the size of the compressed entry data.                
                <param>
                    csize the compressed size to set to                    
                </param>
                <see>
                    #getCompressedSize()                    
                </see>
            </javadoc>
            <method name="setCompressedSize" type="void" line="165">
                <params>
                    <param name="csize" type="long"/>
                </params>
            </method>
            <javadoc line="169">
                Sets the CRC-32 checksum of the uncompressed entry data.                
                <param>
                    crc the CRC-32 value                    
                </param>
                <exception>
                    IllegalArgumentException if the specified CRC-32 value is
                      less than 0 or greater than 0xFFFFFFFF                    
                </exception>
                <see>
                    #getCrc()                    
                </see>
            </javadoc>
            <method name="setCrc" type="void" line="176">
                <params>
                    <param name="crc" type="long"/>
                </params>
                <scope line="177"/>
            </method>
            <javadoc line="183">
                Returns the CRC-32 checksum of the uncompressed entry data, or -1 if
                  not known.                
                <return>
                    the CRC-32 checksum of the uncompressed entry data, or -1 if
                      not known                    
                </return>
                <see>
                    #setCrc(long)                    
                </see>
            </javadoc>
            <method name="getCrc" type="long" line="190"/>
            <javadoc line="194">
                Sets the compression method for the entry.                
                <param>
                    method the compression method, either STORED or DEFLATED                    
                </param>
                <exception>
                    IllegalArgumentException if the specified compression
                      method is invalid                    
                </exception>
                <see>
                    #getMethod()                    
                </see>
            </javadoc>
            <method name="setMethod" type="void" line="201">
                <params>
                    <param name="method" type="int"/>
                </params>
                <scope line="202"/>
            </method>
            <javadoc line="208">
                Returns the compression method of the entry, or -1 if not specified.                
                <return>
                    the compression method of the entry, or -1 if not specified                    
                </return>
                <see>
                    #setMethod(int)                    
                </see>
            </javadoc>
            <method name="getMethod" type="int" line="213"/>
            <javadoc line="217">
                Sets the optional extra field data for the entry.                
                <param>
                    extra the extra field data bytes                    
                </param>
                <exception>
                    IllegalArgumentException if the length of the specified
                      extra field data is greater than 0xFFFF bytes                    
                </exception>
                <see>
                    #getExtra()                    
                </see>
            </javadoc>
            <method name="setExtra" type="void" line="224">
                <params>
                    <param name="extra" type="byte[]"/>
                </params>
                <scope line="225"/>
            </method>
            <javadoc line="231">
                Returns the extra field data for the entry, or null if none.                
                <return>
                    the extra field data for the entry, or null if none                    
                </return>
                <see>
                    #setExtra(byte[])                    
                </see>
            </javadoc>
            <method name="getExtra" type="byte[]" line="236"/>
            <javadoc line="240">
                Sets the optional comment string for the entry.
                  &lt;p&gt;ZIP entry comments have maximum length of 0xffff. If the length of the
                  specified comment string is greater than 0xFFFF bytes after encoding, only
                  the first 0xFFFF bytes are output to the ZIP file entry.                
                <param>
                    comment the comment string                    
                </param>
                <see>
                    #getComment()                    
                </see>
            </javadoc>
            <method name="setComment" type="void" line="251">
                <params>
                    <param name="comment" type="String"/>
                </params>
            </method>
            <javadoc line="255">
                Returns the comment string for the entry, or null if none.                
                <return>
                    the comment string for the entry, or null if none                    
                </return>
                <see>
                    #setComment(String)                    
                </see>
            </javadoc>
            <method name="getComment" type="String" line="260"/>
            <javadoc line="264">
                Returns true if this is a directory entry. A directory entry is
                  defined to be one whose name ends with a &apos;/&apos;.                
                <return>
                    true if this is a directory entry                    
                </return>
            </javadoc>
            <method name="isDirectory" type="boolean" line="269"/>
            <javadoc line="273">
                Returns a string representation of the ZIP entry.                
            </javadoc>
            <method name="toString" type="String" line="276"/>
            <method name="dosToJavaTime" type="long" line="283">
                <params>
                    <param name="dtime" type="long"/>
                </params>
                <declaration name="d" type="Date" line="284"/>
            </method>
            <method name="javaToDosTime" type="long" line="296">
                <params>
                    <param name="time" type="long"/>
                </params>
                <declaration name="d" type="Date" line="297"/>
                <declaration name="year" type="int" line="298"/>
                <scope line="299"/>
            </method>
            <javadoc line="307">
                Returns the hash code value for this entry.                
            </javadoc>
            <method name="hashCode" type="int" line="310"/>
            <javadoc line="314">
                Returns a copy of this entry.                
            </javadoc>
            <method name="clone" type="Object" line="317">
                <comment line="323">
                    This should never happen, since we are Cloneable                    
                </comment>
                <scope line="318">
                    <declaration name="e" type="ZipEntry" line="319"/>
                </scope>
                <scope line="322"/>
            </method>
        </class>
    </source>