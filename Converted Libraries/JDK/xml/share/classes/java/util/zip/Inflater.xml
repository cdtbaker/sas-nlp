<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <class name="Inflater" line="28">
            <javadoc line="28">
                This class provides support for general purpose decompression using the
                  popular ZLIB compression library. The ZLIB compression library was
                  initially developed as part of the PNG graphics standard and is not
                  protected by patents. It is fully described in the specifications at
                  the &lt;a href=&quot;package-summary.html#package_description&quot;&gt;java.util.zip
                  package description&lt;/a&gt;.
                  &lt;p&gt;The following code fragment demonstrates a trivial compression
                  and decompression of a string using &lt;tt&gt;Deflater&lt;/tt&gt; and
                  &lt;tt&gt;Inflater&lt;/tt&gt;.
                  &lt;blockquote&gt;&lt;pre&gt;
                  try {
                  // Encode a String into bytes
                  String inputString = &quot;blahblahblah\u20AC\u20AC&quot;;
                  byte[] input = inputString.getBytes(&quot;UTF-8&quot;);
                  // Compress the bytes
                  byte[] output = new byte[100];
                  Deflater compresser = new Deflater();
                  compresser.setInput(input);
                  compresser.finish();
                  int compressedDataLength = compresser.deflate(output);
                  // Decompress the bytes
                  Inflater decompresser = new Inflater();
                  decompresser.setInput(output, 0, compressedDataLength);
                  byte[] result = new byte[100];
                  int resultLength = decompresser.inflate(result);
                  decompresser.end();
                  // Decode the bytes into a String
                  String outputString = new String(result, 0, resultLength, &quot;UTF-8&quot;);
                  } catch(java.io.UnsupportedEncodingException ex) {
                  // handle
                  } catch (java.util.zip.DataFormatException ex) {
                  // handle
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <see>
                    Deflater                    
                </see>
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="zsRef" type="ZStreamRef" line="76"/>
            <declaration name="buf" type="byte[]" line="77"/>
            <declaration name="off" type="int" line="78"/>
            <declaration name="finished" type="boolean" line="79"/>
            <declaration name="needDict" type="boolean" line="80"/>
            <declaration name="defaultBuf" type="byte[]" line="82"/>
            <scope line="84"/>
            <javadoc line="89">
                Creates a new decompressor. If the parameter &apos;nowrap&apos; is true then
                  the ZLIB header and checksum fields will not be used. This provides
                  compatibility with the compression format used by both GZIP and PKZIP.
                  &lt;p&gt;
                  Note: When using the &apos;nowrap&apos; option it is also necessary to provide
                  an extra &quot;dummy&quot; byte as input. This is required by the ZLIB native
                  library in order to support certain optimizations.                
                <param>
                    nowrap if true then support GZIP compatible compression                    
                </param>
            </javadoc>
            <method name="Inflater" type="constructor" line="100">
                <params>
                    <param name="nowrap" type="boolean"/>
                </params>
            </method>
            <javadoc line="104">
                Creates a new decompressor.                
            </javadoc>
            <method name="Inflater" type="constructor" line="107"/>
            <javadoc line="111">
                Sets input data for decompression. Should be called whenever
                  needsInput() returns true indicating that more input data is
                  required.                
                <param>
                    b the input data bytes                    
                </param>
                <param>
                    off the start offset of the input data                    
                </param>
                <param>
                    len the length of the input data                    
                </param>
                <see>
                    Inflater#needsInput                    
                </see>
            </javadoc>
            <method name="setInput" type="void" line="120">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="121"/>
                <scope line="124"/>
                <scope line="127"/>
            </method>
            <javadoc line="134">
                Sets input data for decompression. Should be called whenever
                  needsInput() returns true indicating that more input data is
                  required.                
                <param>
                    b the input data bytes                    
                </param>
                <see>
                    Inflater#needsInput                    
                </see>
            </javadoc>
            <method name="setInput" type="void" line="141">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <javadoc line="145">
                Sets the preset dictionary to the given array of bytes. Should be
                  called when inflate() returns 0 and needsDictionary() returns true
                  indicating that a preset dictionary is required. The method getAdler()
                  can be used to get the Adler-32 value of the dictionary needed.                
                <param>
                    b the dictionary data bytes                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the length of the data                    
                </param>
                <see>
                    Inflater#needsDictionary                    
                </see>
                <see>
                    Inflater#getAdler                    
                </see>
            </javadoc>
            <method name="setDictionary" type="void" line="156">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="157"/>
                <scope line="160"/>
                <scope line="163"/>
            </method>
            <javadoc line="170">
                Sets the preset dictionary to the given array of bytes. Should be
                  called when inflate() returns 0 and needsDictionary() returns true
                  indicating that a preset dictionary is required. The method getAdler()
                  can be used to get the Adler-32 value of the dictionary needed.                
                <param>
                    b the dictionary data bytes                    
                </param>
                <see>
                    Inflater#needsDictionary                    
                </see>
                <see>
                    Inflater#getAdler                    
                </see>
            </javadoc>
            <method name="setDictionary" type="void" line="179">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <javadoc line="183">
                Returns the total number of bytes remaining in the input buffer.
                  This can be used to find out what bytes still remain in the input
                  buffer after decompression has finished.                
                <return>
                    the total number of bytes remaining in the input buffer                    
                </return>
            </javadoc>
            <method name="getRemaining" type="int" line="189">
                <scope line="190"/>
            </method>
            <javadoc line="195">
                Returns true if no data remains in the input buffer. This can
                  be used to determine if #setInput should be called in order
                  to provide more input.                
                <return>
                    true if no data remains in the input buffer                    
                </return>
            </javadoc>
            <method name="needsInput" type="boolean" line="201">
                <scope line="202"/>
            </method>
            <javadoc line="207">
                Returns true if a preset dictionary is needed for decompression.                
                <return>
                    true if a preset dictionary is needed for decompression                    
                </return>
                <see>
                    Inflater#setDictionary                    
                </see>
            </javadoc>
            <method name="needsDictionary" type="boolean" line="212">
                <scope line="213"/>
            </method>
            <javadoc line="218">
                Returns true if the end of the compressed data stream has been
                  reached.                
                <return>
                    true if the end of the compressed data stream has been
                      reached                    
                </return>
            </javadoc>
            <method name="finished" type="boolean" line="224">
                <scope line="225"/>
            </method>
            <javadoc line="230">
                Uncompresses bytes into specified buffer. Returns actual number
                  of bytes uncompressed. A return value of 0 indicates that
                  needsInput() or needsDictionary() should be called in order to
                  determine if more input data or a preset dictionary is required.
                  In the latter case, getAdler() can be used to get the Adler-32
                  value of the dictionary required.                
                <param>
                    b the buffer for the uncompressed data                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of uncompressed bytes                    
                </param>
                <return>
                    the actual number of uncompressed bytes                    
                </return>
                <exception>
                    DataFormatException if the compressed data format is invalid                    
                </exception>
                <see>
                    Inflater#needsInput                    
                </see>
                <see>
                    Inflater#needsDictionary                    
                </see>
            </javadoc>
            <method name="inflate" type="int" line="247">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="248"/>
                <scope line="251"/>
                <scope line="254"/>
            </method>
            <javadoc line="260">
                Uncompresses bytes into specified buffer. Returns actual number
                  of bytes uncompressed. A return value of 0 indicates that
                  needsInput() or needsDictionary() should be called in order to
                  determine if more input data or a preset dictionary is required.
                  In the latter case, getAdler() can be used to get the Adler-32
                  value of the dictionary required.                
                <param>
                    b the buffer for the uncompressed data                    
                </param>
                <return>
                    the actual number of uncompressed bytes                    
                </return>
                <exception>
                    DataFormatException if the compressed data format is invalid                    
                </exception>
                <see>
                    Inflater#needsInput                    
                </see>
                <see>
                    Inflater#needsDictionary                    
                </see>
            </javadoc>
            <method name="inflate" type="int" line="273">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <javadoc line="277">
                Returns the ADLER-32 value of the uncompressed data.                
                <return>
                    the ADLER-32 value of the uncompressed data                    
                </return>
            </javadoc>
            <method name="getAdler" type="int" line="281">
                <scope line="282"/>
            </method>
            <javadoc line="288">
                Returns the total number of compressed bytes input so far.
                  &lt;p&gt;Since the number of bytes may be greater than
                  Integer.MAX_VALUE, the {@link #getBytesRead()} method is now
                  the preferred means of obtaining this information.&lt;/p&gt;                
                <return>
                    the total number of compressed bytes input so far                    
                </return>
            </javadoc>
            <method name="getTotalIn" type="int" line="297"/>
            <javadoc line="301">
                Returns the total number of compressed bytes input so far.&lt;/p&gt;                
                <return>
                    the total (non-negative) number of compressed bytes input so far                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getBytesRead" type="long" line="307">
                <scope line="308"/>
            </method>
            <javadoc line="314">
                Returns the total number of uncompressed bytes output so far.
                  &lt;p&gt;Since the number of bytes may be greater than
                  Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now
                  the preferred means of obtaining this information.&lt;/p&gt;                
                <return>
                    the total number of uncompressed bytes output so far                    
                </return>
            </javadoc>
            <method name="getTotalOut" type="int" line="323"/>
            <javadoc line="327">
                Returns the total number of uncompressed bytes output so far.&lt;/p&gt;                
                <return>
                    the total (non-negative) number of uncompressed bytes output so far                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getBytesWritten" type="long" line="333">
                <scope line="334"/>
            </method>
            <javadoc line="340">
                Resets inflater so that a new set of input data can be processed.                
            </javadoc>
            <method name="reset" type="void" line="343">
                <scope line="344"/>
            </method>
            <javadoc line="354">
                Closes the decompressor and discards any unprocessed input.
                  This method should be called when the decompressor is no longer
                  being used, but will also be called automatically by the finalize()
                  method. Once this method is called, the behavior of the Inflater
                  object is undefined.                
            </javadoc>
            <method name="end" type="void" line="361">
                <scope line="362">
                    <declaration name="addr" type="long" line="363"/>
                    <scope line="365"/>
                </scope>
            </method>
            <javadoc line="372">
                Closes the decompressor when garbage is collected.                
            </javadoc>
            <method name="finalize" type="void" line="375"/>
            <method name="ensureOpen" type="void" line="379"/>
            <method name="ended" type="boolean" line="385">
                <scope line="386"/>
            </method>
            <method name="initIDs" type="void" line="391"/>
            <method name="init" type="long" line="392"/>
            <method name="setDictionary" type="void" line="393"/>
            <method name="inflateBytes" type="int" line="395"/>
            <method name="getAdler" type="int" line="397"/>
            <method name="getBytesRead" type="long" line="398"/>
            <method name="getBytesWritten" type="long" line="399"/>
            <method name="reset" type="void" line="400"/>
            <method name="end" type="void" line="401"/>
        </class>
    </source>