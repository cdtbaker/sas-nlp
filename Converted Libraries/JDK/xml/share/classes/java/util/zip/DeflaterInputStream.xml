<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <class name="DeflaterInputStream" line="5">
            <extends class="FilterInputStream"/>
            <javadoc line="5">
                Implements an input stream filter for compressing data in the &quot;deflate&quot;
                  compression format.                
                <since>
                    1.6                    
                </since>
                <author>
                    David R Tribble (david@tribble.com)                    
                </author>
                <see>
                    DeflaterOutputStream                    
                </see>
                <see>
                    InflaterOutputStream                    
                </see>
                <see>
                    InflaterInputStream                    
                </see>
            </javadoc>
            <declaration name="def" type="Deflater" line="15"/>
            <javadoc line="15">
                Compressor for this stream.                
            </javadoc>
            <declaration name="buf" type="byte[]" line="19"/>
            <javadoc line="19">
                Input buffer for reading compressed data.                
            </javadoc>
            <declaration name="rbuf" type="byte[]" line="23"/>
            <javadoc line="23">
                Temporary read buffer.                
            </javadoc>
            <declaration name="usesDefaultDeflater" type="boolean" line="27"/>
            <javadoc line="27">
                Default compressor is used.                
            </javadoc>
            <declaration name="reachEOF" type="boolean" line="31"/>
            <javadoc line="31">
                End of the underlying input stream has been reached.                
            </javadoc>
            <javadoc line="35">
                Check to make sure that this stream has not been closed.                
            </javadoc>
            <method name="ensureOpen" type="void" line="38">
                <scope line="39"/>
            </method>
            <javadoc line="43">
                Creates a new input stream with a default compressor and buffer
                  size.                
                <param>
                    in input stream to read the uncompressed data to                    
                </param>
                <throws>
                    NullPointerException if {@code in} is null                    
                </throws>
            </javadoc>
            <method name="DeflaterInputStream" type="constructor" line="49">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="53">
                Creates a new input stream with the specified compressor and a
                  default buffer size.                
                <param>
                    in input stream to read the uncompressed data to                    
                </param>
                <param>
                    defl compressor ("deflater") for this stream                    
                </param>
                <throws>
                    NullPointerException if {@code in} or {@code defl} is null                    
                </throws>
            </javadoc>
            <method name="DeflaterInputStream" type="constructor" line="60">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="defl" type="Deflater"/>
                </params>
            </method>
            <javadoc line="63">
                Creates a new input stream with the specified compressor and buffer
                  size.                
                <param>
                    in input stream to read the uncompressed data to                    
                </param>
                <param>
                    defl compressor ("deflater") for this stream                    
                </param>
                <param>
                    bufLen compression buffer size                    
                </param>
                <throws>
                    IllegalArgumentException if {@code bufLen} is <= 0                    
                </throws>
                <throws>
                    NullPointerException if {@code in} or {@code defl} is null                    
                </throws>
            </javadoc>
            <method name="DeflaterInputStream" type="constructor" line="72">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="defl" type="Deflater"/>
                    <param name="bufLen" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Closes this input stream and its underlying input stream, discarding
                  any pending uncompressed data.                
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="85">
                <scope line="86">
                    <scope line="87">
                        <scope line="88"/>
                    </scope>
                    <scope line="93"/>
                </scope>
            </method>
            <javadoc line="98">
                Reads a single byte of compressed data from the input stream.
                  This method will block until some input can be read and compressed.                
                <return>
                    a single byte of compressed data, or -1 if the end of the
                      uncompressed input stream is reached                    
                </return>
                <throws>
                    IOException if an I/O error occurs or if this stream is
                      already closed                    
                </throws>
            </javadoc>
            <method name="read" type="int" line="106">
                <declaration name="len" type="int" line="107"/>
            </method>
            <javadoc line="111">
                Reads compressed data into a byte array.
                  This method will block until some input can be read and compressed.                
                <param>
                    b buffer into which the data is read                    
                </param>
                <param>
                    off starting offset of the data within {@code b}                    
                </param>
                <param>
                    len maximum number of compressed bytes to read into {@code b}                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the
                      uncompressed input stream is reached                    
                </return>
                <throws>
                    IndexOutOfBoundsException  if {@code len} > {@code b.length -
                      off}                    
                </throws>
                <throws>
                    IOException if an I/O error occurs or if this input stream is
                      already closed                    
                </throws>
            </javadoc>
            <method name="read" type="int" line="124">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="132"/>
                <declaration name="cnt" type="int" line="135"/>
                <scope line="136">
                    <declaration name="n" type="int" line="137"/>
                    <scope line="138">
                        <scope line="140"/>
                        <scope line="143"/>
                    </scope>
                </scope>
                <scope line="152"/>
            </method>
            <javadoc line="158">
                Skips over and discards data from the input stream.
                  This method may block until the specified number of bytes are read and
                  skipped. &lt;em&gt;Note:&lt;/em&gt; While {@code n} is given as a {@code long},
                  the maximum number of bytes which can be skipped is{@code Integer.MAX_VALUE}.                
                <param>
                    n number of bytes to be skipped                    
                </param>
                <return>
                    the actual number of bytes skipped                    
                </return>
                <throws>
                    IOException if an I/O error occurs or if this stream is
                      already closed                    
                </throws>
            </javadoc>
            <method name="skip" type="long" line="168">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="169"/>
                <declaration name="total" type="int" line="174"/>
                <declaration name="cnt" type="long" line="175"/>
                <scope line="176">
                    <declaration name="len" type="int" line="177"/>
                    <scope line="178"/>
                </scope>
            </method>
            <javadoc line="186">
                Returns 0 after EOF has been reached, otherwise always return 1.
                  &lt;p&gt;
                  Programs should not count on this method to return the actual number
                  of bytes that could be read without blocking                
                <return>
                    zero after the end of the underlying input stream has been
                      reached, otherwise always returns 1                    
                </return>
                <throws>
                    IOException if an I/O error occurs or if this stream is
                      already closed                    
                </throws>
            </javadoc>
            <method name="available" type="int" line="196">
                <scope line="198"/>
            </method>
            <javadoc line="203">
                Always returns {@code false} because this input stream does not support
                  the {@link #mark mark()} and {@link #reset reset()} methods.                
                <return>
                    false, always                    
                </return>
            </javadoc>
            <method name="markSupported" type="boolean" line="208"/>
            <javadoc line="211">
                &lt;i&gt;This operation is not supported&lt;/i&gt;.                
                <param>
                    limit maximum bytes that can be read before invalidating the position marker                    
                </param>
            </javadoc>
            <method name="mark" type="void" line="215">
                <params>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <javadoc line="217">
                &lt;i&gt;This operation is not supported&lt;/i&gt;.                
                <throws>
                    IOException always thrown                    
                </throws>
            </javadoc>
            <method name="reset" type="void" line="221"/>
        </class>
    </source>