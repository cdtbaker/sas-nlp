<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.PushbackInputStream"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.StandardCharsets"/>
        <import package="java.util.zip.ZipConstants64"/>
        <class name="ZipInputStream" line="9">
            <extends class="InflaterInputStream"/>
            <implements interface="ZipConstants"/>
            <javadoc line="9">
                This class implements an input stream filter for reading files in the
                  ZIP file format. Includes support for both compressed and uncompressed
                  entries.                
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="entry" type="ZipEntry" line="16"/>
            <declaration name="flag" type="int" line="17"/>
            <declaration name="crc" type="CRC32" line="18"/>
            <declaration name="remaining" type="long" line="19"/>
            <declaration name="tmpbuf" type="byte[]" line="20"/>
            <declaration name="STORED" type="int" line="21"/>
            <declaration name="DEFLATED" type="int" line="22"/>
            <declaration name="closed" type="boolean" line="23"/>
            <declaration name="entryEOF" type="boolean" line="24"/>
            <declaration name="zc" type="ZipCoder" line="25"/>
            <javadoc line="26">
                Check to make sure that this stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="29">
                <scope line="30"/>
            </method>
            <javadoc line="34">
                Creates a new ZIP input stream.
                  &lt;p&gt;The UTF-8 {@link java.nio.charset.Charset charset} is used to
                  decode the entry names.                
                <param>
                    in the actual input stream                    
                </param>
            </javadoc>
            <method name="ZipInputStream" type="constructor" line="40">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="43">
                Creates a new ZIP input stream.                
                <param>
                    in the actual input stream                    
                </param>
                <param>
                    charsetThe {@linkplain java.nio.charset.Charset charset} to be
                      used to decode the ZIP entry name (ignored if the
                      &lt;a href=&quot;package-summary.html#lang_encoding&quot;&gt; language
                      encoding bit&lt;/a&gt; of the ZIP entry&apos;s general purpose bit
                      flag is set).                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ZipInputStream" type="constructor" line="53">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="charset" type="Charset"/>
                </params>
                <scope line="56"/>
            </method>
            <javadoc line="62">
                Reads the next ZIP file entry and positions the stream at the
                  beginning of the entry data.                
                <return>
                    the next ZIP file entry, or null if there are no more entries                    
                </return>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="getNextEntry" type="ZipEntry" line="69">
                <scope line="71"/>
                <scope line="76"/>
                <scope line="79"/>
            </method>
            <javadoc line="85">
                Closes the current ZIP entry and positions the stream for reading the
                  next entry.                
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="closeEntry" type="void" line="91"/>
            <javadoc line="96">
                Returns 0 after EOF has reached for the current entry data,
                  otherwise always return 1.
                  &lt;p&gt;
                  Programs should not count on this method to return the actual number
                  of bytes that could be read without blocking.                
                <return>
                    1 before EOF and 0 after EOF has reached for current entry.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="available" type="int" line="105">
                <scope line="107"/>
                <scope line="110"/>
            </method>
            <javadoc line="114">
                Reads from the current ZIP entry into an array of bytes.
                  If &lt;code&gt;len&lt;/code&gt; is not zero, the method
                  blocks until some input is available; otherwise, no
                  bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset in the destination array &lt;code&gt;b&lt;/code&gt;                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the
                      entry is reached                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;off&lt;/code&gt; is negative,
                      &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than
                      &lt;code&gt;b.length - off&lt;/code&gt;                    
                </exception>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="131">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="133"/>
                <scope line="136"/>
                <scope line="139"/>
                <scope line="145"/>
                <scope line="150"/>
                <scope line="155"/>
                <scope line="160"/>
                <scope line="164"/>
                <scope line="169"/>
            </method>
            <javadoc line="177">
                Skips specified number of bytes in the current ZIP entry.                
                <param>
                    n the number of bytes to skip                    
                </param>
                <return>
                    the actual number of bytes skipped                    
                </return>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <exception>
                    IllegalArgumentException if n &lt; 0                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="185">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="186"/>
                <declaration name="max" type="int" line="190"/>
                <declaration name="total" type="int" line="191"/>
                <scope line="192">
                    <declaration name="len" type="int" line="193"/>
                    <scope line="194"/>
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="206">
                Closes this input stream and releases any system resources associated
                  with the stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="211">
                <scope line="212"/>
            </method>
            <declaration name="b" type="byte[]" line="217"/>
            <method name="readLOC" type="ZipEntry" line="218">
                <scope line="219"/>
                <scope line="222"/>
                <scope line="225"/>
                <declaration name="len" type="int" line="229"/>
                <declaration name="blen" type="int" line="230"/>
                <scope line="231"/>
                <declaration name="e" type="ZipEntry" line="237"/>
                <scope line="238"/>
                <scope line="243">
                    <scope line="244"/>
                </scope>
                <scope line="248"/>
                <scope line="254">
                    <declaration name="bb" type="byte[]" line="255"/>
                    <scope line="258">
                        <declaration name="off" type="int" line="259"/>
                        <scope line="260">
                            <declaration name="sz" type="int" line="261"/>
                            <scope line="262">
                                <scope line="264"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="277">
                Creates a new &lt;code&gt;ZipEntry&lt;/code&gt; object for the specified
                  entry name.                
                <param>
                    name the ZIP file entry name                    
                </param>
                <return>
                    the ZipEntry just created                    
                </return>
            </javadoc>
            <method name="createZipEntry" type="ZipEntry" line="283">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="readEnd" type="void" line="286">
                <params>
                    <param name="e" type="ZipEntry"/>
                </params>
                <declaration name="n" type="int" line="287"/>
                <scope line="288"/>
                <scope line="291">
                    <scope line="292">
                        <declaration name="sig" type="long" line="294"/>
                        <scope line="295"/>
                        <scope line="301"/>
                    </scope>
                    <scope line="307">
                        <declaration name="sig" type="long" line="309"/>
                        <scope line="310"/>
                        <scope line="316"/>
                    </scope>
                </scope>
                <scope line="323"/>
                <scope line="326"/>
                <scope line="329"/>
            </method>
            <method name="readFully" type="void" line="333">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="334">
                    <declaration name="n" type="int" line="335"/>
                    <scope line="336"/>
                </scope>
            </method>
            <method name="get16" type="int" line="343">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="get32" type="long" line="346">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="get64" type="long" line="349">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                </params>
            </method>
        </class>
    </source>