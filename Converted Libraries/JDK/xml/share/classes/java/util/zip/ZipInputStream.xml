<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.PushbackInputStream"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.StandardCharsets"/>
        <import package="java.util.zip.ZipConstants64"/>
        <class name="ZipInputStream" line="36">
            <extends class="InflaterInputStream"/>
            <comment line="56">
                this flag is set to true after EOF has reached for
                 one entry                
            </comment>
            <comment line="273">
                Reads local file (LOC) header for next entry.                
            </comment>
            <comment line="361">
                Reads end of deflated entry as well as EXT descriptor if present.                
            </comment>
            <comment line="420">
                Reads bytes, blocking until all bytes are read.                
            </comment>
            <comment line="434">
                Fetches unsigned 16-bit value from byte array at specified offset.
                 The bytes are assumed to be in Intel (little-endian) byte order.                
            </comment>
            <comment line="442">
                Fetches unsigned 32-bit value from byte array at specified offset.
                 The bytes are assumed to be in Intel (little-endian) byte order.                
            </comment>
            <comment line="450">
                Fetches signed 64-bit value from byte array at specified offset.
                 The bytes are assumed to be in Intel (little-endian) byte order.                
            </comment>
            <implements interface="ZipConstants"/>
            <javadoc line="36">
                This class implements an input stream filter for reading files in the
                  ZIP file format. Includes support for both compressed and uncompressed
                  entries.                
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="entry" type="ZipEntry" line="45"/>
            <declaration name="flag" type="int" line="46"/>
            <declaration name="crc" type="CRC32" line="47"/>
            <declaration name="remaining" type="long" line="48"/>
            <declaration name="tmpbuf" type="byte[]" line="49"/>
            <declaration name="STORED" type="int" line="51"/>
            <declaration name="DEFLATED" type="int" line="52"/>
            <declaration name="closed" type="boolean" line="54"/>
            <declaration name="entryEOF" type="boolean" line="57"/>
            <declaration name="zc" type="ZipCoder" line="59"/>
            <javadoc line="61">
                Check to make sure that this stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="64">
                <scope line="65"/>
            </method>
            <javadoc line="70">
                Creates a new ZIP input stream.
                  &lt;p&gt;The UTF-8 {@link java.nio.charset.Charset charset} is used to
                  decode the entry names.                
                <param>
                    in the actual input stream                    
                </param>
            </javadoc>
            <method name="ZipInputStream" type="constructor" line="78">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="82">
                Creates a new ZIP input stream.                
                <param>
                    in the actual input stream                    
                </param>
                <param>
                    charsetThe {@linkplain java.nio.charset.Charset charset} to be
                      used to decode the ZIP entry name (ignored if the
                      <a href="package-summary.html#lang_encoding"> language
                      encoding bit</a> of the ZIP entry's general purpose bit
                      flag is set).                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ZipInputStream" type="constructor" line="96">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="charset" type="Charset"/>
                </params>
                <scope line="99"/>
            </method>
            <javadoc line="107">
                Reads the next ZIP file entry and positions the stream at the
                  beginning of the entry data.                
                <return>
                    the next ZIP file entry, or null if there are no more entries                    
                </return>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="getNextEntry" type="ZipEntry" line="114">
                <scope line="116"/>
                <scope line="121"/>
                <scope line="124"/>
            </method>
            <javadoc line="131">
                Closes the current ZIP entry and positions the stream for reading the
                  next entry.                
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="closeEntry" type="void" line="137"/>
            <javadoc line="143">
                Returns 0 after EOF has reached for the current entry data,
                  otherwise always return 1.
                  &lt;p&gt;
                  Programs should not count on this method to return the actual number
                  of bytes that could be read without blocking.                
                <return>
                    1 before EOF and 0 after EOF has reached for current entry.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="available" type="int" line="154">
                <scope line="156"/>
                <scope line="158"/>
            </method>
            <javadoc line="163">
                Reads from the current ZIP entry into an array of bytes.
                  If &lt;code&gt;len&lt;/code&gt; is not zero, the method
                  blocks until some input is available; otherwise, no
                  bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset in the destination array <code>b</code>                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the
                      entry is reached                    
                </return>
                <exception>
                    NullPointerException if <code>b</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>b.length - off</code>                    
                </exception>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="180">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="182"/>
                <scope line="184"/>
                <scope line="188"/>
                <scope line="194"/>
                <scope line="198"/>
                <scope line="203"/>
                <scope line="208"/>
                <scope line="212"/>
                <scope line="217"/>
            </method>
            <javadoc line="228">
                Skips specified number of bytes in the current ZIP entry.                
                <param>
                    n the number of bytes to skip                    
                </param>
                <return>
                    the actual number of bytes skipped                    
                </return>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <exception>
                    IllegalArgumentException if n < 0                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="236">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="237"/>
                <declaration name="max" type="int" line="241"/>
                <declaration name="total" type="int" line="242"/>
                <scope line="243">
                    <declaration name="len" type="int" line="244"/>
                    <scope line="245"/>
                    <scope line="249"/>
                </scope>
            </method>
            <javadoc line="258">
                Closes this input stream and releases any system resources associated
                  with the stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="263">
                <scope line="264"/>
            </method>
            <declaration name="b" type="byte[]" line="270"/>
            <method name="readLOC" type="ZipEntry" line="275">
                <comment line="285">
                    get flag first, we need check EFS.                    
                </comment>
                <comment line="287">
                    get the entry name and create the ZipEntry first                    
                </comment>
                <comment line="297">
                    Force to use UTF-8 if the EFS bit is ON, even the cs is NOT UTF-8                    
                </comment>
                <comment line="301">
                    now get the remaining fields for the entry                    
                </comment>
                <comment line="308">
                                        
                </comment>
                <comment line="323">
                    extra fields are in &quot;HeaderID(2)DataSize(2)Data... format                    
                </comment>
                <comment line="330">
                    LOC extra zip64 entry MUST include BOTH original and
                     compressed file size fields                    
                </comment>
                <comment line="333">
                    Invalid zip64 extra fields, simply skip. Even it&apos;s
                     rare, it&apos;s possible the entry size happens to be
                     the magic value and it &quot;accidnetly&quot; has some bytes
                     in extra match the id.                    
                </comment>
                <scope line="276"/>
                <scope line="278"/>
                <scope line="281"/>
                <declaration name="len" type="int" line="287"/>
                <declaration name="blen" type="int" line="288"/>
                <scope line="289"/>
                <declaration name="e" type="ZipEntry" line="297"/>
                <scope line="301"/>
                <scope line="306">
                    <scope line="308"/>
                </scope>
                <scope line="312"/>
                <scope line="318">
                    <declaration name="bb" type="byte[]" line="319"/>
                    <scope line="323">
                        <declaration name="off" type="int" line="324"/>
                        <scope line="325">
                            <declaration name="sz" type="int" line="326"/>
                            <scope line="327">
                                <scope line="331"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="349">
                Creates a new &lt;code&gt;ZipEntry&lt;/code&gt; object for the specified
                  entry name.                
                <param>
                    name the ZIP file entry name                    
                </param>
                <return>
                    the ZipEntry just created                    
                </return>
            </javadoc>
            <method name="createZipEntry" type="ZipEntry" line="356">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="readEnd" type="void" line="363">
                <params>
                    <param name="e" type="ZipEntry"/>
                </params>
                <comment line="370">
                                        
                </comment>
                <comment line="373">
                    ZIP64 format                    
                </comment>
                <comment line="376">
                    no EXTSIG present                    
                </comment>
                <comment line="390">
                    no EXTSIG present                    
                </comment>
                <declaration name="n" type="int" line="364"/>
                <scope line="365"/>
                <scope line="368">
                    <scope line="371">
                        <declaration name="sig" type="long" line="374"/>
                        <scope line="375"/>
                        <scope line="381"/>
                    </scope>
                    <scope line="386">
                        <declaration name="sig" type="long" line="388"/>
                        <scope line="389"/>
                        <scope line="395"/>
                    </scope>
                </scope>
                <scope line="402"/>
                <scope line="407"/>
                <scope line="412"/>
            </method>
            <method name="readFully" type="void" line="422">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="423">
                    <declaration name="n" type="int" line="424"/>
                    <scope line="425"/>
                </scope>
            </method>
            <method name="get16" type="int" line="437">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="get32" type="long" line="445">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="get64" type="long" line="453">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                </params>
            </method>
        </class>
    </source>