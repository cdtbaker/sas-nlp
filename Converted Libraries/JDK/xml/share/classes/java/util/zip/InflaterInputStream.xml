<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <class name="InflaterInputStream" line="33">
            <extends class="FilterInputStream"/>
            <comment line="60">
                this flag is set to true after EOF has reached                
            </comment>
            <javadoc line="33">
                This class implements a stream filter for uncompressing data in the
                  &quot;deflate&quot; compression format. It is also used as the basis for other
                  decompression filters, such as GZIPInputStream.                
                <see>
                    Inflater                    
                </see>
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="inf" type="Inflater" line="43"/>
            <javadoc line="43">
                Decompressor for this stream.                
            </javadoc>
            <declaration name="buf" type="byte[]" line="48"/>
            <javadoc line="48">
                Input buffer for decompression.                
            </javadoc>
            <declaration name="len" type="int" line="53"/>
            <javadoc line="53">
                Length of input buffer.                
            </javadoc>
            <declaration name="closed" type="boolean" line="58"/>
            <declaration name="reachEOF" type="boolean" line="60"/>
            <javadoc line="62">
                Check to make sure that this stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="65">
                <scope line="66"/>
            </method>
            <javadoc line="72">
                Creates a new input stream with the specified decompressor and
                  buffer size.                
                <param>
                    in the input stream                    
                </param>
                <param>
                    inf the decompressor ("inflater")                    
                </param>
                <param>
                    size the input buffer size                    
                </param>
                <exception>
                    IllegalArgumentException if size is <= 0                    
                </exception>
            </javadoc>
            <method name="InflaterInputStream" type="constructor" line="80">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="inf" type="Inflater"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="82"/>
                <scope line="84"/>
            </method>
            <javadoc line="91">
                Creates a new input stream with the specified decompressor and a
                  default buffer size.                
                <param>
                    in the input stream                    
                </param>
                <param>
                    inf the decompressor ("inflater")                    
                </param>
            </javadoc>
            <method name="InflaterInputStream" type="constructor" line="97">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="inf" type="Inflater"/>
                </params>
            </method>
            <declaration name="usesDefaultInflater" type="boolean" line="101"/>
            <javadoc line="103">
                Creates a new input stream with a default decompressor and buffer size.                
                <param>
                    in the input stream                    
                </param>
            </javadoc>
            <method name="InflaterInputStream" type="constructor" line="107">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <declaration name="singleByteBuf" type="byte[]" line="112"/>
            <javadoc line="114">
                Reads a byte of uncompressed data. This method will block until
                  enough input is available for decompression.                
                <return>
                    the byte read, or -1 if end of compressed input is reached                    
                </return>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="120"/>
            <javadoc line="125">
                Reads uncompressed data into an array of bytes. If &lt;code&gt;len&lt;/code&gt; is not
                  zero, the method will block until some input can be decompressed; otherwise,
                  no bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset in the destination array <code>b</code>                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the
                      compressed input is reached or a preset dictionary is needed                    
                </return>
                <exception>
                    NullPointerException If <code>b</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>b.length - off</code>                    
                </exception>
                <exception>
                    ZipException if a ZIP format error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="141">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="143"/>
                <scope line="145"/>
                <scope line="147"/>
                <scope line="150">
                    <declaration name="n" type="int" line="151"/>
                    <scope line="152">
                        <scope line="153"/>
                        <scope line="157"/>
                    </scope>
                </scope>
                <scope line="162">
                    <declaration name="s" type="String" line="163"/>
                </scope>
            </method>
            <javadoc line="168">
                Returns 0 after EOF has been reached, otherwise always return 1.
                  &lt;p&gt;
                  Programs should not count on this method to return the actual number
                  of bytes that could be read without blocking.                
                <return>
                    1 before EOF and 0 after EOF.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="available" type="int" line="178">
                <scope line="180"/>
                <scope line="182"/>
            </method>
            <declaration name="b" type="byte[]" line="187"/>
            <javadoc line="189">
                Skips specified number of bytes of uncompressed data.                
                <param>
                    n the number of bytes to skip                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <exception>
                    IllegalArgumentException if n < 0                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="196">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="197"/>
                <declaration name="max" type="int" line="201"/>
                <declaration name="total" type="int" line="202"/>
                <scope line="203">
                    <declaration name="len" type="int" line="204"/>
                    <scope line="205"/>
                    <scope line="209"/>
                </scope>
            </method>
            <javadoc line="218">
                Closes this input stream and releases any system resources associated
                  with the stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="223">
                <scope line="224"/>
            </method>
            <javadoc line="232">
                Fills input buffer with more data to decompress.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="fill" type="void" line="236">
                <scope line="239"/>
            </method>
            <javadoc line="245">
                Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt; and
                  &lt;code&gt;reset&lt;/code&gt; methods. The &lt;code&gt;markSupported&lt;/code&gt;
                  method of &lt;code&gt;InflaterInputStream&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    a <code>boolean</code> indicating if this stream type supports
                      the <code>mark</code> and <code>reset</code> methods.                    
                </return>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.InputStream#reset()                    
                </see>
            </javadoc>
            <method name="markSupported" type="boolean" line="256"/>
            <javadoc line="260">
                Marks the current position in this input stream.
                  &lt;p&gt; The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InflaterInputStream&lt;/code&gt;
                  does nothing.                
                <param>
                    readlimit   the maximum limit of bytes that can be read before
                      the mark position becomes invalid.                    
                </param>
                <see>
                    java.io.InputStream#reset()                    
                </see>
            </javadoc>
            <method name="mark" type="void" line="270">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="273">
                Repositions this stream to the position at the time the
                  &lt;code&gt;mark&lt;/code&gt; method was last called on this input stream.
                  &lt;p&gt; The method &lt;code&gt;reset&lt;/code&gt; for class
                  &lt;code&gt;InflaterInputStream&lt;/code&gt; does nothing except throw an
                  &lt;code&gt;IOException&lt;/code&gt;.                
                <exception>
                    IOException  if this method is invoked.                    
                </exception>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.IOException                    
                </see>
            </javadoc>
            <method name="reset" type="void" line="285"/>
        </class>
    </source>