<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.SequenceInputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <class name="GZIPInputStream" line="7">
            <extends class="InflaterInputStream"/>
            <javadoc line="7">
                This class implements a stream filter for reading compressed data in
                  the GZIP file format.                
                <see>
                    InflaterInputStream                    
                </see>
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="crc" type="CRC32" line="14"/>
            <javadoc line="14">
                CRC-32 for uncompressed data.                
            </javadoc>
            <declaration name="eos" type="boolean" line="18"/>
            <javadoc line="18">
                Indicates end of input stream.                
            </javadoc>
            <declaration name="closed" type="boolean" line="22"/>
            <javadoc line="23">
                Check to make sure that this stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="26">
                <scope line="27"/>
            </method>
            <javadoc line="31">
                Creates a new input stream with the specified buffer size.                
                <param>
                    in the input stream                    
                </param>
                <param>
                    size the input buffer size                    
                </param>
                <exception>
                    ZipException if a GZIP format error has occurred or the
                      compression method used is unsupported                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <exception>
                    IllegalArgumentException if size is &lt;= 0                    
                </exception>
            </javadoc>
            <method name="GZIPInputStream" type="constructor" line="40">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Creates a new input stream with a default buffer size.                
                <param>
                    in the input stream                    
                </param>
                <exception>
                    ZipException if a GZIP format error has occurred or the
                      compression method used is unsupported                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="GZIPInputStream" type="constructor" line="52">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="55">
                Reads uncompressed data into an array of bytes. If &lt;code&gt;len&lt;/code&gt; is not
                  zero, the method will block until some input can be decompressed; otherwise,
                  no bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.                
                <param>
                    buf the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset in the destination array &lt;code&gt;b&lt;/code&gt;                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the
                      compressed input stream is reached                    
                </return>
                <exception>
                    NullPointerException If &lt;code&gt;buf&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,
                      &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than
                      &lt;code&gt;buf.length - off&lt;/code&gt;                    
                </exception>
                <exception>
                    ZipException if the compressed input data is corrupt.                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="71">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="73"/>
                <declaration name="n" type="int" line="76"/>
                <scope line="77"/>
                <scope line="81"/>
            </method>
            <javadoc line="86">
                Closes this input stream and releases any system resources associated
                  with the stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="91">
                <scope line="92"/>
            </method>
            <declaration name="GZIP_MAGIC" type="int" line="98"/>
            <javadoc line="98">
                GZIP header magic number.                
            </javadoc>
            <declaration name="FTEXT" type="int" line="102"/>
            <declaration name="FHCRC" type="int" line="103"/>
            <declaration name="FEXTRA" type="int" line="104"/>
            <declaration name="FNAME" type="int" line="105"/>
            <declaration name="FCOMMENT" type="int" line="106"/>
            <method name="readHeader" type="int" line="107">
                <params>
                    <param name="this_in" type="InputStream"/>
                </params>
                <declaration name="in" type="CheckedInputStream" line="108"/>
                <scope line="110"/>
                <scope line="113"/>
                <declaration name="flg" type="int" line="116"/>
                <declaration name="n" type="int" line="118"/>
                <scope line="119">
                    <declaration name="m" type="int" line="120"/>
                </scope>
                <scope line="124">
                    <scope line="125"/>
                </scope>
                <scope line="130">
                    <scope line="131"/>
                </scope>
                <scope line="136">
                    <declaration name="v" type="int" line="137"/>
                    <scope line="138"/>
                </scope>
            </method>
            <method name="readTrailer" type="boolean" line="146">
                <declaration name="in" type="InputStream" line="147"/>
                <declaration name="n" type="int" line="148"/>
                <scope line="149"/>
                <scope line="153">
                    <declaration name="m" type="int" line="154"/>
                    <scope line="155"/>
                    <scope line="158"/>
                </scope>
            </method>
            <method name="readUInt" type="long" line="167">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="s" type="long" line="168"/>
            </method>
            <method name="readUShort" type="int" line="171">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="b" type="int" line="172"/>
            </method>
            <method name="readUByte" type="int" line="175">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="b" type="int" line="176"/>
                <scope line="177"/>
                <scope line="180"/>
            </method>
            <declaration name="tmpbuf" type="byte[]" line="185"/>
            <method name="skipBytes" type="void" line="186">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="187">
                    <declaration name="len" type="int" line="188"/>
                    <scope line="189"/>
                </scope>
            </method>
        </class>
    </source>