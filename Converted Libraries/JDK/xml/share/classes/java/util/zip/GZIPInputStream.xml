<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.SequenceInputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <class name="GZIPInputStream" line="34">
            <extends class="InflaterInputStream"/>
            <comment line="147">
                File header flags.                
            </comment>
            <comment line="150">
                Extra text                
            </comment>
            <comment line="151">
                Header CRC                
            </comment>
            <comment line="152">
                Extra field                
            </comment>
            <comment line="153">
                File name                
            </comment>
            <comment line="154">
                File comment                
            </comment>
            <comment line="156">
                Reads GZIP member header and returns the total byte number
                 of this member header.                
            </comment>
            <comment line="206">
                Reads GZIP member trailer and returns true if the eos
                 reached, false if there are more (concatenated gzip
                 data set)                
            </comment>
            <comment line="243">
                Reads unsigned integer in Intel byte order.                
            </comment>
            <comment line="251">
                Reads unsigned short in Intel byte order.                
            </comment>
            <comment line="259">
                Reads unsigned byte.                
            </comment>
            <comment line="277">
                Skips bytes of input data blocking until all bytes are skipped.
                 Does not assume that the input stream is capable of seeking.                
            </comment>
            <javadoc line="34">
                This class implements a stream filter for reading compressed data in
                  the GZIP file format.                
                <see>
                    InflaterInputStream                    
                </see>
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="crc" type="CRC32" line="44"/>
            <javadoc line="44">
                CRC-32 for uncompressed data.                
            </javadoc>
            <declaration name="eos" type="boolean" line="49"/>
            <javadoc line="49">
                Indicates end of input stream.                
            </javadoc>
            <declaration name="closed" type="boolean" line="54"/>
            <javadoc line="56">
                Check to make sure that this stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="59">
                <scope line="60"/>
            </method>
            <javadoc line="65">
                Creates a new input stream with the specified buffer size.                
                <param>
                    in the input stream                    
                </param>
                <param>
                    size the input buffer size                    
                </param>
                <exception>
                    ZipException if a GZIP format error has occurred or the
                      compression method used is unsupported                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
                <exception>
                    IllegalArgumentException if size is <= 0                    
                </exception>
            </javadoc>
            <method name="GZIPInputStream" type="constructor" line="75">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="81">
                Creates a new input stream with a default buffer size.                
                <param>
                    in the input stream                    
                </param>
                <exception>
                    ZipException if a GZIP format error has occurred or the
                      compression method used is unsupported                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="GZIPInputStream" type="constructor" line="89">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="93">
                Reads uncompressed data into an array of bytes. If &lt;code&gt;len&lt;/code&gt; is not
                  zero, the method will block until some input can be decompressed; otherwise,
                  no bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.                
                <param>
                    buf the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset in the destination array <code>b</code>                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the
                      compressed input stream is reached                    
                </return>
                <exception>
                    NullPointerException If <code>buf</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>buf.length - off</code>                    
                </exception>
                <exception>
                    ZipException if the compressed input data is corrupt.                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="111">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="113"/>
                <declaration name="n" type="int" line="116"/>
                <scope line="117"/>
                <scope line="122"/>
            </method>
            <javadoc line="128">
                Closes this input stream and releases any system resources associated
                  with the stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="133">
                <scope line="134"/>
            </method>
            <declaration name="GZIP_MAGIC" type="int" line="141"/>
            <javadoc line="141">
                GZIP header magic number.                
            </javadoc>
            <declaration name="FTEXT" type="int" line="149"/>
            <declaration name="FHCRC" type="int" line="150"/>
            <declaration name="FEXTRA" type="int" line="151"/>
            <declaration name="FNAME" type="int" line="152"/>
            <declaration name="FCOMMENT" type="int" line="153"/>
            <method name="readHeader" type="int" line="159">
                <params>
                    <param name="this_in" type="InputStream"/>
                </params>
                <comment line="163">
                    Check header magic                    
                </comment>
                <comment line="167">
                    Check compression method                    
                </comment>
                <comment line="171">
                    Read flags                    
                </comment>
                <comment line="173">
                    Skip MTIME, XFL, and OS fields                    
                </comment>
                <comment line="176">
                    Skip optional extra field                    
                </comment>
                <comment line="182">
                    Skip optional file name                    
                </comment>
                <comment line="188">
                    Skip optional file comment                    
                </comment>
                <comment line="194">
                    Check optional header CRC                    
                </comment>
                <declaration name="in" type="CheckedInputStream" line="160"/>
                <scope line="163"/>
                <scope line="167"/>
                <declaration name="flg" type="int" line="171"/>
                <declaration name="n" type="int" line="174"/>
                <scope line="176">
                    <declaration name="m" type="int" line="177"/>
                </scope>
                <scope line="182">
                    <scope line="183"/>
                </scope>
                <scope line="188">
                    <scope line="189"/>
                </scope>
                <scope line="194">
                    <declaration name="v" type="int" line="195"/>
                    <scope line="196"/>
                </scope>
            </method>
            <method name="readTrailer" type="boolean" line="210">
                <comment line="218">
                    Uses left-to-right evaluation order                    
                </comment>
                <comment line="220">
                    rfc1952; ISIZE is the input size modulo 2^32                    
                </comment>
                <comment line="224">
                    If there are more bytes available in &quot;in&quot; or
                     the leftover in the &quot;inf&quot; is &gt; 26 bytes:
                     this.trailer(8) + next.header.min(10) + next.trailer(8)
                     try concatenated case                    
                </comment>
                <comment line="229">
                    this.trailer                    
                </comment>
                <comment line="231">
                    next.header                    
                </comment>
                <comment line="233">
                    ignore any malformed, do nothing                    
                </comment>
                <declaration name="in" type="InputStream" line="211"/>
                <declaration name="n" type="int" line="212"/>
                <scope line="213"/>
                <scope line="227">
                    <declaration name="m" type="int" line="228"/>
                    <scope line="229"/>
                    <scope line="231"/>
                </scope>
            </method>
            <method name="readUInt" type="long" line="245">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="s" type="long" line="246"/>
            </method>
            <method name="readUShort" type="int" line="253">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="b" type="int" line="254"/>
            </method>
            <method name="readUByte" type="int" line="261">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="268">
                    Report on this.in, not argument in; see read{Header, Trailer}.                    
                </comment>
                <declaration name="b" type="int" line="262"/>
                <scope line="263"/>
                <scope line="266"/>
            </method>
            <declaration name="tmpbuf" type="byte[]" line="274"/>
            <method name="skipBytes" type="void" line="280">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="281">
                    <declaration name="len" type="int" line="282"/>
                    <scope line="283"/>
                </scope>
            </method>
        </class>
    </source>