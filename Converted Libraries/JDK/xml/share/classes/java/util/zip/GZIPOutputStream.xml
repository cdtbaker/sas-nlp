<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <class name="GZIPOutputStream" line="4">
            <extends class="DeflaterOutputStream"/>
            <javadoc line="4">
                This class implements a stream filter for writing compressed data in
                  the GZIP file format.                
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="crc" type="CRC32" line="10"/>
            <javadoc line="10">
                CRC-32 of uncompressed data.                
            </javadoc>
            <declaration name="GZIP_MAGIC" type="int" line="14"/>
            <declaration name="TRAILER_SIZE" type="int" line="15"/>
            <javadoc line="16">
                Creates a new output stream with the specified buffer size.
                  &lt;p&gt;The new output stream instance is created as if by invoking
                  the 3-argument constructor GZIPOutputStream(out, size, false).                
                <param>
                    out the output stream                    
                </param>
                <param>
                    size the output buffer size                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
                <exception>
                    IllegalArgumentException if size is &lt;= 0                    
                </exception>
            </javadoc>
            <method name="GZIPOutputStream" type="constructor" line="25">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="28">
                Creates a new output stream with the specified buffer size and
                  flush mode.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    size the output buffer size                    
                </param>
                <param>
                    syncFlushif {@code true} invocation of the inherited{@link DeflaterOutputStream#flush() flush()} method of
                      this instance flushes the compressor with flush mode{@link Deflater#SYNC_FLUSH} before flushing the output
                      stream, otherwise only flushes the output stream                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
                <exception>
                    IllegalArgumentException if size is &lt;= 0                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="GZIPOutputStream" type="constructor" line="40">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="size" type="int"/>
                    <param name="syncFlush" type="boolean"/>
                </params>
            </method>
            <javadoc line="46">
                Creates a new output stream with a default buffer size.
                  &lt;p&gt;The new output stream instance is created as if by invoking
                  the 2-argument constructor GZIPOutputStream(out, false).                
                <param>
                    out the output stream                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="GZIPOutputStream" type="constructor" line="53">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="56">
                Creates a new output stream with a default buffer size and
                  the specified flush mode.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    syncFlushif {@code true} invocation of the inherited{@link DeflaterOutputStream#flush() flush()} method of
                      this instance flushes the compressor with flush mode{@link Deflater#SYNC_FLUSH} before flushing the output
                      stream, otherwise only flushes the output stream                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="GZIPOutputStream" type="constructor" line="66">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="syncFlush" type="boolean"/>
                </params>
            </method>
            <javadoc line="69">
                Writes array of bytes to the compressed output stream. This method
                  will block until all the bytes are written.                
                <param>
                    buf the data to be written                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the length of the data                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="77">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="81">
                Finishes writing compressed data to the output stream without closing
                  the underlying stream. Use this method when applying multiple filters
                  in succession to the same output stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="finish" type="void" line="87">
                <scope line="88">
                    <scope line="90">
                        <declaration name="len" type="int" line="91"/>
                        <scope line="92"/>
                    </scope>
                    <declaration name="trailer" type="byte[]" line="100"/>
                </scope>
            </method>
            <method name="writeHeader" type="void" line="105"/>
            <method name="writeTrailer" type="void" line="108">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <method name="writeInt" type="void" line="112">
                <params>
                    <param name="i" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <method name="writeShort" type="void" line="116">
                <params>
                    <param name="s" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
        </class>
    </source>