<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <class name="GZIPOutputStream" line="31">
            <extends class="DeflaterOutputStream"/>
            <comment line="45">
                GZIP header magic number.                
            </comment>
            <comment line="50">
                Trailer size in bytes.                
            </comment>
            <comment line="180">
                Writes GZIP member header.                
            </comment>
            <comment line="198">
                Writes GZIP member trailer to a byte array, starting at a given
                 offset.                
            </comment>
            <comment line="207">
                Writes integer in Intel byte order to a byte array, starting at a
                 given offset.                
            </comment>
            <comment line="216">
                Writes short integer in Intel byte order to a byte array, starting
                 at a given offset                
            </comment>
            <javadoc line="31">
                This class implements a stream filter for writing compressed data in
                  the GZIP file format.                
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="crc" type="CRC32" line="39"/>
            <javadoc line="39">
                CRC-32 of uncompressed data.                
            </javadoc>
            <declaration name="GZIP_MAGIC" type="int" line="47"/>
            <declaration name="TRAILER_SIZE" type="int" line="53"/>
            <javadoc line="55">
                Creates a new output stream with the specified buffer size.
                  &lt;p&gt;The new output stream instance is created as if by invoking
                  the 3-argument constructor GZIPOutputStream(out, size, false).                
                <param>
                    out the output stream                    
                </param>
                <param>
                    size the output buffer size                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
                <exception>
                    IllegalArgumentException if size is <= 0                    
                </exception>
            </javadoc>
            <method name="GZIPOutputStream" type="constructor" line="67">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="71">
                Creates a new output stream with the specified buffer size and
                  flush mode.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    size the output buffer size                    
                </param>
                <param>
                    syncFlushif {@code true} invocation of the inherited{@link DeflaterOutputStream#flush() flush()} method of
                      this instance flushes the compressor with flush mode{@link Deflater#SYNC_FLUSH} before flushing the output
                      stream, otherwise only flushes the output stream                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
                <exception>
                    IllegalArgumentException if size is <= 0                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="GZIPOutputStream" type="constructor" line="90">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="size" type="int"/>
                    <param name="syncFlush" type="boolean"/>
                </params>
            </method>
            <javadoc line="100">
                Creates a new output stream with a default buffer size.
                  &lt;p&gt;The new output stream instance is created as if by invoking
                  the 2-argument constructor GZIPOutputStream(out, false).                
                <param>
                    out the output stream                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="GZIPOutputStream" type="constructor" line="109">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="113">
                Creates a new output stream with a default buffer size and
                  the specified flush mode.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    syncFlushif {@code true} invocation of the inherited{@link DeflaterOutputStream#flush() flush()} method of
                      this instance flushes the compressor with flush mode{@link Deflater#SYNC_FLUSH} before flushing the output
                      stream, otherwise only flushes the output stream                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="GZIPOutputStream" type="constructor" line="131">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="syncFlush" type="boolean"/>
                </params>
            </method>
            <javadoc line="135">
                Writes array of bytes to the compressed output stream. This method
                  will block until all the bytes are written.                
                <param>
                    buf the data to be written                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the length of the data                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="145">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="150">
                Finishes writing compressed data to the output stream without closing
                  the underlying stream. Use this method when applying multiple filters
                  in succession to the same output stream.                
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="finish" type="void" line="156">
                <comment line="162">
                    last deflater buffer. Fit trailer at the end                    
                </comment>
                <comment line="171">
                    if we can&apos;t fit the trailer at the end of the last                    
                </comment>
                <comment line="172">
                    deflater buffer, we write it separately                    
                </comment>
                <scope line="157">
                    <scope line="159">
                        <declaration name="len" type="int" line="160"/>
                        <scope line="161"/>
                    </scope>
                    <declaration name="trailer" type="byte[]" line="173"/>
                </scope>
            </method>
            <method name="writeHeader" type="void" line="182">
                <comment line="184">
                    Magic number (short)                    
                </comment>
                <comment line="185">
                    Magic number (short)                    
                </comment>
                <comment line="186">
                    Compression method (CM)                    
                </comment>
                <comment line="187">
                    Flags (FLG)                    
                </comment>
                <comment line="188">
                    Modification time MTIME (int)                    
                </comment>
                <comment line="189">
                    Modification time MTIME (int)                    
                </comment>
                <comment line="190">
                    Modification time MTIME (int)                    
                </comment>
                <comment line="191">
                    Modification time MTIME (int)                    
                </comment>
                <comment line="192">
                    Extra flags (XFLG)                    
                </comment>
                <comment line="193">
                    Operating system (OS)                    
                </comment>
            </method>
            <method name="writeTrailer" type="void" line="201">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <comment line="202">
                    CRC-32 of uncompr. data                    
                </comment>
                <comment line="203">
                    Number of uncompr. bytes                    
                </comment>
            </method>
            <method name="writeInt" type="void" line="210">
                <params>
                    <param name="i" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <method name="writeShort" type="void" line="219">
                <params>
                    <param name="s" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
        </class>
    </source>