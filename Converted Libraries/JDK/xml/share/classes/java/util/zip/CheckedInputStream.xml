<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <class name="CheckedInputStream" line="5">
            <extends class="FilterInputStream"/>
            <javadoc line="5">
                An input stream that also maintains a checksum of the data being read.
                  The checksum can then be used to verify the integrity of the input data.                
                <see>
                    Checksum                    
                </see>
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="cksum" type="Checksum" line="12"/>
            <javadoc line="13">
                Creates an input stream using the specified Checksum.                
                <param>
                    in the input stream                    
                </param>
                <param>
                    cksum the Checksum                    
                </param>
            </javadoc>
            <method name="CheckedInputStream" type="constructor" line="18">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="cksum" type="Checksum"/>
                </params>
            </method>
            <javadoc line="22">
                Reads a byte. Will block if no input is available.                
                <return>
                    the byte read, or -1 if the end of the stream is reached.                    
                </return>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="27">
                <declaration name="b" type="int" line="28"/>
                <scope line="29"/>
            </method>
            <javadoc line="34">
                Reads into an array of bytes. If &lt;code&gt;len&lt;/code&gt; is not zero, the method
                  blocks until some input is available; otherwise, no
                  bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.                
                <param>
                    buf the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset in the destination array &lt;code&gt;b&lt;/code&gt;                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end
                      of the stream is reached.                    
                </return>
                <exception>
                    NullPointerException If &lt;code&gt;buf&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,
                      &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than
                      &lt;code&gt;buf.length - off&lt;/code&gt;                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="49">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="51"/>
            </method>
            <javadoc line="56">
                Skips specified number of bytes of input.                
                <param>
                    n the number of bytes to skip                    
                </param>
                <return>
                    the actual number of bytes skipped                    
                </return>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="62">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="buf" type="byte[]" line="63"/>
                <declaration name="total" type="long" line="64"/>
                <scope line="65">
                    <declaration name="len" type="long" line="66"/>
                    <scope line="68"/>
                </scope>
            </method>
            <javadoc line="75">
                Returns the Checksum for this input stream.                
                <return>
                    the Checksum value                    
                </return>
            </javadoc>
            <method name="getChecksum" type="Checksum" line="79"/>
        </class>
    </source>