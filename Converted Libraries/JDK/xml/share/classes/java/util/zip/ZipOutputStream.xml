<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.StandardCharsets"/>
        <import package="java.util.Vector"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.zip.ZipConstants64"/>
        <class name="ZipOutputStream" line="9">
            <extends class="DeflaterOutputStream"/>
            <implements interface="ZipConstants"/>
            <javadoc line="9">
                This class implements an output stream filter for writing files in the
                  ZIP file format. Includes support for both compressed and uncompressed
                  entries.                
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <class name="XEntry" line="16">
                <declaration name="entry" type="ZipEntry" line="17"/>
                <declaration name="offset" type="long" line="18"/>
                <method name="XEntry" type="constructor" line="19">
                    <params>
                        <param name="entry" type="ZipEntry"/>
                        <param name="offset" type="long"/>
                    </params>
                </method>
            </class>
            <declaration name="current" type="XEntry" line="24"/>
            <declaration name="xentries" type="Vector&amp;lt;XEntry&amp;gt;" line="25"/>
            <declaration name="names" type="HashSet&amp;lt;String&amp;gt;" line="26"/>
            <declaration name="crc" type="CRC32" line="27"/>
            <declaration name="written" type="long" line="28"/>
            <declaration name="locoff" type="long" line="29"/>
            <declaration name="comment" type="byte[]" line="30"/>
            <declaration name="method" type="int" line="31"/>
            <declaration name="finished" type="boolean" line="32"/>
            <declaration name="closed" type="boolean" line="33"/>
            <declaration name="zc" type="ZipCoder" line="34"/>
            <method name="version" type="int" line="35">
                <params>
                    <param name="e" type="ZipEntry"/>
                </params>
            </method>
            <javadoc line="45">
                Checks to make sure that this stream has not been closed.                
            </javadoc>
            <method name="ensureOpen" type="void" line="48">
                <scope line="49"/>
            </method>
            <declaration name="STORED" type="int" line="53"/>
            <javadoc line="53">
                Compression method for uncompressed (STORED) entries.                
            </javadoc>
            <declaration name="DEFLATED" type="int" line="57"/>
            <javadoc line="57">
                Compression method for compressed (DEFLATED) entries.                
            </javadoc>
            <javadoc line="61">
                Creates a new ZIP output stream.
                  &lt;p&gt;The UTF-8 {@link java.nio.charset.Charset charset} is used
                  to encode the entry names and comments.                
                <param>
                    out the actual output stream                    
                </param>
            </javadoc>
            <method name="ZipOutputStream" type="constructor" line="67">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="70">
                Creates a new ZIP output stream.                
                <param>
                    out the actual output stream                    
                </param>
                <param>
                    charset the {@linkplain java.nio.charset.Charset charset}to be used to encode the entry names and comments                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ZipOutputStream" type="constructor" line="76">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="charset" type="Charset"/>
                </params>
            </method>
            <javadoc line="82">
                Sets the ZIP file comment.                
                <param>
                    comment the comment string                    
                </param>
                <exception>
                    IllegalArgumentException if the length of the specified
                      ZIP file comment is greater than 0xFFFF bytes                    
                </exception>
            </javadoc>
            <method name="setComment" type="void" line="88">
                <params>
                    <param name="comment" type="String"/>
                </params>
                <scope line="89"/>
            </method>
            <javadoc line="94">
                Sets the default compression method for subsequent entries. This
                  default will be used whenever the compression method is not specified
                  for an individual ZIP file entry, and is initially set to DEFLATED.                
                <param>
                    method the default compression method                    
                </param>
                <exception>
                    IllegalArgumentException if the specified compression method
                      is invalid                    
                </exception>
            </javadoc>
            <method name="setMethod" type="void" line="102">
                <params>
                    <param name="method" type="int"/>
                </params>
                <scope line="103"/>
            </method>
            <javadoc line="108">
                Sets the compression level for subsequent entries which are DEFLATED.
                  The default setting is DEFAULT_COMPRESSION.                
                <param>
                    level the compression level (0-9)                    
                </param>
                <exception>
                    IllegalArgumentException if the compression level is invalid                    
                </exception>
            </javadoc>
            <method name="setLevel" type="void" line="114">
                <params>
                    <param name="level" type="int"/>
                </params>
            </method>
            <javadoc line="117">
                Begins writing a new ZIP file entry and positions the stream to the
                  start of the entry data. Closes the current entry if still active.
                  The default compression method will be used if no compression method
                  was specified for the entry, and the current time will be used if
                  the entry has no set modification time.                
                <param>
                    e the ZIP entry to be written                    
                </param>
                <exception>
                    ZipException if a ZIP format error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="putNextEntry" type="void" line="127">
                <params>
                    <param name="e" type="ZipEntry"/>
                </params>
                <scope line="129"/>
                <scope line="132"/>
                <scope line="135"/>
                <scope line="144"/>
                <scope line="147"/>
                <scope line="150"/>
                <scope line="153"/>
                <scope line="160"/>
            </method>
            <javadoc line="168">
                Closes the current ZIP entry and positions the stream for writing
                  the next entry.                
                <exception>
                    ZipException if a ZIP format error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="closeEntry" type="void" line="174">
                <scope line="176">
                    <declaration name="e" type="ZipEntry" line="177"/>
                    <scope line="181"/>
                    <scope line="184">
                        <scope line="185"/>
                        <scope line="188"/>
                        <scope line="191"/>
                    </scope>
                    <scope line="195"/>
                    <scope line="205"/>
                    <scope line="208"/>
                </scope>
            </method>
            <javadoc line="219">
                Writes an array of bytes to the current ZIP entry data. This method
                  will block until all the bytes are written.                
                <param>
                    b the data to be written                    
                </param>
                <param>
                    off the start offset in the data                    
                </param>
                <param>
                    len the number of bytes that are written                    
                </param>
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="228">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="230"/>
                <scope line="233"/>
                <scope line="236"/>
                <declaration name="entry" type="ZipEntry" line="239"/>
                <scope line="246"/>
            </method>
            <javadoc line="256">
                Finishes writing the contents of the ZIP output stream without closing
                  the underlying stream. Use this method when applying multiple filters
                  in succession to the same output stream.                
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O exception has occurred                    
                </exception>
            </javadoc>
            <method name="finish" type="void" line="263">
                <scope line="265"/>
                <scope line="268"/>
                <declaration name="off" type="long" line="271"/>
            </method>
            <javadoc line="276">
                Closes the ZIP output stream as well as the stream being filtered.                
                <exception>
                    ZipException if a ZIP file error has occurred                    
                </exception>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="281">
                <scope line="282"/>
            </method>
            <method name="writeLOC" type="void" line="287">
                <params>
                    <param name="xentry" type="XEntry"/>
                </params>
                <declaration name="e" type="ZipEntry" line="288"/>
                <declaration name="flag" type="int" line="289"/>
                <declaration name="elen" type="int" line="290"/>
                <declaration name="hasZip64" type="boolean" line="291"/>
                <scope line="293"/>
                <scope line="302">
                    <scope line="303"/>
                    <scope line="307"/>
                    <scope line="314"/>
                    <scope line="319"/>
                </scope>
                <declaration name="nameBytes" type="byte[]" line="324"/>
                <scope line="328"/>
                <scope line="334"/>
            </method>
            <method name="writeEXT" type="void" line="339">
                <params>
                    <param name="e" type="ZipEntry"/>
                </params>
                <scope line="342"/>
                <scope line="346"/>
            </method>
            <method name="writeCEN" type="void" line="351">
                <params>
                    <param name="xentry" type="XEntry"/>
                </params>
                <declaration name="e" type="ZipEntry" line="352"/>
                <declaration name="flag" type="int" line="353"/>
                <declaration name="version" type="int" line="354"/>
                <declaration name="csize" type="long" line="355"/>
                <declaration name="size" type="long" line="356"/>
                <declaration name="offset" type="long" line="357"/>
                <declaration name="e64len" type="int" line="358"/>
                <declaration name="hasZip64" type="boolean" line="359"/>
                <scope line="360"/>
                <scope line="365"/>
                <scope line="370"/>
                <scope line="376"/>
                <scope line="380"/>
                <declaration name="nameBytes" type="byte[]" line="390"/>
                <scope line="392"/>
                <scope line="395"/>
                <declaration name="commentBytes" type="byte[]" line="398"/>
                <scope line="399"/>
                <scope line="403"/>
                <scope line="412"/>
                <scope line="419"/>
                <scope line="422"/>
            </method>
            <method name="writeEND" type="void" line="426">
                <params>
                    <param name="off" type="long"/>
                    <param name="len" type="long"/>
                </params>
                <declaration name="hasZip64" type="boolean" line="427"/>
                <declaration name="xlen" type="long" line="428"/>
                <declaration name="xoff" type="long" line="429"/>
                <scope line="430"/>
                <scope line="434"/>
                <declaration name="count" type="int" line="438"/>
                <scope line="439"/>
                <scope line="443">
                    <declaration name="off64" type="long" line="444"/>
                </scope>
                <scope line="467"/>
                <scope line="471"/>
            </method>
            <method name="writeShort" type="void" line="475">
                <params>
                    <param name="v" type="int"/>
                </params>
                <declaration name="out" type="OutputStream" line="476"/>
            </method>
            <method name="writeInt" type="void" line="481">
                <params>
                    <param name="v" type="long"/>
                </params>
                <declaration name="out" type="OutputStream" line="482"/>
            </method>
            <method name="writeLong" type="void" line="489">
                <params>
                    <param name="v" type="long"/>
                </params>
                <declaration name="out" type="OutputStream" line="490"/>
            </method>
            <method name="writeBytes" type="void" line="501">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
        </class>
    </source>