<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.zip">
        <import package="java.io.Closeable"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.File"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.StandardCharsets"/>
        <import package="java.util.ArrayDeque"/>
        <import package="java.util.Deque"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="java.util.zip.ZipConstants64"/>
        <class name="ZipFile" line="19">
            <implements interface="ZipConstants"/>
            <implements interface="Closeable"/>
            <javadoc line="19">
                This class is used to read entries from a zip file.
                  &lt;p&gt; Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor
                  or method in this class will cause a {@link NullPointerException} to be
                  thrown.                
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="jzfile" type="long" line="27"/>
            <declaration name="name" type="String" line="28"/>
            <declaration name="total" type="int" line="29"/>
            <declaration name="closeRequested" type="boolean" line="30"/>
            <declaration name="STORED" type="int" line="31"/>
            <declaration name="DEFLATED" type="int" line="32"/>
            <declaration name="OPEN_READ" type="int" line="33"/>
            <javadoc line="33">
                Mode flag to open a zip file for reading.                
            </javadoc>
            <declaration name="OPEN_DELETE" type="int" line="37"/>
            <javadoc line="37">
                Mode flag to open a zip file and mark it for deletion.  The file will be
                  deleted some time between the moment that it is opened and the moment
                  that it is closed, but its contents will remain accessible via the
                  &lt;tt&gt;ZipFile&lt;/tt&gt; object until either the close method is invoked or the
                  virtual machine exits.                
            </javadoc>
            <scope line="45"/>
            <method name="initIDs" type="void" line="48"/>
            <declaration name="usemmap" type="boolean" line="49"/>
            <scope line="50">
                <declaration name="prop" type="String" line="51"/>
            </scope>
            <javadoc line="54">
                Opens a zip file for reading.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt;
                  method is called with the &lt;code&gt;name&lt;/code&gt; argument as its argument
                  to ensure the read is allowed.
                  &lt;p&gt;The UTF-8 {@link java.nio.charset.Charset charset} is used to
                  decode the entry names and comments.                
                <param>
                    name the name of the zip file                    
                </param>
                <throws>
                    ZipException if a ZIP format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      <code>checkRead</code> method doesn't allow read access to the file.                    
                </throws>
                <see>
                    SecurityManager#checkRead(java.lang.String)                    
                </see>
            </javadoc>
            <method name="ZipFile" type="constructor" line="68">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="71">
                Opens a new &lt;code&gt;ZipFile&lt;/code&gt; to read from the specified
                  &lt;code&gt;File&lt;/code&gt; object in the specified mode.  The mode argument
                  must be either &lt;tt&gt;OPEN_READ&lt;/tt&gt; or &lt;tt&gt;OPEN_READ | OPEN_DELETE&lt;/tt&gt;.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt;
                  method is called with the &lt;code&gt;name&lt;/code&gt; argument as its argument to
                  ensure the read is allowed.
                  &lt;p&gt;The UTF-8 {@link java.nio.charset.Charset charset} is used to
                  decode the entry names and comments                
                <param>
                    file the ZIP file to be opened for reading                    
                </param>
                <param>
                    mode the mode in which the file is to be opened                    
                </param>
                <throws>
                    ZipException if a ZIP format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and
                      its <code>checkRead</code> method
                      doesn't allow read access to the file,
                      or its <code>checkDelete</code> method doesn't allow deleting
                      the file when the <tt>OPEN_DELETE</tt> flag is set.                    
                </throws>
                <throws>
                    IllegalArgumentException if the <tt>mode</tt> argument is invalid                    
                </throws>
                <see>
                    SecurityManager#checkRead(java.lang.String)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="ZipFile" type="constructor" line="93">
                <params>
                    <param name="file" type="File"/>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="96">
                Opens a ZIP file for reading given the specified File object.
                  &lt;p&gt;The UTF-8 {@link java.nio.charset.Charset charset} is used to
                  decode the entry names and comments.                
                <param>
                    file the ZIP file to be opened for reading                    
                </param>
                <throws>
                    ZipException if a ZIP format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
            </javadoc>
            <method name="ZipFile" type="constructor" line="104">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <declaration name="zc" type="ZipCoder" line="107"/>
            <javadoc line="108">
                Opens a new &lt;code&gt;ZipFile&lt;/code&gt; to read from the specified
                  &lt;code&gt;File&lt;/code&gt; object in the specified mode.  The mode argument
                  must be either &lt;tt&gt;OPEN_READ&lt;/tt&gt; or &lt;tt&gt;OPEN_READ | OPEN_DELETE&lt;/tt&gt;.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt;
                  method is called with the &lt;code&gt;name&lt;/code&gt; argument as its argument to
                  ensure the read is allowed.                
                <param>
                    file the ZIP file to be opened for reading                    
                </param>
                <param>
                    mode the mode in which the file is to be opened                    
                </param>
                <param>
                    charsetthe {@linkplain java.nio.charset.Charset charset} to
                      be used to decode the ZIP entry name and comment that are not
                      encoded by using UTF-8 encoding (indicated by entry's general
                      purpose flag).                    
                </param>
                <throws>
                    ZipException if a ZIP format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>checkRead</code>
                      method doesn't allow read access to the file,or its
                      <code>checkDelete</code> method doesn't allow deleting the
                      file when the <tt>OPEN_DELETE</tt> flag is set                    
                </throws>
                <throws>
                    IllegalArgumentException if the <tt>mode</tt> argument is invalid                    
                </throws>
                <see>
                    SecurityManager#checkRead(java.lang.String)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ZipFile" type="constructor" line="131">
                <params>
                    <param name="file" type="File"/>
                    <param name="mode" type="int"/>
                    <param name="charset" type="Charset"/>
                </params>
                <scope line="132"/>
                <declaration name="name" type="String" line="135"/>
                <declaration name="sm" type="SecurityManager" line="136"/>
                <scope line="137">
                    <scope line="139"/>
                </scope>
                <declaration name="t0" type="long" line="145"/>
            </method>
            <javadoc line="152">
                Opens a zip file for reading.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt;
                  method is called with the &lt;code&gt;name&lt;/code&gt; argument as its argument
                  to ensure the read is allowed.                
                <param>
                    name the name of the zip file                    
                </param>
                <param>
                    charsetthe {@linkplain java.nio.charset.Charset charset} to
                      be used to decode the ZIP entry name and comment that are not
                      encoded by using UTF-8 encoding (indicated by entry's general
                      purpose flag).                    
                </param>
                <throws>
                    ZipException if a ZIP format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>checkRead</code>
                      method doesn't allow read access to the file                    
                </throws>
                <see>
                    SecurityManager#checkRead(java.lang.String)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ZipFile" type="constructor" line="169">
                <params>
                    <param name="name" type="String"/>
                    <param name="charset" type="Charset"/>
                </params>
            </method>
            <javadoc line="172">
                Opens a ZIP file for reading given the specified File object.                
                <param>
                    file the ZIP file to be opened for reading                    
                </param>
                <param>
                    charsetThe {@linkplain java.nio.charset.Charset charset} to be
                      used to decode the ZIP entry name and comment (ignored if
                      the <a href="package-summary.html#lang_encoding"> language
                      encoding bit</a> of the ZIP entry's general purpose bit
                      flag is set).                    
                </param>
                <throws>
                    ZipException if a ZIP format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ZipFile" type="constructor" line="184">
                <params>
                    <param name="file" type="File"/>
                    <param name="charset" type="Charset"/>
                </params>
            </method>
            <javadoc line="187">
                Returns the zip file comment, or null if none.                
                <return>
                    the comment string for the zip file, or null if none                    
                </return>
                <throws>
                    IllegalStateException if the zip file has been closed
                      Since 1.7                    
                </throws>
            </javadoc>
            <method name="getComment" type="String" line="193">
                <scope line="194">
                    <declaration name="bcomm" type="byte[]" line="196"/>
                </scope>
            </method>
            <javadoc line="201">
                Returns the zip file entry for the specified name, or null
                  if not found.                
                <param>
                    name the name of the entry                    
                </param>
                <return>
                    the zip file entry, or null if not found                    
                </return>
                <throws>
                    IllegalStateException if the zip file has been closed                    
                </throws>
            </javadoc>
            <method name="getEntry" type="ZipEntry" line="208">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="209"/>
                <declaration name="jzentry" type="long" line="212"/>
                <scope line="213">
                    <scope line="216">
                        <declaration name="ze" type="ZipEntry" line="217"/>
                    </scope>
                </scope>
            </method>
            <method name="getEntry" type="long" line="224"/>
            <method name="freeEntry" type="void" line="225"/>
            <declaration name="streams" type="Map&lt;InputStream,Inflater&gt;" line="226"/>
            <javadoc line="227">
                Returns an input stream for reading the contents of the specified
                  zip file entry.
                  &lt;p&gt; Closing this ZIP file will, in turn, close all input
                  streams that have been returned by invocations of this method.                
                <param>
                    entry the zip file entry                    
                </param>
                <return>
                    the input stream for reading the contents of the specified
                      zip file entry.                    
                </return>
                <throws>
                    ZipException if a ZIP format error has occurred                    
                </throws>
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <throws>
                    IllegalStateException if the zip file has been closed                    
                </throws>
            </javadoc>
            <method name="getInputStream" type="InputStream" line="239">
                <params>
                    <param name="entry" type="ZipEntry"/>
                </params>
                <scope line="240"/>
                <declaration name="jzentry" type="long" line="243"/>
                <declaration name="in" type="ZipFileInputStream" line="244"/>
                <scope line="245">
                    <scope line="247"/>
                    <scope line="250"/>
                    <scope line="253"/>
                    <scope line="259"/>
                    <declaration name="size" type="long" line="264"/>
                    <declaration name="inf" type="Inflater" line="267"/>
                    <declaration name="is" type="InputStream" line="268"/>
                    <scope line="269"/>
                </scope>
            </method>
            <class name="ZipFileInflaterInputStream" line="278">
                <extends class="InflaterInputStream"/>
                <declaration name="closeRequested" type="boolean" line="279"/>
                <declaration name="eof" type="boolean" line="280"/>
                <declaration name="zfin" type="ZipFileInputStream" line="281"/>
                <method name="ZipFileInflaterInputStream" type="constructor" line="282">
                    <params>
                        <param name="zfin" type="ZipFileInputStream"/>
                        <param name="inf" type="Inflater"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="close" type="void" line="286">
                    <declaration name="inf" type="Inflater" line="290"/>
                    <scope line="291"/>
                    <scope line="294"/>
                </method>
                <method name="fill" type="void" line="298">
                    <scope line="299"/>
                    <scope line="303"/>
                </method>
                <method name="available" type="int" line="310">
                    <declaration name="avail" type="long" line="312"/>
                </method>
                <method name="finalize" type="void" line="315"/>
            </class>
            <method name="getInflater" type="Inflater" line="319">
                <declaration name="inf" type="Inflater" line="320"/>
                <scope line="321">
                    <scope line="322">
                        <scope line="323"/>
                    </scope>
                </scope>
            </method>
            <method name="releaseInflater" type="void" line="330">
                <params>
                    <param name="inf" type="Inflater"/>
                </params>
                <scope line="331">
                    <scope line="333"/>
                </scope>
            </method>
            <declaration name="inflaterCache" type="Deque&lt;Inflater&gt;" line="338"/>
            <javadoc line="339">
                Returns the path name of the ZIP file.                
                <return>
                    the path name of the ZIP file                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="343"/>
            <javadoc line="346">
                Returns an enumeration of the ZIP file entries.                
                <return>
                    an enumeration of the ZIP file entries                    
                </return>
                <throws>
                    IllegalStateException if the zip file has been closed                    
                </throws>
            </javadoc>
            <method name="entries" type="Enumeration<? extends ZipEntry>" line="351">
                <anonymous_class line="353">
                    <declaration name="i" type="int" line="354"/>
                    <method name="hasMoreElements" type="boolean" line="355">
                        <scope line="356"/>
                    </method>
                    <method name="nextElement" type="ZipEntry" line="361">
                        <scope line="362">
                            <scope line="364"/>
                            <declaration name="jzentry" type="long" line="367"/>
                            <scope line="368">
                                <declaration name="message" type="String" line="369"/>
                                <scope line="370"/>
                                <scope line="373"/>
                            </scope>
                            <declaration name="ze" type="ZipEntry" line="378"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getZipEntry" type="ZipEntry" line="386">
                <params>
                    <param name="name" type="String"/>
                    <param name="jzentry" type="long"/>
                </params>
                <declaration name="e" type="ZipEntry" line="387"/>
                <scope line="389"/>
                <scope line="392">
                    <declaration name="bname" type="byte[]" line="393"/>
                    <scope line="394"/>
                    <scope line="397"/>
                </scope>
                <declaration name="bcomm" type="byte[]" line="407"/>
                <scope line="408"/>
                <scope line="411">
                    <scope line="412"/>
                    <scope line="415"/>
                </scope>
            </method>
            <method name="getNextEntry" type="long" line="421"/>
            <javadoc line="422">
                Returns the number of entries in the ZIP file.                
                <return>
                    the number of entries in the ZIP file                    
                </return>
                <throws>
                    IllegalStateException if the zip file has been closed                    
                </throws>
            </javadoc>
            <method name="size" type="int" line="427"/>
            <javadoc line="431">
                Closes the ZIP file.
                  &lt;p&gt; Closing this ZIP file will close all of the input streams
                  previously returned by invocations of the {@link #getInputStreamgetInputStream} method.                
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="437">
                <scope line="440">
                    <scope line="441">
                        <scope line="442">
                            <declaration name="copy" type="Map&lt;InputStream,Inflater&gt;" line="443"/>
                            <scope line="445">
                                <declaration name="inf" type="Inflater" line="447"/>
                                <scope line="448"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="inf" type="Inflater" line="454"/>
                    <scope line="455">
                        <scope line="456"/>
                    </scope>
                    <scope line="460">
                        <declaration name="zf" type="long" line="461"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="467">
                Ensures that the system resources held by this ZipFile object are
                  released when there are no more references to it.
                  &lt;p&gt;
                  Since the time when GC would invoke this method is undetermined,
                  it is strongly recommended that applications invoke the &lt;code&gt;close&lt;/code&gt;
                  method as soon they have finished accessing this &lt;code&gt;ZipFile&lt;/code&gt;.
                  This will prevent holding up system resources for an undetermined
                  length of time.                
                <throws>
                    IOException if an I/O error has occurred                    
                </throws>
                <see>
                    java.util.zip.ZipFile#close()                    
                </see>
            </javadoc>
            <method name="finalize" type="void" line="479"/>
            <method name="close" type="void" line="482"/>
            <method name="ensureOpen" type="void" line="483">
                <scope line="484"/>
                <scope line="487"/>
            </method>
            <method name="ensureOpenOrZipException" type="void" line="491">
                <scope line="492"/>
            </method>
            <class name="ZipFileInputStream" line="496">
                <extends class="InputStream"/>
                <declaration name="closeRequested" type="boolean" line="497"/>
                <declaration name="jzentry" type="long" line="498"/>
                <declaration name="pos" type="long" line="499"/>
                <declaration name="rem" type="long" line="500"/>
                <declaration name="size" type="long" line="501"/>
                <method name="ZipFileInputStream" type="constructor" line="502">
                    <params>
                        <param name="jzentry" type="long"/>
                    </params>
                </method>
                <method name="read" type="int" line="508">
                    <params>
                        <param name="b" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="509"/>
                    <scope line="512"/>
                    <scope line="515"/>
                    <scope line="518"/>
                    <scope line="522"/>
                    <scope line="526"/>
                </method>
                <method name="read" type="int" line="531">
                    <declaration name="b" type="byte[]" line="532"/>
                    <scope line="533"/>
                    <scope line="536"/>
                </method>
                <method name="skip" type="long" line="540">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                    <scope line="544"/>
                </method>
                <method name="available" type="int" line="549"/>
                <method name="size" type="long" line="552"/>
                <method name="close" type="void" line="555">
                    <scope line="559">
                        <scope line="560"/>
                    </scope>
                    <scope line="565"/>
                </method>
                <method name="finalize" type="void" line="569"/>
            </class>
            <method name="open" type="long" line="573"/>
            <method name="getTotal" type="int" line="574"/>
            <method name="read" type="int" line="575"/>
            <method name="getEntryTime" type="long" line="576"/>
            <method name="getEntryCrc" type="long" line="577"/>
            <method name="getEntryCSize" type="long" line="578"/>
            <method name="getEntrySize" type="long" line="579"/>
            <method name="getEntryMethod" type="int" line="580"/>
            <method name="getEntryFlag" type="int" line="581"/>
            <method name="getCommentBytes" type="byte[]" line="582"/>
            <declaration name="JZENTRY_NAME" type="int" line="583"/>
            <declaration name="JZENTRY_EXTRA" type="int" line="584"/>
            <declaration name="JZENTRY_COMMENT" type="int" line="585"/>
            <method name="getEntryBytes" type="byte[]" line="586"/>
            <method name="getZipMessage" type="String" line="587"/>
        </class>
    </source>