<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <import package="java.io.InputStream"/>
        <import package="java.io.Reader"/>
        <import package="java.io.IOException"/>
        <import package="sun.util.ResourceBundleEnumeration"/>
        <class name="PropertyResourceBundle" line="6">
            <extends class="ResourceBundle"/>
            <javadoc line="6">
                &lt;code&gt;PropertyResourceBundle&lt;/code&gt; is a concrete subclass of
                  &lt;code&gt;ResourceBundle&lt;/code&gt; that manages resources for a locale
                  using a set of static strings from a property file. See{@link ResourceBundle ResourceBundle} for more information about resource
                  bundles.
                  &lt;p&gt;
                  Unlike other types of resource bundle, you don&apos;t subclass
                  &lt;code&gt;PropertyResourceBundle&lt;/code&gt;.  Instead, you supply properties
                  files containing the resource data.  &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt;
                  will automatically look for the appropriate properties file and create a
                  &lt;code&gt;PropertyResourceBundle&lt;/code&gt; that refers to it. See{@link ResourceBundle#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader) ResourceBundle.getBundle}for a complete description of the search and instantiation strategy.
                  &lt;p&gt;
                  The following &lt;a name=&quot;sample&quot;&gt;example&lt;/a&gt; shows a member of a resource
                  bundle family with the base name &quot;MyResources&quot;.
                  The text defines the bundle &quot;MyResources_de&quot;,
                  the German member of the bundle family.
                  This member is based on &lt;code&gt;PropertyResourceBundle&lt;/code&gt;, and the text
                  therefore is the content of the file &quot;MyResources_de.properties&quot;
                  (a related &lt;a href=&quot;ListResourceBundle.html#sample&quot;&gt;example&lt;/a&gt; shows
                  how you can add bundles to this family that are implemented as subclasses
                  of &lt;code&gt;ListResourceBundle&lt;/code&gt;).
                  The keys in this example are of the form &quot;s1&quot; etc. The actual
                  keys are entirely up to your choice, so long as they are the same as
                  the keys you use in your program to retrieve the objects from the bundle.
                  Keys are case-sensitive.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  # MessageFormat pattern
                  s1=Die Platte \&quot;{1}\&quot; enth&amp;auml;lt {0}.
                  # location of {0} in pattern
                  s2=1
                  # sample disk name
                  s3=Meine Platte
                  # first ChoiceFormat choice
                  s4=keine Dateien
                  # second ChoiceFormat choice
                  s5=eine Datei
                  # third ChoiceFormat choice
                  s6={0,number} Dateien
                  # sample date
                  s7=3. M&amp;auml;rz 1996
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; PropertyResourceBundle can be constructed either
                  from an InputStream or a Reader, which represents a property file.
                  Constructing a PropertyResourceBundle instance from an InputStream requires
                  that the input stream be encoded in ISO-8859-1.  In that case, characters
                  that cannot be represented in ISO-8859-1 encoding must be represented by Unicode Escapes
                  as defined in section 3.3 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;
                  whereas the other constructor which takes a Reader does not have that limitation.                
                <see>
                    ResourceBundle                    
                </see>
                <see>
                    ListResourceBundle                    
                </see>
                <see>
                    Properties                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="64">
                Creates a property resource bundle from an {@link java.io.InputStreamInputStream}.  The property file read with this constructor
                  must be encoded in ISO-8859-1.                
                <param>
                    stream an InputStream that represents a property file
                      to read from.                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerException if <code>stream</code> is null                    
                </throws>
            </javadoc>
            <method name="PropertyResourceBundle" type="constructor" line="72">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="properties" type="Properties" line="73"/>
            </method>
            <javadoc line="77">
                Creates a property resource bundle from a {@link java.io.ReaderReader}.  Unlike the constructor{@link #PropertyResourceBundle(java.io.InputStream) PropertyResourceBundle(InputStream)},
                  there is no limitation as to the encoding of the input property file.                
                <param>
                    reader a Reader that represents a property file to
                      read from.                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerException if <code>reader</code> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="PropertyResourceBundle" type="constructor" line="86">
                <params>
                    <param name="reader" type="Reader"/>
                </params>
                <declaration name="properties" type="Properties" line="87"/>
            </method>
            <method name="handleGetObject" type="Object" line="91">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Returns an &lt;code&gt;Enumeration&lt;/code&gt; of the keys contained in
                  this &lt;code&gt;ResourceBundle&lt;/code&gt; and its parent bundles.                
                <return>
                    an <code>Enumeration</code> of the keys contained in
                      this <code>ResourceBundle</code> and its parent bundles.                    
                </return>
                <see>
                    #keySet()                    
                </see>
            </javadoc>
            <method name="getKeys" type="Enumeration<String>" line="104">
                <declaration name="parent" type="ResourceBundle" line="105"/>
            </method>
            <javadoc line="108">
                Returns a &lt;code&gt;Set&lt;/code&gt; of the keys contained
                  &lt;em&gt;only&lt;/em&gt; in this &lt;code&gt;ResourceBundle&lt;/code&gt;.                
                <return>
                    a <code>Set</code> of the keys contained only in this
                      <code>ResourceBundle</code>                    
                </return>
                <since>
                    1.6                    
                </since>
                <see>
                    #keySet()                    
                </see>
            </javadoc>
            <method name="handleKeySet" type="Set<String>" line="116"/>
            <declaration name="lookup" type="Map&lt;String,Object&gt;" line="119"/>
        </class>
    </source>