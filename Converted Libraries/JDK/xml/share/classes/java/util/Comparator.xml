<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util">
        <interface name="Comparator">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="2">
                A comparison function, which imposes a &lt;i&gt;total ordering&lt;/i&gt; on some
                  collection of objects.  Comparators can be passed to a sort method (such
                  as {@link Collections#sort(List,Comparator) Collections.sort} or {@link Arrays#sort(Object[],Comparator) Arrays.sort}) to allow precise control
                  over the sort order.  Comparators can also be used to control the order of
                  certain data structures (such as {@link SortedSet sorted sets} or {@link SortedMap sorted maps}), or to provide an ordering for collections of
                  objects that don&apos;t have a {@link Comparable natural ordering}.&lt;p&gt;
                  The ordering imposed by a comparator &lt;tt&gt;c&lt;/tt&gt; on a set of elements
                  &lt;tt&gt;S&lt;/tt&gt; is said to be &lt;i&gt;consistent with equals&lt;/i&gt; if and only if
                  &lt;tt&gt;c.compare(e1, e2)==0&lt;/tt&gt; has the same boolean value as
                  &lt;tt&gt;e1.equals(e2)&lt;/tt&gt; for every &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; in
                  &lt;tt&gt;S&lt;/tt&gt;.&lt;p&gt;
                  Caution should be exercised when using a comparator capable of imposing an
                  ordering inconsistent with equals to order a sorted set (or sorted map).
                  Suppose a sorted set (or sorted map) with an explicit comparator &lt;tt&gt;c&lt;/tt&gt;
                  is used with elements (or keys) drawn from a set &lt;tt&gt;S&lt;/tt&gt;.  If the
                  ordering imposed by &lt;tt&gt;c&lt;/tt&gt; on &lt;tt&gt;S&lt;/tt&gt; is inconsistent with equals,
                  the sorted set (or sorted map) will behave &quot;strangely.&quot;  In particular the
                  sorted set (or sorted map) will violate the general contract for set (or
                  map), which is defined in terms of &lt;tt&gt;equals&lt;/tt&gt;.&lt;p&gt;
                  For example, suppose one adds two elements {@code a} and {@code b} such that{@code (a.equals(b) &amp;&amp; c.compare(a, b) != 0)}to an empty {@code TreeSet} with comparator {@code c}.
                  The second {@code add} operation will return
                  true (and the size of the tree set will increase) because {@code a} and{@code b} are not equivalent from the tree set&apos;s perspective, even though
                  this is contrary to the specification of the{@link Set#add Set.add} method.&lt;p&gt;
                  Note: It is generally a good idea for comparators to also implement
                  &lt;tt&gt;java.io.Serializable&lt;/tt&gt;, as they may be used as ordering methods in
                  serializable data structures (like {@link TreeSet}, {@link TreeMap}).  In
                  order for the data structure to serialize successfully, the comparator (if
                  provided) must implement &lt;tt&gt;Serializable&lt;/tt&gt;.&lt;p&gt;
                  For the mathematically inclined, the &lt;i&gt;relation&lt;/i&gt; that defines the
                  &lt;i&gt;imposed ordering&lt;/i&gt; that a given comparator &lt;tt&gt;c&lt;/tt&gt; imposes on a
                  given set of objects &lt;tt&gt;S&lt;/tt&gt; is:&lt;pre&gt;
                  {(x, y) such that c.compare(x, y) &amp;lt;= 0}.
                  &lt;/pre&gt; The &lt;i&gt;quotient&lt;/i&gt; for this total order is:&lt;pre&gt;
                  {(x, y) such that c.compare(x, y) == 0}.
                  &lt;/pre&gt;
                  It follows immediately from the contract for &lt;tt&gt;compare&lt;/tt&gt; that the
                  quotient is an &lt;i&gt;equivalence relation&lt;/i&gt; on &lt;tt&gt;S&lt;/tt&gt;, and that the
                  imposed ordering is a &lt;i&gt;total order&lt;/i&gt; on &lt;tt&gt;S&lt;/tt&gt;.  When we say that
                  the ordering imposed by &lt;tt&gt;c&lt;/tt&gt; on &lt;tt&gt;S&lt;/tt&gt; is &lt;i&gt;consistent with
                  equals&lt;/i&gt;, we mean that the quotient for the ordering is the equivalence
                  relation defined by the objects&apos; {@link Object#equals(Object)equals(Object)} method(s):&lt;pre&gt;
                  {(x, y) such that x.equals(y)}. &lt;/pre&gt;
                  &lt;p&gt;Unlike {@code Comparable}, a comparator may optionally permit
                  comparison of null arguments, while maintaining the requirements for
                  an equivalence relation.
                  &lt;p&gt;This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    &lt;T&gt;
                      the type of objects that may be compared by this comparator                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Comparable                    
                </see>
                <see>
                    java.io.Serializable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="compare" type="int" line="60"/>
            <javadoc line="60">
                Compares its two arguments for order.  Returns a negative integer,
                  zero, or a positive integer as the first argument is less than, equal
                  to, or greater than the second.&lt;p&gt;
                  In the foregoing description, the notation
                  &lt;tt&gt;sgn(&lt;/tt&gt;&lt;i&gt;expression&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; designates the mathematical
                  &lt;i&gt;signum&lt;/i&gt; function, which is defined to return one of &lt;tt&gt;-1&lt;/tt&gt;,
                  &lt;tt&gt;0&lt;/tt&gt;, or &lt;tt&gt;1&lt;/tt&gt; according to whether the value of
                  &lt;i&gt;expression&lt;/i&gt; is negative, zero or positive.&lt;p&gt;
                  The implementor must ensure that &lt;tt&gt;sgn(compare(x, y)) ==
                  -sgn(compare(y, x))&lt;/tt&gt; for all &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;.  (This
                  implies that &lt;tt&gt;compare(x, y)&lt;/tt&gt; must throw an exception if and only
                  if &lt;tt&gt;compare(y, x)&lt;/tt&gt; throws an exception.)&lt;p&gt;
                  The implementor must also ensure that the relation is transitive:
                  &lt;tt&gt;((compare(x, y)&amp;gt;0) &amp;amp;&amp;amp; (compare(y, z)&amp;gt;0))&lt;/tt&gt; implies
                  &lt;tt&gt;compare(x, z)&amp;gt;0&lt;/tt&gt;.&lt;p&gt;
                  Finally, the implementor must ensure that &lt;tt&gt;compare(x, y)==0&lt;/tt&gt;
                  implies that &lt;tt&gt;sgn(compare(x, z))==sgn(compare(y, z))&lt;/tt&gt; for all
                  &lt;tt&gt;z&lt;/tt&gt;.&lt;p&gt;
                  It is generally the case, but &lt;i&gt;not&lt;/i&gt; strictly required that
                  &lt;tt&gt;(compare(x, y)==0) == (x.equals(y))&lt;/tt&gt;.  Generally speaking,
                  any comparator that violates this condition should clearly indicate
                  this fact.  The recommended language is &quot;Note: this comparator
                  imposes orderings that are inconsistent with equals.&quot;                
                <param>
                    o1 the first object to be compared.                    
                </param>
                <param>
                    o2 the second object to be compared.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as the
                      first argument is less than, equal to, or greater than the
                      second.                    
                </return>
                <throws>
                    NullPointerException if an argument is null and this
                      comparator does not permit null arguments                    
                </throws>
                <throws>
                    ClassCastException if the arguments&apos; types prevent them from
                      being compared by this comparator.                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="95"/>
            <javadoc line="95">
                Indicates whether some other object is &amp;quot;equal to&amp;quot; this
                  comparator.  This method must obey the general contract of{@link Object#equals(Object)}.  Additionally, this method can return
                  &lt;tt&gt;true&lt;/tt&gt; &lt;i&gt;only&lt;/i&gt; if the specified object is also a comparator
                  and it imposes the same ordering as this comparator.  Thus,
                  &lt;code&gt;comp1.equals(comp2)&lt;/code&gt; implies that &lt;tt&gt;sgn(comp1.compare(o1,
                  o2))==sgn(comp2.compare(o1, o2))&lt;/tt&gt; for every object reference
                  &lt;tt&gt;o1&lt;/tt&gt; and &lt;tt&gt;o2&lt;/tt&gt;.&lt;p&gt;
                  Note that it is &lt;i&gt;always&lt;/i&gt; safe &lt;i&gt;not&lt;/i&gt; to override
                  &lt;tt&gt;Object.equals(Object)&lt;/tt&gt;.  However, overriding this method may,
                  in some cases, improve performance by allowing programs to determine
                  that two distinct comparators impose the same order.                
                <param>
                    obj   the reference object with which to compare.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; only if the specified object is also
                      a comparator and it imposes the same ordering as this
                      comparator.                    
                </return>
                <see>
                    Object#equals(Object)                    
                </see>
                <see>
                    Object#hashCode()                    
                </see>
            </javadoc>
        </interface>
    </source>