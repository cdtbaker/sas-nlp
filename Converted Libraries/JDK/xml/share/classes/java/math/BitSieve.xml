<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.math">
        <class name="BitSieve" line="2">
            <javadoc line="2">
                A simple bit sieve used for finding prime number candidates. Allows setting
                  and clearing of bits in a storage array. The size of the sieve is assumed to
                  be constant to reduce overhead. All the bits of a new bitSieve are zero, and
                  bits are removed from it by setting them.
                  To reduce storage space and increase efficiency, no even numbers are
                  represented in the sieve (each bit in the sieve represents an odd number).
                  The relationship between the index of a bit and the number it represents is
                  given by
                  N = offset + (2index + 1);
                  Where N is the integer represented by a bit in the sieve, offset is some
                  even integer offset indicating where the sieve begins, and index is the
                  index of a bit in the sieve array.                
                <see>
                    BigInteger                    
                </see>
                <author>
                    Michael McCloskey                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="bits" type="long" line="20"/>
            <javadoc line="20">
                Stores the bits in this bitSieve.                
            </javadoc>
            <declaration name="length" type="int" line="24"/>
            <javadoc line="24">
                Length is how many bits this sieve holds.                
            </javadoc>
            <declaration name="smallSieve" type="BitSieve" line="28"/>
            <javadoc line="28">
                A small sieve used to filter out multiples of small primes in a search
                  sieve.                
            </javadoc>
            <javadoc line="33">
                Construct a &quot;small sieve&quot; with a base of 0.  This constructor is
                  used internally to generate the set of &quot;small primes&quot; whose multiples
                  are excluded from sieves generated by the main (package private)
                  constructor, BitSieve(BigInteger base, int searchLen).  The length
                  of the sieve generated by this constructor was chosen for performance;
                  it controls a tradeoff between how much time is spent constructing
                  other sieves, and how much time is wasted testing composite candidates
                  for primality.  The length was chosen experimentally to yield good
                  performance.                
            </javadoc>
            <method name="BitSieve" type="constructor" line="44">
                <declaration name="nextIndex" type="int" line="48"/>
                <declaration name="nextPrime" type="int" line="49"/>
                <scope line="50"/>
            </method>
            <javadoc line="57">
                Construct a bit sieve of searchLen bits used for finding prime number
                  candidates. The new sieve begins at the specified base, which must
                  be even.                
            </javadoc>
            <method name="BitSieve" type="constructor" line="62">
                <params>
                    <param name="base" type="BigInteger"/>
                    <param name="searchLen" type="int"/>
                </params>
                <declaration name="start" type="int" line="65"/>
                <declaration name="step" type="int" line="66"/>
                <declaration name="convertedStep" type="int" line="67"/>
                <declaration name="b" type="MutableBigInteger" line="68"/>
                <declaration name="q" type="MutableBigInteger" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="80">
                Given a bit index return unit index containing it.                
            </javadoc>
            <method name="unitIndex" type="int" line="83">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
            </method>
            <javadoc line="86">
                Return a unit that masks the specified bit in its unit.                
            </javadoc>
            <method name="bit" type="long" line="89">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
            </method>
            <javadoc line="92">
                Get the value of the bit at the specified index.                
            </javadoc>
            <method name="get" type="boolean" line="95">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
                <declaration name="unitIndex" type="int" line="96"/>
            </method>
            <javadoc line="99">
                Set the bit at the specified index.                
            </javadoc>
            <method name="set" type="void" line="102">
                <params>
                    <param name="bitIndex" type="int"/>
                </params>
                <declaration name="unitIndex" type="int" line="103"/>
            </method>
            <javadoc line="106">
                This method returns the index of the first clear bit in the search
                  array that occurs at or after start. It will not search past the
                  specified limit. It returns -1 if there is no such clear bit.                
            </javadoc>
            <method name="sieveSearch" type="int" line="111">
                <params>
                    <param name="limit" type="int"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="index" type="int" line="113"/>
                <scope line="114"/>
            </method>
            <javadoc line="121">
                Sieve a single set of multiples out of the sieve. Begin to remove
                  multiples of the specified step starting at the specified start index,
                  up to the specified limit.                
            </javadoc>
            <method name="sieveSingle" type="void" line="126">
                <params>
                    <param name="limit" type="int"/>
                    <param name="start" type="int"/>
                    <param name="step" type="int"/>
                </params>
                <scope line="127"/>
            </method>
            <javadoc line="132">
                Test probable primes in the sieve and return successful candidates.                
            </javadoc>
            <method name="retrieve" type="BigInteger" line="135">
                <params>
                    <param name="initValue" type="BigInteger"/>
                    <param name="certainty" type="int"/>
                    <param name="random" type="java.util.Random"/>
                </params>
                <declaration name="offset" type="int" line="136"/>
                <scope line="137">
                    <declaration name="nextLong" type="long" line="138"/>
                    <scope line="139">
                        <scope line="140">
                            <declaration name="candidate" type="BigInteger" line="141"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>