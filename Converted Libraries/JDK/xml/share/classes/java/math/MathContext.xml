<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.math">
        <import package="java.io"/>
        <class name="MathContext" line="33">
            <comment line="59">
                                
            </comment>
            <comment line="61">
                defaults for constructors                
            </comment>
            <comment line="64">
                Smallest values for digits (Maximum is Integer.MAX_VALUE)                
            </comment>
            <comment line="67">
                Serialization version                
            </comment>
            <comment line="70">
                                
            </comment>
            <comment line="109">
                                
            </comment>
            <comment line="130">
                                
            </comment>
            <comment line="305">
                Private methods                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="33">
                Immutable objects which encapsulate the context settings which
                  describe certain rules for numerical operators, such as those
                  implemented by the {@link BigDecimal} class.
                  &lt;p&gt;The base-independent settings are:
                  &lt;ol&gt;
                  &lt;li&gt;{@code precision}:
                  the number of digits to be used for an operation; results are
                  rounded to this precision
                  &lt;li&gt;{@code roundingMode}:
                  a {@link RoundingMode} object which specifies the algorithm to be
                  used for rounding.
                  &lt;/ol&gt;                
                <see>
                    BigDecimal                    
                </see>
                <see>
                    RoundingMode                    
                </see>
                <author>
                    Mike Cowlishaw                    
                </author>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_DIGITS" type="int" line="61"/>
            <declaration name="DEFAULT_ROUNDINGMODE" type="RoundingMode" line="62"/>
            <declaration name="MIN_DIGITS" type="int" line="64"/>
            <declaration name="serialVersionUID" type="long" line="67"/>
            <declaration name="UNLIMITED" type="MathContext" line="70"/>
            <javadoc line="70">
                A {@code MathContext} object whose settings have the values
                  required for unlimited precision arithmetic.
                  The values of the settings are:
                  &lt;code&gt;
                  precision=0 roundingMode=HALF_UP
                  &lt;/code&gt;                
            </javadoc>
            <declaration name="DECIMAL32" type="MathContext" line="81"/>
            <javadoc line="81">
                A {@code MathContext} object with a precision setting
                  matching the IEEE 754R Decimal32 format, 7 digits, and a
                  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
                  IEEE 754R default.                
            </javadoc>
            <declaration name="DECIMAL64" type="MathContext" line="90"/>
            <javadoc line="90">
                A {@code MathContext} object with a precision setting
                  matching the IEEE 754R Decimal64 format, 16 digits, and a
                  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
                  IEEE 754R default.                
            </javadoc>
            <declaration name="DECIMAL128" type="MathContext" line="99"/>
            <javadoc line="99">
                A {@code MathContext} object with a precision setting
                  matching the IEEE 754R Decimal128 format, 34 digits, and a
                  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
                  IEEE 754R default.                
            </javadoc>
            <declaration name="precision" type="int" line="109"/>
            <javadoc line="109">
                The number of digits to be used for an operation.  A value of 0
                  indicates that unlimited precision (as many digits as are
                  required) will be used.  Note that leading zeros (in the
                  coefficient of a number) are never significant.
                  &lt;p&gt;{@code precision} will always be non-negative.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="roundingMode" type="RoundingMode" line="121"/>
            <javadoc line="121">
                The rounding algorithm to be used for an operation.                
                <see>
                    RoundingMode                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="131">
                Constructs a new {@code MathContext} with the specified
                  precision and the {@link RoundingMode#HALF_UP HALF_UP} rounding
                  mode.                
                <param>
                    setPrecision The non-negative {@code int} precision setting.                    
                </param>
                <throws>
                    IllegalArgumentException if the {@code setPrecision} parameter is less
                      than zero.                    
                </throws>
            </javadoc>
            <method name="MathContext" type="constructor" line="140">
                <params>
                    <param name="setPrecision" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Constructs a new {@code MathContext} with a specified
                  precision and rounding mode.                
                <param>
                    setPrecision The non-negative {@code int} precision setting.                    
                </param>
                <param>
                    setRoundingMode The rounding mode to use.                    
                </param>
                <throws>
                    IllegalArgumentException if the {@code setPrecision} parameter is less
                      than zero.                    
                </throws>
                <throws>
                    NullPointerException if the rounding mode argument is {@code null}                    
                </throws>
            </javadoc>
            <method name="MathContext" type="constructor" line="156">
                <params>
                    <param name="setPrecision" type="int"/>
                    <param name="setRoundingMode" type="RoundingMode"/>
                </params>
            </method>
            <javadoc line="167">
                Constructs a new {@code MathContext} from a string.
                  The string must be in the same format as that produced by the{@link #toString} method.
                  &lt;p&gt;An {@code IllegalArgumentException} is thrown if the precision
                  section of the string is out of range ({@code &lt; 0}) or the string is
                  not in the format created by the {@link #toString} method.                
                <param>
                    val The string to be parsed                    
                </param>
                <throws>
                    IllegalArgumentException if the precision section is out of range
                      or of incorrect format                    
                </throws>
                <throws>
                    NullPointerException if the argument is {@code null}                    
                </throws>
            </javadoc>
            <method name="MathContext" type="constructor" line="182">
                <params>
                    <param name="val" type="String"/>
                </params>
                <comment line="188">
                    any error here is a string format problem                    
                </comment>
                <comment line="190">
                    could be -1                    
                </comment>
                <comment line="191">
                    where value starts                    
                </comment>
                <comment line="205">
                    the other parameters cannot be invalid if we got here                    
                </comment>
                <declaration name="bad" type="boolean" line="183"/>
                <declaration name="setPrecision" type="int" line="184"/>
                <scope line="187">
                    <declaration name="fence" type="int" line="189"/>
                    <declaration name="off" type="int" line="190"/>
                    <declaration name="str" type="String" line="196"/>
                </scope>
                <scope line="198"/>
            </method>
            <javadoc line="208">
                Returns the {@code precision} setting.
                  This value is always non-negative.                
                <return>
                    an {@code int} which is the value of the {@code precision}setting                    
                </return>
            </javadoc>
            <method name="getPrecision" type="int" line="215"/>
            <javadoc line="219">
                Returns the roundingMode setting.
                  This will be one of{@link RoundingMode#CEILING},{@link RoundingMode#DOWN},{@link RoundingMode#FLOOR},{@link RoundingMode#HALF_DOWN},{@link RoundingMode#HALF_EVEN},{@link RoundingMode#HALF_UP},{@link RoundingMode#UNNECESSARY}, or{@link RoundingMode#UP}.                
                <return>
                    a {@code RoundingMode} object which is the value of the{@code roundingMode} setting                    
                </return>
            </javadoc>
            <method name="getRoundingMode" type="RoundingMode" line="235"/>
            <javadoc line="239">
                Compares this {@code MathContext} with the specified{@code Object} for equality.                
                <param>
                    x {@code Object} to which this {@code MathContext} is to
                      be compared.                    
                </param>
                <return>
                    {@code true} if and only if the specified {@code Object} is
                      a {@code MathContext} object which has exactly the same
                      settings as this object                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="249">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <comment line="256">
                    no need for .equals()                    
                </comment>
                <declaration name="mc" type="MathContext" line="250"/>
            </method>
            <javadoc line="258">
                Returns the hash code for this {@code MathContext}.                
                <return>
                    hash code for this {@code MathContext}                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="263"/>
            <javadoc line="267">
                Returns the string representation of this {@code MathContext}.
                  The {@code String} returned represents the settings of the{@code MathContext} object as two space-delimited words
                  (separated by a single space character, &lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;,
                  and with no leading or trailing white space), as follows:
                  &lt;ol&gt;
                  &lt;li&gt;
                  The string {@code &quot;precision=&quot;}, immediately followed
                  by the value of the precision setting as a numeric string as if
                  generated by the {@link Integer#toString(int) Integer.toString}method.
                  &lt;li&gt;
                  The string {@code &quot;roundingMode=&quot;}, immediately
                  followed by the value of the {@code roundingMode} setting as a
                  word.  This word will be the same as the name of the
                  corresponding public constant in the {@link RoundingMode}enum.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  For example:
                  &lt;pre&gt;
                  precision=9 roundingMode=HALF_UP
                  &lt;/pre&gt;
                  Additional words may be appended to the result of{@code toString} in the future if more properties are added to
                  this class.                
                <return>
                    a {@code String} representing the context settings                    
                </return>
            </javadoc>
            <method name="toString" type="java.lang.String" line="299"/>
            <javadoc line="306">
                Reconstitute the {@code MathContext} instance from a stream (that is,
                  deserialize it).                
                <param>
                    s the stream being read.                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="313">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="315">
                    read in all fields                    
                </comment>
                <comment line="316">
                    validate possibly bad fields                    
                </comment>
                <scope line="316">
                    <declaration name="message" type="String" line="317"/>
                </scope>
                <scope line="320">
                    <declaration name="message" type="String" line="321"/>
                </scope>
            </method>
        </class>
    </source>