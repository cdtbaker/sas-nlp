<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.math">
        <import package="java.util.Arrays"/>
        <import package="java.math.BigInteger.LONG_MASK"/>
        <import package="java.math.BigDecimal.INFLATED"/>
        <class name="MutableBigInteger" line="5">
            <declaration name="value" type="int[]" line="6"/>
            <javadoc line="6">
                Holds the magnitude of this MutableBigInteger in big endian order.
                  The magnitude may start at an offset into the value array, and it may
                  end before the length of the value array.                
            </javadoc>
            <declaration name="intLen" type="int" line="12"/>
            <javadoc line="12">
                The number of ints of the value array that are currently used
                  to hold the magnitude of this MutableBigInteger. The magnitude starts
                  at an offset and offset + intLen may be less than value.length.                
            </javadoc>
            <declaration name="offset" type="int" line="18"/>
            <javadoc line="18">
                The offset into the value array where the magnitude of this
                  MutableBigInteger begins.                
            </javadoc>
            <declaration name="ONE" type="MutableBigInteger" line="23"/>
            <javadoc line="23">
                MutableBigInteger with one element value array with the value 1. Used by
                  BigDecimal divideAndRound to increment the quotient. Use this constant
                  only when the method is not going to modify this object.                
            </javadoc>
            <javadoc line="29">
                The default constructor. An empty MutableBigInteger is created with
                  a one word capacity.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="33"/>
            <javadoc line="37">
                Construct a new MutableBigInteger with a magnitude specified by
                  the int val.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="41">
                <params>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="46">
                Construct a new MutableBigInteger with the specified value array
                  up to the length of the array supplied.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="50">
                <params>
                    <param name="val" type="int[]"/>
                </params>
            </method>
            <javadoc line="54">
                Construct a new MutableBigInteger with a magnitude equal to the
                  specified BigInteger.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="58">
                <params>
                    <param name="b" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="62">
                Construct a new MutableBigInteger with a magnitude equal to the
                  specified MutableBigInteger.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="66">
                <params>
                    <param name="val" type="MutableBigInteger"/>
                </params>
            </method>
            <javadoc line="70">
                Internal helper method to return the magnitude array. The caller is not
                  supposed to modify the returned array.                
            </javadoc>
            <method name="getMagnitudeArray" type="int[]" line="74"/>
            <javadoc line="78">
                Convert this MutableBigInteger to a long value. The caller has to make
                  sure this MutableBigInteger can be fit into long.                
            </javadoc>
            <method name="toLong" type="long" line="82"/>
            <javadoc line="88">
                Convert this MutableBigInteger to a BigInteger object.                
            </javadoc>
            <method name="toBigInteger" type="BigInteger" line="91">
                <params>
                    <param name="sign" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Convert this MutableBigInteger to BigDecimal object with the specified sign
                  and scale.                
            </javadoc>
            <method name="toBigDecimal" type="BigDecimal" line="99">
                <params>
                    <param name="sign" type="int"/>
                    <param name="scale" type="int"/>
                </params>
                <declaration name="mag" type="int[]" line="101"/>
                <declaration name="len" type="int" line="102"/>
                <declaration name="d" type="int" line="103"/>
                <declaration name="v" type="long" line="105"/>
            </method>
            <javadoc line="108">
                Clear out a MutableBigInteger for reuse.                
            </javadoc>
            <method name="clear" type="void" line="111"/>
            <javadoc line="115">
                Set a MutableBigInteger to zero, removing its offset.                
            </javadoc>
            <method name="reset" type="void" line="118"/>
            <javadoc line="121">
                Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1
                  as this MutableBigInteger is numerically less than, equal to, or
                  greater than &lt;tt&gt;b&lt;/tt&gt;.                
            </javadoc>
            <method name="compare" type="int" line="126">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <declaration name="blen" type="int" line="127"/>
                <declaration name="bval" type="int[]" line="130"/>
                <scope line="131">
                    <declaration name="b1" type="int" line="132"/>
                    <declaration name="b2" type="int" line="133"/>
                </scope>
            </method>
            <javadoc line="139">
                Compare this against half of a MutableBigInteger object (Needed for
                  remainder tests).
                  Assumes no leading unnecessary zeros, which holds for results
                  from divide().                
            </javadoc>
            <method name="compareHalf" type="int" line="145">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <declaration name="blen" type="int" line="146"/>
                <declaration name="len" type="int" line="147"/>
                <declaration name="bval" type="int[]" line="151"/>
                <declaration name="bstart" type="int" line="152"/>
                <declaration name="carry" type="int" line="153"/>
                <scope line="154">
                    <scope line="155"/>
                </scope>
                <declaration name="val" type="int[]" line="161"/>
                <scope line="162">
                    <declaration name="bv" type="int" line="163"/>
                    <declaration name="hb" type="long" line="164"/>
                    <declaration name="v" type="long" line="165"/>
                </scope>
            </method>
            <javadoc line="171">
                Return the index of the lowest set bit in this MutableBigInteger. If the
                  magnitude of this MutableBigInteger is zero, -1 is returned.                
            </javadoc>
            <method name="getLowestSetBit" type="int" line="175">
                <declaration name="j" type="int" line="177"/>
            </method>
            <javadoc line="183">
                Return the int in use in this MutableBigInteger at the specified
                  index. This method is not used because it is not inlined on all
                  platforms.                
            </javadoc>
            <method name="getInt" type="int" line="188">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="191">
                Return a long which is equal to the unsigned value of the int in
                  use in this MutableBigInteger at the specified index. This method is
                  not used because it is not inlined on all platforms.                
            </javadoc>
            <method name="getLong" type="long" line="196">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="199">
                Ensure that the MutableBigInteger is in normal form, specifically
                  making sure that there are no leading zeros, and that if the
                  magnitude is zero, then intLen is zero.                
            </javadoc>
            <method name="normalize" type="void" line="204">
                <scope line="205"/>
                <declaration name="index" type="int" line="209"/>
                <declaration name="indexBound" type="int" line="211"/>
                <scope line="212"/>
                <declaration name="numZeros" type="int" line="216"/>
            </method>
            <javadoc line="220">
                If this MutableBigInteger cannot hold len words, increase the size
                  of the value array to len words.                
            </javadoc>
            <method name="ensureCapacity" type="void" line="224">
                <params>
                    <param name="len" type="int"/>
                </params>
                <scope line="225"/>
            </method>
            <javadoc line="231">
                Convert this MutableBigInteger into an int array with no leading
                  zeros, of a length that is equal to this MutableBigInteger&apos;s intLen.                
            </javadoc>
            <method name="toIntArray" type="int[]" line="235">
                <declaration name="result" type="int[]" line="236"/>
            </method>
            <javadoc line="240">
                Sets the int at index+offset in this MutableBigInteger to val.
                  This does not get inlined on all platforms so it is not used
                  as often as originally intended.                
            </javadoc>
            <method name="setInt" type="void" line="245">
                <params>
                    <param name="index" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="248">
                Sets this MutableBigInteger&apos;s value array to the specified array.
                  The intLen is set to the specified length.                
            </javadoc>
            <method name="setValue" type="void" line="252">
                <params>
                    <param name="val" type="int[]"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="257">
                Sets this MutableBigInteger&apos;s value array to a copy of the specified
                  array. The intLen is set to the length of the new array.                
            </javadoc>
            <method name="copyValue" type="void" line="261">
                <params>
                    <param name="src" type="MutableBigInteger"/>
                </params>
                <declaration name="len" type="int" line="262"/>
            </method>
            <javadoc line="268">
                Sets this MutableBigInteger&apos;s value array to a copy of the specified
                  array. The intLen is set to the length of the specified array.                
            </javadoc>
            <method name="copyValue" type="void" line="272">
                <params>
                    <param name="val" type="int[]"/>
                </params>
                <declaration name="len" type="int" line="273"/>
            </method>
            <javadoc line="279">
                Returns true iff this MutableBigInteger has a value of one.                
            </javadoc>
            <method name="isOne" type="boolean" line="282"/>
            <javadoc line="285">
                Returns true iff this MutableBigInteger has a value of zero.                
            </javadoc>
            <method name="isZero" type="boolean" line="288"/>
            <javadoc line="291">
                Returns true iff this MutableBigInteger is even.                
            </javadoc>
            <method name="isEven" type="boolean" line="294"/>
            <javadoc line="297">
                Returns true iff this MutableBigInteger is odd.                
            </javadoc>
            <method name="isOdd" type="boolean" line="300"/>
            <javadoc line="303">
                Returns true iff this MutableBigInteger is in normal form. A
                  MutableBigInteger is in normal form if it has no leading zeros
                  after the offset, and intLen + offset &lt;= value.length.                
            </javadoc>
            <method name="isNormal" type="boolean" line="308"/>
            <javadoc line="313">
                Returns a String representation of this MutableBigInteger in radix 10.                
            </javadoc>
            <method name="toString" type="String" line="316">
                <declaration name="b" type="BigInteger" line="317"/>
            </method>
            <javadoc line="320">
                Right shift this MutableBigInteger n bits. The MutableBigInteger is left
                  in normal form.                
            </javadoc>
            <method name="rightShift" type="void" line="324">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="nInts" type="int" line="326"/>
                <declaration name="nBits" type="int" line="327"/>
                <declaration name="bitsInHighWord" type="int" line="330"/>
                <scope line="331"/>
                <scope line="335"/>
            </method>
            <javadoc line="339">
                Left shift this MutableBigInteger n bits.                
            </javadoc>
            <method name="leftShift" type="void" line="342">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="nInts" type="int" line="344"/>
                <declaration name="nBits" type="int" line="345"/>
                <declaration name="bitsInHighWord" type="int" line="346"/>
                <scope line="347"/>
                <declaration name="newLen" type="int" line="351"/>
                <scope line="353">
                    <declaration name="result" type="int[]" line="354"/>
                </scope>
                <scope line="358"/>
                <scope line="361"/>
            </method>
            <javadoc line="371">
                A primitive used for division. This method adds in one multiple of the
                  divisor a back to the dividend result at a specified offset. It is used
                  when qhat was estimated too large, and must be adjusted.                
            </javadoc>
            <method name="divadd" type="int" line="376">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="result" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="carry" type="long" line="377"/>
                <scope line="378">
                    <declaration name="sum" type="long" line="379"/>
                </scope>
            </method>
            <javadoc line="385">
                This method is used for division. It multiplies an n word input a by one
                  word input x, and subtracts the n word product from q. This is needed
                  when subtracting qhatdivisor from dividend.                
            </javadoc>
            <method name="mulsub" type="int" line="390">
                <params>
                    <param name="q" type="int[]"/>
                    <param name="a" type="int[]"/>
                    <param name="x" type="int"/>
                    <param name="len" type="int"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="xLong" type="long" line="391"/>
                <declaration name="carry" type="long" line="392"/>
                <scope line="394">
                    <declaration name="product" type="long" line="395"/>
                    <declaration name="difference" type="long" line="396"/>
                </scope>
            </method>
            <javadoc line="402">
                Right shift this MutableBigInteger n bits, where n is
                  less than 32.
                  Assumes that intLen &gt; 0, n &gt; 0 for speed                
            </javadoc>
            <method name="primitiveRightShift" type="void" line="407">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="val" type="int[]" line="408"/>
                <declaration name="n2" type="int" line="409"/>
                <scope line="410">
                    <declaration name="b" type="int" line="411"/>
                </scope>
            </method>
            <javadoc line="417">
                Left shift this MutableBigInteger n bits, where n is
                  less than 32.
                  Assumes that intLen &gt; 0, n &gt; 0 for speed                
            </javadoc>
            <method name="primitiveLeftShift" type="void" line="422">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="val" type="int[]" line="423"/>
                <declaration name="n2" type="int" line="424"/>
                <scope line="425">
                    <declaration name="b" type="int" line="426"/>
                </scope>
            </method>
            <javadoc line="432">
                Adds the contents of two MutableBigInteger objects.The result
                  is placed within this MutableBigInteger.
                  The contents of the addend are not changed.                
            </javadoc>
            <method name="add" type="void" line="437">
                <params>
                    <param name="addend" type="MutableBigInteger"/>
                </params>
                <declaration name="x" type="int" line="438"/>
                <declaration name="y" type="int" line="439"/>
                <declaration name="resultLen" type="int" line="440"/>
                <declaration name="result" type="int[]" line="441"/>
                <declaration name="rstart" type="int" line="442"/>
                <declaration name="sum" type="long" line="443"/>
                <declaration name="carry" type="long" line="444"/>
                <scope line="445"/>
                <scope line="452"/>
                <scope line="459"/>
                <scope line="465">
                    <scope line="467">
                        <declaration name="temp" type="int" line="468"/>
                    </scope>
                    <scope line="473"/>
                </scope>
            </method>
            <javadoc line="481">
                Subtracts the smaller of this and b from the larger and places the
                  result into this MutableBigInteger.                
            </javadoc>
            <method name="subtract" type="int" line="485">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <declaration name="a" type="MutableBigInteger" line="486"/>
                <declaration name="result" type="int[]" line="487"/>
                <declaration name="sign" type="int" line="488"/>
                <scope line="489"/>
                <scope line="493">
                    <declaration name="tmp" type="MutableBigInteger" line="494"/>
                </scope>
                <declaration name="resultLen" type="int" line="498"/>
                <declaration name="diff" type="long" line="500"/>
                <declaration name="x" type="int" line="501"/>
                <declaration name="y" type="int" line="502"/>
                <declaration name="rstart" type="int" line="503"/>
                <scope line="504"/>
                <scope line="510"/>
            </method>
            <javadoc line="521">
                Subtracts the smaller of a and b from the larger and places the result
                  into the larger. Returns 1 if the answer is in a, -1 if in b, 0 if no
                  operation was performed.                
            </javadoc>
            <method name="difference" type="int" line="526">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <declaration name="a" type="MutableBigInteger" line="527"/>
                <declaration name="sign" type="int" line="528"/>
                <scope line="530">
                    <declaration name="tmp" type="MutableBigInteger" line="531"/>
                </scope>
                <declaration name="diff" type="long" line="535"/>
                <declaration name="x" type="int" line="536"/>
                <declaration name="y" type="int" line="537"/>
                <scope line="538"/>
                <scope line="544"/>
            </method>
            <javadoc line="552">
                Multiply the contents of two MutableBigInteger objects. The result is
                  placed into MutableBigInteger z. The contents of y are not changed.                
            </javadoc>
            <method name="multiply" type="void" line="556">
                <params>
                    <param name="y" type="MutableBigInteger"/>
                    <param name="z" type="MutableBigInteger"/>
                </params>
                <declaration name="xLen" type="int" line="557"/>
                <declaration name="yLen" type="int" line="558"/>
                <declaration name="newLen" type="int" line="559"/>
                <declaration name="carry" type="long" line="563"/>
                <scope line="564">
                    <declaration name="product" type="long" line="565"/>
                </scope>
                <scope line="570">
                    <scope line="572">
                        <declaration name="product" type="long" line="573"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="581">
                Multiply the contents of this MutableBigInteger by the word y. The
                  result is placed into z.                
            </javadoc>
            <method name="mul" type="void" line="585">
                <params>
                    <param name="y" type="int"/>
                    <param name="z" type="MutableBigInteger"/>
                </params>
                <scope line="586"/>
                <scope line="590"/>
                <declaration name="ylong" type="long" line="594"/>
                <declaration name="zval" type="int[]" line="595"/>
                <declaration name="carry" type="long" line="596"/>
                <scope line="597">
                    <declaration name="product" type="long" line="598"/>
                </scope>
                <scope line="602"/>
                <scope line="606"/>
            </method>
            <javadoc line="613">
                This method is used for division of an n word dividend by a one word
                  divisor. The quotient is placed into quotient. The one word divisor is
                  specified by divisor.                
                <return>
                    the remainder of the division is returned.                    
                </return>
            </javadoc>
            <method name="divideOneWord" type="int" line="619">
                <params>
                    <param name="divisor" type="int"/>
                    <param name="quotient" type="MutableBigInteger"/>
                </params>
                <declaration name="divisorLong" type="long" line="620"/>
                <scope line="621">
                    <declaration name="dividendValue" type="long" line="622"/>
                    <declaration name="q" type="int" line="623"/>
                    <declaration name="r" type="int" line="624"/>
                </scope>
                <declaration name="shift" type="int" line="633"/>
                <declaration name="rem" type="int" line="634"/>
                <declaration name="remLong" type="long" line="635"/>
                <scope line="636"/>
                <scope line="639"/>
                <declaration name="xlen" type="int" line="644"/>
                <declaration name="qWord" type="int[]" line="645"/>
                <scope line="646">
                    <declaration name="dividendEstimate" type="long" line="647"/>
                    <scope line="648"/>
                    <scope line="652"/>
                </scope>
            </method>
            <javadoc line="663">
                Calculates the quotient of this div b and places the quotient in the
                  provided MutableBigInteger objects and the remainder object is returned.
                  Uses Algorithm D in Knuth section 4.3.1.
                  Many optimizations to that algorithm have been adapted from the Colin
                  Plumb C library.
                  It special cases one word divisors for speed. The content of b is not
                  changed.                
            </javadoc>
            <method name="divide" type="MutableBigInteger" line="672">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                    <param name="quotient" type="MutableBigInteger"/>
                </params>
                <scope line="674"/>
                <declaration name="cmp" type="int" line="678"/>
                <scope line="679"/>
                <scope line="683"/>
                <scope line="689">
                    <declaration name="r" type="int" line="690"/>
                </scope>
                <declaration name="div" type="int[]" line="694"/>
            </method>
            <javadoc line="697">
                Internally used  to calculate the quotient of this div v and places the
                  quotient in the provided MutableBigInteger object and the remainder is
                  returned.                
                <return>
                    the remainder of the division will be returned.                    
                </return>
            </javadoc>
            <method name="divide" type="long" line="703">
                <params>
                    <param name="v" type="long"/>
                    <param name="quotient" type="MutableBigInteger"/>
                </params>
                <scope line="705"/>
                <declaration name="d" type="int" line="710"/>
                <scope line="713">
                    <declaration name="div" type="int[]" line="714"/>
                </scope>
            </method>
            <javadoc line="718">
                Divide this MutableBigInteger by the divisor represented by its magnitude
                  array. The quotient will be placed into the provided quotient object &amp;
                  the remainder object is returned.                
            </javadoc>
            <method name="divideMagnitude" type="MutableBigInteger" line="723">
                <params>
                    <param name="divisor" type="int[]"/>
                    <param name="quotient" type="MutableBigInteger"/>
                </params>
                <declaration name="rem" type="MutableBigInteger" line="724"/>
                <declaration name="nlen" type="int" line="728"/>
                <declaration name="dlen" type="int" line="729"/>
                <declaration name="limit" type="int" line="730"/>
                <scope line="731"/>
                <declaration name="q" type="int[]" line="736"/>
                <declaration name="shift" type="int" line="737"/>
                <scope line="738"/>
                <scope line="742"/>
                <declaration name="dh" type="int" line="747"/>
                <declaration name="dhLong" type="long" line="748"/>
                <declaration name="dl" type="int" line="749"/>
                <declaration name="qWord" type="int[]" line="750"/>
                <scope line="751">
                    <declaration name="qhat" type="int" line="752"/>
                    <declaration name="qrem" type="int" line="753"/>
                    <declaration name="skipCorrection" type="boolean" line="754"/>
                    <declaration name="nh" type="int" line="755"/>
                    <declaration name="nh2" type="int" line="756"/>
                    <declaration name="nm" type="int" line="757"/>
                    <scope line="758"/>
                    <scope line="763">
                        <declaration name="nChunk" type="long" line="764"/>
                        <scope line="765"/>
                        <scope line="769"/>
                    </scope>
                    <scope line="776">
                        <declaration name="nl" type="long" line="777"/>
                        <declaration name="rs" type="long" line="778"/>
                        <declaration name="estProduct" type="long" line="779"/>
                        <scope line="780">
                            <scope line="783"/>
                        </scope>
                    </scope>
                    <declaration name="borrow" type="int" line="791"/>
                    <scope line="792"/>
                </scope>
            </method>
            <javadoc line="803">
                Compare two longs as if they were unsigned.
                  Returns true iff one is bigger than two.                
            </javadoc>
            <method name="unsignedLongCompare" type="boolean" line="807">
                <params>
                    <param name="one" type="long"/>
                    <param name="two" type="long"/>
                </params>
            </method>
            <javadoc line="810">
                This method divides a long quantity by an int to estimate
                  qhat for two multi precision numbers. It is used when
                  the signed value of n is less than zero.                
            </javadoc>
            <method name="divWord" type="void" line="815">
                <params>
                    <param name="result" type="int[]"/>
                    <param name="n" type="long"/>
                    <param name="d" type="int"/>
                </params>
                <declaration name="dLong" type="long" line="816"/>
                <scope line="817"/>
                <declaration name="q" type="long" line="822"/>
                <declaration name="r" type="long" line="823"/>
                <scope line="824"/>
                <scope line="828"/>
            </method>
            <javadoc line="835">
                Calculate GCD of this and b. This and b are changed by the computation.                
            </javadoc>
            <method name="hybridGCD" type="MutableBigInteger" line="838">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <declaration name="a" type="MutableBigInteger" line="839"/>
                <declaration name="q" type="MutableBigInteger" line="840"/>
                <scope line="841">
                    <declaration name="r" type="MutableBigInteger" line="843"/>
                </scope>
            </method>
            <javadoc line="849">
                Calculate GCD of this and v.
                  Assumes that this and v are not zero.                
            </javadoc>
            <method name="binaryGCD" type="MutableBigInteger" line="853">
                <params>
                    <param name="v" type="MutableBigInteger"/>
                </params>
                <declaration name="u" type="MutableBigInteger" line="854"/>
                <declaration name="r" type="MutableBigInteger" line="855"/>
                <declaration name="s1" type="int" line="856"/>
                <declaration name="s2" type="int" line="857"/>
                <declaration name="k" type="int" line="858"/>
                <scope line="859"/>
                <declaration name="uOdd" type="boolean" line="863"/>
                <declaration name="t" type="MutableBigInteger" line="864"/>
                <declaration name="tsign" type="int" line="865"/>
                <declaration name="lb" type="int" line="866"/>
                <scope line="867">
                    <scope line="871">
                        <declaration name="x" type="int" line="872"/>
                        <declaration name="y" type="int" line="873"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="887">
                Calculate GCD of a and b interpreted as unsigned integers.                
            </javadoc>
            <method name="binaryGcd" type="int" line="890">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="aZeros" type="int" line="893"/>
                <declaration name="bZeros" type="int" line="894"/>
                <declaration name="t" type="int" line="897"/>
                <scope line="898">
                    <scope line="899"/>
                    <scope line="903"/>
                </scope>
            </method>
            <javadoc line="910">
                Returns the modInverse of this mod p. This and p are not affected by
                  the operation.                
            </javadoc>
            <method name="mutableModInverse" type="MutableBigInteger" line="914">
                <params>
                    <param name="p" type="MutableBigInteger"/>
                </params>
                <declaration name="powersOf2" type="int" line="917"/>
                <declaration name="oddMod" type="MutableBigInteger" line="918"/>
                <declaration name="oddPart" type="MutableBigInteger" line="921"/>
                <declaration name="evenPart" type="MutableBigInteger" line="922"/>
                <declaration name="y1" type="MutableBigInteger" line="923"/>
                <declaration name="y2" type="MutableBigInteger" line="924"/>
                <declaration name="temp1" type="MutableBigInteger" line="925"/>
                <declaration name="temp2" type="MutableBigInteger" line="926"/>
                <declaration name="result" type="MutableBigInteger" line="927"/>
            </method>
            <method name="modInverseMP2" type="MutableBigInteger" line="935">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="t" type="int" line="938"/>
                <scope line="939"/>
                <declaration name="pLong" type="long" line="943"/>
                <declaration name="tLong" type="long" line="945"/>
                <declaration name="result" type="MutableBigInteger" line="948"/>
            </method>
            <method name="inverseMod32" type="int" line="955">
                <params>
                    <param name="val" type="int"/>
                </params>
                <declaration name="t" type="int" line="956"/>
            </method>
            <method name="modInverseBP2" type="MutableBigInteger" line="963">
                <params>
                    <param name="mod" type="MutableBigInteger"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="966">
                Calculate the multiplicative inverse of this mod mod, where mod is odd.
                  This and mod are not changed by the calculation.
                  This method implements an algorithm due to Richard Schroeppel, that uses
                  the same intermediate representation as Montgomery Reduction
                  (&quot;Montgomery Form&quot;).  The algorithm is described in an unpublished
                  manuscript entitled &quot;Fast Modular Reciprocals.&quot;                
            </javadoc>
            <method name="modInverse" type="MutableBigInteger" line="974">
                <params>
                    <param name="mod" type="MutableBigInteger"/>
                </params>
                <declaration name="p" type="MutableBigInteger" line="975"/>
                <declaration name="f" type="MutableBigInteger" line="976"/>
                <declaration name="g" type="MutableBigInteger" line="977"/>
                <declaration name="c" type="SignedMutableBigInteger" line="978"/>
                <declaration name="d" type="SignedMutableBigInteger" line="979"/>
                <declaration name="temp" type="MutableBigInteger" line="980"/>
                <declaration name="sTemp" type="SignedMutableBigInteger" line="981"/>
                <declaration name="k" type="int" line="982"/>
                <scope line="983">
                    <declaration name="trailingZeros" type="int" line="984"/>
                </scope>
                <scope line="989">
                    <scope line="991"/>
                    <scope line="999"/>
                    <scope line="1003"/>
                    <declaration name="trailingZeros" type="int" line="1007"/>
                </scope>
            </method>
            <method name="fixup" type="MutableBigInteger" line="1015">
                <params>
                    <param name="c" type="MutableBigInteger"/>
                    <param name="p" type="MutableBigInteger"/>
                    <param name="k" type="int"/>
                </params>
                <declaration name="temp" type="MutableBigInteger" line="1016"/>
                <declaration name="r" type="int" line="1017"/>
                <scope line="1018">
                    <declaration name="v" type="int" line="1019"/>
                </scope>
                <declaration name="numBits" type="int" line="1024"/>
                <scope line="1025">
                    <declaration name="v" type="int" line="1026"/>
                </scope>
            </method>
            <javadoc line="1035">
                Uses the extended Euclidean algorithm to compute the modInverse of base
                  mod a modulus that is a power of 2. The modulus is 2^k.                
            </javadoc>
            <method name="euclidModInverse" type="MutableBigInteger" line="1039">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="b" type="MutableBigInteger" line="1040"/>
                <declaration name="mod" type="MutableBigInteger" line="1042"/>
                <declaration name="a" type="MutableBigInteger" line="1043"/>
                <declaration name="q" type="MutableBigInteger" line="1044"/>
                <declaration name="r" type="MutableBigInteger" line="1045"/>
                <declaration name="swapper" type="MutableBigInteger" line="1046"/>
                <declaration name="t1" type="MutableBigInteger" line="1049"/>
                <declaration name="t0" type="MutableBigInteger" line="1050"/>
                <declaration name="temp" type="MutableBigInteger" line="1051"/>
                <scope line="1052"/>
            </method>
        </class>
    </source>