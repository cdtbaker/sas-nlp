<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.math">
        <import package="java.util.Arrays"/>
        <import package="java.math.BigInteger.LONG_MASK"/>
        <import package="java.math.BigDecimal.INFLATED"/>
        <class name="MutableBigInteger" line="49">
            <comment line="71">
                Constants                
            </comment>
            <comment line="79">
                Constructors                
            </comment>
            <comment line="1261">
                Calculate the multiplicative inverse of this mod 2^k.                
            </comment>
            <comment line="1293">
                Returns the multiplicative inverse of val mod 2^32.  Assumes val is odd.                
            </comment>
            <comment line="1306">
                Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.                
            </comment>
            <comment line="1376">
                The Fixup Algorithm
                 Calculates X such that X = C  2^(-k) (mod P)
                 Assumes C&lt;P and P is odd.                
            </comment>
            <declaration name="value" type="int[]" line="50"/>
            <javadoc line="50">
                Holds the magnitude of this MutableBigInteger in big endian order.
                  The magnitude may start at an offset into the value array, and it may
                  end before the length of the value array.                
            </javadoc>
            <declaration name="intLen" type="int" line="57"/>
            <javadoc line="57">
                The number of ints of the value array that are currently used
                  to hold the magnitude of this MutableBigInteger. The magnitude starts
                  at an offset and offset + intLen may be less than value.length.                
            </javadoc>
            <declaration name="offset" type="int" line="64"/>
            <javadoc line="64">
                The offset into the value array where the magnitude of this
                  MutableBigInteger begins.                
            </javadoc>
            <declaration name="ONE" type="MutableBigInteger" line="71"/>
            <javadoc line="71">
                MutableBigInteger with one element value array with the value 1. Used by
                  BigDecimal divideAndRound to increment the quotient. Use this constant
                  only when the method is not going to modify this object.                
            </javadoc>
            <javadoc line="80">
                The default constructor. An empty MutableBigInteger is created with
                  a one word capacity.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="84"/>
            <javadoc line="89">
                Construct a new MutableBigInteger with a magnitude specified by
                  the int val.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="93">
                <params>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Construct a new MutableBigInteger with the specified value array
                  up to the length of the array supplied.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="103">
                <params>
                    <param name="val" type="int[]"/>
                </params>
            </method>
            <javadoc line="108">
                Construct a new MutableBigInteger with a magnitude equal to the
                  specified BigInteger.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="112">
                <params>
                    <param name="b" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="117">
                Construct a new MutableBigInteger with a magnitude equal to the
                  specified MutableBigInteger.                
            </javadoc>
            <method name="MutableBigInteger" type="constructor" line="121">
                <params>
                    <param name="val" type="MutableBigInteger"/>
                </params>
            </method>
            <javadoc line="126">
                Internal helper method to return the magnitude array. The caller is not
                  supposed to modify the returned array.                
            </javadoc>
            <method name="getMagnitudeArray" type="int[]" line="130"/>
            <javadoc line="136">
                Convert this MutableBigInteger to a long value. The caller has to make
                  sure this MutableBigInteger can be fit into long.                
            </javadoc>
            <method name="toLong" type="long" line="140">
                <declaration name="d" type="long" line="144"/>
            </method>
            <javadoc line="148">
                Convert this MutableBigInteger to a BigInteger object.                
            </javadoc>
            <method name="toBigInteger" type="BigInteger" line="151">
                <params>
                    <param name="sign" type="int"/>
                </params>
            </method>
            <javadoc line="157">
                Convert this MutableBigInteger to BigDecimal object with the specified sign
                  and scale.                
            </javadoc>
            <method name="toBigDecimal" type="BigDecimal" line="161">
                <params>
                    <param name="sign" type="int"/>
                    <param name="scale" type="int"/>
                </params>
                <comment line="167">
                    If this MutableBigInteger can&apos;t be fit into long, we need to                    
                </comment>
                <comment line="168">
                    make a BigInteger object for the resultant BigDecimal object.                    
                </comment>
                <declaration name="mag" type="int[]" line="164"/>
                <declaration name="len" type="int" line="165"/>
                <declaration name="d" type="int" line="166"/>
                <declaration name="v" type="long" line="171"/>
            </method>
            <javadoc line="177">
                Clear out a MutableBigInteger for reuse.                
            </javadoc>
            <method name="clear" type="void" line="180"/>
            <javadoc line="186">
                Set a MutableBigInteger to zero, removing its offset.                
            </javadoc>
            <method name="reset" type="void" line="189"/>
            <javadoc line="193">
                Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1
                  as this MutableBigInteger is numerically less than, equal to, or
                  greater than &lt;tt&gt;b&lt;/tt&gt;.                
            </javadoc>
            <method name="compare" type="int" line="198">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <comment line="205">
                    Add Integer.MIN_VALUE to make the comparison act as unsigned integer                    
                </comment>
                <comment line="206">
                    comparison.                    
                </comment>
                <declaration name="blen" type="int" line="199"/>
                <declaration name="bval" type="int[]" line="207"/>
                <scope line="208">
                    <declaration name="b1" type="int" line="209"/>
                    <declaration name="b2" type="int" line="210"/>
                </scope>
            </method>
            <javadoc line="219">
                Compare this against half of a MutableBigInteger object (Needed for
                  remainder tests).
                  Assumes no leading unnecessary zeros, which holds for results
                  from divide().                
            </javadoc>
            <method name="compareHalf" type="int" line="225">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <comment line="237">
                    Only 2 cases left:len == blen or len == blen - 1                    
                </comment>
                <comment line="238">
                    len == blen - 1                    
                </comment>
                <comment line="245">
                    compare values with right-shifted values of b,                    
                </comment>
                <comment line="246">
                    carrying shifted-out bits across words                    
                </comment>
                <comment line="254">
                    carray will be either 0x80000000 or 0                    
                </comment>
                <declaration name="blen" type="int" line="226"/>
                <declaration name="len" type="int" line="227"/>
                <declaration name="bval" type="int[]" line="234"/>
                <declaration name="bstart" type="int" line="235"/>
                <declaration name="carry" type="int" line="236"/>
                <scope line="238">
                    <scope line="239"/>
                </scope>
                <declaration name="val" type="int[]" line="247"/>
                <scope line="248">
                    <declaration name="bv" type="int" line="249"/>
                    <declaration name="hb" type="long" line="250"/>
                    <declaration name="v" type="long" line="251"/>
                </scope>
            </method>
            <javadoc line="259">
                Return the index of the lowest set bit in this MutableBigInteger. If the
                  magnitude of this MutableBigInteger is zero, -1 is returned.                
            </javadoc>
            <method name="getLowestSetBit" type="int" line="263">
                <declaration name="j" type="int" line="266"/>
            </method>
            <javadoc line="275">
                Return the int in use in this MutableBigInteger at the specified
                  index. This method is not used because it is not inlined on all
                  platforms.                
            </javadoc>
            <method name="getInt" type="int" line="280">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="284">
                Return a long which is equal to the unsigned value of the int in
                  use in this MutableBigInteger at the specified index. This method is
                  not used because it is not inlined on all platforms.                
            </javadoc>
            <method name="getLong" type="long" line="289">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="293">
                Ensure that the MutableBigInteger is in normal form, specifically
                  making sure that there are no leading zeros, and that if the
                  magnitude is zero, then intLen is zero.                
            </javadoc>
            <method name="normalize" type="void" line="298">
                <scope line="299"/>
                <declaration name="index" type="int" line="304"/>
                <declaration name="indexBound" type="int" line="308"/>
                <scope line="309"/>
                <declaration name="numZeros" type="int" line="313"/>
            </method>
            <javadoc line="318">
                If this MutableBigInteger cannot hold len words, increase the size
                  of the value array to len words.                
            </javadoc>
            <method name="ensureCapacity" type="void" line="322">
                <params>
                    <param name="len" type="int"/>
                </params>
                <scope line="323"/>
            </method>
            <javadoc line="330">
                Convert this MutableBigInteger into an int array with no leading
                  zeros, of a length that is equal to this MutableBigInteger&apos;s intLen.                
            </javadoc>
            <method name="toIntArray" type="int[]" line="334">
                <declaration name="result" type="int[]" line="335"/>
            </method>
            <javadoc line="341">
                Sets the int at index+offset in this MutableBigInteger to val.
                  This does not get inlined on all platforms so it is not used
                  as often as originally intended.                
            </javadoc>
            <method name="setInt" type="void" line="346">
                <params>
                    <param name="index" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="350">
                Sets this MutableBigInteger&apos;s value array to the specified array.
                  The intLen is set to the specified length.                
            </javadoc>
            <method name="setValue" type="void" line="354">
                <params>
                    <param name="val" type="int[]"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="360">
                Sets this MutableBigInteger&apos;s value array to a copy of the specified
                  array. The intLen is set to the length of the new array.                
            </javadoc>
            <method name="copyValue" type="void" line="364">
                <params>
                    <param name="src" type="MutableBigInteger"/>
                </params>
                <declaration name="len" type="int" line="365"/>
            </method>
            <javadoc line="373">
                Sets this MutableBigInteger&apos;s value array to a copy of the specified
                  array. The intLen is set to the length of the specified array.                
            </javadoc>
            <method name="copyValue" type="void" line="377">
                <params>
                    <param name="val" type="int[]"/>
                </params>
                <declaration name="len" type="int" line="378"/>
            </method>
            <javadoc line="386">
                Returns true iff this MutableBigInteger has a value of one.                
            </javadoc>
            <method name="isOne" type="boolean" line="389"/>
            <javadoc line="393">
                Returns true iff this MutableBigInteger has a value of zero.                
            </javadoc>
            <method name="isZero" type="boolean" line="396"/>
            <javadoc line="400">
                Returns true iff this MutableBigInteger is even.                
            </javadoc>
            <method name="isEven" type="boolean" line="403"/>
            <javadoc line="407">
                Returns true iff this MutableBigInteger is odd.                
            </javadoc>
            <method name="isOdd" type="boolean" line="410"/>
            <javadoc line="414">
                Returns true iff this MutableBigInteger is in normal form. A
                  MutableBigInteger is in normal form if it has no leading zeros
                  after the offset, and intLen + offset &lt;= value.length.                
            </javadoc>
            <method name="isNormal" type="boolean" line="419"/>
            <javadoc line="427">
                Returns a String representation of this MutableBigInteger in radix 10.                
            </javadoc>
            <method name="toString" type="String" line="430">
                <declaration name="b" type="BigInteger" line="431"/>
            </method>
            <javadoc line="435">
                Right shift this MutableBigInteger n bits. The MutableBigInteger is left
                  in normal form.                
            </javadoc>
            <method name="rightShift" type="void" line="439">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="nInts" type="int" line="442"/>
                <declaration name="nBits" type="int" line="443"/>
                <declaration name="bitsInHighWord" type="int" line="447"/>
                <scope line="448"/>
                <scope line="451"/>
            </method>
            <javadoc line="456">
                Left shift this MutableBigInteger n bits.                
            </javadoc>
            <method name="leftShift" type="void" line="459">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="460">
                    If there is enough storage space in this MutableBigInteger already
                     the available space will be used. Space to the right of the used
                     ints in the value array is faster to utilize, so the extra space
                     will be taken from the right if possible.                    
                </comment>
                <comment line="472">
                    If shift can be done without moving words, do so                    
                </comment>
                <comment line="482">
                    The array must grow                    
                </comment>
                <comment line="488">
                    Use space on right                    
                </comment>
                <comment line="492">
                    Must use space on left                    
                </comment>
                <declaration name="nInts" type="int" line="468"/>
                <declaration name="nBits" type="int" line="469"/>
                <declaration name="bitsInHighWord" type="int" line="470"/>
                <scope line="473"/>
                <declaration name="newLen" type="int" line="478"/>
                <scope line="481">
                    <declaration name="result" type="int[]" line="483"/>
                </scope>
                <scope line="487"/>
                <scope line="491"/>
            </method>
            <javadoc line="508">
                A primitive used for division. This method adds in one multiple of the
                  divisor a back to the dividend result at a specified offset. It is used
                  when qhat was estimated too large, and must be adjusted.                
            </javadoc>
            <method name="divadd" type="int" line="513">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="result" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="carry" type="long" line="514"/>
                <scope line="516">
                    <declaration name="sum" type="long" line="517"/>
                </scope>
            </method>
            <javadoc line="525">
                This method is used for division. It multiplies an n word input a by one
                  word input x, and subtracts the n word product from q. This is needed
                  when subtracting qhatdivisor from dividend.                
            </javadoc>
            <method name="mulsub" type="int" line="530">
                <params>
                    <param name="q" type="int[]"/>
                    <param name="a" type="int[]"/>
                    <param name="x" type="int"/>
                    <param name="len" type="int"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="xLong" type="long" line="531"/>
                <declaration name="carry" type="long" line="532"/>
                <scope line="535">
                    <declaration name="product" type="long" line="536"/>
                    <declaration name="difference" type="long" line="537"/>
                </scope>
            </method>
            <javadoc line="546">
                Right shift this MutableBigInteger n bits, where n is
                  less than 32.
                  Assumes that intLen &gt; 0, n &gt; 0 for speed                
            </javadoc>
            <method name="primitiveRightShift" type="void" line="551">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="val" type="int[]" line="552"/>
                <declaration name="n2" type="int" line="553"/>
                <scope line="554">
                    <declaration name="b" type="int" line="555"/>
                </scope>
            </method>
            <javadoc line="562">
                Left shift this MutableBigInteger n bits, where n is
                  less than 32.
                  Assumes that intLen &gt; 0, n &gt; 0 for speed                
            </javadoc>
            <method name="primitiveLeftShift" type="void" line="567">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="val" type="int[]" line="568"/>
                <declaration name="n2" type="int" line="569"/>
                <scope line="570">
                    <declaration name="b" type="int" line="571"/>
                </scope>
            </method>
            <javadoc line="578">
                Adds the contents of two MutableBigInteger objects.The result
                  is placed within this MutableBigInteger.
                  The contents of the addend are not changed.                
            </javadoc>
            <method name="add" type="void" line="583">
                <params>
                    <param name="addend" type="MutableBigInteger"/>
                </params>
                <comment line="593">
                    Add common parts of both numbers                    
                </comment>
                <comment line="602">
                    Add remainder of the longer number                    
                </comment>
                <comment line="618">
                    Result must grow in length                    
                </comment>
                <comment line="622">
                    Result one word longer from carry-out; copy low-order                    
                </comment>
                <comment line="623">
                    bits into new result.                    
                </comment>
                <declaration name="x" type="int" line="584"/>
                <declaration name="y" type="int" line="585"/>
                <declaration name="resultLen" type="int" line="586"/>
                <declaration name="result" type="int[]" line="587"/>
                <declaration name="rstart" type="int" line="589"/>
                <declaration name="sum" type="long" line="590"/>
                <declaration name="carry" type="long" line="591"/>
                <scope line="594"/>
                <scope line="603"/>
                <scope line="611"/>
                <scope line="618">
                    <scope line="620">
                        <declaration name="temp" type="int" line="621"/>
                    </scope>
                    <scope line="627"/>
                </scope>
            </method>
            <javadoc line="638">
                Subtracts the smaller of this and b from the larger and places the
                  result into this MutableBigInteger.                
            </javadoc>
            <method name="subtract" type="int" line="642">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <comment line="667">
                    Subtract common parts of both numbers                    
                </comment>
                <comment line="675">
                    Subtract remainder of longer number                    
                </comment>
                <declaration name="a" type="MutableBigInteger" line="643"/>
                <declaration name="result" type="int[]" line="645"/>
                <declaration name="sign" type="int" line="646"/>
                <scope line="648"/>
                <scope line="652">
                    <declaration name="tmp" type="MutableBigInteger" line="653"/>
                </scope>
                <declaration name="resultLen" type="int" line="658"/>
                <declaration name="diff" type="long" line="662"/>
                <declaration name="x" type="int" line="663"/>
                <declaration name="y" type="int" line="664"/>
                <declaration name="rstart" type="int" line="665"/>
                <scope line="668"/>
                <scope line="676"/>
            </method>
            <javadoc line="689">
                Subtracts the smaller of a and b from the larger and places the result
                  into the larger. Returns 1 if the answer is in a, -1 if in b, 0 if no
                  operation was performed.                
            </javadoc>
            <method name="difference" type="int" line="694">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <comment line="709">
                    Subtract common parts of both numbers                    
                </comment>
                <comment line="716">
                    Subtract remainder of longer number                    
                </comment>
                <declaration name="a" type="MutableBigInteger" line="695"/>
                <declaration name="sign" type="int" line="696"/>
                <scope line="699">
                    <declaration name="tmp" type="MutableBigInteger" line="700"/>
                </scope>
                <declaration name="diff" type="long" line="705"/>
                <declaration name="x" type="int" line="706"/>
                <declaration name="y" type="int" line="707"/>
                <scope line="710"/>
                <scope line="717"/>
            </method>
            <javadoc line="727">
                Multiply the contents of two MutableBigInteger objects. The result is
                  placed into MutableBigInteger z. The contents of y are not changed.                
            </javadoc>
            <method name="multiply" type="void" line="731">
                <params>
                    <param name="y" type="MutableBigInteger"/>
                    <param name="z" type="MutableBigInteger"/>
                </params>
                <comment line="736">
                    Put z into an appropriate state to receive product                    
                </comment>
                <comment line="742">
                    The first iteration is hoisted out of the loop to avoid extra add                    
                </comment>
                <comment line="752">
                    Perform the multiplication word by word                    
                </comment>
                <comment line="765">
                    Remove leading zeros from product                    
                </comment>
                <declaration name="xLen" type="int" line="732"/>
                <declaration name="yLen" type="int" line="733"/>
                <declaration name="newLen" type="int" line="734"/>
                <declaration name="carry" type="long" line="743"/>
                <scope line="744">
                    <declaration name="product" type="long" line="745"/>
                </scope>
                <scope line="753">
                    <scope line="755">
                        <declaration name="product" type="long" line="756"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="769">
                Multiply the contents of this MutableBigInteger by the word y. The
                  result is placed into z.                
            </javadoc>
            <method name="mul" type="void" line="773">
                <params>
                    <param name="y" type="int"/>
                    <param name="z" type="MutableBigInteger"/>
                </params>
                <comment line="784">
                    Perform the multiplication word by word                    
                </comment>
                <scope line="774"/>
                <scope line="779"/>
                <declaration name="ylong" type="long" line="785"/>
                <declaration name="zval" type="int[]" line="786"/>
                <declaration name="carry" type="long" line="788"/>
                <scope line="789">
                    <declaration name="product" type="long" line="790"/>
                </scope>
                <scope line="795"/>
                <scope line="798"/>
            </method>
            <javadoc line="806">
                This method is used for division of an n word dividend by a one word
                  divisor. The quotient is placed into quotient. The one word divisor is
                  specified by divisor.                
                <return>
                    the remainder of the division is returned.                    
                </return>
            </javadoc>
            <method name="divideOneWord" type="int" line="814">
                <params>
                    <param name="divisor" type="int"/>
                    <param name="quotient" type="MutableBigInteger"/>
                </params>
                <comment line="817">
                    Special case of one word dividend                    
                </comment>
                <comment line="833">
                    Normalize the divisor                    
                </comment>
                <comment line="863">
                    Unnormalize                    
                </comment>
                <declaration name="divisorLong" type="long" line="815"/>
                <scope line="818">
                    <declaration name="dividendValue" type="long" line="819"/>
                    <declaration name="q" type="int" line="820"/>
                    <declaration name="r" type="int" line="821"/>
                </scope>
                <declaration name="shift" type="int" line="834"/>
                <declaration name="rem" type="int" line="836"/>
                <declaration name="remLong" type="long" line="837"/>
                <scope line="838"/>
                <scope line="840"/>
                <declaration name="xlen" type="int" line="846"/>
                <declaration name="qWord" type="int[]" line="847"/>
                <scope line="848">
                    <declaration name="dividendEstimate" type="long" line="849"/>
                    <scope line="851"/>
                    <scope line="854"/>
                </scope>
            </method>
            <javadoc line="870">
                Calculates the quotient of this div b and places the quotient in the
                  provided MutableBigInteger objects and the remainder object is returned.
                  Uses Algorithm D in Knuth section 4.3.1.
                  Many optimizations to that algorithm have been adapted from the Colin
                  Plumb C library.
                  It special cases one word divisors for speed. The content of b is not
                  changed.                
            </javadoc>
            <method name="divide" type="MutableBigInteger" line="881">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                    <param name="quotient" type="MutableBigInteger"/>
                </params>
                <comment line="885">
                    Dividend is zero                    
                </comment>
                <comment line="892">
                    Dividend less than divisor                    
                </comment>
                <comment line="897">
                    Dividend equal to divisor                    
                </comment>
                <comment line="905">
                    Special case one word divisor                    
                </comment>
                <comment line="913">
                    Copy divisor value to protect divisor                    
                </comment>
                <scope line="886"/>
                <declaration name="cmp" type="int" line="891"/>
                <scope line="893"/>
                <scope line="898"/>
                <scope line="906">
                    <declaration name="r" type="int" line="907"/>
                </scope>
                <declaration name="div" type="int[]" line="914"/>
            </method>
            <javadoc line="918">
                Internally used  to calculate the quotient of this div v and places the
                  quotient in the provided MutableBigInteger object and the remainder is
                  returned.                
                <return>
                    the remainder of the division will be returned.                    
                </return>
            </javadoc>
            <method name="divide" type="long" line="925">
                <params>
                    <param name="v" type="long"/>
                    <param name="quotient" type="MutableBigInteger"/>
                </params>
                <comment line="929">
                    Dividend is zero                    
                </comment>
                <comment line="939">
                    Special case on word divisor                    
                </comment>
                <scope line="930"/>
                <declaration name="d" type="int" line="937"/>
                <scope line="942">
                    <declaration name="div" type="int[]" line="943"/>
                </scope>
            </method>
            <javadoc line="948">
                Divide this MutableBigInteger by the divisor represented by its magnitude
                  array. The quotient will be placed into the provided quotient object &amp;
                  the remainder object is returned.                
            </javadoc>
            <method name="divideMagnitude" type="MutableBigInteger" line="954">
                <params>
                    <param name="divisor" type="int[]"/>
                    <param name="quotient" type="MutableBigInteger"/>
                </params>
                <comment line="956">
                    Remainder starts as dividend with space for a leading zero                    
                </comment>
                <comment line="964">
                    Set the quotient size                    
                </comment>
                <comment line="974">
                    D1 normalize the divisor                    
                </comment>
                <comment line="977">
                    First shift will not grow array                    
                </comment>
                <comment line="979">
                    But this one might                    
                </comment>
                <comment line="983">
                    Must insert leading 0 in rem if its length did not change                    
                </comment>
                <comment line="995">
                    D2 Initialize j                    
                </comment>
                <comment line="997">
                    D3 Calculate qhat                    
                </comment>
                <comment line="998">
                    estimate qhat                    
                </comment>
                <comment line="1025">
                    Correct qhat                    
                </comment>
                <comment line="1042">
                    D4 Multiply and subtract                    
                </comment>
                <comment line="1046">
                    D5 Test remainder                    
                </comment>
                <comment line="1048">
                    D6 Add back                    
                </comment>
                <comment line="1053">
                    Store the quotient digit                    
                </comment>
                <comment line="1055">
                    D7 loop on j                    
                </comment>
                <comment line="1057">
                    D8 Unnormalize                    
                </comment>
                <declaration name="rem" type="MutableBigInteger" line="957"/>
                <declaration name="nlen" type="int" line="962"/>
                <declaration name="dlen" type="int" line="965"/>
                <declaration name="limit" type="int" line="966"/>
                <scope line="967"/>
                <declaration name="q" type="int[]" line="972"/>
                <declaration name="shift" type="int" line="975"/>
                <scope line="976"/>
                <scope line="984"/>
                <declaration name="dh" type="int" line="990"/>
                <declaration name="dhLong" type="long" line="991"/>
                <declaration name="dl" type="int" line="992"/>
                <declaration name="qWord" type="int[]" line="993"/>
                <scope line="996">
                    <declaration name="qhat" type="int" line="999"/>
                    <declaration name="qrem" type="int" line="1000"/>
                    <declaration name="skipCorrection" type="boolean" line="1001"/>
                    <declaration name="nh" type="int" line="1002"/>
                    <declaration name="nh2" type="int" line="1003"/>
                    <declaration name="nm" type="int" line="1004"/>
                    <scope line="1006"/>
                    <scope line="1010">
                        <declaration name="nChunk" type="long" line="1011"/>
                        <scope line="1012"/>
                        <scope line="1015"/>
                    </scope>
                    <scope line="1025">
                        <declaration name="nl" type="long" line="1026"/>
                        <declaration name="rs" type="long" line="1027"/>
                        <declaration name="estProduct" type="long" line="1028"/>
                        <scope line="1030">
                            <scope line="1033"/>
                        </scope>
                    </scope>
                    <declaration name="borrow" type="int" line="1044"/>
                    <scope line="1047"/>
                </scope>
            </method>
            <javadoc line="1066">
                Compare two longs as if they were unsigned.
                  Returns true iff one is bigger than two.                
            </javadoc>
            <method name="unsignedLongCompare" type="boolean" line="1070">
                <params>
                    <param name="one" type="long"/>
                    <param name="two" type="long"/>
                </params>
            </method>
            <javadoc line="1074">
                This method divides a long quantity by an int to estimate
                  qhat for two multi precision numbers. It is used when
                  the signed value of n is less than zero.                
            </javadoc>
            <method name="divWord" type="void" line="1079">
                <params>
                    <param name="result" type="int[]"/>
                    <param name="n" type="long"/>
                    <param name="d" type="int"/>
                </params>
                <comment line="1088">
                    Approximate the quotient and remainder                    
                </comment>
                <comment line="1092">
                    Correct the approximation                    
                </comment>
                <comment line="1102">
                    n - q*dlong == r &amp;&amp; 0 &lt;= r &lt;dLong, hence we&apos;re done.                    
                </comment>
                <declaration name="dLong" type="long" line="1080"/>
                <scope line="1082"/>
                <declaration name="q" type="long" line="1089"/>
                <declaration name="r" type="long" line="1090"/>
                <scope line="1093"/>
                <scope line="1097"/>
            </method>
            <javadoc line="1107">
                Calculate GCD of this and b. This and b are changed by the computation.                
            </javadoc>
            <method name="hybridGCD" type="MutableBigInteger" line="1110">
                <params>
                    <param name="b" type="MutableBigInteger"/>
                </params>
                <comment line="1111">
                    Use Euclid&apos;s algorithm until the numbers are approximately the                    
                </comment>
                <comment line="1112">
                    same length, then use the binary GCD algorithm to find the GCD.                    
                </comment>
                <declaration name="a" type="MutableBigInteger" line="1113"/>
                <declaration name="q" type="MutableBigInteger" line="1114"/>
                <scope line="1116">
                    <declaration name="r" type="MutableBigInteger" line="1120"/>
                </scope>
            </method>
            <javadoc line="1127">
                Calculate GCD of this and v.
                  Assumes that this and v are not zero.                
            </javadoc>
            <method name="binaryGCD" type="MutableBigInteger" line="1131">
                <params>
                    <param name="v" type="MutableBigInteger"/>
                </params>
                <comment line="1132">
                    Algorithm B from Knuth section 4.5.2                    
                </comment>
                <comment line="1136">
                    step B1                    
                </comment>
                <comment line="1145">
                    step B2                    
                </comment>
                <comment line="1152">
                    steps B3 and B4                    
                </comment>
                <comment line="1154">
                    step B5                    
                </comment>
                <comment line="1160">
                    Special case one word numbers                    
                </comment>
                <comment line="1173">
                    step B6                    
                </comment>
                <declaration name="u" type="MutableBigInteger" line="1133"/>
                <declaration name="r" type="MutableBigInteger" line="1134"/>
                <declaration name="s1" type="int" line="1137"/>
                <declaration name="s2" type="int" line="1138"/>
                <declaration name="k" type="int" line="1139"/>
                <scope line="1140"/>
                <declaration name="uOdd" type="boolean" line="1146"/>
                <declaration name="t" type="MutableBigInteger" line="1147"/>
                <declaration name="tsign" type="int" line="1148"/>
                <declaration name="lb" type="int" line="1150"/>
                <scope line="1151">
                    <scope line="1161">
                        <declaration name="x" type="int" line="1162"/>
                        <declaration name="y" type="int" line="1163"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1184">
                Calculate GCD of a and b interpreted as unsigned integers.                
            </javadoc>
            <method name="binaryGcd" type="int" line="1187">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <comment line="1193">
                    Right shift a &amp; b till their last bits equal to 1.                    
                </comment>
                <comment line="1202">
                    a &gt; b as unsigned                    
                </comment>
                <declaration name="aZeros" type="int" line="1194"/>
                <declaration name="bZeros" type="int" line="1195"/>
                <declaration name="t" type="int" line="1199"/>
                <scope line="1201">
                    <scope line="1202"/>
                    <scope line="1205"/>
                </scope>
            </method>
            <javadoc line="1213">
                Returns the modInverse of this mod p. This and p are not affected by
                  the operation.                
            </javadoc>
            <method name="mutableModInverse" type="MutableBigInteger" line="1217">
                <params>
                    <param name="p" type="MutableBigInteger"/>
                </params>
                <comment line="1218">
                    Modulus is odd, use Schroeppel&apos;s algorithm                    
                </comment>
                <comment line="1222">
                    Base and modulus are even, throw exception                    
                </comment>
                <comment line="1226">
                    Get even part of modulus expressed as a power of 2                    
                </comment>
                <comment line="1229">
                    Construct odd part of modulus                    
                </comment>
                <comment line="1236">
                    Calculate 1/a mod oddMod                    
                </comment>
                <comment line="1239">
                    Calculate 1/a mod evenMod                    
                </comment>
                <comment line="1242">
                    Combine the results using Chinese Remainder Theorem                    
                </comment>
                <declaration name="powersOf2" type="int" line="1227"/>
                <declaration name="oddMod" type="MutableBigInteger" line="1230"/>
                <declaration name="oddPart" type="MutableBigInteger" line="1237"/>
                <declaration name="evenPart" type="MutableBigInteger" line="1240"/>
                <declaration name="y1" type="MutableBigInteger" line="1243"/>
                <declaration name="y2" type="MutableBigInteger" line="1244"/>
                <declaration name="temp1" type="MutableBigInteger" line="1246"/>
                <declaration name="temp2" type="MutableBigInteger" line="1247"/>
                <declaration name="result" type="MutableBigInteger" line="1248"/>
            </method>
            <method name="modInverseMP2" type="MutableBigInteger" line="1263">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="1281">
                    1 more Newton iter step                    
                </comment>
                <declaration name="t" type="int" line="1270"/>
                <scope line="1272"/>
                <declaration name="pLong" type="long" line="1277"/>
                <declaration name="tLong" type="long" line="1280"/>
                <declaration name="result" type="MutableBigInteger" line="1284"/>
            </method>
            <method name="inverseMod32" type="int" line="1295">
                <params>
                    <param name="val" type="int"/>
                </params>
                <comment line="1296">
                    Newton&apos;s iteration!                    
                </comment>
                <declaration name="t" type="int" line="1297"/>
            </method>
            <method name="modInverseBP2" type="MutableBigInteger" line="1308">
                <params>
                    <param name="mod" type="MutableBigInteger"/>
                    <param name="k" type="int"/>
                </params>
                <comment line="1309">
                    Copy the mod to protect original                    
                </comment>
            </method>
            <javadoc line="1313">
                Calculate the multiplicative inverse of this mod mod, where mod is odd.
                  This and mod are not changed by the calculation.
                  This method implements an algorithm due to Richard Schroeppel, that uses
                  the same intermediate representation as Montgomery Reduction
                  (&quot;Montgomery Form&quot;).  The algorithm is described in an unpublished
                  manuscript entitled &quot;Fast Modular Reciprocals.&quot;                
            </javadoc>
            <method name="modInverse" type="MutableBigInteger" line="1322">
                <params>
                    <param name="mod" type="MutableBigInteger"/>
                </params>
                <comment line="1332">
                    Right shift f k times until odd, left shift d k times                    
                </comment>
                <comment line="1340">
                    The Almost Inverse Algorithm                    
                </comment>
                <comment line="1342">
                    If gcd(f, g) != 1, number is not invertible modulo mod                    
                </comment>
                <comment line="1346">
                    If f &lt; g exchange f, g and c, d                    
                </comment>
                <comment line="1352">
                    If f == g (mod 4)                    
                </comment>
                <comment line="1357">
                    If f != g (mod 4)                    
                </comment>
                <comment line="1362">
                    Right shift f k times until odd, left shift d k times                    
                </comment>
                <declaration name="p" type="MutableBigInteger" line="1323"/>
                <declaration name="f" type="MutableBigInteger" line="1324"/>
                <declaration name="g" type="MutableBigInteger" line="1325"/>
                <declaration name="c" type="SignedMutableBigInteger" line="1326"/>
                <declaration name="d" type="SignedMutableBigInteger" line="1327"/>
                <declaration name="temp" type="MutableBigInteger" line="1328"/>
                <declaration name="sTemp" type="SignedMutableBigInteger" line="1329"/>
                <declaration name="k" type="int" line="1331"/>
                <scope line="1333">
                    <declaration name="trailingZeros" type="int" line="1334"/>
                </scope>
                <scope line="1341">
                    <scope line="1347"/>
                    <scope line="1354"/>
                    <scope line="1357"/>
                    <declaration name="trailingZeros" type="int" line="1363"/>
                </scope>
            </method>
            <method name="fixup" type="MutableBigInteger" line="1381">
                <params>
                    <param name="c" type="MutableBigInteger"/>
                    <param name="p" type="MutableBigInteger"/>
                    <param name="k" type="int"/>
                </params>
                <comment line="1383">
                    Set r to the multiplicative inverse of p mod 2^32                    
                </comment>
                <comment line="1387">
                    V = R * c (mod 2^j)                    
                </comment>
                <comment line="1389">
                    c = c + (v * p)                    
                </comment>
                <comment line="1392">
                    c = c / 2^j                    
                </comment>
                <comment line="1397">
                    V = R * c (mod 2^j)                    
                </comment>
                <comment line="1400">
                    c = c + (v * p)                    
                </comment>
                <comment line="1403">
                    c = c / 2^j                    
                </comment>
                <comment line="1407">
                    In theory, c may be greater than p at this point (Very rare!)                    
                </comment>
                <declaration name="temp" type="MutableBigInteger" line="1382"/>
                <declaration name="r" type="int" line="1384"/>
                <scope line="1386">
                    <declaration name="v" type="int" line="1388"/>
                </scope>
                <declaration name="numBits" type="int" line="1395"/>
                <scope line="1396">
                    <declaration name="v" type="int" line="1398"/>
                </scope>
            </method>
            <javadoc line="1414">
                Uses the extended Euclidean algorithm to compute the modInverse of base
                  mod a modulus that is a power of 2. The modulus is 2^k.                
            </javadoc>
            <method name="euclidModInverse" type="MutableBigInteger" line="1418">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="1428">
                    swap b &amp; r                    
                </comment>
                <declaration name="b" type="MutableBigInteger" line="1419"/>
                <declaration name="mod" type="MutableBigInteger" line="1421"/>
                <declaration name="a" type="MutableBigInteger" line="1423"/>
                <declaration name="q" type="MutableBigInteger" line="1424"/>
                <declaration name="r" type="MutableBigInteger" line="1425"/>
                <declaration name="swapper" type="MutableBigInteger" line="1427"/>
                <declaration name="t1" type="MutableBigInteger" line="1432"/>
                <declaration name="t0" type="MutableBigInteger" line="1433"/>
                <declaration name="temp" type="MutableBigInteger" line="1434"/>
                <scope line="1436"/>
            </method>
        </class>
    </source>