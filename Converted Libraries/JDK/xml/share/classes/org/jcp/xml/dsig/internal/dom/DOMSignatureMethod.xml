<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jcp.xml.dsig.internal.dom">
        <import package="javax.xml.crypto"/>
        <import package="javax.xml.crypto.dom.DOMCryptoContext"/>
        <import package="javax.xml.crypto.dsig"/>
        <import package="javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec"/>
        <import package="java.io.IOException"/>
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.logging.Logger"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.jcp.xml.dsig.internal.SignerOutputStream"/>
        <class name="DOMSignatureMethod" line="45">
            <extends class="DOMStructure"/>
            <comment line="57">
                see RFC 4051 for these algorithm definitions                
            </comment>
            <implements interface="SignatureMethod"/>
            <javadoc line="45">
                DOM-based abstract implementation of SignatureMethod.                
                <author>
                    Sean Mullan                    
                </author>
            </javadoc>
            <declaration name="log" type="Logger" line="53"/>
            <declaration name="RSA_SHA256" type="String" line="57"/>
            <declaration name="RSA_SHA384" type="String" line="59"/>
            <declaration name="RSA_SHA512" type="String" line="61"/>
            <declaration name="HMAC_SHA256" type="String" line="63"/>
            <declaration name="HMAC_SHA384" type="String" line="65"/>
            <declaration name="HMAC_SHA512" type="String" line="67"/>
            <declaration name="params" type="SignatureMethodParameterSpec" line="70"/>
            <declaration name="signature" type="Signature" line="71"/>
            <javadoc line="73">
                Creates a &lt;code&gt;DOMSignatureMethod&lt;/code&gt;.                
                <param>
                    params the algorithm-specific params (may be &lt;code&gt;null&lt;/code&gt;)                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if the parameters are not
                      appropriate for this signature method                    
                </throws>
            </javadoc>
            <method name="DOMSignatureMethod" type="constructor" line="81">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
                <scope line="83"/>
            </method>
            <javadoc line="91">
                Creates a &lt;code&gt;DOMSignatureMethod&lt;/code&gt; from an element. This ctor
                  invokes the abstract {@link #unmarshalParams unmarshalParams} method to
                  unmarshal any algorithm-specific input parameters.                
                <param>
                    smElem a SignatureMethod element                    
                </param>
            </javadoc>
            <method name="DOMSignatureMethod" type="constructor" line="98">
                <params>
                    <param name="smElem" type="Element"/>
                </params>
                <declaration name="paramsElem" type="Element" line="99"/>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="105"/>
            </method>
            <method name="unmarshal" type="SignatureMethod" line="110">
                <params>
                    <param name="smElem" type="Element"/>
                </params>
                <declaration name="alg" type="String" line="111"/>
                <scope line="112"/>
                <scope line="114"/>
                <scope line="116"/>
                <scope line="118"/>
                <scope line="120"/>
                <scope line="122"/>
                <scope line="124"/>
                <scope line="126"/>
                <scope line="128"/>
                <scope line="130"/>
            </method>
            <javadoc line="136">
                Checks if the specified parameters are valid for this algorithm. By
                  default, this method throws an exception if parameters are specified
                  since most SignatureMethod algorithms do not have parameters. Subclasses
                  should override it if they have parameters.                
                <param>
                    params the algorithm-specific params (may be &lt;code&gt;null&lt;/code&gt;)                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if the parameters are not
                      appropriate for this signature method                    
                </throws>
            </javadoc>
            <method name="checkParams" type="void" line="147">
                <params>
                    <param name="params" type="SignatureMethodParameterSpec"/>
                </params>
                <scope line="148"/>
            </method>
            <method name="getParameterSpec" type="AlgorithmParameterSpec" line="155"/>
            <javadoc line="159">
                Unmarshals &lt;code&gt;SignatureMethodParameterSpec&lt;/code&gt; from the specified
                  &lt;code&gt;Element&lt;/code&gt;. By default, this method throws an exception since
                  most SignatureMethod algorithms do not have parameters. Subclasses should
                  override it if they have parameters.                
                <param>
                    paramsElem the &lt;code&gt;Element&lt;/code&gt; holding the input params                    
                </param>
                <return>
                    the algorithm-specific &lt;code&gt;SignatureMethodParameterSpec&lt;/code&gt;                    
                </return>
                <throws>
                    MarshalException if the parameters cannot be unmarshalled                    
                </throws>
            </javadoc>
            <method name="unmarshalParams" type="SignatureMethodParameterSpec" line="170">
                <params>
                    <param name="paramsElem" type="Element"/>
                </params>
            </method>
            <javadoc line="176">
                This method invokes the abstract {@link #marshalParams marshalParams}method to marshal any algorithm-specific parameters.                
            </javadoc>
            <method name="marshal" type="void" line="181">
                <params>
                    <param name="parent" type="Node"/>
                    <param name="dsPrefix" type="String"/>
                    <param name="context" type="DOMCryptoContext"/>
                </params>
                <declaration name="ownerDoc" type="Document" line="182"/>
                <declaration name="smElem" type="Element" line="184"/>
                <scope line="188"/>
            </method>
            <javadoc line="195">
                Verifies the passed-in signature with the specified key, using the
                  underlying signature or MAC algorithm.                
                <param>
                    key the verification key                    
                </param>
                <param>
                    si the DOMSignedInfo                    
                </param>
                <param>
                    signature the signature bytes to be verified                    
                </param>
                <param>
                    context the XMLValidateContext                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the signature verified successfully,
                      &lt;code&gt;false&lt;/code&gt; if not                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;si&lt;/code&gt; or
                      &lt;code&gt;signature&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    InvalidKeyException if the key is improperly encoded, of
                      the wrong type, or parameters are missing, etc                    
                </throws>
                <throws>
                    SignatureException if an unexpected error occurs, such
                      as the passed in signature is improperly encoded                    
                </throws>
                <throws>
                    XMLSignatureException if an unexpected error occurs                    
                </throws>
            </javadoc>
            <method name="verify" type="boolean" line="215">
                <params>
                    <param name="key" type="Key"/>
                    <param name="si" type="DOMSignedInfo"/>
                    <param name="sig" type="byte[]"/>
                    <param name="context" type="XMLValidateContext"/>
                </params>
                <scope line="216"/>
                <scope line="220"/>
                <scope line="223">
                    <scope line="224">
                        <declaration name="p" type="Provider" line="225"/>
                    </scope>
                    <scope line="230"/>
                </scope>
                <scope line="235"/>
                <scope line="241">
                    <scope line="242"/>
                    <scope line="244"/>
                </scope>
                <scope line="247"/>
            </method>
            <javadoc line="252">
                Signs the bytes with the specified key, using the underlying
                  signature or MAC algorithm.                
                <param>
                    key the signing key                    
                </param>
                <param>
                    si the DOMSignedInfo                    
                </param>
                <param>
                    context the XMLSignContext                    
                </param>
                <return>
                    the signature                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;key&lt;/code&gt; or
                      &lt;code&gt;si&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    InvalidKeyException if the key is improperly encoded, of
                      the wrong type, or parameters are missing, etc                    
                </throws>
                <throws>
                    XMLSignatureException if an unexpected error occurs                    
                </throws>
            </javadoc>
            <method name="sign" type="byte[]" line="267">
                <params>
                    <param name="key" type="Key"/>
                    <param name="si" type="DOMSignedInfo"/>
                    <param name="context" type="XMLSignContext"/>
                </params>
                <scope line="268"/>
                <scope line="272"/>
                <scope line="275">
                    <scope line="276">
                        <declaration name="p" type="Provider" line="277"/>
                    </scope>
                    <scope line="282"/>
                </scope>
                <scope line="287"/>
                <scope line="294">
                    <scope line="295"/>
                    <scope line="297"/>
                </scope>
                <scope line="300"/>
                <scope line="302"/>
            </method>
            <javadoc line="307">
                Marshals the algorithm-specific parameters to an Element and
                  appends it to the specified parent element. By default, this method
                  throws an exception since most SignatureMethod algorithms do not have
                  parameters. Subclasses should override it if they have parameters.                
                <param>
                    parent the parent element to append the parameters to                    
                </param>
                <param>
                    paramsPrefix the algorithm parameters prefix to use                    
                </param>
                <throws>
                    MarshalException if the parameters cannot be marshalled                    
                </throws>
            </javadoc>
            <method name="marshalParams" type="void" line="318">
                <params>
                    <param name="parent" type="Element"/>
                    <param name="paramsPrefix" type="String"/>
                </params>
            </method>
            <method name="getSignatureAlgorithm" type="String" line="324"/>
            <javadoc line="324">
                Returns the java.security.Signature standard algorithm name.                
            </javadoc>
            <javadoc line="329">
                Returns true if parameters are equal; false otherwise.
                  Subclasses should override this method to compare algorithm-specific
                  parameters.                
            </javadoc>
            <method name="paramsEqual" type="boolean" line="335">
                <params>
                    <param name="spec" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="339">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="340"/>
                <scope line="344"/>
                <declaration name="osm" type="SignatureMethod" line="347"/>
            </method>
            <javadoc line="353">
                Converts an ASN.1 DSA value to a XML Signature DSA Value.
                  The JAVA JCE DSA Signature algorithm creates ASN.1 encoded (r,s) value
                  pairs; the XML Signature requires the core BigInteger values.                
                <param>
                    asn1Bytes                    
                </param>
                <throws>
                    IOException                    
                </throws>
                <see>
                    &lt;A HREF=&quot;http://www.w3.org/TR/xmldsig-core/#dsa-sha1&quot;&gt;6.4.1 DSA&lt;/A&gt;                    
                </see>
            </javadoc>
            <method name="convertASN1toXMLDSIG" type="byte[]" line="365">
                <params>
                    <param name="asn1Bytes" type="byte"/>
                </params>
                <declaration name="rLength" type="byte" line="367"/>
                <declaration name="i" type="int" line="368"/>
                <declaration name="sLength" type="byte" line="372"/>
                <declaration name="j" type="int" line="373"/>
                <scope line="380"/>
                <scope line="382">
                    <declaration name="xmldsigBytes" type="byte" line="383"/>
                </scope>
            </method>
            <javadoc line="393">
                Converts a XML Signature DSA Value to an ASN.1 DSA value.
                  The JAVA JCE DSA Signature algorithm creates ASN.1 encoded (r,s) value
                  pairs; the XML Signature requires the core BigInteger values.                
                <param>
                    xmldsigBytes                    
                </param>
                <throws>
                    IOException                    
                </throws>
                <see>
                    &lt;A HREF=&quot;http://www.w3.org/TR/xmldsig-core/#dsa-sha1&quot;&gt;6.4.1 DSA&lt;/A&gt;                    
                </see>
            </javadoc>
            <method name="convertXMLDSIGtoASN1" type="byte[]" line="405">
                <params>
                    <param name="xmldsigBytes" type="byte"/>
                </params>
                <scope line="407"/>
                <declaration name="i" type="int" line="411"/>
                <declaration name="j" type="int" line="415"/>
                <scope line="417"/>
                <declaration name="k" type="int" line="421"/>
                <declaration name="l" type="int" line="425"/>
                <scope line="427"/>
                <declaration name="asn1Bytes" type="byte" line="431"/>
            </method>
            <class name="SHA1withRSA" line="448">
                <extends class="DOMSignatureMethod"/>
                <method name="SHA1withRSA" type="constructor" line="450">
                    <params>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="SHA1withRSA" type="constructor" line="453">
                    <params>
                        <param name="dmElem" type="Element"/>
                    </params>
                </method>
                <method name="getAlgorithm" type="String" line="456"/>
                <method name="getSignatureAlgorithm" type="String" line="459"/>
            </class>
            <class name="SHA256withRSA" line="464">
                <extends class="DOMSignatureMethod"/>
                <method name="SHA256withRSA" type="constructor" line="466">
                    <params>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="SHA256withRSA" type="constructor" line="469">
                    <params>
                        <param name="dmElem" type="Element"/>
                    </params>
                </method>
                <method name="getAlgorithm" type="String" line="472"/>
                <method name="getSignatureAlgorithm" type="String" line="475"/>
            </class>
            <class name="SHA384withRSA" line="480">
                <extends class="DOMSignatureMethod"/>
                <method name="SHA384withRSA" type="constructor" line="482">
                    <params>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="SHA384withRSA" type="constructor" line="485">
                    <params>
                        <param name="dmElem" type="Element"/>
                    </params>
                </method>
                <method name="getAlgorithm" type="String" line="488"/>
                <method name="getSignatureAlgorithm" type="String" line="491"/>
            </class>
            <class name="SHA512withRSA" line="496">
                <extends class="DOMSignatureMethod"/>
                <method name="SHA512withRSA" type="constructor" line="498">
                    <params>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="SHA512withRSA" type="constructor" line="501">
                    <params>
                        <param name="dmElem" type="Element"/>
                    </params>
                </method>
                <method name="getAlgorithm" type="String" line="504"/>
                <method name="getSignatureAlgorithm" type="String" line="507"/>
            </class>
            <class name="SHA1withDSA" line="512">
                <extends class="DOMSignatureMethod"/>
                <method name="SHA1withDSA" type="constructor" line="514">
                    <params>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="SHA1withDSA" type="constructor" line="517">
                    <params>
                        <param name="dmElem" type="Element"/>
                    </params>
                </method>
                <method name="getAlgorithm" type="String" line="520"/>
                <method name="getSignatureAlgorithm" type="String" line="523"/>
            </class>
        </class>
    </source>