<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ietf.jgss">
        <import package="java.net.InetAddress"/>
        <import package="java.util.Arrays"/>
        <class name="ChannelBinding" line="31">
            <javadoc line="31">
                This class encapsulates the concept of caller-provided channel
                  binding information. Channel bindings are used to strengthen the
                  quality with which peer entity authentication is provided during
                  context establishment.  They enable the GSS-API callers to bind the
                  establishment of the security context to relevant characteristics
                  like addresses or to application specific data.&lt;p&gt;
                  The caller initiating the security context must determine the
                  appropriate channel binding values to set in the GSSContext object.
                  The acceptor must provide an identical binding in order to validate
                  that received tokens possess correct channel-related characteristics.&lt;p&gt;
                  Use of channel bindings is optional in GSS-API. ChannelBinding can be
                  set for the {@link GSSContext GSSContext} using the {@link GSSContext#setChannelBinding(ChannelBinding) setChannelBinding} method
                  before the first call to {@link GSSContext#initSecContext(byte[],int,int)initSecContext} or {@link GSSContext#acceptSecContext(byte[],int,int)acceptSecContext} has been performed.  Unless the &lt;code&gt;setChannelBinding&lt;/code&gt;
                  method has been used to set the ChannelBinding for a GSSContext object,
                  &lt;code&gt;null&lt;/code&gt; ChannelBinding will be assumed. &lt;p&gt;
                  Conceptually, the GSS-API concatenates the initiator and acceptor
                  address information, and the application supplied byte array to form an
                  octet string.  The mechanism calculates a MIC over this octet string and
                  binds the MIC to the context establishment token emitted by
                  &lt;code&gt;initSecContext&lt;/code&gt; method of the &lt;code&gt;GSSContext&lt;/code&gt;
                  interface.  The same bindings are set by the context acceptor for its
                  &lt;code&gt;GSSContext&lt;/code&gt; object and during processing of the
                  &lt;code&gt;acceptSecContext&lt;/code&gt; method a MIC is calculated in the same
                  way. The calculated MIC is compared with that found in the token, and if
                  the MICs differ, accept will throw a &lt;code&gt;GSSException&lt;/code&gt; with the
                  major code set to {@link GSSException#BAD_BINDINGS BAD_BINDINGS}, and
                  the context will not be established. Some mechanisms may include the
                  actual channel binding data in the token (rather than just a MIC);
                  applications should therefore not use confidential data as
                  channel-binding components.&lt;p&gt;
                  Individual mechanisms may impose additional constraints on addresses
                  that may appear in channel bindings.  For example, a mechanism may
                  verify that the initiator address field of the channel binding
                  contains the correct network address of the host system.  Portable
                  applications should therefore ensure that they either provide correct
                  information for the address fields, or omit setting of the addressing
                  information.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="initiator" type="InetAddress" line="82"/>
            <declaration name="acceptor" type="InetAddress" line="83"/>
            <declaration name="appData" type="byte[]" line="84"/>
            <javadoc line="86">
                Create a ChannelBinding object with user supplied address information
                  and data.  &lt;code&gt;null&lt;/code&gt; values can be used for any fields which the
                  application does not want to specify.                
                <param>
                    initAddr the address of the context initiator.
                      &lt;code&gt;null&lt;/code&gt; value can be supplied to indicate that the
                      application does not want to set this value.                    
                </param>
                <param>
                    acceptAddr the address of the context
                      acceptor. &lt;code&gt;null&lt;/code&gt; value can be supplied to indicate that
                      the application does not want to set this value.                    
                </param>
                <param>
                    appData application supplied data to be used as part of the
                      channel bindings. &lt;code&gt;null&lt;/code&gt; value can be supplied to
                      indicate that the application does not want to set this value.                    
                </param>
            </javadoc>
            <method name="ChannelBinding" type="constructor" line="102">
                <params>
                    <param name="initAddr" type="InetAddress"/>
                    <param name="acceptAddr" type="InetAddress"/>
                    <param name="appData" type="byte[]"/>
                </params>
                <scope line="107"/>
            </method>
            <javadoc line="114">
                Creates a ChannelBinding object without any addressing information.                
                <param>
                    appData application supplied data to be used as part of the
                      channel bindings.                    
                </param>
            </javadoc>
            <method name="ChannelBinding" type="constructor" line="120">
                <params>
                    <param name="appData" type="byte[]"/>
                </params>
            </method>
            <javadoc line="124">
                Get the initiator&apos;s address for this channel binding.                
                <return>
                    the initiator&apos;s address. &lt;code&gt;null&lt;/code&gt; is returned if
                      the address has not been set.                    
                </return>
            </javadoc>
            <method name="getInitiatorAddress" type="InetAddress" line="130"/>
            <javadoc line="134">
                Get the acceptor&apos;s address for this channel binding.                
                <return>
                    the acceptor&apos;s address. null is returned if the address has
                      not been set.                    
                </return>
            </javadoc>
            <method name="getAcceptorAddress" type="InetAddress" line="140"/>
            <javadoc line="144">
                Get the application specified data for this channel binding.                
                <return>
                    the application data being used as part of the
                      ChannelBinding. &lt;code&gt;null&lt;/code&gt; is returned if no application data
                      has been specified for the channel binding.                    
                </return>
            </javadoc>
            <method name="getApplicationData" type="byte[]" line="151">
                <scope line="153"/>
                <declaration name="retVal" type="byte[]" line="157"/>
            </method>
            <javadoc line="162">
                Compares two instances of ChannelBinding.                
                <param>
                    obj another ChannelBinding to compare this one with                    
                </param>
                <return>
                    true if the two ChannelBinding&apos;s contain
                      the same values for the initiator and acceptor addresses and the
                      application data.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="170">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="cb" type="ChannelBinding" line="178"/>
            </method>
            <javadoc line="197">
                Returns a hashcode value for this ChannelBinding object.                
                <return>
                    a hashCode value                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="202"/>
        </class>
    </source>