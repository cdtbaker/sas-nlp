<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ietf.jgss">
        <interface name="GSSCredential">
            <implements interface="Cloneable"/>
            <javadoc line="28">
                This interface encapsulates the GSS-API credentials for an entity.  A
                  credential contains all the necessary cryptographic information to
                  enable the creation of a context on behalf of the entity that it
                  represents.  It may contain multiple, distinct, mechanism specific
                  credential elements, each containing information for a specific
                  security mechanism, but all referring to the same entity. A credential
                  may be used to perform context initiation, acceptance, or both.&lt;p&gt;
                  Credentials are instantiated using one of the
                  &lt;code&gt;createCredential&lt;/code&gt; methods in the {@link GSSManagerGSSManager} class. GSS-API credential creation is not
                  intended to provide a &quot;login to the network&quot; function, as such a
                  function would involve the creation of new credentials rather than
                  merely acquiring a handle to existing credentials. The
                  &lt;a href=package-summary.html#useSubjectCredsOnly&gt;section on credential
                  acquisition&lt;/a&gt; in the package level description describes
                  how existing credentials are acquired in the Java platform. GSS-API
                  implementations must impose a local access-control policy on callers to
                  prevent unauthorized callers from acquiring credentials to which they
                  are not entitled. &lt;p&gt;
                  Applications will create a credential object passing the desired
                  parameters.  The application can then use the query methods to obtain
                  specific information about the instantiated credential object.
                  When the credential is no longer needed, the application should call
                  the {@link #dispose() dispose} method to release any resources held by
                  the credential object and to destroy any cryptographically sensitive
                  information.&lt;p&gt;
                  This example code demonstrates the creation of a GSSCredential
                  implementation for a specific entity, querying of its fields, and its
                  release when it is no longer needed:&lt;p&gt;
                  &lt;pre&gt;
                  GSSManager manager = GSSManager.getInstance();
                  // start by creating a name object for the entity
                  GSSName name = manager.createName(&quot;myusername&quot;, GSSName.NT_USER_NAME);
                  // now acquire credentials for the entity
                  GSSCredential cred = manager.createCredential(name,
                  GSSCredential.ACCEPT_ONLY);
                  // display credential information - name, remaining lifetime,
                  // and the mechanisms it has been acquired over
                  System.out.println(cred.getName().toString());
                  System.out.println(cred.getRemainingLifetime());
                  Oid [] mechs = cred.getMechs();
                  if (mechs != null) {
                  for (int i = 0; i &lt; mechs.length; i++)
                  System.out.println(mechs[i].toString());
                  }
                  // release system resources held by the credential
                  cred.dispose();
                  &lt;/pre&gt;                
                <see>
                    GSSManager#createCredential(int)                    
                </see>
                <see>
                    GSSManager#createCredential(GSSName,int,Oid,int)                    
                </see>
                <see>
                    GSSManager#createCredential(GSSName,int,Oid[],int)                    
                </see>
                <see>
                    #dispose()                    
                </see>
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="INITIATE_AND_ACCEPT" type="int" line="96"/>
            <javadoc line="96">
                Credential usage flag requesting that it be usable
                  for both context initiation and acceptance.                
            </javadoc>
            <declaration name="INITIATE_ONLY" type="int" line="104"/>
            <javadoc line="104">
                Credential usage flag requesting that it be usable
                  for context initiation only.                
            </javadoc>
            <declaration name="ACCEPT_ONLY" type="int" line="112"/>
            <javadoc line="112">
                Credential usage flag requesting that it be usable
                  for context acceptance only.                
            </javadoc>
            <declaration name="DEFAULT_LIFETIME" type="int" line="120"/>
            <javadoc line="120">
                A lifetime constant representing the default credential lifetime. This
                  value it set to 0.                
            </javadoc>
            <declaration name="INDEFINITE_LIFETIME" type="int" line="126"/>
            <javadoc line="126">
                A lifetime constant representing indefinite credential lifetime.
                  This value must is set to the maximum integer value in Java -{@link java.lang.Integer#MAX_VALUE Integer.MAX_VALUE}.                
            </javadoc>
            <method name="dispose" type="void" line="133"/>
            <javadoc line="133">
                Releases any sensitive information that the GSSCredential object may
                  be containing.  Applications should call this method as soon as the
                  credential is no longer needed to minimize the time any sensitive
                  information is maintained.                
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getName" type="GSSName" line="145"/>
            <javadoc line="145">
                Retrieves the name of the entity that the credential asserts.                
                <return>
                    a GSSName representing the entity                    
                </return>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getName" type="GSSName" line="156"/>
            <javadoc line="156">
                Retrieves a Mechanism Name of the entity that the credential
                  asserts. This is equivalent to calling {@link GSSName#canonicalize(Oid) canonicalize} on the value returned by
                  the other form of {@link #getName() getName}.                
                <param>
                    mech the Oid of the mechanism for which the Mechanism Name
                      should be returned.                    
                </param>
                <return>
                    a GSSName representing the entity canonicalized for the
                      desired mechanism                    
                </return>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#BAD_MECH GSSException.BAD_MECH},{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getRemainingLifetime" type="int" line="174"/>
            <javadoc line="174">
                Returns the remaining lifetime in seconds for a credential.  The
                  remaining lifetime is the minimum lifetime amongst all of the underlying
                  mechanism specific credential elements.                
                <return>
                    the minimum remaining lifetime in seconds for this
                      credential. A return value of {@link #INDEFINITE_LIFETIMEINDEFINITE_LIFETIME} indicates that the credential does
                      not expire. A return value of 0 indicates that the credential is
                      already expired.                    
                </return>
                <see>
                    #getRemainingInitLifetime(Oid)                    
                </see>
                <see>
                    #getRemainingAcceptLifetime(Oid)                    
                </see>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getRemainingInitLifetime" type="int" line="194"/>
            <javadoc line="194">
                Returns the lifetime in seconds for the credential to remain capable
                  of initiating security contexts using the specified mechanism. This
                  method queries the initiator credential element that belongs to the
                  specified mechanism.                
                <return>
                    the number of seconds remaining in the life of this credential
                      element. A return value of {@link #INDEFINITE_LIFETIMEINDEFINITE_LIFETIME} indicates that the credential element does not
                      expire.  A return value of 0 indicates that the credential element is
                      already expired.                    
                </return>
                <param>
                    mech the Oid of the mechanism whose intiator credential element
                      should be queried.                    
                </param>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#BAD_MECH GSSException.BAD_MECH},{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getRemainingAcceptLifetime" type="int" line="216"/>
            <javadoc line="216">
                Returns the lifetime in seconds for the credential to remain capable
                  of accepting security contexts using the specified mechanism. This
                  method queries the acceptor credential element that belongs to the
                  specified mechanism.                
                <return>
                    the number of seconds remaining in the life of this credential
                      element. A return value of {@link #INDEFINITE_LIFETIMEINDEFINITE_LIFETIME} indicates that the credential element does not
                      expire.  A return value of 0 indicates that the credential element is
                      already expired.                    
                </return>
                <param>
                    mech the Oid of the mechanism whose acceptor credential element
                      should be queried.                    
                </param>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#BAD_MECH GSSException.BAD_MECH},{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getUsage" type="int" line="238"/>
            <javadoc line="238">
                Returns the credential usage mode. In other words, it
                  tells us if this credential can be used for initiating or accepting
                  security contexts. It does not tell us which mechanism(s) has to be
                  used in order to do so. It is expected that an application will allow
                  the GSS-API to pick a default mechanism after calling this method.                
                <return>
                    The return value will be one of {@link #INITIATE_ONLYINITIATE_ONLY}, {@link #ACCEPT_ONLY ACCEPT_ONLY}, and {@link #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT}.                    
                </return>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getUsage" type="int" line="255"/>
            <javadoc line="255">
                Returns the credential usage mode for a specific mechanism. In other
                  words, it tells us if this credential can be used
                  for initiating or accepting security contexts with a given underlying
                  mechanism.                
                <return>
                    The return value will be one of {@link #INITIATE_ONLYINITIATE_ONLY}, {@link #ACCEPT_ONLY ACCEPT_ONLY}, and {@link #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT}.                    
                </return>
                <param>
                    mech the Oid of the mechanism whose credentials usage mode is
                      to be determined.                    
                </param>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#BAD_MECH GSSException.BAD_MECH},{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getMechs" type="Oid[]" line="274"/>
            <javadoc line="274">
                Returns a list of mechanisms supported by this credential. It does
                  not tell us which ones can be used to initiate
                  contexts and which ones can be used to accept contexts. The
                  application must call the {@link #getUsage(Oid) getUsage} method with
                  each of the returned Oid&apos;s to determine the possible modes of
                  usage.                
                <return>
                    an array of Oid's corresponding to the supported mechanisms.                    
                </return>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="290"/>
            <javadoc line="290">
                Adds a mechanism specific credential-element to an existing
                  credential.  This method allows the construction of credentials, one
                  mechanism at a time.&lt;p&gt;
                  This routine is envisioned to be used mainly by context acceptors
                  during the creation of acceptor credentials which are to be used
                  with a variety of clients using different security mechanisms.&lt;p&gt;
                  This routine adds the new credential element &quot;in-place&quot;.  To add the
                  element in a new credential, first call &lt;code&gt;clone&lt;/code&gt; to obtain a
                  copy of this credential, then call its &lt;code&gt;add&lt;/code&gt; method.&lt;p&gt;
                  As always, GSS-API implementations must impose a local access-control
                  policy on callers to prevent unauthorized callers from acquiring
                  credentials to which they are not entitled.
                  Non-default values for initLifetime and acceptLifetime cannot always
                  be honored by the underlying mechanisms, thus callers should be
                  prepared to call {@link #getRemainingInitLifetime(Oid)getRemainingInitLifetime} and {@link #getRemainingAcceptLifetime(Oid)getRemainingAcceptLifetime} on the credential.                
                <param>
                    name the name of the principal for whom this credential is to
                      be acquired.  Use <code>null</code> to specify the default
                      principal.                    
                </param>
                <param>
                    initLifetime the number of seconds that the credential element
                      should remain valid for initiating of security contexts. Use {@link GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME}to request that the credentials have the maximum permitted lifetime
                      for this.  Use {@link GSSCredential#DEFAULT_LIFETIMEGSSCredential.DEFAULT_LIFETIME} to request default credential lifetime
                      for this.                    
                </param>
                <param>
                    acceptLifetime the number of seconds that the credential
                      element should remain valid for accepting security contexts. Use {@link GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME}to request that the credentials have the maximum permitted lifetime
                      for this.  Use {@link GSSCredential#DEFAULT_LIFETIMEGSSCredential.DEFAULT_LIFETIME} to request default credential lifetime
                      for this.                    
                </param>
                <param>
                    mech the mechanism over which the credential is to be acquired.                    
                </param>
                <param>
                    usage the usage mode that this credential
                      element should add to the credential. The value
                      of this parameter must be one of:{@link #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT},{@link #ACCEPT_ONLY ACCEPT_ONLY}, and{@link #INITIATE_ONLY INITIATE_ONLY}.                    
                </param>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#DUPLICATE_ELEMENTGSSException.DUPLICATE_ELEMENT},{@link GSSException#BAD_MECH GSSException.BAD_MECH},{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},{@link GSSException#NO_CRED GSSException.NO_CRED},{@link GSSException#CREDENTIALS_EXPIREDGSSException.CREDENTIALS_EXPIRED},{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="352"/>
            <javadoc line="352">
                Tests if this GSSCredential asserts the same entity as the supplied
                  object.  The two credentials must be acquired over the same
                  mechanisms and must refer to the same principal.                
                <return>
                    <code>true</code> if the two GSSCredentials assert the same
                      entity; <code>false</code> otherwise.                    
                </return>
                <param>
                    another another GSSCredential for comparison to this one                    
                </param>
            </javadoc>
            <method name="hashCode" type="int" line="363"/>
            <javadoc line="363">
                Returns a hashcode value for this GSSCredential.                
                <return>
                    a hashCode value                    
                </return>
            </javadoc>
        </interface>
    </source>