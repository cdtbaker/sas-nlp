<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ietf.jgss">
        <import package="sun.security.jgss.spi"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <interface name="GSSName">
            <javadoc line="32">
                This interface encapsulates a single GSS-API principal entity. The
                  application obtains an implementation of this interface
                  through one of the &lt;code&gt;createName&lt;/code&gt; methods that exist in the {@link GSSManager GSSManager} class. Conceptually a GSSName contains many
                  representations of the entity or many primitive name elements, one for
                  each supported underlying mechanism. In GSS terminology, a GSSName that
                  contains an element from just one mechanism is called a Mechanism Name
                  (MN)&lt;p&gt;
                  Since different authentication mechanisms may employ different
                  namespaces for identifying their principals, GSS-API&apos;s naming support is
                  necessarily complex in multi-mechanism environments (or even in some
                  single-mechanism environments where the underlying mechanism supports
                  multiple namespaces). Different name formats and their definitions are
                  identified with {@link Oid Oid&apos;s} and some standard types
                  are defind in this interface. The format of the names can be derived
                  based on the unique &lt;code&gt;Oid&lt;/code&gt; of its name type.&lt;p&gt;
                  Included below are code examples utilizing the &lt;code&gt;GSSName&lt;/code&gt; interface.
                  The code below creates a &lt;code&gt;GSSName&lt;/code&gt;, converts it to an MN, performs a
                  comparison, obtains a printable representation of the name, exports it
                  to a byte array and then re-imports to obtain a
                  new &lt;code&gt;GSSName&lt;/code&gt;.&lt;p&gt;
                  &lt;pre&gt;
                  GSSManager manager = GSSManager.getInstance();
                  // create a host based service name
                  GSSName name = manager.createName(&quot;service@host&quot;,
                  GSSName.NT_HOSTBASED_SERVICE);
                  Oid krb5 = new Oid(&quot;1.2.840.113554.1.2.2&quot;);
                  GSSName mechName = name.canonicalize(krb5);
                  // the above two steps are equivalent to the following
                  GSSName mechName = manager.createName(&quot;service@host&quot;,
                  GSSName.NT_HOSTBASED_SERVICE, krb5);
                  // perform name comparison
                  if (name.equals(mechName))
                  print(&quot;Names are equals.&quot;);
                  // obtain textual representation of name and its printable
                  // name type
                  print(mechName.toString() +
                  mechName.getStringNameType().toString());
                  // export and re-import the name
                  byte [] exportName = mechName.export();
                  // create a new name object from the exported buffer
                  GSSName newName = manager.createName(exportName,
                  GSSName.NT_EXPORT_NAME);
                  &lt;/pre&gt;                
                <see>
                    #export()                    
                </see>
                <see>
                    #equals(GSSName)                    
                </see>
                <see>
                    GSSManager#createName(String,Oid)                    
                </see>
                <see>
                    GSSManager#createName(String,Oid,Oid)                    
                </see>
                <see>
                    GSSManager#createName(byte[],Oid)                    
                </see>
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="NT_HOSTBASED_SERVICE" type="Oid" line="99"/>
            <javadoc line="99">
                Oid indicating a host-based service name form.  It is used to
                  represent services associated with host computers.  This name form
                  is constructed using two elements, &quot;service&quot; and &quot;hostname&quot;, as
                  follows: service@hostname.&lt;p&gt;
                  It represents the following Oid value:&lt;br&gt;
                  &lt;code&gt;{ iso(1) member-body(2) United
                  States(840) mit(113554) infosys(1) gssapi(2) generic(1) service_name(4)
                  }&lt;/code&gt;                
            </javadoc>
            <declaration name="NT_USER_NAME" type="Oid" line="113"/>
            <javadoc line="113">
                Name type to indicate a named user on a local system.&lt;p&gt;
                  It represents the following Oid value:&lt;br&gt;
                  &lt;code&gt;{ iso(1) member-body(2) United
                  States(840) mit(113554) infosys(1) gssapi(2) generic(1) user_name(1)
                  }&lt;/code&gt;                
            </javadoc>
            <declaration name="NT_MACHINE_UID_NAME" type="Oid" line="123"/>
            <javadoc line="123">
                Name type to indicate a numeric user identifier corresponding to a
                  user on a local system. (e.g. Uid).&lt;p&gt;
                  It represents the following Oid value:&lt;br&gt;
                  &lt;code&gt;{ iso(1) member-body(2) United States(840) mit(113554)
                  infosys(1) gssapi(2) generic(1) machine_uid_name(2) }&lt;/code&gt;                
            </javadoc>
            <declaration name="NT_STRING_UID_NAME" type="Oid" line="134"/>
            <javadoc line="134">
                Name type to indicate a string of digits representing the numeric
                  user identifier of a user on a local system.&lt;p&gt;
                  It represents the following Oid value:&lt;br&gt;
                  &lt;code&gt;{ iso(1) member-body(2) United
                  States(840) mit(113554) infosys(1) gssapi(2) generic(1)
                  string_uid_name(3) }&lt;/code&gt;                
            </javadoc>
            <declaration name="NT_ANONYMOUS" type="Oid" line="146"/>
            <javadoc line="146">
                Name type for representing an anonymous entity.&lt;p&gt;
                  It represents the following Oid value:&lt;br&gt;
                  &lt;code&gt;{ 1(iso), 3(org), 6(dod), 1(internet),
                  5(security), 6(nametypes), 3(gss-anonymous-name) }&lt;/code&gt;                
            </javadoc>
            <declaration name="NT_EXPORT_NAME" type="Oid" line="155"/>
            <javadoc line="155">
                Name type used to indicate an exported name produced by the export
                  method.&lt;p&gt;
                  It represents the following Oid value:&lt;br&gt; &lt;code&gt;{ 1(iso),
                  3(org), 6(dod), 1(internet), 5(security), 6(nametypes),
                  4(gss-api-exported-name) }&lt;/code&gt;                
            </javadoc>
            <method name="equals" type="boolean" line="166"/>
            <javadoc line="166">
                Compares two &lt;code&gt;GSSName&lt;/code&gt; objects to determine if they refer to the
                  same entity.                
                <param>
                    another the &lt;code&gt;GSSName&lt;/code&gt; to compare this name with                    
                </param>
                <return>
                    true if the two names contain at least one primitive element
                      in common. If either of the names represents an anonymous entity, the
                      method will return false.                    
                </return>
                <throws>
                    GSSException when the names cannot be compared, containing the following
                      major error codes:{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="182"/>
            <javadoc line="182">
                Compares this &lt;code&gt;GSSName&lt;/code&gt; object to another Object that might be a
                  &lt;code&gt;GSSName&lt;/code&gt;. The behaviour is exactly the same as in {@link #equals(GSSName) equals} except that no GSSException is thrown;
                  instead, false will be returned in the situation where an error
                  occurs.                
                <return>
                    true if the object to compare to is also a &lt;code&gt;GSSName&lt;/code&gt; and the two
                      names refer to the same entity.                    
                </return>
                <param>
                    another the object to compare this name to                    
                </param>
                <see>
                    #equals(GSSName)                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="195"/>
            <javadoc line="195">
                Returns a hashcode value for this GSSName.                
                <return>
                    a hashCode value                    
                </return>
            </javadoc>
            <method name="canonicalize" type="GSSName" line="202"/>
            <javadoc line="202">
                Creates a name that is canonicalized for some
                  mechanism.                
                <return>
                    a &lt;code&gt;GSSName&lt;/code&gt; that contains just one primitive
                      element representing this name in a canonicalized form for the desired
                      mechanism.                    
                </return>
                <param>
                    mech the oid for the mechanism for which the canonical form of
                      the name is requested.                    
                </param>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#BAD_MECH GSSException.BAD_MECH},{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},{@link GSSException#BAD_NAME GSSException.BAD_NAME},{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="export" type="byte[]" line="221"/>
            <javadoc line="221">
                Returns a canonical contiguous byte representation of a mechanism name
                  (MN), suitable for direct, byte by byte comparison by authorization
                  functions.  If the name is not an MN, implementations may throw a
                  GSSException with the NAME_NOT_MN status code.  If an implementation
                  chooses not to throw an exception, it should use some system specific
                  default mechanism to canonicalize the name and then export
                  it. Structurally, an exported name object consists of a header
                  containing an OID identifying the mechanism that authenticated the
                  name, and a trailer containing the name itself, where the syntax of
                  the trailer is defined by the individual mechanism specification. The
                  format of the header of the output buffer is specified in RFC 2743.&lt;p&gt;
                  The exported name is useful when used in large access control lists
                  where the overhead of creating a &lt;code&gt;GSSName&lt;/code&gt; object on each
                  name and invoking the equals method on each name from the ACL may be
                  prohibitive.&lt;p&gt;
                  Exported names may be re-imported by using the byte array factory
                  method {@link GSSManager#createName(byte[],Oid)GSSManager.createName} and specifying the NT_EXPORT_NAME as the name
                  type object identifier. The resulting &lt;code&gt;GSSName&lt;/code&gt; name will
                  also be a MN.&lt;p&gt;                
                <return>
                    a byte[] containing the exported name. RFC 2743 defines the
                      &quot;Mechanism-Independent Exported Name Object Format&quot; for these bytes.                    
                </return>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#BAD_NAME GSSException.BAD_NAME},{@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="toString" type="String" line="255"/>
            <javadoc line="255">
                Returns a textual representation of the &lt;code&gt;GSSName&lt;/code&gt; object.  To retrieve
                  the printed name format, which determines the syntax of the returned
                  string, use the {@link #getStringNameType() getStringNameType}method.                
                <return>
                    a String representing this name in printable form.                    
                </return>
            </javadoc>
            <method name="getStringNameType" type="Oid" line="265"/>
            <javadoc line="265">
                Returns the name type of the printable
                  representation of this name that can be obtained from the &lt;code&gt;
                  toString&lt;/code&gt; method.                
                <return>
                    an Oid representing the namespace of the name returned
                      from the toString method.                    
                </return>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="isAnonymous" type="boolean" line="279"/>
            <javadoc line="279">
                Tests if this name object represents an anonymous entity.                
                <return>
                    true if this is an anonymous name, false otherwise.                    
                </return>
            </javadoc>
            <method name="isMN" type="boolean" line="286"/>
            <javadoc line="286">
                Tests if this name object represents a Mechanism Name (MN). An MN is
                  a GSSName the contains exactly one mechanism&apos;s primitive name
                  element.                
                <return>
                    true if this is an MN, false otherwise.                    
                </return>
            </javadoc>
        </interface>
    </source>