<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio">
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.Set"/>
        <import package="javax.imageio.spi.ImageReaderSpi"/>
        <import package="javax.imageio.event.IIOReadWarningListener"/>
        <import package="javax.imageio.event.IIOReadProgressListener"/>
        <import package="javax.imageio.event.IIOReadUpdateListener"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <class name="ImageReader" line="22">
            <javadoc line="22">
                An abstract superclass for parsing and decoding of images.  This
                  class must be subclassed by classes that read in images in the
                  context of the Java Image I/O framework.
                  &lt;p&gt; &lt;code&gt;ImageReader&lt;/code&gt; objects are normally instantiated by
                  the service provider interface (SPI) class for the specific format.
                  Service provider classes (e.g., instances of
                  &lt;code&gt;ImageReaderSpi&lt;/code&gt;) are registered with the
                  &lt;code&gt;IIORegistry&lt;/code&gt;, which uses them for format recognition
                  and presentation of available format readers and writers.
                  &lt;p&gt; When an input source is set (using the &lt;code&gt;setInput&lt;/code&gt;
                  method), it may be marked as &quot;seek forward only&quot;.  This setting
                  means that images contained within the input source will only be
                  read in order, possibly allowing the reader to avoid caching
                  portions of the input containing data associated with images that
                  have been read previously.                
                <see>
                    ImageWriter                    
                </see>
                <see>
                    javax.imageio.spi.IIORegistry                    
                </see>
                <see>
                    javax.imageio.spi.ImageReaderSpi                    
                </see>
            </javadoc>
            <declaration name="originatingProvider" type="ImageReaderSpi" line="43"/>
            <javadoc line="43">
                The &lt;code&gt;ImageReaderSpi&lt;/code&gt; that instantiated this object,
                  or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none
                  exists.  By default it is initialized to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="input" type="Object" line="49"/>
            <javadoc line="49">
                The &lt;code&gt;ImageInputStream&lt;/code&gt; or other
                  &lt;code&gt;Object&lt;/code&gt; by &lt;code&gt;setInput&lt;/code&gt; and retrieved
                  by &lt;code&gt;getInput&lt;/code&gt;.  By default it is initialized to
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="seekForwardOnly" type="boolean" line="56"/>
            <javadoc line="56">
                &lt;code&gt;true&lt;/code&gt; if the current input source has been marked
                  as allowing only forward seeking by &lt;code&gt;setInput&lt;/code&gt;.  By
                  default, the value is &lt;code&gt;false&lt;/code&gt;.                
                <see>
                    #minIndex                    
                </see>
                <see>
                    #setInput                    
                </see>
            </javadoc>
            <declaration name="ignoreMetadata" type="boolean" line="64"/>
            <javadoc line="64">
                &lt;code&gt;true&lt;/code&gt; if the current input source has been marked
                  as allowing metadata to be ignored by &lt;code&gt;setInput&lt;/code&gt;.
                  By default, the value is &lt;code&gt;false&lt;/code&gt;.                
                <see>
                    #setInput                    
                </see>
            </javadoc>
            <declaration name="minIndex" type="int" line="71"/>
            <javadoc line="71">
                The smallest valid index for reading, initially 0.  When
                  &lt;code&gt;seekForwardOnly&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, various methods
                  may throw an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; on an
                  attempt to access data associate with an image having a lower
                  index.                
                <see>
                    #seekForwardOnly                    
                </see>
                <see>
                    #setInput                    
                </see>
            </javadoc>
            <declaration name="availableLocales" type="Locale[]" line="81"/>
            <javadoc line="81">
                An array of &lt;code&gt;Locale&lt;/code&gt;s which may be used to localize
                  warning messages, or &lt;code&gt;null&lt;/code&gt; if localization is not
                  supported.                
            </javadoc>
            <declaration name="locale" type="Locale" line="87"/>
            <javadoc line="87">
                The current &lt;code&gt;Locale&lt;/code&gt; to be used for localization, or
                  &lt;code&gt;null&lt;/code&gt; if none has been set.                
            </javadoc>
            <declaration name="warningListeners" type="List&amp;lt;IIOReadWarningListener&amp;gt;" line="92"/>
            <javadoc line="92">
                A &lt;code&gt;List&lt;/code&gt; of currently registered
                  &lt;code&gt;IIOReadWarningListener&lt;/code&gt;s, initialized by default to
                  &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty
                  &lt;code&gt;List&lt;/code&gt;.                
            </javadoc>
            <declaration name="warningLocales" type="List&amp;lt;Locale&amp;gt;" line="99"/>
            <javadoc line="99">
                A &lt;code&gt;List&lt;/code&gt; of the &lt;code&gt;Locale&lt;/code&gt;s associated with
                  each currently registered &lt;code&gt;IIOReadWarningListener&lt;/code&gt;,
                  initialized by default to &lt;code&gt;null&lt;/code&gt;, which is
                  synonymous with an empty &lt;code&gt;List&lt;/code&gt;.                
            </javadoc>
            <declaration name="progressListeners" type="List&amp;lt;IIOReadProgressListener&amp;gt;" line="106"/>
            <javadoc line="106">
                A &lt;code&gt;List&lt;/code&gt; of currently registered
                  &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s, initialized by default
                  to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty
                  &lt;code&gt;List&lt;/code&gt;.                
            </javadoc>
            <declaration name="updateListeners" type="List&amp;lt;IIOReadUpdateListener&amp;gt;" line="113"/>
            <javadoc line="113">
                A &lt;code&gt;List&lt;/code&gt; of currently registered
                  &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s, initialized by default to
                  &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty
                  &lt;code&gt;List&lt;/code&gt;.                
            </javadoc>
            <declaration name="abortFlag" type="boolean" line="120"/>
            <javadoc line="120">
                If &lt;code&gt;true&lt;/code&gt;, the current read operation should be
                  aborted.                
            </javadoc>
            <javadoc line="125">
                Constructs an &lt;code&gt;ImageReader&lt;/code&gt; and sets its
                  &lt;code&gt;originatingProvider&lt;/code&gt; field to the supplied value.
                  &lt;p&gt; Subclasses that make use of extensions should provide a
                  constructor with signature &lt;code&gt;(ImageReaderSpi,
                  Object)&lt;/code&gt; in order to retrieve the extension object.  If
                  the extension object is unsuitable, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; should be thrown.                
                <param>
                    originatingProvider the &lt;code&gt;ImageReaderSpi&lt;/code&gt; that is
                      invoking this constructor, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="ImageReader" type="constructor" line="136">
                <params>
                    <param name="originatingProvider" type="ImageReaderSpi"/>
                </params>
            </method>
            <javadoc line="139">
                Returns a &lt;code&gt;String&lt;/code&gt; identifying the format of the
                  input source.
                  &lt;p&gt; The default implementation returns
                  &lt;code&gt;originatingProvider.getFormatNames()[0]&lt;/code&gt;.
                  Implementations that may not have an originating service
                  provider, or which desire a different naming policy should
                  override this method.                
                <exception>
                    IOException if an error occurs reading the
                      information from the input source.                    
                </exception>
                <return>
                    the format name, as a &lt;code&gt;String&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getFormatName" type="String" line="151"/>
            <javadoc line="154">
                Returns the &lt;code&gt;ImageReaderSpi&lt;/code&gt; that was passed in on
                  the constructor.  Note that this value may be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    an &lt;code&gt;ImageReaderSpi&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    ImageReaderSpi                    
                </see>
            </javadoc>
            <method name="getOriginatingProvider" type="ImageReaderSpi" line="160"/>
            <javadoc line="163">
                Sets the input source to use to the given
                  &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt;.
                  The input source must be set before any of the query or read
                  methods are used.  If &lt;code&gt;input&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  any currently set input source will be removed.  In any case,
                  the value of &lt;code&gt;minIndex&lt;/code&gt; will be initialized to 0.
                  &lt;p&gt; The &lt;code&gt;seekForwardOnly&lt;/code&gt; parameter controls whether
                  the value returned by &lt;code&gt;getMinIndex&lt;/code&gt; will be
                  increased as each image (or thumbnail, or image metadata) is
                  read.  If &lt;code&gt;seekForwardOnly&lt;/code&gt; is true, then a call to
                  &lt;code&gt;read(index)&lt;/code&gt; will throw an
                  &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; if &lt;code&gt;index &amp;lt
                  this.minIndex&lt;/code&gt;; otherwise, the value of
                  &lt;code&gt;minIndex&lt;/code&gt; will be set to &lt;code&gt;index&lt;/code&gt;.  If
                  &lt;code&gt;seekForwardOnly&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the value of
                  &lt;code&gt;minIndex&lt;/code&gt; will remain 0 regardless of any read
                  operations.
                  &lt;p&gt; The &lt;code&gt;ignoreMetadata&lt;/code&gt; parameter, if set to
                  &lt;code&gt;true&lt;/code&gt;, allows the reader to disregard any metadata
                  encountered during the read.  Subsequent calls to the
                  &lt;code&gt;getStreamMetadata&lt;/code&gt; and
                  &lt;code&gt;getImageMetadata&lt;/code&gt; methods may return
                  &lt;code&gt;null&lt;/code&gt;, and an &lt;code&gt;IIOImage&lt;/code&gt; returned from
                  &lt;code&gt;readAll&lt;/code&gt; may return &lt;code&gt;null&lt;/code&gt; from their
                  &lt;code&gt;getMetadata&lt;/code&gt; method.  Setting this parameter may
                  allow the reader to work more efficiently.  The reader may
                  choose to disregard this setting and return metadata normally.
                  &lt;p&gt; Subclasses should take care to remove any cached
                  information based on the previous stream, such as header
                  information or partially decoded image data.
                  &lt;p&gt; Use of a general &lt;code&gt;Object&lt;/code&gt; other than an
                  &lt;code&gt;ImageInputStream&lt;/code&gt; is intended for readers that
                  interact directly with a capture device or imaging protocol.
                  The set of legal classes is advertised by the reader&apos;s service
                  provider&apos;s &lt;code&gt;getInputTypes&lt;/code&gt; method; most readers
                  will return a single-element array containing only
                  &lt;code&gt;ImageInputStream.class&lt;/code&gt; to indicate that they
                  accept only an &lt;code&gt;ImageInputStream&lt;/code&gt;.
                  &lt;p&gt; The default implementation checks the &lt;code&gt;input&lt;/code&gt;
                  argument against the list returned by
                  &lt;code&gt;originatingProvider.getInputTypes()&lt;/code&gt; and fails
                  if the argument is not an instance of one of the classes
                  in the list.  If the originating provider is set to
                  &lt;code&gt;null&lt;/code&gt;, the input is accepted only if it is an
                  &lt;code&gt;ImageInputStream&lt;/code&gt;.                
                <param>
                    input the &lt;code&gt;ImageInputStream&lt;/code&gt; or other
                      &lt;code&gt;Object&lt;/code&gt; to use for future decoding.                    
                </param>
                <param>
                    seekForwardOnly if &lt;code&gt;true&lt;/code&gt;, images and metadata
                      may only be read in ascending order from this input source.                    
                </param>
                <param>
                    ignoreMetadata if &lt;code&gt;true&lt;/code&gt;, metadata
                      may be ignored during reads.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;input&lt;/code&gt; is
                      not an instance of one of the classes returned by the
                      originating service provider&apos;s &lt;code&gt;getInputTypes&lt;/code&gt;
                      method, or is not an &lt;code&gt;ImageInputStream&lt;/code&gt;.                    
                </exception>
                <see>
                    ImageInputStream                    
                </see>
                <see>
                    #getInput                    
                </see>
                <see>
                    javax.imageio.spi.ImageReaderSpi#getInputTypes                    
                </see>
            </javadoc>
            <method name="setInput" type="void" line="223">
                <params>
                    <param name="input" type="Object"/>
                    <param name="seekForwardOnly" type="boolean"/>
                    <param name="ignoreMetadata" type="boolean"/>
                </params>
                <scope line="224">
                    <declaration name="found" type="boolean" line="225"/>
                    <scope line="226">
                        <declaration name="classes" type="Class[]" line="227"/>
                        <scope line="228">
                            <scope line="229"/>
                        </scope>
                    </scope>
                    <scope line="235">
                        <scope line="236"/>
                    </scope>
                    <scope line="240"/>
                </scope>
            </method>
            <javadoc line="249">
                Sets the input source to use to the given
                  &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt;.
                  The input source must be set before any of the query or read
                  methods are used.  If &lt;code&gt;input&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  any currently set input source will be removed.  In any case,
                  the value of &lt;code&gt;minIndex&lt;/code&gt; will be initialized to 0.
                  &lt;p&gt; The &lt;code&gt;seekForwardOnly&lt;/code&gt; parameter controls whether
                  the value returned by &lt;code&gt;getMinIndex&lt;/code&gt; will be
                  increased as each image (or thumbnail, or image metadata) is
                  read.  If &lt;code&gt;seekForwardOnly&lt;/code&gt; is true, then a call to
                  &lt;code&gt;read(index)&lt;/code&gt; will throw an
                  &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; if &lt;code&gt;index &amp;lt
                  this.minIndex&lt;/code&gt;; otherwise, the value of
                  &lt;code&gt;minIndex&lt;/code&gt; will be set to &lt;code&gt;index&lt;/code&gt;.  If
                  &lt;code&gt;seekForwardOnly&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the value of
                  &lt;code&gt;minIndex&lt;/code&gt; will remain 0 regardless of any read
                  operations.
                  &lt;p&gt; This method is equivalent to &lt;code&gt;setInput(input,
                  seekForwardOnly, false)&lt;/code&gt;.                
                <param>
                    input the &lt;code&gt;ImageInputStream&lt;/code&gt; or other
                      &lt;code&gt;Object&lt;/code&gt; to use for future decoding.                    
                </param>
                <param>
                    seekForwardOnly if &lt;code&gt;true&lt;/code&gt;, images and metadata
                      may only be read in ascending order from this input source.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;input&lt;/code&gt; is
                      not an instance of one of the classes returned by the
                      originating service provider&apos;s &lt;code&gt;getInputTypes&lt;/code&gt;
                      method, or is not an &lt;code&gt;ImageInputStream&lt;/code&gt;.                    
                </exception>
                <see>
                    #getInput                    
                </see>
            </javadoc>
            <method name="setInput" type="void" line="279">
                <params>
                    <param name="input" type="Object"/>
                    <param name="seekForwardOnly" type="boolean"/>
                </params>
            </method>
            <javadoc line="282">
                Sets the input source to use to the given
                  &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt;.
                  The input source must be set before any of the query or read
                  methods are used.  If &lt;code&gt;input&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  any currently set input source will be removed.  In any case,
                  the value of &lt;code&gt;minIndex&lt;/code&gt; will be initialized to 0.
                  &lt;p&gt; This method is equivalent to &lt;code&gt;setInput(input, false,
                  false)&lt;/code&gt;.                
                <param>
                    input the &lt;code&gt;ImageInputStream&lt;/code&gt; or other
                      &lt;code&gt;Object&lt;/code&gt; to use for future decoding.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;input&lt;/code&gt; is
                      not an instance of one of the classes returned by the
                      originating service provider&apos;s &lt;code&gt;getInputTypes&lt;/code&gt;
                      method, or is not an &lt;code&gt;ImageInputStream&lt;/code&gt;.                    
                </exception>
                <see>
                    #getInput                    
                </see>
            </javadoc>
            <method name="setInput" type="void" line="299">
                <params>
                    <param name="input" type="Object"/>
                </params>
            </method>
            <javadoc line="302">
                Returns the &lt;code&gt;ImageInputStream&lt;/code&gt; or other
                  &lt;code&gt;Object&lt;/code&gt; previously set as the input source.  If the
                  input source has not been set, &lt;code&gt;null&lt;/code&gt; is returned.                
                <return>
                    the &lt;code&gt;Object&lt;/code&gt; that will be used for future
                      decoding, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    ImageInputStream                    
                </see>
                <see>
                    #setInput                    
                </see>
            </javadoc>
            <method name="getInput" type="Object" line="311"/>
            <javadoc line="314">
                Returns &lt;code&gt;true&lt;/code&gt; if the current input source has been
                  marked as seek forward only by passing &lt;code&gt;true&lt;/code&gt; as the
                  &lt;code&gt;seekForwardOnly&lt;/code&gt; argument to the
                  &lt;code&gt;setInput&lt;/code&gt; method.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the input source is seek forward
                      only.                    
                </return>
                <see>
                    #setInput                    
                </see>
            </javadoc>
            <method name="isSeekForwardOnly" type="boolean" line="323"/>
            <javadoc line="326">
                Returns &lt;code&gt;true&lt;/code&gt; if the current input source has been
                  marked as allowing metadata to be ignored by passing
                  &lt;code&gt;true&lt;/code&gt; as the &lt;code&gt;ignoreMetadata&lt;/code&gt; argument
                  to the &lt;code&gt;setInput&lt;/code&gt; method.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the metadata may be ignored.                    
                </return>
                <see>
                    #setInput                    
                </see>
            </javadoc>
            <method name="isIgnoringMetadata" type="boolean" line="334"/>
            <javadoc line="337">
                Returns the lowest valid index for reading an image, thumbnail,
                  or image metadata.  If &lt;code&gt;seekForwardOnly()&lt;/code&gt; is
                  &lt;code&gt;false&lt;/code&gt;, this value will typically remain 0,
                  indicating that random access is possible.  Otherwise, it will
                  contain the value of the most recently accessed index, and
                  increase in a monotonic fashion.                
                <return>
                    the minimum legal index for reading.                    
                </return>
            </javadoc>
            <method name="getMinIndex" type="int" line="346"/>
            <javadoc line="349">
                Returns an array of &lt;code&gt;Locale&lt;/code&gt;s that may be used to
                  localize warning listeners and compression settings.  A return
                  value of &lt;code&gt;null&lt;/code&gt; indicates that localization is not
                  supported.
                  &lt;p&gt; The default implementation returns a clone of the
                  &lt;code&gt;availableLocales&lt;/code&gt; instance variable if it is
                  non-&lt;code&gt;null&lt;/code&gt;, or else returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    an array of &lt;code&gt;Locale&lt;/code&gt;s that may be used as
                      arguments to &lt;code&gt;setLocale&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="360">
                <scope line="361"/>
                <scope line="364"/>
            </method>
            <javadoc line="368">
                Sets the current &lt;code&gt;Locale&lt;/code&gt; of this
                  &lt;code&gt;ImageReader&lt;/code&gt; to the given value.  A value of
                  &lt;code&gt;null&lt;/code&gt; removes any previous setting, and indicates
                  that the reader should localize as it sees fit.                
                <param>
                    locale the desired &lt;code&gt;Locale&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;locale&lt;/code&gt; is
                      non-&lt;code&gt;null&lt;/code&gt; but is not one of the values returned by
                      &lt;code&gt;getAvailableLocales&lt;/code&gt;.                    
                </exception>
                <see>
                    #getLocale                    
                </see>
            </javadoc>
            <method name="setLocale" type="void" line="380">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="381">
                    <declaration name="locales" type="Locale[]" line="382"/>
                    <declaration name="found" type="boolean" line="383"/>
                    <scope line="384">
                        <scope line="385">
                            <scope line="386"/>
                        </scope>
                    </scope>
                    <scope line="392"/>
                </scope>
            </method>
            <javadoc line="398">
                Returns the currently set &lt;code&gt;Locale&lt;/code&gt;, or
                  &lt;code&gt;null&lt;/code&gt; if none has been set.                
                <return>
                    the current &lt;code&gt;Locale&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #setLocale                    
                </see>
            </javadoc>
            <method name="getLocale" type="Locale" line="404"/>
            <method name="getNumImages" type="int" line="407"/>
            <javadoc line="407">
                Returns the number of images, not including thumbnails, available
                  from the current input source.
                  &lt;p&gt; Note that some image formats (such as animated GIF) do not
                  specify how many images are present in the stream.  Thus
                  determining the number of images will require the entire stream
                  to be scanned and may require memory for buffering.  If images
                  are to be processed in order, it may be more efficient to
                  simply call &lt;code&gt;read&lt;/code&gt; with increasing indices until an
                  &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is thrown to indicate
                  that no more images are available.  The
                  &lt;code&gt;allowSearch&lt;/code&gt; parameter may be set to
                  &lt;code&gt;false&lt;/code&gt; to indicate that an exhaustive search is not
                  desired; the return value will be &lt;code&gt;-1&lt;/code&gt; to indicate
                  that a search is necessary.  If the input has been specified
                  with &lt;code&gt;seekForwardOnly&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;,
                  this method throws an &lt;code&gt;IllegalStateException&lt;/code&gt; if
                  &lt;code&gt;allowSearch&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    allowSearch if &lt;code&gt;true&lt;/code&gt;, the true number of
                      images will be returned even if a search is required.  If
                      &lt;code&gt;false&lt;/code&gt;, the reader may return &lt;code&gt;-1&lt;/code&gt;
                      without performing the search.                    
                </param>
                <return>
                    the number of images, as an &lt;code&gt;int&lt;/code&gt;, or
                      &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;allowSearch&lt;/code&gt; is
                      &lt;code&gt;false&lt;/code&gt; and a search would be required.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been set,
                      or if the input has been specified with &lt;code&gt;seekForwardOnly&lt;/code&gt;
                      set to &lt;code&gt;true&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs reading the
                      information from the input source.                    
                </exception>
                <see>
                    #setInput                    
                </see>
            </javadoc>
            <method name="getWidth" type="int" line="440"/>
            <javadoc line="440">
                Returns the width in pixels of the given image within the input
                  source.
                  &lt;p&gt; If the image can be rendered to a user-specified size, then
                  this method returns the default width.                
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <return>
                    the width of the image, as an &lt;code&gt;int&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs reading the width
                      information from the input source.                    
                </exception>
            </javadoc>
            <method name="getHeight" type="int" line="454"/>
            <javadoc line="454">
                Returns the height in pixels of the given image within the
                  input source.
                  &lt;p&gt; If the image can be rendered to a user-specified size, then
                  this method returns the default height.                
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <return>
                    the height of the image, as an &lt;code&gt;int&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs reading the height
                      information from the input source.                    
                </exception>
            </javadoc>
            <javadoc line="468">
                Returns &lt;code&gt;true&lt;/code&gt; if the storage format of the given
                  image places no inherent impediment on random access to pixels.
                  For most compressed formats, such as JPEG, this method should
                  return &lt;code&gt;false&lt;/code&gt;, as a large section of the image in
                  addition to the region of interest may need to be decoded.
                  &lt;p&gt; This is merely a hint for programs that wish to be
                  efficient; all readers must be able to read arbitrary regions
                  as specified in an &lt;code&gt;ImageReadParam&lt;/code&gt;.
                  &lt;p&gt; Note that formats that return &lt;code&gt;false&lt;/code&gt; from
                  this method may nonetheless allow tiling (&lt;i&gt;e.g.&lt;/i&gt; Restart
                  Markers in JPEG), and random access will likely be reasonably
                  efficient on tiles.  See {@link #isImageTiled&lt;code&gt;isImageTiled&lt;/code&gt;}.
                  &lt;p&gt; A reader for which all images are guaranteed to support
                  easy random access, or are guaranteed not to support easy
                  random access, may return &lt;code&gt;true&lt;/code&gt; or
                  &lt;code&gt;false&lt;/code&gt; respectively without accessing any image
                  data.  In such cases, it is not necessary to throw an exception
                  even if no input source has been set or the image index is out
                  of bounds.
                  &lt;p&gt; The default implementation returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if reading a region of interest of
                      the given image is likely to be efficient.                    
                </return>
                <exception>
                    IllegalStateException if an input source is required
                      to determine the return value, but none has been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if an image must be
                      accessed to determine the return value, but the supplied index
                      is out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="isRandomAccessEasy" type="boolean" line="499">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="502">
                Returns the aspect ratio of the given image (that is, its width
                  divided by its height) as a &lt;code&gt;float&lt;/code&gt;.  For images
                  that are inherently resizable, this method provides a way to
                  determine the appropriate width given a deired height, or vice
                  versa.  For non-resizable images, the true width and height
                  are used.
                  &lt;p&gt; The default implementation simply returns
                  &lt;code&gt;(float)getWidth(imageIndex)/getHeight(imageIndex)&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <return>
                    a &lt;code&gt;float&lt;/code&gt; indicating the aspect ratio of the
                      given image.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getAspectRatio" type="float" line="519">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="522">
                Returns an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; indicating the
                  &lt;code&gt;SampleModel&lt;/code&gt; and &lt;code&gt;ColorModel&lt;/code&gt; which most
                  closely represents the &quot;raw&quot; internal format of the image.  For
                  example, for a JPEG image the raw type might have a YCbCr color
                  space even though the image would conventionally be transformed
                  into an RGB color space prior to display.  The returned value
                  should also be included in the list of values returned by
                  &lt;code&gt;getImageTypes&lt;/code&gt;.
                  &lt;p&gt; The default implementation simply returns the first entry
                  from the list provided by &lt;code&gt;getImageType&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs reading the format
                      information from the input source.                    
                </exception>
            </javadoc>
            <method name="getRawImageType" type="ImageTypeSpecifier" line="541">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <method name="getImageTypes" type="Iterator&lt;ImageTypeSpecifier&gt;" line="544"/>
            <javadoc line="544">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing possible image
                  types to which the given image may be decoded, in the form of
                  &lt;code&gt;ImageTypeSpecifiers&lt;/code&gt;s.  At least one legal image
                  type will be returned.
                  &lt;p&gt; The first element of the iterator should be the most
                  &quot;natural&quot; type for decoding the image with as little loss as
                  possible.  For example, for a JPEG image the first entry should
                  be an RGB image, even though the image data is stored
                  internally in a YCbCr color space.                
                <param>
                    imageIndex the index of the image to be
                      &lt;code&gt;retrieved&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing at least one
                      &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; representing suggested image
                      types for decoding the current given image.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs reading the format
                      information from the input source.                    
                </exception>
                <see>
                    ImageReadParam#setDestination(BufferedImage)                    
                </see>
                <see>
                    ImageReadParam#setDestinationType(ImageTypeSpecifier)                    
                </see>
            </javadoc>
            <javadoc line="568">
                Returns a default &lt;code&gt;ImageReadParam&lt;/code&gt; object
                  appropriate for this format.  All subclasses should define a
                  set of default values for all parameters and return them with
                  this call.  This method may be called before the input source
                  is set.
                  &lt;p&gt; The default implementation constructs and returns a new
                  &lt;code&gt;ImageReadParam&lt;/code&gt; object that does not allow source
                  scaling (&lt;i&gt;i.e.&lt;/i&gt;, it returns &lt;code&gt;new
                  ImageReadParam()&lt;/code&gt;.                
                <return>
                    an &lt;code&gt;ImageReadParam&lt;/code&gt; object which may be used
                      to control the decoding process using a set of default settings.                    
                </return>
            </javadoc>
            <method name="getDefaultReadParam" type="ImageReadParam" line="581"/>
            <method name="getStreamMetadata" type="IIOMetadata" line="584"/>
            <javadoc line="584">
                Returns an &lt;code&gt;IIOMetadata&lt;/code&gt; object representing the
                  metadata associated with the input source as a whole (i.e., not
                  associated with any particular image), or &lt;code&gt;null&lt;/code&gt; if
                  the reader does not support reading metadata, is set to ignore
                  metadata, or if no metadata is available.                
                <return>
                    an &lt;code&gt;IIOMetadata&lt;/code&gt; object, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <javadoc line="594">
                Returns an &lt;code&gt;IIOMetadata&lt;/code&gt; object representing the
                  metadata associated with the input source as a whole (i.e.,
                  not associated with any particular image).  If no such data
                  exists, &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The resuting metadata object is only responsible for
                  returning documents in the format named by
                  &lt;code&gt;formatName&lt;/code&gt;.  Within any documents that are
                  returned, only nodes whose names are members of
                  &lt;code&gt;nodeNames&lt;/code&gt; are required to be returned.  In this
                  way, the amount of metadata processing done by the reader may
                  be kept to a minimum, based on what information is actually
                  needed.
                  &lt;p&gt; If &lt;code&gt;formatName&lt;/code&gt; is not the name of a supported
                  metadata format, &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; In all cases, it is legal to return a more capable metadata
                  object than strictly necessary.  The format name and node names
                  are merely hints that may be used to reduce the reader&apos;s
                  workload.
                  &lt;p&gt; The default implementation simply returns the result of
                  calling &lt;code&gt;getStreamMetadata()&lt;/code&gt;, after checking that
                  the format name is supported.  If it is not,
                  &lt;code&gt;null&lt;/code&gt; is returned.                
                <param>
                    formatName a metadata format name that may be used to retrieve
                      a document from the returned &lt;code&gt;IIOMetadata&lt;/code&gt; object.                    
                </param>
                <param>
                    nodeNames a &lt;code&gt;Set&lt;/code&gt; containing the names of
                      nodes that may be contained in a retrieved document.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadata&lt;/code&gt; object, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;nodeNames&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getStreamMetadata" type="IIOMetadata" line="628">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="nodeNames" type="Set&lt;String&gt;"/>
                </params>
            </method>
            <method name="getMetadata" type="IIOMetadata" line="631">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="nodeNames" type="Set"/>
                    <param name="wantStream" type="boolean"/>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="632"/>
                <scope line="635"/>
                <declaration name="metadata" type="IIOMetadata" line="638"/>
                <scope line="639">
                    <scope line="640"/>
                    <declaration name="nativeName" type="String" line="643"/>
                    <scope line="644"/>
                    <declaration name="extraNames" type="String[]" line="647"/>
                    <scope line="648">
                        <scope line="649">
                            <scope line="650"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getImageMetadata" type="IIOMetadata" line="658"/>
            <javadoc line="658">
                Returns an &lt;code&gt;IIOMetadata&lt;/code&gt; object containing metadata
                  associated with the given image, or &lt;code&gt;null&lt;/code&gt; if the
                  reader does not support reading metadata, is set to ignore
                  metadata, or if no metadata is available.                
                <param>
                    imageIndex the index of the image whose metadata is to
                      be retrieved.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadata&lt;/code&gt; object, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <javadoc line="674">
                Returns an &lt;code&gt;IIOMetadata&lt;/code&gt; object representing the
                  metadata associated with the given image, or &lt;code&gt;null&lt;/code&gt;
                  if the reader does not support reading metadata or none
                  is available.
                  &lt;p&gt; The resuting metadata object is only responsible for
                  returning documents in the format named by
                  &lt;code&gt;formatName&lt;/code&gt;.  Within any documents that are
                  returned, only nodes whose names are members of
                  &lt;code&gt;nodeNames&lt;/code&gt; are required to be returned.  In this
                  way, the amount of metadata processing done by the reader may
                  be kept to a minimum, based on what information is actually
                  needed.
                  &lt;p&gt; If &lt;code&gt;formatName&lt;/code&gt; is not the name of a supported
                  metadata format, &lt;code&gt;null&lt;/code&gt; may be returned.
                  &lt;p&gt; In all cases, it is legal to return a more capable metadata
                  object than strictly necessary.  The format name and node names
                  are merely hints that may be used to reduce the reader&apos;s
                  workload.
                  &lt;p&gt; The default implementation simply returns the result of
                  calling &lt;code&gt;getImageMetadata(imageIndex)&lt;/code&gt;, after
                  checking that the format name is supported.  If it is not,
                  &lt;code&gt;null&lt;/code&gt; is returned.                
                <param>
                    imageIndex the index of the image whose metadata is to
                      be retrieved.                    
                </param>
                <param>
                    formatName a metadata format name that may be used to retrieve
                      a document from the returned &lt;code&gt;IIOMetadata&lt;/code&gt; object.                    
                </param>
                <param>
                    nodeNames a &lt;code&gt;Set&lt;/code&gt; containing the names of
                      nodes that may be contained in a retrieved document.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadata&lt;/code&gt; object, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;nodeNames&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getImageMetadata" type="IIOMetadata" line="714">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="formatName" type="String"/>
                    <param name="nodeNames" type="Set&lt;String&gt;"/>
                </params>
            </method>
            <javadoc line="717">
                Reads the image indexed by &lt;code&gt;imageIndex&lt;/code&gt; and returns
                  it as a complete &lt;code&gt;BufferedImage&lt;/code&gt;, using a default
                  &lt;code&gt;ImageReadParam&lt;/code&gt;.  This is a convenience method
                  that calls &lt;code&gt;read(imageIndex, null)&lt;/code&gt;.
                  &lt;p&gt; The image returned will be formatted according to the first
                  &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; returned from
                  &lt;code&gt;getImageTypes&lt;/code&gt;.
                  &lt;p&gt; Any registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt; objects
                  will be notified by calling their &lt;code&gt;imageStarted&lt;/code&gt;
                  method, followed by calls to their &lt;code&gt;imageProgress&lt;/code&gt;
                  method as the read progresses.  Finally their
                  &lt;code&gt;imageComplete&lt;/code&gt; method will be called.
                  &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; objects may be updated at
                  other times during the read as pixels are decoded.  Finally,
                  &lt;code&gt;IIOReadWarningListener&lt;/code&gt; objects will receive
                  notification of any non-fatal warnings that occur during
                  decoding.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <return>
                    the desired portion of the image as a
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="read" type="BufferedImage" line="744">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <method name="read" type="BufferedImage" line="747"/>
            <javadoc line="747">
                Reads the image indexed by &lt;code&gt;imageIndex&lt;/code&gt; and returns
                  it as a complete &lt;code&gt;BufferedImage&lt;/code&gt;, using a supplied
                  &lt;code&gt;ImageReadParam&lt;/code&gt;.
                  &lt;p&gt; The actual &lt;code&gt;BufferedImage&lt;/code&gt; returned will be
                  chosen using the algorithm defined by the
                  &lt;code&gt;getDestination&lt;/code&gt; method.
                  &lt;p&gt; Any registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt; objects
                  will be notified by calling their &lt;code&gt;imageStarted&lt;/code&gt;
                  method, followed by calls to their &lt;code&gt;imageProgress&lt;/code&gt;
                  method as the read progresses.  Finally their
                  &lt;code&gt;imageComplete&lt;/code&gt; method will be called.
                  &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; objects may be updated at
                  other times during the read as pixels are decoded.  Finally,
                  &lt;code&gt;IIOReadWarningListener&lt;/code&gt; objects will receive
                  notification of any non-fatal warnings that occur during
                  decoding.
                  &lt;p&gt; The set of source bands to be read and destination bands to
                  be written is determined by calling &lt;code&gt;getSourceBands&lt;/code&gt;
                  and &lt;code&gt;getDestinationBands&lt;/code&gt; on the supplied
                  &lt;code&gt;ImageReadParam&lt;/code&gt;.  If the lengths of the arrays
                  returned by these methods differ, the set of source bands
                  contains an index larger that the largest available source
                  index, or the set of destination bands contains an index larger
                  than the largest legal destination index, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageReadParam&lt;/code&gt; contains
                  optional setting values not supported by this reader (&lt;i&gt;e.g.&lt;/i&gt;
                  source render size or any format-specific settings), they will
                  be ignored.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageReadParam&lt;/code&gt; used to control
                      the reading process, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    the desired portion of the image as a
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if the set of source and
                      destination bands specified by
                      &lt;code&gt;param.getSourceBands&lt;/code&gt; and
                      &lt;code&gt;param.getDestinationBands&lt;/code&gt; differ in length or
                      include indices that are out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if the resulting image would
                      have a width or height less than 1.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <javadoc line="796">
                Reads the image indexed by &lt;code&gt;imageIndex&lt;/code&gt; and returns
                  an &lt;code&gt;IIOImage&lt;/code&gt; containing the image, thumbnails, and
                  associated image metadata, using a supplied
                  &lt;code&gt;ImageReadParam&lt;/code&gt;.
                  &lt;p&gt; The actual &lt;code&gt;BufferedImage&lt;/code&gt; referenced by the
                  returned &lt;code&gt;IIOImage&lt;/code&gt; will be chosen using the
                  algorithm defined by the &lt;code&gt;getDestination&lt;/code&gt; method.
                  &lt;p&gt; Any registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt; objects
                  will be notified by calling their &lt;code&gt;imageStarted&lt;/code&gt;
                  method, followed by calls to their &lt;code&gt;imageProgress&lt;/code&gt;
                  method as the read progresses.  Finally their
                  &lt;code&gt;imageComplete&lt;/code&gt; method will be called.
                  &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; objects may be updated at
                  other times during the read as pixels are decoded.  Finally,
                  &lt;code&gt;IIOReadWarningListener&lt;/code&gt; objects will receive
                  notification of any non-fatal warnings that occur during
                  decoding.
                  &lt;p&gt; The set of source bands to be read and destination bands to
                  be written is determined by calling &lt;code&gt;getSourceBands&lt;/code&gt;
                  and &lt;code&gt;getDestinationBands&lt;/code&gt; on the supplied
                  &lt;code&gt;ImageReadParam&lt;/code&gt;.  If the lengths of the arrays
                  returned by these methods differ, the set of source bands
                  contains an index larger that the largest available source
                  index, or the set of destination bands contains an index larger
                  than the largest legal destination index, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  &lt;p&gt; Thumbnails will be returned in their entirety regardless of
                  the region settings.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageReadParam&lt;/code&gt; contains
                  optional setting values not supported by this reader (&lt;i&gt;e.g.&lt;/i&gt;
                  source render size or any format-specific settings), those
                  values will be ignored.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageReadParam&lt;/code&gt; used to control
                      the reading process, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;IIOImage&lt;/code&gt; containing the desired portion
                      of the image, a set of thumbnails, and associated image
                      metadata.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if the set of source and
                      destination bands specified by
                      &lt;code&gt;param.getSourceBands&lt;/code&gt; and
                      &lt;code&gt;param.getDestinationBands&lt;/code&gt; differ in length or
                      include indices that are out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if the resulting image
                      would have a width or height less than 1.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="readAll" type="IIOImage" line="848">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="param" type="ImageReadParam"/>
                </params>
                <scope line="849"/>
                <declaration name="im" type="BufferedImage" line="852"/>
                <declaration name="thumbnails" type="ArrayList" line="853"/>
                <declaration name="numThumbnails" type="int" line="854"/>
                <scope line="855">
                    <scope line="857"/>
                </scope>
                <declaration name="metadata" type="IIOMetadata" line="861"/>
            </method>
            <javadoc line="864">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all the images,
                  thumbnails, and metadata, starting at the index given by
                  &lt;code&gt;getMinIndex&lt;/code&gt;, from the input source in the form of
                  &lt;code&gt;IIOImage&lt;/code&gt; objects.  An &lt;code&gt;Iterator&lt;/code&gt;
                  containing &lt;code&gt;ImageReadParam&lt;/code&gt; objects is supplied; one
                  element is consumed for each image read from the input source
                  until no more images are available.  If the read param
                  &lt;code&gt;Iterator&lt;/code&gt; runs out of elements, but there are still
                  more images available from the input source, default read
                  params are used for the remaining images.
                  &lt;p&gt; If &lt;code&gt;params&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a default read
                  param will be used for all images.
                  &lt;p&gt; The actual &lt;code&gt;BufferedImage&lt;/code&gt; referenced by the
                  returned &lt;code&gt;IIOImage&lt;/code&gt; will be chosen using the
                  algorithm defined by the &lt;code&gt;getDestination&lt;/code&gt; method.
                  &lt;p&gt; Any registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt; objects
                  will be notified by calling their &lt;code&gt;sequenceStarted&lt;/code&gt;
                  method once.  Then, for each image decoded, there will be a
                  call to &lt;code&gt;imageStarted&lt;/code&gt;, followed by calls to
                  &lt;code&gt;imageProgress&lt;/code&gt; as the read progresses, and finally
                  to &lt;code&gt;imageComplete&lt;/code&gt;.  The
                  &lt;code&gt;sequenceComplete&lt;/code&gt; method will be called after the
                  last image has been decoded.
                  &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; objects may be updated at
                  other times during the read as pixels are decoded.  Finally,
                  &lt;code&gt;IIOReadWarningListener&lt;/code&gt; objects will receive
                  notification of any non-fatal warnings that occur during
                  decoding.
                  &lt;p&gt; The set of source bands to be read and destination bands to
                  be written is determined by calling &lt;code&gt;getSourceBands&lt;/code&gt;
                  and &lt;code&gt;getDestinationBands&lt;/code&gt; on the supplied
                  &lt;code&gt;ImageReadParam&lt;/code&gt;.  If the lengths of the arrays
                  returned by these methods differ, the set of source bands
                  contains an index larger that the largest available source
                  index, or the set of destination bands contains an index larger
                  than the largest legal destination index, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  &lt;p&gt; Thumbnails will be returned in their entirety regardless of the
                  region settings.
                  &lt;p&gt; If any of the supplied &lt;code&gt;ImageReadParam&lt;/code&gt;s contain
                  optional setting values not supported by this reader (&lt;i&gt;e.g.&lt;/i&gt;
                  source render size or any format-specific settings), they will
                  be ignored.                
                <param>
                    params an &lt;code&gt;Iterator&lt;/code&gt; containing
                      &lt;code&gt;ImageReadParam&lt;/code&gt; objects.                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; representing the
                      contents of the input source as &lt;code&gt;IIOImage&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IllegalArgumentException if any
                      non-&lt;code&gt;null&lt;/code&gt; element of &lt;code&gt;params&lt;/code&gt; is not an
                      &lt;code&gt;ImageReadParam&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if the set of source and
                      destination bands specified by
                      &lt;code&gt;param.getSourceBands&lt;/code&gt; and
                      &lt;code&gt;param.getDestinationBands&lt;/code&gt; differ in length or
                      include indices that are out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if a resulting image would
                      have a width or height less than 1.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
                <see>
                    ImageReadParam                    
                </see>
                <see>
                    IIOImage                    
                </see>
            </javadoc>
            <method name="readAll" type="Iterator&lt;IIOImage&gt;" line="928">
                <params>
                    <param name="params" type="Iterator&lt;? extends ImageReadParam&gt;"/>
                </params>
                <declaration name="output" type="List" line="929"/>
                <declaration name="imageIndex" type="int" line="930"/>
                <scope line="932">
                    <declaration name="param" type="ImageReadParam" line="933"/>
                    <scope line="934">
                        <declaration name="o" type="Object" line="935"/>
                        <scope line="936">
                            <scope line="937"/>
                            <scope line="940"/>
                        </scope>
                    </scope>
                    <declaration name="bi" type="BufferedImage" line="945"/>
                    <scope line="946"/>
                    <scope line="949"/>
                    <declaration name="thumbnails" type="ArrayList" line="952"/>
                    <declaration name="numThumbnails" type="int" line="953"/>
                    <scope line="954">
                        <scope line="956"/>
                    </scope>
                    <declaration name="metadata" type="IIOMetadata" line="960"/>
                    <declaration name="im" type="IIOImage" line="961"/>
                </scope>
            </method>
            <javadoc line="968">
                Returns &lt;code&gt;true&lt;/code&gt; if this plug-in supports reading
                  just a {@link java.awt.image.Raster &lt;code&gt;Raster&lt;/code&gt;} of pixel data.
                  If this method returns &lt;code&gt;false&lt;/code&gt;, calls to{@link #readRaster &lt;code&gt;readRaster&lt;/code&gt;} or {@link #readTileRaster&lt;code&gt;readTileRaster&lt;/code&gt;} will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this plug-in supports reading raw
                      &lt;code&gt;Raster&lt;/code&gt;s.                    
                </return>
                <see>
                    #readRaster                    
                </see>
                <see>
                    #readTileRaster                    
                </see>
            </javadoc>
            <method name="canReadRaster" type="boolean" line="979"/>
            <javadoc line="982">
                Returns a new &lt;code&gt;Raster&lt;/code&gt; object containing the raw pixel data
                  from the image stream, without any color conversion applied.  The
                  application must determine how to interpret the pixel data by other
                  means.  Any destination or image-type parameters in the supplied
                  &lt;code&gt;ImageReadParam&lt;/code&gt; object are ignored, but all other
                  parameters are used exactly as in the {@link #read &lt;code&gt;read&lt;/code&gt;}method, except that any destination offset is used as a logical rather
                  than a physical offset.  The size of the returned &lt;code&gt;Raster&lt;/code&gt;
                  will always be that of the source region clipped to the actual image.
                  Logical offsets in the stream itself are ignored.
                  &lt;p&gt; This method allows formats that normally apply a color
                  conversion, such as JPEG, and formats that do not normally have an
                  associated colorspace, such as remote sensing or medical imaging data,
                  to provide access to raw pixel data.
                  &lt;p&gt; Any registered &lt;code&gt;readUpdateListener&lt;/code&gt;s are ignored, as
                  there is no &lt;code&gt;BufferedImage&lt;/code&gt;, but all other listeners are
                  called exactly as they are for the {@link #read &lt;code&gt;read&lt;/code&gt;}method.
                  &lt;p&gt; If {@link #canReadRaster &lt;code&gt;canReadRaster()&lt;/code&gt;} returns
                  &lt;code&gt;false&lt;/code&gt;, this method throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageReadParam&lt;/code&gt; contains
                  optional setting values not supported by this reader (&lt;i&gt;e.g.&lt;/i&gt;
                  source render size or any format-specific settings), they will
                  be ignored.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image to be read.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageReadParam&lt;/code&gt; used to control
                      the reading process, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    the desired portion of the image as a
                      &lt;code&gt;Raster&lt;/code&gt;.                    
                </return>
                <exception>
                    UnsupportedOperationException if this plug-in does not
                      support reading raw &lt;code&gt;Raster&lt;/code&gt;s.                    
                </exception>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
                <see>
                    #canReadRaster                    
                </see>
                <see>
                    #read                    
                </see>
                <see>
                    java.awt.image.Raster                    
                </see>
            </javadoc>
            <method name="readRaster" type="Raster" line="1024">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="param" type="ImageReadParam"/>
                </params>
            </method>
            <javadoc line="1027">
                Returns &lt;code&gt;true&lt;/code&gt; if the image is organized into
                  &lt;i&gt;tiles&lt;/i&gt;, that is, equal-sized non-overlapping rectangles.
                  &lt;p&gt; A reader plug-in may choose whether or not to expose tiling
                  that is present in the image as it is stored.  It may even
                  choose to advertise tiling when none is explicitly present.  In
                  general, tiling should only be advertised if there is some
                  advantage (in speed or space) to accessing individual tiles.
                  Regardless of whether the reader advertises tiling, it must be
                  capable of reading an arbitrary rectangular region specified in
                  an &lt;code&gt;ImageReadParam&lt;/code&gt;.
                  &lt;p&gt; A reader for which all images are guaranteed to be tiled,
                  or are guaranteed not to be tiled, may return &lt;code&gt;true&lt;/code&gt;
                  or &lt;code&gt;false&lt;/code&gt; respectively without accessing any image
                  data.  In such cases, it is not necessary to throw an exception
                  even if no input source has been set or the image index is out
                  of bounds.
                  &lt;p&gt; The default implementation just returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the image is tiled.                    
                </return>
                <exception>
                    IllegalStateException if an input source is required
                      to determine the return value, but none has been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if an image must be
                      accessed to determine the return value, but the supplied index
                      is out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="isImageTiled" type="boolean" line="1054">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1057">
                Returns the width of a tile in the given image.
                  &lt;p&gt; The default implementation simply returns
                  &lt;code&gt;getWidth(imageIndex)&lt;/code&gt;, which is correct for
                  non-tiled images.  Readers that support tiling should override
                  this method.                
                <return>
                    the width of a tile.                    
                </return>
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getTileWidth" type="int" line="1070">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1073">
                Returns the height of a tile in the given image.
                  &lt;p&gt; The default implementation simply returns
                  &lt;code&gt;getHeight(imageIndex)&lt;/code&gt;, which is correct for
                  non-tiled images.  Readers that support tiling should override
                  this method.                
                <return>
                    the height of a tile.                    
                </return>
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getTileHeight" type="int" line="1086">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1089">
                Returns the X coordinate of the upper-left corner of tile (0,
                  0) in the given image.
                  &lt;p&gt; A reader for which the tile grid X offset always has the
                  same value (usually 0), may return the value without accessing
                  any image data.  In such cases, it is not necessary to throw an
                  exception even if no input source has been set or the image
                  index is out of bounds.
                  &lt;p&gt; The default implementation simply returns 0, which is
                  correct for non-tiled images and tiled images in most formats.
                  Readers that support tiling with non-(0, 0) offsets should
                  override this method.                
                <return>
                    the X offset of the tile grid.                    
                </return>
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <exception>
                    IllegalStateException if an input source is required
                      to determine the return value, but none has been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if an image must be
                      accessed to determine the return value, but the supplied index
                      is out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getTileGridXOffset" type="int" line="1110">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1113">
                Returns the Y coordinate of the upper-left corner of tile (0,
                  0) in the given image.
                  &lt;p&gt; A reader for which the tile grid Y offset always has the
                  same value (usually 0), may return the value without accessing
                  any image data.  In such cases, it is not necessary to throw an
                  exception even if no input source has been set or the image
                  index is out of bounds.
                  &lt;p&gt; The default implementation simply returns 0, which is
                  correct for non-tiled images and tiled images in most formats.
                  Readers that support tiling with non-(0, 0) offsets should
                  override this method.                
                <return>
                    the Y offset of the tile grid.                    
                </return>
                <param>
                    imageIndex the index of the image to be queried.                    
                </param>
                <exception>
                    IllegalStateException if an input source is required
                      to determine the return value, but none has been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if an image must be
                      accessed to determine the return value, but the supplied index
                      is out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getTileGridYOffset" type="int" line="1134">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1137">
                Reads the tile indicated by the &lt;code&gt;tileX&lt;/code&gt; and
                  &lt;code&gt;tileY&lt;/code&gt; arguments, returning it as a
                  &lt;code&gt;BufferedImage&lt;/code&gt;.  If the arguments are out of range,
                  an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.  If the
                  image is not tiled, the values 0, 0 will return the entire
                  image; any other values will cause an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; to be thrown.
                  &lt;p&gt; This method is merely a convenience equivalent to calling
                  &lt;code&gt;read(int, ImageReadParam)&lt;/code&gt; with a read param
                  specifiying a source region having offsets of
                  &lt;code&gt;tileXgetTileWidth(imageIndex)&lt;/code&gt;,
                  &lt;code&gt;tileYgetTileHeight(imageIndex)&lt;/code&gt; and width and
                  height of &lt;code&gt;getTileWidth(imageIndex)&lt;/code&gt;,
                  &lt;code&gt;getTileHeight(imageIndex)&lt;/code&gt;; and subsampling
                  factors of 1 and offsets of 0.  To subsample a tile, call
                  &lt;code&gt;read&lt;/code&gt; with a read param specifying this region
                  and different subsampling parameters.
                  &lt;p&gt; The default implementation returns the entire image if
                  &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt; are 0, or throws
                  an &lt;code&gt;IllegalArgumentException&lt;/code&gt; otherwise.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <param>
                    tileX the column index (starting with 0) of the tile
                      to be retrieved.                    
                </param>
                <param>
                    tileY the row index (starting with 0) of the tile
                      to be retrieved.                    
                </param>
                <return>
                    the tile as a &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;imageIndex&lt;/code&gt;
                      is out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if the tile indices are
                      out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="readTile" type="BufferedImage" line="1172">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
                <scope line="1173"/>
            </method>
            <javadoc line="1178">
                Returns a new &lt;code&gt;Raster&lt;/code&gt; object containing the raw
                  pixel data from the tile, without any color conversion applied.
                  The application must determine how to interpret the pixel data by other
                  means.
                  &lt;p&gt; If {@link #canReadRaster &lt;code&gt;canReadRaster()&lt;/code&gt;} returns
                  &lt;code&gt;false&lt;/code&gt;, this method throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
                  &lt;p&gt; The default implementation checks if reading
                  &lt;code&gt;Raster&lt;/code&gt;s is supported, and if so calls {@link #readRaster &lt;code&gt;readRaster(imageIndex, null)&lt;/code&gt;} if
                  &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt; are 0, or throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; otherwise.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <param>
                    tileX the column index (starting with 0) of the tile
                      to be retrieved.                    
                </param>
                <param>
                    tileY the row index (starting with 0) of the tile
                      to be retrieved.                    
                </param>
                <return>
                    the tile as a &lt;code&gt;Raster&lt;/code&gt;.                    
                </return>
                <exception>
                    UnsupportedOperationException if this plug-in does not
                      support reading raw &lt;code&gt;Raster&lt;/code&gt;s.                    
                </exception>
                <exception>
                    IllegalArgumentException if the tile indices are
                      out of bounds.                    
                </exception>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;imageIndex&lt;/code&gt;
                      is out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
                <see>
                    #readTile                    
                </see>
                <see>
                    #readRaster                    
                </see>
                <see>
                    java.awt.image.Raster                    
                </see>
            </javadoc>
            <method name="readTileRaster" type="Raster" line="1209">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
                <scope line="1210"/>
                <scope line="1213"/>
            </method>
            <javadoc line="1218">
                Returns a &lt;code&gt;RenderedImage&lt;/code&gt; object that contains the
                  contents of the image indexed by &lt;code&gt;imageIndex&lt;/code&gt;.  By
                  default, the returned image is simply the
                  &lt;code&gt;BufferedImage&lt;/code&gt; returned by &lt;code&gt;read(imageIndex,
                  param)&lt;/code&gt;.
                  &lt;p&gt; The semantics of this method may differ from those of the
                  other &lt;code&gt;read&lt;/code&gt; methods in several ways.  First, any
                  destination image and/or image type set in the
                  &lt;code&gt;ImageReadParam&lt;/code&gt; may be ignored.  Second, the usual
                  listener calls are not guaranteed to be made, or to be
                  meaningful if they are.  This is because the returned image may
                  not be fully populated with pixel data at the time it is
                  returned, or indeed at any time.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageReadParam&lt;/code&gt; contains
                  optional setting values not supported by this reader (&lt;i&gt;e.g.&lt;/i&gt;
                  source render size or any format-specific settings), they will
                  be ignored.
                  &lt;p&gt; The default implementation just calls {@link #read&lt;code&gt;read(imageIndex, param)&lt;/code&gt;}.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageReadParam&lt;/code&gt; used to control
                      the reading process, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    a &lt;code&gt;RenderedImage&lt;/code&gt; object providing a view of
                      the image.                    
                </return>
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if the set of source and
                      destination bands specified by
                      &lt;code&gt;param.getSourceBands&lt;/code&gt; and
                      &lt;code&gt;param.getDestinationBands&lt;/code&gt; differ in length or
                      include indices that are out of bounds.                    
                </exception>
                <exception>
                    IllegalArgumentException if the resulting image
                      would have a width or height less than 1.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="readAsRenderedImage" type="RenderedImage" line="1255">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="param" type="ImageReadParam"/>
                </params>
            </method>
            <javadoc line="1258">
                Returns &lt;code&gt;true&lt;/code&gt; if the image format understood by
                  this reader supports thumbnail preview images associated with
                  it.  The default implementation returns &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt; If this method returns &lt;code&gt;false&lt;/code&gt;,
                  &lt;code&gt;hasThumbnails&lt;/code&gt; and &lt;code&gt;getNumThumbnails&lt;/code&gt;
                  will return &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;,
                  respectively, and &lt;code&gt;readThumbnail&lt;/code&gt; will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;, regardless of their
                  arguments.
                  &lt;p&gt; A reader that does not support thumbnails need not
                  implement any of the thumbnail-related methods.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if thumbnails are supported.                    
                </return>
            </javadoc>
            <method name="readerSupportsThumbnails" type="boolean" line="1272"/>
            <javadoc line="1275">
                Returns &lt;code&gt;true&lt;/code&gt; if the given image has thumbnail
                  preview images associated with it.  If the format does not
                  support thumbnails (&lt;code&gt;readerSupportsThumbnails&lt;/code&gt;
                  returns &lt;code&gt;false&lt;/code&gt;), &lt;code&gt;false&lt;/code&gt; will be
                  returned regardless of whether an input source has been set or
                  whether &lt;code&gt;imageIndex&lt;/code&gt; is in bounds.
                  &lt;p&gt; The default implementation returns &lt;code&gt;true&lt;/code&gt; if
                  &lt;code&gt;getNumThumbnails&lt;/code&gt; returns a value greater than 0.                
                <param>
                    imageIndex the index of the image being queried.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the given image has thumbnails.                    
                </return>
                <exception>
                    IllegalStateException if the reader supports
                      thumbnails but the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the reader supports
                      thumbnails but &lt;code&gt;imageIndex&lt;/code&gt; is out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="hasThumbnails" type="boolean" line="1292">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1295">
                Returns the number of thumbnail preview images associated with
                  the given image.  If the format does not support thumbnails,
                  (&lt;code&gt;readerSupportsThumbnails&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;), &lt;code&gt;0&lt;/code&gt; will be returned regardless
                  of whether an input source has been set or whether
                  &lt;code&gt;imageIndex&lt;/code&gt; is in bounds.
                  &lt;p&gt; The default implementation returns 0 without checking its
                  argument.                
                <param>
                    imageIndex the index of the image being queried.                    
                </param>
                <return>
                    the number of thumbnails associated with the given
                      image.                    
                </return>
                <exception>
                    IllegalStateException if the reader supports
                      thumbnails but the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the reader supports
                      thumbnails but &lt;code&gt;imageIndex&lt;/code&gt; is out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getNumThumbnails" type="int" line="1313">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1316">
                Returns the width of the thumbnail preview image indexed by
                  &lt;code&gt;thumbnailIndex&lt;/code&gt;, associated with the image indexed
                  by &lt;code&gt;ImageIndex&lt;/code&gt;.
                  &lt;p&gt; If the reader does not support thumbnails,
                  (&lt;code&gt;readerSupportsThumbnails&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;), an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;
                  will be thrown.
                  &lt;p&gt; The default implementation simply returns
                  &lt;code&gt;readThumbnail(imageindex,
                  thumbnailIndex).getWidth()&lt;/code&gt;.  Subclasses should therefore
                  override this method if possible in order to avoid forcing the
                  thumbnail to be read.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <param>
                    thumbnailIndex the index of the thumbnail to be retrieved.                    
                </param>
                <return>
                    the width of the desired thumbnail as an &lt;code&gt;int&lt;/code&gt;.                    
                </return>
                <exception>
                    UnsupportedOperationException if thumbnails are not
                      supported.                    
                </exception>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if either of the supplied
                      indices are out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getThumbnailWidth" type="int" line="1339">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="thumbnailIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1342">
                Returns the height of the thumbnail preview image indexed by
                  &lt;code&gt;thumbnailIndex&lt;/code&gt;, associated with the image indexed
                  by &lt;code&gt;ImageIndex&lt;/code&gt;.
                  &lt;p&gt; If the reader does not support thumbnails,
                  (&lt;code&gt;readerSupportsThumbnails&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;), an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;
                  will be thrown.
                  &lt;p&gt; The default implementation simply returns
                  &lt;code&gt;readThumbnail(imageindex,
                  thumbnailIndex).getHeight()&lt;/code&gt;.  Subclasses should
                  therefore override this method if possible in order to avoid
                  forcing the thumbnail to be read.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <param>
                    thumbnailIndex the index of the thumbnail to be retrieved.                    
                </param>
                <return>
                    the height of the desired thumbnail as an &lt;code&gt;int&lt;/code&gt;.                    
                </return>
                <exception>
                    UnsupportedOperationException if thumbnails are not
                      supported.                    
                </exception>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if either of the supplied
                      indices are out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="getThumbnailHeight" type="int" line="1365">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="thumbnailIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1368">
                Returns the thumbnail preview image indexed by
                  &lt;code&gt;thumbnailIndex&lt;/code&gt;, associated with the image indexed
                  by &lt;code&gt;ImageIndex&lt;/code&gt; as a &lt;code&gt;BufferedImage&lt;/code&gt;.
                  &lt;p&gt; Any registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt; objects
                  will be notified by calling their
                  &lt;code&gt;thumbnailStarted&lt;/code&gt;, &lt;code&gt;thumbnailProgress&lt;/code&gt;,
                  and &lt;code&gt;thumbnailComplete&lt;/code&gt; methods.
                  &lt;p&gt; If the reader does not support thumbnails,
                  (&lt;code&gt;readerSupportsThumbnails&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;), an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;
                  will be thrown regardless of whether an input source has been
                  set or whether the indices are in bounds.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image to be retrieved.                    
                </param>
                <param>
                    thumbnailIndex the index of the thumbnail to be retrieved.                    
                </param>
                <return>
                    the desired thumbnail as a &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <exception>
                    UnsupportedOperationException if thumbnails are not
                      supported.                    
                </exception>
                <exception>
                    IllegalStateException if the input source has not been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if either of the supplied
                      indices are out of bounds.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="readThumbnail" type="BufferedImage" line="1393">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="thumbnailIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1396">
                Requests that any current read operation be aborted.  The
                  contents of the image following the abort will be undefined.
                  &lt;p&gt; Readers should call &lt;code&gt;clearAbortRequest&lt;/code&gt; at the
                  beginning of each read operation, and poll the value of
                  &lt;code&gt;abortRequested&lt;/code&gt; regularly during the read.                
            </javadoc>
            <method name="abort" type="void" line="1403"/>
            <javadoc line="1406">
                Returns &lt;code&gt;true&lt;/code&gt; if a request to abort the current
                  read operation has been made since the reader was instantiated or
                  &lt;code&gt;clearAbortRequest&lt;/code&gt; was called.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the current read operation should
                      be aborted.                    
                </return>
                <see>
                    #abort                    
                </see>
                <see>
                    #clearAbortRequest                    
                </see>
            </javadoc>
            <method name="abortRequested" type="boolean" line="1415"/>
            <javadoc line="1418">
                Clears any previous abort request.  After this method has been
                  called, &lt;code&gt;abortRequested&lt;/code&gt; will return
                  &lt;code&gt;false&lt;/code&gt;.                
                <see>
                    #abort                    
                </see>
                <see>
                    #abortRequested                    
                </see>
            </javadoc>
            <method name="clearAbortRequest" type="void" line="1425"/>
            <method name="addToList" type="List" line="1428">
                <params>
                    <param name="l" type="List"/>
                    <param name="elt" type="Object"/>
                </params>
                <scope line="1429"/>
            </method>
            <method name="removeFromList" type="List" line="1435">
                <params>
                    <param name="l" type="List"/>
                    <param name="elt" type="Object"/>
                </params>
                <scope line="1436"/>
                <scope line="1440"/>
            </method>
            <javadoc line="1445">
                Adds an &lt;code&gt;IIOReadWarningListener&lt;/code&gt; to the list of
                  registered warning listeners.  If &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.  Messages sent to the given listener will be
                  localized, if possible, to match the current
                  &lt;code&gt;Locale&lt;/code&gt;.  If no &lt;code&gt;Locale&lt;/code&gt; has been set,
                  warning messages may be localized as the reader sees fit.                
                <param>
                    listener an &lt;code&gt;IIOReadWarningListener&lt;/code&gt; to be registered.                    
                </param>
                <see>
                    #removeIIOReadWarningListener                    
                </see>
            </javadoc>
            <method name="addIIOReadWarningListener" type="void" line="1456">
                <params>
                    <param name="listener" type="IIOReadWarningListener"/>
                </params>
                <scope line="1457"/>
            </method>
            <javadoc line="1463">
                Removes an &lt;code&gt;IIOReadWarningListener&lt;/code&gt; from the list of
                  registered error listeners.  If the listener was not previously
                  registered, or if &lt;code&gt;listener&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception will be thrown and no action will be taken.                
                <param>
                    listener an IIOReadWarningListener to be unregistered.                    
                </param>
                <see>
                    #addIIOReadWarningListener                    
                </see>
            </javadoc>
            <method name="removeIIOReadWarningListener" type="void" line="1471">
                <params>
                    <param name="listener" type="IIOReadWarningListener"/>
                </params>
                <scope line="1472"/>
                <declaration name="index" type="int" line="1475"/>
                <scope line="1476">
                    <scope line="1479"/>
                </scope>
            </method>
            <javadoc line="1485">
                Removes all currently registered
                  &lt;code&gt;IIOReadWarningListener&lt;/code&gt; objects.
                  &lt;p&gt; The default implementation sets the
                  &lt;code&gt;warningListeners&lt;/code&gt; and &lt;code&gt;warningLocales&lt;/code&gt;
                  instance variables to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="removeAllIIOReadWarningListeners" type="void" line="1492"/>
            <javadoc line="1496">
                Adds an &lt;code&gt;IIOReadProgressListener&lt;/code&gt; to the list of
                  registered progress listeners.  If &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.                
                <param>
                    listener an IIOReadProgressListener to be registered.                    
                </param>
                <see>
                    #removeIIOReadProgressListener                    
                </see>
            </javadoc>
            <method name="addIIOReadProgressListener" type="void" line="1504">
                <params>
                    <param name="listener" type="IIOReadProgressListener"/>
                </params>
                <scope line="1505"/>
            </method>
            <javadoc line="1510">
                Removes an &lt;code&gt;IIOReadProgressListener&lt;/code&gt; from the list
                  of registered progress listeners.  If the listener was not
                  previously registered, or if &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.                
                <param>
                    listener an IIOReadProgressListener to be unregistered.                    
                </param>
                <see>
                    #addIIOReadProgressListener                    
                </see>
            </javadoc>
            <method name="removeIIOReadProgressListener" type="void" line="1519">
                <params>
                    <param name="listener" type="IIOReadProgressListener"/>
                </params>
                <scope line="1520"/>
            </method>
            <javadoc line="1525">
                Removes all currently registered
                  &lt;code&gt;IIOReadProgressListener&lt;/code&gt; objects.
                  &lt;p&gt; The default implementation sets the
                  &lt;code&gt;progressListeners&lt;/code&gt; instance variable to
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="removeAllIIOReadProgressListeners" type="void" line="1532"/>
            <javadoc line="1535">
                Adds an &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; to the list of
                  registered update listeners.  If &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.  The listener will receive notification of pixel
                  updates as images and thumbnails are decoded, including the
                  starts and ends of progressive passes.
                  &lt;p&gt; If no update listeners are present, the reader may choose
                  to perform fewer updates to the pixels of the destination
                  images and/or thumbnails, which may result in more efficient
                  decoding.
                  &lt;p&gt; For example, in progressive JPEG decoding each pass
                  contains updates to a set of coefficients, which would have to
                  be transformed into pixel values and converted to an RGB color
                  space for each pass if listeners are present.  If no listeners
                  are present, the coefficients may simply be accumulated and the
                  final results transformed and color converted one time only.
                  &lt;p&gt; The final results of decoding will be the same whether or
                  not intermediate updates are performed.  Thus if only the final
                  image is desired it may be perferable not to register any
                  &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s.  In general, progressive
                  updating is most effective when fetching images over a network
                  connection that is very slow compared to local CPU processing;
                  over a fast connection, progressive updates may actually slow
                  down the presentation of the image.                
                <param>
                    listener an IIOReadUpdateListener to be registered.                    
                </param>
                <see>
                    #removeIIOReadUpdateListener                    
                </see>
            </javadoc>
            <method name="addIIOReadUpdateListener" type="void" line="1563">
                <params>
                    <param name="listener" type="IIOReadUpdateListener"/>
                </params>
                <scope line="1564"/>
            </method>
            <javadoc line="1569">
                Removes an &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; from the list of
                  registered update listeners.  If the listener was not
                  previously registered, or if &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.                
                <param>
                    listener an IIOReadUpdateListener to be unregistered.                    
                </param>
                <see>
                    #addIIOReadUpdateListener                    
                </see>
            </javadoc>
            <method name="removeIIOReadUpdateListener" type="void" line="1578">
                <params>
                    <param name="listener" type="IIOReadUpdateListener"/>
                </params>
                <scope line="1579"/>
            </method>
            <javadoc line="1584">
                Removes all currently registered
                  &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; objects.
                  &lt;p&gt; The default implementation sets the
                  &lt;code&gt;updateListeners&lt;/code&gt; instance variable to
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="removeAllIIOReadUpdateListeners" type="void" line="1591"/>
            <javadoc line="1594">
                Broadcasts the start of an sequence of image reads to all
                  registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling
                  their &lt;code&gt;sequenceStarted&lt;/code&gt; method.  Subclasses may use
                  this method as a convenience.                
                <param>
                    minIndex the lowest index being read.                    
                </param>
            </javadoc>
            <method name="processSequenceStarted" type="void" line="1601">
                <params>
                    <param name="minIndex" type="int"/>
                </params>
                <scope line="1602"/>
                <declaration name="numListeners" type="int" line="1605"/>
                <scope line="1606">
                    <declaration name="listener" type="IIOReadProgressListener" line="1607"/>
                </scope>
            </method>
            <javadoc line="1611">
                Broadcasts the completion of an sequence of image reads to all
                  registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling
                  their &lt;code&gt;sequenceComplete&lt;/code&gt; method.  Subclasses may use
                  this method as a convenience.                
            </javadoc>
            <method name="processSequenceComplete" type="void" line="1617">
                <scope line="1618"/>
                <declaration name="numListeners" type="int" line="1621"/>
                <scope line="1622">
                    <declaration name="listener" type="IIOReadProgressListener" line="1623"/>
                </scope>
            </method>
            <javadoc line="1627">
                Broadcasts the start of an image read to all registered
                  &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;imageStarted&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    imageIndex the index of the image about to be read.                    
                </param>
            </javadoc>
            <method name="processImageStarted" type="void" line="1634">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="1635"/>
                <declaration name="numListeners" type="int" line="1638"/>
                <scope line="1639">
                    <declaration name="listener" type="IIOReadProgressListener" line="1640"/>
                </scope>
            </method>
            <javadoc line="1644">
                Broadcasts the current percentage of image completion to all
                  registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling
                  their &lt;code&gt;imageProgress&lt;/code&gt; method.  Subclasses may use
                  this method as a convenience.                
                <param>
                    percentageDone the current percentage of completion,
                      as a &lt;code&gt;float&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="processImageProgress" type="void" line="1652">
                <params>
                    <param name="percentageDone" type="float"/>
                </params>
                <scope line="1653"/>
                <declaration name="numListeners" type="int" line="1656"/>
                <scope line="1657">
                    <declaration name="listener" type="IIOReadProgressListener" line="1658"/>
                </scope>
            </method>
            <javadoc line="1662">
                Broadcasts the completion of an image read to all registered
                  &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;imageComplete&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
            </javadoc>
            <method name="processImageComplete" type="void" line="1668">
                <scope line="1669"/>
                <declaration name="numListeners" type="int" line="1672"/>
                <scope line="1673">
                    <declaration name="listener" type="IIOReadProgressListener" line="1674"/>
                </scope>
            </method>
            <javadoc line="1678">
                Broadcasts the start of a thumbnail read to all registered
                  &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;thumbnailStarted&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    imageIndex the index of the image associated with the
                      thumbnail.                    
                </param>
                <param>
                    thumbnailIndex the index of the thumbnail.                    
                </param>
            </javadoc>
            <method name="processThumbnailStarted" type="void" line="1687">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="thumbnailIndex" type="int"/>
                </params>
                <scope line="1688"/>
                <declaration name="numListeners" type="int" line="1691"/>
                <scope line="1692">
                    <declaration name="listener" type="IIOReadProgressListener" line="1693"/>
                </scope>
            </method>
            <javadoc line="1697">
                Broadcasts the current percentage of thumbnail completion to
                  all registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling
                  their &lt;code&gt;thumbnailProgress&lt;/code&gt; method.  Subclasses may
                  use this method as a convenience.                
                <param>
                    percentageDone the current percentage of completion,
                      as a &lt;code&gt;float&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="processThumbnailProgress" type="void" line="1705">
                <params>
                    <param name="percentageDone" type="float"/>
                </params>
                <scope line="1706"/>
                <declaration name="numListeners" type="int" line="1709"/>
                <scope line="1710">
                    <declaration name="listener" type="IIOReadProgressListener" line="1711"/>
                </scope>
            </method>
            <javadoc line="1715">
                Broadcasts the completion of a thumbnail read to all registered
                  &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;thumbnailComplete&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
            </javadoc>
            <method name="processThumbnailComplete" type="void" line="1721">
                <scope line="1722"/>
                <declaration name="numListeners" type="int" line="1725"/>
                <scope line="1726">
                    <declaration name="listener" type="IIOReadProgressListener" line="1727"/>
                </scope>
            </method>
            <javadoc line="1731">
                Broadcasts that the read has been aborted to all registered
                  &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;readAborted&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
            </javadoc>
            <method name="processReadAborted" type="void" line="1737">
                <scope line="1738"/>
                <declaration name="numListeners" type="int" line="1741"/>
                <scope line="1742">
                    <declaration name="listener" type="IIOReadProgressListener" line="1743"/>
                </scope>
            </method>
            <javadoc line="1747">
                Broadcasts the beginning of a progressive pass to all
                  registered &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s by calling their
                  &lt;code&gt;passStarted&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    theImage the &lt;code&gt;BufferedImage&lt;/code&gt; being updated.                    
                </param>
                <param>
                    pass the index of the current pass, starting with 0.                    
                </param>
                <param>
                    minPass the index of the first pass that will be decoded.                    
                </param>
                <param>
                    maxPass the index of the last pass that will be decoded.                    
                </param>
                <param>
                    minX the X coordinate of the upper-left pixel included
                      in the pass.                    
                </param>
                <param>
                    minY the X coordinate of the upper-left pixel included
                      in the pass.                    
                </param>
                <param>
                    periodX the horizontal separation between pixels.                    
                </param>
                <param>
                    periodY the vertical separation between pixels.                    
                </param>
                <param>
                    bands an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      set of affected bands of the destination.                    
                </param>
            </javadoc>
            <method name="processPassStarted" type="void" line="1765">
                <params>
                    <param name="theImage" type="BufferedImage"/>
                    <param name="pass" type="int"/>
                    <param name="minPass" type="int"/>
                    <param name="maxPass" type="int"/>
                    <param name="minX" type="int"/>
                    <param name="minY" type="int"/>
                    <param name="periodX" type="int"/>
                    <param name="periodY" type="int"/>
                    <param name="bands" type="int[]"/>
                </params>
                <scope line="1766"/>
                <declaration name="numListeners" type="int" line="1769"/>
                <scope line="1770">
                    <declaration name="listener" type="IIOReadUpdateListener" line="1771"/>
                </scope>
            </method>
            <javadoc line="1775">
                Broadcasts the update of a set of samples to all registered
                  &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s by calling their
                  &lt;code&gt;imageUpdate&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    theImage the &lt;code&gt;BufferedImage&lt;/code&gt; being updated.                    
                </param>
                <param>
                    minX the X coordinate of the upper-left pixel included
                      in the pass.                    
                </param>
                <param>
                    minY the X coordinate of the upper-left pixel included
                      in the pass.                    
                </param>
                <param>
                    width the total width of the area being updated, including
                      pixels being skipped if &lt;code&gt;periodX &amp;gt; 1&lt;/code&gt;.                    
                </param>
                <param>
                    height the total height of the area being updated,
                      including pixels being skipped if &lt;code&gt;periodY &amp;gt; 1&lt;/code&gt;.                    
                </param>
                <param>
                    periodX the horizontal separation between pixels.                    
                </param>
                <param>
                    periodY the vertical separation between pixels.                    
                </param>
                <param>
                    bands an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      set of affected bands of the destination.                    
                </param>
            </javadoc>
            <method name="processImageUpdate" type="void" line="1794">
                <params>
                    <param name="theImage" type="BufferedImage"/>
                    <param name="minX" type="int"/>
                    <param name="minY" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="periodX" type="int"/>
                    <param name="periodY" type="int"/>
                    <param name="bands" type="int[]"/>
                </params>
                <scope line="1795"/>
                <declaration name="numListeners" type="int" line="1798"/>
                <scope line="1799">
                    <declaration name="listener" type="IIOReadUpdateListener" line="1800"/>
                </scope>
            </method>
            <javadoc line="1804">
                Broadcasts the end of a progressive pass to all
                  registered &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s by calling their
                  &lt;code&gt;passComplete&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    theImage the &lt;code&gt;BufferedImage&lt;/code&gt; being updated.                    
                </param>
            </javadoc>
            <method name="processPassComplete" type="void" line="1811">
                <params>
                    <param name="theImage" type="BufferedImage"/>
                </params>
                <scope line="1812"/>
                <declaration name="numListeners" type="int" line="1815"/>
                <scope line="1816">
                    <declaration name="listener" type="IIOReadUpdateListener" line="1817"/>
                </scope>
            </method>
            <javadoc line="1821">
                Broadcasts the beginning of a thumbnail progressive pass to all
                  registered &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s by calling their
                  &lt;code&gt;thumbnailPassStarted&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    theThumbnail the &lt;code&gt;BufferedImage&lt;/code&gt; thumbnail
                      being updated.                    
                </param>
                <param>
                    pass the index of the current pass, starting with 0.                    
                </param>
                <param>
                    minPass the index of the first pass that will be decoded.                    
                </param>
                <param>
                    maxPass the index of the last pass that will be decoded.                    
                </param>
                <param>
                    minX the X coordinate of the upper-left pixel included
                      in the pass.                    
                </param>
                <param>
                    minY the X coordinate of the upper-left pixel included
                      in the pass.                    
                </param>
                <param>
                    periodX the horizontal separation between pixels.                    
                </param>
                <param>
                    periodY the vertical separation between pixels.                    
                </param>
                <param>
                    bands an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      set of affected bands of the destination.                    
                </param>
            </javadoc>
            <method name="processThumbnailPassStarted" type="void" line="1840">
                <params>
                    <param name="theThumbnail" type="BufferedImage"/>
                    <param name="pass" type="int"/>
                    <param name="minPass" type="int"/>
                    <param name="maxPass" type="int"/>
                    <param name="minX" type="int"/>
                    <param name="minY" type="int"/>
                    <param name="periodX" type="int"/>
                    <param name="periodY" type="int"/>
                    <param name="bands" type="int[]"/>
                </params>
                <scope line="1841"/>
                <declaration name="numListeners" type="int" line="1844"/>
                <scope line="1845">
                    <declaration name="listener" type="IIOReadUpdateListener" line="1846"/>
                </scope>
            </method>
            <javadoc line="1850">
                Broadcasts the update of a set of samples in a thumbnail image
                  to all registered &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s by
                  calling their &lt;code&gt;thumbnailUpdate&lt;/code&gt; method.  Subclasses may
                  use this method as a convenience.                
                <param>
                    theThumbnail the &lt;code&gt;BufferedImage&lt;/code&gt; thumbnail
                      being updated.                    
                </param>
                <param>
                    minX the X coordinate of the upper-left pixel included
                      in the pass.                    
                </param>
                <param>
                    minY the X coordinate of the upper-left pixel included
                      in the pass.                    
                </param>
                <param>
                    width the total width of the area being updated, including
                      pixels being skipped if &lt;code&gt;periodX &amp;gt; 1&lt;/code&gt;.                    
                </param>
                <param>
                    height the total height of the area being updated,
                      including pixels being skipped if &lt;code&gt;periodY &amp;gt; 1&lt;/code&gt;.                    
                </param>
                <param>
                    periodX the horizontal separation between pixels.                    
                </param>
                <param>
                    periodY the vertical separation between pixels.                    
                </param>
                <param>
                    bands an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      set of affected bands of the destination.                    
                </param>
            </javadoc>
            <method name="processThumbnailUpdate" type="void" line="1870">
                <params>
                    <param name="theThumbnail" type="BufferedImage"/>
                    <param name="minX" type="int"/>
                    <param name="minY" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="periodX" type="int"/>
                    <param name="periodY" type="int"/>
                    <param name="bands" type="int[]"/>
                </params>
                <scope line="1871"/>
                <declaration name="numListeners" type="int" line="1874"/>
                <scope line="1875">
                    <declaration name="listener" type="IIOReadUpdateListener" line="1876"/>
                </scope>
            </method>
            <javadoc line="1880">
                Broadcasts the end of a thumbnail progressive pass to all
                  registered &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s by calling their
                  &lt;code&gt;thumbnailPassComplete&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    theThumbnail the &lt;code&gt;BufferedImage&lt;/code&gt; thumbnail
                      being updated.                    
                </param>
            </javadoc>
            <method name="processThumbnailPassComplete" type="void" line="1888">
                <params>
                    <param name="theThumbnail" type="BufferedImage"/>
                </params>
                <scope line="1889"/>
                <declaration name="numListeners" type="int" line="1892"/>
                <scope line="1893">
                    <declaration name="listener" type="IIOReadUpdateListener" line="1894"/>
                </scope>
            </method>
            <javadoc line="1898">
                Broadcasts a warning message to all registered
                  &lt;code&gt;IIOReadWarningListener&lt;/code&gt;s by calling their
                  &lt;code&gt;warningOccurred&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    warning the warning message to send.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;warning&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="processWarningOccurred" type="void" line="1907">
                <params>
                    <param name="warning" type="String"/>
                </params>
                <scope line="1908"/>
                <scope line="1911"/>
                <declaration name="numListeners" type="int" line="1914"/>
                <scope line="1915">
                    <declaration name="listener" type="IIOReadWarningListener" line="1916"/>
                </scope>
            </method>
            <javadoc line="1920">
                Broadcasts a localized warning message to all registered
                  &lt;code&gt;IIOReadWarningListener&lt;/code&gt;s by calling their
                  &lt;code&gt;warningOccurred&lt;/code&gt; method with a string taken
                  from a &lt;code&gt;ResourceBundle&lt;/code&gt;.  Subclasses may use this
                  method as a convenience.                
                <param>
                    baseName the base name of a set of
                      &lt;code&gt;ResourceBundle&lt;/code&gt;s containing localized warning
                      messages.                    
                </param>
                <param>
                    keyword the keyword used to index the warning message
                      within the set of &lt;code&gt;ResourceBundle&lt;/code&gt;s.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;baseName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;keyword&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if no appropriate
                      &lt;code&gt;ResourceBundle&lt;/code&gt; may be located.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named resource is
                      not found in the located &lt;code&gt;ResourceBundle&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if the object retrieved
                      from the &lt;code&gt;ResourceBundle&lt;/code&gt; is not a
                      &lt;code&gt;String&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="processWarningOccurred" type="void" line="1943">
                <params>
                    <param name="baseName" type="String"/>
                    <param name="keyword" type="String"/>
                </params>
                <scope line="1944"/>
                <scope line="1947"/>
                <scope line="1950"/>
                <declaration name="numListeners" type="int" line="1953"/>
                <scope line="1954">
                    <declaration name="listener" type="IIOReadWarningListener" line="1955"/>
                    <declaration name="locale" type="Locale" line="1956"/>
                    <scope line="1957"/>
                    <anonymous_class line="1960">
                        <method name="run" type="Object" line="1961"/>
                    </anonymous_class>
                    <declaration name="loader" type="ClassLoader" line="1960"/>
                    <declaration name="bundle" type="ResourceBundle" line="1966"/>
                    <scope line="1967"/>
                    <scope line="1970">
                        <scope line="1971"/>
                        <scope line="1974"/>
                    </scope>
                    <declaration name="warning" type="String" line="1978"/>
                    <scope line="1979"/>
                    <scope line="1982"/>
                    <scope line="1985"/>
                </scope>
            </method>
            <javadoc line="1991">
                Restores the &lt;code&gt;ImageReader&lt;/code&gt; to its initial state.
                  &lt;p&gt; The default implementation calls &lt;code&gt;setInput(null,
                  false)&lt;/code&gt;, &lt;code&gt;setLocale(null)&lt;/code&gt;,
                  &lt;code&gt;removeAllIIOReadUpdateListeners()&lt;/code&gt;,
                  &lt;code&gt;removeAllIIOReadWarningListeners()&lt;/code&gt;,
                  &lt;code&gt;removeAllIIOReadProgressListeners()&lt;/code&gt;, and
                  &lt;code&gt;clearAbortRequest&lt;/code&gt;.                
            </javadoc>
            <method name="reset" type="void" line="2000"/>
            <javadoc line="2008">
                Allows any resources held by this object to be released.  The
                  result of calling any other method (other than
                  &lt;code&gt;finalize&lt;/code&gt;) subsequent to a call to this method
                  is undefined.
                  &lt;p&gt;It is important for applications to call this method when they
                  know they will no longer be using this &lt;code&gt;ImageReader&lt;/code&gt;.
                  Otherwise, the reader may continue to hold on to resources
                  indefinitely.
                  &lt;p&gt;The default implementation of this method in the superclass does
                  nothing.  Subclass implementations should ensure that all resources,
                  especially native resources, are released.                
            </javadoc>
            <method name="dispose" type="void" line="2021"/>
            <javadoc line="2023">
                A utility method that may be used by readers to compute the
                  region of the source image that should be read, taking into
                  account any source region and subsampling offset settings in
                  the supplied &lt;code&gt;ImageReadParam&lt;/code&gt;.  The actual
                  subsampling factors, destination size, and destination offset
                  are &lt;em&gt;not&lt;/em&gt; taken into consideration, thus further
                  clipping must take place.  The {@link #computeRegions&lt;code&gt;computeRegions&lt;/code&gt;} method performs all necessary
                  clipping.                
                <param>
                    param the &lt;code&gt;ImageReadParam&lt;/code&gt; being used, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    srcWidth the width of the source image.                    
                </param>
                <param>
                    srcHeight the height of the source image.                    
                </param>
                <return>
                    the source region as a &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getSourceRegion" type="Rectangle" line="2038">
                <params>
                    <param name="param" type="ImageReadParam"/>
                    <param name="srcWidth" type="int"/>
                    <param name="srcHeight" type="int"/>
                </params>
                <declaration name="sourceRegion" type="Rectangle" line="2039"/>
                <scope line="2040">
                    <declaration name="region" type="Rectangle" line="2041"/>
                    <scope line="2042"/>
                    <declaration name="subsampleXOffset" type="int" line="2045"/>
                    <declaration name="subsampleYOffset" type="int" line="2046"/>
                </scope>
            </method>
            <javadoc line="2054">
                Computes the source region of interest and the destination
                  region of interest, taking the width and height of the source
                  image, an optional destination image, and an optional
                  &lt;code&gt;ImageReadParam&lt;/code&gt; into account.  The source region
                  begins with the entire source image.  Then that is clipped to
                  the source region specified in the &lt;code&gt;ImageReadParam&lt;/code&gt;,
                  if one is specified.
                  &lt;p&gt; If either of the destination offsets are negative, the
                  source region is clipped so that its top left will coincide
                  with the top left of the destination image, taking subsampling
                  into account.  Then the result is clipped to the destination
                  image on the right and bottom, if one is specified, taking
                  subsampling and destination offsets into account.
                  &lt;p&gt; Similarly, the destination region begins with the source
                  image, is translated to the destination offset given in the
                  &lt;code&gt;ImageReadParam&lt;/code&gt; if there is one, and finally is
                  clipped to the destination image, if there is one.
                  &lt;p&gt; If either the source or destination regions end up having a
                  width or height of 0, an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  is thrown.
                  &lt;p&gt; The {@link #getSourceRegion &lt;code&gt;getSourceRegion&lt;/code&gt;}method may be used if only source clipping is desired.                
                <param>
                    param an &lt;code&gt;ImageReadParam&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    srcWidth the width of the source image.                    
                </param>
                <param>
                    srcHeight the height of the source image.                    
                </param>
                <param>
                    image a &lt;code&gt;BufferedImage&lt;/code&gt; that will be the
                      destination image, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    srcRegion a &lt;code&gt;Rectangle&lt;/code&gt; that will be filled with
                      the source region of interest.                    
                </param>
                <param>
                    destRegion a &lt;code&gt;Rectangle&lt;/code&gt; that will be filled with
                      the destination region of interest.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;srcRegion&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dstRegion&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if the resulting source or
                      destination region is empty.                    
                </exception>
            </javadoc>
            <method name="computeRegions" type="void" line="2092">
                <params>
                    <param name="param" type="ImageReadParam"/>
                    <param name="srcWidth" type="int"/>
                    <param name="srcHeight" type="int"/>
                    <param name="image" type="BufferedImage"/>
                    <param name="srcRegion" type="Rectangle"/>
                    <param name="destRegion" type="Rectangle"/>
                </params>
                <scope line="2093"/>
                <scope line="2096"/>
                <declaration name="periodX" type="int" line="2101"/>
                <declaration name="periodY" type="int" line="2102"/>
                <declaration name="gridX" type="int" line="2103"/>
                <declaration name="gridY" type="int" line="2104"/>
                <scope line="2105">
                    <declaration name="paramSrcRegion" type="Rectangle" line="2106"/>
                    <scope line="2107"/>
                </scope>
                <scope line="2119">
                    <declaration name="delta" type="int" line="2120"/>
                </scope>
                <scope line="2125">
                    <declaration name="delta" type="int" line="2126"/>
                </scope>
                <declaration name="subsampledWidth" type="int" line="2131"/>
                <declaration name="subsampledHeight" type="int" line="2132"/>
                <scope line="2135">
                    <declaration name="destImageRect" type="Rectangle" line="2136"/>
                    <scope line="2138"/>
                    <declaration name="deltaX" type="int" line="2141"/>
                    <scope line="2142"/>
                    <declaration name="deltaY" type="int" line="2145"/>
                    <scope line="2146"/>
                </scope>
                <scope line="2150"/>
            </method>
            <javadoc line="2154">
                A utility method that may be used by readers to test the
                  validity of the source and destination band settings of an
                  &lt;code&gt;ImageReadParam&lt;/code&gt;.  This method may be called as soon
                  as the reader knows both the number of bands of the source
                  image as it exists in the input stream, and the number of bands
                  of the destination image that being written.
                  &lt;p&gt; The method retrieves the source and destination band
                  setting arrays from param using the &lt;code&gt;getSourceBands&lt;/code&gt;
                  and &lt;code&gt;getDestinationBands&lt;/code&gt;methods (or considers them
                  to be &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;param&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;).  If the source band setting array is
                  &lt;code&gt;null&lt;/code&gt;, it is considered to be equal to the array
                  &lt;code&gt;{ 0, 1, ..., numSrcBands - 1 }&lt;/code&gt;, and similarly for
                  the destination band setting array.
                  &lt;p&gt; The method then tests that both arrays are equal in length,
                  and that neither array contains a value larger than the largest
                  available band index.
                  &lt;p&gt; Any failure results in an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; being thrown; success
                  results in the method returning silently.                
                <param>
                    param the &lt;code&gt;ImageReadParam&lt;/code&gt; being used to read
                      the image.                    
                </param>
                <param>
                    numSrcBands the number of bands of the image as it exists
                      int the input source.                    
                </param>
                <param>
                    numDstBands the number of bands in the destination image
                      being written.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;param&lt;/code&gt;
                      contains an invalid specification of a source and/or
                      destination band subset.                    
                </exception>
            </javadoc>
            <method name="checkReadParamBandSettings" type="void" line="2185">
                <params>
                    <param name="param" type="ImageReadParam"/>
                    <param name="numSrcBands" type="int"/>
                    <param name="numDstBands" type="int"/>
                </params>
                <declaration name="srcBands" type="int[]" line="2186"/>
                <declaration name="dstBands" type="int[]" line="2187"/>
                <scope line="2188"/>
                <declaration name="paramSrcBandLength" type="int" line="2192"/>
                <declaration name="paramDstBandLength" type="int" line="2193"/>
                <scope line="2194"/>
                <scope line="2197">
                    <scope line="2198">
                        <scope line="2199"/>
                    </scope>
                </scope>
                <scope line="2204">
                    <scope line="2205">
                        <scope line="2206"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2212">
                Returns the &lt;code&gt;BufferedImage&lt;/code&gt; to which decoded pixel
                  data should be written.  The image is determined by inspecting
                  the supplied &lt;code&gt;ImageReadParam&lt;/code&gt; if it is
                  non-&lt;code&gt;null&lt;/code&gt;; if its &lt;code&gt;getDestination&lt;/code&gt;
                  method returns a non-&lt;code&gt;null&lt;/code&gt; value, that image is
                  simply returned.  Otherwise,
                  &lt;code&gt;param.getDestinationType&lt;/code&gt; method is called to
                  determine if a particular image type has been specified.  If
                  so, the returned &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; is used after
                  checking that it is equal to one of those included in
                  &lt;code&gt;imageTypes&lt;/code&gt;.
                  &lt;p&gt; If &lt;code&gt;param&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or the above
                  steps have not yielded an image or an
                  &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;, the first value obtained from
                  the &lt;code&gt;imageTypes&lt;/code&gt; parameter is used.  Typically, the
                  caller will set &lt;code&gt;imageTypes&lt;/code&gt; to the value of
                  &lt;code&gt;getImageTypes(imageIndex)&lt;/code&gt;.
                  &lt;p&gt; Next, the dimensions of the image are determined by a call
                  to &lt;code&gt;computeRegions&lt;/code&gt;.  The actual width and height of
                  the image being decoded are passed in as the &lt;code&gt;width&lt;/code&gt;
                  and &lt;code&gt;height&lt;/code&gt; parameters.                
                <param>
                    param an &lt;code&gt;ImageReadParam&lt;/code&gt; to be used to get
                      the destination image or image type, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    imageTypes an &lt;code&gt;Iterator&lt;/code&gt; of
                      &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;s indicating the legal image
                      types, with the default first.                    
                </param>
                <param>
                    width the true width of the image or tile begin decoded.                    
                </param>
                <param>
                    height the true width of the image or tile being decoded.                    
                </param>
                <return>
                    the &lt;code&gt;BufferedImage&lt;/code&gt; to which decoded pixel
                      data should be written.                    
                </return>
                <exception>
                    IIOException if the &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;
                      specified by &lt;code&gt;param&lt;/code&gt; does not match any of the legal
                      ones from &lt;code&gt;imageTypes&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;imageTypes&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or empty, or if an object not of type
                      &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; is retrieved from it.                    
                </exception>
                <exception>
                    IllegalArgumentException if the resulting image would
                      have a width or height less than 1.                    
                </exception>
                <exception>
                    IllegalArgumentException if the product of
                      &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; is greater than
                      &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getDestination" type="BufferedImage" line="2255">
                <params>
                    <param name="param" type="ImageReadParam"/>
                    <param name="imageTypes" type="Iterator&lt;ImageTypeSpecifier&gt;"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="2256"/>
                <scope line="2259"/>
                <declaration name="dest" type="BufferedImage" line="2262"/>
                <declaration name="imageType" type="ImageTypeSpecifier" line="2263"/>
                <scope line="2264">
                    <scope line="2266"/>
                </scope>
                <scope line="2271">
                    <declaration name="o" type="Object" line="2272"/>
                    <scope line="2273"/>
                </scope>
                <scope line="2278">
                    <declaration name="foundIt" type="boolean" line="2279"/>
                    <scope line="2280">
                        <declaration name="type" type="ImageTypeSpecifier" line="2281"/>
                        <scope line="2282"/>
                    </scope>
                    <scope line="2287"/>
                </scope>
                <declaration name="srcRegion" type="Rectangle" line="2291"/>
                <declaration name="destRegion" type="Rectangle" line="2292"/>
                <declaration name="destWidth" type="int" line="2294"/>
                <declaration name="destHeight" type="int" line="2295"/>
            </method>
        </class>
    </source>