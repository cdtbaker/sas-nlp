<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.spi">
        <import package="java.util.Locale"/>
        <import package="javax.imageio.spi.RegisterableService"/>
        <import package="javax.imageio.spi.ServiceRegistry"/>
        <class name="IIOServiceProvider" line="5">
            <implements interface="RegisterableService"/>
            <javadoc line="5">
                A superinterface for functionality common to all Image I/O service
                  provider interfaces (SPIs).  For more information on service
                  provider classes, see the class comment for the
                  &lt;code&gt;IIORegistry&lt;/code&gt; class.                
                <see>
                    IIORegistry                    
                </see>
                <see>
                    javax.imageio.spi.ImageReaderSpi                    
                </see>
                <see>
                    javax.imageio.spi.ImageWriterSpi                    
                </see>
                <see>
                    javax.imageio.spi.ImageTranscoderSpi                    
                </see>
                <see>
                    javax.imageio.spi.ImageInputStreamSpi                    
                </see>
            </javadoc>
            <declaration name="vendorName" type="String" line="17"/>
            <javadoc line="17">
                A &lt;code&gt;String&lt;/code&gt; to be returned from
                  &lt;code&gt;getVendorName&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.
                  Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.                
            </javadoc>
            <declaration name="version" type="String" line="23"/>
            <javadoc line="23">
                A &lt;code&gt;String&lt;/code&gt; to be returned from
                  &lt;code&gt;getVersion&lt;/code&gt;, initially null.  Constructors should
                  set this to a non-&lt;code&gt;null&lt;/code&gt; value.                
            </javadoc>
            <javadoc line="29">
                Constructs an &lt;code&gt;IIOServiceProvider&lt;/code&gt; with a given
                  vendor name and version identifier.                
                <param>
                    vendorName the vendor name.                    
                </param>
                <param>
                    version a version identifier.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>vendorName</code>
                      is <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>version</code>
                      is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="IIOServiceProvider" type="constructor" line="39">
                <params>
                    <param name="vendorName" type="String"/>
                    <param name="version" type="String"/>
                </params>
                <scope line="40"/>
                <scope line="43"/>
            </method>
            <javadoc line="49">
                Constructs a blank &lt;code&gt;IIOServiceProvider&lt;/code&gt;.  It is up
                  to the subclass to initialize instance variables and/or
                  override method implementations in order to ensure that the
                  &lt;code&gt;getVendorName&lt;/code&gt; and &lt;code&gt;getVersion&lt;/code&gt; methods
                  will return non-&lt;code&gt;null&lt;/code&gt; values.                
            </javadoc>
            <method name="IIOServiceProvider" type="constructor" line="56"/>
            <javadoc line="58">
                A callback that will be called exactly once after the Spi class
                  has been instantiated and registered in a
                  &lt;code&gt;ServiceRegistry&lt;/code&gt;.  This may be used to verify that
                  the environment is suitable for this service, for example that
                  native libraries can be loaded.  If the service cannot function
                  in the environment where it finds itself, it should deregister
                  itself from the registry.
                  &lt;p&gt; Only the registry should call this method.
                  &lt;p&gt; The default implementation does nothing.                
                <see>
                    ServiceRegistry#registerServiceProvider(Object provider)                    
                </see>
            </javadoc>
            <method name="onRegistration" type="void" line="70">
                <params>
                    <param name="registry" type="ServiceRegistry"/>
                    <param name="category" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="72">
                A callback that will be whenever the Spi class has been
                  deregistered from a &lt;code&gt;ServiceRegistry&lt;/code&gt;.
                  &lt;p&gt; Only the registry should call this method.
                  &lt;p&gt; The default implementation does nothing.                
                <see>
                    ServiceRegistry#deregisterServiceProvider(Object provider)                    
                </see>
            </javadoc>
            <method name="onDeregistration" type="void" line="79">
                <params>
                    <param name="registry" type="ServiceRegistry"/>
                    <param name="category" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="81">
                Returns the name of the vendor responsible for creating this
                  service provider and its associated implementation.  Because
                  the vendor name may be used to select a service provider,
                  it is not localized.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;vendorName&lt;/code&gt; instance variable.                
                <return>
                    a non-<code>null</code> <code>String</code> containing
                      the name of the vendor.                    
                </return>
            </javadoc>
            <method name="getVendorName" type="String" line="91"/>
            <javadoc line="94">
                Returns a string describing the version
                  number of this service provider and its associated
                  implementation.  Because the version may be used by transcoders
                  to identify the service providers they understand, this method
                  is not localized.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;version&lt;/code&gt; instance variable.                
                <return>
                    a non-<code>null</code> <code>String</code> containing
                      the version of this service provider.                    
                </return>
            </javadoc>
            <method name="getVersion" type="String" line="105"/>
            <method name="getDescription" type="String" line="108"/>
            <javadoc line="108">
                Returns a brief, human-readable description of this service
                  provider and its associated implementation.  The resulting
                  string should be localized for the supplied
                  &lt;code&gt;Locale&lt;/code&gt;, if possible.                
                <param>
                    locale a <code>Locale</code> for which the return value
                      should be localized.                    
                </param>
                <return>
                    a <code>String</code> containing a description of this
                      service provider.                    
                </return>
            </javadoc>
        </class>
    </source>