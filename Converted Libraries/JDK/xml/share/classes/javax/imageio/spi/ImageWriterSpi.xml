<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.spi">
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.io.IOException"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <class name="ImageWriterSpi" line="7">
            <extends class="ImageReaderWriterSpi"/>
            <javadoc line="7">
                The service provider interface (SPI) for &lt;code&gt;ImageWriter&lt;/code&gt;s.
                  For more information on service provider classes, see the class comment
                  for the &lt;code&gt;IIORegistry&lt;/code&gt; class.
                  &lt;p&gt; Each &lt;code&gt;ImageWriterSpi&lt;/code&gt; provides several types of information
                  about the &lt;code&gt;ImageWriter&lt;/code&gt; class with which it is associated.
                  &lt;p&gt; The name of the vendor who defined the SPI class and a
                  brief description of the class are available via the
                  &lt;code&gt;getVendorName&lt;/code&gt;, &lt;code&gt;getDescription&lt;/code&gt;,
                  and &lt;code&gt;getVersion&lt;/code&gt; methods.
                  These methods may be internationalized to provide locale-specific
                  output.  These methods are intended mainly to provide short,
                  human-writable information that might be used to organize a pop-up
                  menu or other list.
                  &lt;p&gt; Lists of format names, file suffixes, and MIME types associated
                  with the service may be obtained by means of the
                  &lt;code&gt;getFormatNames&lt;/code&gt;, &lt;code&gt;getFileSuffixes&lt;/code&gt;, and
                  &lt;code&gt;getMIMEType&lt;/code&gt; methods.  These methods may be used to
                  identify candidate &lt;code&gt;ImageWriter&lt;/code&gt;s for writing a
                  particular file or stream based on manual format selection, file
                  naming, or MIME associations.
                  &lt;p&gt; A more reliable way to determine which &lt;code&gt;ImageWriter&lt;/code&gt;s
                  are likely to be able to parse a particular data stream is provided
                  by the &lt;code&gt;canEncodeImage&lt;/code&gt; method.  This methods allows the
                  service provider to inspect the actual image contents.
                  &lt;p&gt; Finally, an instance of the &lt;code&gt;ImageWriter&lt;/code&gt; class
                  associated with this service provider may be obtained by calling
                  the &lt;code&gt;createWriterInstance&lt;/code&gt; method.  Any heavyweight
                  initialization, such as the loading of native libraries or creation
                  of large tables, should be deferred at least until the first
                  invocation of this method.                
                <see>
                    IIORegistry                    
                </see>
                <see>
                    javax.imageio.ImageTypeSpecifier                    
                </see>
                <see>
                    javax.imageio.ImageWriter                    
                </see>
            </javadoc>
            <declaration name="STANDARD_OUTPUT_TYPE" type="Class[]" line="43"/>
            <javadoc line="43">
                A single-element array, initially containing
                  &lt;code&gt;ImageOutputStream.class&lt;/code&gt;, to be returned from
                  &lt;code&gt;getOutputTypes&lt;/code&gt;.                
                <deprecated>
                    Instead of using this field, directly create
                      the equivalent array &lt;code&gt;{ ImageOutputStream.class }&lt;code&gt;.                    
                </deprecated>
            </javadoc>
            <declaration name="outputTypes" type="Class[]" line="51"/>
            <javadoc line="51">
                An array of &lt;code&gt;Class&lt;/code&gt; objects to be returned from
                  &lt;code&gt;getOutputTypes&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="readerSpiNames" type="String[]" line="56"/>
            <javadoc line="56">
                An array of strings to be returned from
                  &lt;code&gt;getImageReaderSpiNames&lt;/code&gt;, initially
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="writerClass" type="Class" line="62"/>
            <javadoc line="62">
                The &lt;code&gt;Class&lt;/code&gt; of the writer, initially
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <javadoc line="67">
                Constructs a blank &lt;code&gt;ImageWriterSpi&lt;/code&gt;.  It is up to
                  the subclass to initialize instance variables and/or override
                  method implementations in order to provide working versions of
                  all methods.                
            </javadoc>
            <method name="ImageWriterSpi" type="constructor" line="73"/>
            <javadoc line="75">
                Constructs an &lt;code&gt;ImageWriterSpi&lt;/code&gt; with a given
                  set of values.                
                <param>
                    vendorName the vendor name, as a non-&lt;code&gt;null&lt;/code&gt;
                      &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    version a version identifier, as a non-&lt;code&gt;null&lt;/code&gt;
                      &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    names a non-&lt;code&gt;null&lt;/code&gt; array of
                      &lt;code&gt;String&lt;/code&gt;s indicating the format names.  At least one
                      entry must be present.                    
                </param>
                <param>
                    suffixes an array of &lt;code&gt;String&lt;/code&gt;s indicating the
                      common file suffixes.  If no suffixes are defined,
                      &lt;code&gt;null&lt;/code&gt; should be supplied.  An array of length 0
                      will be normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    MIMETypes an array of &lt;code&gt;String&lt;/code&gt;s indicating
                      the format&apos;s MIME types.  If no suffixes are defined,
                      &lt;code&gt;null&lt;/code&gt; should be supplied.  An array of length 0
                      will be normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    writerClassName the fully-qualified name of the
                      associated &lt;code&gt;ImageWriterSpi&lt;/code&gt; class, as a
                      non-&lt;code&gt;null&lt;/code&gt; &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    outputTypes an array of &lt;code&gt;Class&lt;/code&gt; objects of
                      length at least 1 indicating the legal output types.                    
                </param>
                <param>
                    readerSpiNames an array &lt;code&gt;String&lt;/code&gt;s of length
                      at least 1 naming the classes of all associated
                      &lt;code&gt;ImageReader&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt;.  An array of
                      length 0 is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    supportsStandardStreamMetadataFormat a
                      &lt;code&gt;boolean&lt;/code&gt; that indicates whether a stream metadata
                      object can use trees described by the standard metadata format.                    
                </param>
                <param>
                    nativeStreamMetadataFormatName a
                      &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;, to be returned from
                      &lt;code&gt;getNativeStreamMetadataFormatName&lt;/code&gt;.                    
                </param>
                <param>
                    nativeStreamMetadataFormatClassName a
                      &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;, to be used to instantiate
                      a metadata format object to be returned from
                      &lt;code&gt;getNativeStreamMetadataFormat&lt;/code&gt;.                    
                </param>
                <param>
                    extraStreamMetadataFormatNames an array of
                      &lt;code&gt;String&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt;, to be returned from
                      &lt;code&gt;getExtraStreamMetadataFormatNames&lt;/code&gt;.  An array of length
                      0 is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    extraStreamMetadataFormatClassNames an array of
                      &lt;code&gt;String&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt;, to be used to instantiate
                      a metadata format object to be returned from
                      &lt;code&gt;getStreamMetadataFormat&lt;/code&gt;.  An array of length
                      0 is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    supportsStandardImageMetadataFormat a
                      &lt;code&gt;boolean&lt;/code&gt; that indicates whether an image metadata
                      object can use trees described by the standard metadata format.                    
                </param>
                <param>
                    nativeImageMetadataFormatName a
                      &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;, to be returned from
                      &lt;code&gt;getNativeImageMetadataFormatName&lt;/code&gt;.                    
                </param>
                <param>
                    nativeImageMetadataFormatClassName a
                      &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;, to be used to instantiate
                      a metadata format object to be returned from
                      &lt;code&gt;getNativeImageMetadataFormat&lt;/code&gt;.                    
                </param>
                <param>
                    extraImageMetadataFormatNames an array of
                      &lt;code&gt;String&lt;/code&gt;s to be returned from
                      &lt;code&gt;getExtraImageMetadataFormatNames&lt;/code&gt;.  An array of length 0
                      is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    extraImageMetadataFormatClassNames an array of
                      &lt;code&gt;String&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt;, to be used to instantiate
                      a metadata format object to be returned from
                      &lt;code&gt;getImageMetadataFormat&lt;/code&gt;.  An array of length
                      0 is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;vendorName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;version&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;names&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or has length 0.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;writerClassName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;outputTypes&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or has length 0.                    
                </exception>
            </javadoc>
            <method name="ImageWriterSpi" type="constructor" line="151">
                <params>
                    <param name="vendorName" type="String"/>
                    <param name="version" type="String"/>
                    <param name="names" type="String[]"/>
                    <param name="suffixes" type="String[]"/>
                    <param name="MIMETypes" type="String[]"/>
                    <param name="writerClassName" type="String"/>
                    <param name="outputTypes" type="Class[]"/>
                    <param name="readerSpiNames" type="String[]"/>
                    <param name="supportsStandardStreamMetadataFormat" type="boolean"/>
                    <param name="nativeStreamMetadataFormatName" type="String"/>
                    <param name="nativeStreamMetadataFormatClassName" type="String"/>
                    <param name="extraStreamMetadataFormatNames" type="String[]"/>
                    <param name="extraStreamMetadataFormatClassNames" type="String[]"/>
                    <param name="supportsStandardImageMetadataFormat" type="boolean"/>
                    <param name="nativeImageMetadataFormatName" type="String"/>
                    <param name="nativeImageMetadataFormatClassName" type="String"/>
                    <param name="extraImageMetadataFormatNames" type="String[]"/>
                    <param name="extraImageMetadataFormatClassNames" type="String[]"/>
                </params>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="160"/>
            </method>
            <javadoc line="164">
                Returns &lt;code&gt;true&lt;/code&gt; if the format that this writer
                  outputs preserves pixel data bit-accurately.  The default
                  implementation returns &lt;code&gt;true&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the format preserves full pixel
                      accuracy.                    
                </return>
            </javadoc>
            <method name="isFormatLossless" type="boolean" line="171"/>
            <javadoc line="174">
                Returns an array of &lt;code&gt;Class&lt;/code&gt; objects indicating what
                  types of objects may be used as arguments to the writer&apos;s
                  &lt;code&gt;setOutput&lt;/code&gt; method.
                  &lt;p&gt; For most writers, which only output to an
                  &lt;code&gt;ImageOutputStream&lt;/code&gt;, a single-element array
                  containing &lt;code&gt;ImageOutputStream.class&lt;/code&gt; should be
                  returned.                
                <return>
                    a non-&lt;code&gt;null&lt;/code&gt; array of
                      &lt;code&gt;Class&lt;/code&gt;objects of length at least 1.                    
                </return>
            </javadoc>
            <method name="getOutputTypes" type="Class[]" line="185"/>
            <method name="canEncodeImage" type="boolean" line="188"/>
            <javadoc line="188">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;ImageWriter&lt;/code&gt;
                  implementation associated with this service provider is able to
                  encode an image with the given layout.  The layout
                  (&lt;i&gt;i.e.&lt;/i&gt;, the image&apos;s &lt;code&gt;SampleModel&lt;/code&gt; and
                  &lt;code&gt;ColorModel&lt;/code&gt;) is described by an
                  &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; object.
                  &lt;p&gt; A return value of &lt;code&gt;true&lt;/code&gt; is not an absolute
                  guarantee of successful encoding; the encoding process may still
                  produce errors due to factors such as I/O errors, inconsistent
                  or malformed data structures, etc.  The intent is that a
                  reasonable inspection of the basic structure of the image be
                  performed in order to determine if it is within the scope of
                  the encoding format.  For example, a service provider for a
                  format that can only encode greyscale would return
                  &lt;code&gt;false&lt;/code&gt; if handed an RGB &lt;code&gt;BufferedImage&lt;/code&gt;.
                  Similarly, a service provider for a format that can encode
                  8-bit RGB imagery might refuse to encode an image with an
                  associated alpha channel.
                  &lt;p&gt; Different &lt;code&gt;ImageWriter&lt;/code&gt;s, and thus service
                  providers, may choose to be more or less strict.  For example,
                  they might accept an image with premultiplied alpha even though
                  it will have to be divided out of each pixel, at some loss of
                  precision, in order to be stored.                
                <param>
                    type an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; specifying the
                      layout of the image to be written.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this writer is likely to be able
                      to encode images with the given layout.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;type&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <javadoc line="220">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;ImageWriter&lt;/code&gt;
                  implementation associated with this service provider is able to
                  encode the given &lt;code&gt;RenderedImage&lt;/code&gt; instance.  Note
                  that this includes instances of
                  &lt;code&gt;java.awt.image.BufferedImage&lt;/code&gt;.
                  &lt;p&gt; See the discussion for
                  &lt;code&gt;canEncodeImage(ImageTypeSpecifier)&lt;/code&gt; for information
                  on the semantics of this method.                
                <param>
                    im an instance of &lt;code&gt;RenderedImage&lt;/code&gt; to be encoded.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this writer is likely to be able
                      to encode this image.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;im&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="canEncodeImage" type="boolean" line="235">
                <params>
                    <param name="im" type="RenderedImage"/>
                </params>
            </method>
            <javadoc line="238">
                Returns an instance of the &lt;code&gt;ImageWriter&lt;/code&gt;
                  implementation associated with this service provider.
                  The returned object will initially be in an initial state as if
                  its &lt;code&gt;reset&lt;/code&gt; method had been called.
                  &lt;p&gt; The default implementation simply returns
                  &lt;code&gt;createWriterInstance(null)&lt;/code&gt;.                
                <return>
                    an &lt;code&gt;ImageWriter&lt;/code&gt; instance.                    
                </return>
                <exception>
                    IOException if an error occurs during loading,
                      or initialization of the writer class, or during instantiation
                      or initialization of the writer object.                    
                </exception>
            </javadoc>
            <method name="createWriterInstance" type="ImageWriter" line="250"/>
            <method name="createWriterInstance" type="ImageWriter" line="253"/>
            <javadoc line="253">
                Returns an instance of the &lt;code&gt;ImageWriter&lt;/code&gt;
                  implementation associated with this service provider.
                  The returned object will initially be in an initial state
                  as if its &lt;code&gt;reset&lt;/code&gt; method had been called.
                  &lt;p&gt; An &lt;code&gt;Object&lt;/code&gt; may be supplied to the plug-in at
                  construction time.  The nature of the object is entirely
                  plug-in specific.
                  &lt;p&gt; Typically, a plug-in will implement this method using code
                  such as &lt;code&gt;return new MyImageWriter(this)&lt;/code&gt;.                
                <param>
                    extension a plug-in specific extension object, which may
                      be &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;ImageWriter&lt;/code&gt; instance.                    
                </return>
                <exception>
                    IOException if the attempt to instantiate
                      the writer fails.                    
                </exception>
                <exception>
                    IllegalArgumentException if the
                      &lt;code&gt;ImageWriter&lt;/code&gt;&apos;s constructor throws an
                      &lt;code&gt;IllegalArgumentException&lt;/code&gt; to indicate that the
                      extension object is unsuitable.                    
                </exception>
            </javadoc>
            <javadoc line="274">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;ImageWriter&lt;/code&gt; object
                  passed in is an instance of the &lt;code&gt;ImageWriter&lt;/code&gt;
                  associated with this service provider.                
                <param>
                    writer an &lt;code&gt;ImageWriter&lt;/code&gt; instance.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;writer&lt;/code&gt; is recognized                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;writer&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="isOwnWriter" type="boolean" line="283">
                <params>
                    <param name="writer" type="ImageWriter"/>
                </params>
                <scope line="284"/>
                <declaration name="name" type="String" line="287"/>
            </method>
            <javadoc line="290">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing all the
                  fully qualified names of all the &lt;code&gt;ImageReaderSpi&lt;/code&gt;
                  classes that can understand the internal metadata
                  representation used by the &lt;code&gt;ImageWriter&lt;/code&gt; associated
                  with this service provider, or &lt;code&gt;null&lt;/code&gt; if there are
                  no such &lt;code&gt;ImageReaders&lt;/code&gt; specified.  If a
                  non-&lt;code&gt;null&lt;/code&gt; value is returned, it must have non-zero
                  length.
                  &lt;p&gt; The first item in the array must be the name of the service
                  provider for the &quot;preferred&quot; reader, as it will be used to
                  instantiate the &lt;code&gt;ImageReader&lt;/code&gt; returned by
                  &lt;code&gt;ImageIO.getImageReader(ImageWriter)&lt;/code&gt;.
                  &lt;p&gt; This mechanism may be used to obtain
                  &lt;code&gt;ImageReaders&lt;/code&gt; that will generated non-pixel
                  meta-data (see &lt;code&gt;IIOExtraDataInfo&lt;/code&gt;) in a structure
                  understood by an &lt;code&gt;ImageWriter&lt;/code&gt;.  By reading the
                  image and obtaining this data from one of the
                  &lt;code&gt;ImageReaders&lt;/code&gt; obtained with this method and passing
                  it on to the &lt;code&gt;ImageWriter&lt;/code&gt;, a client program can
                  read an image, modify it in some way, and write it back out
                  preserving all meta-data, without having to understand anything
                  about the internal structure of the meta-data, or even about
                  the image format.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s of length at least 1
                      containing names of &lt;code&gt;ImageReaderSpi&lt;/code&gt;s, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    javax.imageio.ImageIO#getImageReader(ImageWriter)                    
                </see>
                <see>
                    ImageReaderSpi#getImageWriterSpiNames()                    
                </see>
            </javadoc>
            <method name="getImageReaderSpiNames" type="String[]" line="320"/>
        </class>
    </source>