<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.spi">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <class name="ImageOutputStreamSpi" line="32">
            <extends class="IIOServiceProvider"/>
            <javadoc line="32">
                The service provider interface (SPI) for
                  &lt;code&gt;ImageOutputStream&lt;/code&gt;s.  For more information on service
                  provider interfaces, see the class comment for the
                  &lt;code&gt;IIORegistry&lt;/code&gt; class.
                  &lt;p&gt; This interface allows arbitrary objects to be &quot;wrapped&quot; by
                  instances of &lt;code&gt;ImageOutputStream&lt;/code&gt;.  For example, a
                  particular &lt;code&gt;ImageOutputStreamSpi&lt;/code&gt; might allow a generic
                  &lt;code&gt;OutputStream&lt;/code&gt; to be used as a destination; another
                  might output to a &lt;code&gt;File&lt;/code&gt; or to a device such as a serial
                  port.
                  &lt;p&gt; By treating the creation of &lt;code&gt;ImageOutputStream&lt;/code&gt;s as
                  a pluggable service, it becomes possible to handle future output
                  destinations without changing the API.  Also, high-performance
                  implementations of &lt;code&gt;ImageOutputStream&lt;/code&gt; (for example,
                  native implementations for a particular platform) can be installed
                  and used transparently by applications.                
                <see>
                    IIORegistry                    
                </see>
                <see>
                    javax.imageio.stream.ImageOutputStream                    
                </see>
            </javadoc>
            <declaration name="outputClass" type="Class&lt;?&gt;" line="58"/>
            <javadoc line="58">
                A &lt;code&gt;Class&lt;/code&gt; object indicating the legal object type
                  for use by the &lt;code&gt;createInputStreamInstance&lt;/code&gt; method.                
            </javadoc>
            <javadoc line="64">
                Constructs a blank &lt;code&gt;ImageOutputStreamSpi&lt;/code&gt;.  It is up
                  to the subclass to initialize instance variables and/or
                  override method implementations in order to provide working
                  versions of all methods.                
            </javadoc>
            <method name="ImageOutputStreamSpi" type="constructor" line="70"/>
            <javadoc line="73">
                Constructs an &lt;code&gt;ImageOutputStreamSpi&lt;/code&gt; with a given
                  set of values.                
                <param>
                    vendorName the vendor name.                    
                </param>
                <param>
                    version a version identifier.                    
                </param>
                <param>
                    outputClass a <code>Class</code> object indicating the
                      legal object type for use by the
                      <code>createOutputStreamInstance</code> method.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>vendorName</code>
                      is <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>version</code>
                      is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="ImageOutputStreamSpi" type="constructor" line="90">
                <params>
                    <param name="vendorName" type="String"/>
                    <param name="version" type="String"/>
                    <param name="outputClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="95">
                Returns a &lt;code&gt;Class&lt;/code&gt; object representing the class or
                  interface type that must be implemented by an output
                  destination in order to be &quot;wrapped&quot; in an
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; via the
                  &lt;code&gt;createOutputStreamInstance&lt;/code&gt; method.
                  &lt;p&gt; Typical return values might include
                  &lt;code&gt;OutputStream.class&lt;/code&gt; or &lt;code&gt;File.class&lt;/code&gt;, but
                  any class may be used.                
                <return>
                    a <code>Class</code> variable.                    
                </return>
                <see>
                    #createOutputStreamInstance(Object,boolean,File)                    
                </see>
            </javadoc>
            <method name="getOutputClass" type="Class<?>" line="110"/>
            <javadoc line="114">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;ImageOutputStream&lt;/code&gt;
                  implementation associated with this service provider can
                  optionally make use of a cache &lt;code&gt;File&lt;/code&gt; for improved
                  performance and/or memory footrprint.  If &lt;code&gt;false&lt;/code&gt;,
                  the value of the &lt;code&gt;cacheFile&lt;/code&gt; argument to
                  &lt;code&gt;createOutputStreamInstance&lt;/code&gt; will be ignored.
                  &lt;p&gt; The default implementation returns &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    <code>true</code> if a cache file can be used by the
                      output streams created by this service provider.                    
                </return>
            </javadoc>
            <method name="canUseCacheFile" type="boolean" line="127"/>
            <javadoc line="131">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;ImageOutputStream&lt;/code&gt;
                  implementation associated with this service provider requires
                  the use of a cache &lt;code&gt;File&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    <code>true</code> if a cache file is needed by the
                      output streams created by this service provider.                    
                </return>
            </javadoc>
            <method name="needsCacheFile" type="boolean" line="141"/>
            <method name="createOutputStreamInstance" type="ImageOutputStream" line="145"/>
            <javadoc line="145">
                Returns an instance of the &lt;code&gt;ImageOutputStream&lt;/code&gt;
                  implementation associated with this service provider.  If the
                  use of a cache file is optional, the &lt;code&gt;useCache&lt;/code&gt;
                  parameter will be consulted.  Where a cache is required, or
                  not applicable, the value of &lt;code&gt;useCache&lt;/code&gt; will be ignored.                
                <param>
                    output an object of the class type returned by
                      <code>getOutputClass</code>.                    
                </param>
                <param>
                    useCache a <code>boolean</code> indicating whether a
                      cache file should be used, in cases where it is optional.                    
                </param>
                <param>
                    cacheDir a <code>File</code> indicating where the
                      cache file should be created, or <code>null</code> to use the
                      system directory.                    
                </param>
                <return>
                    an <code>ImageOutputStream</code> instance.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>output</code> is
                      not an instance of the correct class or is <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if a cache file is needed,
                      but <code>cacheDir</code> is non-<code>null</code> and is not a
                      directory.                    
                </exception>
                <exception>
                    IOException if a cache file is needed but cannot be
                      created.                    
                </exception>
                <see>
                    #getOutputClass                    
                </see>
            </javadoc>
            <javadoc line="178">
                Returns an instance of the &lt;code&gt;ImageOutputStream&lt;/code&gt;
                  implementation associated with this service provider.  A cache
                  file will be created in the system-dependent default
                  temporary-file directory, if needed.                
                <param>
                    output an object of the class type returned by
                      <code>getOutputClass</code>.                    
                </param>
                <return>
                    an <code>ImageOutputStream</code> instance.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>output</code> is
                      not an instance of the correct class or is <code>null</code>.                    
                </exception>
                <exception>
                    IOException if a cache file is needed but cannot be
                      created.                    
                </exception>
                <see>
                    #getOutputClass()                    
                </see>
            </javadoc>
            <method name="createOutputStreamInstance" type="ImageOutputStream" line="197">
                <params>
                    <param name="output" type="Object"/>
                </params>
            </method>
        </class>
    </source>