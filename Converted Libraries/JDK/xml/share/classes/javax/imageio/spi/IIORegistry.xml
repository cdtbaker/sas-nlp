<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.spi">
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="com.sun.imageio.spi.FileImageInputStreamSpi"/>
        <import package="com.sun.imageio.spi.FileImageOutputStreamSpi"/>
        <import package="com.sun.imageio.spi.InputStreamImageInputStreamSpi"/>
        <import package="com.sun.imageio.spi.OutputStreamImageOutputStreamSpi"/>
        <import package="com.sun.imageio.spi.RAFImageInputStreamSpi"/>
        <import package="com.sun.imageio.spi.RAFImageOutputStreamSpi"/>
        <import package="com.sun.imageio.plugins.gif.GIFImageReaderSpi"/>
        <import package="com.sun.imageio.plugins.gif.GIFImageWriterSpi"/>
        <import package="com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi"/>
        <import package="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi"/>
        <import package="com.sun.imageio.plugins.png.PNGImageReaderSpi"/>
        <import package="com.sun.imageio.plugins.png.PNGImageWriterSpi"/>
        <import package="com.sun.imageio.plugins.bmp.BMPImageReaderSpi"/>
        <import package="com.sun.imageio.plugins.bmp.BMPImageWriterSpi"/>
        <import package="com.sun.imageio.plugins.wbmp.WBMPImageReaderSpi"/>
        <import package="com.sun.imageio.plugins.wbmp.WBMPImageWriterSpi"/>
        <import package="sun.awt.AppContext"/>
        <import package="java.util.ServiceLoader"/>
        <import package="java.util.ServiceConfigurationError"/>
        <class name="IIORegistry" line="56">
            <extends class="ServiceRegistry"/>
            <javadoc line="56">
                A registry for service provider instances.  Service provider
                  classes may be detected at run time by means of meta-information in
                  the JAR files containing them.  The intent is that it be relatively
                  inexpensive to load and inspect all available service provider
                  classes.  These classes may them be used to locate and instantiate
                  more heavyweight classes that will perform actual work, in this
                  case instances of &lt;code&gt;ImageReader&lt;/code&gt;,
                  &lt;code&gt;ImageWriter&lt;/code&gt;, &lt;code&gt;ImageTranscoder&lt;/code&gt;,
                  &lt;code&gt;ImageInputStream&lt;/code&gt;, and &lt;code&gt;ImageOutputStream&lt;/code&gt;.
                  &lt;p&gt; Service providers found on the system classpath (&lt;i&gt;e.g.&lt;/i&gt;,
                  the &lt;code&gt;jre/lib/ext&lt;/code&gt; directory in Sun&apos;s implementation of
                  JDK) are automatically loaded as soon as this class is
                  instantiated.
                  &lt;p&gt; When the &lt;code&gt;registerApplicationClasspathSpis&lt;/code&gt; method
                  is called, service provider instances declared in the
                  meta-information section of JAR files on the application class path
                  are loaded.  To declare a service provider, a &lt;code&gt;services&lt;/code&gt;
                  subdirectory is placed within the &lt;code&gt;META-INF&lt;/code&gt; directory
                  that is present in every JAR file.  This directory contains a file
                  for each service provider interface that has one or more
                  implementation classes present in the JAR file.  For example, if
                  the JAR file contained a class named
                  &lt;code&gt;com.mycompany.imageio.MyFormatReaderSpi&lt;/code&gt; which
                  implements the &lt;code&gt;ImageReaderSpi&lt;/code&gt; interface, the JAR file
                  would contain a file named:
                  &lt;pre&gt;
                  META-INF/services/javax.imageio.spi.ImageReaderSpi
                  &lt;/pre&gt;
                  containing the line:
                  &lt;pre&gt;
                  com.mycompany.imageio.MyFormatReaderSpi
                  &lt;/pre&gt;
                  &lt;p&gt; The service provider classes are intended to be lightweight
                  and quick to load.  Implementations of these interfaces
                  should avoid complex dependencies on other classes and on
                  native code.
                  &lt;p&gt; It is also possible to manually add service providers not found
                  automatically, as well as to remove those that are using the
                  interfaces of the &lt;code&gt;ServiceRegistry&lt;/code&gt; class.  Thus
                  the application may customize the contents of the registry as it
                  sees fit.
                  &lt;p&gt; For more details on declaring service providers, and the JAR
                  format in general, see the &lt;a
                  href=&quot;{@docRoot}/../technotes/guides/jar/jar.html&quot;&gt;
                  JAR File Specification&lt;/a&gt;.                
            </javadoc>
            <declaration name="initialCategories" type="Vector" line="114"/>
            <javadoc line="114">
                A &lt;code&gt;Vector&lt;/code&gt; containing the valid IIO registry
                  categories (superinterfaces) to be used in the constructor.                
            </javadoc>
            <scope line="120"/>
            <javadoc line="128">
                Set up the valid service provider categories and automatically
                  register all available service providers.
                  &lt;p&gt; The constructor is private in order to prevent creation of
                  additional instances.                
            </javadoc>
            <method name="IIORegistry" type="constructor" line="135"/>
            <javadoc line="141">
                Returns the default &lt;code&gt;IIORegistry&lt;/code&gt; instance used by
                  the Image I/O API.  This instance should be used for all
                  registry functions.
                  &lt;p&gt; Each &lt;code&gt;ThreadGroup&lt;/code&gt; will receive its own
                  instance; this allows different &lt;code&gt;Applet&lt;/code&gt;s in the
                  same browser (for example) to each have their own registry.                
                <return>
                    the default registry for the current
                      <code>ThreadGroup</code>.                    
                </return>
            </javadoc>
            <method name="getDefaultInstance" type="IIORegistry" line="153">
                <comment line="159">
                    Create an instance for this AppContext                    
                </comment>
                <declaration name="context" type="AppContext" line="154"/>
                <declaration name="registry" type="IIORegistry" line="155"/>
                <scope line="157"/>
            </method>
            <method name="registerStandardSpis" type="void" line="165">
                <comment line="167">
                    Hardwire standard SPIs                    
                </comment>
            </method>
            <javadoc line="187">
                Registers all available service providers found on the
                  application class path, using the default
                  &lt;code&gt;ClassLoader&lt;/code&gt;.  This method is typically invoked by
                  the &lt;code&gt;ImageIO.scanForPlugins&lt;/code&gt; method.                
                <see>
                    javax.imageio.ImageIO#scanForPlugins                    
                </see>
                <see>
                    ClassLoader#getResources                    
                </see>
            </javadoc>
            <method name="registerApplicationClasspathSpis" type="void" line="196">
                <comment line="198">
                    FIX: load only from application classpath                    
                </comment>
                <comment line="209">
                    Note that the next() call is required to be inside
                     the try/catch block; see 6342404.                    
                </comment>
                <comment line="215">
                    In the applet case, we will catch the  error so
                     registration of other plugins can  proceed                    
                </comment>
                <comment line="219">
                    In the application case, we will  throw the
                     error to indicate app/system  misconfiguration                    
                </comment>
                <declaration name="loader" type="ClassLoader" line="199"/>
                <declaration name="categories" type="Iterator" line="201"/>
                <scope line="202">
                    <declaration name="c" type="Class&lt;IIOServiceProvider&gt;" line="203"/>
                    <declaration name="riter" type="Iterator&lt;IIOServiceProvider&gt;" line="204"/>
                    <scope line="206">
                        <scope line="207">
                            <declaration name="r" type="IIOServiceProvider" line="210"/>
                        </scope>
                        <scope line="212">
                            <scope line="213"/>
                            <scope line="217"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="registerInstalledProviders" type="void" line="227">
                <comment line="229">
                    We need load installed providers from libext
                    directory in the privileged mode in order to
                    be able read corresponding jar files even if
                    file read capability is restricted (like the
                    applet context case).                    
                </comment>
                <anonymous_class line="236">
                    <method name="run" type="Object" line="237">
                        <declaration name="categories" type="Iterator" line="238"/>
                        <scope line="239">
                            <declaration name="c" type="Class&lt;IIOServiceProvider&gt;" line="240"/>
                            <scope line="241"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="doRegistration" type="PrivilegedAction" line="235"/>
            </method>
        </class>
    </source>