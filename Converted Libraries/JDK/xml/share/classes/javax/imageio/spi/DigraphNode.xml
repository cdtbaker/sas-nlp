<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.spi">
        <import package="java.io.Serializable"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <class name="DigraphNode" line="33">
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="33">
                A node in a directed graph.  In addition to an arbitrary
                  &lt;code&gt;Object&lt;/code&gt; containing user data associated with the node,
                  each node maintains a &lt;code&gt;Set&lt;/code&gt;s of nodes which are pointed
                  to by the current node (available from &lt;code&gt;getOutNodes&lt;/code&gt;).
                  The in-degree of the node (that is, number of nodes that point to
                  the current node) may be queried.                
            </javadoc>
            <declaration name="data" type="Object" line="44"/>
            <javadoc line="44">
                The data associated with this node.                
            </javadoc>
            <declaration name="outNodes" type="Set" line="47"/>
            <javadoc line="47">
                A &lt;code&gt;Set&lt;/code&gt; of neighboring nodes pointed to by this
                  node.                
            </javadoc>
            <declaration name="inDegree" type="int" line="53"/>
            <javadoc line="53">
                The in-degree of the node.                
            </javadoc>
            <declaration name="inNodes" type="Set" line="56"/>
            <javadoc line="56">
                A &lt;code&gt;Set&lt;/code&gt; of neighboring nodes that point to this
                  node.                
            </javadoc>
            <method name="DigraphNode" type="constructor" line="62">
                <params>
                    <param name="data" type="Object"/>
                </params>
            </method>
            <javadoc line="66">
                Returns the &lt;code&gt;Object&lt;/code&gt; referenced by this node.                
            </javadoc>
            <method name="getData" type="Object" line="67"/>
            <javadoc line="71">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing the nodes pointed
                  to by this node.                
            </javadoc>
            <method name="getOutNodes" type="Iterator" line="75"/>
            <javadoc line="79">
                Adds a directed edge to the graph.  The outNodes list of this
                  node is updated and the in-degree of the other node is incremented.                
                <param>
                    node a <code>DigraphNode</code>.                    
                </param>
                <return>
                    <code>true</code> if the node was not previously the
                      target of an edge.                    
                </return>
            </javadoc>
            <method name="addEdge" type="boolean" line="88">
                <params>
                    <param name="node" type="DigraphNode"/>
                </params>
                <scope line="89"/>
            </method>
            <javadoc line="99">
                Returns &lt;code&gt;true&lt;/code&gt; if an edge exists between this node
                  and the given node.                
                <param>
                    node a <code>DigraphNode</code>.                    
                </param>
                <return>
                    <code>true</code> if the node is the target of an edge.                    
                </return>
            </javadoc>
            <method name="hasEdge" type="boolean" line="107">
                <params>
                    <param name="node" type="DigraphNode"/>
                </params>
            </method>
            <javadoc line="111">
                Removes a directed edge from the graph.  The outNodes list of this
                  node is updated and the in-degree of the other node is decremented.                
                <return>
                    <code>true</code> if the node was previously the target
                      of an edge.                    
                </return>
            </javadoc>
            <method name="removeEdge" type="boolean" line="118">
                <params>
                    <param name="node" type="DigraphNode"/>
                </params>
                <scope line="119"/>
            </method>
            <javadoc line="129">
                Removes this node from the graph, updating neighboring nodes
                  appropriately.                
            </javadoc>
            <method name="dispose" type="void" line="133">
                <declaration name="inNodesArray" type="Object[]" line="134"/>
                <scope line="135">
                    <declaration name="node" type="DigraphNode" line="136"/>
                </scope>
                <declaration name="outNodesArray" type="Object[]" line="140"/>
                <scope line="141">
                    <declaration name="node" type="DigraphNode" line="142"/>
                </scope>
            </method>
            <javadoc line="147">
                Returns the in-degree of this node.                
            </javadoc>
            <method name="getInDegree" type="int" line="148"/>
            <javadoc line="152">
                Increments the in-degree of this node.                
            </javadoc>
            <method name="incrementInDegree" type="void" line="153"/>
            <javadoc line="157">
                Decrements the in-degree of this node.                
            </javadoc>
            <method name="decrementInDegree" type="void" line="158"/>
        </class>
    </source>