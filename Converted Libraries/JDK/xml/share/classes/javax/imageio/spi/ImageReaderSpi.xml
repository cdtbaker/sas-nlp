<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.spi">
        <import package="java.io.IOException"/>
        <import package="javax.imageio.ImageReader"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <class name="ImageReaderSpi" line="32">
            <extends class="ImageReaderWriterSpi"/>
            <javadoc line="32">
                The service provider interface (SPI) for &lt;code&gt;ImageReader&lt;/code&gt;s.
                  For more information on service provider classes, see the class comment
                  for the &lt;code&gt;IIORegistry&lt;/code&gt; class.
                  &lt;p&gt; Each &lt;code&gt;ImageReaderSpi&lt;/code&gt; provides several types of information
                  about the &lt;code&gt;ImageReader&lt;/code&gt; class with which it is associated.
                  &lt;p&gt; The name of the vendor who defined the SPI class and a
                  brief description of the class are available via the
                  &lt;code&gt;getVendorName&lt;/code&gt;, &lt;code&gt;getDescription&lt;/code&gt;,
                  and &lt;code&gt;getVersion&lt;/code&gt; methods.
                  These methods may be internationalized to provide locale-specific
                  output.  These methods are intended mainly to provide short,
                  human-readable information that might be used to organize a pop-up
                  menu or other list.
                  &lt;p&gt; Lists of format names, file suffixes, and MIME types associated
                  with the service may be obtained by means of the
                  &lt;code&gt;getFormatNames&lt;/code&gt;, &lt;code&gt;getFileSuffixes&lt;/code&gt;, and
                  &lt;code&gt;getMIMETypes&lt;/code&gt; methods.  These methods may be used to
                  identify candidate &lt;code&gt;ImageReader&lt;/code&gt;s for decoding a
                  particular file or stream based on manual format selection, file
                  naming, or MIME associations (for example, when accessing a file
                  over HTTP or as an email attachment).
                  &lt;p&gt; A more reliable way to determine which &lt;code&gt;ImageReader&lt;/code&gt;s
                  are likely to be able to parse a particular data stream is provided
                  by the &lt;code&gt;canDecodeInput&lt;/code&gt; method.  This methods allows the
                  service provider to inspect the actual stream contents.
                  &lt;p&gt; Finally, an instance of the &lt;code&gt;ImageReader&lt;/code&gt; class
                  associated with this service provider may be obtained by calling
                  the &lt;code&gt;createReaderInstance&lt;/code&gt; method.  Any heavyweight
                  initialization, such as the loading of native libraries or creation
                  of large tables, should be deferred at least until the first
                  invocation of this method.                
                <see>
                    IIORegistry                    
                </see>
                <see>
                    javax.imageio.ImageReader                    
                </see>
            </javadoc>
            <declaration name="STANDARD_INPUT_TYPE" type="Class[]" line="76"/>
            <javadoc line="76">
                A single-element array, initially containing
                  &lt;code&gt;ImageInputStream.class&lt;/code&gt;, to be returned from
                  &lt;code&gt;getInputTypes&lt;/code&gt;.                
                <deprecated>
                    Instead of using this field, directly create
                      the equivalent array <code>{ ImageInputStream.class }<code>.                    
                </deprecated>
            </javadoc>
            <declaration name="inputTypes" type="Class[]" line="87"/>
            <javadoc line="87">
                An array of &lt;code&gt;Class&lt;/code&gt; objects to be returned from
                  &lt;code&gt;getInputTypes&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="writerSpiNames" type="String[]" line="93"/>
            <javadoc line="93">
                An array of strings to be returned from
                  &lt;code&gt;getImageWriterSpiNames&lt;/code&gt;, initially
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="readerClass" type="Class" line="100"/>
            <javadoc line="100">
                The &lt;code&gt;Class&lt;/code&gt; of the reader, initially
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <javadoc line="106">
                Constructs a blank &lt;code&gt;ImageReaderSpi&lt;/code&gt;.  It is up to
                  the subclass to initialize instance variables and/or override
                  method implementations in order to provide working versions of
                  all methods.                
            </javadoc>
            <method name="ImageReaderSpi" type="constructor" line="112"/>
            <javadoc line="115">
                Constructs an &lt;code&gt;ImageReaderSpi&lt;/code&gt; with a given
                  set of values.                
                <param>
                    vendorName the vendor name, as a non-<code>null</code>
                      <code>String</code>.                    
                </param>
                <param>
                    version a version identifier, as a non-<code>null</code>
                      <code>String</code>.                    
                </param>
                <param>
                    names a non-<code>null</code> array of
                      <code>String</code>s indicating the format names.  At least one
                      entry must be present.                    
                </param>
                <param>
                    suffixes an array of <code>String</code>s indicating the
                      common file suffixes.  If no suffixes are defined,
                      <code>null</code> should be supplied.  An array of length 0
                      will be normalized to <code>null</code>.                    
                </param>
                <param>
                    MIMETypes an array of <code>String</code>s indicating
                      the format's MIME types.  If no MIME types are defined,
                      <code>null</code> should be supplied.  An array of length 0
                      will be normalized to <code>null</code>.                    
                </param>
                <param>
                    readerClassName the fully-qualified name of the
                      associated <code>ImageReader</code> class, as a
                      non-<code>null</code> <code>String</code>.                    
                </param>
                <param>
                    inputTypes a non-<code>null</code> array of
                      <code>Class</code> objects of length at least 1 indicating the
                      legal input types.                    
                </param>
                <param>
                    writerSpiNames an array <code>String</code>s naming the
                      classes of all associated <code>ImageWriter</code>s, or
                      <code>null</code>.  An array of length 0 is normalized to
                      <code>null</code>.                    
                </param>
                <param>
                    supportsStandardStreamMetadataFormat a
                      <code>boolean</code> that indicates whether a stream metadata
                      object can use trees described by the standard metadata format.                    
                </param>
                <param>
                    nativeStreamMetadataFormatName a
                      <code>String</code>, or <code>null</code>, to be returned from
                      <code>getNativeStreamMetadataFormatName</code>.                    
                </param>
                <param>
                    nativeStreamMetadataFormatClassName a
                      <code>String</code>, or <code>null</code>, to be used to instantiate
                      a metadata format object to be returned from
                      <code>getNativeStreamMetadataFormat</code>.                    
                </param>
                <param>
                    extraStreamMetadataFormatNames an array of
                      <code>String</code>s, or <code>null</code>, to be returned from
                      <code>getExtraStreamMetadataFormatNames</code>.  An array of length
                      0 is normalized to <code>null</code>.                    
                </param>
                <param>
                    extraStreamMetadataFormatClassNames an array of
                      <code>String</code>s, or <code>null</code>, to be used to instantiate
                      a metadata format object to be returned from
                      <code>getStreamMetadataFormat</code>.  An array of length
                      0 is normalized to <code>null</code>.                    
                </param>
                <param>
                    supportsStandardImageMetadataFormat a
                      <code>boolean</code> that indicates whether an image metadata
                      object can use trees described by the standard metadata format.                    
                </param>
                <param>
                    nativeImageMetadataFormatName a
                      <code>String</code>, or <code>null</code>, to be returned from
                      <code>getNativeImageMetadataFormatName</code>.                    
                </param>
                <param>
                    nativeImageMetadataFormatClassName a
                      <code>String</code>, or <code>null</code>, to be used to instantiate
                      a metadata format object to be returned from
                      <code>getNativeImageMetadataFormat</code>.                    
                </param>
                <param>
                    extraImageMetadataFormatNames an array of
                      <code>String</code>s to be returned from
                      <code>getExtraImageMetadataFormatNames</code>.  An array of length 0
                      is normalized to <code>null</code>.                    
                </param>
                <param>
                    extraImageMetadataFormatClassNames an array of
                      <code>String</code>s, or <code>null</code>, to be used to instantiate
                      a metadata format object to be returned from
                      <code>getImageMetadataFormat</code>.  An array of length
                      0 is normalized to <code>null</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>vendorName</code>
                      is <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>version</code>
                      is <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>names</code>
                      is <code>null</code> or has length 0.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>readerClassName</code>
                      is <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>inputTypes</code>
                      is <code>null</code> or has length 0.                    
                </exception>
            </javadoc>
            <method name="ImageReaderSpi" type="constructor" line="211">
                <params>
                    <param name="vendorName" type="String"/>
                    <param name="version" type="String"/>
                    <param name="names" type="String[]"/>
                    <param name="suffixes" type="String[]"/>
                    <param name="MIMETypes" type="String[]"/>
                    <param name="readerClassName" type="String"/>
                    <param name="inputTypes" type="Class[]"/>
                    <param name="writerSpiNames" type="String[]"/>
                    <param name="supportsStandardStreamMetadataFormat" type="boolean"/>
                    <param name="nativeStreamMetadataFormatName" type="String"/>
                    <param name="nativeStreamMetadataFormatClassName" type="String"/>
                    <param name="extraStreamMetadataFormatNames" type="String[]"/>
                    <param name="extraStreamMetadataFormatClassNames" type="String[]"/>
                    <param name="supportsStandardImageMetadataFormat" type="boolean"/>
                    <param name="nativeImageMetadataFormatName" type="String"/>
                    <param name="nativeImageMetadataFormatClassName" type="String"/>
                    <param name="extraImageMetadataFormatNames" type="String[]"/>
                    <param name="extraImageMetadataFormatClassNames" type="String[]"/>
                </params>
                <comment line="239">
                    If length == 0, leave it null                    
                </comment>
                <scope line="225"/>
                <scope line="229"/>
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Returns an array of &lt;code&gt;Class&lt;/code&gt; objects indicating what
                  types of objects may be used as arguments to the reader&apos;s
                  &lt;code&gt;setInput&lt;/code&gt; method.
                  &lt;p&gt; For most readers, which only accept input from an
                  &lt;code&gt;ImageInputStream&lt;/code&gt;, a single-element array
                  containing &lt;code&gt;ImageInputStream.class&lt;/code&gt; should be
                  returned.                
                <return>
                    a non-<code>null</code> array of
                      <code>Class</code>objects of length at least 1.                    
                </return>
            </javadoc>
            <method name="getInputTypes" type="Class[]" line="257"/>
            <method name="canDecodeInput" type="boolean" line="261"/>
            <javadoc line="261">
                Returns &lt;code&gt;true&lt;/code&gt; if the supplied source object appears
                  to be of the format supported by this reader.  Returning
                  &lt;code&gt;true&lt;/code&gt; from this method does not guarantee that
                  reading will succeed, only that there appears to be a
                  reasonable chance of success based on a brief inspection of the
                  stream contents.  If the source is an
                  &lt;code&gt;ImageInputStream&lt;/code&gt;, implementations will commonly
                  check the first several bytes of the stream for a &quot;magic
                  number&quot; associated with the format.  Once actual reading has
                  commenced, the reader may still indicate failure at any time
                  prior to the completion of decoding.
                  &lt;p&gt; It is important that the state of the object not be
                  disturbed in order that other &lt;code&gt;ImageReaderSpi&lt;/code&gt;s can
                  properly determine whether they are able to decode the object.
                  In particular, if the source is an
                  &lt;code&gt;ImageInputStream&lt;/code&gt;, a
                  &lt;code&gt;mark&lt;/code&gt;/&lt;code&gt;reset&lt;/code&gt; pair should be used to
                  preserve the stream position.
                  &lt;p&gt; Formats such as &quot;raw,&quot; which can potentially attempt
                  to read nearly any stream, should return &lt;code&gt;false&lt;/code&gt;
                  in order to avoid being invoked in preference to a closer
                  match.
                  &lt;p&gt; If &lt;code&gt;source&lt;/code&gt; is not an instance of one of the
                  classes returned by &lt;code&gt;getInputTypes&lt;/code&gt;, the method
                  should simply return &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    source the object (typically an
                      <code>ImageInputStream</code>) to be decoded.                    
                </param>
                <return>
                    <code>true</code> if it is likely that this stream can
                      be decoded.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>source</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading the
                      stream.                    
                </exception>
            </javadoc>
            <javadoc line="304">
                Returns an instance of the &lt;code&gt;ImageReader&lt;/code&gt;
                  implementation associated with this service provider.
                  The returned object will initially be in an initial state
                  as if its &lt;code&gt;reset&lt;/code&gt; method had been called.
                  &lt;p&gt; The default implementation simply returns
                  &lt;code&gt;createReaderInstance(null)&lt;/code&gt;.                
                <return>
                    an <code>ImageReader</code> instance.                    
                </return>
                <exception>
                    IOException if an error occurs during loading,
                      or initialization of the reader class, or during instantiation
                      or initialization of the reader object.                    
                </exception>
            </javadoc>
            <method name="createReaderInstance" type="ImageReader" line="319"/>
            <method name="createReaderInstance" type="ImageReader" line="323"/>
            <javadoc line="323">
                Returns an instance of the &lt;code&gt;ImageReader&lt;/code&gt;
                  implementation associated with this service provider.
                  The returned object will initially be in an initial state
                  as if its &lt;code&gt;reset&lt;/code&gt; method had been called.
                  &lt;p&gt; An &lt;code&gt;Object&lt;/code&gt; may be supplied to the plug-in at
                  construction time.  The nature of the object is entirely
                  plug-in specific.
                  &lt;p&gt; Typically, a plug-in will implement this method using code
                  such as &lt;code&gt;return new MyImageReader(this)&lt;/code&gt;.                
                <param>
                    extension a plug-in specific extension object, which may
                      be <code>null</code>.                    
                </param>
                <return>
                    an <code>ImageReader</code> instance.                    
                </return>
                <exception>
                    IOException if the attempt to instantiate
                      the reader fails.                    
                </exception>
                <exception>
                    IllegalArgumentException if the
                      <code>ImageReader</code>'s contructor throws an
                      <code>IllegalArgumentException</code> to indicate that the
                      extension object is unsuitable.                    
                </exception>
            </javadoc>
            <javadoc line="351">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;ImageReader&lt;/code&gt; object
                  passed in is an instance of the &lt;code&gt;ImageReader&lt;/code&gt;
                  associated with this service provider.
                  &lt;p&gt; The default implementation compares the fully-qualified
                  class name of the &lt;code&gt;reader&lt;/code&gt; argument with the class
                  name passed into the constructor.  This method may be overridden
                  if more sophisticated checking is required.                
                <param>
                    reader an <code>ImageReader</code> instance.                    
                </param>
                <return>
                    <code>true</code> if <code>reader</code> is recognized.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>reader</code> is
                      <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="isOwnReader" type="boolean" line="368">
                <params>
                    <param name="reader" type="ImageReader"/>
                </params>
                <scope line="369"/>
                <declaration name="name" type="String" line="372"/>
            </method>
            <javadoc line="376">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing the fully
                  qualified names of all the &lt;code&gt;ImageWriterSpi&lt;/code&gt; classes
                  that can understand the internal metadata representation used
                  by the &lt;code&gt;ImageReader&lt;/code&gt; associated with this service
                  provider, or &lt;code&gt;null&lt;/code&gt; if there are no such
                  &lt;code&gt;ImageWriter&lt;/code&gt;s specified.  If a
                  non-&lt;code&gt;null&lt;/code&gt; value is returned, it must have non-zero
                  length.
                  &lt;p&gt; The first item in the array must be the name of the service
                  provider for the &quot;preferred&quot; writer, as it will be used to
                  instantiate the &lt;code&gt;ImageWriter&lt;/code&gt; returned by
                  &lt;code&gt;ImageIO.getImageWriter(ImageReader)&lt;/code&gt;.
                  &lt;p&gt; This mechanism may be used to obtain
                  &lt;code&gt;ImageWriters&lt;/code&gt; that will understand the internal
                  structure of non-pixel meta-data (see
                  &lt;code&gt;IIOTreeInfo&lt;/code&gt;) generated by an
                  &lt;code&gt;ImageReader&lt;/code&gt;.  By obtaining this data from the
                  &lt;code&gt;ImageReader&lt;/code&gt; and passing it on to one of the
                  &lt;code&gt;ImageWriters&lt;/code&gt; obtained with this method, a client
                  program can read an image, modify it in some way, and write it
                  back out while preserving all meta-data, without having to
                  understand anything about the internal structure of the
                  meta-data, or even about the image format.                
                <return>
                    an array of <code>String</code>s of length at least 1
                      containing names of <code>ImageWriterSpi</code>, or
                      <code>null</code>.                    
                </return>
                <see>
                    javax.imageio.ImageIO#getImageWriter(ImageReader)                    
                </see>
            </javadoc>
            <method name="getImageWriterSpiNames" type="String[]" line="409"/>
        </class>
    </source>