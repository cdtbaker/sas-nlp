<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.spi">
        <import package="java.io.IOException"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="javax.imageio.ImageReader"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataFormat"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <class name="ImageReaderWriterSpi" line="12">
            <extends class="IIOServiceProvider"/>
            <javadoc line="12">
                A superclass containing instance variables and methods common to
                  &lt;code&gt;ImageReaderSpi&lt;/code&gt; and &lt;code&gt;ImageWriterSpi&lt;/code&gt;.                
                <see>
                    IIORegistry                    
                </see>
                <see>
                    ImageReaderSpi                    
                </see>
                <see>
                    ImageWriterSpi                    
                </see>
            </javadoc>
            <declaration name="names" type="String[]" line="20"/>
            <javadoc line="20">
                An array of strings to be returned from
                  &lt;code&gt;getFormatNames&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.
                  Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.                
            </javadoc>
            <declaration name="suffixes" type="String[]" line="26"/>
            <javadoc line="26">
                An array of strings to be returned from
                  &lt;code&gt;getFileSuffixes&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="MIMETypes" type="String[]" line="31"/>
            <javadoc line="31">
                An array of strings to be returned from
                  &lt;code&gt;getMIMETypes&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="pluginClassName" type="String" line="36"/>
            <javadoc line="36">
                A &lt;code&gt;String&lt;/code&gt; containing the name of the associated
                  plug-in class, initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="supportsStandardStreamMetadataFormat" type="boolean" line="41"/>
            <javadoc line="41">
                A boolean indicating whether this plug-in supports the
                  standard metadata format for stream metadata, initially
                  &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <declaration name="nativeStreamMetadataFormatName" type="String" line="47"/>
            <javadoc line="47">
                A &lt;code&gt;String&lt;/code&gt; containing the name of the native stream
                  metadata format supported by this plug-in, initially
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="nativeStreamMetadataFormatClassName" type="String" line="53"/>
            <javadoc line="53">
                A &lt;code&gt;String&lt;/code&gt; containing the class name of the native
                  stream metadata format supported by this plug-in, initially
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="extraStreamMetadataFormatNames" type="String[]" line="59"/>
            <javadoc line="59">
                An array of &lt;code&gt;String&lt;/code&gt;s containing the names of any
                  additional stream metadata formats supported by this plug-in,
                  initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="extraStreamMetadataFormatClassNames" type="String[]" line="65"/>
            <javadoc line="65">
                An array of &lt;code&gt;String&lt;/code&gt;s containing the class names of
                  any additional stream metadata formats supported by this plug-in,
                  initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="supportsStandardImageMetadataFormat" type="boolean" line="71"/>
            <javadoc line="71">
                A boolean indicating whether this plug-in supports the
                  standard metadata format for image metadata, initially
                  &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <declaration name="nativeImageMetadataFormatName" type="String" line="77"/>
            <javadoc line="77">
                A &lt;code&gt;String&lt;/code&gt; containing the name of the
                  native stream metadata format supported by this plug-in,
                  initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="nativeImageMetadataFormatClassName" type="String" line="83"/>
            <javadoc line="83">
                A &lt;code&gt;String&lt;/code&gt; containing the class name of the
                  native stream metadata format supported by this plug-in,
                  initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="extraImageMetadataFormatNames" type="String[]" line="89"/>
            <javadoc line="89">
                An array of &lt;code&gt;String&lt;/code&gt;s containing the names of any
                  additional image metadata formats supported by this plug-in,
                  initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="extraImageMetadataFormatClassNames" type="String[]" line="95"/>
            <javadoc line="95">
                An array of &lt;code&gt;String&lt;/code&gt;s containing the class names of
                  any additional image metadata formats supported by this
                  plug-in, initially &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <javadoc line="101">
                Constructs an &lt;code&gt;ImageReaderWriterSpi&lt;/code&gt; with a given
                  set of values.                
                <param>
                    vendorName the vendor name, as a non-&lt;code&gt;null&lt;/code&gt;
                      &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    version a version identifier, as a non-&lt;code&gt;null&lt;/code&gt;
                      &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    names a non-&lt;code&gt;null&lt;/code&gt; array of
                      &lt;code&gt;String&lt;/code&gt;s indicating the format names.  At least one
                      entry must be present.                    
                </param>
                <param>
                    suffixes an array of &lt;code&gt;String&lt;/code&gt;s indicating the
                      common file suffixes.  If no suffixes are defined,
                      &lt;code&gt;null&lt;/code&gt; should be supplied.  An array of length 0
                      will be normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    MIMETypes an array of &lt;code&gt;String&lt;/code&gt;s indicating
                      the format&apos;s MIME types.  If no MIME types are defined,
                      &lt;code&gt;null&lt;/code&gt; should be supplied.  An array of length 0
                      will be normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    pluginClassName the fully-qualified name of the
                      associated &lt;code&gt;ImageReader&lt;/code&gt; or &lt;code&gt;ImageWriter&lt;/code&gt;
                      class, as a non-&lt;code&gt;null&lt;/code&gt; &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    supportsStandardStreamMetadataFormat a
                      &lt;code&gt;boolean&lt;/code&gt; that indicates whether a stream metadata
                      object can use trees described by the standard metadata format.                    
                </param>
                <param>
                    nativeStreamMetadataFormatName a
                      &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;, to be returned from
                      &lt;code&gt;getNativeStreamMetadataFormatName&lt;/code&gt;.                    
                </param>
                <param>
                    nativeStreamMetadataFormatClassName a
                      &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;, to be used to instantiate
                      a metadata format object to be returned from
                      &lt;code&gt;getNativeStreamMetadataFormat&lt;/code&gt;.                    
                </param>
                <param>
                    extraStreamMetadataFormatNames an array of
                      &lt;code&gt;String&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt;, to be returned from
                      &lt;code&gt;getExtraStreamMetadataFormatNames&lt;/code&gt;.  An array of length
                      0 is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    extraStreamMetadataFormatClassNames an array of
                      &lt;code&gt;String&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt;, to be used to instantiate
                      a metadata format object to be returned from
                      &lt;code&gt;getStreamMetadataFormat&lt;/code&gt;.  An array of length
                      0 is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    supportsStandardImageMetadataFormat a
                      &lt;code&gt;boolean&lt;/code&gt; that indicates whether an image metadata
                      object can use trees described by the standard metadata format.                    
                </param>
                <param>
                    nativeImageMetadataFormatName a
                      &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;, to be returned from
                      &lt;code&gt;getNativeImageMetadataFormatName&lt;/code&gt;.                    
                </param>
                <param>
                    nativeImageMetadataFormatClassName a
                      &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;, to be used to instantiate
                      a metadata format object to be returned from
                      &lt;code&gt;getNativeImageMetadataFormat&lt;/code&gt;.                    
                </param>
                <param>
                    extraImageMetadataFormatNames an array of
                      &lt;code&gt;String&lt;/code&gt;s to be returned from
                      &lt;code&gt;getExtraImageMetadataFormatNames&lt;/code&gt;.  An array of length 0
                      is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    extraImageMetadataFormatClassNames an array of
                      &lt;code&gt;String&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt;, to be used to instantiate
                      a metadata format object to be returned from
                      &lt;code&gt;getImageMetadataFormat&lt;/code&gt;.  An array of length
                      0 is normalized to &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;vendorName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;version&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;names&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or has length 0.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;pluginClassName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="ImageReaderWriterSpi" type="constructor" line="169">
                <params>
                    <param name="vendorName" type="String"/>
                    <param name="version" type="String"/>
                    <param name="names" type="String[]"/>
                    <param name="suffixes" type="String[]"/>
                    <param name="MIMETypes" type="String[]"/>
                    <param name="pluginClassName" type="String"/>
                    <param name="supportsStandardStreamMetadataFormat" type="boolean"/>
                    <param name="nativeStreamMetadataFormatName" type="String"/>
                    <param name="nativeStreamMetadataFormatClassName" type="String"/>
                    <param name="extraStreamMetadataFormatNames" type="String[]"/>
                    <param name="extraStreamMetadataFormatClassNames" type="String[]"/>
                    <param name="supportsStandardImageMetadataFormat" type="boolean"/>
                    <param name="nativeImageMetadataFormatName" type="String"/>
                    <param name="nativeImageMetadataFormatClassName" type="String"/>
                    <param name="extraImageMetadataFormatNames" type="String[]"/>
                    <param name="extraImageMetadataFormatClassNames" type="String[]"/>
                </params>
                <scope line="171"/>
                <scope line="174"/>
                <scope line="177"/>
                <scope line="181"/>
                <scope line="184"/>
                <scope line="191"/>
                <scope line="194"/>
                <scope line="200"/>
                <scope line="203"/>
            </method>
            <javadoc line="207">
                Constructs a blank &lt;code&gt;ImageReaderWriterSpi&lt;/code&gt;.  It is up
                  to the subclass to initialize instance variables and/or
                  override method implementations in order to provide working
                  versions of all methods.                
            </javadoc>
            <method name="ImageReaderWriterSpi" type="constructor" line="213"/>
            <javadoc line="215">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing
                  human-readable names for the formats that are generally usable
                  by the &lt;code&gt;ImageReader&lt;/code&gt; or &lt;code&gt;ImageWriter&lt;/code&gt;
                  implementation associated with this service provider.  For
                  example, a single &lt;code&gt;ImageReader&lt;/code&gt; might be able to
                  process both PBM and PNM files.                
                <return>
                    a non-&lt;code&gt;null&lt;/code&gt; array of &lt;code&gt;String&lt;/code&gt;s
                      or length at least 1 containing informal format names
                      associated with this reader or writer.                    
                </return>
            </javadoc>
            <method name="getFormatNames" type="String[]" line="226"/>
            <javadoc line="229">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing a list of
                  file suffixes associated with the formats that are generally
                  usable by the &lt;code&gt;ImageReader&lt;/code&gt; or
                  &lt;code&gt;ImageWriter&lt;/code&gt; implementation associated with this
                  service provider.  For example, a single
                  &lt;code&gt;ImageReader&lt;/code&gt; might be able to process files with
                  &apos;.pbm&apos; and &apos;.pnm&apos; suffixes, or both &apos;.jpg&apos; and &apos;.jpeg&apos;
                  suffixes.  If there are no known file suffixes,
                  &lt;code&gt;null&lt;/code&gt; will be returned.
                  &lt;p&gt; Returning a particular suffix does not guarantee that files
                  with that suffix can be processed; it merely indicates that it
                  may be worthwhile attempting to decode or encode such files
                  using this service provider.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s or length at least 1
                      containing common file suffixes associated with this reader or
                      writer, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getFileSuffixes" type="String[]" line="247"/>
            <javadoc line="250">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing a list of
                  MIME types associated with the formats that are generally
                  usable by the &lt;code&gt;ImageReader&lt;/code&gt; or
                  &lt;code&gt;ImageWriter&lt;/code&gt; implementation associated with this
                  service provider.
                  &lt;p&gt; Ideally, only a single MIME type would be required in order
                  to describe a particular format.  However, for several reasons
                  it is necessary to associate a list of types with each service
                  provider.  First, many common image file formats do not have
                  standard MIME types, so a list of commonly used unofficial
                  names will be required, such as &lt;code&gt;image/x-pbm&lt;/code&gt; and
                  &lt;code&gt;image/x-portable-bitmap&lt;/code&gt;.  Some file formats have
                  official MIME types but may sometimes be referred to using
                  their previous unofficial designations, such as
                  &lt;code&gt;image/x-png&lt;/code&gt; instead of the official
                  &lt;code&gt;image/png&lt;/code&gt;.  Finally, a single service provider may
                  be capable of parsing multiple distinct types from the MIME
                  point of view, for example &lt;code&gt;image/x-xbitmap&lt;/code&gt; and
                  &lt;code&gt;image/x-xpixmap&lt;/code&gt;.
                  &lt;p&gt; Returning a particular MIME type does not guarantee that
                  files claiming to be of that type can be processed; it merely
                  indicates that it may be worthwhile attempting to decode or
                  encode such files using this service provider.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s or length at least 1
                      containing MIME types associated with this reader or writer, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getMIMETypes" type="String[]" line="278"/>
            <javadoc line="281">
                Returns the fully-qualified class name of the
                  &lt;code&gt;ImageReader&lt;/code&gt; or &lt;code&gt;ImageWriter&lt;/code&gt; plug-in
                  associated with this service provider.                
                <return>
                    the class name, as a non-&lt;code&gt;null&lt;/code&gt;
                      &lt;code&gt;String&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPluginClassName" type="String" line="288"/>
            <javadoc line="291">
                Returns &lt;code&gt;true&lt;/code&gt; if the standard metadata format is
                  among the document formats recognized by the
                  &lt;code&gt;getAsTree&lt;/code&gt; and &lt;code&gt;setFromTree&lt;/code&gt; methods on
                  the stream metadata objects produced or consumed by this
                  plug-in.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the standard format is supported
                      for stream metadata.                    
                </return>
            </javadoc>
            <method name="isStandardStreamMetadataFormatSupported" type="boolean" line="300"/>
            <javadoc line="303">
                Returns the name of the &quot;native&quot; stream metadata format for
                  this plug-in, which typically allows for lossless encoding and
                  transmission of the stream metadata stored in the format handled by
                  this plug-in.  If no such format is supported,
                  &lt;code&gt;null&lt;/code&gt;will be returned.
                  &lt;p&gt; The default implementation returns the
                  &lt;code&gt;nativeStreamMetadataFormatName&lt;/code&gt; instance variable,
                  which is typically set by the constructor.                
                <return>
                    the name of the native stream metadata format, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getNativeStreamMetadataFormatName" type="String" line="315"/>
            <javadoc line="318">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing the names
                  of additional document formats, other than the native and
                  standard formats, recognized by the
                  &lt;code&gt;getAsTree&lt;/code&gt; and &lt;code&gt;setFromTree&lt;/code&gt; methods on
                  the stream metadata objects produced or consumed by this
                  plug-in.
                  &lt;p&gt; If the plug-in does not handle metadata, null should be
                  returned.
                  &lt;p&gt; The set of formats may differ according to the particular
                  images being read or written; this method should indicate all
                  the additional formats supported by the plug-in under any
                  circumstances.
                  &lt;p&gt; The default implementation returns a clone of the
                  &lt;code&gt;extraStreamMetadataFormatNames&lt;/code&gt; instance variable,
                  which is typically set by the constructor.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s, or null.                    
                </return>
                <see>
                    IIOMetadata#getMetadataFormatNames                    
                </see>
                <see>
                    #getExtraImageMetadataFormatNames                    
                </see>
                <see>
                    #getNativeStreamMetadataFormatName                    
                </see>
            </javadoc>
            <method name="getExtraStreamMetadataFormatNames" type="String[]" line="339"/>
            <javadoc line="342">
                Returns &lt;code&gt;true&lt;/code&gt; if the standard metadata format is
                  among the document formats recognized by the
                  &lt;code&gt;getAsTree&lt;/code&gt; and &lt;code&gt;setFromTree&lt;/code&gt; methods on
                  the image metadata objects produced or consumed by this
                  plug-in.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the standard format is supported
                      for image metadata.                    
                </return>
            </javadoc>
            <method name="isStandardImageMetadataFormatSupported" type="boolean" line="351"/>
            <javadoc line="354">
                Returns the name of the &quot;native&quot; image metadata format for
                  this plug-in, which typically allows for lossless encoding and
                  transmission of the image metadata stored in the format handled by
                  this plug-in.  If no such format is supported,
                  &lt;code&gt;null&lt;/code&gt;will be returned.
                  &lt;p&gt; The default implementation returns the
                  &lt;code&gt;nativeImageMetadataFormatName&lt;/code&gt; instance variable,
                  which is typically set by the constructor.                
                <return>
                    the name of the native image metadata format, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getExtraImageMetadataFormatNames                    
                </see>
            </javadoc>
            <method name="getNativeImageMetadataFormatName" type="String" line="367"/>
            <javadoc line="370">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing the names
                  of additional document formats, other than the native and
                  standard formats, recognized by the
                  &lt;code&gt;getAsTree&lt;/code&gt; and &lt;code&gt;setFromTree&lt;/code&gt; methods on
                  the image metadata objects produced or consumed by this
                  plug-in.
                  &lt;p&gt; If the plug-in does not handle image metadata, null should
                  be returned.
                  &lt;p&gt; The set of formats may differ according to the particular
                  images being read or written; this method should indicate all
                  the additional formats supported by the plug-in under any circumstances.
                  &lt;p&gt; The default implementation returns a clone of the
                  &lt;code&gt;extraImageMetadataFormatNames&lt;/code&gt; instance variable,
                  which is typically set by the constructor.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s, or null.                    
                </return>
                <see>
                    IIOMetadata#getMetadataFormatNames                    
                </see>
                <see>
                    #getExtraStreamMetadataFormatNames                    
                </see>
                <see>
                    #getNativeImageMetadataFormatName                    
                </see>
            </javadoc>
            <method name="getExtraImageMetadataFormatNames" type="String[]" line="390"/>
            <javadoc line="393">
                Returns an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object describing the
                  given stream metadata format, or &lt;code&gt;null&lt;/code&gt; if no
                  description is available.  The supplied name must be the native
                  stream metadata format name, the standard metadata format name,
                  or one of those returned by
                  &lt;code&gt;getExtraStreamMetadataFormatNames&lt;/code&gt;.                
                <param>
                    formatName the desired stream metadata format.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or is not a supported name.                    
                </exception>
            </javadoc>
            <method name="getStreamMetadataFormat" type="IIOMetadataFormat" line="405">
                <params>
                    <param name="formatName" type="String"/>
                </params>
            </method>
            <javadoc line="408">
                Returns an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object describing the
                  given image metadata format, or &lt;code&gt;null&lt;/code&gt; if no
                  description is available.  The supplied name must be the native
                  iamge metadata format name, the standard metadata format name,
                  or one of those returned by
                  &lt;code&gt;getExtraImageMetadataFormatNames&lt;/code&gt;.                
                <param>
                    formatName the desired image metadata format.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or is not a supported name.                    
                </exception>
            </javadoc>
            <method name="getImageMetadataFormat" type="IIOMetadataFormat" line="420">
                <params>
                    <param name="formatName" type="String"/>
                </params>
            </method>
            <method name="getMetadataFormat" type="IIOMetadataFormat" line="423">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="supportsStandard" type="boolean"/>
                    <param name="nativeName" type="String"/>
                    <param name="nativeClassName" type="String"/>
                    <param name="extraNames" type="String[]"/>
                    <param name="extraClassNames" type="String[]"/>
                </params>
                <scope line="424"/>
                <scope line="427"/>
                <declaration name="formatClassName" type="String" line="430"/>
                <scope line="431"/>
                <scope line="434">
                    <scope line="435">
                        <scope line="436"/>
                    </scope>
                </scope>
                <scope line="442"/>
                <scope line="445">
                    <declaration name="cls" type="Class" line="446"/>
                    <declaration name="meth" type="Method" line="447"/>
                </scope>
                <scope line="450">
                    <declaration name="ex" type="RuntimeException" line="451"/>
                </scope>
            </method>
        </class>
    </source>