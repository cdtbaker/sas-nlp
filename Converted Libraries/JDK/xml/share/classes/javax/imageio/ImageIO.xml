<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio">
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.io.File"/>
        <import package="java.io.FilePermission"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.net.URL"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Set"/>
        <import package="javax.imageio.spi.IIORegistry"/>
        <import package="javax.imageio.spi.ImageReaderSpi"/>
        <import package="javax.imageio.spi.ImageReaderWriterSpi"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <import package="javax.imageio.spi.ImageInputStreamSpi"/>
        <import package="javax.imageio.spi.ImageOutputStreamSpi"/>
        <import package="javax.imageio.spi.ImageTranscoderSpi"/>
        <import package="javax.imageio.spi.ServiceRegistry"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="ImageIO" line="30">
            <javadoc line="30">
                A class containing static convenience methods for locating
                  &lt;code&gt;ImageReader&lt;/code&gt;s and &lt;code&gt;ImageWriter&lt;/code&gt;s, and
                  performing simple encoding and decoding.                
            </javadoc>
            <declaration name="theRegistry" type="IIORegistry" line="36"/>
            <javadoc line="37">
                Constructor is private to prevent instantiation.                
            </javadoc>
            <method name="ImageIO" type="constructor" line="40"/>
            <javadoc line="42">
                Scans for plug-ins on the application class path,
                  loads their service provider classes, and registers a service
                  provider instance for each one found with the
                  &lt;code&gt;IIORegistry&lt;/code&gt;.
                  &lt;p&gt;This method is needed because the application class path can
                  theoretically change, or additional plug-ins may become available.
                  Rather than re-scanning the classpath on every invocation of the
                  API, the class path is scanned automatically only on the first
                  invocation. Clients can call this method to prompt a re-scan.
                  Thus this method need only be invoked by sophisticated applications
                  which dynamically make new plug-ins available at runtime.
                  &lt;p&gt; The &lt;code&gt;getResources&lt;/code&gt; method of the context
                  &lt;code&gt;ClassLoader&lt;/code&gt; is used locate JAR files containing
                  files named
                  &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt;&lt;i&gt;classname&lt;/i&gt;,
                  where &lt;i&gt;classname&lt;/i&gt; is one of &lt;code&gt;ImageReaderSpi&lt;/code&gt;,
                  &lt;code&gt;ImageWriterSpi&lt;/code&gt;, &lt;code&gt;ImageTranscoderSpi&lt;/code&gt;,
                  &lt;code&gt;ImageInputStreamSpi&lt;/code&gt;, or
                  &lt;code&gt;ImageOutputStreamSpi&lt;/code&gt;, along the application class
                  path.
                  &lt;p&gt; The contents of the located files indicate the names of
                  actual implementation classes which implement the
                  aforementioned service provider interfaces; the default class
                  loader is then used to load each of these classes and to
                  instantiate an instance of each class, which is then placed
                  into the registry for later retrieval.
                  &lt;p&gt; The exact set of locations searched depends on the
                  implementation of the Java runtime enviroment.                
                <see>
                    ClassLoader#getResources                    
                </see>
            </javadoc>
            <method name="scanForPlugins" type="void" line="73"/>
            <class name="CacheInfo" line="76">
                <javadoc line="76">
                    A class to hold information about caching.  Each
                      &lt;code&gt;ThreadGroup&lt;/code&gt; will have its own copy
                      via the &lt;code&gt;AppContext&lt;/code&gt; mechanism.                    
                </javadoc>
                <declaration name="useCache" type="boolean" line="82"/>
                <declaration name="cacheDirectory" type="File" line="83"/>
                <declaration name="hasPermission" type="Boolean" line="84"/>
                <method name="CacheInfo" type="constructor" line="85"/>
                <method name="getUseCache" type="boolean" line="87"/>
                <method name="setUseCache" type="void" line="90">
                    <params>
                        <param name="useCache" type="boolean"/>
                    </params>
                </method>
                <method name="getCacheDirectory" type="File" line="93"/>
                <method name="setCacheDirectory" type="void" line="96">
                    <params>
                        <param name="cacheDirectory" type="File"/>
                    </params>
                </method>
                <method name="getHasPermission" type="Boolean" line="99"/>
                <method name="setHasPermission" type="void" line="102">
                    <params>
                        <param name="hasPermission" type="Boolean"/>
                    </params>
                </method>
            </class>
            <javadoc line="106">
                Returns the &lt;code&gt;CacheInfo&lt;/code&gt; object associated with this
                  &lt;code&gt;ThreadGroup&lt;/code&gt;.                
            </javadoc>
            <method name="getCacheInfo" type="CacheInfo" line="110">
                <declaration name="context" type="AppContext" line="111"/>
                <declaration name="info" type="CacheInfo" line="112"/>
                <scope line="113"/>
            </method>
            <javadoc line="119">
                Returns the default temporary (cache) directory as defined by the
                  java.io.tmpdir system property.                
            </javadoc>
            <method name="getTempDir" type="String" line="123">
                <declaration name="a" type="GetPropertyAction" line="124"/>
            </method>
            <javadoc line="127">
                Determines whether the caller has write access to the cache
                  directory, stores the result in the &lt;code&gt;CacheInfo&lt;/code&gt; object,
                  and returns the decision.  This method helps to prevent mysterious
                  SecurityExceptions to be thrown when this convenience class is used
                  in an applet, for example.                
            </javadoc>
            <method name="hasCachePermission" type="boolean" line="134">
                <declaration name="hasPermission" type="Boolean" line="135"/>
                <scope line="136"/>
                <scope line="139">
                    <scope line="140">
                        <declaration name="security" type="SecurityManager" line="141"/>
                        <scope line="142">
                            <declaration name="cachedir" type="File" line="143"/>
                            <declaration name="cachepath" type="String" line="144"/>
                            <scope line="145"/>
                            <scope line="148">
                                <scope line="150"/>
                            </scope>
                            <declaration name="filepath" type="String" line="155"/>
                            <scope line="156"/>
                        </scope>
                    </scope>
                    <scope line="163"/>
                </scope>
            </method>
            <javadoc line="171">
                Sets a flag indicating whether a disk-based cache file should
                  be used when creating &lt;code&gt;ImageInputStream&lt;/code&gt;s and
                  &lt;code&gt;ImageOutputStream&lt;/code&gt;s.
                  &lt;p&gt; When reading from a standard &lt;code&gt;InputStream&lt;/code&gt;&gt;, it
                  may be necessary to save previously read information in a cache
                  since the underlying stream does not allow data to be re-read.
                  Similarly, when writing to a standard
                  &lt;code&gt;OutputStream&lt;/code&gt;, a cache may be used to allow a
                  previously written value to be changed before flushing it to
                  the final destination.
                  &lt;p&gt; The cache may reside in main memory or on disk.  Setting
                  this flag to &lt;code&gt;false&lt;/code&gt; disallows the use of disk for
                  future streams, which may be advantageous when working with
                  small images, as the overhead of creating and destroying files
                  is removed.
                  &lt;p&gt; On startup, the value is set to &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    useCache a &lt;code&gt;boolean&lt;/code&gt; indicating whether a
                      cache file should be used, in cases where it is optional.                    
                </param>
                <see>
                    #getUseCache                    
                </see>
            </javadoc>
            <method name="setUseCache" type="void" line="192">
                <params>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="195">
                Returns the current value set by &lt;code&gt;setUseCache&lt;/code&gt;, or
                  &lt;code&gt;true&lt;/code&gt; if no explicit setting has been made.                
                <return>
                    true if a disk-based cache may be used for
                      &lt;code&gt;ImageInputStream&lt;/code&gt;s and
                      &lt;code&gt;ImageOutputStream&lt;/code&gt;s.                    
                </return>
                <see>
                    #setUseCache                    
                </see>
            </javadoc>
            <method name="getUseCache" type="boolean" line="203"/>
            <javadoc line="206">
                Sets the directory where cache files are to be created.  A
                  value of &lt;code&gt;null&lt;/code&gt; indicates that the system-dependent
                  default temporary-file directory is to be used.  If
                  &lt;code&gt;getUseCache&lt;/code&gt; returns false, this value is ignored.                
                <param>
                    cacheDirectory a &lt;code&gt;File&lt;/code&gt; specifying a directory.                    
                </param>
                <see>
                    File#createTempFile(String,String,File)                    
                </see>
                <exception>
                    SecurityException if the security manager denies
                      access to the directory.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;cacheDir&lt;/code&gt; is
                      non-&lt;code&gt;null&lt;/code&gt; but is not a directory.                    
                </exception>
                <see>
                    #getCacheDirectory                    
                </see>
            </javadoc>
            <method name="setCacheDirectory" type="void" line="219">
                <params>
                    <param name="cacheDirectory" type="File"/>
                </params>
                <scope line="220"/>
            </method>
            <javadoc line="226">
                Returns the current value set by
                  &lt;code&gt;setCacheDirectory&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if no
                  explicit setting has been made.                
                <return>
                    a &lt;code&gt;File&lt;/code&gt; indicating the directory where
                      cache files will be created, or &lt;code&gt;null&lt;/code&gt; to indicate
                      the system-dependent default temporary-file directory.                    
                </return>
                <see>
                    #setCacheDirectory                    
                </see>
            </javadoc>
            <method name="getCacheDirectory" type="File" line="235"/>
            <javadoc line="238">
                Returns an &lt;code&gt;ImageInputStream&lt;/code&gt; that will take its
                  input from the given &lt;code&gt;Object&lt;/code&gt;.  The set of
                  &lt;code&gt;ImageInputStreamSpi&lt;/code&gt;s registered with the
                  &lt;code&gt;IIORegistry&lt;/code&gt; class is queried and the first one
                  that is able to take input from the supplied object is used to
                  create the returned &lt;code&gt;ImageInputStream&lt;/code&gt;.  If no
                  suitable &lt;code&gt;ImageInputStreamSpi&lt;/code&gt; exists,
                  &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The current cache settings from &lt;code&gt;getUseCache&lt;/code&gt;and
                  &lt;code&gt;getCacheDirectory&lt;/code&gt; will be used to control caching.                
                <param>
                    input an &lt;code&gt;Object&lt;/code&gt; to be used as an input
                      source, such as a &lt;code&gt;File&lt;/code&gt;, readable
                      &lt;code&gt;RandomAccessFile&lt;/code&gt;, or &lt;code&gt;InputStream&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;ImageInputStream&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;input&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if a cache file is needed but cannot be
                      created.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageInputStreamSpi                    
                </see>
            </javadoc>
            <method name="createImageInputStream" type="ImageInputStream" line="259">
                <params>
                    <param name="input" type="Object"/>
                </params>
                <scope line="260"/>
                <declaration name="iter" type="Iterator" line="263"/>
                <scope line="264"/>
                <scope line="267"/>
                <declaration name="usecache" type="boolean" line="270"/>
                <scope line="271">
                    <declaration name="spi" type="ImageInputStreamSpi" line="272"/>
                    <scope line="273">
                        <scope line="274"/>
                        <scope line="277"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="284">
                Returns an &lt;code&gt;ImageOutputStream&lt;/code&gt; that will send its
                  output to the given &lt;code&gt;Object&lt;/code&gt;.  The set of
                  &lt;code&gt;ImageOutputStreamSpi&lt;/code&gt;s registered with the
                  &lt;code&gt;IIORegistry&lt;/code&gt; class is queried and the first one
                  that is able to send output from the supplied object is used to
                  create the returned &lt;code&gt;ImageOutputStream&lt;/code&gt;.  If no
                  suitable &lt;code&gt;ImageOutputStreamSpi&lt;/code&gt; exists,
                  &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The current cache settings from &lt;code&gt;getUseCache&lt;/code&gt;and
                  &lt;code&gt;getCacheDirectory&lt;/code&gt; will be used to control caching.                
                <param>
                    output an &lt;code&gt;Object&lt;/code&gt; to be used as an output
                      destination, such as a &lt;code&gt;File&lt;/code&gt;, writable
                      &lt;code&gt;RandomAccessFile&lt;/code&gt;, or &lt;code&gt;OutputStream&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;ImageOutputStream&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;output&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if a cache file is needed but cannot be
                      created.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageOutputStreamSpi                    
                </see>
            </javadoc>
            <method name="createImageOutputStream" type="ImageOutputStream" line="306">
                <params>
                    <param name="output" type="Object"/>
                </params>
                <scope line="307"/>
                <declaration name="iter" type="Iterator" line="310"/>
                <scope line="311"/>
                <scope line="314"/>
                <declaration name="usecache" type="boolean" line="317"/>
                <scope line="318">
                    <declaration name="spi" type="ImageOutputStreamSpi" line="319"/>
                    <scope line="320">
                        <scope line="321"/>
                        <scope line="324"/>
                    </scope>
                </scope>
            </method>
            <declaration name="SpiInfo" type="enum" line="331"/>
            <scope line="331"/>
            <method name="info" type="String[]" line="332">
                <params>
                    <param name="spi" type="ImageReaderWriterSpi"/>
                </params>
            </method>
            <scope line="-1"/>
            <method name="info" type="String[]" line="337">
                <params>
                    <param name="spi" type="ImageReaderWriterSpi"/>
                </params>
            </method>
            <scope line="-1"/>
            <method name="info" type="String[]" line="342">
                <params>
                    <param name="spi" type="ImageReaderWriterSpi"/>
                </params>
            </method>
            <scope line="-1"/>
            <method name="info" type="String[]" line="346"/>
            <scope line="-1"/>
            <method name="getReaderWriterInfo" type="String[]" line="348">
                <params>
                    <param name="spiClass" type="Class&lt;S&gt;"/>
                    <param name="spiInfo" type="SpiInfo"/>
                </params>
                <declaration name="iter" type="Iterator&amp;lt;S&amp;gt;" line="349"/>
                <scope line="350"/>
                <scope line="353"/>
                <declaration name="s" type="HashSet&amp;lt;String&amp;gt;" line="356"/>
                <scope line="357">
                    <declaration name="spi" type="ImageReaderWriterSpi" line="358"/>
                </scope>
            </method>
            <javadoc line="363">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s listing all of the
                  informal format names understood by the current set of registered
                  readers.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s.                    
                </return>
            </javadoc>
            <method name="getReaderFormatNames" type="String[]" line="369"/>
            <javadoc line="372">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s listing all of the
                  MIME types understood by the current set of registered
                  readers.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s.                    
                </return>
            </javadoc>
            <method name="getReaderMIMETypes" type="String[]" line="378"/>
            <javadoc line="381">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s listing all of the
                  file suffixes associated with the formats understood
                  by the current set of registered readers.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getReaderFileSuffixes" type="String[]" line="388"/>
            <class name="ImageReaderIterator" line="391">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="ImageReader"/>
                    </type_params>
                </implements>
                <declaration name="iter" type="Iterator" line="392"/>
                <method name="ImageReaderIterator" type="constructor" line="393">
                    <params>
                        <param name="iter" type="Iterator"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="396"/>
                <method name="next" type="ImageReader" line="399">
                    <declaration name="spi" type="ImageReaderSpi" line="400"/>
                    <scope line="401"/>
                    <scope line="405"/>
                </method>
                <method name="remove" type="void" line="410"/>
            </class>
            <class name="CanDecodeInputFilter" line="414">
                <implements interface="ServiceRegistry.Filter"/>
                <declaration name="input" type="Object" line="415"/>
                <method name="CanDecodeInputFilter" type="constructor" line="416">
                    <params>
                        <param name="input" type="Object"/>
                    </params>
                </method>
                <method name="filter" type="boolean" line="419">
                    <params>
                        <param name="elt" type="Object"/>
                    </params>
                    <scope line="420">
                        <declaration name="spi" type="ImageReaderSpi" line="421"/>
                        <declaration name="stream" type="ImageInputStream" line="422"/>
                        <scope line="423"/>
                        <declaration name="canDecode" type="boolean" line="426"/>
                        <scope line="427"/>
                        <scope line="431"/>
                    </scope>
                    <scope line="436"/>
                </method>
            </class>
            <class name="CanEncodeImageAndFormatFilter" line="441">
                <implements interface="ServiceRegistry.Filter"/>
                <declaration name="type" type="ImageTypeSpecifier" line="442"/>
                <declaration name="formatName" type="String" line="443"/>
                <method name="CanEncodeImageAndFormatFilter" type="constructor" line="444">
                    <params>
                        <param name="type" type="ImageTypeSpecifier"/>
                        <param name="formatName" type="String"/>
                    </params>
                </method>
                <method name="filter" type="boolean" line="448">
                    <params>
                        <param name="elt" type="Object"/>
                    </params>
                    <declaration name="spi" type="ImageWriterSpi" line="449"/>
                </method>
            </class>
            <class name="ContainsFilter" line="453">
                <implements interface="ServiceRegistry.Filter"/>
                <declaration name="method" type="Method" line="454"/>
                <declaration name="name" type="String" line="455"/>
                <method name="ContainsFilter" type="constructor" line="456">
                    <params>
                        <param name="method" type="Method"/>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="filter" type="boolean" line="460">
                    <params>
                        <param name="elt" type="Object"/>
                    </params>
                    <scope line="461"/>
                    <scope line="464"/>
                </method>
            </class>
            <javadoc line="469">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageReader&lt;/code&gt;s that claim to be able to
                  decode the supplied &lt;code&gt;Object&lt;/code&gt;, typically an
                  &lt;code&gt;ImageInputStream&lt;/code&gt;.
                  &lt;p&gt; The stream position is left at its prior position upon
                  exit from this method.                
                <param>
                    input an &lt;code&gt;ImageInputStream&lt;/code&gt; or other
                      &lt;code&gt;Object&lt;/code&gt; containing encoded image data.                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing &lt;code&gt;ImageReader&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;input&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageReaderSpi#canDecodeInput                    
                </see>
            </javadoc>
            <method name="getImageReaders" type="Iterator&lt;ImageReader&gt;" line="483">
                <params>
                    <param name="input" type="Object"/>
                </params>
                <scope line="484"/>
                <declaration name="iter" type="Iterator" line="487"/>
                <scope line="488"/>
                <scope line="491"/>
            </method>
            <declaration name="readerFormatNamesMethod" type="Method" line="496"/>
            <declaration name="readerFileSuffixesMethod" type="Method" line="497"/>
            <declaration name="readerMIMETypesMethod" type="Method" line="498"/>
            <declaration name="writerFormatNamesMethod" type="Method" line="499"/>
            <declaration name="writerFileSuffixesMethod" type="Method" line="500"/>
            <declaration name="writerMIMETypesMethod" type="Method" line="501"/>
            <scope line="502"/>
            <scope line="-1"/>
            <javadoc line="515">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageReader&lt;/code&gt;s that claim to be able to
                  decode the named format.                
                <param>
                    formatName a &lt;code&gt;String&lt;/code&gt; containing the informal
                      name of a format (&lt;i&gt;e.g.&lt;/i&gt;, &quot;jpeg&quot; or &quot;tiff&quot;.                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing
                      &lt;code&gt;ImageReader&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageReaderSpi#getFormatNames                    
                </see>
            </javadoc>
            <method name="getImageReadersByFormatName" type="Iterator&lt;ImageReader&gt;" line="527">
                <params>
                    <param name="formatName" type="String"/>
                </params>
                <scope line="528"/>
                <declaration name="iter" type="Iterator" line="531"/>
                <scope line="532"/>
                <scope line="535"/>
            </method>
            <javadoc line="540">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageReader&lt;/code&gt;s that claim to be able to
                  decode files with the given suffix.                
                <param>
                    fileSuffix a &lt;code&gt;String&lt;/code&gt; containing a file
                      suffix (&lt;i&gt;e.g.&lt;/i&gt;, &quot;jpg&quot; or &quot;tiff&quot;).                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing
                      &lt;code&gt;ImageReader&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;fileSuffix&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageReaderSpi#getFileSuffixes                    
                </see>
            </javadoc>
            <method name="getImageReadersBySuffix" type="Iterator&lt;ImageReader&gt;" line="552">
                <params>
                    <param name="fileSuffix" type="String"/>
                </params>
                <scope line="553"/>
                <declaration name="iter" type="Iterator" line="556"/>
                <scope line="557"/>
                <scope line="560"/>
            </method>
            <javadoc line="565">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageReader&lt;/code&gt;s that claim to be able to
                  decode files with the given MIME type.                
                <param>
                    MIMEType a &lt;code&gt;String&lt;/code&gt; containing a file
                      suffix (&lt;i&gt;e.g.&lt;/i&gt;, &quot;image/jpeg&quot; or &quot;image/x-bmp&quot;).                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing
                      &lt;code&gt;ImageReader&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;MIMEType&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageReaderSpi#getMIMETypes                    
                </see>
            </javadoc>
            <method name="getImageReadersByMIMEType" type="Iterator&lt;ImageReader&gt;" line="577">
                <params>
                    <param name="MIMEType" type="String"/>
                </params>
                <scope line="578"/>
                <declaration name="iter" type="Iterator" line="581"/>
                <scope line="582"/>
                <scope line="585"/>
            </method>
            <javadoc line="590">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s listing all of the
                  informal format names understood by the current set of registered
                  writers.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s.                    
                </return>
            </javadoc>
            <method name="getWriterFormatNames" type="String[]" line="596"/>
            <javadoc line="599">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s listing all of the
                  MIME types understood by the current set of registered
                  writers.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s.                    
                </return>
            </javadoc>
            <method name="getWriterMIMETypes" type="String[]" line="605"/>
            <javadoc line="608">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s listing all of the
                  file suffixes associated with the formats understood
                  by the current set of registered writers.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getWriterFileSuffixes" type="String[]" line="615"/>
            <class name="ImageWriterIterator" line="618">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="ImageWriter"/>
                    </type_params>
                </implements>
                <declaration name="iter" type="Iterator" line="619"/>
                <method name="ImageWriterIterator" type="constructor" line="620">
                    <params>
                        <param name="iter" type="Iterator"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="623"/>
                <method name="next" type="ImageWriter" line="626">
                    <declaration name="spi" type="ImageWriterSpi" line="627"/>
                    <scope line="628"/>
                    <scope line="632"/>
                </method>
                <method name="remove" type="void" line="637"/>
            </class>
            <method name="contains" type="boolean" line="641">
                <params>
                    <param name="names" type="String[]"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="642">
                    <scope line="643"/>
                </scope>
            </method>
            <javadoc line="649">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageWriter&lt;/code&gt;s that claim to be able to
                  encode the named format.                
                <param>
                    formatName a &lt;code&gt;String&lt;/code&gt; containing the informal
                      name of a format (&lt;i&gt;e.g.&lt;/i&gt;, &quot;jpeg&quot; or &quot;tiff&quot;.                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing
                      &lt;code&gt;ImageWriter&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageWriterSpi#getFormatNames                    
                </see>
            </javadoc>
            <method name="getImageWritersByFormatName" type="Iterator&lt;ImageWriter&gt;" line="661">
                <params>
                    <param name="formatName" type="String"/>
                </params>
                <scope line="662"/>
                <declaration name="iter" type="Iterator" line="665"/>
                <scope line="666"/>
                <scope line="669"/>
            </method>
            <javadoc line="674">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageWriter&lt;/code&gt;s that claim to be able to
                  encode files with the given suffix.                
                <param>
                    fileSuffix a &lt;code&gt;String&lt;/code&gt; containing a file
                      suffix (&lt;i&gt;e.g.&lt;/i&gt;, &quot;jpg&quot; or &quot;tiff&quot;).                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing &lt;code&gt;ImageWriter&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;fileSuffix&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageWriterSpi#getFileSuffixes                    
                </see>
            </javadoc>
            <method name="getImageWritersBySuffix" type="Iterator&lt;ImageWriter&gt;" line="685">
                <params>
                    <param name="fileSuffix" type="String"/>
                </params>
                <scope line="686"/>
                <declaration name="iter" type="Iterator" line="689"/>
                <scope line="690"/>
                <scope line="693"/>
            </method>
            <javadoc line="698">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageWriter&lt;/code&gt;s that claim to be able to
                  encode files with the given MIME type.                
                <param>
                    MIMEType a &lt;code&gt;String&lt;/code&gt; containing a file
                      suffix (&lt;i&gt;e.g.&lt;/i&gt;, &quot;image/jpeg&quot; or &quot;image/x-bmp&quot;).                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing &lt;code&gt;ImageWriter&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;MIMEType&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageWriterSpi#getMIMETypes                    
                </see>
            </javadoc>
            <method name="getImageWritersByMIMEType" type="Iterator&lt;ImageWriter&gt;" line="709">
                <params>
                    <param name="MIMEType" type="String"/>
                </params>
                <scope line="710"/>
                <declaration name="iter" type="Iterator" line="713"/>
                <scope line="714"/>
                <scope line="717"/>
            </method>
            <javadoc line="722">
                Returns an &lt;code&gt;ImageWriter&lt;/code&gt;corresponding to the given
                  &lt;code&gt;ImageReader&lt;/code&gt;, if there is one, or &lt;code&gt;null&lt;/code&gt;
                  if the plug-in for this &lt;code&gt;ImageReader&lt;/code&gt; does not
                  specify a corresponding &lt;code&gt;ImageWriter&lt;/code&gt;, or if the
                  given &lt;code&gt;ImageReader&lt;/code&gt; is not registered.  This
                  mechanism may be used to obtain an &lt;code&gt;ImageWriter&lt;/code&gt;
                  that will understand the internal structure of non-pixel
                  metadata (as encoded by &lt;code&gt;IIOMetadata&lt;/code&gt; objects)
                  generated by the &lt;code&gt;ImageReader&lt;/code&gt;.  By obtaining this
                  data from the &lt;code&gt;ImageReader&lt;/code&gt; and passing it on to the
                  &lt;code&gt;ImageWriter&lt;/code&gt; obtained with this method, a client
                  program can read an image, modify it in some way, and write it
                  back out preserving all metadata, without having to understand
                  anything about the structure of the metadata, or even about
                  the image format.  Note that this method returns the
                  &quot;preferred&quot; writer, which is the first in the list returned by
                  &lt;code&gt;javax.imageio.spi.ImageReaderSpi.getImageWriterSpiNames()&lt;/code&gt;.                
                <param>
                    reader an instance of a registered &lt;code&gt;ImageReader&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;ImageWriter&lt;/code&gt;, or null.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;reader&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #getImageReader(ImageWriter)                    
                </see>
                <see>
                    javax.imageio.spi.ImageReaderSpi#getImageWriterSpiNames()                    
                </see>
            </javadoc>
            <method name="getImageWriter" type="ImageWriter" line="747">
                <params>
                    <param name="reader" type="ImageReader"/>
                </params>
                <scope line="748"/>
                <declaration name="readerSpi" type="ImageReaderSpi" line="751"/>
                <scope line="752">
                    <declaration name="readerSpiIter" type="Iterator" line="753"/>
                    <scope line="754"/>
                    <scope line="757"/>
                    <scope line="760">
                        <declaration name="temp" type="ImageReaderSpi" line="761"/>
                        <scope line="762"/>
                    </scope>
                    <scope line="767"/>
                </scope>
                <declaration name="writerNames" type="String[]" line="771"/>
                <scope line="772"/>
                <declaration name="writerSpiClass" type="Class" line="775"/>
                <scope line="776"/>
                <scope line="779"/>
                <declaration name="writerSpi" type="ImageWriterSpi" line="782"/>
                <scope line="783"/>
                <scope line="786"/>
                <scope line="789"/>
            </method>
            <javadoc line="794">
                Returns an &lt;code&gt;ImageReader&lt;/code&gt;corresponding to the given
                  &lt;code&gt;ImageWriter&lt;/code&gt;, if there is one, or &lt;code&gt;null&lt;/code&gt;
                  if the plug-in for this &lt;code&gt;ImageWriter&lt;/code&gt; does not
                  specify a corresponding &lt;code&gt;ImageReader&lt;/code&gt;, or if the
                  given &lt;code&gt;ImageWriter&lt;/code&gt; is not registered.  This method
                  is provided principally for symmetry with
                  &lt;code&gt;getImageWriter(ImageReader)&lt;/code&gt;.  Note that this
                  method returns the &quot;preferred&quot; reader, which is the first in
                  the list returned by
                  javax.imageio.spi.ImageWriterSpi.&lt;code&gt;getImageReaderSpiNames()&lt;/code&gt;.                
                <param>
                    writer an instance of a registered &lt;code&gt;ImageWriter&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;ImageReader&lt;/code&gt;, or null.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;writer&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #getImageWriter(ImageReader)                    
                </see>
                <see>
                    javax.imageio.spi.ImageWriterSpi#getImageReaderSpiNames()                    
                </see>
            </javadoc>
            <method name="getImageReader" type="ImageReader" line="812">
                <params>
                    <param name="writer" type="ImageWriter"/>
                </params>
                <scope line="813"/>
                <declaration name="writerSpi" type="ImageWriterSpi" line="816"/>
                <scope line="817">
                    <declaration name="writerSpiIter" type="Iterator" line="818"/>
                    <scope line="819"/>
                    <scope line="822"/>
                    <scope line="825">
                        <declaration name="temp" type="ImageWriterSpi" line="826"/>
                        <scope line="827"/>
                    </scope>
                    <scope line="832"/>
                </scope>
                <declaration name="readerNames" type="String[]" line="836"/>
                <scope line="837"/>
                <declaration name="readerSpiClass" type="Class" line="840"/>
                <scope line="841"/>
                <scope line="844"/>
                <declaration name="readerSpi" type="ImageReaderSpi" line="847"/>
                <scope line="848"/>
                <scope line="851"/>
                <scope line="854"/>
            </method>
            <javadoc line="859">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageWriter&lt;/code&gt;s that claim to be able to
                  encode images of the given layout (specified using an
                  &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;) in the given format.                
                <param>
                    type an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; indicating the
                      layout of the image to be written.                    
                </param>
                <param>
                    formatName the informal name of the &lt;code&gt;format&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing &lt;code&gt;ImageWriter&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if any parameter is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    javax.imageio.spi.ImageWriterSpi#canEncodeImage(ImageTypeSpecifier)                    
                </see>
            </javadoc>
            <method name="getImageWriters" type="Iterator&lt;ImageWriter&gt;" line="872">
                <params>
                    <param name="type" type="ImageTypeSpecifier"/>
                    <param name="formatName" type="String"/>
                </params>
                <scope line="873"/>
                <scope line="876"/>
                <declaration name="iter" type="Iterator" line="879"/>
                <scope line="880"/>
                <scope line="883"/>
            </method>
            <class name="ImageTranscoderIterator" line="888">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="ImageTranscoder"/>
                    </type_params>
                </implements>
                <declaration name="iter" type="Iterator" line="889"/>
                <method name="ImageTranscoderIterator" type="constructor" line="890">
                    <params>
                        <param name="iter" type="Iterator"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="893"/>
                <method name="next" type="ImageTranscoder" line="896">
                    <declaration name="spi" type="ImageTranscoderSpi" line="897"/>
                </method>
                <method name="remove" type="void" line="901"/>
            </class>
            <class name="TranscoderFilter" line="905">
                <implements interface="ServiceRegistry.Filter"/>
                <declaration name="readerSpiName" type="String" line="906"/>
                <declaration name="writerSpiName" type="String" line="907"/>
                <method name="TranscoderFilter" type="constructor" line="908">
                    <params>
                        <param name="readerSpi" type="ImageReaderSpi"/>
                        <param name="writerSpi" type="ImageWriterSpi"/>
                    </params>
                </method>
                <method name="filter" type="boolean" line="912">
                    <params>
                        <param name="elt" type="Object"/>
                    </params>
                    <declaration name="spi" type="ImageTranscoderSpi" line="913"/>
                    <declaration name="readerName" type="String" line="914"/>
                    <declaration name="writerName" type="String" line="915"/>
                </method>
            </class>
            <javadoc line="919">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; containing all currently
                  registered &lt;code&gt;ImageTranscoder&lt;/code&gt;s that claim to be
                  able to transcode between the metadata of the given
                  &lt;code&gt;ImageReader&lt;/code&gt; and &lt;code&gt;ImageWriter&lt;/code&gt;.                
                <param>
                    reader an &lt;code&gt;ImageReader&lt;/code&gt;.                    
                </param>
                <param>
                    writer an &lt;code&gt;ImageWriter&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; containing
                      &lt;code&gt;ImageTranscoder&lt;/code&gt;s.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;reader&lt;/code&gt; or
                      &lt;code&gt;writer&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getImageTranscoders" type="Iterator&lt;ImageTranscoder&gt;" line="931">
                <params>
                    <param name="reader" type="ImageReader"/>
                    <param name="writer" type="ImageWriter"/>
                </params>
                <scope line="932"/>
                <scope line="935"/>
                <declaration name="readerSpi" type="ImageReaderSpi" line="938"/>
                <declaration name="writerSpi" type="ImageWriterSpi" line="939"/>
                <declaration name="filter" type="ServiceRegistry.Filter" line="940"/>
                <declaration name="iter" type="Iterator" line="941"/>
                <scope line="942"/>
                <scope line="945"/>
            </method>
            <javadoc line="950">
                Returns a &lt;code&gt;BufferedImage&lt;/code&gt; as the result of decoding
                  a supplied &lt;code&gt;File&lt;/code&gt; with an &lt;code&gt;ImageReader&lt;/code&gt;
                  chosen automatically from among those currently registered.
                  The &lt;code&gt;File&lt;/code&gt; is wrapped in an
                  &lt;code&gt;ImageInputStream&lt;/code&gt;.  If no registered
                  &lt;code&gt;ImageReader&lt;/code&gt; claims to be able to read the
                  resulting stream, &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The current cache settings from &lt;code&gt;getUseCache&lt;/code&gt;and
                  &lt;code&gt;getCacheDirectory&lt;/code&gt; will be used to control caching in the
                  &lt;code&gt;ImageInputStream&lt;/code&gt; that is created.
                  &lt;p&gt; Note that there is no &lt;code&gt;read&lt;/code&gt; method that takes a
                  filename as a &lt;code&gt;String&lt;/code&gt;; use this method instead after
                  creating a &lt;code&gt;File&lt;/code&gt; from the filename.
                  &lt;p&gt; This method does not attempt to locate
                  &lt;code&gt;ImageReader&lt;/code&gt;s that can read directly from a
                  &lt;code&gt;File&lt;/code&gt;; that may be accomplished using
                  &lt;code&gt;IIORegistry&lt;/code&gt; and &lt;code&gt;ImageReaderSpi&lt;/code&gt;.                
                <param>
                    input a &lt;code&gt;File&lt;/code&gt; to read from.                    
                </param>
                <return>
                    a &lt;code&gt;BufferedImage&lt;/code&gt; containing the decoded
                      contents of the input, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;input&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="read" type="BufferedImage" line="975">
                <params>
                    <param name="input" type="File"/>
                </params>
                <scope line="976"/>
                <scope line="979"/>
                <declaration name="stream" type="ImageInputStream" line="982"/>
                <scope line="983"/>
                <declaration name="bi" type="BufferedImage" line="986"/>
                <scope line="987"/>
            </method>
            <javadoc line="992">
                Returns a &lt;code&gt;BufferedImage&lt;/code&gt; as the result of decoding
                  a supplied &lt;code&gt;InputStream&lt;/code&gt; with an &lt;code&gt;ImageReader&lt;/code&gt;
                  chosen automatically from among those currently registered.
                  The &lt;code&gt;InputStream&lt;/code&gt; is wrapped in an
                  &lt;code&gt;ImageInputStream&lt;/code&gt;.  If no registered
                  &lt;code&gt;ImageReader&lt;/code&gt; claims to be able to read the
                  resulting stream, &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The current cache settings from &lt;code&gt;getUseCache&lt;/code&gt;and
                  &lt;code&gt;getCacheDirectory&lt;/code&gt; will be used to control caching in the
                  &lt;code&gt;ImageInputStream&lt;/code&gt; that is created.
                  &lt;p&gt; This method does not attempt to locate
                  &lt;code&gt;ImageReader&lt;/code&gt;s that can read directly from an
                  &lt;code&gt;InputStream&lt;/code&gt;; that may be accomplished using
                  &lt;code&gt;IIORegistry&lt;/code&gt; and &lt;code&gt;ImageReaderSpi&lt;/code&gt;.
                  &lt;p&gt; This method &lt;em&gt;does not&lt;/em&gt; close the provided
                  &lt;code&gt;InputStream&lt;/code&gt; after the read operation has completed;
                  it is the responsibility of the caller to close the stream, if desired.                
                <param>
                    input an &lt;code&gt;InputStream&lt;/code&gt; to read from.                    
                </param>
                <return>
                    a &lt;code&gt;BufferedImage&lt;/code&gt; containing the decoded
                      contents of the input, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;input&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="read" type="BufferedImage" line="1017">
                <params>
                    <param name="input" type="InputStream"/>
                </params>
                <scope line="1018"/>
                <declaration name="stream" type="ImageInputStream" line="1021"/>
                <declaration name="bi" type="BufferedImage" line="1022"/>
                <scope line="1023"/>
            </method>
            <javadoc line="1028">
                Returns a &lt;code&gt;BufferedImage&lt;/code&gt; as the result of decoding
                  a supplied &lt;code&gt;URL&lt;/code&gt; with an &lt;code&gt;ImageReader&lt;/code&gt;
                  chosen automatically from among those currently registered.  An
                  &lt;code&gt;InputStream&lt;/code&gt; is obtained from the &lt;code&gt;URL&lt;/code&gt;,
                  which is wrapped in an &lt;code&gt;ImageInputStream&lt;/code&gt;.  If no
                  registered &lt;code&gt;ImageReader&lt;/code&gt; claims to be able to read
                  the resulting stream, &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The current cache settings from &lt;code&gt;getUseCache&lt;/code&gt;and
                  &lt;code&gt;getCacheDirectory&lt;/code&gt; will be used to control caching in the
                  &lt;code&gt;ImageInputStream&lt;/code&gt; that is created.
                  &lt;p&gt; This method does not attempt to locate
                  &lt;code&gt;ImageReader&lt;/code&gt;s that can read directly from a
                  &lt;code&gt;URL&lt;/code&gt;; that may be accomplished using
                  &lt;code&gt;IIORegistry&lt;/code&gt; and &lt;code&gt;ImageReaderSpi&lt;/code&gt;.                
                <param>
                    input a &lt;code&gt;URL&lt;/code&gt; to read from.                    
                </param>
                <return>
                    a &lt;code&gt;BufferedImage&lt;/code&gt; containing the decoded
                      contents of the input, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;input&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="read" type="BufferedImage" line="1050">
                <params>
                    <param name="input" type="URL"/>
                </params>
                <scope line="1051"/>
                <declaration name="istream" type="InputStream" line="1054"/>
                <scope line="1055"/>
                <scope line="1058"/>
                <declaration name="stream" type="ImageInputStream" line="1061"/>
                <declaration name="bi" type="BufferedImage" line="1062"/>
                <scope line="1063">
                    <scope line="1065"/>
                </scope>
                <scope line="1069"/>
            </method>
            <javadoc line="1074">
                Returns a &lt;code&gt;BufferedImage&lt;/code&gt; as the result of decoding
                  a supplied &lt;code&gt;ImageInputStream&lt;/code&gt; with an
                  &lt;code&gt;ImageReader&lt;/code&gt; chosen automatically from among those
                  currently registered.  If no registered
                  &lt;code&gt;ImageReader&lt;/code&gt; claims to be able to read the stream,
                  &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; Unlike most other methods in this class, this method &lt;em&gt;does&lt;/em&gt;
                  close the provided &lt;code&gt;ImageInputStream&lt;/code&gt; after the read
                  operation has completed, unless &lt;code&gt;null&lt;/code&gt; is returned,
                  in which case this method &lt;em&gt;does not&lt;/em&gt; close the stream.                
                <param>
                    stream an &lt;code&gt;ImageInputStream&lt;/code&gt; to read from.                    
                </param>
                <return>
                    a &lt;code&gt;BufferedImage&lt;/code&gt; containing the decoded
                      contents of the input, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;stream&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during reading.                    
                </exception>
            </javadoc>
            <method name="read" type="BufferedImage" line="1092">
                <params>
                    <param name="stream" type="ImageInputStream"/>
                </params>
                <scope line="1093"/>
                <declaration name="iter" type="Iterator" line="1096"/>
                <scope line="1097"/>
                <declaration name="reader" type="ImageReader" line="1100"/>
                <declaration name="param" type="ImageReadParam" line="1101"/>
                <declaration name="bi" type="BufferedImage" line="1103"/>
                <scope line="1104"/>
                <scope line="1107"/>
            </method>
            <javadoc line="1113">
                Writes an image using the an arbitrary &lt;code&gt;ImageWriter&lt;/code&gt;
                  that supports the given format to an
                  &lt;code&gt;ImageOutputStream&lt;/code&gt;.  The image is written to the
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; starting at the current stream
                  pointer, overwriting existing stream data from that point
                  forward, if present.
                  &lt;p&gt; This method &lt;em&gt;does not&lt;/em&gt; close the provided
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; after the write operation has completed;
                  it is the responsibility of the caller to close the stream, if desired.                
                <param>
                    im a &lt;code&gt;RenderedImage&lt;/code&gt; to be written.                    
                </param>
                <param>
                    formatName a &lt;code&gt;String&lt;/code&gt; containg the informal
                      name of the format.                    
                </param>
                <param>
                    output an &lt;code&gt;ImageOutputStream&lt;/code&gt; to be written to.                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; if no appropriate writer is found.                    
                </return>
                <exception>
                    IllegalArgumentException if any parameter is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="write" type="boolean" line="1132">
                <params>
                    <param name="im" type="RenderedImage"/>
                    <param name="formatName" type="String"/>
                    <param name="output" type="ImageOutputStream"/>
                </params>
                <scope line="1133"/>
                <scope line="1136"/>
                <scope line="1139"/>
            </method>
            <javadoc line="1144">
                Writes an image using an arbitrary &lt;code&gt;ImageWriter&lt;/code&gt;
                  that supports the given format to a &lt;code&gt;File&lt;/code&gt;.  If
                  there is already a &lt;code&gt;File&lt;/code&gt; present, its contents are
                  discarded.                
                <param>
                    im a &lt;code&gt;RenderedImage&lt;/code&gt; to be written.                    
                </param>
                <param>
                    formatName a &lt;code&gt;String&lt;/code&gt; containg the informal
                      name of the format.                    
                </param>
                <param>
                    output a &lt;code&gt;File&lt;/code&gt; to be written to.                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; if no appropriate writer is found.                    
                </return>
                <exception>
                    IllegalArgumentException if any parameter is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="write" type="boolean" line="1158">
                <params>
                    <param name="im" type="RenderedImage"/>
                    <param name="formatName" type="String"/>
                    <param name="output" type="File"/>
                </params>
                <scope line="1159"/>
                <declaration name="stream" type="ImageOutputStream" line="1162"/>
                <declaration name="writer" type="ImageWriter" line="1163"/>
                <scope line="1164"/>
                <scope line="1167"/>
                <scope line="1171"/>
                <scope line="1174"/>
                <scope line="1177"/>
            </method>
            <javadoc line="1181">
                Writes an image using an arbitrary &lt;code&gt;ImageWriter&lt;/code&gt;
                  that supports the given format to an &lt;code&gt;OutputStream&lt;/code&gt;.
                  &lt;p&gt; This method &lt;em&gt;does not&lt;/em&gt; close the provided
                  &lt;code&gt;OutputStream&lt;/code&gt; after the write operation has completed;
                  it is the responsibility of the caller to close the stream, if desired.
                  &lt;p&gt; The current cache settings from &lt;code&gt;getUseCache&lt;/code&gt;and
                  &lt;code&gt;getCacheDirectory&lt;/code&gt; will be used to control caching.                
                <param>
                    im a &lt;code&gt;RenderedImage&lt;/code&gt; to be written.                    
                </param>
                <param>
                    formatName a &lt;code&gt;String&lt;/code&gt; containg the informal
                      name of the format.                    
                </param>
                <param>
                    output an &lt;code&gt;OutputStream&lt;/code&gt; to be written to.                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; if no appropriate writer is found.                    
                </return>
                <exception>
                    IllegalArgumentException if any parameter is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="write" type="boolean" line="1198">
                <params>
                    <param name="im" type="RenderedImage"/>
                    <param name="formatName" type="String"/>
                    <param name="output" type="OutputStream"/>
                </params>
                <scope line="1199"/>
                <declaration name="stream" type="ImageOutputStream" line="1202"/>
                <scope line="1203"/>
                <scope line="1206"/>
                <scope line="1209"/>
                <scope line="1212"/>
            </method>
            <javadoc line="1216">
                Returns &lt;code&gt;ImageWriter&lt;/code&gt; instance according to given
                  rendered image and image format or &lt;code&gt;null&lt;/code&gt; if there
                  is no appropriate writer.                
            </javadoc>
            <method name="getWriter" type="ImageWriter" line="1221">
                <params>
                    <param name="im" type="RenderedImage"/>
                    <param name="formatName" type="String"/>
                </params>
                <declaration name="type" type="ImageTypeSpecifier" line="1222"/>
                <declaration name="iter" type="Iterator&amp;lt;ImageWriter&amp;gt;" line="1223"/>
                <scope line="1224"/>
                <scope line="1227"/>
            </method>
            <javadoc line="1231">
                Writes image to output stream  using given image writer.                
            </javadoc>
            <method name="doWrite" type="boolean" line="1234">
                <params>
                    <param name="im" type="RenderedImage"/>
                    <param name="writer" type="ImageWriter"/>
                    <param name="output" type="ImageOutputStream"/>
                </params>
                <scope line="1235"/>
                <scope line="1239"/>
                <scope line="1242"/>
            </method>
        </class>
    </source>