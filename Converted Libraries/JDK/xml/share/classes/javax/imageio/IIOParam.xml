<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio">
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <class name="IIOParam" line="31">
            <javadoc line="31">
                A superclass of all classes describing how streams should be
                  decoded or encoded.  This class contains all the variables and
                  methods that are shared by &lt;code&gt;ImageReadParam&lt;/code&gt; and
                  &lt;code&gt;ImageWriteParam&lt;/code&gt;.
                  &lt;p&gt; This class provides mechanisms to specify a source region and a
                  destination region.  When reading, the source is the stream and
                  the in-memory image is the destination.  When writing, these are
                  reversed.  In the case of writing, destination regions may be used
                  only with a writer that supports pixel replacement.
                  &lt;p&gt;
                  Decimation subsampling may be specified for both readers
                  and writers, using a movable subsampling grid.
                  &lt;p&gt;
                  Subsets of the source and destination bands may be selected.                
            </javadoc>
            <declaration name="sourceRegion" type="Rectangle" line="51"/>
            <javadoc line="51">
                The source region, on &lt;code&gt;null&lt;/code&gt; if none is set.                
            </javadoc>
            <declaration name="sourceXSubsampling" type="int" line="56"/>
            <javadoc line="56">
                The decimation subsampling to be applied in the horizontal
                  direction.  By default, the value is &lt;code&gt;1&lt;/code&gt;.
                  The value must not be negative or 0.                
            </javadoc>
            <declaration name="sourceYSubsampling" type="int" line="63"/>
            <javadoc line="63">
                The decimation subsampling to be applied in the vertical
                  direction.  By default, the value is &lt;code&gt;1&lt;/code&gt;.
                  The value must not be negative or 0.                
            </javadoc>
            <declaration name="subsamplingXOffset" type="int" line="70"/>
            <javadoc line="70">
                A horizontal offset to be applied to the subsampling grid before
                  subsampling.  The first pixel to be used will be offset this
                  amount from the origin of the region, or of the image if no
                  region is specified.                
            </javadoc>
            <declaration name="subsamplingYOffset" type="int" line="78"/>
            <javadoc line="78">
                A vertical offset to be applied to the subsampling grid before
                  subsampling.  The first pixel to be used will be offset this
                  amount from the origin of the region, or of the image if no
                  region is specified.                
            </javadoc>
            <declaration name="sourceBands" type="int[]" line="86"/>
            <javadoc line="86">
                An array of &lt;code&gt;int&lt;/code&gt;s indicating which source bands
                  will be used, or &lt;code&gt;null&lt;/code&gt;.  If &lt;code&gt;null&lt;/code&gt;, the
                  set of source bands to be used is as described in the comment
                  for the &lt;code&gt;setSourceBands&lt;/code&gt; method.  No value should
                  be allowed to be negative.                
            </javadoc>
            <declaration name="destinationType" type="ImageTypeSpecifier" line="95"/>
            <javadoc line="95">
                An &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; to be used to generate a
                  destination image when reading, or to set the output color type
                  when writing.  If non has been setm the value will be
                  &lt;code&gt;null&lt;/code&gt;.  By default, the value is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="destinationOffset" type="Point" line="103"/>
            <javadoc line="103">
                The offset in the destination where the upper-left decoded
                  pixel should be placed.  By default, the value is (0, 0).                
            </javadoc>
            <declaration name="defaultController" type="IIOParamController" line="109"/>
            <javadoc line="109">
                The default &lt;code&gt;IIOParamController&lt;/code&gt; that will be
                  used to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt;
                  object when the &lt;code&gt;activateController&lt;/code&gt; method
                  is called.  This default should be set by subclasses
                  that choose to provide their own default controller,
                  usually a GUI, for setting parameters.                
                <see>
                    IIOParamController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #activateController                    
                </see>
            </javadoc>
            <declaration name="controller" type="IIOParamController" line="123"/>
            <javadoc line="123">
                The &lt;code&gt;IIOParamController&lt;/code&gt; that will be
                  used to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt;
                  object when the &lt;code&gt;activateController&lt;/code&gt; method
                  is called.  This value overrides any default controller,
                  even when null.                
                <see>
                    IIOParamController                    
                </see>
                <see>
                    #setController(IIOParamController)                    
                </see>
                <see>
                    #hasController()                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <javadoc line="137">
                Protected constructor may be called only by subclasses.                
            </javadoc>
            <method name="IIOParam" type="constructor" line="140"/>
            <javadoc line="144">
                Sets the source region of interest.  The region of interest is
                  described as a rectangle, with the upper-left corner of the
                  source image as pixel (0, 0) and increasing values down and to
                  the right.  The actual number of pixels used will depend on
                  the subsampling factors set by &lt;code&gt;setSourceSubsampling&lt;/code&gt;.
                  If subsampling has been set such that this number is zero,
                  an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The source region of interest specified by this method will
                  be clipped as needed to fit within the source bounds, as well
                  as the destination offsets, width, and height at the time of
                  actual I/O.
                  &lt;p&gt; A value of &lt;code&gt;null&lt;/code&gt; for &lt;code&gt;sourceRegion&lt;/code&gt;
                  will remove any region specification, causing the entire image
                  to be used.                
                <param>
                    sourceRegion a <code>Rectangle</code> specifying the
                      source region of interest, or <code>null</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if
                      <code>sourceRegion</code> is non-<code>null</code> and either
                      <code>sourceRegion.x</code> or <code>sourceRegion.y</code> is
                      negative.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      <code>sourceRegion</code> is non-<code>null</code> and either
                      <code>sourceRegion.width</code> or
                      <code>sourceRegion.height</code> is negative or 0.                    
                </exception>
                <exception>
                    IllegalStateException if subsampling is such that
                      this region will have a subsampled width or height of zero.                    
                </exception>
                <see>
                    #getSourceRegion                    
                </see>
                <see>
                    #setSourceSubsampling                    
                </see>
                <see>
                    ImageReadParam#setDestinationOffset                    
                </see>
                <see>
                    ImageReadParam#getDestinationOffset                    
                </see>
            </javadoc>
            <method name="setSourceRegion" type="void" line="181">
                <params>
                    <param name="sourceRegion" type="Rectangle"/>
                </params>
                <comment line="200">
                    Throw an IllegalStateException if region falls between subsamples                    
                </comment>
                <scope line="182"/>
                <scope line="187"/>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="201"/>
                <scope line="205"/>
            </method>
            <javadoc line="213">
                Returns the source region to be used.  The returned value is
                  that set by the most recent call to
                  &lt;code&gt;setSourceRegion&lt;/code&gt;, and will be &lt;code&gt;null&lt;/code&gt; if
                  there is no region set.                
                <return>
                    the source region of interest as a
                      <code>Rectangle</code>, or <code>null</code>.                    
                </return>
                <see>
                    #setSourceRegion                    
                </see>
            </javadoc>
            <method name="getSourceRegion" type="Rectangle" line="224">
                <scope line="225"/>
            </method>
            <javadoc line="231">
                Specifies a decimation subsampling to apply on I/O.  The
                  &lt;code&gt;sourceXSubsampling&lt;/code&gt; and
                  &lt;code&gt;sourceYSubsampling&lt;/code&gt; parameters specify the
                  subsampling period (&lt;i&gt;i.e.&lt;/i&gt;, the number of rows and columns
                  to advance after every source pixel).  Specifically, a period of
                  1 will use every row or column; a period of 2 will use every
                  other row or column.  The &lt;code&gt;subsamplingXOffset&lt;/code&gt; and
                  &lt;code&gt;subsamplingYOffset&lt;/code&gt; parameters specify an offset
                  from the region (or image) origin for the first subsampled pixel.
                  Adjusting the origin of the subsample grid is useful for avoiding
                  seams when subsampling a very large source image into destination
                  regions that will be assembled into a complete subsampled image.
                  Most users will want to simply leave these parameters at 0.
                  &lt;p&gt; The number of pixels and scanlines to be used are calculated
                  as follows.
                  &lt;p&gt;
                  The number of subsampled pixels in a scanline is given by
                  &lt;p&gt;
                  &lt;code&gt;truncate[(width - subsamplingXOffset + sourceXSubsampling - 1)
                  / sourceXSubsampling]&lt;/code&gt;.
                  &lt;p&gt;
                  If the region is such that this width is zero, an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  The number of scanlines to be used can be computed similarly.
                  &lt;p&gt;The ability to set the subsampling grid to start somewhere
                  other than the source region origin is useful if the
                  region is being used to create subsampled tiles of a large image,
                  where the tile width and height are not multiples of the
                  subsampling periods.  If the subsampling grid does not remain
                  consistent from tile to tile, there will be artifacts at the tile
                  boundaries.  By adjusting the subsampling grid offset for each
                  tile to compensate, these artifacts can be avoided.  The tradeoff
                  is that in order to avoid these artifacts, the tiles are not all
                  the same size.  The grid offset to use in this case is given by:
                  &lt;br&gt;
                  grid offset = [period - (region offset modulo period)] modulo period)
                  &lt;p&gt; If either &lt;code&gt;sourceXSubsampling&lt;/code&gt; or
                  &lt;code&gt;sourceYSubsampling&lt;/code&gt; is 0 or negative, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown.
                  &lt;p&gt; If either &lt;code&gt;subsamplingXOffset&lt;/code&gt; or
                  &lt;code&gt;subsamplingYOffset&lt;/code&gt; is negative or greater than or
                  equal to the corresponding period, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown.
                  &lt;p&gt; There is no &lt;code&gt;unsetSourceSubsampling&lt;/code&gt; method;
                  simply call &lt;code&gt;setSourceSubsampling(1, 1, 0, 0)&lt;/code&gt; to
                  restore default values.                
                <param>
                    sourceXSubsampling the number of columns to advance
                      between pixels.                    
                </param>
                <param>
                    sourceYSubsampling the number of rows to advance between
                      pixels.                    
                </param>
                <param>
                    subsamplingXOffset the horizontal offset of the first subsample
                      within the region, or within the image if no region is set.                    
                </param>
                <param>
                    subsamplingYOffset the horizontal offset of the first subsample
                      within the region, or within the image if no region is set.                    
                </param>
                <exception>
                    IllegalArgumentException if either period is
                      negative or 0, or if either grid offset is negative or greater than
                      the corresponding period.                    
                </exception>
                <exception>
                    IllegalStateException if the source region is such that
                      the subsampled output would contain no pixels.                    
                </exception>
            </javadoc>
            <method name="setSourceSubsampling" type="void" line="302">
                <params>
                    <param name="sourceXSubsampling" type="int"/>
                    <param name="sourceYSubsampling" type="int"/>
                    <param name="subsamplingXOffset" type="int"/>
                    <param name="subsamplingYOffset" type="int"/>
                </params>
                <comment line="320">
                    Throw an IllegalStateException if region falls between subsamples                    
                </comment>
                <scope line="303"/>
                <scope line="306"/>
                <scope line="310"/>
                <scope line="315"/>
                <scope line="321">
                    <scope line="323"/>
                </scope>
            </method>
            <javadoc line="334">
                Returns the number of source columns to advance for each pixel.
                  &lt;p&gt;If &lt;code&gt;setSourceSubsampling&lt;/code&gt; has not been called, 1
                  is returned (which is the correct value).                
                <return>
                    the source subsampling X period.                    
                </return>
                <see>
                    #setSourceSubsampling                    
                </see>
                <see>
                    #getSourceYSubsampling                    
                </see>
            </javadoc>
            <method name="getSourceXSubsampling" type="int" line="345"/>
            <javadoc line="349">
                Returns the number of rows to advance for each pixel.
                  &lt;p&gt;If &lt;code&gt;setSourceSubsampling&lt;/code&gt; has not been called, 1
                  is returned (which is the correct value).                
                <return>
                    the source subsampling Y period.                    
                </return>
                <see>
                    #setSourceSubsampling                    
                </see>
                <see>
                    #getSourceXSubsampling                    
                </see>
            </javadoc>
            <method name="getSourceYSubsampling" type="int" line="360"/>
            <javadoc line="364">
                Returns the horizontal offset of the subsampling grid.
                  &lt;p&gt;If &lt;code&gt;setSourceSubsampling&lt;/code&gt; has not been called, 0
                  is returned (which is the correct value).                
                <return>
                    the source subsampling grid X offset.                    
                </return>
                <see>
                    #setSourceSubsampling                    
                </see>
                <see>
                    #getSubsamplingYOffset                    
                </see>
            </javadoc>
            <method name="getSubsamplingXOffset" type="int" line="375"/>
            <javadoc line="379">
                Returns the vertical offset of the subsampling grid.
                  &lt;p&gt;If &lt;code&gt;setSourceSubsampling&lt;/code&gt; has not been called, 0
                  is returned (which is the correct value).                
                <return>
                    the source subsampling grid Y offset.                    
                </return>
                <see>
                    #setSourceSubsampling                    
                </see>
                <see>
                    #getSubsamplingXOffset                    
                </see>
            </javadoc>
            <method name="getSubsamplingYOffset" type="int" line="390"/>
            <javadoc line="394">
                Sets the indices of the source bands to be used.  Duplicate
                  indices are not allowed.
                  &lt;p&gt; A &lt;code&gt;null&lt;/code&gt; value indicates that all source bands
                  will be used.
                  &lt;p&gt; At the time of reading, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown by the
                  reader or writer if a value larger than the largest available
                  source band index has been specified or if the number of source
                  bands and destination bands to be used differ.  The
                  &lt;code&gt;ImageReader.checkReadParamBandSettings&lt;/code&gt; method may
                  be used to automate this test.
                  &lt;p&gt; Semantically, a copy is made of the array; changes to the
                  array contents subsequent to this call have no effect on
                  this &lt;code&gt;IIOParam&lt;/code&gt;.                
                <param>
                    sourceBands an array of integer band indices to be
                      used.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>sourceBands</code>
                      contains a negative or duplicate value.                    
                </exception>
                <see>
                    #getSourceBands                    
                </see>
                <see>
                    ImageReadParam#setDestinationBands                    
                </see>
                <see>
                    ImageReader#checkReadParamBandSettings                    
                </see>
            </javadoc>
            <method name="setSourceBands" type="void" line="423">
                <params>
                    <param name="sourceBands" type="int[]"/>
                </params>
                <scope line="424"/>
                <scope line="426">
                    <declaration name="numBands" type="int" line="427"/>
                    <scope line="428">
                        <declaration name="band" type="int" line="429"/>
                        <scope line="430"/>
                        <scope line="433">
                            <scope line="434"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="444">
                Returns the set of of source bands to be used. The returned
                  value is that set by the most recent call to
                  &lt;code&gt;setSourceBands&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if there have
                  been no calls to &lt;code&gt;setSourceBands&lt;/code&gt;.
                  &lt;p&gt; Semantically, the array returned is a copy; changes to
                  array contents subsequent to this call have no effect on this
                  &lt;code&gt;IIOParam&lt;/code&gt;.                
                <return>
                    the set of source bands to be used, or
                      <code>null</code>.                    
                </return>
                <see>
                    #setSourceBands                    
                </see>
            </javadoc>
            <method name="getSourceBands" type="int[]" line="459">
                <scope line="460"/>
            </method>
            <javadoc line="466">
                Sets the desired image type for the destination image, using an
                  &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;.
                  &lt;p&gt; When reading, if the layout of the destination has been set
                  using this method, each call to an &lt;code&gt;ImageReader&lt;/code&gt;
                  &lt;code&gt;read&lt;/code&gt; method will return a new
                  &lt;code&gt;BufferedImage&lt;/code&gt; using the format specified by the
                  supplied type specifier.  As a side effect, any destination
                  &lt;code&gt;BufferedImage&lt;/code&gt; set by
                  &lt;code&gt;ImageReadParam.setDestination(BufferedImage)&lt;/code&gt; will
                  no longer be set as the destination.  In other words, this
                  method may be thought of as calling
                  &lt;code&gt;setDestination((BufferedImage)null)&lt;/code&gt;.
                  &lt;p&gt; When writing, the destination type maybe used to determine
                  the color type of the image.  The &lt;code&gt;SampleModel&lt;/code&gt;
                  information will be ignored, and may be &lt;code&gt;null&lt;/code&gt;.  For
                  example, a 4-banded image could represent either CMYK or RGBA
                  data.  If a destination type is set, its
                  &lt;code&gt;ColorModel&lt;/code&gt; will override any
                  &lt;code&gt;ColorModel&lt;/code&gt; on the image itself.  This is crucial
                  when &lt;code&gt;setSourceBands&lt;/code&gt; is used since the image&apos;s
                  &lt;code&gt;ColorModel&lt;/code&gt; will refer to the entire image rather
                  than to the subset of bands being written.                
                <param>
                    destinationType the <code>ImageTypeSpecifier</code> to
                      be used to determine the destination layout and color type.                    
                </param>
                <see>
                    #getDestinationType                    
                </see>
            </javadoc>
            <method name="setDestinationType" type="void" line="497">
                <params>
                    <param name="destinationType" type="ImageTypeSpecifier"/>
                </params>
            </method>
            <javadoc line="501">
                Returns the type of image to be returned by the read, if one
                  was set by a call to
                  &lt;code&gt;setDestination(ImageTypeSpecifier)&lt;/code&gt;, as an
                  &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;.  If none was set,
                  &lt;code&gt;null&lt;/code&gt; is returned.                
                <return>
                    an <code>ImageTypeSpecifier</code> describing the
                      destination type, or <code>null</code>.                    
                </return>
                <see>
                    #setDestinationType                    
                </see>
            </javadoc>
            <method name="getDestinationType" type="ImageTypeSpecifier" line="513"/>
            <javadoc line="517">
                Specifies the offset in the destination image at which future
                  decoded pixels are to be placed, when reading, or where a
                  region will be written, when writing.
                  &lt;p&gt; When reading, the region to be written within the
                  destination &lt;code&gt;BufferedImage&lt;/code&gt; will start at this
                  offset and have a width and height determined by the source
                  region of interest, the subsampling parameters, and the
                  destination bounds.
                  &lt;p&gt; Normal writes are not affected by this method, only writes
                  performed using &lt;code&gt;ImageWriter.replacePixels&lt;/code&gt;.  For
                  such writes, the offset specified is within the output stream
                  image whose pixels are being modified.
                  &lt;p&gt; There is no &lt;code&gt;unsetDestinationOffset&lt;/code&gt; method;
                  simply call &lt;code&gt;setDestinationOffset(new Point(0, 0))&lt;/code&gt; to
                  restore default values.                
                <param>
                    destinationOffset the offset in the destination, as a
                      <code>Point</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if
                      <code>destinationOffset</code> is <code>null</code>.                    
                </exception>
                <see>
                    #getDestinationOffset                    
                </see>
                <see>
                    ImageWriter#replacePixels                    
                </see>
            </javadoc>
            <method name="setDestinationOffset" type="void" line="546">
                <params>
                    <param name="destinationOffset" type="Point"/>
                </params>
                <scope line="547"/>
            </method>
            <javadoc line="553">
                Returns the offset in the destination image at which pixels are
                  to be placed.
                  &lt;p&gt; If &lt;code&gt;setDestinationOffsets&lt;/code&gt; has not been called,
                  a &lt;code&gt;Point&lt;/code&gt; with zero X and Y values is returned
                  (which is the correct value).                
                <return>
                    the destination offset as a <code>Point</code>.                    
                </return>
                <see>
                    #setDestinationOffset                    
                </see>
            </javadoc>
            <method name="getDestinationOffset" type="Point" line="565"/>
            <javadoc line="569">
                Sets the &lt;code&gt;IIOParamController&lt;/code&gt; to be used
                  to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt;
                  object when the &lt;code&gt;activateController&lt;/code&gt; method
                  is called, overriding any default controller.  If the
                  argument is &lt;code&gt;null&lt;/code&gt;, no controller will be
                  used, including any default.  To restore the default, use
                  &lt;code&gt;setController(getDefaultController())&lt;/code&gt;.                
                <param>
                    controller An appropriate
                      <code>IIOParamController</code>, or <code>null</code>.                    
                </param>
                <see>
                    IIOParamController                    
                </see>
                <see>
                    #getController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #hasController                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <method name="setController" type="void" line="587">
                <params>
                    <param name="controller" type="IIOParamController"/>
                </params>
            </method>
            <javadoc line="591">
                Returns whatever &lt;code&gt;IIOParamController&lt;/code&gt; is currently
                  installed.  This could be the default if there is one,
                  &lt;code&gt;null&lt;/code&gt;, or the argument of the most recent call
                  to &lt;code&gt;setController&lt;/code&gt;.                
                <return>
                    the currently installed
                      <code>IIOParamController</code>, or <code>null</code>.                    
                </return>
                <see>
                    IIOParamController                    
                </see>
                <see>
                    #setController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #hasController                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <method name="getController" type="IIOParamController" line="606"/>
            <javadoc line="610">
                Returns the default &lt;code&gt;IIOParamController&lt;/code&gt;, if there
                  is one, regardless of the currently installed controller.  If
                  there is no default controller, returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the default <code>IIOParamController</code>, or
                      <code>null</code>.                    
                </return>
                <see>
                    IIOParamController                    
                </see>
                <see>
                    #setController(IIOParamController)                    
                </see>
                <see>
                    #getController                    
                </see>
                <see>
                    #hasController                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <method name="getDefaultController" type="IIOParamController" line="624"/>
            <javadoc line="628">
                Returns &lt;code&gt;true&lt;/code&gt; if there is a controller installed
                  for this &lt;code&gt;IIOParam&lt;/code&gt; object.  This will return
                  &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;getController&lt;/code&gt; would not
                  return &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    <code>true</code> if a controller is installed.                    
                </return>
                <see>
                    IIOParamController                    
                </see>
                <see>
                    #setController(IIOParamController)                    
                </see>
                <see>
                    #getController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <method name="hasController" type="boolean" line="642"/>
            <javadoc line="646">
                Activates the installed &lt;code&gt;IIOParamController&lt;/code&gt; for
                  this &lt;code&gt;IIOParam&lt;/code&gt; object and returns the resulting
                  value.  When this method returns &lt;code&gt;true&lt;/code&gt;, all values
                  for this &lt;code&gt;IIOParam&lt;/code&gt; object will be ready for the
                  next read or write operation.  If &lt;code&gt;false&lt;/code&gt; is
                  returned, no settings in this object will have been disturbed
                  (&lt;i&gt;i.e.&lt;/i&gt;, the user canceled the operation).
                  &lt;p&gt; Ordinarily, the controller will be a GUI providing a user
                  interface for a subclass of &lt;code&gt;IIOParam&lt;/code&gt; for a
                  particular plug-in.  Controllers need not be GUIs, however.                
                <return>
                    <code>true</code> if the controller completed normally.                    
                </return>
                <exception>
                    IllegalStateException if there is no controller
                      currently installed.                    
                </exception>
                <see>
                    IIOParamController                    
                </see>
                <see>
                    #setController(IIOParamController)                    
                </see>
                <see>
                    #getController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #hasController                    
                </see>
            </javadoc>
            <method name="activateController" type="boolean" line="670">
                <scope line="671"/>
            </method>
        </class>
    </source>