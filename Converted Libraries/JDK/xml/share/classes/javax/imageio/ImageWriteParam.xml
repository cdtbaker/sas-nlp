<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio">
        <import package="java.awt.Dimension"/>
        <import package="java.util.Locale"/>
        <class name="ImageWriteParam" line="4">
            <extends class="IIOParam"/>
            <javadoc line="4">
                A class describing how a stream is to be encoded.  Instances of
                  this class or its subclasses are used to supply prescriptive
                  &quot;how-to&quot; information to instances of &lt;code&gt;ImageWriter&lt;/code&gt;.
                  &lt;p&gt; A plug-in for a specific image format may define a subclass of
                  this class, and return objects of that class from the
                  &lt;code&gt;getDefaultWriteParam&lt;/code&gt; method of its
                  &lt;code&gt;ImageWriter&lt;/code&gt; implementation.  For example, the built-in
                  JPEG writer plug-in will return instances of
                  &lt;code&gt;javax.imageio.plugins.jpeg.JPEGImageWriteParam&lt;/code&gt;.
                  &lt;p&gt; The region of the image to be written is determined by first
                  intersecting the actual bounds of the image with the rectangle
                  specified by &lt;code&gt;IIOParam.setSourceRegion&lt;/code&gt;, if any.  If the
                  resulting rectangle has a width or height of zero, the writer will
                  throw an &lt;code&gt;IIOException&lt;/code&gt;. If the intersection is
                  non-empty, writing will commence with the first subsampled pixel
                  and include additional pixels within the intersected bounds
                  according to the horizontal and vertical subsampling factors
                  specified by {@link IIOParam#setSourceSubsampling&lt;code&gt;IIOParam.setSourceSubsampling&lt;/code&gt;}.
                  &lt;p&gt; Individual features such as tiling, progressive encoding, and
                  compression may be set in one of four modes.
                  &lt;code&gt;MODE_DISABLED&lt;/code&gt; disables the features;
                  &lt;code&gt;MODE_DEFAULT&lt;/code&gt; enables the feature with
                  writer-controlled parameter values; &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;
                  enables the feature and allows the use of a &lt;code&gt;set&lt;/code&gt; method
                  to provide additional parameters; and
                  &lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt; copies relevant parameter
                  values from the stream and image metadata objects passed to the
                  writer.  The default for all features is
                  &lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt;.  Non-standard features
                  supplied in subclasses are encouraged, but not required to use a
                  similar scheme.
                  &lt;p&gt; Plug-in writers may extend the functionality of
                  &lt;code&gt;ImageWriteParam&lt;/code&gt; by providing a subclass that implements
                  additional, plug-in specific interfaces.  It is up to the plug-in
                  to document what interfaces are available and how they are to be
                  used.  Writers will silently ignore any extended features of an
                  &lt;code&gt;ImageWriteParam&lt;/code&gt; subclass of which they are not aware.
                  Also, they may ignore any optional features that they normally
                  disable when creating their own &lt;code&gt;ImageWriteParam&lt;/code&gt;
                  instances via &lt;code&gt;getDefaultWriteParam&lt;/code&gt;.
                  &lt;p&gt; Note that unless a query method exists for a capability, it must
                  be supported by all &lt;code&gt;ImageWriter&lt;/code&gt; implementations
                  (&lt;i&gt;e.g.&lt;/i&gt; progressive encoding is optional, but subsampling must be
                  supported).                
                <see>
                    ImageReadParam                    
                </see>
            </javadoc>
            <declaration name="MODE_DISABLED" type="int" line="52"/>
            <javadoc line="52">
                A constant value that may be passed into methods such as
                  &lt;code&gt;setTilingMode&lt;/code&gt;, &lt;code&gt;setProgressiveMode&lt;/code&gt;,
                  and &lt;code&gt;setCompressionMode&lt;/code&gt; to disable a feature for
                  future writes.  That is, when this mode is set the stream will
                  &lt;b&gt;not&lt;/b&gt; be tiled, progressive, or compressed, and the
                  relevant accessor methods will throw an
                  &lt;code&gt;IllegalStateException&lt;/code&gt;.                
                <see>
                    #MODE_EXPLICIT                    
                </see>
                <see>
                    #MODE_COPY_FROM_METADATA                    
                </see>
                <see>
                    #MODE_DEFAULT                    
                </see>
                <see>
                    #setProgressiveMode                    
                </see>
                <see>
                    #getProgressiveMode                    
                </see>
                <see>
                    #setTilingMode                    
                </see>
                <see>
                    #getTilingMode                    
                </see>
                <see>
                    #setCompressionMode                    
                </see>
                <see>
                    #getCompressionMode                    
                </see>
            </javadoc>
            <declaration name="MODE_DEFAULT" type="int" line="71"/>
            <javadoc line="71">
                A constant value that may be passed into methods such as
                  &lt;code&gt;setTilingMode&lt;/code&gt;,
                  &lt;code&gt;setProgressiveMode&lt;/code&gt;, and
                  &lt;code&gt;setCompressionMode&lt;/code&gt; to enable that feature for
                  future writes.  That is, when this mode is enabled the stream
                  will be tiled, progressive, or compressed according to a
                  sensible default chosen internally by the writer in a plug-in
                  dependent way, and the relevant accessor methods will
                  throw an &lt;code&gt;IllegalStateException&lt;/code&gt;.                
                <see>
                    #MODE_DISABLED                    
                </see>
                <see>
                    #MODE_EXPLICIT                    
                </see>
                <see>
                    #MODE_COPY_FROM_METADATA                    
                </see>
                <see>
                    #setProgressiveMode                    
                </see>
                <see>
                    #getProgressiveMode                    
                </see>
                <see>
                    #setTilingMode                    
                </see>
                <see>
                    #getTilingMode                    
                </see>
                <see>
                    #setCompressionMode                    
                </see>
                <see>
                    #getCompressionMode                    
                </see>
            </javadoc>
            <declaration name="MODE_EXPLICIT" type="int" line="92"/>
            <javadoc line="92">
                A constant value that may be passed into methods such as
                  &lt;code&gt;setTilingMode&lt;/code&gt; or &lt;code&gt;setCompressionMode&lt;/code&gt;
                  to enable a feature for future writes. That is, when this mode
                  is set the stream will be tiled or compressed according to
                  additional information supplied to the corresponding
                  &lt;code&gt;set&lt;/code&gt; methods in this class and retrievable from the
                  corresponding &lt;code&gt;get&lt;/code&gt; methods.  Note that this mode is
                  not supported for progressive output.                
                <see>
                    #MODE_DISABLED                    
                </see>
                <see>
                    #MODE_COPY_FROM_METADATA                    
                </see>
                <see>
                    #MODE_DEFAULT                    
                </see>
                <see>
                    #setProgressiveMode                    
                </see>
                <see>
                    #getProgressiveMode                    
                </see>
                <see>
                    #setTilingMode                    
                </see>
                <see>
                    #getTilingMode                    
                </see>
                <see>
                    #setCompressionMode                    
                </see>
                <see>
                    #getCompressionMode                    
                </see>
            </javadoc>
            <declaration name="MODE_COPY_FROM_METADATA" type="int" line="112"/>
            <javadoc line="112">
                A constant value that may be passed into methods such as
                  &lt;code&gt;setTilingMode&lt;/code&gt;, &lt;code&gt;setProgressiveMode&lt;/code&gt;, or
                  &lt;code&gt;setCompressionMode&lt;/code&gt; to enable that feature for
                  future writes.  That is, when this mode is enabled the stream
                  will be tiled, progressive, or compressed based on the contents
                  of stream and/or image metadata passed into the write
                  operation, and any relevant accessor methods will throw an
                  &lt;code&gt;IllegalStateException&lt;/code&gt;.
                  &lt;p&gt; This is the default mode for all features, so that a read
                  including metadata followed by a write including metadata will
                  preserve as much information as possible.                
                <see>
                    #MODE_DISABLED                    
                </see>
                <see>
                    #MODE_EXPLICIT                    
                </see>
                <see>
                    #MODE_DEFAULT                    
                </see>
                <see>
                    #setProgressiveMode                    
                </see>
                <see>
                    #getProgressiveMode                    
                </see>
                <see>
                    #setTilingMode                    
                </see>
                <see>
                    #getTilingMode                    
                </see>
                <see>
                    #setCompressionMode                    
                </see>
                <see>
                    #getCompressionMode                    
                </see>
            </javadoc>
            <declaration name="MAX_MODE" type="int" line="135"/>
            <declaration name="canWriteTiles" type="boolean" line="136"/>
            <javadoc line="136">
                A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this
                  &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tile width and tile height
                  parameters to be set.  By default, the value is
                  &lt;code&gt;false&lt;/code&gt;.  Subclasses must set the value manually.
                  &lt;p&gt; Subclasses that do not support writing tiles should ensure
                  that this value is set to &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <declaration name="tilingMode" type="int" line="145"/>
            <javadoc line="145">
                The mode controlling tiling settings, which Must be
                  set to one of the four &lt;code&gt;MODE_&lt;/code&gt; values.  The default
                  is &lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt;.
                  &lt;p&gt; Subclasses that do not writing tiles may ignore this value.                
                <see>
                    #MODE_DISABLED                    
                </see>
                <see>
                    #MODE_EXPLICIT                    
                </see>
                <see>
                    #MODE_COPY_FROM_METADATA                    
                </see>
                <see>
                    #MODE_DEFAULT                    
                </see>
                <see>
                    #setTilingMode                    
                </see>
                <see>
                    #getTilingMode                    
                </see>
            </javadoc>
            <declaration name="preferredTileSizes" type="Dimension[]" line="158"/>
            <javadoc line="158">
                An array of preferred tile size range pairs.  The default value
                  is &lt;code&gt;null&lt;/code&gt;, which indicates that there are no
                  preferred sizes.  If the value is non-&lt;code&gt;null&lt;/code&gt;, it
                  must have an even length of at least two.
                  &lt;p&gt; Subclasses that do not support writing tiles may ignore
                  this value.                
                <see>
                    #getPreferredTileSizes                    
                </see>
            </javadoc>
            <declaration name="tilingSet" type="boolean" line="168"/>
            <javadoc line="168">
                A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if tiling
                  parameters have been specified.
                  &lt;p&gt; Subclasses that do not support writing tiles may ignore
                  this value.                
            </javadoc>
            <declaration name="tileWidth" type="int" line="175"/>
            <javadoc line="175">
                The width of each tile if tiling has been set, or 0 otherwise.
                  &lt;p&gt; Subclasses that do not support tiling may ignore this
                  value.                
            </javadoc>
            <declaration name="tileHeight" type="int" line="181"/>
            <javadoc line="181">
                The height of each tile if tiling has been set, or 0 otherwise.
                  The initial value is &lt;code&gt;0&lt;/code&gt;.
                  &lt;p&gt; Subclasses that do not support tiling may ignore this
                  value.                
            </javadoc>
            <declaration name="canOffsetTiles" type="boolean" line="188"/>
            <javadoc line="188">
                A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this
                  &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tiling grid offset
                  parameters to be set.  By default, the value is
                  &lt;code&gt;false&lt;/code&gt;.  Subclasses must set the value manually.
                  &lt;p&gt; Subclasses that do not support writing tiles, or that
                  supprt writing but not offsetting tiles must ensure that this
                  value is set to &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <declaration name="tileGridXOffset" type="int" line="198"/>
            <javadoc line="198">
                The amount by which the tile grid origin should be offset
                  horizontally from the image origin if tiling has been set,
                  or 0 otherwise.  The initial value is &lt;code&gt;0&lt;/code&gt;.
                  &lt;p&gt; Subclasses that do not support offsetting tiles may ignore
                  this value.                
            </javadoc>
            <declaration name="tileGridYOffset" type="int" line="206"/>
            <javadoc line="206">
                The amount by which the tile grid origin should be offset
                  vertically from the image origin if tiling has been set,
                  or 0 otherwise.  The initial value is &lt;code&gt;0&lt;/code&gt;.
                  &lt;p&gt; Subclasses that do not support offsetting tiles may ignore
                  this value.                
            </javadoc>
            <declaration name="canWriteProgressive" type="boolean" line="214"/>
            <javadoc line="214">
                A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this
                  &lt;code&gt;ImageWriteParam&lt;/code&gt; allows images to be written as a
                  progressive sequence of increasing quality passes.  By default,
                  the value is &lt;code&gt;false&lt;/code&gt;.  Subclasses must set the value
                  manually.
                  &lt;p&gt; Subclasses that do not support progressive encoding must
                  ensure that this value is set to &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <declaration name="progressiveMode" type="int" line="224"/>
            <javadoc line="224">
                The mode controlling progressive encoding, which must be set to
                  one of the four &lt;code&gt;MODE_&lt;/code&gt; values, except
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  The default is
                  &lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt;.
                  &lt;p&gt; Subclasses that do not support progressive encoding may
                  ignore this value.                
                <see>
                    #MODE_DISABLED                    
                </see>
                <see>
                    #MODE_EXPLICIT                    
                </see>
                <see>
                    #MODE_COPY_FROM_METADATA                    
                </see>
                <see>
                    #MODE_DEFAULT                    
                </see>
                <see>
                    #setProgressiveMode                    
                </see>
                <see>
                    #getProgressiveMode                    
                </see>
            </javadoc>
            <declaration name="canWriteCompressed" type="boolean" line="239"/>
            <javadoc line="239">
                A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this writer
                  can write images using compression. By default, the value is
                  &lt;code&gt;false&lt;/code&gt;.  Subclasses must set the value manually.
                  &lt;p&gt; Subclasses that do not support compression must ensure that
                  this value is set to &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <declaration name="compressionMode" type="int" line="247"/>
            <javadoc line="247">
                The mode controlling compression settings, which must be set to
                  one of the four &lt;code&gt;MODE_&lt;/code&gt; values.  The default is
                  &lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt;.
                  &lt;p&gt; Subclasses that do not support compression may ignore this
                  value.                
                <see>
                    #MODE_DISABLED                    
                </see>
                <see>
                    #MODE_EXPLICIT                    
                </see>
                <see>
                    #MODE_COPY_FROM_METADATA                    
                </see>
                <see>
                    #MODE_DEFAULT                    
                </see>
                <see>
                    #setCompressionMode                    
                </see>
                <see>
                    #getCompressionMode                    
                </see>
            </javadoc>
            <declaration name="compressionTypes" type="String[]" line="261"/>
            <javadoc line="261">
                An array of &lt;code&gt;String&lt;/code&gt;s containing the names of the
                  available compression types.  Subclasses must set the value
                  manually.
                  &lt;p&gt; Subclasses that do not support compression may ignore this
                  value.                
            </javadoc>
            <declaration name="compressionType" type="String" line="269"/>
            <javadoc line="269">
                A &lt;code&gt;String&lt;/code&gt; containing the name of the current
                  compression type, or &lt;code&gt;null&lt;/code&gt; if none is set.
                  &lt;p&gt; Subclasses that do not support compression may ignore this
                  value.                
            </javadoc>
            <declaration name="compressionQuality" type="float" line="276"/>
            <javadoc line="276">
                A &lt;code&gt;float&lt;/code&gt; containing the current compression quality
                  setting.  The initial value is &lt;code&gt;1.0F&lt;/code&gt;.
                  &lt;p&gt; Subclasses that do not support compression may ignore this
                  value.                
            </javadoc>
            <declaration name="locale" type="Locale" line="283"/>
            <javadoc line="283">
                A &lt;code&gt;Locale&lt;/code&gt; to be used to localize compression type
                  names and quality descriptions, or &lt;code&gt;null&lt;/code&gt; to use a
                  default &lt;code&gt;Locale&lt;/code&gt;.  Subclasses must set the value
                  manually.                
            </javadoc>
            <javadoc line="290">
                Constructs an empty &lt;code&gt;ImageWriteParam&lt;/code&gt;.  It is up to
                  the subclass to set up the instance variables properly.                
            </javadoc>
            <method name="ImageWriteParam" type="constructor" line="294"/>
            <javadoc line="296">
                Constructs an &lt;code&gt;ImageWriteParam&lt;/code&gt; set to use a
                  given &lt;code&gt;Locale&lt;/code&gt;.                
                <param>
                    locale a &lt;code&gt;Locale&lt;/code&gt; to be used to localize
                      compression type names and quality descriptions, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="ImageWriteParam" type="constructor" line="303">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="clonePreferredTileSizes" type="Dimension[]" line="306">
                <params>
                    <param name="sizes" type="Dimension[]"/>
                </params>
                <scope line="307"/>
                <declaration name="temp" type="Dimension[]" line="310"/>
                <scope line="311"/>
            </method>
            <javadoc line="316">
                Returns the currently set &lt;code&gt;Locale&lt;/code&gt;, or
                  &lt;code&gt;null&lt;/code&gt; if only a default &lt;code&gt;Locale&lt;/code&gt; is
                  supported.                
                <return>
                    the current &lt;code&gt;Locale&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getLocale" type="Locale" line="322"/>
            <javadoc line="325">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer can perform tiling
                  while writing.  If this method returns &lt;code&gt;false&lt;/code&gt;, then
                  &lt;code&gt;setTiling&lt;/code&gt; will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the writer supports tiling.                    
                </return>
                <see>
                    #canOffsetTiles()                    
                </see>
                <see>
                    #setTiling(int,int,int,int)                    
                </see>
            </javadoc>
            <method name="canWriteTiles" type="boolean" line="334"/>
            <javadoc line="337">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer can perform tiling with
                  non-zero grid offsets while writing.  If this method returns
                  &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;setTiling&lt;/code&gt; will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if the grid offset
                  arguments are not both zero.  If &lt;code&gt;canWriteTiles&lt;/code&gt;
                  returns &lt;code&gt;false&lt;/code&gt;, this method will return
                  &lt;code&gt;false&lt;/code&gt; as well.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the writer supports non-zero tile
                      offsets.                    
                </return>
                <see>
                    #canWriteTiles()                    
                </see>
                <see>
                    #setTiling(int,int,int,int)                    
                </see>
            </javadoc>
            <method name="canOffsetTiles" type="boolean" line="350"/>
            <javadoc line="353">
                Determines whether the image will be tiled in the output
                  stream and, if it will, how the tiling parameters will be
                  determined.  The modes are interpreted as follows:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;MODE_DISABLED&lt;/code&gt; - The image will not be tiled.
                  &lt;code&gt;setTiling&lt;/code&gt; will throw an
                  &lt;code&gt;IllegalStateException&lt;/code&gt;.
                  &lt;li&gt;&lt;code&gt;MODE_DEFAULT&lt;/code&gt; - The image will be tiled using
                  default parameters.  &lt;code&gt;setTiling&lt;/code&gt; will throw an
                  &lt;code&gt;IllegalStateException&lt;/code&gt;.
                  &lt;li&gt;&lt;code&gt;MODE_EXPLICIT&lt;/code&gt; - The image will be tiled
                  according to parameters given in the {@link #setTiling&lt;code&gt;setTiling&lt;/code&gt;} method.  Any previously set tiling
                  parameters are discarded.
                  &lt;li&gt;&lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt; - The image will
                  conform to the metadata object passed in to a write.
                  &lt;code&gt;setTiling&lt;/code&gt; will throw an
                  &lt;code&gt;IllegalStateException&lt;/code&gt;.
                  &lt;/ul&gt;                
                <param>
                    mode The mode to use for tiling.                    
                </param>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canWriteTiles&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;mode&lt;/code&gt; is not
                      one of the modes listed above.                    
                </exception>
                <see>
                    #setTiling                    
                </see>
                <see>
                    #getTilingMode                    
                </see>
            </javadoc>
            <method name="setTilingMode" type="void" line="380">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <scope line="381"/>
                <scope line="384"/>
                <scope line="388"/>
            </method>
            <javadoc line="392">
                Returns the current tiling mode, if tiling is supported.
                  Otherwise throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <return>
                    the current tiling mode.                    
                </return>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canWriteTiles&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <see>
                    #setTilingMode                    
                </see>
            </javadoc>
            <method name="getTilingMode" type="int" line="400">
                <scope line="401"/>
            </method>
            <javadoc line="406">
                Returns an array of &lt;code&gt;Dimension&lt;/code&gt;s indicating the
                  legal size ranges for tiles as they will be encoded in the
                  output file or stream.  The returned array is a copy.
                  &lt;p&gt; The information is returned as a set of pairs; the first
                  element of a pair contains an (inclusive) minimum width and
                  height, and the second element contains an (inclusive) maximum
                  width and height.  Together, each pair defines a valid range of
                  sizes.  To specify a fixed size, use the same width and height
                  for both elements.  To specify an arbitrary range, a value of
                  &lt;code&gt;null&lt;/code&gt; is used in place of an actual array of
                  &lt;code&gt;Dimension&lt;/code&gt;s.
                  &lt;p&gt; If no array is specified on the constructor, but tiling is
                  allowed, then this method returns &lt;code&gt;null&lt;/code&gt;.                
                <exception>
                    UnsupportedOperationException if the plug-in does
                      not support tiling.                    
                </exception>
                <return>
                    an array of &lt;code&gt;Dimension&lt;/code&gt;s with an even length
                      of at least two, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPreferredTileSizes" type="Dimension[]" line="425">
                <scope line="426"/>
            </method>
            <javadoc line="431">
                Specifies that the image should be tiled in the output stream.
                  The &lt;code&gt;tileWidth&lt;/code&gt; and &lt;code&gt;tileHeight&lt;/code&gt;
                  parameters specify the width and height of the tiles in the
                  file.  If the tile width or height is greater than the width or
                  height of the image, the image is not tiled in that dimension.
                  &lt;p&gt; If &lt;code&gt;canOffsetTiles&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;,
                  then the &lt;code&gt;tileGridXOffset&lt;/code&gt; and
                  &lt;code&gt;tileGridYOffset&lt;/code&gt; parameters must be zero.                
                <param>
                    tileWidth the width of each tile.                    
                </param>
                <param>
                    tileHeight the height of each tile.                    
                </param>
                <param>
                    tileGridXOffset the horizontal offset of the tile grid.                    
                </param>
                <param>
                    tileGridYOffset the vertical offset of the tile grid.                    
                </param>
                <exception>
                    UnsupportedOperationException if the plug-in does not
                      support tiling.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    UnsupportedOperationException if the plug-in does not
                      support grid offsets, and the grid offsets are not both zero.                    
                </exception>
                <exception>
                    IllegalArgumentException if the tile size is not
                      within one of the allowable ranges returned by
                      &lt;code&gt;getPreferredTileSizes&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;tileWidth&lt;/code&gt;
                      or &lt;code&gt;tileHeight&lt;/code&gt; is less than or equal to 0.                    
                </exception>
                <see>
                    #canWriteTiles                    
                </see>
                <see>
                    #canOffsetTiles                    
                </see>
                <see>
                    #getTileWidth()                    
                </see>
                <see>
                    #getTileHeight()                    
                </see>
                <see>
                    #getTileGridXOffset()                    
                </see>
                <see>
                    #getTileGridYOffset()                    
                </see>
            </javadoc>
            <method name="setTiling" type="void" line="462">
                <params>
                    <param name="tileWidth" type="int"/>
                    <param name="tileHeight" type="int"/>
                    <param name="tileGridXOffset" type="int"/>
                    <param name="tileGridYOffset" type="int"/>
                </params>
                <scope line="463"/>
                <scope line="466"/>
                <scope line="469"/>
                <declaration name="tilesOffset" type="boolean" line="472"/>
                <scope line="473"/>
                <scope line="476">
                    <declaration name="ok" type="boolean" line="477"/>
                    <scope line="478">
                        <declaration name="min" type="Dimension" line="479"/>
                        <declaration name="max" type="Dimension" line="480"/>
                        <scope line="481"/>
                    </scope>
                    <scope line="486"/>
                </scope>
            </method>
            <javadoc line="496">
                Removes any previous tile grid parameters specified by calls to
                  &lt;code&gt;setTiling&lt;/code&gt;.
                  &lt;p&gt; The default implementation sets the instance variables
                  &lt;code&gt;tileWidth&lt;/code&gt;, &lt;code&gt;tileHeight&lt;/code&gt;,
                  &lt;code&gt;tileGridXOffset&lt;/code&gt;, and
                  &lt;code&gt;tileGridYOffset&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.                
                <exception>
                    UnsupportedOperationException if the plug-in does not
                      support tiling.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <see>
                    #setTiling(int,int,int,int)                    
                </see>
            </javadoc>
            <method name="unsetTiling" type="void" line="509">
                <scope line="510"/>
                <scope line="513"/>
            </method>
            <javadoc line="522">
                Returns the width of each tile in an image as it will be
                  written to the output stream.  If tiling parameters have not
                  been set, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.                
                <return>
                    the tile width to be used for encoding.                    
                </return>
                <exception>
                    UnsupportedOperationException if the plug-in does not
                      support tiling.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling parameters have
                      not been set.                    
                </exception>
                <see>
                    #setTiling(int,int,int,int)                    
                </see>
                <see>
                    #getTileHeight()                    
                </see>
            </javadoc>
            <method name="getTileWidth" type="int" line="536">
                <scope line="537"/>
                <scope line="540"/>
                <scope line="543"/>
            </method>
            <javadoc line="548">
                Returns the height of each tile in an image as it will be written to
                  the output stream.  If tiling parameters have not
                  been set, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.                
                <return>
                    the tile height to be used for encoding.                    
                </return>
                <exception>
                    UnsupportedOperationException if the plug-in does not
                      support tiling.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling parameters have
                      not been set.                    
                </exception>
                <see>
                    #setTiling(int,int,int,int)                    
                </see>
                <see>
                    #getTileWidth()                    
                </see>
            </javadoc>
            <method name="getTileHeight" type="int" line="562">
                <scope line="563"/>
                <scope line="566"/>
                <scope line="569"/>
            </method>
            <javadoc line="574">
                Returns the horizontal tile grid offset of an image as it will
                  be written to the output stream.  If tiling parameters have not
                  been set, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.                
                <return>
                    the tile grid X offset to be used for encoding.                    
                </return>
                <exception>
                    UnsupportedOperationException if the plug-in does not
                      support tiling.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling parameters have
                      not been set.                    
                </exception>
                <see>
                    #setTiling(int,int,int,int)                    
                </see>
                <see>
                    #getTileGridYOffset()                    
                </see>
            </javadoc>
            <method name="getTileGridXOffset" type="int" line="588">
                <scope line="589"/>
                <scope line="592"/>
                <scope line="595"/>
            </method>
            <javadoc line="600">
                Returns the vertical tile grid offset of an image as it will
                  be written to the output stream.  If tiling parameters have not
                  been set, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.                
                <return>
                    the tile grid Y offset to be used for encoding.                    
                </return>
                <exception>
                    UnsupportedOperationException if the plug-in does not
                      support tiling.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the tiling parameters have
                      not been set.                    
                </exception>
                <see>
                    #setTiling(int,int,int,int)                    
                </see>
                <see>
                    #getTileGridXOffset()                    
                </see>
            </javadoc>
            <method name="getTileGridYOffset" type="int" line="614">
                <scope line="615"/>
                <scope line="618"/>
                <scope line="621"/>
            </method>
            <javadoc line="626">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer can write out images
                  as a series of passes of progressively increasing quality.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the writer supports progressive
                      encoding.                    
                </return>
                <see>
                    #setProgressiveMode                    
                </see>
                <see>
                    #getProgressiveMode                    
                </see>
            </javadoc>
            <method name="canWriteProgressive" type="boolean" line="634"/>
            <javadoc line="637">
                Specifies that the writer is to write the image out in a
                  progressive mode such that the stream will contain a series of
                  scans of increasing quality.  If progressive encoding is not
                  supported, an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will
                  be thrown.
                  &lt;p&gt;  The mode argument determines how
                  the progression parameters are chosen, and must be either
                  &lt;code&gt;MODE_DISABLED&lt;/code&gt;,
                  &lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt;, or
                  &lt;code&gt;MODE_DEFAULT&lt;/code&gt;.  Otherwise an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  &lt;p&gt; The modes are interpreted as follows:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;MODE_DISABLED&lt;/code&gt; - No progression.  Use this to
                  turn off progession.
                  &lt;li&gt;&lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt; - The output image
                  will use whatever progression parameters are found in the
                  metadata objects passed into the writer.
                  &lt;li&gt;&lt;code&gt;MODE_DEFAULT&lt;/code&gt; - The image will be written
                  progressively, with parameters chosen by the writer.
                  &lt;/ul&gt;
                  &lt;p&gt; The default is &lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt;.                
                <param>
                    mode The mode for setting progression in the output
                      stream.                    
                </param>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support progressive encoding.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;mode&lt;/code&gt; is not
                      one of the modes listed above.                    
                </exception>
                <see>
                    #getProgressiveMode                    
                </see>
            </javadoc>
            <method name="setProgressiveMode" type="void" line="668">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <scope line="669"/>
                <scope line="672"/>
                <scope line="675"/>
            </method>
            <javadoc line="680">
                Returns the current mode for writing the stream in a
                  progressive manner.                
                <return>
                    the current mode for progressive encoding.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support progressive encoding.                    
                </exception>
                <see>
                    #setProgressiveMode                    
                </see>
            </javadoc>
            <method name="getProgressiveMode" type="int" line="688">
                <scope line="689"/>
            </method>
            <javadoc line="694">
                Returns &lt;code&gt;true&lt;/code&gt; if this writer supports compression.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the writer supports compression.                    
                </return>
            </javadoc>
            <method name="canWriteCompressed" type="boolean" line="698"/>
            <javadoc line="701">
                Specifies whether compression is to be performed, and if so how
                  compression parameters are to be determined.  The &lt;code&gt;mode&lt;/code&gt;
                  argument must be one of the four modes, interpreted as follows:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;MODE_DISABLED&lt;/code&gt; - If the mode is set to
                  &lt;code&gt;MODE_DISABLED&lt;/code&gt;, methods that query or modify the
                  compression type or parameters will throw an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; (if compression is
                  normally supported by the plug-in). Some writers, such as JPEG,
                  do not normally offer uncompressed output. In this case, attempting
                  to set the mode to &lt;code&gt;MODE_DISABLED&lt;/code&gt; will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; and the mode will not be
                  changed.
                  &lt;li&gt;&lt;code&gt;MODE_EXPLICIT&lt;/code&gt; - Compress using the
                  compression type and quality settings specified in this
                  &lt;code&gt;ImageWriteParam&lt;/code&gt;.  Any previously set compression
                  parameters are discarded.
                  &lt;li&gt;&lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt; - Use whatever
                  compression parameters are specified in metadata objects
                  passed in to the writer.
                  &lt;li&gt;&lt;code&gt;MODE_DEFAULT&lt;/code&gt; - Use default compression
                  parameters.
                  &lt;/ul&gt;
                  &lt;p&gt; The default is &lt;code&gt;MODE_COPY_FROM_METADATA&lt;/code&gt;.                
                <param>
                    mode The mode for setting compression in the output
                      stream.                    
                </param>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression, or does not support the requested mode.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;mode&lt;/code&gt; is not
                      one of the modes listed above.                    
                </exception>
                <see>
                    #getCompressionMode                    
                </see>
            </javadoc>
            <method name="setCompressionMode" type="void" line="734">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <scope line="735"/>
                <scope line="738"/>
                <scope line="742"/>
            </method>
            <javadoc line="746">
                Returns the current compression mode, if compression is
                  supported.                
                <return>
                    the current compression mode.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <see>
                    #setCompressionMode                    
                </see>
            </javadoc>
            <method name="getCompressionMode" type="int" line="754">
                <scope line="755"/>
            </method>
            <javadoc line="760">
                Returns a list of available compression types, as an array or
                  &lt;code&gt;String&lt;/code&gt;s, or &lt;code&gt;null&lt;/code&gt; if a compression
                  type may not be chosen using these interfaces.  The array
                  returned is a copy.
                  &lt;p&gt; If the writer only offers a single, mandatory form of
                  compression, it is not necessary to provide any named
                  compression types.  Named compression types should only be
                  used where the user is able to make a meaningful choice
                  between different schemes.
                  &lt;p&gt; The default implementation checks if compression is
                  supported and throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if not.  Otherwise,
                  it returns a clone of the &lt;code&gt;compressionTypes&lt;/code&gt;
                  instance variable if it is non-&lt;code&gt;null&lt;/code&gt;, or else
                  returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s containing the
                      (non-localized) names of available compression types, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
            </javadoc>
            <method name="getCompressionTypes" type="String[]" line="782">
                <scope line="783"/>
                <scope line="786"/>
            </method>
            <javadoc line="791">
                Sets the compression type to one of the values indicated by
                  &lt;code&gt;getCompressionTypes&lt;/code&gt;.  If a value of
                  &lt;code&gt;null&lt;/code&gt; is passed in, any previous setting is
                  removed.
                  &lt;p&gt; The default implementation checks whether compression is
                  supported and the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, it calls
                  &lt;code&gt;getCompressionTypes&lt;/code&gt; and checks if
                  &lt;code&gt;compressionType&lt;/code&gt; is one of the legal values.  If it
                  is, the &lt;code&gt;compressionType&lt;/code&gt; instance variable is set.
                  If &lt;code&gt;compressionType&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the
                  instance variable is set without performing any checking.                
                <param>
                    compressionType one of the &lt;code&gt;String&lt;/code&gt;s returned
                      by &lt;code&gt;getCompressionTypes&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; to
                      remove any previous setting.                    
                </param>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    UnsupportedOperationException if there are no
                      settable compression types.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;compressionType&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt; but is not
                      one of the values returned by &lt;code&gt;getCompressionTypes&lt;/code&gt;.                    
                </exception>
                <see>
                    #getCompressionTypes                    
                </see>
                <see>
                    #getCompressionType                    
                </see>
                <see>
                    #unsetCompression                    
                </see>
            </javadoc>
            <method name="setCompressionType" type="void" line="820">
                <params>
                    <param name="compressionType" type="String"/>
                </params>
                <scope line="821"/>
                <scope line="824"/>
                <declaration name="legalTypes" type="String[]" line="827"/>
                <scope line="828"/>
                <scope line="831">
                    <declaration name="found" type="boolean" line="832"/>
                    <scope line="833">
                        <scope line="834">
                            <scope line="835"/>
                        </scope>
                    </scope>
                    <scope line="841"/>
                </scope>
            </method>
            <javadoc line="847">
                Returns the currently set compression type, or
                  &lt;code&gt;null&lt;/code&gt; if none has been set.  The type is returned
                  as a &lt;code&gt;String&lt;/code&gt; from among those returned by
                  &lt;code&gt;getCompressionTypes&lt;/code&gt;.
                  If no compression type has been set, &lt;code&gt;null&lt;/code&gt; is
                  returned.
                  &lt;p&gt; The default implementation checks whether compression is
                  supported and the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, it returns the value of the
                  &lt;code&gt;compressionType&lt;/code&gt; instance variable.                
                <return>
                    the current compression type as a &lt;code&gt;String&lt;/code&gt;,
                      or &lt;code&gt;null&lt;/code&gt; if no type is set.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <see>
                    #setCompressionType                    
                </see>
            </javadoc>
            <method name="getCompressionType" type="String" line="866">
                <scope line="867"/>
                <scope line="870"/>
            </method>
            <javadoc line="875">
                Removes any previous compression type and quality settings.
                  &lt;p&gt; The default implementation sets the instance variable
                  &lt;code&gt;compressionType&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;, and the
                  instance variable &lt;code&gt;compressionQuality&lt;/code&gt; to
                  &lt;code&gt;1.0F&lt;/code&gt;.                
                <exception>
                    UnsupportedOperationException if the plug-in does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <see>
                    #setCompressionType                    
                </see>
                <see>
                    #setCompressionQuality                    
                </see>
            </javadoc>
            <method name="unsetCompression" type="void" line="888">
                <scope line="889"/>
                <scope line="892"/>
            </method>
            <javadoc line="898">
                Returns a localized version of the name of the current
                  compression type, using the &lt;code&gt;Locale&lt;/code&gt; returned by
                  &lt;code&gt;getLocale&lt;/code&gt;.
                  &lt;p&gt; The default implementation checks whether compression is
                  supported and the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, if
                  &lt;code&gt;compressionType&lt;/code&gt; is &lt;code&gt;non-null&lt;/code&gt; the value
                  of &lt;code&gt;getCompressionType&lt;/code&gt; is returned as a
                  convenience.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; containing a localized version of
                      the name of the current compression type.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if no compression type is set.                    
                </exception>
            </javadoc>
            <method name="getLocalizedCompressionTypeName" type="String" line="916">
                <scope line="917"/>
                <scope line="920"/>
                <scope line="923"/>
            </method>
            <javadoc line="928">
                Returns &lt;code&gt;true&lt;/code&gt; if the current compression type
                  provides lossless compression.  If a plug-in provides only
                  one mandatory compression type, then this method may be
                  called without calling &lt;code&gt;setCompressionType&lt;/code&gt; first.
                  &lt;p&gt; If there are multiple compression types but none has
                  been set, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.
                  &lt;p&gt; The default implementation checks whether compression is
                  supported and the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, if
                  &lt;code&gt;getCompressionTypes()&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or
                  &lt;code&gt;getCompressionType()&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt;
                  &lt;code&gt;true&lt;/code&gt; is returned as a convenience.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the current compression type is
                      lossless.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the set of legal
                      compression types is non-&lt;code&gt;null&lt;/code&gt; and the current
                      compression type is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="isCompressionLossless" type="boolean" line="951">
                <scope line="952"/>
                <scope line="955"/>
                <scope line="958"/>
            </method>
            <javadoc line="963">
                Sets the compression quality to a value between &lt;code&gt;0&lt;/code&gt;
                  and &lt;code&gt;1&lt;/code&gt;.  Only a single compression quality setting
                  is supported by default; writers can provide extended versions
                  of &lt;code&gt;ImageWriteParam&lt;/code&gt; that offer more control.  For
                  lossy compression schemes, the compression quality should
                  control the tradeoff between file size and image quality (for
                  example, by choosing quantization tables when writing JPEG
                  images).  For lossless schemes, the compression quality may be
                  used to control the tradeoff between file size and time taken
                  to perform the compression (for example, by optimizing row
                  filters and setting the ZLIB compression level when writing
                  PNG images).
                  &lt;p&gt; A compression quality setting of 0.0 is most generically
                  interpreted as &quot;high compression is important,&quot; while a setting of
                  1.0 is most generically interpreted as &quot;high image quality is
                  important.&quot;
                  &lt;p&gt; If there are multiple compression types but none has been
                  set, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.
                  &lt;p&gt; The default implementation checks that compression is
                  supported, and that the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, if
                  &lt;code&gt;getCompressionTypes()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; or
                  &lt;code&gt;compressionType&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt; it sets
                  the &lt;code&gt;compressionQuality&lt;/code&gt; instance variable.                
                <param>
                    quality a &lt;code&gt;float&lt;/code&gt; between &lt;code&gt;0&lt;/code&gt;and
                      &lt;code&gt;1&lt;/code&gt; indicating the desired quality level.                    
                </param>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the set of legal
                      compression types is non-&lt;code&gt;null&lt;/code&gt; and the current
                      compression type is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;quality&lt;/code&gt; is
                      not between &lt;code&gt;0&lt;/code&gt;and &lt;code&gt;1&lt;/code&gt;, inclusive.                    
                </exception>
                <see>
                    #getCompressionQuality                    
                </see>
            </javadoc>
            <method name="setCompressionQuality" type="void" line="1001">
                <params>
                    <param name="quality" type="float"/>
                </params>
                <scope line="1002"/>
                <scope line="1005"/>
                <scope line="1008"/>
                <scope line="1011"/>
            </method>
            <javadoc line="1016">
                Returns the current compression quality setting.
                  &lt;p&gt; If there are multiple compression types but none has been
                  set, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.
                  &lt;p&gt; The default implementation checks that compression is
                  supported and that the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, if
                  &lt;code&gt;getCompressionTypes()&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or
                  &lt;code&gt;getCompressionType()&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt;, it
                  returns the value of the &lt;code&gt;compressionQuality&lt;/code&gt;
                  instance variable.                
                <return>
                    the current compression quality setting.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the set of legal
                      compression types is non-&lt;code&gt;null&lt;/code&gt; and the current
                      compression type is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #setCompressionQuality                    
                </see>
            </javadoc>
            <method name="getCompressionQuality" type="float" line="1037">
                <scope line="1038"/>
                <scope line="1041"/>
                <scope line="1044"/>
            </method>
            <javadoc line="1049">
                Returns a &lt;code&gt;float&lt;/code&gt; indicating an estimate of the
                  number of bits of output data for each bit of input image data
                  at the given quality level.  The value will typically lie
                  between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, with smaller values
                  indicating more compression.  A special value of
                  &lt;code&gt;-1.0F&lt;/code&gt; is used to indicate that no estimate is
                  available.
                  &lt;p&gt; If there are multiple compression types but none has been set,
                  an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.
                  &lt;p&gt; The default implementation checks that compression is
                  supported and the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, if
                  &lt;code&gt;getCompressionTypes()&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or
                  &lt;code&gt;getCompressionType()&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt;, and
                  &lt;code&gt;quality&lt;/code&gt; is within bounds, it returns
                  &lt;code&gt;-1.0&lt;/code&gt;.                
                <param>
                    quality the quality setting whose bit rate is to be
                      queried.                    
                </param>
                <return>
                    an estimate of the compressed bit rate, or
                      &lt;code&gt;-1.0F&lt;/code&gt; if no estimate is available.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the set of legal
                      compression types is non-&lt;code&gt;null&lt;/code&gt; and the current
                      compression type is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;quality&lt;/code&gt; is
                      not between &lt;code&gt;0&lt;/code&gt;and &lt;code&gt;1&lt;/code&gt;, inclusive.                    
                </exception>
            </javadoc>
            <method name="getBitRate" type="float" line="1080">
                <params>
                    <param name="quality" type="float"/>
                </params>
                <scope line="1081"/>
                <scope line="1084"/>
                <scope line="1087"/>
                <scope line="1090"/>
            </method>
            <javadoc line="1095">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s that may be used along
                  with &lt;code&gt;getCompressionQualityValues&lt;/code&gt; as part of a user
                  interface for setting or displaying the compression quality
                  level.  The &lt;code&gt;String&lt;/code&gt; with index &lt;code&gt;i&lt;/code&gt;
                  provides a description of the range of quality levels between
                  &lt;code&gt;getCompressionQualityValues[i]&lt;/code&gt; and
                  &lt;code&gt;getCompressionQualityValues[i + 1]&lt;/code&gt;.  Note that the
                  length of the array returned from
                  &lt;code&gt;getCompressionQualityValues&lt;/code&gt; will always be one
                  greater than that returned from
                  &lt;code&gt;getCompressionQualityDescriptions&lt;/code&gt;.
                  &lt;p&gt; As an example, the strings &quot;Good&quot;, &quot;Better&quot;, and &quot;Best&quot;
                  could be associated with the ranges &lt;code&gt;[0, .33)&lt;/code&gt;,
                  &lt;code&gt;[.33, .66)&lt;/code&gt;, and &lt;code&gt;[.66, 1.0]&lt;/code&gt;.  In this
                  case, &lt;code&gt;getCompressionQualityDescriptions&lt;/code&gt; would
                  return &lt;code&gt;{ &quot;Good&quot;, &quot;Better&quot;, &quot;Best&quot; }&lt;/code&gt; and
                  &lt;code&gt;getCompressionQualityValues&lt;/code&gt; would return
                  &lt;code&gt;{ 0.0F, .33F, .66F, 1.0F }&lt;/code&gt;.
                  &lt;p&gt; If no descriptions are available, &lt;code&gt;null&lt;/code&gt; is
                  returned.  If &lt;code&gt;null&lt;/code&gt; is returned from
                  &lt;code&gt;getCompressionQualityValues&lt;/code&gt;, this method must also
                  return &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; The descriptions should be localized for the
                  &lt;code&gt;Locale&lt;/code&gt; returned by &lt;code&gt;getLocale&lt;/code&gt;, if it
                  is non-&lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; If there are multiple compression types but none has been set,
                  an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.
                  &lt;p&gt; The default implementation checks that compression is
                  supported and that the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, if
                  &lt;code&gt;getCompressionTypes()&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or
                  &lt;code&gt;getCompressionType()&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt;, it
                  returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s containing localized
                      descriptions of the compression quality levels.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the set of legal
                      compression types is non-&lt;code&gt;null&lt;/code&gt; and the current
                      compression type is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #getCompressionQualityValues                    
                </see>
            </javadoc>
            <method name="getCompressionQualityDescriptions" type="String[]" line="1140">
                <scope line="1141"/>
                <scope line="1144"/>
                <scope line="1147"/>
            </method>
            <javadoc line="1152">
                Returns an array of &lt;code&gt;float&lt;/code&gt;s that may be used along
                  with &lt;code&gt;getCompressionQualityDescriptions&lt;/code&gt; as part of a user
                  interface for setting or displaying the compression quality
                  level.  See {@link #getCompressionQualityDescriptions&lt;code&gt;getCompressionQualityDescriptions&lt;/code&gt;} for more information.
                  &lt;p&gt; If no descriptions are available, &lt;code&gt;null&lt;/code&gt; is
                  returned.  If &lt;code&gt;null&lt;/code&gt; is returned from
                  &lt;code&gt;getCompressionQualityDescriptions&lt;/code&gt;, this method
                  must also return &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; If there are multiple compression types but none has been set,
                  an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.
                  &lt;p&gt; The default implementation checks that compression is
                  supported and that the compression mode is
                  &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.  If so, if
                  &lt;code&gt;getCompressionTypes()&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or
                  &lt;code&gt;getCompressionType()&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt;, it
                  returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    an array of &lt;code&gt;float&lt;/code&gt;s indicating the
                      boundaries between the compression quality levels as described
                      by the &lt;code&gt;String&lt;/code&gt;s from
                      &lt;code&gt;getCompressionQualityDescriptions&lt;/code&gt;.                    
                </return>
                <exception>
                    UnsupportedOperationException if the writer does not
                      support compression.                    
                </exception>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if the set of legal
                      compression types is non-&lt;code&gt;null&lt;/code&gt; and the current
                      compression type is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #getCompressionQualityDescriptions                    
                </see>
            </javadoc>
            <method name="getCompressionQualityValues" type="float[]" line="1182">
                <scope line="1183"/>
                <scope line="1186"/>
                <scope line="1189"/>
            </method>
        </class>
    </source>