<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio">
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="javax.imageio.event.IIOWriteWarningListener"/>
        <import package="javax.imageio.event.IIOWriteProgressListener"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <class name="ImageWriter" line="45">
            <comment line="246">
                Localization                
            </comment>
            <comment line="322">
                Write params                
            </comment>
            <comment line="351">
                Metadata                
            </comment>
            <comment line="414">
                comment inherited                
            </comment>
            <comment line="418">
                comment inherited                
            </comment>
            <comment line="424">
                Thumbnails                
            </comment>
            <comment line="619">
                Check that the output has been set, then throw an
                 UnsupportedOperationException.                
            </comment>
            <comment line="628">
                Sequence writes                
            </comment>
            <comment line="783">
                Metadata replacement                
            </comment>
            <comment line="910">
                Image insertion                
            </comment>
            <comment line="1003">
                Image removal                
            </comment>
            <comment line="1069">
                Empty images                
            </comment>
            <comment line="1366">
                Pixel replacement                
            </comment>
            <comment line="1587">
                Abort                
            </comment>
            <comment line="1628">
                Listeners                
            </comment>
            <comment line="2002">
                State management                
            </comment>
            <implements interface="ImageTranscoder"/>
            <javadoc line="45">
                An abstract superclass for encoding and writing images.  This class
                  must be subclassed by classes that write out images in the context
                  of the Java Image I/O framework.
                  &lt;p&gt; &lt;code&gt;ImageWriter&lt;/code&gt; objects are normally instantiated by
                  the service provider class for the specific format.  Service
                  provider classes are registered with the &lt;code&gt;IIORegistry&lt;/code&gt;,
                  which uses them for format recognition and presentation of
                  available format readers and writers.
                  &lt;p&gt;                
                <see>
                    ImageReader                    
                </see>
                <see>
                    ImageWriteParam                    
                </see>
                <see>
                    javax.imageio.spi.IIORegistry                    
                </see>
                <see>
                    javax.imageio.spi.ImageWriterSpi                    
                </see>
            </javadoc>
            <declaration name="originatingProvider" type="ImageWriterSpi" line="66"/>
            <javadoc line="66">
                The &lt;code&gt;ImageWriterSpi&lt;/code&gt; that instantiated this object,
                  or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none
                  exists.  By default it is initialized to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="output" type="Object" line="73"/>
            <javadoc line="73">
                The &lt;code&gt;ImageOutputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt;
                  set by &lt;code&gt;setOutput&lt;/code&gt; and retrieved by
                  &lt;code&gt;getOutput&lt;/code&gt;.  By default it is initialized to
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="availableLocales" type="Locale[]" line="81"/>
            <javadoc line="81">
                An array of &lt;code&gt;Locale&lt;/code&gt;s that may be used to localize
                  warning messages and compression setting values, or
                  &lt;code&gt;null&lt;/code&gt; if localization is not supported.  By default
                  it is initialized to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="locale" type="Locale" line="89"/>
            <javadoc line="89">
                The current &lt;code&gt;Locale&lt;/code&gt; to be used for localization, or
                  &lt;code&gt;null&lt;/code&gt; if none has been set.  By default it is
                  initialized to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="warningListeners" type="List&lt;IIOWriteWarningListener&gt;" line="96"/>
            <javadoc line="96">
                A &lt;code&gt;List&lt;/code&gt; of currently registered
                  &lt;code&gt;IIOWriteWarningListener&lt;/code&gt;s, initialized by default to
                  &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty
                  &lt;code&gt;List&lt;/code&gt;.                
            </javadoc>
            <declaration name="warningLocales" type="List&lt;Locale&gt;" line="104"/>
            <javadoc line="104">
                A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Locale&lt;/code&gt;s, one for each
                  element of &lt;code&gt;warningListeners&lt;/code&gt;, initialized by default
                  &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty
                  &lt;code&gt;List&lt;/code&gt;.                
            </javadoc>
            <declaration name="progressListeners" type="List&lt;IIOWriteProgressListener&gt;" line="112"/>
            <javadoc line="112">
                A &lt;code&gt;List&lt;/code&gt; of currently registered
                  &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s, initialized by default
                  &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty
                  &lt;code&gt;List&lt;/code&gt;.                
            </javadoc>
            <declaration name="abortFlag" type="boolean" line="120"/>
            <javadoc line="120">
                If &lt;code&gt;true&lt;/code&gt;, the current write operation should be
                  aborted.                
            </javadoc>
            <javadoc line="126">
                Constructs an &lt;code&gt;ImageWriter&lt;/code&gt; and sets its
                  &lt;code&gt;originatingProvider&lt;/code&gt; instance variable to the
                  supplied value.
                  &lt;p&gt; Subclasses that make use of extensions should provide a
                  constructor with signature &lt;code&gt;(ImageWriterSpi,
                  Object)&lt;/code&gt; in order to retrieve the extension object.  If
                  the extension object is unsuitable, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; should be thrown.                
                <param>
                    originatingProvider the &lt;code&gt;ImageWriterSpi&lt;/code&gt; that
                      is constructing this object, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="ImageWriter" type="constructor" line="140">
                <params>
                    <param name="originatingProvider" type="ImageWriterSpi"/>
                </params>
            </method>
            <javadoc line="144">
                Returns the &lt;code&gt;ImageWriterSpi&lt;/code&gt; object that created
                  this &lt;code&gt;ImageWriter&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if this
                  object was not created through the &lt;code&gt;IIORegistry&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;originatingProvider&lt;/code&gt; instance variable.                
                <return>
                    an &lt;code&gt;ImageWriterSpi&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    ImageWriterSpi                    
                </see>
            </javadoc>
            <method name="getOriginatingProvider" type="ImageWriterSpi" line="156"/>
            <javadoc line="160">
                Sets the destination to the given
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt;.
                  The destination is assumed to be ready to accept data, and will
                  not be closed at the end of each write. This allows distributed
                  imaging applications to transmit a series of images over a
                  single network connection.  If &lt;code&gt;output&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, any currently set output will be removed.
                  &lt;p&gt; If &lt;code&gt;output&lt;/code&gt; is an
                  &lt;code&gt;ImageOutputStream&lt;/code&gt;, calls to the
                  &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;writeToSequence&lt;/code&gt;, and
                  &lt;code&gt;prepareWriteEmpty&lt;/code&gt;/&lt;code&gt;endWriteEmpty&lt;/code&gt;
                  methods will preserve the existing contents of the stream.
                  Other write methods, such as &lt;code&gt;writeInsert&lt;/code&gt;,
                  &lt;code&gt;replaceStreamMetadata&lt;/code&gt;,
                  &lt;code&gt;replaceImageMetadata&lt;/code&gt;, &lt;code&gt;replacePixels&lt;/code&gt;,
                  &lt;code&gt;prepareInsertEmpty&lt;/code&gt;/&lt;code&gt;endInsertEmpty&lt;/code&gt;,
                  and &lt;code&gt;endWriteSequence&lt;/code&gt;, require the full contents
                  of the stream to be readable and writable, and may alter any
                  portion of the stream.
                  &lt;p&gt; Use of a general &lt;code&gt;Object&lt;/code&gt; other than an
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; is intended for writers that
                  interact directly with an output device or imaging protocol.
                  The set of legal classes is advertised by the writer&apos;s service
                  provider&apos;s &lt;code&gt;getOutputTypes&lt;/code&gt; method; most writers
                  will return a single-element array containing only
                  &lt;code&gt;ImageOutputStream.class&lt;/code&gt; to indicate that they
                  accept only an &lt;code&gt;ImageOutputStream&lt;/code&gt;.
                  &lt;p&gt; The default implementation sets the &lt;code&gt;output&lt;/code&gt;
                  instance variable to the value of &lt;code&gt;output&lt;/code&gt; after
                  checking &lt;code&gt;output&lt;/code&gt; against the set of classes
                  advertised by the originating provider, if there is one.                
                <param>
                    output the &lt;code&gt;ImageOutputStream&lt;/code&gt; or other
                      &lt;code&gt;Object&lt;/code&gt; to use for future writing.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;output&lt;/code&gt; is
                      not an instance of one of the classes returned by the
                      originating service provider&apos;s &lt;code&gt;getOutputTypes&lt;/code&gt;
                      method.                    
                </exception>
                <see>
                    #getOutput                    
                </see>
            </javadoc>
            <method name="setOutput" type="void" line="206">
                <params>
                    <param name="output" type="Object"/>
                </params>
                <scope line="207">
                    <declaration name="provider" type="ImageWriterSpi" line="208"/>
                    <scope line="209">
                        <declaration name="classes" type="Class[]" line="210"/>
                        <declaration name="found" type="boolean" line="211"/>
                        <scope line="212">
                            <scope line="213"/>
                        </scope>
                        <scope line="218"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="227">
                Returns the &lt;code&gt;ImageOutputStream&lt;/code&gt; or other
                  &lt;code&gt;Object&lt;/code&gt; set by the most recent call to the
                  &lt;code&gt;setOutput&lt;/code&gt; method.  If no destination has been
                  set, &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;output&lt;/code&gt; instance variable.                
                <return>
                    the &lt;code&gt;Object&lt;/code&gt; that was specified using
                      &lt;code&gt;setOutput&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #setOutput                    
                </see>
            </javadoc>
            <method name="getOutput" type="Object" line="241"/>
            <javadoc line="247">
                Returns an array of &lt;code&gt;Locale&lt;/code&gt;s that may be used to
                  localize warning listeners and compression settings.  A return
                  value of &lt;code&gt;null&lt;/code&gt; indicates that localization is not
                  supported.
                  &lt;p&gt; The default implementation returns a clone of the
                  &lt;code&gt;availableLocales&lt;/code&gt; instance variable if it is
                  non-&lt;code&gt;null&lt;/code&gt;, or else returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    an array of &lt;code&gt;Locale&lt;/code&gt;s that may be used as
                      arguments to &lt;code&gt;setLocale&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="260"/>
            <javadoc line="265">
                Sets the current &lt;code&gt;Locale&lt;/code&gt; of this
                  &lt;code&gt;ImageWriter&lt;/code&gt; to the given value.  A value of
                  &lt;code&gt;null&lt;/code&gt; removes any previous setting, and indicates
                  that the writer should localize as it sees fit.
                  &lt;p&gt; The default implementation checks &lt;code&gt;locale&lt;/code&gt;
                  against the values returned by
                  &lt;code&gt;getAvailableLocales&lt;/code&gt;, and sets the
                  &lt;code&gt;locale&lt;/code&gt; instance variable if it is found.  If
                  &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the instance variable
                  is set to &lt;code&gt;null&lt;/code&gt; without any checking.                
                <param>
                    locale the desired &lt;code&gt;Locale&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;locale&lt;/code&gt; is
                      non-&lt;code&gt;null&lt;/code&gt; but is not one of the values returned by
                      &lt;code&gt;getAvailableLocales&lt;/code&gt;.                    
                </exception>
                <see>
                    #getLocale                    
                </see>
            </javadoc>
            <method name="setLocale" type="void" line="287">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="288">
                    <declaration name="locales" type="Locale[]" line="289"/>
                    <declaration name="found" type="boolean" line="290"/>
                    <scope line="291">
                        <scope line="292">
                            <scope line="293"/>
                        </scope>
                    </scope>
                    <scope line="299"/>
                </scope>
            </method>
            <javadoc line="306">
                Returns the currently set &lt;code&gt;Locale&lt;/code&gt;, or
                  &lt;code&gt;null&lt;/code&gt; if none has been set.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;locale&lt;/code&gt; instance variable.                
                <return>
                    the current &lt;code&gt;Locale&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #setLocale                    
                </see>
            </javadoc>
            <method name="getLocale" type="Locale" line="317"/>
            <javadoc line="323">
                Returns a new &lt;code&gt;ImageWriteParam&lt;/code&gt; object of the
                  appropriate type for this file format containing default
                  values, that is, those values that would be used
                  if no &lt;code&gt;ImageWriteParam&lt;/code&gt; object were specified.  This
                  is useful as a starting point for tweaking just a few parameters
                  and otherwise leaving the default settings alone.
                  &lt;p&gt; The default implementation constructs and returns a new
                  &lt;code&gt;ImageWriteParam&lt;/code&gt; object that does not allow tiling,
                  progressive encoding, or compression, and that will be
                  localized for the current &lt;code&gt;Locale&lt;/code&gt; (&lt;i&gt;i.e.&lt;/i&gt;,
                  what you would get by calling &lt;code&gt;new
                  ImageWriteParam(getLocale())&lt;/code&gt;.
                  &lt;p&gt; Individual plug-ins may return an instance of
                  &lt;code&gt;ImageWriteParam&lt;/code&gt; with additional optional features
                  enabled, or they may return an instance of a plug-in specific
                  subclass of &lt;code&gt;ImageWriteParam&lt;/code&gt;.                
                <return>
                    a new &lt;code&gt;ImageWriteParam&lt;/code&gt; object containing
                      default values.                    
                </return>
            </javadoc>
            <method name="getDefaultWriteParam" type="ImageWriteParam" line="346"/>
            <method name="getDefaultStreamMetadata" type="IIOMetadata" line="352"/>
            <javadoc line="352">
                Returns an &lt;code&gt;IIOMetadata&lt;/code&gt; object containing default
                  values for encoding a stream of images.  The contents of the
                  object may be manipulated using either the XML tree structure
                  returned by the &lt;code&gt;IIOMetadata.getAsTree&lt;/code&gt; method, an
                  &lt;code&gt;IIOMetadataController&lt;/code&gt; object, or via plug-in
                  specific interfaces, and the resulting data supplied to one of
                  the &lt;code&gt;write&lt;/code&gt; methods that take a stream metadata
                  parameter.
                  &lt;p&gt; An optional &lt;code&gt;ImageWriteParam&lt;/code&gt; may be supplied
                  for cases where it may affect the structure of the stream
                  metadata.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; Writers that do not make use of stream metadata
                  (&lt;i&gt;e.g.&lt;/i&gt;, writers for single-image formats) should return
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt; that will be used to
                      encode the image, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadata&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getDefaultImageMetadata" type="IIOMetadata" line="383"/>
            <javadoc line="383">
                Returns an &lt;code&gt;IIOMetadata&lt;/code&gt; object containing default
                  values for encoding an image of the given type.  The contents
                  of the object may be manipulated using either the XML tree
                  structure returned by the &lt;code&gt;IIOMetadata.getAsTree&lt;/code&gt;
                  method, an &lt;code&gt;IIOMetadataController&lt;/code&gt; object, or via
                  plug-in specific interfaces, and the resulting data supplied to
                  one of the &lt;code&gt;write&lt;/code&gt; methods that take a stream
                  metadata parameter.
                  &lt;p&gt; An optional &lt;code&gt;ImageWriteParam&lt;/code&gt; may be supplied
                  for cases where it may affect the structure of the image
                  metadata.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.                
                <param>
                    imageType an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; indicating the
                      format of the image to be written later.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt; that will be used to
                      encode the image, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadata&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="convertStreamMetadata" type="IIOMetadata" line="414"/>
            <method name="convertImageMetadata" type="IIOMetadata" line="418"/>
            <javadoc line="425">
                Returns the number of thumbnails suported by the format being
                  written, given the image type and any additional write
                  parameters and metadata objects that will be used during
                  encoding.  A return value of &lt;code&gt;-1&lt;/code&gt; indicates that
                  insufficient information is available.
                  &lt;p&gt; An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied
                  for cases where it may affect thumbnail handling.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; The default implementation returns 0.                
                <param>
                    imageType an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; indicating
                      the type of image to be written, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    param the &lt;code&gt;ImageWriteParam&lt;/code&gt; that will be used for
                      writing, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    streamMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object that will
                      be used for writing, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    imageMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object that will
                      be used for writing, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    the number of thumbnails that may be written given the
                      supplied parameters, or &lt;code&gt;-1&lt;/code&gt; if insufficient
                      information is available.                    
                </return>
            </javadoc>
            <method name="getNumThumbnailsSupported" type="int" line="458">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
            </method>
            <javadoc line="462">
                Returns an array of &lt;code&gt;Dimension&lt;/code&gt;s indicating the
                  legal size ranges for thumbnail images as they will be encoded
                  in the output file or stream.  This information is merely
                  advisory; the writer will resize any supplied thumbnails as
                  necessary.
                  &lt;p&gt; The information is returned as a set of pairs; the first
                  element of a pair contains an (inclusive) minimum width and
                  height, and the second element contains an (inclusive) maximum
                  width and height.  Together, each pair defines a valid range of
                  sizes.  To specify a fixed size, the same width and height will
                  appear for both elements.  A return value of &lt;code&gt;null&lt;/code&gt;
                  indicates that the size is arbitrary or unknown.
                  &lt;p&gt; An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied
                  for cases where it may affect thumbnail handling.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    imageType an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; indicating the
                      type of image to be written, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    param the &lt;code&gt;ImageWriteParam&lt;/code&gt; that will be used for
                      writing, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    streamMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object that will
                      be used for writing, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    imageMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object that will
                      be used for writing, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    an array of &lt;code&gt;Dimension&lt;/code&gt;s with an even length
                      of at least two, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPreferredThumbnailSizes" type="Dimension[]" line="502">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
            </method>
            <javadoc line="506">
                Returns &lt;code&gt;true&lt;/code&gt; if the methods that take an
                  &lt;code&gt;IIOImage&lt;/code&gt; parameter are capable of dealing with a
                  &lt;code&gt;Raster&lt;/code&gt; (as opposed to &lt;code&gt;RenderedImage&lt;/code&gt;)
                  source image.  If this method returns &lt;code&gt;false&lt;/code&gt;, then
                  those methods will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if supplied with an
                  &lt;code&gt;IIOImage&lt;/code&gt; containing a &lt;code&gt;Raster&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Raster&lt;/code&gt; sources are
                      supported.                    
                </return>
            </javadoc>
            <method name="canWriteRasters" type="boolean" line="520"/>
            <method name="write" type="void" line="524"/>
            <javadoc line="524">
                Appends a complete image stream containing a single image and
                  associated stream and image metadata and thumbnails to the
                  output.  Any necessary header information is included.  If the
                  output is an &lt;code&gt;ImageOutputStream&lt;/code&gt;, its existing
                  contents prior to the current seek position are not affected,
                  and need not be readable or writable.
                  &lt;p&gt; The output must have been set beforehand using the
                  &lt;code&gt;setOutput&lt;/code&gt; method.
                  &lt;p&gt; Stream metadata may optionally be supplied; if it is
                  &lt;code&gt;null&lt;/code&gt;, default stream metadata will be used.
                  &lt;p&gt; If &lt;code&gt;canWriteRasters&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;,
                  the &lt;code&gt;IIOImage&lt;/code&gt; may contain a &lt;code&gt;Raster&lt;/code&gt;
                  source.  Otherwise, it must contain a
                  &lt;code&gt;RenderedImage&lt;/code&gt; source.
                  &lt;p&gt; The supplied thumbnails will be resized if needed, and any
                  thumbnails in excess of the supported number will be ignored.
                  If the format requires additional thumbnails that are not
                  provided, the writer should generate them internally.
                  &lt;p&gt;  An &lt;code&gt;ImageWriteParam&lt;/code&gt; may
                  optionally be supplied to control the writing process.  If
                  &lt;code&gt;param&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a default write param
                  will be used.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.                
                <param>
                    streamMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object representing
                      stream metadata, or &lt;code&gt;null&lt;/code&gt; to use default values.                    
                </param>
                <param>
                    image an &lt;code&gt;IIOImage&lt;/code&gt; object containing an
                      image, thumbnails, and metadata to be written.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; to use a default
                      &lt;code&gt;ImageWriteParam&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if &lt;code&gt;image&lt;/code&gt;
                      contains a &lt;code&gt;Raster&lt;/code&gt; and &lt;code&gt;canWriteRasters&lt;/code&gt;
                      returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;image&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <javadoc line="579">
                Appends a complete image stream containing a single image with
                  default metadata and thumbnails to the output.  This method is
                  a shorthand for &lt;code&gt;write(null, image, null)&lt;/code&gt;.                
                <param>
                    image an &lt;code&gt;IIOImage&lt;/code&gt; object containing an
                      image, thumbnails, and metadata to be written.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;image&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    UnsupportedOperationException if &lt;code&gt;image&lt;/code&gt;
                      contains a &lt;code&gt;Raster&lt;/code&gt; and &lt;code&gt;canWriteRasters&lt;/code&gt;
                      returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="596">
                <params>
                    <param name="image" type="IIOImage"/>
                </params>
            </method>
            <javadoc line="600">
                Appends a complete image stream consisting of a single image
                  with default metadata and thumbnails to the output.  This
                  method is a shorthand for &lt;code&gt;write(null, new IIOImage(image,
                  null, null), null)&lt;/code&gt;.                
                <param>
                    image a &lt;code&gt;RenderedImage&lt;/code&gt; to be written.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;image&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="614">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
            </method>
            <method name="unsupported" type="void" line="620">
                <scope line="621"/>
            </method>
            <javadoc line="629">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer is able to append an
                  image to an image stream that already contains header
                  information and possibly prior images.
                  &lt;p&gt; If &lt;code&gt;canWriteSequence&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;,
                  &lt;code&gt;writeToSequence&lt;/code&gt; and &lt;code&gt;endWriteSequence&lt;/code&gt;
                  will throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if images may be appended sequentially.                    
                </return>
            </javadoc>
            <method name="canWriteSequence" type="boolean" line="642"/>
            <javadoc line="646">
                Prepares a stream to accept a series of subsequent
                  &lt;code&gt;writeToSequence&lt;/code&gt; calls, using the provided stream
                  metadata object.  The metadata will be written to the stream if
                  it should precede the image data.  If the argument is &lt;code&gt;null&lt;/code&gt;,
                  default stream metadata is used.
                  &lt;p&gt; If the output is an &lt;code&gt;ImageOutputStream&lt;/code&gt;, the existing
                  contents of the output prior to the current seek position are
                  flushed, and need not be readable or writable.  If the format
                  requires that &lt;code&gt;endWriteSequence&lt;/code&gt; be able to rewind to
                  patch up the header information, such as for a sequence of images
                  in a single TIFF file, then the metadata written by this method
                  must remain in a writable portion of the stream.  Other formats
                  may flush the stream after this method and after each image.
                  &lt;p&gt; If &lt;code&gt;canWriteSequence&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;,
                  this method will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
                  &lt;p&gt; The output must have been set beforehand using either
                  the &lt;code&gt;setOutput&lt;/code&gt; method.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    streamMetadata A stream metadata object, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canWriteSequence&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs writing the stream
                      metadata.                    
                </exception>
            </javadoc>
            <method name="prepareWriteSequence" type="void" line="684">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                </params>
            </method>
            <javadoc line="688">
                Appends a single image and possibly associated metadata and
                  thumbnails, to the output.  If the output is an
                  &lt;code&gt;ImageOutputStream&lt;/code&gt;, the existing contents of the
                  output prior to the current seek position may be flushed, and
                  need not be readable or writable, unless the plug-in needs to
                  be able to patch up the header information when
                  &lt;code&gt;endWriteSequence&lt;/code&gt; is called (&lt;italic&gt;e.g.&lt;/italic&gt; TIFF).
                  &lt;p&gt; If &lt;code&gt;canWriteSequence&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;,
                  this method will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
                  &lt;p&gt; The output must have been set beforehand using
                  the &lt;code&gt;setOutput&lt;/code&gt; method.
                  &lt;p&gt; &lt;code&gt;prepareWriteSequence&lt;/code&gt; must have been called
                  beforehand, or an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.
                  &lt;p&gt; If &lt;code&gt;canWriteRasters&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;,
                  the &lt;code&gt;IIOImage&lt;/code&gt; may contain a &lt;code&gt;Raster&lt;/code&gt;
                  source.  Otherwise, it must contain a
                  &lt;code&gt;RenderedImage&lt;/code&gt; source.
                  &lt;p&gt; The supplied thumbnails will be resized if needed, and any
                  thumbnails in excess of the supported number will be ignored.
                  If the format requires additional thumbnails that are not
                  provided, the writer will generate them internally.
                  &lt;p&gt; An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied
                  to control the writing process.  If &lt;code&gt;param&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, a default write param will be used.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    image an &lt;code&gt;IIOImage&lt;/code&gt; object containing an
                      image, thumbnails, and metadata to be written.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; to use a default
                      &lt;code&gt;ImageWriteParam&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set, or &lt;code&gt;prepareWriteSequence&lt;/code&gt; has not been called.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canWriteSequence&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;image&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    UnsupportedOperationException if &lt;code&gt;image&lt;/code&gt;
                      contains a &lt;code&gt;Raster&lt;/code&gt; and &lt;code&gt;canWriteRasters&lt;/code&gt;
                      returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="writeToSequence" type="void" line="749">
                <params>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <javadoc line="753">
                Completes the writing of a sequence of images begun with
                  &lt;code&gt;prepareWriteSequence&lt;/code&gt;.  Any stream metadata that
                  should come at the end of the sequence of images is written out,
                  and any header information at the beginning of the sequence is
                  patched up if necessary.  If the output is an
                  &lt;code&gt;ImageOutputStream&lt;/code&gt;, data through the stream metadata
                  at the end of the sequence are flushed and need not be readable
                  or writable.
                  &lt;p&gt; If &lt;code&gt;canWriteSequence&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;,
                  this method will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <exception>
                    IllegalStateException if the output has not
                      been set, or &lt;code&gt;prepareWriteSequence&lt;/code&gt; has not been called.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canWriteSequence&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="endWriteSequence" type="void" line="778"/>
            <javadoc line="784">
                Returns &lt;code&gt;true&lt;/code&gt; if it is possible to replace the
                  stream metadata already present in the output.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise returns &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if replacement of stream metadata is
                      allowed.                    
                </return>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the query.                    
                </exception>
            </javadoc>
            <method name="canReplaceStreamMetadata" type="boolean" line="799">
                <scope line="800"/>
            </method>
            <javadoc line="806">
                Replaces the stream metadata in the output with new
                  information.  If the output is an
                  &lt;code&gt;ImageOutputStream&lt;/code&gt;, the prior contents of the
                  stream are examined and possibly edited to make room for the
                  new data.  All of the prior contents of the output must be
                  available for reading and writing.
                  &lt;p&gt; If &lt;code&gt;canReplaceStreamMetadata&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;, an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    streamMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object representing
                      stream metadata, or &lt;code&gt;null&lt;/code&gt; to use default values.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if the
                      &lt;code&gt;canReplaceStreamMetadata&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.  modes do not include                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="replaceStreamMetadata" type="void" line="834">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                </params>
            </method>
            <javadoc line="838">
                Returns &lt;code&gt;true&lt;/code&gt; if it is possible to replace the
                  image metadata associated with an existing image with index
                  &lt;code&gt;imageIndex&lt;/code&gt;.  If this method returns
                  &lt;code&gt;false&lt;/code&gt;, a call to
                  &lt;code&gt;replaceImageMetadata(imageIndex)&lt;/code&gt; will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
                  &lt;p&gt; A writer that does not support any image metadata
                  replacement may return &lt;code&gt;false&lt;/code&gt; without performing
                  bounds checking on the index.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise returns &lt;code&gt;false&lt;/code&gt;
                  without checking the value of &lt;code&gt;imageIndex&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image whose metadata is to
                      be replaced.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the image metadata of the given
                      image can be replaced.                    
                </return>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the writer supports
                      image metadata replacement in general, but
                      &lt;code&gt;imageIndex&lt;/code&gt; is less than 0 or greater than the
                      largest available index.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the query.                    
                </exception>
            </javadoc>
            <method name="canReplaceImageMetadata" type="boolean" line="870">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="871"/>
            </method>
            <javadoc line="877">
                Replaces the image metadata associated with an existing image.
                  &lt;p&gt; If &lt;code&gt;canReplaceImageMetadata(imageIndex)&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;, an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image whose metadata is to
                      be replaced.                    
                </param>
                <param>
                    imageMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object
                      representing image metadata, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not been
                      set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canReplaceImageMetadata&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;imageIndex&lt;/code&gt;
                      is less than 0 or greater than the largest available index.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="replaceImageMetadata" type="void" line="905">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
            </method>
            <javadoc line="911">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer supports the insertion
                  of a new image at the given index.  Existing images with
                  indices greater than or equal to the insertion index will have
                  their indices increased by 1.  A value for
                  &lt;code&gt;imageIndex&lt;/code&gt; of &lt;code&gt;-1&lt;/code&gt; may be used to
                  signify an index one larger than the current largest index.
                  &lt;p&gt; A writer that does not support any image insertion may
                  return &lt;code&gt;false&lt;/code&gt; without performing bounds checking on
                  the index.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise returns &lt;code&gt;false&lt;/code&gt;
                  withour checking the value of &lt;code&gt;imageIndex&lt;/code&gt;.                
                <param>
                    imageIndex the index at which the image is to be
                      inserted.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if an image may be inserted at the
                      given index.                    
                </return>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the writer supports
                      image insertion in general, but &lt;code&gt;imageIndex&lt;/code&gt; is less
                      than -1 or greater than the largest available index.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the query.                    
                </exception>
            </javadoc>
            <method name="canInsertImage" type="boolean" line="941">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="942"/>
            </method>
            <javadoc line="948">
                Inserts a new image into an existing image stream.  Existing
                  images with an index greater than &lt;code&gt;imageIndex&lt;/code&gt; are
                  preserved, and their indices are each increased by 1.  A value
                  for &lt;code&gt;imageIndex&lt;/code&gt; of -1 may be used to signify an
                  index one larger than the previous largest index; that is, it
                  will cause the image to be logically appended to the end of the
                  sequence.  If the output is an &lt;code&gt;ImageOutputStream&lt;/code&gt;,
                  the entirety of the stream must be both readable and writeable.
                  &lt;p&gt; If &lt;code&gt;canInsertImage(imageIndex)&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;, an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.
                  &lt;p&gt; An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied
                  to control the writing process.  If &lt;code&gt;param&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, a default write param will be used.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    imageIndex the index at which to write the image.                    
                </param>
                <param>
                    image an &lt;code&gt;IIOImage&lt;/code&gt; object containing an
                      image, thumbnails, and metadata to be written.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; to use a default
                      &lt;code&gt;ImageWriteParam&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canInsertImage(imageIndex)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;image&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;imageIndex&lt;/code&gt;
                      is less than -1 or greater than the largest available index.                    
                </exception>
                <exception>
                    UnsupportedOperationException if &lt;code&gt;image&lt;/code&gt;
                      contains a &lt;code&gt;Raster&lt;/code&gt; and &lt;code&gt;canWriteRasters&lt;/code&gt;
                      returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="writeInsert" type="void" line="998">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <javadoc line="1004">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer supports the removal
                  of an existing image at the given index.  Existing images with
                  indices greater than the insertion index will have
                  their indices decreased by 1.
                  &lt;p&gt; A writer that does not support any image removal may
                  return &lt;code&gt;false&lt;/code&gt; without performing bounds checking on
                  the index.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise returns &lt;code&gt;false&lt;/code&gt;
                  without checking the value of &lt;code&gt;imageIndex&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image to be removed.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if it is possible to remove the given
                      image.                    
                </return>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the writer supports
                      image removal in general, but &lt;code&gt;imageIndex&lt;/code&gt; is less
                      than 0 or greater than the largest available index.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the
                      query.                    
                </exception>
            </javadoc>
            <method name="canRemoveImage" type="boolean" line="1032">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="1033"/>
            </method>
            <javadoc line="1039">
                Removes an image from the stream.
                  &lt;p&gt; If &lt;code&gt;canRemoveImage(imageIndex)&lt;/code&gt; returns false,
                  an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;will be thrown.
                  &lt;p&gt; The removal may or may not cause a reduction in the actual
                  file size.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image to be removed.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canRemoveImage(imageIndex)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;imageIndex&lt;/code&gt;
                      is less than 0 or greater than the largest available index.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the
                      removal.                    
                </exception>
            </javadoc>
            <method name="removeImage" type="void" line="1064">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1070">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer supports the writing of
                  a complete image stream consisting of a single image with
                  undefined pixel values and associated metadata and thumbnails
                  to the output.  The pixel values may be defined by future
                  calls to the &lt;code&gt;replacePixels&lt;/code&gt; methods.  If the output
                  is an &lt;code&gt;ImageOutputStream&lt;/code&gt;, its existing contents
                  prior to the current seek position are not affected, and need
                  not be readable or writable.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise returns &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the writing of complete image
                      stream with contents to be defined later is supported.                    
                </return>
                <exception>
                    IllegalStateException if the output has not been
                      set.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the
                      query.                    
                </exception>
            </javadoc>
            <method name="canWriteEmpty" type="boolean" line="1092">
                <scope line="1093"/>
            </method>
            <javadoc line="1099">
                Begins the writing of a complete image stream, consisting of a
                  single image with undefined pixel values and associated
                  metadata and thumbnails, to the output.  The pixel values will
                  be defined by future calls to the &lt;code&gt;replacePixels&lt;/code&gt;
                  methods.  If the output is an &lt;code&gt;ImageOutputStream&lt;/code&gt;,
                  its existing contents prior to the current seek position are
                  not affected, and need not be readable or writable.
                  &lt;p&gt; The writing is not complete until a call to
                  &lt;code&gt;endWriteEmpty&lt;/code&gt; occurs.  Calls to
                  &lt;code&gt;prepareReplacePixels&lt;/code&gt;, &lt;code&gt;replacePixels&lt;/code&gt;,
                  and &lt;code&gt;endReplacePixels&lt;/code&gt; may occur between calls to
                  &lt;code&gt;prepareWriteEmpty&lt;/code&gt; and &lt;code&gt;endWriteEmpty&lt;/code&gt;.
                  However, calls to &lt;code&gt;prepareWriteEmpty&lt;/code&gt; cannot be
                  nested, and calls to &lt;code&gt;prepareWriteEmpty&lt;/code&gt; and
                  &lt;code&gt;prepareInsertEmpty&lt;/code&gt; may not be interspersed.
                  &lt;p&gt; If &lt;code&gt;canWriteEmpty&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;,
                  an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.
                  &lt;p&gt; An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied
                  to control the writing process.  If &lt;code&gt;param&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, a default write param will be used.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    streamMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object representing
                      stream metadata, or &lt;code&gt;null&lt;/code&gt; to use default values.                    
                </param>
                <param>
                    imageType an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; describing
                      the layout of the image.                    
                </param>
                <param>
                    width the width of the image.                    
                </param>
                <param>
                    height the height of the image.                    
                </param>
                <param>
                    imageMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object
                      representing image metadata, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    thumbnails a &lt;code&gt;List&lt;/code&gt; of
                      &lt;code&gt;BufferedImage&lt;/code&gt; thumbnails for this image, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; to use a default
                      &lt;code&gt;ImageWriteParam&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canWriteEmpty&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if a previous call to
                      &lt;code&gt;prepareWriteEmpty&lt;/code&gt; has been made without a
                      corresponding call to &lt;code&gt;endWriteEmpty&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if a previous call to
                      &lt;code&gt;prepareInsertEmpty&lt;/code&gt; has been made without a
                      corresponding call to &lt;code&gt;endInsertEmpty&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;imageType&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;thumbnails&lt;/code&gt; contains
                      &lt;code&gt;null&lt;/code&gt; references or objects other than
                      &lt;code&gt;BufferedImage&lt;/code&gt;s.                    
                </exception>
                <exception>
                    IllegalArgumentException if width or height are less
                      than 1.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="prepareWriteEmpty" type="void" line="1172">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                    <param name="thumbnails" type="List<? extends BufferedImage>"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <javadoc line="1176">
                Completes the writing of a new image that was begun with a
                  prior call to &lt;code&gt;prepareWriteEmpty&lt;/code&gt;.
                  &lt;p&gt; If &lt;code&gt;canWriteEmpty()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;,
                  an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canWriteEmpty(imageIndex)&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if a previous call to
                      &lt;code&gt;prepareWriteEmpty&lt;/code&gt; without a corresponding call to
                      &lt;code&gt;endWriteEmpty&lt;/code&gt; has not been made.                    
                </exception>
                <exception>
                    IllegalStateException if a previous call to
                      &lt;code&gt;prepareInsertEmpty&lt;/code&gt; without a corresponding call to
                      &lt;code&gt;endInsertEmpty&lt;/code&gt; has been made.                    
                </exception>
                <exception>
                    IllegalStateException if a call to
                      &lt;code&gt;prepareReiplacePixels&lt;/code&gt; has been made without a
                      matching call to &lt;code&gt;endReplacePixels&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="endWriteEmpty" type="void" line="1204">
                <scope line="1205"/>
            </method>
            <javadoc line="1211">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer supports the insertion
                  of a new, empty image at the given index.  The pixel values of
                  the image are undefined, and may be specified in pieces using
                  the &lt;code&gt;replacePixels&lt;/code&gt; methods.  Existing images with
                  indices greater than or equal to the insertion index will have
                  their indices increased by 1.  A value for
                  &lt;code&gt;imageIndex&lt;/code&gt; of &lt;code&gt;-1&lt;/code&gt; may be used to
                  signify an index one larger than the current largest index.
                  &lt;p&gt; A writer that does not support insertion of empty images
                  may return &lt;code&gt;false&lt;/code&gt; without performing bounds
                  checking on the index.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise returns &lt;code&gt;false&lt;/code&gt;
                  without checking the value of &lt;code&gt;imageIndex&lt;/code&gt;.                
                <param>
                    imageIndex the index at which the image is to be
                      inserted.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if an empty image may be inserted at
                      the given index.                    
                </return>
                <exception>
                    IllegalStateException if the output has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the writer supports
                      empty image insertion in general, but &lt;code&gt;imageIndex&lt;/code&gt;
                      is less than -1 or greater than the largest available index.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the
                      query.                    
                </exception>
            </javadoc>
            <method name="canInsertEmpty" type="boolean" line="1244">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="1245"/>
            </method>
            <javadoc line="1251">
                Begins the insertion of a new image with undefined pixel values
                  into an existing image stream.  Existing images with an index
                  greater than &lt;code&gt;imageIndex&lt;/code&gt; are preserved, and their
                  indices are each increased by 1.  A value for
                  &lt;code&gt;imageIndex&lt;/code&gt; of -1 may be used to signify an index
                  one larger than the previous largest index; that is, it will
                  cause the image to be logically appended to the end of the
                  sequence.  If the output is an &lt;code&gt;ImageOutputStream&lt;/code&gt;,
                  the entirety of the stream must be both readable and writeable.
                  &lt;p&gt; The image contents may be
                  supplied later using the &lt;code&gt;replacePixels&lt;/code&gt; method.
                  The insertion is not complete until a call to
                  &lt;code&gt;endInsertEmpty&lt;/code&gt; occurs.  Calls to
                  &lt;code&gt;prepareReplacePixels&lt;/code&gt;, &lt;code&gt;replacePixels&lt;/code&gt;,
                  and &lt;code&gt;endReplacePixels&lt;/code&gt; may occur between calls to
                  &lt;code&gt;prepareInsertEmpty&lt;/code&gt; and
                  &lt;code&gt;endInsertEmpty&lt;/code&gt;.  However, calls to
                  &lt;code&gt;prepareInsertEmpty&lt;/code&gt; cannot be nested, and calls to
                  &lt;code&gt;prepareWriteEmpty&lt;/code&gt; and
                  &lt;code&gt;prepareInsertEmpty&lt;/code&gt; may not be interspersed.
                  &lt;p&gt; If &lt;code&gt;canInsertEmpty(imageIndex)&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;, an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.
                  &lt;p&gt; An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied
                  to control the writing process.  If &lt;code&gt;param&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, a default write param will be used.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    imageIndex the index at which to write the image.                    
                </param>
                <param>
                    imageType an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; describing
                      the layout of the image.                    
                </param>
                <param>
                    width the width of the image.                    
                </param>
                <param>
                    height the height of the image.                    
                </param>
                <param>
                    imageMetadata an &lt;code&gt;IIOMetadata&lt;/code&gt; object
                      representing image metadata, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    thumbnails a &lt;code&gt;List&lt;/code&gt; of
                      &lt;code&gt;BufferedImage&lt;/code&gt; thumbnails for this image, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; to use a default
                      &lt;code&gt;ImageWriteParam&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canInsertEmpty(imageIndex)&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;imageIndex&lt;/code&gt;
                      is less than -1 or greater than the largest available index.                    
                </exception>
                <exception>
                    IllegalStateException if a previous call to
                      &lt;code&gt;prepareInsertEmpty&lt;/code&gt; has been made without a
                      corresponding call to &lt;code&gt;endInsertEmpty&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if a previous call to
                      &lt;code&gt;prepareWriteEmpty&lt;/code&gt; has been made without a
                      corresponding call to &lt;code&gt;endWriteEmpty&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;imageType&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;thumbnails&lt;/code&gt; contains
                      &lt;code&gt;null&lt;/code&gt; references or objects other than
                      &lt;code&gt;BufferedImage&lt;/code&gt;s.                    
                </exception>
                <exception>
                    IllegalArgumentException if width or height are less
                      than 1.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="prepareInsertEmpty" type="void" line="1332">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                    <param name="thumbnails" type="List<? extends BufferedImage>"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <javadoc line="1336">
                Completes the insertion of a new image that was begun with a
                  prior call to &lt;code&gt;prepareInsertEmpty&lt;/code&gt;.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canInsertEmpty(imageIndex)&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if a previous call to
                      &lt;code&gt;prepareInsertEmpty&lt;/code&gt; without a corresponding call to
                      &lt;code&gt;endInsertEmpty&lt;/code&gt; has not been made.                    
                </exception>
                <exception>
                    IllegalStateException if a previous call to
                      &lt;code&gt;prepareWriteEmpty&lt;/code&gt; without a corresponding call to
                      &lt;code&gt;endWriteEmpty&lt;/code&gt; has been made.                    
                </exception>
                <exception>
                    IllegalStateException if a call to
                      &lt;code&gt;prepareReplacePixels&lt;/code&gt; has been made without a
                      matching call to &lt;code&gt;endReplacePixels&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="endInsertEmpty" type="void" line="1361"/>
            <javadoc line="1367">
                Returns &lt;code&gt;true&lt;/code&gt; if the writer allows pixels of the
                  given image to be replaced using the &lt;code&gt;replacePixels&lt;/code&gt;
                  methods.
                  &lt;p&gt; A writer that does not support any pixel replacement may
                  return &lt;code&gt;false&lt;/code&gt; without performing bounds checking on
                  the index.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise returns &lt;code&gt;false&lt;/code&gt;
                  without checking the value of &lt;code&gt;imageIndex&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image whose pixels are to be
                      replaced.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the pixels of the given
                      image can be replaced.                    
                </return>
                <exception>
                    IllegalStateException if the output has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the writer supports
                      pixel replacement in general, but &lt;code&gt;imageIndex&lt;/code&gt; is
                      less than 0 or greater than the largest available index.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the query.                    
                </exception>
            </javadoc>
            <method name="canReplacePixels" type="boolean" line="1394">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="1395"/>
            </method>
            <javadoc line="1401">
                Prepares the writer to handle a series of calls to the
                  &lt;code&gt;replacePixels&lt;/code&gt; methods.  The affected pixel area
                  will be clipped against the supplied
                  &lt;p&gt; If &lt;code&gt;canReplacePixels&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;, and
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    imageIndex the index of the image whose pixels are to be
                      replaced.                    
                </param>
                <param>
                    region a &lt;code&gt;Rectangle&lt;/code&gt; that will be used to clip
                      future pixel regions.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canReplacePixels(imageIndex)&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;imageIndex&lt;/code&gt;
                      is less than 0 or greater than the largest available index.                    
                </exception>
                <exception>
                    IllegalStateException if there is a previous call to
                      &lt;code&gt;prepareReplacePixels&lt;/code&gt; without a matching call to
                      &lt;code&gt;endReplacePixels&lt;/code&gt; (&lt;i&gt;i.e.&lt;/i&gt;, nesting is not
                      allowed).                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;region&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt; or has a width or height less than 1.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during the
                      preparation.                    
                </exception>
            </javadoc>
            <method name="prepareReplacePixels" type="void" line="1437">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="region" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="1441">
                Replaces a portion of an image already present in the output
                  with a portion of the given image.  The image data must match,
                  or be convertible to, the image layout of the existing image.
                  &lt;p&gt; The destination region is specified in the
                  &lt;code&gt;param&lt;/code&gt; argument, and will be clipped to the image
                  boundaries and the region supplied to
                  &lt;code&gt;prepareReplacePixels&lt;/code&gt;.  At least one pixel of the
                  source must not be clipped, or an exception is thrown.
                  &lt;p&gt; An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied
                  to control the writing process.  If &lt;code&gt;param&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, a default write param will be used.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; This method may only be called after a call to
                  &lt;code&gt;prepareReplacePixels&lt;/code&gt;, or else an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    image a &lt;code&gt;RenderedImage&lt;/code&gt; containing source
                      pixels.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; to use a default
                      &lt;code&gt;ImageWriteParam&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canReplacePixels(imageIndex)&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if there is no previous call to
                      &lt;code&gt;prepareReplacePixels&lt;/code&gt; without a matching call to
                      &lt;code&gt;endReplacePixels&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if any of the following are true:
                      &lt;ul&gt;
                      &lt;li&gt; &lt;code&gt;image&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                      &lt;li&gt; &lt;code&gt;param&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                      &lt;li&gt; the intersected region does not contain at least one pixel.
                      &lt;li&gt; the layout of &lt;code&gt;image&lt;/code&gt; does not match, or this
                      writer cannot convert it to, the existing image layout.
                      &lt;/ul&gt;                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="replacePixels" type="void" line="1495">
                <params>
                    <param name="image" type="RenderedImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <javadoc line="1499">
                Replaces a portion of an image already present in the output
                  with a portion of the given &lt;code&gt;Raster&lt;/code&gt;.  The image
                  data must match, or be convertible to, the image layout of the
                  existing image.
                  &lt;p&gt; An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied
                  to control the writing process.  If &lt;code&gt;param&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, a default write param will be used.
                  &lt;p&gt; The destination region is specified in the
                  &lt;code&gt;param&lt;/code&gt; argument, and will be clipped to the image
                  boundaries and the region supplied to
                  &lt;code&gt;prepareReplacePixels&lt;/code&gt;.  At least one pixel of the
                  source must not be clipped, or an exception is thrown.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not supported by this writer (&lt;i&gt;e.g.&lt;/i&gt;
                  progressive encoding or any format-specific settings), they
                  will be ignored.
                  &lt;p&gt; This method may only be called after a call to
                  &lt;code&gt;prepareReplacePixels&lt;/code&gt;, or else an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    raster a &lt;code&gt;Raster&lt;/code&gt; containing source
                      pixels.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; to use a default
                      &lt;code&gt;ImageWriteParam&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canReplacePixels(imageIndex)&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if there is no previous call to
                      &lt;code&gt;prepareReplacePixels&lt;/code&gt; without a matching call to
                      &lt;code&gt;endReplacePixels&lt;/code&gt;.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canWriteRasters&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if any of the following are true:
                      &lt;ul&gt;
                      &lt;li&gt; &lt;code&gt;raster&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                      &lt;li&gt; &lt;code&gt;param&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                      &lt;li&gt; the intersected region does not contain at least one pixel.
                      &lt;li&gt; the layout of &lt;code&gt;raster&lt;/code&gt; does not match, or this
                      writer cannot convert it to, the existing image layout.
                      &lt;/ul&gt;                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="replacePixels" type="void" line="1556">
                <params>
                    <param name="raster" type="Raster"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <javadoc line="1560">
                Terminates a sequence of calls to &lt;code&gt;replacePixels&lt;/code&gt;.
                  &lt;p&gt; If &lt;code&gt;canReplacePixels&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;, and
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The default implementation throws an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the output is
                  &lt;code&gt;null&lt;/code&gt;, and otherwise throws an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <exception>
                    IllegalStateException if the output has not
                      been set.                    
                </exception>
                <exception>
                    UnsupportedOperationException if
                      &lt;code&gt;canReplacePixels(imageIndex)&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalStateException if there is no previous call
                      to &lt;code&gt;prepareReplacePixels&lt;/code&gt; without a matching call to
                      &lt;code&gt;endReplacePixels&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs during writing.                    
                </exception>
            </javadoc>
            <method name="endReplacePixels" type="void" line="1582"/>
            <javadoc line="1588">
                Requests that any current write operation be aborted.  The
                  contents of the output following the abort will be undefined.
                  &lt;p&gt; Writers should call &lt;code&gt;clearAbortRequest&lt;/code&gt; at the
                  beginning of each write operation, and poll the value of
                  &lt;code&gt;abortRequested&lt;/code&gt; regularly during the write.                
            </javadoc>
            <method name="abort" type="void" line="1596"/>
            <javadoc line="1600">
                Returns &lt;code&gt;true&lt;/code&gt; if a request to abort the current
                  write operation has been made since the writer was instantiated or
                  &lt;code&gt;clearAbortRequest&lt;/code&gt; was called.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the current write operation should
                      be aborted.                    
                </return>
                <see>
                    #abort                    
                </see>
                <see>
                    #clearAbortRequest                    
                </see>
            </javadoc>
            <method name="abortRequested" type="boolean" line="1611"/>
            <javadoc line="1615">
                Clears any previous abort request.  After this method has been
                  called, &lt;code&gt;abortRequested&lt;/code&gt; will return
                  &lt;code&gt;false&lt;/code&gt;.                
                <see>
                    #abort                    
                </see>
                <see>
                    #abortRequested                    
                </see>
            </javadoc>
            <method name="clearAbortRequest" type="void" line="1623"/>
            <javadoc line="1629">
                Adds an &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; to the list of
                  registered warning listeners.  If &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.  Messages sent to the given listener will be
                  localized, if possible, to match the current
                  &lt;code&gt;Locale&lt;/code&gt;.  If no &lt;code&gt;Locale&lt;/code&gt; has been set,
                  warning messages may be localized as the writer sees fit.                
                <param>
                    listener an &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; to be
                      registered.                    
                </param>
                <see>
                    #removeIIOWriteWarningListener                    
                </see>
            </javadoc>
            <method name="addIIOWriteWarningListener" type="void" line="1643">
                <params>
                    <param name="listener" type="IIOWriteWarningListener"/>
                </params>
                <scope line="1644"/>
            </method>
            <javadoc line="1651">
                Removes an &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; from the list
                  of registered warning listeners.  If the listener was not
                  previously registered, or if &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.                
                <param>
                    listener an &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; to be
                      deregistered.                    
                </param>
                <see>
                    #addIIOWriteWarningListener                    
                </see>
            </javadoc>
            <method name="removeIIOWriteWarningListener" type="void" line="1664">
                <params>
                    <param name="listener" type="IIOWriteWarningListener"/>
                </params>
                <scope line="1665"/>
                <declaration name="index" type="int" line="1668"/>
                <scope line="1669">
                    <scope line="1672"/>
                </scope>
            </method>
            <javadoc line="1679">
                Removes all currently registered
                  &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; objects.
                  &lt;p&gt; The default implementation sets the
                  &lt;code&gt;warningListeners&lt;/code&gt; and &lt;code&gt;warningLocales&lt;/code&gt;
                  instance variables to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="removeAllIIOWriteWarningListeners" type="void" line="1687"/>
            <javadoc line="1692">
                Adds an &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; to the list of
                  registered progress listeners.  If &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.                
                <param>
                    listener an &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; to be
                      registered.                    
                </param>
                <see>
                    #removeIIOWriteProgressListener                    
                </see>
            </javadoc>
            <method name="addIIOWriteProgressListener" type="void" line="1704">
                <params>
                    <param name="listener" type="IIOWriteProgressListener"/>
                </params>
                <scope line="1705"/>
            </method>
            <javadoc line="1711">
                Removes an &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; from the list
                  of registered progress listeners.  If the listener was not
                  previously registered, or if &lt;code&gt;listener&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, no exception will be thrown and no action
                  will be taken.                
                <param>
                    listener an &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; to be
                      deregistered.                    
                </param>
                <see>
                    #addIIOWriteProgressListener                    
                </see>
            </javadoc>
            <method name="removeIIOWriteProgressListener" type="void" line="1724">
                <params>
                    <param name="listener" type="IIOWriteProgressListener"/>
                </params>
                <scope line="1725"/>
            </method>
            <javadoc line="1732">
                Removes all currently registered
                  &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; objects.
                  &lt;p&gt; The default implementation sets the
                  &lt;code&gt;progressListeners&lt;/code&gt; instance variable to
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="removeAllIIOWriteProgressListeners" type="void" line="1740"/>
            <javadoc line="1744">
                Broadcasts the start of an image write to all registered
                  &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;imageStarted&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    imageIndex the index of the image about to be written.                    
                </param>
            </javadoc>
            <method name="processImageStarted" type="void" line="1752">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="1753"/>
                <declaration name="numListeners" type="int" line="1756"/>
                <scope line="1757">
                    <declaration name="listener" type="IIOWriteProgressListener" line="1758"/>
                </scope>
            </method>
            <javadoc line="1764">
                Broadcasts the current percentage of image completion to all
                  registered &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s by calling
                  their &lt;code&gt;imageProgress&lt;/code&gt; method.  Subclasses may use
                  this method as a convenience.                
                <param>
                    percentageDone the current percentage of completion,
                      as a &lt;code&gt;float&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="processImageProgress" type="void" line="1773">
                <params>
                    <param name="percentageDone" type="float"/>
                </params>
                <scope line="1774"/>
                <declaration name="numListeners" type="int" line="1777"/>
                <scope line="1778">
                    <declaration name="listener" type="IIOWriteProgressListener" line="1779"/>
                </scope>
            </method>
            <javadoc line="1785">
                Broadcasts the completion of an image write to all registered
                  &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;imageComplete&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
            </javadoc>
            <method name="processImageComplete" type="void" line="1791">
                <scope line="1792"/>
                <declaration name="numListeners" type="int" line="1795"/>
                <scope line="1796">
                    <declaration name="listener" type="IIOWriteProgressListener" line="1797"/>
                </scope>
            </method>
            <javadoc line="1803">
                Broadcasts the start of a thumbnail write to all registered
                  &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;thumbnailStarted&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    imageIndex the index of the image associated with the
                      thumbnail.                    
                </param>
                <param>
                    thumbnailIndex the index of the thumbnail.                    
                </param>
            </javadoc>
            <method name="processThumbnailStarted" type="void" line="1814">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="thumbnailIndex" type="int"/>
                </params>
                <scope line="1815"/>
                <declaration name="numListeners" type="int" line="1818"/>
                <scope line="1819">
                    <declaration name="listener" type="IIOWriteProgressListener" line="1820"/>
                </scope>
            </method>
            <javadoc line="1826">
                Broadcasts the current percentage of thumbnail completion to
                  all registered &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s by calling
                  their &lt;code&gt;thumbnailProgress&lt;/code&gt; method.  Subclasses may
                  use this method as a convenience.                
                <param>
                    percentageDone the current percentage of completion,
                      as a &lt;code&gt;float&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="processThumbnailProgress" type="void" line="1835">
                <params>
                    <param name="percentageDone" type="float"/>
                </params>
                <scope line="1836"/>
                <declaration name="numListeners" type="int" line="1839"/>
                <scope line="1840">
                    <declaration name="listener" type="IIOWriteProgressListener" line="1841"/>
                </scope>
            </method>
            <javadoc line="1847">
                Broadcasts the completion of a thumbnail write to all registered
                  &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;thumbnailComplete&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
            </javadoc>
            <method name="processThumbnailComplete" type="void" line="1853">
                <scope line="1854"/>
                <declaration name="numListeners" type="int" line="1857"/>
                <scope line="1858">
                    <declaration name="listener" type="IIOWriteProgressListener" line="1859"/>
                </scope>
            </method>
            <javadoc line="1865">
                Broadcasts that the write has been aborted to all registered
                  &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s by calling their
                  &lt;code&gt;writeAborted&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
            </javadoc>
            <method name="processWriteAborted" type="void" line="1871">
                <scope line="1872"/>
                <declaration name="numListeners" type="int" line="1875"/>
                <scope line="1876">
                    <declaration name="listener" type="IIOWriteProgressListener" line="1877"/>
                </scope>
            </method>
            <javadoc line="1883">
                Broadcasts a warning message to all registered
                  &lt;code&gt;IIOWriteWarningListener&lt;/code&gt;s by calling their
                  &lt;code&gt;warningOccurred&lt;/code&gt; method.  Subclasses may use this
                  method as a convenience.                
                <param>
                    imageIndex the index of the image on which the warning
                      occurred.                    
                </param>
                <param>
                    warning the warning message.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;warning&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="processWarningOccurred" type="void" line="1897">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="warning" type="String"/>
                </params>
                <scope line="1898"/>
                <scope line="1901"/>
                <declaration name="numListeners" type="int" line="1904"/>
                <scope line="1905">
                    <declaration name="listener" type="IIOWriteWarningListener" line="1906"/>
                </scope>
            </method>
            <javadoc line="1913">
                Broadcasts a localized warning message to all registered
                  &lt;code&gt;IIOWriteWarningListener&lt;/code&gt;s by calling their
                  &lt;code&gt;warningOccurred&lt;/code&gt; method with a string taken
                  from a &lt;code&gt;ResourceBundle&lt;/code&gt;.  Subclasses may use this
                  method as a convenience.                
                <param>
                    imageIndex the index of the image on which the warning
                      occurred.                    
                </param>
                <param>
                    baseName the base name of a set of
                      &lt;code&gt;ResourceBundle&lt;/code&gt;s containing localized warning
                      messages.                    
                </param>
                <param>
                    keyword the keyword used to index the warning message
                      within the set of &lt;code&gt;ResourceBundle&lt;/code&gt;s.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;baseName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;keyword&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if no appropriate
                      &lt;code&gt;ResourceBundle&lt;/code&gt; may be located.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named resource is
                      not found in the located &lt;code&gt;ResourceBundle&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if the object retrieved
                      from the &lt;code&gt;ResourceBundle&lt;/code&gt; is not a
                      &lt;code&gt;String&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="processWarningOccurred" type="void" line="1942">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="baseName" type="String"/>
                    <param name="keyword" type="String"/>
                </params>
                <comment line="1962">
                    If an applet supplies an implementation of ImageWriter and
                     resource bundles, then the resource bundle will need to be
                     accessed via the applet class loader. So first try the context
                     class loader to locate the resource bundle.
                     If that throws MissingResourceException, then try the
                     system class loader.                    
                </comment>
                <scope line="1943"/>
                <scope line="1946"/>
                <scope line="1949"/>
                <declaration name="numListeners" type="int" line="1952"/>
                <scope line="1953">
                    <declaration name="listener" type="IIOWriteWarningListener" line="1954"/>
                    <declaration name="locale" type="Locale" line="1956"/>
                    <scope line="1957"/>
                    <anonymous_class line="1971">
                        <method name="run" type="Object" line="1972"/>
                    </anonymous_class>
                    <declaration name="loader" type="ClassLoader" line="1969"/>
                    <declaration name="bundle" type="ResourceBundle" line="1977"/>
                    <scope line="1978"/>
                    <scope line="1980">
                        <scope line="1981"/>
                        <scope line="1983"/>
                    </scope>
                    <declaration name="warning" type="String" line="1988"/>
                    <scope line="1989"/>
                    <scope line="1991"/>
                    <scope line="1993"/>
                </scope>
            </method>
            <javadoc line="2003">
                Restores the &lt;code&gt;ImageWriter&lt;/code&gt; to its initial state.
                  &lt;p&gt; The default implementation calls
                  &lt;code&gt;setOutput(null)&lt;/code&gt;, &lt;code&gt;setLocale(null)&lt;/code&gt;,
                  &lt;code&gt;removeAllIIOWriteWarningListeners()&lt;/code&gt;,
                  &lt;code&gt;removeAllIIOWriteProgressListeners()&lt;/code&gt;, and
                  &lt;code&gt;clearAbortRequest&lt;/code&gt;.                
            </javadoc>
            <method name="reset" type="void" line="2012"/>
            <javadoc line="2020">
                Allows any resources held by this object to be released.  The
                  result of calling any other method (other than
                  &lt;code&gt;finalize&lt;/code&gt;) subsequent to a call to this method
                  is undefined.
                  &lt;p&gt;It is important for applications to call this method when they
                  know they will no longer be using this &lt;code&gt;ImageWriter&lt;/code&gt;.
                  Otherwise, the writer may continue to hold on to resources
                  indefinitely.
                  &lt;p&gt;The default implementation of this method in the superclass does
                  nothing.  Subclass implementations should ensure that all resources,
                  especially native resources, are released.                
            </javadoc>
            <method name="dispose" type="void" line="2035"/>
        </class>
    </source>