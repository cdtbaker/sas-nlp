<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.plugins.jpeg">
        <import package="java.util.Arrays"/>
        <class name="JPEGQTable" line="30">
            <javadoc line="30">
                A class encapsulating a single JPEG quantization table.
                  The elements appear in natural order (as opposed to zig-zag order).
                  Static variables are provided for the &quot;standard&quot; tables taken from
                  Annex K of the JPEG specification, as well as the default tables
                  conventionally used for visually lossless encoding.
                  &lt;p&gt;
                  For more information about the operation of the standard JPEG plug-in,
                  see the &lt;A HREF=&quot;../../metadata/doc-files/jpeg_metadata.html&quot;&gt;JPEG
                  metadata format specification and usage notes&lt;/A&gt;                
            </javadoc>
            <declaration name="k1" type="int[]" line="44"/>
            <declaration name="k1div2" type="int[]" line="55"/>
            <declaration name="k2" type="int[]" line="66"/>
            <declaration name="k2div2" type="int[]" line="77"/>
            <declaration name="K1Luminance" type="JPEGQTable" line="88"/>
            <javadoc line="88">
                The sample luminance quantization table given in the JPEG
                  specification, table K.1. According to the specification,
                  these values produce &quot;good&quot; quality output.                
                <see>
                    #K1Div2Luminance                    
                </see>
            </javadoc>
            <declaration name="K1Div2Luminance" type="JPEGQTable" line="97"/>
            <javadoc line="97">
                The sample luminance quantization table given in the JPEG
                  specification, table K.1, with all elements divided by 2.
                  According to the specification, these values produce &quot;very good&quot;
                  quality output. This is the table usually used for &quot;visually lossless&quot;
                  encoding, and is the default luminance table used if the default
                  tables and quality settings are used.                
                <see>
                    #K1Luminance                    
                </see>
            </javadoc>
            <declaration name="K2Chrominance" type="JPEGQTable" line="109"/>
            <javadoc line="109">
                The sample chrominance quantization table given in the JPEG
                  specification, table K.2. According to the specification,
                  these values produce &quot;good&quot; quality output.                
                <see>
                    #K2Div2Chrominance                    
                </see>
            </javadoc>
            <declaration name="K2Div2Chrominance" type="JPEGQTable" line="118"/>
            <javadoc line="118">
                The sample chrominance quantization table given in the JPEG
                  specification, table K.1, with all elements divided by 2.
                  According to the specification, these values produce &quot;very good&quot;
                  quality output. This is the table usually used for &quot;visually lossless&quot;
                  encoding, and is the default chrominance table used if the default
                  tables and quality settings are used.                
                <see>
                    #K2Chrominance                    
                </see>
            </javadoc>
            <declaration name="qTable" type="int[]" line="130"/>
            <method name="JPEGQTable" type="constructor" line="132">
                <params>
                    <param name="table" type="int[]"/>
                    <param name="copy" type="boolean"/>
                </params>
            </method>
            <javadoc line="136">
                Constructs a quantization table from the argument, which must
                  contain 64 elements in natural order (not zig-zag order).
                  A copy is made of the the input array.                
                <param>
                    table the quantization table, as an &lt;code&gt;int&lt;/code&gt; array.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;table&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;table.length&lt;/code&gt; is not equal to 64.                    
                </throws>
            </javadoc>
            <method name="JPEGQTable" type="constructor" line="144">
                <params>
                    <param name="table" type="int[]"/>
                </params>
                <scope line="145"/>
                <scope line="148"/>
            </method>
            <javadoc line="154">
                Returns a copy of the current quantization table as an array
                  of {@code int}s in natural (not zig-zag) order.                
                <return>
                    A copy of the current quantization table.                    
                </return>
            </javadoc>
            <method name="getTable" type="int[]" line="159"/>
            <javadoc line="163">
                Returns a new quantization table where the values are multiplied
                  by &lt;code&gt;scaleFactor&lt;/code&gt; and then clamped to the range 1..32767
                  (or to 1..255 if &lt;code&gt;forceBaseline&lt;/code&gt; is true).
                  &lt;p&gt;
                  Values of &lt;code&gt;scaleFactor&lt;/code&gt; less than 1 tend to improve
                  the quality level of the table, and values greater than 1.0
                  degrade the quality level of the table.                
                <param>
                    scaleFactor multiplication factor for the table.                    
                </param>
                <param>
                    forceBaseline if &lt;code&gt;true&lt;/code&gt;,
                      the values will be clamped to the range 1..255                    
                </param>
                <return>
                    a new quantization table that is a linear multiple
                      of the current table.                    
                </return>
            </javadoc>
            <method name="getScaledInstance" type="JPEGQTable" line="178">
                <params>
                    <param name="scaleFactor" type="float"/>
                    <param name="forceBaseline" type="boolean"/>
                </params>
                <declaration name="max" type="int" line="179"/>
                <declaration name="scaledTable" type="int[]" line="180"/>
                <scope line="181">
                    <declaration name="sv" type="int" line="182"/>
                    <scope line="183"/>
                    <scope line="186"/>
                </scope>
            </method>
            <javadoc line="194">
                Returns a {@code String} representing this quantization table.                
                <return>
                    a {@code String} representing this quantization table.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="198">
                <declaration name="ls" type="String" line="199"/>
                <declaration name="sb" type="StringBuilder" line="200"/>
                <scope line="201">
                    <scope line="202"/>
                </scope>
            </method>
        </class>
    </source>