<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.plugins.jpeg">
        <import package="java.util.Locale"/>
        <import package="javax.imageio.ImageWriteParam"/>
        <import package="com.sun.imageio.plugins.jpeg.JPEG"/>
        <class name="JPEGImageWriteParam" line="5">
            <extends class="ImageWriteParam"/>
            <javadoc line="5">
                This class adds the ability to set JPEG quantization and Huffman
                  tables when using the built-in JPEG writer plug-in, and to request that
                  optimized Huffman tables be computed for an image.  An instance of
                  this class will be returned from the
                  &lt;code&gt;getDefaultImageWriteParam&lt;/code&gt; methods of the built-in JPEG
                  &lt;code&gt;ImageWriter&lt;/code&gt;.
                  &lt;p&gt; The principal purpose of these additions is to allow the
                  specification of tables to use in encoding abbreviated streams.
                  The built-in JPEG writer will also accept an ordinary
                  &lt;code&gt;ImageWriteParam&lt;/code&gt;, in which case the writer will
                  construct the necessary tables internally.
                  &lt;p&gt; In either case, the quality setting in an &lt;code&gt;ImageWriteParam&lt;/code&gt;
                  has the same meaning as for the underlying library: 1.00 means a
                  quantization table of all 1&apos;s, 0.75 means the &quot;standard&quot;, visually
                  lossless quantization table, and 0.00 means aquantization table of
                  all 255&apos;s.
                  &lt;p&gt; While tables for abbreviated streams are often specified by
                  first writing an abbreviated stream containing only the tables, in
                  some applications the tables are fixed ahead of time.  This class
                  allows the tables to be specified directly from client code.
                  &lt;p&gt; Normally, the tables are specified in the
                  &lt;code&gt;IIOMetadata&lt;/code&gt; objects passed in to the writer, and any
                  tables included in these objects are written to the stream.
                  If no tables are specified in the metadata, then an abbreviated
                  stream is written.  If no tables are included in the metadata and
                  no tables are specified in a &lt;code&gt;JPEGImageWriteParam&lt;/code&gt;, then
                  an abbreviated stream is encoded using the &quot;standard&quot; visually
                  lossless tables.  This class is necessary for specifying tables
                  when an abbreviated stream must be written without writing any tables
                  to a stream first.  In order to use this class, the metadata object
                  passed into the writer must contain no tables, and no stream metadata
                  must be provided.  See {@link JPEGQTable &lt;code&gt;JPEGQTable&lt;/code&gt;} and{@link JPEGHuffmanTable &lt;code&gt;JPEGHuffmanTable&lt;/code&gt;} for more
                  information on the default tables.
                  &lt;p&gt; The default &lt;code&gt;JPEGImageWriteParam&lt;/code&gt; returned by the
                  &lt;code&gt;getDefaultWriteParam&lt;/code&gt; method of the writer contains no
                  tables.  Default tables are included in the default
                  &lt;code&gt;IIOMetadata&lt;/code&gt; objects returned by the writer.
                  &lt;p&gt; If the metadata does contain tables, the tables given in a
                  &lt;code&gt;JPEGImageWriteParam&lt;/code&gt; are ignored.  Furthermore, once a
                  set of tables has been written, only tables in the metadata can
                  override them for subsequent writes, whether to the same stream or
                  a different one.  In order to specify new tables using this class,
                  the {@link javax.imageio.ImageWriter#reset &lt;code&gt;reset&lt;/code&gt;}method of the writer must be called.
                  &lt;p&gt;
                  For more information about the operation of the built-in JPEG plug-ins,
                  see the &lt;A HREF=&quot;../../metadata/doc-files/jpeg_metadata.html&quot;&gt;JPEG
                  metadata format specification and usage notes&lt;/A&gt;.                
            </javadoc>
            <declaration name="qTables" type="JPEGQTable[]" line="55"/>
            <declaration name="DCHuffmanTables" type="JPEGHuffmanTable[]" line="56"/>
            <declaration name="ACHuffmanTables" type="JPEGHuffmanTable[]" line="57"/>
            <declaration name="optimizeHuffman" type="boolean" line="58"/>
            <declaration name="compressionNames" type="String[]" line="59"/>
            <declaration name="qualityVals" type="float[]" line="60"/>
            <declaration name="qualityDescs" type="String[]" line="61"/>
            <javadoc line="62">
                Constructs a &lt;code&gt;JPEGImageWriteParam&lt;/code&gt;.  Tiling is not
                  supported.  Progressive encoding is supported. The default
                  progressive mode is MODE_DISABLED.  A single form of compression,
                  named &quot;JPEG&quot;, is supported.  The default compression quality is
                  0.75.                
                <param>
                    locale a &lt;code&gt;Locale&lt;/code&gt; to be used by the
                      superclass to localize compression type names and quality
                      descriptions, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="JPEGImageWriteParam" type="constructor" line="72">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="81">
                Removes any previous compression quality setting.
                  &lt;p&gt; The default implementation resets the compression quality
                  to &lt;code&gt;0.75F&lt;/code&gt;.                
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="unsetCompression" type="void" line="88">
                <scope line="89"/>
            </method>
            <javadoc line="94">
                Returns &lt;code&gt;false&lt;/code&gt; since the JPEG plug-in only supports
                  lossy compression.                
                <return>
                    &lt;code&gt;false&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException if the compression mode is not
                      &lt;code&gt;MODE_EXPLICIT&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="isCompressionLossless" type="boolean" line="101">
                <scope line="102"/>
            </method>
            <method name="getCompressionQualityDescriptions" type="String[]" line="107">
                <scope line="108"/>
                <scope line="111"/>
            </method>
            <method name="getCompressionQualityValues" type="float[]" line="116">
                <scope line="117"/>
                <scope line="120"/>
            </method>
            <javadoc line="125">
                Returns &lt;code&gt;true&lt;/code&gt; if tables are currently set.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if tables are present.                    
                </return>
            </javadoc>
            <method name="areTablesSet" type="boolean" line="129"/>
            <javadoc line="132">
                Sets the quantization and Huffman tables to use in encoding
                  abbreviated streams.  There may be a maximum of 4 tables of
                  each type.  These tables are ignored if tables are specified in
                  the metadata.  All arguments must be non-&lt;code&gt;null&lt;/code&gt;.
                  The two arrays of Huffman tables must have the same number of
                  elements.  The table specifiers in the frame and scan headers
                  in the metadata are assumed to be equivalent to indices into
                  these arrays.  The argument arrays are copied by this method.                
                <param>
                    qTables An array of quantization table objects.                    
                </param>
                <param>
                    DCHuffmanTables An array of Huffman table objects.                    
                </param>
                <param>
                    ACHuffmanTables An array of Huffman table objects.                    
                </param>
                <exception>
                    IllegalArgumentException if any of the arguments
                      is &lt;code&gt;null&lt;/code&gt; or has more than 4 elements, or if the
                      numbers of DC and AC tables differ.                    
                </exception>
                <see>
                    #unsetEncodeTables                    
                </see>
            </javadoc>
            <method name="setEncodeTables" type="void" line="149">
                <params>
                    <param name="qTables" type="JPEGQTable[]"/>
                    <param name="DCHuffmanTables" type="JPEGHuffmanTable[]"/>
                    <param name="ACHuffmanTables" type="JPEGHuffmanTable[]"/>
                </params>
                <scope line="150"/>
            </method>
            <javadoc line="157">
                Removes any quantization and Huffman tables that are currently
                  set.                
                <see>
                    #setEncodeTables                    
                </see>
            </javadoc>
            <method name="unsetEncodeTables" type="void" line="162"/>
            <javadoc line="167">
                Returns a copy of the array of quantization tables set on the
                  most recent call to &lt;code&gt;setEncodeTables&lt;/code&gt;, or
                  &lt;code&gt;null&lt;/code&gt; if tables are not currently set.                
                <return>
                    an array of &lt;code&gt;JPEGQTable&lt;/code&gt; objects, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #setEncodeTables                    
                </see>
            </javadoc>
            <method name="getQTables" type="JPEGQTable[]" line="175"/>
            <javadoc line="178">
                Returns a copy of the array of DC Huffman tables set on the
                  most recent call to &lt;code&gt;setEncodeTables&lt;/code&gt;, or
                  &lt;code&gt;null&lt;/code&gt; if tables are not currently set.                
                <return>
                    an array of &lt;code&gt;JPEGHuffmanTable&lt;/code&gt; objects, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #setEncodeTables                    
                </see>
            </javadoc>
            <method name="getDCHuffmanTables" type="JPEGHuffmanTable[]" line="186"/>
            <javadoc line="189">
                Returns a copy of the array of AC Huffman tables set on the
                  most recent call to &lt;code&gt;setEncodeTables&lt;/code&gt;, or
                  &lt;code&gt;null&lt;/code&gt; if tables are not currently set.                
                <return>
                    an array of &lt;code&gt;JPEGHuffmanTable&lt;/code&gt; objects, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #setEncodeTables                    
                </see>
            </javadoc>
            <method name="getACHuffmanTables" type="JPEGHuffmanTable[]" line="197"/>
            <javadoc line="200">
                Tells the writer to generate optimized Huffman tables
                  for the image as part of the writing process.  The
                  default is &lt;code&gt;false&lt;/code&gt;.  If this flag is set
                  to &lt;code&gt;true&lt;/code&gt;, it overrides any tables specified
                  in the metadata.  Note that this means that any image
                  written with this flag set to &lt;code&gt;true&lt;/code&gt; will
                  always contain Huffman tables.                
                <param>
                    optimize A boolean indicating whether to generate
                      optimized Huffman tables when writing.                    
                </param>
                <see>
                    #getOptimizeHuffmanTables                    
                </see>
            </javadoc>
            <method name="setOptimizeHuffmanTables" type="void" line="212">
                <params>
                    <param name="optimize" type="boolean"/>
                </params>
            </method>
            <javadoc line="215">
                Returns the value passed into the most recent call
                  to &lt;code&gt;setOptimizeHuffmanTables&lt;/code&gt;, or
                  &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;setOptimizeHuffmanTables&lt;/code&gt;
                  has never been called.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the writer will generate optimized
                      Huffman tables.                    
                </return>
                <see>
                    #setOptimizeHuffmanTables                    
                </see>
            </javadoc>
            <method name="getOptimizeHuffmanTables" type="boolean" line="224"/>
        </class>
    </source>