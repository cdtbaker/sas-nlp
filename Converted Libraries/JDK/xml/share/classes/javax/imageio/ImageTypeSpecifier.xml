<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio">
        <import package="java.awt.Point"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.BandedSampleModel"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.MultiPixelPackedSampleModel"/>
        <import package="java.awt.image.PixelInterleavedSampleModel"/>
        <import package="java.awt.image.SinglePixelPackedSampleModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.util.Hashtable"/>
        <class name="ImageTypeSpecifier" line="20">
            <javadoc line="20">
                A class that allows the format of an image (in particular, its
                  &lt;code&gt;SampleModel&lt;/code&gt; and &lt;code&gt;ColorModel&lt;/code&gt;) to be
                  specified in a convenient manner.                
            </javadoc>
            <declaration name="colorModel" type="ColorModel" line="26"/>
            <javadoc line="26">
                The &lt;code&gt;ColorModel&lt;/code&gt; to be used as a prototype.                
            </javadoc>
            <declaration name="sampleModel" type="SampleModel" line="30"/>
            <javadoc line="30">
                A &lt;code&gt;SampleModel&lt;/code&gt; to be used as a prototype.                
            </javadoc>
            <declaration name="BISpecifier" type="ImageTypeSpecifier[]" line="34"/>
            <javadoc line="34">
                Cached specifiers for all of the standard
                  &lt;code&gt;BufferedImage&lt;/code&gt; types.                
            </javadoc>
            <declaration name="sRGB" type="ColorSpace" line="39"/>
            <scope line="40"/>
            <javadoc line="44">
                A constructor to be used by inner subclasses only.                
            </javadoc>
            <method name="ImageTypeSpecifier" type="constructor" line="47"/>
            <javadoc line="49">
                Constructs an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; directly
                  from a &lt;code&gt;ColorModel&lt;/code&gt; and a &lt;code&gt;SampleModel&lt;/code&gt;.
                  It is the caller&apos;s responsibility to supply compatible
                  parameters.                
                <param>
                    colorModel a &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </param>
                <param>
                    sampleModel a &lt;code&gt;SampleModel&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if either parameter is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;sampleModel&lt;/code&gt;
                      is not compatible with &lt;code&gt;colorModel&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="ImageTypeSpecifier" type="constructor" line="61">
                <params>
                    <param name="colorModel" type="ColorModel"/>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <scope line="62"/>
                <scope line="65"/>
                <scope line="68"/>
            </method>
            <javadoc line="74">
                Constructs an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; from a
                  &lt;code&gt;RenderedImage&lt;/code&gt;.  If a &lt;code&gt;BufferedImage&lt;/code&gt; is
                  being used, one of the factory methods
                  &lt;code&gt;createFromRenderedImage&lt;/code&gt; or
                  &lt;code&gt;createFromBufferedImageType&lt;/code&gt; should be used instead in
                  order to get a more accurate result.                
                <param>
                    image a &lt;code&gt;RenderedImage&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if the argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="ImageTypeSpecifier" type="constructor" line="85">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <scope line="86"/>
            </method>
            <class name="Packed" line="92">
                <extends class="ImageTypeSpecifier"/>
                <declaration name="colorSpace" type="ColorSpace" line="93"/>
                <declaration name="redMask" type="int" line="94"/>
                <declaration name="greenMask" type="int" line="95"/>
                <declaration name="blueMask" type="int" line="96"/>
                <declaration name="alphaMask" type="int" line="97"/>
                <declaration name="transferType" type="int" line="98"/>
                <declaration name="isAlphaPremultiplied" type="boolean" line="99"/>
                <method name="Packed" type="constructor" line="100">
                    <params>
                        <param name="colorSpace" type="ColorSpace"/>
                        <param name="redMask" type="int"/>
                        <param name="greenMask" type="int"/>
                        <param name="blueMask" type="int"/>
                        <param name="alphaMask" type="int"/>
                        <param name="transferType" type="int"/>
                        <param name="isAlphaPremultiplied" type="boolean"/>
                    </params>
                    <scope line="101"/>
                    <scope line="104"/>
                    <scope line="107"/>
                    <scope line="110"/>
                    <declaration name="bits" type="int" line="120"/>
                </method>
            </class>
            <javadoc line="125">
                Returns a specifier for a packed image format that will use a
                  &lt;code&gt;DirectColorModel&lt;/code&gt; and a packed
                  &lt;code&gt;SampleModel&lt;/code&gt; to store each pixel packed into in a
                  single byte, short, or int.                
                <param>
                    colorSpace the desired &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </param>
                <param>
                    redMask a contiguous mask indicated the position of the
                      red channel.                    
                </param>
                <param>
                    greenMask a contiguous mask indicated the position of the
                      green channel.                    
                </param>
                <param>
                    blueMask a contiguous mask indicated the position of the
                      blue channel.                    
                </param>
                <param>
                    alphaMask a contiguous mask indicated the position of the
                      alpha channel.                    
                </param>
                <param>
                    transferType the desired &lt;code&gt;SampleModel&lt;/code&gt; transfer type.                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the color channels
                      will be premultipled by the alpha channel.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;colorSpace&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;colorSpace&lt;/code&gt;
                      is not of type &lt;code&gt;TYPE_RGB&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if no mask has at least 1
                      bit set.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;transferType&lt;/code&gt; if not one of
                      &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;, or
                      &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createPacked" type="ImageTypeSpecifier" line="156">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="redMask" type="int"/>
                    <param name="greenMask" type="int"/>
                    <param name="blueMask" type="int"/>
                    <param name="alphaMask" type="int"/>
                    <param name="transferType" type="int"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
            </method>
            <method name="createComponentCM" type="ColorModel" line="159">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="numBands" type="int"/>
                    <param name="dataType" type="int"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
                <declaration name="transparency" type="int" line="160"/>
                <declaration name="numBits" type="int[]" line="161"/>
                <declaration name="bits" type="int" line="162"/>
                <scope line="163"/>
            </method>
            <class name="Interleaved" line="168">
                <extends class="ImageTypeSpecifier"/>
                <declaration name="colorSpace" type="ColorSpace" line="169"/>
                <declaration name="bandOffsets" type="int[]" line="170"/>
                <declaration name="dataType" type="int" line="171"/>
                <declaration name="hasAlpha" type="boolean" line="172"/>
                <declaration name="isAlphaPremultiplied" type="boolean" line="173"/>
                <method name="Interleaved" type="constructor" line="174">
                    <params>
                        <param name="colorSpace" type="ColorSpace"/>
                        <param name="bandOffsets" type="int[]"/>
                        <param name="dataType" type="int"/>
                        <param name="hasAlpha" type="boolean"/>
                        <param name="isAlphaPremultiplied" type="boolean"/>
                    </params>
                    <scope line="175"/>
                    <scope line="178"/>
                    <declaration name="numBands" type="int" line="181"/>
                    <scope line="182"/>
                    <scope line="185"/>
                    <declaration name="minBandOffset" type="int" line="194"/>
                    <declaration name="maxBandOffset" type="int" line="195"/>
                    <scope line="196">
                        <declaration name="offset" type="int" line="197"/>
                    </scope>
                    <declaration name="pixelStride" type="int" line="201"/>
                    <declaration name="w" type="int" line="202"/>
                    <declaration name="h" type="int" line="203"/>
                </method>
                <method name="equals" type="boolean" line="206">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="207"/>
                    <declaration name="that" type="ImageTypeSpecifier.Interleaved" line="210"/>
                    <scope line="211"/>
                    <scope line="214">
                        <scope line="215"/>
                    </scope>
                </method>
                <method name="hashCode" type="int" line="221"/>
            </class>
            <javadoc line="225">
                Returns a specifier for an interleaved image format that will
                  use a &lt;code&gt;ComponentColorModel&lt;/code&gt; and a
                  &lt;code&gt;PixelInterleavedSampleModel&lt;/code&gt; to store each pixel
                  component in a separate byte, short, or int.                
                <param>
                    colorSpace the desired &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </param>
                <param>
                    bandOffsets an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      offsets for each band.                    
                </param>
                <param>
                    dataType the desired data type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <param>
                    hasAlpha &lt;code&gt;true&lt;/code&gt; if an alpha channel is desired.                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the color channels
                      will be premultipled by the alpha channel.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;colorSpace&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bandOffsets&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of the legal &lt;code&gt;DataBuffer.TYPE_&lt;/code&gt; constants.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;bandOffsets.length&lt;/code&gt; does not equal the number of
                      color space components, plus 1 if &lt;code&gt;hasAlpha&lt;/code&gt; is
                      &lt;code&gt;true&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createInterleaved" type="ImageTypeSpecifier" line="251">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="bandOffsets" type="int[]"/>
                    <param name="dataType" type="int"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
            </method>
            <class name="Banded" line="254">
                <extends class="ImageTypeSpecifier"/>
                <declaration name="colorSpace" type="ColorSpace" line="255"/>
                <declaration name="bankIndices" type="int[]" line="256"/>
                <declaration name="bandOffsets" type="int[]" line="257"/>
                <declaration name="dataType" type="int" line="258"/>
                <declaration name="hasAlpha" type="boolean" line="259"/>
                <declaration name="isAlphaPremultiplied" type="boolean" line="260"/>
                <method name="Banded" type="constructor" line="261">
                    <params>
                        <param name="colorSpace" type="ColorSpace"/>
                        <param name="bankIndices" type="int[]"/>
                        <param name="bandOffsets" type="int[]"/>
                        <param name="dataType" type="int"/>
                        <param name="hasAlpha" type="boolean"/>
                        <param name="isAlphaPremultiplied" type="boolean"/>
                    </params>
                    <scope line="262"/>
                    <scope line="265"/>
                    <scope line="268"/>
                    <scope line="271"/>
                    <scope line="274"/>
                    <declaration name="numBands" type="int" line="277"/>
                    <scope line="278"/>
                    <declaration name="w" type="int" line="288"/>
                    <declaration name="h" type="int" line="289"/>
                </method>
                <method name="equals" type="boolean" line="292">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="293"/>
                    <declaration name="that" type="ImageTypeSpecifier.Banded" line="296"/>
                    <scope line="297"/>
                    <scope line="300">
                        <scope line="301"/>
                    </scope>
                    <scope line="305">
                        <scope line="306"/>
                    </scope>
                </method>
                <method name="hashCode" type="int" line="312"/>
            </class>
            <javadoc line="316">
                Returns a specifier for a banded image format that will use a
                  &lt;code&gt;ComponentColorModel&lt;/code&gt; and a
                  &lt;code&gt;BandedSampleModel&lt;/code&gt; to store each channel in a
                  separate array.                
                <param>
                    colorSpace the desired &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </param>
                <param>
                    bankIndices an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      bank in which each band will be stored.                    
                </param>
                <param>
                    bandOffsets an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      starting offset of each band within its bank.                    
                </param>
                <param>
                    dataType the desired data type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <param>
                    hasAlpha &lt;code&gt;true&lt;/code&gt; if an alpha channel is desired.                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the color channels
                      will be premultipled by the alpha channel.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;colorSpace&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bankIndices&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bandOffsets&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if the lengths of
                      &lt;code&gt;bankIndices&lt;/code&gt; and &lt;code&gt;bandOffsets&lt;/code&gt; differ.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;bandOffsets.length&lt;/code&gt; does not equal the number of
                      color space components, plus 1 if &lt;code&gt;hasAlpha&lt;/code&gt; is
                      &lt;code&gt;true&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of the legal &lt;code&gt;DataBuffer.TYPE_&lt;/code&gt; constants.                    
                </exception>
            </javadoc>
            <method name="createBanded" type="ImageTypeSpecifier" line="348">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="bankIndices" type="int[]"/>
                    <param name="bandOffsets" type="int[]"/>
                    <param name="dataType" type="int"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
            </method>
            <class name="Grayscale" line="351">
                <extends class="ImageTypeSpecifier"/>
                <declaration name="bits" type="int" line="352"/>
                <declaration name="dataType" type="int" line="353"/>
                <declaration name="isSigned" type="boolean" line="354"/>
                <declaration name="hasAlpha" type="boolean" line="355"/>
                <declaration name="isAlphaPremultiplied" type="boolean" line="356"/>
                <method name="Grayscale" type="constructor" line="357">
                    <params>
                        <param name="bits" type="int"/>
                        <param name="dataType" type="int"/>
                        <param name="isSigned" type="boolean"/>
                        <param name="hasAlpha" type="boolean"/>
                        <param name="isAlphaPremultiplied" type="boolean"/>
                    </params>
                    <scope line="358"/>
                    <scope line="361"/>
                    <scope line="364"/>
                    <declaration name="colorSpace" type="ColorSpace" line="372"/>
                    <scope line="373">
                        <declaration name="numBands" type="int" line="374"/>
                        <declaration name="transparency" type="int" line="375"/>
                        <declaration name="nBits" type="int[]" line="376"/>
                        <scope line="378"/>
                        <declaration name="bandOffsets" type="int[]" line="382"/>
                        <scope line="384"/>
                        <declaration name="w" type="int" line="387"/>
                        <declaration name="h" type="int" line="388"/>
                    </scope>
                    <scope line="391">
                        <declaration name="numEntries" type="int" line="392"/>
                        <declaration name="arr" type="byte[]" line="393"/>
                        <scope line="394"/>
                    </scope>
                </method>
            </class>
            <javadoc line="402">
                Returns a specifier for a grayscale image format that will pack
                  pixels of the given bit depth into array elements of
                  the specified data type.                
                <param>
                    bits the number of bits per gray value (1, 2, 4, 8, or 16).                    
                </param>
                <param>
                    dataType the desired data type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <param>
                    isSigned &lt;code&gt;true&lt;/code&gt; if negative values are to
                      be represented.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      not one of 1, 2, 4, 8, or 16.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_SHORT&lt;/code&gt;, or
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      larger than the bit size of the given &lt;code&gt;dataType&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createGrayscale" type="ImageTypeSpecifier" line="422">
                <params>
                    <param name="bits" type="int"/>
                    <param name="dataType" type="int"/>
                    <param name="isSigned" type="boolean"/>
                </params>
            </method>
            <javadoc line="425">
                Returns a specifier for a grayscale plus alpha image format
                  that will pack pixels of the given bit depth into array
                  elements of the specified data type.                
                <param>
                    bits the number of bits per gray value (1, 2, 4, 8, or 16).                    
                </param>
                <param>
                    dataType the desired data type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <param>
                    isSigned &lt;code&gt;true&lt;/code&gt; if negative values are to
                      be represented.                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the luminance channel
                      will be premultipled by the alpha channel.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      not one of 1, 2, 4, 8, or 16.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_SHORT&lt;/code&gt;, or
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      larger than the bit size of the given &lt;code&gt;dataType&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createGrayscale" type="ImageTypeSpecifier" line="447">
                <params>
                    <param name="bits" type="int"/>
                    <param name="dataType" type="int"/>
                    <param name="isSigned" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
            </method>
            <class name="Indexed" line="450">
                <extends class="ImageTypeSpecifier"/>
                <declaration name="redLUT" type="byte[]" line="451"/>
                <declaration name="greenLUT" type="byte[]" line="452"/>
                <declaration name="blueLUT" type="byte[]" line="453"/>
                <declaration name="alphaLUT" type="byte[]" line="454"/>
                <declaration name="bits" type="int" line="455"/>
                <declaration name="dataType" type="int" line="456"/>
                <method name="Indexed" type="constructor" line="457">
                    <params>
                        <param name="redLUT" type="byte[]"/>
                        <param name="greenLUT" type="byte[]"/>
                        <param name="blueLUT" type="byte[]"/>
                        <param name="alphaLUT" type="byte[]"/>
                        <param name="bits" type="int"/>
                        <param name="dataType" type="int"/>
                    </params>
                    <scope line="458"/>
                    <scope line="461"/>
                    <scope line="464"/>
                    <scope line="467"/>
                    <declaration name="len" type="int" line="470"/>
                    <scope line="471"/>
                    <scope line="477"/>
                    <scope line="482"/>
                    <scope line="485"/>
                    <scope line="488">
                        <declaration name="bandOffsets" type="int[]" line="489"/>
                    </scope>
                    <scope line="492"/>
                </method>
            </class>
            <javadoc line="497">
                Returns a specifier for an indexed-color image format that will pack
                  index values of the given bit depth into array elements of
                  the specified data type.                
                <param>
                    redLUT an array of &lt;code&gt;byte&lt;/code&gt;s containing
                      the red values for each index.                    
                </param>
                <param>
                    greenLUT an array of &lt;code&gt;byte&lt;/code&gt;s containing  the
                      green values for each index.                    
                </param>
                <param>
                    blueLUT an array of &lt;code&gt;byte&lt;/code&gt;s containing the
                      blue values for each index.                    
                </param>
                <param>
                    alphaLUT an array of &lt;code&gt;byte&lt;/code&gt;s containing the
                      alpha values for each index, or &lt;code&gt;null&lt;/code&gt; to create a
                      fully opaque LUT.                    
                </param>
                <param>
                    bits the number of bits in each index.                    
                </param>
                <param>
                    dataType the desired output type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;redLUT&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;greenLUT&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;blueLUT&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      not one of 1, 2, 4, 8, or 16.                    
                </exception>
                <exception>
                    IllegalArgumentException if the
                      non-&lt;code&gt;null&lt;/code&gt; LUT parameters do not have lengths of
                      exactly &lt;code&gt;1 &lt;&lt; bits&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_SHORT&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;,
                      or &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      larger than the bit size of the given &lt;code&gt;dataType&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createIndexed" type="ImageTypeSpecifier" line="534">
                <params>
                    <param name="redLUT" type="byte[]"/>
                    <param name="greenLUT" type="byte[]"/>
                    <param name="blueLUT" type="byte[]"/>
                    <param name="alphaLUT" type="byte[]"/>
                    <param name="bits" type="int"/>
                    <param name="dataType" type="int"/>
                </params>
            </method>
            <javadoc line="537">
                Returns an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; that encodes
                  one of the standard &lt;code&gt;BufferedImage&lt;/code&gt; types
                  (other than &lt;code&gt;TYPE_CUSTOM&lt;/code&gt;).                
                <param>
                    bufferedImageType an int representing one of the standard
                      &lt;code&gt;BufferedImage&lt;/code&gt; types.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;bufferedImageType&lt;/code&gt; is not one of the standard
                      types, or is equal to &lt;code&gt;TYPE_CUSTOM&lt;/code&gt;.                    
                </exception>
                <see>
                    java.awt.image.BufferedImage                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_ARGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_BGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_3BYTE_BGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_4BYTE_ABGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_565_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_555_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_GRAY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_GRAY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_BINARY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_INDEXED                    
                </see>
            </javadoc>
            <method name="createFromBufferedImageType" type="ImageTypeSpecifier" line="563">
                <params>
                    <param name="bufferedImageType" type="int"/>
                </params>
                <scope line="564"/>
                <scope line="567"/>
                <scope line="570"/>
            </method>
            <javadoc line="574">
                Returns an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; that encodes the
                  layout of a &lt;code&gt;RenderedImage&lt;/code&gt; (which may be a
                  &lt;code&gt;BufferedImage&lt;/code&gt;).                
                <param>
                    image a &lt;code&gt;RenderedImage&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;image&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createFromRenderedImage" type="ImageTypeSpecifier" line="584">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <scope line="585"/>
                <scope line="588">
                    <declaration name="bufferedImageType" type="int" line="589"/>
                    <scope line="590"/>
                </scope>
            </method>
            <javadoc line="596">
                Returns an int containing one of the enumerated constant values
                  describing image formats from &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    an &lt;code&gt;int&lt;/code&gt; representing a
                      &lt;code&gt;BufferedImage&lt;/code&gt; type.                    
                </return>
                <see>
                    java.awt.image.BufferedImage                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_CUSTOM                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_ARGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_BGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_3BYTE_BGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_4BYTE_ABGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_565_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_555_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_GRAY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_GRAY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_BINARY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_INDEXED                    
                </see>
            </javadoc>
            <method name="getBufferedImageType" type="int" line="617">
                <declaration name="bi" type="BufferedImage" line="618"/>
            </method>
            <javadoc line="621">
                Return the number of color components
                  specified by this object.  This is the same value as returned by
                  &lt;code&gt;ColorModel.getNumComponents&lt;/code&gt;                
                <return>
                    the number of components in the image.                    
                </return>
            </javadoc>
            <method name="getNumComponents" type="int" line="627"/>
            <javadoc line="630">
                Return the number of bands
                  specified by this object.  This is the same value as returned by
                  &lt;code&gt;SampleModel.getNumBands&lt;/code&gt;                
                <return>
                    the number of bands in the image.                    
                </return>
            </javadoc>
            <method name="getNumBands" type="int" line="636"/>
            <javadoc line="639">
                Return the number of bits used to represent samples of the given band.                
                <param>
                    band the index of the band to be queried, as an
                      int.                    
                </param>
                <return>
                    an int specifying a number of bits.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;band&lt;/code&gt; is
                      negative or greater than the largest band index.                    
                </exception>
            </javadoc>
            <method name="getBitsPerBand" type="int" line="647">
                <params>
                    <param name="band" type="int"/>
                </params>
                <scope line="648"/>
            </method>
            <javadoc line="653">
                Returns a &lt;code&gt;SampleModel&lt;/code&gt; based on the settings
                  encapsulated within this object.  The width and height of the
                  &lt;code&gt;SampleModel&lt;/code&gt; will be set to arbitrary values.                
                <return>
                    a &lt;code&gt;SampleModel&lt;/code&gt; with arbitrary dimensions.                    
                </return>
            </javadoc>
            <method name="getSampleModel" type="SampleModel" line="659"/>
            <javadoc line="662">
                Returns a &lt;code&gt;SampleModel&lt;/code&gt; based on the settings
                  encapsulated within this object.  The width and height of the
                  &lt;code&gt;SampleModel&lt;/code&gt; will be set to the supplied values.                
                <param>
                    width the desired width of the returned &lt;code&gt;SampleModel&lt;/code&gt;.                    
                </param>
                <param>
                    height the desired height of the returned
                      &lt;code&gt;SampleModel&lt;/code&gt;.                    
                </param>
                <return>
                    a &lt;code&gt;SampleModel&lt;/code&gt; with the given dimensions.                    
                </return>
                <exception>
                    IllegalArgumentException if either &lt;code&gt;width&lt;/code&gt; or
                      &lt;code&gt;height&lt;/code&gt; are negative or zero.                    
                </exception>
                <exception>
                    IllegalArgumentException if the product of
                      &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; is greater than
                      &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="getSampleModel" type="SampleModel" line="676">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="677"/>
            </method>
            <javadoc line="682">
                Returns the &lt;code&gt;ColorModel&lt;/code&gt; specified by this object.                
                <return>
                    a &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="686"/>
            <javadoc line="689">
                Creates a &lt;code&gt;BufferedImage&lt;/code&gt; with a given width and
                  height according to the specification embodied in this object.                
                <param>
                    width the desired width of the returned
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </param>
                <param>
                    height the desired height of the returned
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </param>
                <return>
                    a new &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalArgumentException if either &lt;code&gt;width&lt;/code&gt; or
                      &lt;code&gt;height&lt;/code&gt; are negative or zero.                    
                </exception>
                <exception>
                    IllegalArgumentException if the product of
                      &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; is greater than
                      &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;, or if the number of array
                      elements needed to store the image is greater than
                      &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createBufferedImage" type="BufferedImage" line="705">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="706">
                    <declaration name="sampleModel" type="SampleModel" line="707"/>
                    <declaration name="raster" type="WritableRaster" line="708"/>
                </scope>
                <scope line="711"/>
            </method>
            <javadoc line="715">
                Returns &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;Object&lt;/code&gt; is
                  an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; and has a
                  &lt;code&gt;SampleModel&lt;/code&gt; and &lt;code&gt;ColorModel&lt;/code&gt; that are
                  equal to those of this object.                
                <param>
                    o the &lt;code&gt;Object&lt;/code&gt; to be compared for equality.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the given object is an equivalent
                      &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="724">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="725"/>
                <declaration name="that" type="ImageTypeSpecifier" line="728"/>
            </method>
            <javadoc line="731">
                Returns the hash code for this ImageTypeSpecifier.                
                <return>
                    a hash code for this ImageTypeSpecifier                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="735"/>
            <method name="getSpecifier" type="ImageTypeSpecifier" line="738">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="739"/>
            </method>
            <method name="createSpecifier" type="ImageTypeSpecifier" line="744">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="771">
                    <declaration name="bi" type="BufferedImage" line="772"/>
                    <declaration name="icm" type="IndexColorModel" line="773"/>
                    <declaration name="mapSize" type="int" line="774"/>
                    <declaration name="redLUT" type="byte[]" line="775"/>
                    <declaration name="greenLUT" type="byte[]" line="776"/>
                    <declaration name="blueLUT" type="byte[]" line="777"/>
                    <declaration name="alphaLUT" type="byte[]" line="778"/>
                </scope>
            </method>
        </class>
    </source>