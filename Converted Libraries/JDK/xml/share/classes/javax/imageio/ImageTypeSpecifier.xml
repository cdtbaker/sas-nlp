<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio">
        <import package="java.awt.Point"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.BandedSampleModel"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.MultiPixelPackedSampleModel"/>
        <import package="java.awt.image.PixelInterleavedSampleModel"/>
        <import package="java.awt.image.SinglePixelPackedSampleModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.util.Hashtable"/>
        <class name="ImageTypeSpecifier" line="47">
            <comment line="72">
                Initialize the standard specifiers                
            </comment>
            <comment line="135">
                Packed                
            </comment>
            <comment line="264">
                Interleaved                
            </comment>
            <comment line="407">
                Banded                
            </comment>
            <comment line="567">
                Grayscale                
            </comment>
            <comment line="730">
                Indexed                
            </comment>
            <javadoc line="47">
                A class that allows the format of an image (in particular, its
                  &lt;code&gt;SampleModel&lt;/code&gt; and &lt;code&gt;ColorModel&lt;/code&gt;) to be
                  specified in a convenient manner.                
            </javadoc>
            <declaration name="colorModel" type="ColorModel" line="55"/>
            <javadoc line="55">
                The &lt;code&gt;ColorModel&lt;/code&gt; to be used as a prototype.                
            </javadoc>
            <declaration name="sampleModel" type="SampleModel" line="60"/>
            <javadoc line="60">
                A &lt;code&gt;SampleModel&lt;/code&gt; to be used as a prototype.                
            </javadoc>
            <declaration name="BISpecifier" type="ImageTypeSpecifier[]" line="65"/>
            <javadoc line="65">
                Cached specifiers for all of the standard
                  &lt;code&gt;BufferedImage&lt;/code&gt; types.                
            </javadoc>
            <declaration name="sRGB" type="ColorSpace" line="70"/>
            <scope line="72"/>
            <javadoc line="79">
                A constructor to be used by inner subclasses only.                
            </javadoc>
            <method name="ImageTypeSpecifier" type="constructor" line="82"/>
            <javadoc line="84">
                Constructs an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; directly
                  from a &lt;code&gt;ColorModel&lt;/code&gt; and a &lt;code&gt;SampleModel&lt;/code&gt;.
                  It is the caller&apos;s responsibility to supply compatible
                  parameters.                
                <param>
                    colorModel a &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </param>
                <param>
                    sampleModel a &lt;code&gt;SampleModel&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if either parameter is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;sampleModel&lt;/code&gt;
                      is not compatible with &lt;code&gt;colorModel&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="ImageTypeSpecifier" type="constructor" line="98">
                <params>
                    <param name="colorModel" type="ColorModel"/>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <scope line="99"/>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <javadoc line="113">
                Constructs an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; from a
                  &lt;code&gt;RenderedImage&lt;/code&gt;.  If a &lt;code&gt;BufferedImage&lt;/code&gt; is
                  being used, one of the factory methods
                  &lt;code&gt;createFromRenderedImage&lt;/code&gt; or
                  &lt;code&gt;createFromBufferedImageType&lt;/code&gt; should be used instead in
                  order to get a more accurate result.                
                <param>
                    image a &lt;code&gt;RenderedImage&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if the argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="ImageTypeSpecifier" type="constructor" line="126">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <scope line="127"/>
            </method>
            <class name="Packed" line="136">
                <extends class="ImageTypeSpecifier"/>
                <comment line="229">
                    0 if no alpha                    
                </comment>
                <declaration name="colorSpace" type="ColorSpace" line="137"/>
                <declaration name="redMask" type="int" line="138"/>
                <declaration name="greenMask" type="int" line="139"/>
                <declaration name="blueMask" type="int" line="140"/>
                <declaration name="alphaMask" type="int" line="141"/>
                <declaration name="transferType" type="int" line="142"/>
                <declaration name="isAlphaPremultiplied" type="boolean" line="143"/>
                <method name="Packed" type="constructor" line="151">
                    <params>
                        <param name="colorSpace" type="ColorSpace"/>
                        <param name="redMask" type="int"/>
                        <param name="greenMask" type="int"/>
                        <param name="blueMask" type="int"/>
                        <param name="alphaMask" type="int"/>
                        <param name="transferType" type="int"/>
                        <param name="isAlphaPremultiplied" type="boolean"/>
                    </params>
                    <comment line="150">
                        0 if no alpha                        
                    </comment>
                    <scope line="152"/>
                    <scope line="155"/>
                    <scope line="161"/>
                    <scope line="166"/>
                    <declaration name="bits" type="int" line="178"/>
                </method>
            </class>
            <javadoc line="189">
                Returns a specifier for a packed image format that will use a
                  &lt;code&gt;DirectColorModel&lt;/code&gt; and a packed
                  &lt;code&gt;SampleModel&lt;/code&gt; to store each pixel packed into in a
                  single byte, short, or int.                
                <param>
                    colorSpace the desired &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </param>
                <param>
                    redMask a contiguous mask indicated the position of the
                      red channel.                    
                </param>
                <param>
                    greenMask a contiguous mask indicated the position of the
                      green channel.                    
                </param>
                <param>
                    blueMask a contiguous mask indicated the position of the
                      blue channel.                    
                </param>
                <param>
                    alphaMask a contiguous mask indicated the position of the
                      alpha channel.                    
                </param>
                <param>
                    transferType the desired &lt;code&gt;SampleModel&lt;/code&gt; transfer type.                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the color channels
                      will be premultipled by the alpha channel.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;colorSpace&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;colorSpace&lt;/code&gt;
                      is not of type &lt;code&gt;TYPE_RGB&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if no mask has at least 1
                      bit set.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;transferType&lt;/code&gt; if not one of
                      &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;, or
                      &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createPacked" type="ImageTypeSpecifier" line="230">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="redMask" type="int"/>
                    <param name="greenMask" type="int"/>
                    <param name="blueMask" type="int"/>
                    <param name="alphaMask" type="int"/>
                    <param name="transferType" type="int"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
                <comment line="229">
                    0 if no alpha                    
                </comment>
                <comment line="236">
                    0 if no alpha                    
                </comment>
            </method>
            <method name="createComponentCM" type="ColorModel" line="244">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="numBands" type="int"/>
                    <param name="dataType" type="int"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
                <declaration name="transparency" type="int" line="245"/>
                <declaration name="numBits" type="int[]" line="248"/>
                <declaration name="bits" type="int" line="249"/>
                <scope line="251"/>
            </method>
            <class name="Interleaved" line="265">
                <extends class="ImageTypeSpecifier"/>
                <comment line="229">
                    0 if no alpha                    
                </comment>
                <declaration name="colorSpace" type="ColorSpace" line="266"/>
                <declaration name="bandOffsets" type="int[]" line="267"/>
                <declaration name="dataType" type="int" line="268"/>
                <declaration name="hasAlpha" type="boolean" line="269"/>
                <declaration name="isAlphaPremultiplied" type="boolean" line="270"/>
                <method name="Interleaved" type="constructor" line="276">
                    <params>
                        <param name="colorSpace" type="ColorSpace"/>
                        <param name="bandOffsets" type="int[]"/>
                        <param name="dataType" type="int"/>
                        <param name="hasAlpha" type="boolean"/>
                        <param name="isAlphaPremultiplied" type="boolean"/>
                    </params>
                    <scope line="277"/>
                    <scope line="280"/>
                    <declaration name="numBands" type="int" line="283"/>
                    <scope line="285"/>
                    <scope line="294"/>
                    <declaration name="minBandOffset" type="int" line="311"/>
                    <declaration name="maxBandOffset" type="int" line="312"/>
                    <scope line="313">
                        <declaration name="offset" type="int" line="314"/>
                    </scope>
                    <declaration name="pixelStride" type="int" line="318"/>
                    <declaration name="w" type="int" line="320"/>
                    <declaration name="h" type="int" line="321"/>
                </method>
                <method name="equals" type="boolean" line="330">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="332"/>
                    <declaration name="that" type="ImageTypeSpecifier.Interleaved" line="336"/>
                    <scope line="343"/>
                    <scope line="347">
                        <scope line="348"/>
                    </scope>
                </method>
                <method name="hashCode" type="int" line="356"/>
            </class>
            <javadoc line="364">
                Returns a specifier for an interleaved image format that will
                  use a &lt;code&gt;ComponentColorModel&lt;/code&gt; and a
                  &lt;code&gt;PixelInterleavedSampleModel&lt;/code&gt; to store each pixel
                  component in a separate byte, short, or int.                
                <param>
                    colorSpace the desired &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </param>
                <param>
                    bandOffsets an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      offsets for each band.                    
                </param>
                <param>
                    dataType the desired data type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <param>
                    hasAlpha &lt;code&gt;true&lt;/code&gt; if an alpha channel is desired.                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the color channels
                      will be premultipled by the alpha channel.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;colorSpace&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bandOffsets&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of the legal &lt;code&gt;DataBuffer.TYPE_&lt;/code&gt; constants.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;bandOffsets.length&lt;/code&gt; does not equal the number of
                      color space components, plus 1 if &lt;code&gt;hasAlpha&lt;/code&gt; is
                      &lt;code&gt;true&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createInterleaved" type="ImageTypeSpecifier" line="398">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="bandOffsets" type="int[]"/>
                    <param name="dataType" type="int"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
            </method>
            <class name="Banded" line="408">
                <extends class="ImageTypeSpecifier"/>
                <comment line="229">
                    0 if no alpha                    
                </comment>
                <declaration name="colorSpace" type="ColorSpace" line="409"/>
                <declaration name="bankIndices" type="int[]" line="410"/>
                <declaration name="bandOffsets" type="int[]" line="411"/>
                <declaration name="dataType" type="int" line="412"/>
                <declaration name="hasAlpha" type="boolean" line="413"/>
                <declaration name="isAlphaPremultiplied" type="boolean" line="414"/>
                <method name="Banded" type="constructor" line="421">
                    <params>
                        <param name="colorSpace" type="ColorSpace"/>
                        <param name="bankIndices" type="int[]"/>
                        <param name="bandOffsets" type="int[]"/>
                        <param name="dataType" type="int"/>
                        <param name="hasAlpha" type="boolean"/>
                        <param name="isAlphaPremultiplied" type="boolean"/>
                    </params>
                    <scope line="422"/>
                    <scope line="425"/>
                    <scope line="428"/>
                    <scope line="431"/>
                    <scope line="440"/>
                    <declaration name="numBands" type="int" line="444"/>
                    <scope line="446"/>
                    <declaration name="w" type="int" line="465"/>
                    <declaration name="h" type="int" line="466"/>
                </method>
                <method name="equals" type="boolean" line="474">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="476"/>
                    <declaration name="that" type="ImageTypeSpecifier.Banded" line="480"/>
                    <scope line="488"/>
                    <scope line="492">
                        <scope line="493"/>
                    </scope>
                    <scope line="498">
                        <scope line="499"/>
                    </scope>
                </method>
                <method name="hashCode" type="int" line="507"/>
            </class>
            <javadoc line="516">
                Returns a specifier for a banded image format that will use a
                  &lt;code&gt;ComponentColorModel&lt;/code&gt; and a
                  &lt;code&gt;BandedSampleModel&lt;/code&gt; to store each channel in a
                  separate array.                
                <param>
                    colorSpace the desired &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </param>
                <param>
                    bankIndices an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      bank in which each band will be stored.                    
                </param>
                <param>
                    bandOffsets an array of &lt;code&gt;int&lt;/code&gt;s indicating the
                      starting offset of each band within its bank.                    
                </param>
                <param>
                    dataType the desired data type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <param>
                    hasAlpha &lt;code&gt;true&lt;/code&gt; if an alpha channel is desired.                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the color channels
                      will be premultipled by the alpha channel.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;colorSpace&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bankIndices&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bandOffsets&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if the lengths of
                      &lt;code&gt;bankIndices&lt;/code&gt; and &lt;code&gt;bandOffsets&lt;/code&gt; differ.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;bandOffsets.length&lt;/code&gt; does not equal the number of
                      color space components, plus 1 if &lt;code&gt;hasAlpha&lt;/code&gt; is
                      &lt;code&gt;true&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of the legal &lt;code&gt;DataBuffer.TYPE_&lt;/code&gt; constants.                    
                </exception>
            </javadoc>
            <method name="createBanded" type="ImageTypeSpecifier" line="557">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="bankIndices" type="int[]"/>
                    <param name="bandOffsets" type="int[]"/>
                    <param name="dataType" type="int"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
            </method>
            <class name="Grayscale" line="568">
                <extends class="ImageTypeSpecifier"/>
                <comment line="229">
                    0 if no alpha                    
                </comment>
                <declaration name="bits" type="int" line="569"/>
                <declaration name="dataType" type="int" line="570"/>
                <declaration name="isSigned" type="boolean" line="571"/>
                <declaration name="hasAlpha" type="boolean" line="572"/>
                <declaration name="isAlphaPremultiplied" type="boolean" line="573"/>
                <method name="Grayscale" type="constructor" line="580">
                    <params>
                        <param name="bits" type="int"/>
                        <param name="dataType" type="int"/>
                        <param name="isSigned" type="boolean"/>
                        <param name="hasAlpha" type="boolean"/>
                        <param name="isAlphaPremultiplied" type="boolean"/>
                    </params>
                    <comment line="611">
                        Use component color model &amp; sample model                        
                    </comment>
                    <scope line="583"/>
                    <scope line="589"/>
                    <scope line="593"/>
                    <declaration name="colorSpace" type="ColorSpace" line="604"/>
                    <scope line="609">
                        <declaration name="numBands" type="int" line="612"/>
                        <declaration name="transparency" type="int" line="613"/>
                        <declaration name="nBits" type="int[]" line="617"/>
                        <scope line="619"/>
                        <declaration name="bandOffsets" type="int[]" line="630"/>
                        <scope line="632"/>
                        <declaration name="w" type="int" line="636"/>
                        <declaration name="h" type="int" line="637"/>
                    </scope>
                    <scope line="643">
                        <declaration name="numEntries" type="int" line="644"/>
                        <declaration name="arr" type="byte[]" line="645"/>
                        <scope line="646"/>
                    </scope>
                </method>
            </class>
            <javadoc line="658">
                Returns a specifier for a grayscale image format that will pack
                  pixels of the given bit depth into array elements of
                  the specified data type.                
                <param>
                    bits the number of bits per gray value (1, 2, 4, 8, or 16).                    
                </param>
                <param>
                    dataType the desired data type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <param>
                    isSigned &lt;code&gt;true&lt;/code&gt; if negative values are to
                      be represented.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      not one of 1, 2, 4, 8, or 16.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_SHORT&lt;/code&gt;, or
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      larger than the bit size of the given &lt;code&gt;dataType&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createGrayscale" type="ImageTypeSpecifier" line="684">
                <params>
                    <param name="bits" type="int"/>
                    <param name="dataType" type="int"/>
                    <param name="isSigned" type="boolean"/>
                </params>
            </method>
            <javadoc line="692">
                Returns a specifier for a grayscale plus alpha image format
                  that will pack pixels of the given bit depth into array
                  elements of the specified data type.                
                <param>
                    bits the number of bits per gray value (1, 2, 4, 8, or 16).                    
                </param>
                <param>
                    dataType the desired data type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <param>
                    isSigned &lt;code&gt;true&lt;/code&gt; if negative values are to
                      be represented.                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the luminance channel
                      will be premultipled by the alpha channel.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      not one of 1, 2, 4, 8, or 16.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_SHORT&lt;/code&gt;, or
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      larger than the bit size of the given &lt;code&gt;dataType&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createGrayscale" type="ImageTypeSpecifier" line="721">
                <params>
                    <param name="bits" type="int"/>
                    <param name="dataType" type="int"/>
                    <param name="isSigned" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
            </method>
            <class name="Indexed" line="731">
                <extends class="ImageTypeSpecifier"/>
                <comment line="229">
                    0 if no alpha                    
                </comment>
                <declaration name="redLUT" type="byte[]" line="732"/>
                <declaration name="greenLUT" type="byte[]" line="733"/>
                <declaration name="blueLUT" type="byte[]" line="734"/>
                <declaration name="alphaLUT" type="byte[]" line="735"/>
                <declaration name="bits" type="int" line="736"/>
                <declaration name="dataType" type="int" line="737"/>
                <method name="Indexed" type="constructor" line="744">
                    <params>
                        <param name="redLUT" type="byte[]"/>
                        <param name="greenLUT" type="byte[]"/>
                        <param name="blueLUT" type="byte[]"/>
                        <param name="alphaLUT" type="byte[]"/>
                        <param name="bits" type="int"/>
                        <param name="dataType" type="int"/>
                    </params>
                    <scope line="745"/>
                    <scope line="749"/>
                    <scope line="755"/>
                    <scope line="760"/>
                    <declaration name="len" type="int" line="765"/>
                    <scope line="769"/>
                    <scope line="775"/>
                    <scope line="781"/>
                    <scope line="787"/>
                    <scope line="799">
                        <declaration name="bandOffsets" type="int[]" line="800"/>
                    </scope>
                    <scope line="805"/>
                </method>
            </class>
            <javadoc line="812">
                Returns a specifier for an indexed-color image format that will pack
                  index values of the given bit depth into array elements of
                  the specified data type.                
                <param>
                    redLUT an array of &lt;code&gt;byte&lt;/code&gt;s containing
                      the red values for each index.                    
                </param>
                <param>
                    greenLUT an array of &lt;code&gt;byte&lt;/code&gt;s containing  the
                      green values for each index.                    
                </param>
                <param>
                    blueLUT an array of &lt;code&gt;byte&lt;/code&gt;s containing the
                      blue values for each index.                    
                </param>
                <param>
                    alphaLUT an array of &lt;code&gt;byte&lt;/code&gt;s containing the
                      alpha values for each index, or &lt;code&gt;null&lt;/code&gt; to create a
                      fully opaque LUT.                    
                </param>
                <param>
                    bits the number of bits in each index.                    
                </param>
                <param>
                    dataType the desired output type, as one of the enumerations
                      from the &lt;code&gt;DataBuffer&lt;/code&gt; class.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;redLUT&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;greenLUT&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;blueLUT&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      not one of 1, 2, 4, 8, or 16.                    
                </exception>
                <exception>
                    IllegalArgumentException if the
                      non-&lt;code&gt;null&lt;/code&gt; LUT parameters do not have lengths of
                      exactly &lt;code&gt;1 &lt;&lt; bits&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_SHORT&lt;/code&gt;,
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;,
                      or &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is
                      larger than the bit size of the given &lt;code&gt;dataType&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createIndexed" type="ImageTypeSpecifier" line="858">
                <params>
                    <param name="redLUT" type="byte[]"/>
                    <param name="greenLUT" type="byte[]"/>
                    <param name="blueLUT" type="byte[]"/>
                    <param name="alphaLUT" type="byte[]"/>
                    <param name="bits" type="int"/>
                    <param name="dataType" type="int"/>
                </params>
            </method>
            <javadoc line="867">
                Returns an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; that encodes
                  one of the standard &lt;code&gt;BufferedImage&lt;/code&gt; types
                  (other than &lt;code&gt;TYPE_CUSTOM&lt;/code&gt;).                
                <param>
                    bufferedImageType an int representing one of the standard
                      &lt;code&gt;BufferedImage&lt;/code&gt; types.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;bufferedImageType&lt;/code&gt; is not one of the standard
                      types, or is equal to &lt;code&gt;TYPE_CUSTOM&lt;/code&gt;.                    
                </exception>
                <see>
                    java.awt.image.BufferedImage                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_ARGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_BGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_3BYTE_BGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_4BYTE_ABGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_565_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_555_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_GRAY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_GRAY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_BINARY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_INDEXED                    
                </see>
            </javadoc>
            <method name="createFromBufferedImageType" type="ImageTypeSpecifier" line="898">
                <params>
                    <param name="bufferedImageType" type="int"/>
                </params>
                <scope line="900"/>
                <scope line="902"/>
                <scope line="904"/>
            </method>
            <javadoc line="909">
                Returns an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; that encodes the
                  layout of a &lt;code&gt;RenderedImage&lt;/code&gt; (which may be a
                  &lt;code&gt;BufferedImage&lt;/code&gt;).                
                <param>
                    image a &lt;code&gt;RenderedImage&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; with the desired
                      characteristics.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;image&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createFromRenderedImage" type="ImageTypeSpecifier" line="923">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <scope line="924"/>
                <scope line="928">
                    <declaration name="bufferedImageType" type="int" line="929"/>
                    <scope line="930"/>
                </scope>
            </method>
            <javadoc line="938">
                Returns an int containing one of the enumerated constant values
                  describing image formats from &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    an &lt;code&gt;int&lt;/code&gt; representing a
                      &lt;code&gt;BufferedImage&lt;/code&gt; type.                    
                </return>
                <see>
                    java.awt.image.BufferedImage                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_CUSTOM                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_ARGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_INT_BGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_3BYTE_BGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_4BYTE_ABGR                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_565_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_555_RGB                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_GRAY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_USHORT_GRAY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_BINARY                    
                </see>
                <see>
                    java.awt.image.BufferedImage#TYPE_BYTE_INDEXED                    
                </see>
            </javadoc>
            <method name="getBufferedImageType" type="int" line="961">
                <declaration name="bi" type="BufferedImage" line="962"/>
            </method>
            <javadoc line="966">
                Return the number of color components
                  specified by this object.  This is the same value as returned by
                  &lt;code&gt;ColorModel.getNumComponents&lt;/code&gt;                
                <return>
                    the number of components in the image.                    
                </return>
            </javadoc>
            <method name="getNumComponents" type="int" line="973"/>
            <javadoc line="977">
                Return the number of bands
                  specified by this object.  This is the same value as returned by
                  &lt;code&gt;SampleModel.getNumBands&lt;/code&gt;                
                <return>
                    the number of bands in the image.                    
                </return>
            </javadoc>
            <method name="getNumBands" type="int" line="984"/>
            <javadoc line="988">
                Return the number of bits used to represent samples of the given band.                
                <param>
                    band the index of the band to be queried, as an
                      int.                    
                </param>
                <return>
                    an int specifying a number of bits.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;band&lt;/code&gt; is
                      negative or greater than the largest band index.                    
                </exception>
            </javadoc>
            <method name="getBitsPerBand" type="int" line="999">
                <params>
                    <param name="band" type="int"/>
                </params>
                <scope line="1000"/>
            </method>
            <javadoc line="1006">
                Returns a &lt;code&gt;SampleModel&lt;/code&gt; based on the settings
                  encapsulated within this object.  The width and height of the
                  &lt;code&gt;SampleModel&lt;/code&gt; will be set to arbitrary values.                
                <return>
                    a &lt;code&gt;SampleModel&lt;/code&gt; with arbitrary dimensions.                    
                </return>
            </javadoc>
            <method name="getSampleModel" type="SampleModel" line="1013"/>
            <javadoc line="1017">
                Returns a &lt;code&gt;SampleModel&lt;/code&gt; based on the settings
                  encapsulated within this object.  The width and height of the
                  &lt;code&gt;SampleModel&lt;/code&gt; will be set to the supplied values.                
                <param>
                    width the desired width of the returned &lt;code&gt;SampleModel&lt;/code&gt;.                    
                </param>
                <param>
                    height the desired height of the returned
                      &lt;code&gt;SampleModel&lt;/code&gt;.                    
                </param>
                <return>
                    a &lt;code&gt;SampleModel&lt;/code&gt; with the given dimensions.                    
                </return>
                <exception>
                    IllegalArgumentException if either &lt;code&gt;width&lt;/code&gt; or
                      &lt;code&gt;height&lt;/code&gt; are negative or zero.                    
                </exception>
                <exception>
                    IllegalArgumentException if the product of
                      &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; is greater than
                      &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="getSampleModel" type="SampleModel" line="1034">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="1035"/>
            </method>
            <javadoc line="1042">
                Returns the &lt;code&gt;ColorModel&lt;/code&gt; specified by this object.                
                <return>
                    a &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="1047"/>
            <javadoc line="1051">
                Creates a &lt;code&gt;BufferedImage&lt;/code&gt; with a given width and
                  height according to the specification embodied in this object.                
                <param>
                    width the desired width of the returned
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </param>
                <param>
                    height the desired height of the returned
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </param>
                <return>
                    a new &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalArgumentException if either &lt;code&gt;width&lt;/code&gt; or
                      &lt;code&gt;height&lt;/code&gt; are negative or zero.                    
                </exception>
                <exception>
                    IllegalArgumentException if the product of
                      &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; is greater than
                      &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;, or if the number of array
                      elements needed to store the image is greater than
                      &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="createBufferedImage" type="BufferedImage" line="1070">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="1081">
                    Exception most likely thrown from a DataBuffer constructor                    
                </comment>
                <scope line="1071">
                    <declaration name="sampleModel" type="SampleModel" line="1072"/>
                    <declaration name="raster" type="WritableRaster" line="1073"/>
                </scope>
                <scope line="1079"/>
            </method>
            <javadoc line="1086">
                Returns &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;Object&lt;/code&gt; is
                  an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; and has a
                  &lt;code&gt;SampleModel&lt;/code&gt; and &lt;code&gt;ColorModel&lt;/code&gt; that are
                  equal to those of this object.                
                <param>
                    o the &lt;code&gt;Object&lt;/code&gt; to be compared for equality.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the given object is an equivalent
                      &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1097">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="1098"/>
                <declaration name="that" type="ImageTypeSpecifier" line="1102"/>
            </method>
            <javadoc line="1107">
                Returns the hash code for this ImageTypeSpecifier.                
                <return>
                    a hash code for this ImageTypeSpecifier                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="1112"/>
            <method name="getSpecifier" type="ImageTypeSpecifier" line="1116">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="1117"/>
            </method>
            <method name="createSpecifier" type="ImageTypeSpecifier" line="1123">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="1216">
                    <declaration name="bi" type="BufferedImage" line="1218"/>
                    <declaration name="icm" type="IndexColorModel" line="1220"/>
                    <declaration name="mapSize" type="int" line="1221"/>
                    <declaration name="redLUT" type="byte[]" line="1222"/>
                    <declaration name="greenLUT" type="byte[]" line="1223"/>
                    <declaration name="blueLUT" type="byte[]" line="1224"/>
                    <declaration name="alphaLUT" type="byte[]" line="1225"/>
                </scope>
            </method>
        </class>
    </source>