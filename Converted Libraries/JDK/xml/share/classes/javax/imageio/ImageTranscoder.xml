<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio">
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <interface name="ImageTranscoder">
            <javadoc line="3">
                An interface providing metadata transcoding capability.
                  &lt;p&gt; Any image may be transcoded (written to a different format
                  than the one it was originally stored in) simply by performing
                  a read operation followed by a write operation.  However, loss
                  of data may occur in this process due to format differences.
                  &lt;p&gt; In general, the best results will be achieved when
                  format-specific metadata objects can be created to encapsulate as
                  much information about the image and its associated metadata as
                  possible, in terms that are understood by the specific
                  &lt;code&gt;ImageWriter&lt;/code&gt; used to perform the encoding.
                  &lt;p&gt; An &lt;code&gt;ImageTranscoder&lt;/code&gt; may be used to convert the
                  &lt;code&gt;IIOMetadata&lt;/code&gt; objects supplied by the
                  &lt;code&gt;ImageReader&lt;/code&gt; (representing per-stream and per-image
                  metadata) into corresponding objects suitable for encoding by a
                  particular &lt;code&gt;ImageWriter&lt;/code&gt;.  In the case where the methods
                  of this interface are being called directly on an
                  &lt;code&gt;ImageWriter&lt;/code&gt;, the output will be suitable for that
                  writer.
                  &lt;p&gt; The internal details of converting an &lt;code&gt;IIOMetadata&lt;/code&gt;
                  object into a writer-specific format will vary according to the
                  context of the operation.  Typically, an &lt;code&gt;ImageWriter&lt;/code&gt;
                  will inspect the incoming object to see if it implements additional
                  interfaces with which the writer is familiar.  This might be the
                  case, for example, if the object was obtained by means of a read
                  operation on a reader plug-in written by the same vendor as the
                  writer.  In this case, the writer may access the incoming object by
                  means of its plug-in specific interfaces.  In this case, the
                  re-encoding may be close to lossless if the image file format is
                  kept constant.  If the format is changing, the writer may still
                  attempt to preserve as much information as possible.
                  &lt;p&gt; If the incoming object does not implement any additional
                  interfaces known to the writer, the writer has no choice but to
                  access it via the standard &lt;code&gt;IIOMetadata&lt;/code&gt; interfaces such
                  as the tree view provided by &lt;code&gt;IIOMetadata.getAsTree&lt;/code&gt;.
                  In this case, there is likely to be significant loss of
                  information.
                  &lt;p&gt; An independent &lt;code&gt;ImageTranscoder&lt;/code&gt; essentially takes
                  on the same role as the writer plug-in in the above examples.  It
                  must be familiar with the private interfaces used by both the
                  reader and writer plug-ins, and manually instantiate an object that
                  will be usable by the writer.  The resulting metadata objects may
                  be used by the writer directly.
                  &lt;p&gt; No independent implementations of &lt;code&gt;ImageTranscoder&lt;/code&gt;
                  are provided as part of the standard API.  Instead, the intention
                  of this interface is to provide a way for implementations to be
                  created and discovered by applications as the need arises.                
            </javadoc>
            <method name="convertStreamMetadata" type="IIOMetadata" line="52"/>
            <javadoc line="52">
                Returns an &lt;code&gt;IIOMetadata&lt;/code&gt; object that may be used for
                  encoding and optionally modified using its document interfaces
                  or other interfaces specific to the writer plug-in that will be
                  used for encoding.
                  &lt;p&gt; An optional &lt;code&gt;ImageWriteParam&lt;/code&gt; may be supplied
                  for cases where it may affect the structure of the stream
                  metadata.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not understood by this writer or
                  transcoder, they will be ignored.                
                <param>
                    inData an &lt;code&gt;IIOMetadata&lt;/code&gt; object representing
                      stream metadata, used to initialize the state of the returned
                      object.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt; that will be used to
                      encode the image, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadata&lt;/code&gt; object, or
                      &lt;code&gt;null&lt;/code&gt; if the plug-in does not provide metadata
                      encoding capabilities.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;inData&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="convertImageMetadata" type="IIOMetadata" line="75"/>
            <javadoc line="75">
                Returns an &lt;code&gt;IIOMetadata&lt;/code&gt; object that may be used for
                  encoding and optionally modified using its document interfaces
                  or other interfaces specific to the writer plug-in that will be
                  used for encoding.
                  &lt;p&gt; An optional &lt;code&gt;ImageWriteParam&lt;/code&gt; may be supplied
                  for cases where it may affect the structure of the image
                  metadata.
                  &lt;p&gt; If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains
                  optional setting values not understood by this writer or
                  transcoder, they will be ignored.                
                <param>
                    inData an &lt;code&gt;IIOMetadata&lt;/code&gt; object representing
                      image metadata, used to initialize the state of the returned
                      object.                    
                </param>
                <param>
                    imageType an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; indicating
                      the layout and color information of the image with which the
                      metadata will be associated.                    
                </param>
                <param>
                    param an &lt;code&gt;ImageWriteParam&lt;/code&gt; that will be used to
                      encode the image, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadata&lt;/code&gt; object,
                      or &lt;code&gt;null&lt;/code&gt; if the plug-in does not provide
                      metadata encoding capabilities.                    
                </return>
                <exception>
                    IllegalArgumentException if either of
                      &lt;code&gt;inData&lt;/code&gt; or &lt;code&gt;imageType&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
        </interface>
    </source>