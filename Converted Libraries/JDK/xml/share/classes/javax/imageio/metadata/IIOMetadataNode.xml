<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.metadata">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.w3c.dom.Attr"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.DOMException"/>
        <import package="org.w3c.dom.NamedNodeMap"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.w3c.dom.TypeInfo"/>
        <import package="org.w3c.dom.UserDataHandler"/>
        <class name="IIODOMException" line="14">
            <extends class="DOMException"/>
            <method name="IIODOMException" type="constructor" line="15">
                <params>
                    <param name="code" type="short"/>
                    <param name="message" type="String"/>
                </params>
            </method>
        </class>
        <class name="IIONamedNodeMap" line="19">
            <implements interface="NamedNodeMap"/>
            <declaration name="nodes" type="List" line="20"/>
            <method name="IIONamedNodeMap" type="constructor" line="21">
                <params>
                    <param name="nodes" type="List"/>
                </params>
            </method>
            <method name="getLength" type="int" line="24"/>
            <method name="getNamedItem" type="Node" line="27">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="iter" type="Iterator" line="28"/>
                <scope line="29">
                    <declaration name="node" type="Node" line="30"/>
                    <scope line="31"/>
                </scope>
            </method>
            <method name="item" type="Node" line="37">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="node" type="Node" line="38"/>
            </method>
            <method name="removeNamedItem" type="Node" line="41">
                <params>
                    <param name="name" type="java.lang.String"/>
                </params>
            </method>
            <method name="setNamedItem" type="Node" line="44">
                <params>
                    <param name="arg" type="Node"/>
                </params>
            </method>
            <javadoc line="47">
                Equivalent to &lt;code&gt;getNamedItem(localName)&lt;/code&gt;.                
            </javadoc>
            <method name="getNamedItemNS" type="Node" line="50">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                </params>
            </method>
            <javadoc line="53">
                Equivalent to &lt;code&gt;setNamedItem(arg)&lt;/code&gt;.                
            </javadoc>
            <method name="setNamedItemNS" type="Node" line="56">
                <params>
                    <param name="arg" type="Node"/>
                </params>
            </method>
            <javadoc line="59">
                Equivalent to &lt;code&gt;removeNamedItem(localName)&lt;/code&gt;.                
            </javadoc>
            <method name="removeNamedItemNS" type="Node" line="62">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                </params>
            </method>
        </class>
        <class name="IIONodeList" line="66">
            <implements interface="NodeList"/>
            <declaration name="nodes" type="List" line="67"/>
            <method name="IIONodeList" type="constructor" line="68">
                <params>
                    <param name="nodes" type="List"/>
                </params>
            </method>
            <method name="getLength" type="int" line="71"/>
            <method name="item" type="Node" line="74">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="75"/>
            </method>
        </class>
        <class name="IIOAttr" line="81">
            <extends class="IIOMetadataNode"/>
            <implements interface="Attr"/>
            <declaration name="owner" type="Element" line="82"/>
            <declaration name="name" type="String" line="83"/>
            <declaration name="value" type="String" line="84"/>
            <method name="IIOAttr" type="constructor" line="85">
                <params>
                    <param name="owner" type="Element"/>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="getName" type="String" line="90"/>
            <method name="getNodeName" type="String" line="93"/>
            <method name="getNodeType" type="short" line="96"/>
            <method name="getSpecified" type="boolean" line="99"/>
            <method name="getValue" type="String" line="102"/>
            <method name="getNodeValue" type="String" line="105"/>
            <method name="setValue" type="void" line="108">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="setNodeValue" type="void" line="111">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="getOwnerElement" type="Element" line="114"/>
            <method name="setOwnerElement" type="void" line="117">
                <params>
                    <param name="owner" type="Element"/>
                </params>
            </method>
            <javadoc line="120">
                This method is new in the DOM L3 for Attr interface.
                  Could throw DOMException here, but its probably OK
                  to always return false. One reason for this, is we have no good
                  way to document this exception, since this class, IIOAttr,
                  is not a public class. The rest of the methods that throw
                  DOMException are publically documented as such on IIOMetadataNode.                
                <return>
                    false                    
                </return>
            </javadoc>
            <method name="isId" type="boolean" line="129"/>
        </class>
        <class name="IIOMetadataNode" line="133">
            <implements interface="Element"/>
            <implements interface="NodeList"/>
            <javadoc line="133">
                A class representing a node in a meta-data tree, which implements
                  the &lt;a
                  href=&quot;../../../../api/org/w3c/dom/Element.html&quot;&gt;
                  &lt;code&gt;org.w3c.dom.Element&lt;/code&gt;&lt;/a&gt; interface and additionally allows
                  for the storage of non-textual objects via the
                  &lt;code&gt;getUserObject&lt;/code&gt; and &lt;code&gt;setUserObject&lt;/code&gt; methods.
                  &lt;p&gt; This class is not intended to be used for general XML
                  processing. In particular, &lt;code&gt;Element&lt;/code&gt; nodes created
                  within the Image I/O API are not compatible with those created by
                  Sun&apos;s standard implementation of the &lt;code&gt;org.w3.dom&lt;/code&gt; API.
                  In particular, the implementation is tuned for simple uses and may
                  not perform well for intensive processing.
                  &lt;p&gt; Namespaces are ignored in this implementation.  The terms &quot;tag
                  name&quot; and &quot;node name&quot; are always considered to be synonymous.
                  &lt;em&gt;Note:&lt;/em&gt;
                  The DOM Level 3 specification added a number of new methods to the{@code Node}, {@code Element} and {@code Attr} interfaces that are not
                  of value to the {@code IIOMetadataNode} implementation or specification.
                  Calling such methods on an {@code IIOMetadataNode}, or an {@code Attr}instance returned from an {@code IIOMetadataNode} will result in a{@code DOMException} being thrown.                
                <see>
                    IIOMetadata#getAsTree                    
                </see>
                <see>
                    IIOMetadata#setFromTree                    
                </see>
                <see>
                    IIOMetadata#mergeTree                    
                </see>
            </javadoc>
            <declaration name="nodeName" type="String" line="157"/>
            <javadoc line="157">
                The name of the node as a &lt;code&gt;String&lt;/code&gt;.                
            </javadoc>
            <declaration name="nodeValue" type="String" line="161"/>
            <javadoc line="161">
                The value of the node as a &lt;code&gt;String&lt;/code&gt;.  The Image I/O
                  API typically does not make use of the node value.                
            </javadoc>
            <declaration name="userObject" type="Object" line="166"/>
            <javadoc line="166">
                The &lt;code&gt;Object&lt;/code&gt; value associated with this node.                
            </javadoc>
            <declaration name="parent" type="IIOMetadataNode" line="170"/>
            <javadoc line="170">
                The parent node of this node, or &lt;code&gt;null&lt;/code&gt; if this node
                  forms the root of its own tree.                
            </javadoc>
            <declaration name="numChildren" type="int" line="175"/>
            <javadoc line="175">
                The number of child nodes.                
            </javadoc>
            <declaration name="firstChild" type="IIOMetadataNode" line="179"/>
            <javadoc line="179">
                The first (leftmost) child node of this node, or
                  &lt;code&gt;null&lt;/code&gt; if this node is a leaf node.                
            </javadoc>
            <declaration name="lastChild" type="IIOMetadataNode" line="184"/>
            <javadoc line="184">
                The last (rightmost) child node of this node, or
                  &lt;code&gt;null&lt;/code&gt; if this node is a leaf node.                
            </javadoc>
            <declaration name="nextSibling" type="IIOMetadataNode" line="189"/>
            <javadoc line="189">
                The next (right) sibling node of this node, or
                  &lt;code&gt;null&lt;/code&gt; if this node is its parent&apos;s last child node.                
            </javadoc>
            <declaration name="previousSibling" type="IIOMetadataNode" line="194"/>
            <javadoc line="194">
                The previous (left) sibling node of this node, or
                  &lt;code&gt;null&lt;/code&gt; if this node is its parent&apos;s first child node.                
            </javadoc>
            <declaration name="attributes" type="List" line="199"/>
            <javadoc line="199">
                A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;IIOAttr&lt;/code&gt; nodes representing
                  attributes.                
            </javadoc>
            <javadoc line="204">
                Constructs an empty &lt;code&gt;IIOMetadataNode&lt;/code&gt;.                
            </javadoc>
            <method name="IIOMetadataNode" type="constructor" line="207"/>
            <javadoc line="209">
                Constructs an &lt;code&gt;IIOMetadataNode&lt;/code&gt; with a given node
                  name.                
                <param>
                    nodeName the name of the node, as a &lt;code&gt;String&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="IIOMetadataNode" type="constructor" line="214">
                <params>
                    <param name="nodeName" type="String"/>
                </params>
            </method>
            <javadoc line="217">
                Check that the node is either &lt;code&gt;null&lt;/code&gt; or an
                  &lt;code&gt;IIOMetadataNode&lt;/code&gt;.                
            </javadoc>
            <method name="checkNode" type="void" line="221">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <scope line="222"/>
                <scope line="225"/>
            </method>
            <javadoc line="229">
                Returns the node name associated with this node.                
                <return>
                    the node name, as a &lt;code&gt;String&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getNodeName" type="String" line="233"/>
            <javadoc line="236">
                Returns the value associated with this node.                
                <return>
                    the node value, as a &lt;code&gt;String&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getNodeValue" type="String" line="240"/>
            <javadoc line="243">
                Sets the &lt;code&gt;String&lt;/code&gt; value associated with this node.                
            </javadoc>
            <method name="setNodeValue" type="void" line="246">
                <params>
                    <param name="nodeValue" type="String"/>
                </params>
            </method>
            <javadoc line="249">
                Returns the node type, which is always
                  &lt;code&gt;ELEMENT_NODE&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;short&lt;/code&gt; value &lt;code&gt;ELEMENT_NODE&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getNodeType" type="short" line="254"/>
            <javadoc line="257">
                Returns the parent of this node.  A &lt;code&gt;null&lt;/code&gt; value
                  indicates that the node is the root of its own tree.  To add a
                  node to an existing tree, use one of the
                  &lt;code&gt;insertBefore&lt;/code&gt;, &lt;code&gt;replaceChild&lt;/code&gt;, or
                  &lt;code&gt;appendChild&lt;/code&gt; methods.                
                <return>
                    the parent, as a &lt;code&gt;Node&lt;/code&gt;.                    
                </return>
                <see>
                    #insertBefore                    
                </see>
                <see>
                    #replaceChild                    
                </see>
                <see>
                    #appendChild                    
                </see>
            </javadoc>
            <method name="getParentNode" type="Node" line="268"/>
            <javadoc line="271">
                Returns a &lt;code&gt;NodeList&lt;/code&gt; that contains all children of this node.
                  If there are no children, this is a &lt;code&gt;NodeList&lt;/code&gt; containing
                  no nodes.                
                <return>
                    the children as a &lt;code&gt;NodeList&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getChildNodes" type="NodeList" line="277"/>
            <javadoc line="280">
                Returns the first child of this node, or &lt;code&gt;null&lt;/code&gt; if
                  the node has no children.                
                <return>
                    the first child, as a &lt;code&gt;Node&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getFirstChild" type="Node" line="286"/>
            <javadoc line="289">
                Returns the last child of this node, or &lt;code&gt;null&lt;/code&gt; if
                  the node has no children.                
                <return>
                    the last child, as a &lt;code&gt;Node&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getLastChild" type="Node" line="295"/>
            <javadoc line="298">
                Returns the previous sibling of this node, or &lt;code&gt;null&lt;/code&gt;
                  if this node has no previous sibling.                
                <return>
                    the previous sibling, as a &lt;code&gt;Node&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPreviousSibling" type="Node" line="304"/>
            <javadoc line="307">
                Returns the next sibling of this node, or &lt;code&gt;null&lt;/code&gt; if
                  the node has no next sibling.                
                <return>
                    the next sibling, as a &lt;code&gt;Node&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getNextSibling" type="Node" line="313"/>
            <javadoc line="316">
                Returns a &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the attributes of
                  this node.                
                <return>
                    a &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the attributes of
                      this node.                    
                </return>
            </javadoc>
            <method name="getAttributes" type="NamedNodeMap" line="322"/>
            <javadoc line="325">
                Returns &lt;code&gt;null&lt;/code&gt;, since &lt;code&gt;IIOMetadataNode&lt;/code&gt;s
                  do not belong to any &lt;code&gt;Document&lt;/code&gt;.                
                <return>
                    &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getOwnerDocument" type="Document" line="330"/>
            <javadoc line="333">
                Inserts the node &lt;code&gt;newChild&lt;/code&gt; before the existing
                  child node &lt;code&gt;refChild&lt;/code&gt;. If &lt;code&gt;refChild&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, insert &lt;code&gt;newChild&lt;/code&gt; at the end of
                  the list of children.                
                <param>
                    newChild the &lt;code&gt;Node&lt;/code&gt; to insert.                    
                </param>
                <param>
                    refChild the reference &lt;code&gt;Node&lt;/code&gt;.                    
                </param>
                <return>
                    the node being inserted.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;newChild&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="insertBefore" type="Node" line="344">
                <params>
                    <param name="newChild" type="Node"/>
                    <param name="refChild" type="Node"/>
                </params>
                <scope line="345"/>
                <declaration name="newChildNode" type="IIOMetadataNode" line="350"/>
                <declaration name="refChildNode" type="IIOMetadataNode" line="351"/>
                <declaration name="previous" type="IIOMetadataNode" line="352"/>
                <declaration name="next" type="IIOMetadataNode" line="353"/>
                <scope line="354"/>
                <scope line="359"/>
                <scope line="363"/>
                <scope line="366"/>
                <scope line="372"/>
            </method>
            <javadoc line="378">
                Replaces the child node &lt;code&gt;oldChild&lt;/code&gt; with
                  &lt;code&gt;newChild&lt;/code&gt; in the list of children, and returns the
                  &lt;code&gt;oldChild&lt;/code&gt; node.                
                <param>
                    newChild the &lt;code&gt;Node&lt;/code&gt; to insert.                    
                </param>
                <param>
                    oldChild the &lt;code&gt;Node&lt;/code&gt; to be replaced.                    
                </param>
                <return>
                    the node replaced.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;newChild&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="replaceChild" type="Node" line="388">
                <params>
                    <param name="newChild" type="Node"/>
                    <param name="oldChild" type="Node"/>
                </params>
                <scope line="389"/>
                <declaration name="newChildNode" type="IIOMetadataNode" line="394"/>
                <declaration name="oldChildNode" type="IIOMetadataNode" line="395"/>
                <declaration name="previous" type="IIOMetadataNode" line="396"/>
                <declaration name="next" type="IIOMetadataNode" line="397"/>
                <scope line="398"/>
                <scope line="401"/>
                <scope line="407"/>
                <scope line="410"/>
            </method>
            <javadoc line="418">
                Removes the child node indicated by &lt;code&gt;oldChild&lt;/code&gt; from
                  the list of children, and returns it.                
                <param>
                    oldChild the &lt;code&gt;Node&lt;/code&gt; to be removed.                    
                </param>
                <return>
                    the node removed.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;oldChild&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="removeChild" type="Node" line="426">
                <params>
                    <param name="oldChild" type="Node"/>
                </params>
                <scope line="427"/>
                <declaration name="oldChildNode" type="IIOMetadataNode" line="431"/>
                <declaration name="previous" type="IIOMetadataNode" line="432"/>
                <declaration name="next" type="IIOMetadataNode" line="433"/>
                <scope line="434"/>
                <scope line="437"/>
                <scope line="440"/>
                <scope line="443"/>
            </method>
            <javadoc line="452">
                Adds the node &lt;code&gt;newChild&lt;/code&gt; to the end of the list of
                  children of this node.                
                <param>
                    newChild the &lt;code&gt;Node&lt;/code&gt; to insert.                    
                </param>
                <return>
                    the node added.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;newChild&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="appendChild" type="Node" line="460">
                <params>
                    <param name="newChild" type="Node"/>
                </params>
                <scope line="461"/>
            </method>
            <javadoc line="467">
                Returns &lt;code&gt;true&lt;/code&gt; if this node has child nodes.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this node has children.                    
                </return>
            </javadoc>
            <method name="hasChildNodes" type="boolean" line="471"/>
            <javadoc line="474">
                Returns a duplicate of this node.  The duplicate node has no
                  parent (&lt;code&gt;getParentNode&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;).
                  If a shallow clone is being performed (&lt;code&gt;deep&lt;/code&gt; is
                  &lt;code&gt;false&lt;/code&gt;), the new node will not have any children or
                  siblings.  If a deep clone is being performed, the new node
                  will form the root of a complete cloned subtree.                
                <param>
                    deep if &lt;code&gt;true&lt;/code&gt;, recursively clone the subtree
                      under the specified node; if &lt;code&gt;false&lt;/code&gt;, clone only the
                      node itself.                    
                </param>
                <return>
                    the duplicate node.                    
                </return>
            </javadoc>
            <method name="cloneNode" type="Node" line="486">
                <params>
                    <param name="deep" type="boolean"/>
                </params>
                <declaration name="newNode" type="IIOMetadataNode" line="487"/>
                <scope line="489">
                    <scope line="490"/>
                </scope>
            </method>
            <javadoc line="496">
                Does nothing, since &lt;code&gt;IIOMetadataNode&lt;/code&gt;s do not
                  contain &lt;code&gt;Text&lt;/code&gt; children.                
            </javadoc>
            <method name="normalize" type="void" line="500"/>
            <javadoc line="502">
                Returns &lt;code&gt;false&lt;/code&gt; since DOM features are not
                  supported.                
                <return>
                    &lt;code&gt;false&lt;/code&gt;.                    
                </return>
                <param>
                    feature a &lt;code&gt;String&lt;/code&gt;, which is ignored.                    
                </param>
                <param>
                    version a &lt;code&gt;String&lt;/code&gt;, which is ignored.                    
                </param>
            </javadoc>
            <method name="isSupported" type="boolean" line="509">
                <params>
                    <param name="feature" type="String"/>
                    <param name="version" type="String"/>
                </params>
            </method>
            <javadoc line="512">
                Returns &lt;code&gt;null&lt;/code&gt;, since namespaces are not supported.                
            </javadoc>
            <method name="getNamespaceURI" type="String" line="515"/>
            <javadoc line="518">
                Returns &lt;code&gt;null&lt;/code&gt;, since namespaces are not supported.                
                <return>
                    &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #setPrefix                    
                </see>
            </javadoc>
            <method name="getPrefix" type="String" line="523"/>
            <javadoc line="526">
                Does nothing, since namespaces are not supported.                
                <param>
                    prefix a &lt;code&gt;String&lt;/code&gt;, which is ignored.                    
                </param>
                <see>
                    #getPrefix                    
                </see>
            </javadoc>
            <method name="setPrefix" type="void" line="531">
                <params>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <javadoc line="533">
                Equivalent to &lt;code&gt;getNodeName&lt;/code&gt;.                
                <return>
                    the node name, as a &lt;code&gt;String&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getLocalName" type="String" line="537"/>
            <javadoc line="540">
                Equivalent to &lt;code&gt;getNodeName&lt;/code&gt;.                
                <return>
                    the node name, as a &lt;code&gt;String&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getTagName" type="String" line="544"/>
            <javadoc line="547">
                Retrieves an attribute value by name.                
                <param>
                    name The name of the attribute to retrieve.                    
                </param>
                <return>
                    The &lt;code&gt;Attr&lt;/code&gt; value as a string, or the empty string
                      if that attribute does not have a specified or default value.                    
                </return>
            </javadoc>
            <method name="getAttribute" type="String" line="553">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="attr" type="Attr" line="554"/>
                <scope line="555"/>
            </method>
            <javadoc line="560">
                Equivalent to &lt;code&gt;getAttribute(localName)&lt;/code&gt;.                
                <see>
                    #setAttributeNS                    
                </see>
            </javadoc>
            <method name="getAttributeNS" type="String" line="564">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                </params>
            </method>
            <method name="setAttribute" type="void" line="567">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="valid" type="boolean" line="568"/>
                <declaration name="chs" type="char[]" line="569"/>
                <scope line="570">
                    <scope line="571"/>
                </scope>
                <scope line="576"/>
            </method>
            <javadoc line="582">
                Equivalent to &lt;code&gt;setAttribute(qualifiedName, value)&lt;/code&gt;.                
                <see>
                    #getAttributeNS                    
                </see>
            </javadoc>
            <method name="setAttributeNS" type="void" line="586">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="qualifiedName" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="removeAttribute" type="void" line="589">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="removeAttribute" type="void" line="592">
                <params>
                    <param name="name" type="String"/>
                    <param name="checkPresent" type="boolean"/>
                </params>
                <declaration name="numAttributes" type="int" line="593"/>
                <scope line="594">
                    <declaration name="attr" type="IIOAttr" line="595"/>
                    <scope line="596"/>
                </scope>
                <scope line="602"/>
            </method>
            <javadoc line="606">
                Equivalent to &lt;code&gt;removeAttribute(localName)&lt;/code&gt;.                
            </javadoc>
            <method name="removeAttributeNS" type="void" line="609">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                </params>
            </method>
            <method name="getAttributeNode" type="Attr" line="612">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="node" type="Node" line="613"/>
            </method>
            <javadoc line="616">
                Equivalent to &lt;code&gt;getAttributeNode(localName)&lt;/code&gt;.                
                <see>
                    #setAttributeNodeNS                    
                </see>
            </javadoc>
            <method name="getAttributeNodeNS" type="Attr" line="620">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                </params>
            </method>
            <method name="setAttributeNode" type="Attr" line="623">
                <params>
                    <param name="newAttr" type="Attr"/>
                </params>
                <declaration name="owner" type="Element" line="624"/>
                <scope line="625">
                    <scope line="626"/>
                    <scope line="629"/>
                </scope>
                <declaration name="attr" type="IIOAttr" line="633"/>
                <scope line="634"/>
                <scope line="638"/>
                <declaration name="oldAttr" type="Attr" line="641"/>
                <scope line="642"/>
            </method>
            <javadoc line="648">
                Equivalent to &lt;code&gt;setAttributeNode(newAttr)&lt;/code&gt;.                
                <see>
                    #getAttributeNodeNS                    
                </see>
            </javadoc>
            <method name="setAttributeNodeNS" type="Attr" line="652">
                <params>
                    <param name="newAttr" type="Attr"/>
                </params>
            </method>
            <method name="removeAttributeNode" type="Attr" line="655">
                <params>
                    <param name="oldAttr" type="Attr"/>
                </params>
            </method>
            <method name="getElementsByTagName" type="NodeList" line="659">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="l" type="List" line="660"/>
            </method>
            <method name="getElementsByTagName" type="void" line="664">
                <params>
                    <param name="name" type="String"/>
                    <param name="l" type="List"/>
                </params>
                <scope line="665"/>
                <declaration name="child" type="Node" line="668"/>
                <scope line="669"/>
            </method>
            <javadoc line="674">
                Equivalent to &lt;code&gt;getElementsByTagName(localName)&lt;/code&gt;.                
            </javadoc>
            <method name="getElementsByTagNameNS" type="NodeList" line="677">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                </params>
            </method>
            <method name="hasAttributes" type="boolean" line="680"/>
            <method name="hasAttribute" type="boolean" line="683">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="686">
                Equivalent to &lt;code&gt;hasAttribute(localName)&lt;/code&gt;.                
            </javadoc>
            <method name="hasAttributeNS" type="boolean" line="689">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                </params>
            </method>
            <method name="getLength" type="int" line="692"/>
            <method name="item" type="Node" line="695">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="696"/>
                <declaration name="child" type="Node" line="699"/>
                <scope line="700"/>
            </method>
            <javadoc line="705">
                Returns the &lt;code&gt;Object&lt;/code&gt; value associated with this node.                
                <return>
                    the user &lt;code&gt;Object&lt;/code&gt;.                    
                </return>
                <see>
                    #setUserObject                    
                </see>
            </javadoc>
            <method name="getUserObject" type="Object" line="710"/>
            <javadoc line="713">
                Sets the value associated with this node.                
                <param>
                    userObject the user &lt;code&gt;Object&lt;/code&gt;.                    
                </param>
                <see>
                    #getUserObject                    
                </see>
            </javadoc>
            <method name="setUserObject" type="void" line="718">
                <params>
                    <param name="userObject" type="Object"/>
                </params>
            </method>
            <javadoc line="721">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="setIdAttribute" type="void" line="725">
                <params>
                    <param name="name" type="String"/>
                    <param name="isId" type="boolean"/>
                </params>
            </method>
            <javadoc line="728">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="setIdAttributeNS" type="void" line="732">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                    <param name="isId" type="boolean"/>
                </params>
            </method>
            <javadoc line="735">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="setIdAttributeNode" type="void" line="739">
                <params>
                    <param name="idAttr" type="Attr"/>
                    <param name="isId" type="boolean"/>
                </params>
            </method>
            <javadoc line="742">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="getSchemaTypeInfo" type="TypeInfo" line="746"/>
            <javadoc line="749">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="setUserData" type="Object" line="753">
                <params>
                    <param name="key" type="String"/>
                    <param name="data" type="Object"/>
                    <param name="handler" type="UserDataHandler"/>
                </params>
            </method>
            <javadoc line="756">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="getUserData" type="Object" line="760">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="763">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="getFeature" type="Object" line="767">
                <params>
                    <param name="feature" type="String"/>
                    <param name="version" type="String"/>
                </params>
            </method>
            <javadoc line="770">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="isSameNode" type="boolean" line="774">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <javadoc line="777">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="isEqualNode" type="boolean" line="781">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <javadoc line="784">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="lookupNamespaceURI" type="String" line="788">
                <params>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <javadoc line="791">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="isDefaultNamespace" type="boolean" line="795">
                <params>
                    <param name="namespaceURI" type="String"/>
                </params>
            </method>
            <javadoc line="798">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="lookupPrefix" type="String" line="802">
                <params>
                    <param name="namespaceURI" type="String"/>
                </params>
            </method>
            <javadoc line="805">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="getTextContent" type="String" line="809"/>
            <javadoc line="812">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="setTextContent" type="void" line="816">
                <params>
                    <param name="textContent" type="String"/>
                </params>
            </method>
            <javadoc line="819">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="compareDocumentPosition" type="short" line="823">
                <params>
                    <param name="other" type="Node"/>
                </params>
            </method>
            <javadoc line="826">
                This DOM Level 3 method is not supported for {@code IIOMetadataNode}and will throw a {@code DOMException}.                
                <throws>
                    DOMException - always.                    
                </throws>
            </javadoc>
            <method name="getBaseURI" type="String" line="830"/>
        </class>
    </source>