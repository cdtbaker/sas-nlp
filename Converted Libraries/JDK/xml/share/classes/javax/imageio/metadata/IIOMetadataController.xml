<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.metadata">
        <interface name="IIOMetadataController">
            <javadoc line="28">
                An interface to be implemented by objects that can determine the
                  settings of an &lt;code&gt;IIOMetadata&lt;/code&gt; object, either by putting
                  up a GUI to obtain values from a user, or by other means.  This
                  interface merely specifies a generic &lt;code&gt;activate&lt;/code&gt; method
                  that invokes the controller, without regard for how the controller
                  obtains values (&lt;i&gt;i.e.&lt;/i&gt;, whether the controller puts up a GUI
                  or merely computes a set of values is irrelevant to this
                  interface).
                  &lt;p&gt; Within the &lt;code&gt;activate&lt;/code&gt; method, a controller obtains
                  initial values by querying the &lt;code&gt;IIOMetadata&lt;/code&gt; object&apos;s
                  settings, either using the XML DOM tree or a plug-in specific
                  interface, modifies values by whatever means, then modifies the
                  &lt;code&gt;IIOMetadata&lt;/code&gt; object&apos;s settings, using either the
                  &lt;code&gt;setFromTree&lt;/code&gt; or &lt;code&gt;mergeTree&lt;/code&gt; methods, or a
                  plug-in specific interface.  In general, applications may expect
                  that when the &lt;code&gt;activate&lt;/code&gt; method returns
                  &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;IIOMetadata&lt;/code&gt; object is ready for
                  use in a write operation.
                  &lt;p&gt; Vendors may choose to provide GUIs for the
                  &lt;code&gt;IIOMetadata&lt;/code&gt; subclasses they define for a particular
                  plug-in.  These can be set up as default controllers in the
                  corresponding &lt;code&gt;IIOMetadata&lt;/code&gt; subclasses.
                  &lt;p&gt; Alternatively, an algorithmic process such as a database lookup
                  or the parsing of a command line could be used as a controller, in
                  which case the &lt;code&gt;activate&lt;/code&gt; method would simply look up or
                  compute the settings, call methods on &lt;code&gt;IIOMetadata&lt;/code&gt; to
                  set its state, and return &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    IIOMetadata#setController                    
                </see>
                <see>
                    IIOMetadata#getController                    
                </see>
                <see>
                    IIOMetadata#getDefaultController                    
                </see>
                <see>
                    IIOMetadata#hasController                    
                </see>
                <see>
                    IIOMetadata#activateController                    
                </see>
            </javadoc>
            <method name="activate" type="boolean" line="69"/>
            <javadoc line="69">
                Activates the controller.  If &lt;code&gt;true&lt;/code&gt; is returned,
                  all settings in the &lt;code&gt;IIOMetadata&lt;/code&gt; object should be
                  ready for use in a write operation.  If &lt;code&gt;false&lt;/code&gt; is
                  returned, no settings in the &lt;code&gt;IIOMetadata&lt;/code&gt; object
                  will be disturbed (&lt;i&gt;i.e.&lt;/i&gt;, the user canceled the
                  operation).                
                <param>
                    metadata the <code>IIOMetadata</code> object to be modified.                    
                </param>
                <return>
                    <code>true</code> if the <code>IIOMetadata</code> has been
                      modified, <code>false</code> otherwise.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>metadata</code> is
                      <code>null</code> or is not an instance of the correct class.                    
                </exception>
            </javadoc>
        </interface>
    </source>