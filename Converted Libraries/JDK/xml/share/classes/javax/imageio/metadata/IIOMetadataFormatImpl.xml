<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.metadata">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="com.sun.imageio.plugins.common.StandardMetadataFormat"/>
        <class name="IIOMetadataFormatImpl" line="13">
            <implements interface="IIOMetadataFormat"/>
            <javadoc line="13">
                A concrete class providing a reusable implementation of the
                  &lt;code&gt;IIOMetadataFormat&lt;/code&gt; interface.  In addition, a static
                  instance representing the standard, plug-in neutral
                  &lt;code&gt;javax_imageio_1.0&lt;/code&gt; format is provided by the
                  &lt;code&gt;getStandardFormatInstance&lt;/code&gt; method.
                  &lt;p&gt; In order to supply localized descriptions of elements and
                  attributes, a &lt;code&gt;ResourceBundle&lt;/code&gt; with a base name of
                  &lt;code&gt;this.getClass().getName() + &quot;Resources&quot;&lt;/code&gt; should be
                  supplied via the usual mechanism used by
                  &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt;.  Briefly, the subclasser
                  supplies one or more additional classes according to a naming
                  convention (by default, the fully-qualified name of the subclass
                  extending &lt;code&gt;IIMetadataFormatImpl&lt;/code&gt;, plus the string
                  &quot;Resources&quot;, plus the country, language, and variant codes
                  separated by underscores).  At run time, calls to
                  &lt;code&gt;getElementDescription&lt;/code&gt; or
                  &lt;code&gt;getAttributeDescription&lt;/code&gt; will attempt to load such
                  classes dynamically according to the supplied locale, and will use
                  either the element name, or the element name followed by a &apos;/&apos;
                  character followed by the attribute name as a key.  This key will
                  be supplied to the &lt;code&gt;ResourceBundle&lt;/code&gt;&apos;s
                  &lt;code&gt;getString&lt;/code&gt; method, and the resulting localized
                  description of the node or attribute is returned.
                  &lt;p&gt; The subclass may supply a different base name for the resource
                  bundles using the &lt;code&gt;setResourceBaseName&lt;/code&gt; method.
                  &lt;p&gt; A subclass may choose its own localization mechanism, if so
                  desired, by overriding the supplied implementations of
                  &lt;code&gt;getElementDescription&lt;/code&gt; and
                  &lt;code&gt;getAttributeDescription&lt;/code&gt;.                
                <see>
                    ResourceBundle#getBundle(String,Locale)                    
                </see>
            </javadoc>
            <declaration name="standardMetadataFormatName" type="String" line="46"/>
            <javadoc line="46">
                A &lt;code&gt;String&lt;/code&gt; constant containing the standard format
                  name, &lt;code&gt;&quot;javax_imageio_1.0&quot;&lt;/code&gt;.                
            </javadoc>
            <declaration name="standardFormat" type="IIOMetadataFormat" line="51"/>
            <declaration name="resourceBaseName" type="String" line="52"/>
            <declaration name="rootName" type="String" line="53"/>
            <declaration name="elementMap" type="HashMap" line="54"/>
            <class name="Element" line="55">
                <declaration name="elementName" type="String" line="56"/>
                <declaration name="childPolicy" type="int" line="57"/>
                <declaration name="minChildren" type="int" line="58"/>
                <declaration name="maxChildren" type="int" line="59"/>
                <declaration name="childList" type="List" line="60"/>
                <declaration name="parentList" type="List" line="61"/>
                <declaration name="attrList" type="List" line="62"/>
                <declaration name="attrMap" type="Map" line="63"/>
                <declaration name="objectValue" type="ObjectValue" line="64"/>
            </class>
            <class name="Attribute" line="66">
                <declaration name="attrName" type="String" line="67"/>
                <declaration name="valueType" type="int" line="68"/>
                <declaration name="dataType" type="int" line="69"/>
                <declaration name="required" type="boolean" line="70"/>
                <declaration name="defaultValue" type="String" line="71"/>
                <declaration name="enumeratedValues" type="List" line="72"/>
                <declaration name="minValue" type="String" line="73"/>
                <declaration name="maxValue" type="String" line="74"/>
                <declaration name="listMinLength" type="int" line="75"/>
                <declaration name="listMaxLength" type="int" line="76"/>
            </class>
            <class name="ObjectValue" line="78">
                <declaration name="valueType" type="int" line="79"/>
                <declaration name="classType" type="Class" line="80"/>
                <declaration name="defaultValue" type="Object" line="81"/>
                <declaration name="enumeratedValues" type="List" line="82"/>
                <declaration name="minValue" type="Comparable" line="83"/>
                <declaration name="maxValue" type="Comparable" line="84"/>
                <declaration name="arrayMinLength" type="int" line="85"/>
                <declaration name="arrayMaxLength" type="int" line="86"/>
            </class>
            <javadoc line="88">
                Constructs a blank &lt;code&gt;IIOMetadataFormatImpl&lt;/code&gt; instance,
                  with a given root element name and child policy (other than
                  &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;).  Additional elements, and
                  their attributes and &lt;code&gt;Object&lt;/code&gt; reference information
                  may be added using the various &lt;code&gt;add&lt;/code&gt; methods.                
                <param>
                    rootName the name of the root element.                    
                </param>
                <param>
                    childPolicy one of the &lt;code&gt;CHILD_POLICY_&lt;/code&gt; constants,
                      other than &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;rootName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;childPolicy&lt;/code&gt; is
                      not one of the predefined constants.                    
                </exception>
            </javadoc>
            <method name="IIOMetadataFormatImpl" type="constructor" line="102">
                <params>
                    <param name="rootName" type="String"/>
                    <param name="childPolicy" type="int"/>
                </params>
                <scope line="103"/>
                <scope line="106"/>
                <declaration name="root" type="Element" line="110"/>
            </method>
            <javadoc line="115">
                Constructs a blank &lt;code&gt;IIOMetadataFormatImpl&lt;/code&gt; instance,
                  with a given root element name and a child policy of
                  &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.  Additional elements, and
                  their attributes and &lt;code&gt;Object&lt;/code&gt; reference information
                  may be added using the various &lt;code&gt;add&lt;/code&gt; methods.                
                <param>
                    rootName the name of the root element.                    
                </param>
                <param>
                    minChildren the minimum number of children of the node.                    
                </param>
                <param>
                    maxChildren the maximum number of children of the node.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;rootName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;minChildren&lt;/code&gt;
                      is negative or larger than &lt;code&gt;maxChildren&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="IIOMetadataFormatImpl" type="constructor" line="129">
                <params>
                    <param name="rootName" type="String"/>
                    <param name="minChildren" type="int"/>
                    <param name="maxChildren" type="int"/>
                </params>
                <scope line="130"/>
                <scope line="133"/>
                <scope line="136"/>
                <declaration name="root" type="Element" line="139"/>
            </method>
            <javadoc line="147">
                Sets a new base name for locating &lt;code&gt;ResourceBundle&lt;/code&gt;s
                  containing descriptions of elements and attributes for this
                  format.
                  &lt;p&gt; Prior to the first time this method is called, the base
                  name will be equal to &lt;code&gt;this.getClass().getName() +
                  &quot;Resources&quot;&lt;/code&gt;.                
                <param>
                    resourceBaseName a &lt;code&gt;String&lt;/code&gt; containg the new
                      base name.                    
                </param>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;resourceBaseName&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #getResourceBaseName                    
                </see>
            </javadoc>
            <method name="setResourceBaseName" type="void" line="160">
                <params>
                    <param name="resourceBaseName" type="String"/>
                </params>
                <scope line="161"/>
            </method>
            <javadoc line="166">
                Returns the currently set base name for locating
                  &lt;code&gt;ResourceBundle&lt;/code&gt;s.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; containing the base name.                    
                </return>
                <see>
                    #setResourceBaseName                    
                </see>
            </javadoc>
            <method name="getResourceBaseName" type="String" line="172"/>
            <javadoc line="175">
                Utility method for locating an element.                
                <param>
                    mustAppear if &lt;code&gt;true&lt;/code&gt;, throw an
                      &lt;code&gt;IllegalArgumentException&lt;/code&gt; if no such node exists;
                      if &lt;code&gt;false&lt;/code&gt;, just return null.                    
                </param>
            </javadoc>
            <method name="getElement" type="Element" line="181">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="mustAppear" type="boolean"/>
                </params>
                <scope line="182"/>
                <declaration name="element" type="Element" line="185"/>
                <scope line="186"/>
            </method>
            <method name="getElement" type="Element" line="191">
                <params>
                    <param name="elementName" type="String"/>
                </params>
            </method>
            <method name="getAttribute" type="Attribute" line="194">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="195"/>
                <declaration name="attr" type="Attribute" line="196"/>
                <scope line="197"/>
            </method>
            <javadoc line="202">
                Adds a new element type to this metadata document format with a
                  child policy other than &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.                
                <param>
                    elementName the name of the new element.                    
                </param>
                <param>
                    parentName the name of the element that will be the
                      parent of the new element.                    
                </param>
                <param>
                    childPolicy one of the &lt;code&gt;CHILD_POLICY_&lt;/code&gt;
                      constants, other than &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;,
                      indicating the child policy of the new element.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;parentName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;childPolicy&lt;/code&gt;
                      is not one of the predefined constants.                    
                </exception>
            </javadoc>
            <method name="addElement" type="void" line="217">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="parentName" type="String"/>
                    <param name="childPolicy" type="int"/>
                </params>
                <declaration name="parent" type="Element" line="218"/>
                <scope line="219"/>
                <declaration name="element" type="Element" line="222"/>
            </method>
            <javadoc line="229">
                Adds a new element type to this metadata document format with a
                  child policy of &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.                
                <param>
                    elementName the name of the new element.                    
                </param>
                <param>
                    parentName the name of the element that will be the
                      parent of the new element.                    
                </param>
                <param>
                    minChildren the minimum number of children of the node.                    
                </param>
                <param>
                    maxChildren the maximum number of children of the node.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;parentName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;minChildren&lt;/code&gt;
                      is negative or larger than &lt;code&gt;maxChildren&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="addElement" type="void" line="243">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="parentName" type="String"/>
                    <param name="minChildren" type="int"/>
                    <param name="maxChildren" type="int"/>
                </params>
                <declaration name="parent" type="Element" line="244"/>
                <scope line="245"/>
                <scope line="248"/>
                <declaration name="element" type="Element" line="251"/>
            </method>
            <javadoc line="260">
                Adds an existing element to the list of legal children for a
                  given parent node type.                
                <param>
                    parentName the name of the element that will be the
                      new parent of the element.                    
                </param>
                <param>
                    elementName the name of the element to be addded as a
                      child.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;parentName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
            </javadoc>
            <method name="addChildElement" type="void" line="274">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="parentName" type="String"/>
                </params>
                <declaration name="parent" type="Element" line="275"/>
                <declaration name="element" type="Element" line="276"/>
            </method>
            <javadoc line="280">
                Removes an element from the format.  If no element with the
                  given name was present, nothing happens and no exception is
                  thrown.                
                <param>
                    elementName the name of the element to be removed.                    
                </param>
            </javadoc>
            <method name="removeElement" type="void" line="286">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="287"/>
                <scope line="288">
                    <declaration name="iter" type="Iterator" line="289"/>
                    <scope line="290">
                        <declaration name="parentName" type="String" line="291"/>
                        <declaration name="parent" type="Element" line="292"/>
                        <scope line="293"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="300">
                Adds a new attribute to a previously defined element that may
                  be set to an arbitrary value.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    dataType the data type (string format) of the attribute,
                      one of the &lt;code&gt;DATATYPE_&lt;/code&gt; constants.                    
                </param>
                <param>
                    required &lt;code&gt;true&lt;/code&gt; if the attribute must be present.                    
                </param>
                <param>
                    defaultValue the default value for the attribute, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;attrName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of the predefined constants.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="318">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="dataType" type="int"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="String"/>
                </params>
                <declaration name="element" type="Element" line="319"/>
                <scope line="320"/>
                <scope line="323"/>
                <declaration name="attr" type="Attribute" line="326"/>
            </method>
            <javadoc line="335">
                Adds a new attribute to a previously defined element that will
                  be defined by a set of enumerated values.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    dataType the data type (string format) of the attribute,
                      one of the &lt;code&gt;DATATYPE_&lt;/code&gt; constants.                    
                </param>
                <param>
                    required &lt;code&gt;true&lt;/code&gt; if the attribute must be present.                    
                </param>
                <param>
                    defaultValue the default value for the attribute, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    enumeratedValues a &lt;code&gt;List&lt;/code&gt; of
                      &lt;code&gt;String&lt;/code&gt;s containing the legal values for the
                      attribute.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;attrName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of the predefined constants.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;enumeratedValues&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;enumeratedValues&lt;/code&gt; does not contain at least one
                      entry.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;enumeratedValues&lt;/code&gt; contains an element that is not a
                      &lt;code&gt;String&lt;/code&gt; or is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="364">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="dataType" type="int"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="String"/>
                    <param name="enumeratedValues" type="List&lt;String&gt;"/>
                </params>
                <declaration name="element" type="Element" line="365"/>
                <scope line="366"/>
                <scope line="369"/>
                <scope line="372"/>
                <scope line="375"/>
                <declaration name="iter" type="Iterator" line="378"/>
                <scope line="379">
                    <declaration name="o" type="Object" line="380"/>
                    <scope line="381"/>
                    <scope line="384"/>
                </scope>
                <declaration name="attr" type="Attribute" line="388"/>
            </method>
            <javadoc line="398">
                Adds a new attribute to a previously defined element that will
                  be defined by a range of values.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    dataType the data type (string format) of the attribute,
                      one of the &lt;code&gt;DATATYPE_&lt;/code&gt; constants.                    
                </param>
                <param>
                    required &lt;code&gt;true&lt;/code&gt; if the attribute must be present.                    
                </param>
                <param>
                    defaultValue the default value for the attribute, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    minValue the smallest (inclusive or exclusive depending
                      on the value of &lt;code&gt;minInclusive&lt;/code&gt;) legal value for the
                      attribute, as a &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    maxValue the largest (inclusive or exclusive depending
                      on the value of &lt;code&gt;minInclusive&lt;/code&gt;) legal value for the
                      attribute, as a &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    minInclusive &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;minValue&lt;/code&gt;
                      is inclusive.                    
                </param>
                <param>
                    maxInclusive &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;maxValue&lt;/code&gt;
                      is inclusive.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;attrName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of the predefined constants.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="426">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="dataType" type="int"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="String"/>
                    <param name="minValue" type="String"/>
                    <param name="maxValue" type="String"/>
                    <param name="minInclusive" type="boolean"/>
                    <param name="maxInclusive" type="boolean"/>
                </params>
                <declaration name="element" type="Element" line="427"/>
                <scope line="428"/>
                <scope line="431"/>
                <declaration name="attr" type="Attribute" line="434"/>
                <scope line="437"/>
                <scope line="440"/>
            </method>
            <javadoc line="451">
                Adds a new attribute to a previously defined element that will
                  be defined by a list of values.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    dataType the data type (string format) of the attribute,
                      one of the &lt;code&gt;DATATYPE_&lt;/code&gt; constants.                    
                </param>
                <param>
                    required &lt;code&gt;true&lt;/code&gt; if the attribute must be present.                    
                </param>
                <param>
                    listMinLength the smallest legal number of list items.                    
                </param>
                <param>
                    listMaxLength the largest legal number of list items.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;attrName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is
                      not one of the predefined constants.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;listMinLength&lt;/code&gt; is negative or larger than
                      &lt;code&gt;listMaxLength&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="472">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="dataType" type="int"/>
                    <param name="required" type="boolean"/>
                    <param name="listMinLength" type="int"/>
                    <param name="listMaxLength" type="int"/>
                </params>
                <declaration name="element" type="Element" line="473"/>
                <scope line="474"/>
                <scope line="477"/>
                <scope line="480"/>
                <declaration name="attr" type="Attribute" line="483"/>
            </method>
            <javadoc line="493">
                Adds a new attribute to a previously defined element that will
                  be defined by the enumerated values &lt;code&gt;TRUE&lt;/code&gt; and
                  &lt;code&gt;FALSE&lt;/code&gt;, with a datatype of
                  &lt;code&gt;DATATYPE_BOOLEAN&lt;/code&gt;.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    hasDefaultValue &lt;code&gt;true&lt;/code&gt; if a default value
                      should be present.                    
                </param>
                <param>
                    defaultValue the default value for the attribute as a
                      &lt;code&gt;boolean&lt;/code&gt;, ignored if &lt;code&gt;hasDefaultValue&lt;/code&gt;
                      is &lt;code&gt;false&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;attrName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="addBooleanAttribute" type="void" line="511">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="hasDefaultValue" type="boolean"/>
                    <param name="defaultValue" type="boolean"/>
                </params>
                <declaration name="values" type="List" line="512"/>
                <declaration name="dval" type="String" line="515"/>
                <scope line="516"/>
            </method>
            <javadoc line="521">
                Removes an attribute from a previously defined element.  If no
                  attribute with the given name was present in the given element,
                  nothing happens and no exception is thrown.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being removed.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="removeAttribute" type="void" line="530">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="531"/>
            </method>
            <javadoc line="535">
                Allows an &lt;code&gt;Object&lt;/code&gt; reference of a given class type
                  to be stored in nodes implementing the named element.  The
                  value of the &lt;code&gt;Object&lt;/code&gt; is unconstrained other than by
                  its class type.
                  &lt;p&gt; If an &lt;code&gt;Object&lt;/code&gt; reference was previously allowed,
                  the previous settings are overwritten.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    classType a &lt;code&gt;Class&lt;/code&gt; variable indicating the
                      legal class type for the object value.                    
                </param>
                <param>
                    required &lt;code&gt;true&lt;/code&gt; if an object value must be present.                    
                </param>
                <param>
                    defaultValue the default value for the
                      &lt;code&gt;Object&lt;/code&gt; reference, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="addObjectValue" type="void" line="551">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="classType" type="Class&lt;T&gt;"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="T"/>
                </params>
                <declaration name="element" type="Element" line="552"/>
                <declaration name="obj" type="ObjectValue" line="553"/>
            </method>
            <javadoc line="559">
                Allows an &lt;code&gt;Object&lt;/code&gt; reference of a given class type
                  to be stored in nodes implementing the named element.  The
                  value of the &lt;code&gt;Object&lt;/code&gt; must be one of the values
                  given by &lt;code&gt;enumeratedValues&lt;/code&gt;.
                  &lt;p&gt; If an &lt;code&gt;Object&lt;/code&gt; reference was previously allowed,
                  the previous settings are overwritten.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    classType a &lt;code&gt;Class&lt;/code&gt; variable indicating the
                      legal class type for the object value.                    
                </param>
                <param>
                    required &lt;code&gt;true&lt;/code&gt; if an object value must be present.                    
                </param>
                <param>
                    defaultValue the default value for the
                      &lt;code&gt;Object&lt;/code&gt; reference, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    enumeratedValues a &lt;code&gt;List&lt;/code&gt; of
                      &lt;code&gt;Object&lt;/code&gt;s containing the legal values for the
                      object reference.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this format.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;enumeratedValues&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;enumeratedValues&lt;/code&gt; does not contain at least one
                      entry.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;enumeratedValues&lt;/code&gt; contains an element that is not
                      an instance of the class type denoted by &lt;code&gt;classType&lt;/code&gt;
                      or is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="addObjectValue" type="void" line="587">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="classType" type="Class&lt;T&gt;"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="T"/>
                    <param name="enumeratedValues" type="List&lt;? extends T&gt;"/>
                </params>
                <declaration name="element" type="Element" line="588"/>
                <scope line="589"/>
                <scope line="592"/>
                <declaration name="iter" type="Iterator" line="595"/>
                <scope line="596">
                    <declaration name="o" type="Object" line="597"/>
                    <scope line="598"/>
                    <scope line="601"/>
                </scope>
                <declaration name="obj" type="ObjectValue" line="605"/>
            </method>
            <javadoc line="612">
                Allows an &lt;code&gt;Object&lt;/code&gt; reference of a given class type
                  to be stored in nodes implementing the named element.  The
                  value of the &lt;code&gt;Object&lt;/code&gt; must be within the range given
                  by &lt;code&gt;minValue&lt;/code&gt; and &lt;code&gt;maxValue&lt;/code&gt;.
                  Furthermore, the class type must implement the
                  &lt;code&gt;Comparable&lt;/code&gt; interface.
                  &lt;p&gt; If an &lt;code&gt;Object&lt;/code&gt; reference was previously allowed,
                  the previous settings are overwritten.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    classType a &lt;code&gt;Class&lt;/code&gt; variable indicating the
                      legal class type for the object value.                    
                </param>
                <param>
                    defaultValue the default value for the                    
                </param>
                <param>
                    minValue the smallest (inclusive or exclusive depending
                      on the value of &lt;code&gt;minInclusive&lt;/code&gt;) legal value for the
                      object value, as a &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    maxValue the largest (inclusive or exclusive depending
                      on the value of &lt;code&gt;minInclusive&lt;/code&gt;) legal value for the
                      object value, as a &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    minInclusive &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;minValue&lt;/code&gt;
                      is inclusive.                    
                </param>
                <param>
                    maxInclusive &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;maxValue&lt;/code&gt;
                      is inclusive.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this
                      format.                    
                </exception>
            </javadoc>
            <method name="addObjectValue" type="void" line="639">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="classType" type="Class&lt;T&gt;"/>
                    <param name="defaultValue" type="T"/>
                    <param name="minValue" type="Comparable&lt;? super T&gt;"/>
                    <param name="maxValue" type="Comparable&lt;? super T&gt;"/>
                    <param name="minInclusive" type="boolean"/>
                    <param name="maxInclusive" type="boolean"/>
                </params>
                <declaration name="element" type="Element" line="640"/>
                <declaration name="obj" type="ObjectValue" line="641"/>
                <scope line="643"/>
                <scope line="646"/>
            </method>
            <javadoc line="655">
                Allows an &lt;code&gt;Object&lt;/code&gt; reference of a given class type
                  to be stored in nodes implementing the named element.  The
                  value of the &lt;code&gt;Object&lt;/code&gt; must an array of objects of
                  class type given by &lt;code&gt;classType&lt;/code&gt;, with at least
                  &lt;code&gt;arrayMinLength&lt;/code&gt; and at most
                  &lt;code&gt;arrayMaxLength&lt;/code&gt; elements.
                  &lt;p&gt; If an &lt;code&gt;Object&lt;/code&gt; reference was previously allowed,
                  the previous settings are overwritten.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    classType a &lt;code&gt;Class&lt;/code&gt; variable indicating the
                      legal class type for the object value.                    
                </param>
                <param>
                    arrayMinLength the smallest legal length for the array.                    
                </param>
                <param>
                    arrayMaxLength the largest legal length for the array.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt; is
                      not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="addObjectValue" type="void" line="672">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="classType" type="Class&lt;?&gt;"/>
                    <param name="arrayMinLength" type="int"/>
                    <param name="arrayMaxLength" type="int"/>
                </params>
                <declaration name="element" type="Element" line="673"/>
                <declaration name="obj" type="ObjectValue" line="674"/>
            </method>
            <javadoc line="681">
                Disallows an &lt;code&gt;Object&lt;/code&gt; reference from being stored in
                  nodes implementing the named element.                
                <param>
                    elementName the name of the element.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt; is
                      not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="removeObjectValue" type="void" line="688">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="689"/>
            </method>
            <method name="getRootName" type="String" line="692"/>
            <method name="canNodeAppear" type="boolean" line="695"/>
            <method name="getElementMinChildren" type="int" line="696">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="697"/>
                <scope line="698"/>
            </method>
            <method name="getElementMaxChildren" type="int" line="703">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="704"/>
                <scope line="705"/>
            </method>
            <method name="getResource" type="String" line="710">
                <params>
                    <param name="key" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="711"/>
                <anonymous_class line="714">
                    <method name="run" type="Object" line="715"/>
                </anonymous_class>
                <declaration name="loader" type="ClassLoader" line="714"/>
                <declaration name="bundle" type="ResourceBundle" line="720"/>
                <scope line="721"/>
                <scope line="724">
                    <scope line="725"/>
                    <scope line="728"/>
                </scope>
                <scope line="732"/>
                <scope line="735"/>
            </method>
            <javadoc line="739">
                Returns a &lt;code&gt;String&lt;/code&gt; containing a description of the
                  named element, or &lt;code&gt;null&lt;/code&gt;.  The desciption will be
                  localized for the supplied &lt;code&gt;Locale&lt;/code&gt; if possible.
                  &lt;p&gt; The default implementation will first locate a
                  &lt;code&gt;ResourceBundle&lt;/code&gt; using the current resource base
                  name set by &lt;code&gt;setResourceBaseName&lt;/code&gt; and the supplied
                  &lt;code&gt;Locale&lt;/code&gt;, using the fallback mechanism described in
                  the comments for &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt;.  If a
                  &lt;code&gt;ResourceBundle&lt;/code&gt; is found, the element name will be
                  used as a key to its &lt;code&gt;getString&lt;/code&gt; method, and the
                  result returned.  If no &lt;code&gt;ResourceBundle&lt;/code&gt; is found,
                  or no such key is present, &lt;code&gt;null&lt;/code&gt; will be returned.
                  &lt;p&gt; If &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the current
                  default &lt;code&gt;Locale&lt;/code&gt; returned by &lt;code&gt;Locale.getLocale&lt;/code&gt;
                  will be used.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    locale the &lt;code&gt;Locale&lt;/code&gt; for which localization
                      will be attempted.                    
                </param>
                <return>
                    the element description.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this format.                    
                </exception>
                <see>
                    #setResourceBaseName                    
                </see>
            </javadoc>
            <method name="getElementDescription" type="String" line="763">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="element" type="Element" line="764"/>
            </method>
            <method name="getChildPolicy" type="int" line="767">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="768"/>
            </method>
            <method name="getChildNames" type="String[]" line="771">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="772"/>
                <scope line="773"/>
            </method>
            <method name="getAttributeNames" type="String[]" line="778">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="779"/>
                <declaration name="names" type="List" line="780"/>
                <declaration name="result" type="String[]" line="781"/>
            </method>
            <method name="getAttributeValueType" type="int" line="784">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="785"/>
            </method>
            <method name="getAttributeDataType" type="int" line="788">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="789"/>
            </method>
            <method name="isAttributeRequired" type="boolean" line="792">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="793"/>
            </method>
            <method name="getAttributeDefaultValue" type="String" line="796">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="797"/>
            </method>
            <method name="getAttributeEnumerations" type="String[]" line="800">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="801"/>
                <scope line="802"/>
                <declaration name="values" type="List" line="805"/>
                <declaration name="iter" type="Iterator" line="806"/>
                <declaration name="result" type="String[]" line="807"/>
            </method>
            <method name="getAttributeMinValue" type="String" line="810">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="811"/>
                <scope line="812"/>
            </method>
            <method name="getAttributeMaxValue" type="String" line="817">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="818"/>
                <scope line="819"/>
            </method>
            <method name="getAttributeListMinLength" type="int" line="824">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="825"/>
                <scope line="826"/>
            </method>
            <method name="getAttributeListMaxLength" type="int" line="831">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="832"/>
                <scope line="833"/>
            </method>
            <javadoc line="838">
                Returns a &lt;code&gt;String&lt;/code&gt; containing a description of the
                  named attribute, or &lt;code&gt;null&lt;/code&gt;.  The desciption will be
                  localized for the supplied &lt;code&gt;Locale&lt;/code&gt; if possible.
                  &lt;p&gt; The default implementation will first locate a
                  &lt;code&gt;ResourceBundle&lt;/code&gt; using the current resource base
                  name set by &lt;code&gt;setResourceBaseName&lt;/code&gt; and the supplied
                  &lt;code&gt;Locale&lt;/code&gt;, using the fallback mechanism described in
                  the comments for &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt;.  If a
                  &lt;code&gt;ResourceBundle&lt;/code&gt; is found, the element name followed
                  by a &quot;/&quot; character followed by the attribute name
                  (&lt;code&gt;elementName + &quot;/&quot; + attrName&lt;/code&gt;) will be used as a
                  key to its &lt;code&gt;getString&lt;/code&gt; method, and the result
                  returned.  If no &lt;code&gt;ResourceBundle&lt;/code&gt; is found, or no
                  such key is present, &lt;code&gt;null&lt;/code&gt; will be returned.
                  &lt;p&gt; If &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the current
                  default &lt;code&gt;Locale&lt;/code&gt; returned by &lt;code&gt;Locale.getLocale&lt;/code&gt;
                  will be used.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute.                    
                </param>
                <param>
                    locale the &lt;code&gt;Locale&lt;/code&gt; for which localization
                      will be attempted, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    the attribute description.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;elementName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, or is not a legal element name for this format.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;attrName&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt; or is not a legal attribute name for this
                      element.                    
                </exception>
                <see>
                    #setResourceBaseName                    
                </see>
            </javadoc>
            <method name="getAttributeDescription" type="String" line="868">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="element" type="Element" line="869"/>
                <scope line="870"/>
                <declaration name="attr" type="Attribute" line="873"/>
                <scope line="874"/>
                <declaration name="key" type="String" line="877"/>
            </method>
            <method name="getObjectValue" type="ObjectValue" line="880">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="881"/>
                <declaration name="objv" type="ObjectValue" line="882"/>
                <scope line="883"/>
            </method>
            <method name="getObjectValueType" type="int" line="888">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="889"/>
                <declaration name="objv" type="ObjectValue" line="890"/>
                <scope line="891"/>
            </method>
            <method name="getObjectClass" type="Class&lt;?&gt;" line="896">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="897"/>
            </method>
            <method name="getObjectDefaultValue" type="Object" line="900">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="901"/>
            </method>
            <method name="getObjectEnumerations" type="Object[]" line="904">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="905"/>
                <scope line="906"/>
                <declaration name="vlist" type="List" line="909"/>
                <declaration name="values" type="Object[]" line="910"/>
            </method>
            <method name="getObjectMinValue" type="Comparable&lt;?&gt;" line="913">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="914"/>
                <scope line="915"/>
            </method>
            <method name="getObjectMaxValue" type="Comparable&lt;?&gt;" line="920">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="921"/>
                <scope line="922"/>
            </method>
            <method name="getObjectArrayMinLength" type="int" line="927">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="928"/>
                <scope line="929"/>
            </method>
            <method name="getObjectArrayMaxLength" type="int" line="934">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="935"/>
                <scope line="936"/>
            </method>
            <method name="createStandardFormat" type="void" line="941">
                <scope line="942"/>
            </method>
            <javadoc line="946">
                Returns an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object describing the
                  standard, plug-in neutral &lt;code&gt;javax.imageio_1.0&lt;/code&gt;
                  metadata document format described in the comment of the
                  &lt;code&gt;javax.imageio.metadata&lt;/code&gt; package.                
                <return>
                    a predefined &lt;code&gt;IIOMetadataFormat&lt;/code&gt; instance.                    
                </return>
            </javadoc>
            <method name="getStandardFormatInstance" type="IIOMetadataFormat" line="953"/>
        </class>
    </source>