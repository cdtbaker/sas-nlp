<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.metadata">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="com.sun.imageio.plugins.common.StandardMetadataFormat"/>
        <class name="IIOMetadataFormatImpl" line="40">
            <comment line="93">
                Element name (String) -&gt; Element                
            </comment>
            <comment line="288">
                Utility method for locating an attribute                
            </comment>
            <comment line="299">
                Setup                
            </comment>
            <comment line="919">
                Utility method                
            </comment>
            <comment line="921">
                Methods from IIOMetadataFormat                
            </comment>
            <comment line="923">
                Root                
            </comment>
            <comment line="929">
                Multiplicity                
            </comment>
            <comment line="1026">
                Children                
            </comment>
            <comment line="1041">
                Attributes                
            </comment>
            <comment line="1251">
                Standard format descriptor                
            </comment>
            <implements interface="IIOMetadataFormat"/>
            <javadoc line="40">
                A concrete class providing a reusable implementation of the
                  &lt;code&gt;IIOMetadataFormat&lt;/code&gt; interface.  In addition, a static
                  instance representing the standard, plug-in neutral
                  &lt;code&gt;javax_imageio_1.0&lt;/code&gt; format is provided by the
                  &lt;code&gt;getStandardFormatInstance&lt;/code&gt; method.
                  &lt;p&gt; In order to supply localized descriptions of elements and
                  attributes, a &lt;code&gt;ResourceBundle&lt;/code&gt; with a base name of
                  &lt;code&gt;this.getClass().getName() + &quot;Resources&quot;&lt;/code&gt; should be
                  supplied via the usual mechanism used by
                  &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt;.  Briefly, the subclasser
                  supplies one or more additional classes according to a naming
                  convention (by default, the fully-qualified name of the subclass
                  extending &lt;code&gt;IIMetadataFormatImpl&lt;/code&gt;, plus the string
                  &quot;Resources&quot;, plus the country, language, and variant codes
                  separated by underscores).  At run time, calls to
                  &lt;code&gt;getElementDescription&lt;/code&gt; or
                  &lt;code&gt;getAttributeDescription&lt;/code&gt; will attempt to load such
                  classes dynamically according to the supplied locale, and will use
                  either the element name, or the element name followed by a &apos;/&apos;
                  character followed by the attribute name as a key.  This key will
                  be supplied to the &lt;code&gt;ResourceBundle&lt;/code&gt;&apos;s
                  &lt;code&gt;getString&lt;/code&gt; method, and the resulting localized
                  description of the node or attribute is returned.
                  &lt;p&gt; The subclass may supply a different base name for the resource
                  bundles using the &lt;code&gt;setResourceBaseName&lt;/code&gt; method.
                  &lt;p&gt; A subclass may choose its own localization mechanism, if so
                  desired, by overriding the supplied implementations of
                  &lt;code&gt;getElementDescription&lt;/code&gt; and
                  &lt;code&gt;getAttributeDescription&lt;/code&gt;.                
                <see>
                    ResourceBundle#getBundle(String,Locale)                    
                </see>
            </javadoc>
            <declaration name="standardMetadataFormatName" type="String" line="79"/>
            <javadoc line="79">
                A &lt;code&gt;String&lt;/code&gt; constant containing the standard format
                  name, &lt;code&gt;&quot;javax_imageio_1.0&quot;&lt;/code&gt;.                
            </javadoc>
            <declaration name="standardFormat" type="IIOMetadataFormat" line="86"/>
            <declaration name="resourceBaseName" type="String" line="88"/>
            <declaration name="rootName" type="String" line="90"/>
            <declaration name="elementMap" type="HashMap" line="93"/>
            <class name="Element" line="95">
                <comment line="103">
                    Child names (Strings)                    
                </comment>
                <comment line="106">
                    Parent names (Strings)                    
                </comment>
                <comment line="109">
                    List of attribute names in the order they were added                    
                </comment>
                <comment line="111">
                    Attr name (String) -&gt; Attribute                    
                </comment>
                <comment line="125">
                    enumeration                    
                </comment>
                <comment line="128">
                    range                    
                </comment>
                <comment line="132">
                    list                    
                </comment>
                <comment line="142">
                    Meaningful only if valueType == VALUE_ENUMERATION                    
                </comment>
                <comment line="145">
                    Meaningful only if valueType == VALUE_RANGE                    
                </comment>
                <comment line="149">
                    Meaningful only if valueType == VALUE_LIST                    
                </comment>
                <declaration name="elementName" type="String" line="96"/>
                <declaration name="childPolicy" type="int" line="98"/>
                <declaration name="minChildren" type="int" line="99"/>
                <declaration name="maxChildren" type="int" line="100"/>
                <declaration name="childList" type="List" line="103"/>
                <declaration name="parentList" type="List" line="106"/>
                <declaration name="attrList" type="List" line="109"/>
                <declaration name="attrMap" type="Map" line="111"/>
                <declaration name="objectValue" type="ObjectValue" line="113"/>
            </class>
            <class name="Attribute" line="116">
                <comment line="103">
                    Child names (Strings)                    
                </comment>
                <comment line="106">
                    Parent names (Strings)                    
                </comment>
                <comment line="109">
                    List of attribute names in the order they were added                    
                </comment>
                <comment line="111">
                    Attr name (String) -&gt; Attribute                    
                </comment>
                <comment line="125">
                    enumeration                    
                </comment>
                <comment line="128">
                    range                    
                </comment>
                <comment line="132">
                    list                    
                </comment>
                <comment line="142">
                    Meaningful only if valueType == VALUE_ENUMERATION                    
                </comment>
                <comment line="145">
                    Meaningful only if valueType == VALUE_RANGE                    
                </comment>
                <comment line="149">
                    Meaningful only if valueType == VALUE_LIST                    
                </comment>
                <declaration name="attrName" type="String" line="117"/>
                <declaration name="valueType" type="int" line="119"/>
                <declaration name="dataType" type="int" line="120"/>
                <declaration name="required" type="boolean" line="121"/>
                <declaration name="defaultValue" type="String" line="122"/>
                <declaration name="enumeratedValues" type="List" line="125"/>
                <declaration name="minValue" type="String" line="128"/>
                <declaration name="maxValue" type="String" line="129"/>
                <declaration name="listMinLength" type="int" line="132"/>
                <declaration name="listMaxLength" type="int" line="133"/>
            </class>
            <class name="ObjectValue" line="136">
                <comment line="103">
                    Child names (Strings)                    
                </comment>
                <comment line="106">
                    Parent names (Strings)                    
                </comment>
                <comment line="109">
                    List of attribute names in the order they were added                    
                </comment>
                <comment line="111">
                    Attr name (String) -&gt; Attribute                    
                </comment>
                <comment line="125">
                    enumeration                    
                </comment>
                <comment line="128">
                    range                    
                </comment>
                <comment line="132">
                    list                    
                </comment>
                <comment line="142">
                    Meaningful only if valueType == VALUE_ENUMERATION                    
                </comment>
                <comment line="145">
                    Meaningful only if valueType == VALUE_RANGE                    
                </comment>
                <comment line="149">
                    Meaningful only if valueType == VALUE_LIST                    
                </comment>
                <declaration name="valueType" type="int" line="137"/>
                <declaration name="classType" type="Class" line="138"/>
                <declaration name="defaultValue" type="Object" line="139"/>
                <declaration name="enumeratedValues" type="List" line="142"/>
                <declaration name="minValue" type="Comparable" line="145"/>
                <declaration name="maxValue" type="Comparable" line="146"/>
                <declaration name="arrayMinLength" type="int" line="149"/>
                <declaration name="arrayMaxLength" type="int" line="150"/>
            </class>
            <javadoc line="153">
                Constructs a blank &lt;code&gt;IIOMetadataFormatImpl&lt;/code&gt; instance,
                  with a given root element name and child policy (other than
                  &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;).  Additional elements, and
                  their attributes and &lt;code&gt;Object&lt;/code&gt; reference information
                  may be added using the various &lt;code&gt;add&lt;/code&gt; methods.                
                <param>
                    rootName the name of the root element.                    
                </param>
                <param>
                    childPolicy one of the <code>CHILD_POLICY_</code> constants,
                      other than <code>CHILD_POLICY_REPEAT</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>rootName</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>childPolicy</code> is
                      not one of the predefined constants.                    
                </exception>
            </javadoc>
            <method name="IIOMetadataFormatImpl" type="constructor" line="170">
                <params>
                    <param name="rootName" type="String"/>
                    <param name="childPolicy" type="int"/>
                </params>
                <scope line="171"/>
                <scope line="176"/>
                <declaration name="root" type="Element" line="182"/>
            </method>
            <javadoc line="189">
                Constructs a blank &lt;code&gt;IIOMetadataFormatImpl&lt;/code&gt; instance,
                  with a given root element name and a child policy of
                  &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.  Additional elements, and
                  their attributes and &lt;code&gt;Object&lt;/code&gt; reference information
                  may be added using the various &lt;code&gt;add&lt;/code&gt; methods.                
                <param>
                    rootName the name of the root element.                    
                </param>
                <param>
                    minChildren the minimum number of children of the node.                    
                </param>
                <param>
                    maxChildren the maximum number of children of the node.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>rootName</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>minChildren</code>
                      is negative or larger than <code>maxChildren</code>.                    
                </exception>
            </javadoc>
            <method name="IIOMetadataFormatImpl" type="constructor" line="207">
                <params>
                    <param name="rootName" type="String"/>
                    <param name="minChildren" type="int"/>
                    <param name="maxChildren" type="int"/>
                </params>
                <scope line="208"/>
                <scope line="211"/>
                <scope line="214"/>
                <declaration name="root" type="Element" line="218"/>
            </method>
            <javadoc line="228">
                Sets a new base name for locating &lt;code&gt;ResourceBundle&lt;/code&gt;s
                  containing descriptions of elements and attributes for this
                  format.
                  &lt;p&gt; Prior to the first time this method is called, the base
                  name will be equal to &lt;code&gt;this.getClass().getName() +
                  &quot;Resources&quot;&lt;/code&gt;.                
                <param>
                    resourceBaseName a <code>String</code> containg the new
                      base name.                    
                </param>
                <exception>
                    IllegalArgumentException if
                      <code>resourceBaseName</code> is <code>null</code>.                    
                </exception>
                <see>
                    #getResourceBaseName                    
                </see>
            </javadoc>
            <method name="setResourceBaseName" type="void" line="245">
                <params>
                    <param name="resourceBaseName" type="String"/>
                </params>
                <scope line="246"/>
            </method>
            <javadoc line="252">
                Returns the currently set base name for locating
                  &lt;code&gt;ResourceBundle&lt;/code&gt;s.                
                <return>
                    a <code>String</code> containing the base name.                    
                </return>
                <see>
                    #setResourceBaseName                    
                </see>
            </javadoc>
            <method name="getResourceBaseName" type="String" line="260"/>
            <javadoc line="264">
                Utility method for locating an element.                
                <param>
                    mustAppear if <code>true</code>, throw an
                      <code>IllegalArgumentException</code> if no such node exists;
                      if <code>false</code>, just return null.                    
                </param>
            </javadoc>
            <method name="getElement" type="Element" line="271">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="mustAppear" type="boolean"/>
                </params>
                <scope line="272"/>
                <declaration name="element" type="Element" line="275"/>
                <scope line="276"/>
            </method>
            <method name="getElement" type="Element" line="283">
                <params>
                    <param name="elementName" type="String"/>
                </params>
            </method>
            <method name="getAttribute" type="Attribute" line="288">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="289"/>
                <declaration name="attr" type="Attribute" line="290"/>
                <scope line="291"/>
            </method>
            <javadoc line="300">
                Adds a new element type to this metadata document format with a
                  child policy other than &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.                
                <param>
                    elementName the name of the new element.                    
                </param>
                <param>
                    parentName the name of the element that will be the
                      parent of the new element.                    
                </param>
                <param>
                    childPolicy one of the <code>CHILD_POLICY_</code>
                      constants, other than <code>CHILD_POLICY_REPEAT</code>,
                      indicating the child policy of the new element.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>parentName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>childPolicy</code>
                      is not one of the predefined constants.                    
                </exception>
            </javadoc>
            <method name="addElement" type="void" line="319">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="parentName" type="String"/>
                    <param name="childPolicy" type="int"/>
                </params>
                <declaration name="parent" type="Element" line="320"/>
                <scope line="323"/>
                <declaration name="element" type="Element" line="328"/>
            </method>
            <javadoc line="338">
                Adds a new element type to this metadata document format with a
                  child policy of &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.                
                <param>
                    elementName the name of the new element.                    
                </param>
                <param>
                    parentName the name of the element that will be the
                      parent of the new element.                    
                </param>
                <param>
                    minChildren the minimum number of children of the node.                    
                </param>
                <param>
                    maxChildren the maximum number of children of the node.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>parentName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>minChildren</code>
                      is negative or larger than <code>maxChildren</code>.                    
                </exception>
            </javadoc>
            <method name="addElement" type="void" line="357">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="parentName" type="String"/>
                    <param name="minChildren" type="int"/>
                    <param name="maxChildren" type="int"/>
                </params>
                <declaration name="parent" type="Element" line="358"/>
                <scope line="359"/>
                <scope line="362"/>
                <declaration name="element" type="Element" line="366"/>
            </method>
            <javadoc line="378">
                Adds an existing element to the list of legal children for a
                  given parent node type.                
                <param>
                    parentName the name of the element that will be the
                      new parent of the element.                    
                </param>
                <param>
                    elementName the name of the element to be addded as a
                      child.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>parentName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
            </javadoc>
            <method name="addChildElement" type="void" line="394">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="parentName" type="String"/>
                </params>
                <declaration name="parent" type="Element" line="395"/>
                <declaration name="element" type="Element" line="396"/>
            </method>
            <javadoc line="401">
                Removes an element from the format.  If no element with the
                  given name was present, nothing happens and no exception is
                  thrown.                
                <param>
                    elementName the name of the element to be removed.                    
                </param>
            </javadoc>
            <method name="removeElement" type="void" line="408">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="409"/>
                <scope line="410">
                    <declaration name="iter" type="Iterator" line="411"/>
                    <scope line="412">
                        <declaration name="parentName" type="String" line="413"/>
                        <declaration name="parent" type="Element" line="414"/>
                        <scope line="415"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="423">
                Adds a new attribute to a previously defined element that may
                  be set to an arbitrary value.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    dataType the data type (string format) of the attribute,
                      one of the <code>DATATYPE_</code> constants.                    
                </param>
                <param>
                    required <code>true</code> if the attribute must be present.                    
                </param>
                <param>
                    defaultValue the default value for the attribute, or
                      <code>null</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>dataType</code> is
                      not one of the predefined constants.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="447">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="dataType" type="int"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="String"/>
                </params>
                <declaration name="element" type="Element" line="448"/>
                <scope line="449"/>
                <scope line="452"/>
                <declaration name="attr" type="Attribute" line="456"/>
            </method>
            <javadoc line="467">
                Adds a new attribute to a previously defined element that will
                  be defined by a set of enumerated values.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    dataType the data type (string format) of the attribute,
                      one of the <code>DATATYPE_</code> constants.                    
                </param>
                <param>
                    required <code>true</code> if the attribute must be present.                    
                </param>
                <param>
                    defaultValue the default value for the attribute, or
                      <code>null</code>.                    
                </param>
                <param>
                    enumeratedValues a <code>List</code> of
                      <code>String</code>s containing the legal values for the
                      attribute.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>dataType</code> is
                      not one of the predefined constants.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      <code>enumeratedValues</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      <code>enumeratedValues</code> does not contain at least one
                      entry.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      <code>enumeratedValues</code> contains an element that is not a
                      <code>String</code> or is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="503">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="dataType" type="int"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="String"/>
                    <param name="enumeratedValues" type="List<String>"/>
                </params>
                <declaration name="element" type="Element" line="504"/>
                <scope line="505"/>
                <scope line="508"/>
                <scope line="511"/>
                <scope line="514"/>
                <declaration name="iter" type="Iterator" line="517"/>
                <scope line="518">
                    <declaration name="o" type="Object" line="519"/>
                    <scope line="520"/>
                    <scope line="524"/>
                </scope>
                <declaration name="attr" type="Attribute" line="530"/>
            </method>
            <javadoc line="542">
                Adds a new attribute to a previously defined element that will
                  be defined by a range of values.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    dataType the data type (string format) of the attribute,
                      one of the <code>DATATYPE_</code> constants.                    
                </param>
                <param>
                    required <code>true</code> if the attribute must be present.                    
                </param>
                <param>
                    defaultValue the default value for the attribute, or
                      <code>null</code>.                    
                </param>
                <param>
                    minValue the smallest (inclusive or exclusive depending
                      on the value of <code>minInclusive</code>) legal value for the
                      attribute, as a <code>String</code>.                    
                </param>
                <param>
                    maxValue the largest (inclusive or exclusive depending
                      on the value of <code>minInclusive</code>) legal value for the
                      attribute, as a <code>String</code>.                    
                </param>
                <param>
                    minInclusive <code>true</code> if <code>minValue</code>
                      is inclusive.                    
                </param>
                <param>
                    maxInclusive <code>true</code> if <code>maxValue</code>
                      is inclusive.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>dataType</code> is
                      not one of the predefined constants.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="580">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="dataType" type="int"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="String"/>
                    <param name="minValue" type="String"/>
                    <param name="maxValue" type="String"/>
                    <param name="minInclusive" type="boolean"/>
                    <param name="maxInclusive" type="boolean"/>
                </params>
                <declaration name="element" type="Element" line="581"/>
                <scope line="582"/>
                <scope line="585"/>
                <declaration name="attr" type="Attribute" line="589"/>
                <scope line="592"/>
                <scope line="595"/>
            </method>
            <javadoc line="608">
                Adds a new attribute to a previously defined element that will
                  be defined by a list of values.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    dataType the data type (string format) of the attribute,
                      one of the <code>DATATYPE_</code> constants.                    
                </param>
                <param>
                    required <code>true</code> if the attribute must be present.                    
                </param>
                <param>
                    listMinLength the smallest legal number of list items.                    
                </param>
                <param>
                    listMaxLength the largest legal number of list items.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>dataType</code> is
                      not one of the predefined constants.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      <code>listMinLength</code> is negative or larger than
                      <code>listMaxLength</code>.                    
                </exception>
            </javadoc>
            <method name="addAttribute" type="void" line="636">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="dataType" type="int"/>
                    <param name="required" type="boolean"/>
                    <param name="listMinLength" type="int"/>
                    <param name="listMaxLength" type="int"/>
                </params>
                <declaration name="element" type="Element" line="637"/>
                <scope line="638"/>
                <scope line="641"/>
                <scope line="644"/>
                <declaration name="attr" type="Attribute" line="648"/>
            </method>
            <javadoc line="660">
                Adds a new attribute to a previously defined element that will
                  be defined by the enumerated values &lt;code&gt;TRUE&lt;/code&gt; and
                  &lt;code&gt;FALSE&lt;/code&gt;, with a datatype of
                  &lt;code&gt;DATATYPE_BOOLEAN&lt;/code&gt;.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being added.                    
                </param>
                <param>
                    hasDefaultValue <code>true</code> if a default value
                      should be present.                    
                </param>
                <param>
                    defaultValue the default value for the attribute as a
                      <code>boolean</code>, ignored if <code>hasDefaultValue</code>
                      is <code>false</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="addBooleanAttribute" type="void" line="683">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="hasDefaultValue" type="boolean"/>
                    <param name="defaultValue" type="boolean"/>
                </params>
                <declaration name="values" type="List" line="684"/>
                <declaration name="dval" type="String" line="688"/>
                <scope line="689"/>
            </method>
            <javadoc line="700">
                Removes an attribute from a previously defined element.  If no
                  attribute with the given name was present in the given element,
                  nothing happens and no exception is thrown.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute being removed.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="removeAttribute" type="void" line="711">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="712"/>
            </method>
            <javadoc line="717">
                Allows an &lt;code&gt;Object&lt;/code&gt; reference of a given class type
                  to be stored in nodes implementing the named element.  The
                  value of the &lt;code&gt;Object&lt;/code&gt; is unconstrained other than by
                  its class type.
                  &lt;p&gt; If an &lt;code&gt;Object&lt;/code&gt; reference was previously allowed,
                  the previous settings are overwritten.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    classType a <code>Class</code> variable indicating the
                      legal class type for the object value.                    
                </param>
                <param>
                    required <code>true</code> if an object value must be present.                    
                </param>
                <param>
                    defaultValue the default value for the
                      <code>Object</code> reference, or <code>null</code>.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="addObjectValue" type="void" line="740">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="classType" type="Class<T>"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="T"/>
                </params>
                <declaration name="element" type="Element" line="741"/>
                <declaration name="obj" type="ObjectValue" line="742"/>
            </method>
            <javadoc line="750">
                Allows an &lt;code&gt;Object&lt;/code&gt; reference of a given class type
                  to be stored in nodes implementing the named element.  The
                  value of the &lt;code&gt;Object&lt;/code&gt; must be one of the values
                  given by &lt;code&gt;enumeratedValues&lt;/code&gt;.
                  &lt;p&gt; If an &lt;code&gt;Object&lt;/code&gt; reference was previously allowed,
                  the previous settings are overwritten.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    classType a <code>Class</code> variable indicating the
                      legal class type for the object value.                    
                </param>
                <param>
                    required <code>true</code> if an object value must be present.                    
                </param>
                <param>
                    defaultValue the default value for the
                      <code>Object</code> reference, or <code>null</code>.                    
                </param>
                <param>
                    enumeratedValues a <code>List</code> of
                      <code>Object</code>s containing the legal values for the
                      object reference.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this format.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      <code>enumeratedValues</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      <code>enumeratedValues</code> does not contain at least one
                      entry.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      <code>enumeratedValues</code> contains an element that is not
                      an instance of the class type denoted by <code>classType</code>
                      or is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="addObjectValue" type="void" line="786">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="classType" type="Class<T>"/>
                    <param name="required" type="boolean"/>
                    <param name="defaultValue" type="T"/>
                    <param name="enumeratedValues" type="List<? extends T>"/>
                </params>
                <declaration name="element" type="Element" line="787"/>
                <scope line="788"/>
                <scope line="791"/>
                <declaration name="iter" type="Iterator" line="794"/>
                <scope line="795">
                    <declaration name="o" type="Object" line="796"/>
                    <scope line="797"/>
                    <scope line="800"/>
                </scope>
                <declaration name="obj" type="ObjectValue" line="805"/>
            </method>
            <javadoc line="814">
                Allows an &lt;code&gt;Object&lt;/code&gt; reference of a given class type
                  to be stored in nodes implementing the named element.  The
                  value of the &lt;code&gt;Object&lt;/code&gt; must be within the range given
                  by &lt;code&gt;minValue&lt;/code&gt; and &lt;code&gt;maxValue&lt;/code&gt;.
                  Furthermore, the class type must implement the
                  &lt;code&gt;Comparable&lt;/code&gt; interface.
                  &lt;p&gt; If an &lt;code&gt;Object&lt;/code&gt; reference was previously allowed,
                  the previous settings are overwritten.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    classType a <code>Class</code> variable indicating the
                      legal class type for the object value.                    
                </param>
                <param>
                    defaultValue the default value for the                    
                </param>
                <param>
                    minValue the smallest (inclusive or exclusive depending
                      on the value of <code>minInclusive</code>) legal value for the
                      object value, as a <code>String</code>.                    
                </param>
                <param>
                    maxValue the largest (inclusive or exclusive depending
                      on the value of <code>minInclusive</code>) legal value for the
                      object value, as a <code>String</code>.                    
                </param>
                <param>
                    minInclusive <code>true</code> if <code>minValue</code>
                      is inclusive.                    
                </param>
                <param>
                    maxInclusive <code>true</code> if <code>maxValue</code>
                      is inclusive.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this
                      format.                    
                </exception>
            </javadoc>
            <method name="addObjectValue" type="void" line="852">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="classType" type="Class<T>"/>
                    <param name="defaultValue" type="T"/>
                    <param name="minValue" type="Comparable<? super T>"/>
                    <param name="maxValue" type="Comparable<? super T>"/>
                    <param name="minInclusive" type="boolean"/>
                    <param name="maxInclusive" type="boolean"/>
                </params>
                <declaration name="element" type="Element" line="853"/>
                <declaration name="obj" type="ObjectValue" line="854"/>
                <scope line="856"/>
                <scope line="859"/>
            </method>
            <javadoc line="870">
                Allows an &lt;code&gt;Object&lt;/code&gt; reference of a given class type
                  to be stored in nodes implementing the named element.  The
                  value of the &lt;code&gt;Object&lt;/code&gt; must an array of objects of
                  class type given by &lt;code&gt;classType&lt;/code&gt;, with at least
                  &lt;code&gt;arrayMinLength&lt;/code&gt; and at most
                  &lt;code&gt;arrayMaxLength&lt;/code&gt; elements.
                  &lt;p&gt; If an &lt;code&gt;Object&lt;/code&gt; reference was previously allowed,
                  the previous settings are overwritten.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    classType a <code>Class</code> variable indicating the
                      legal class type for the object value.                    
                </param>
                <param>
                    arrayMinLength the smallest legal length for the array.                    
                </param>
                <param>
                    arrayMaxLength the largest legal length for the array.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code> is
                      not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="addObjectValue" type="void" line="893">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="classType" type="Class<?>"/>
                    <param name="arrayMinLength" type="int"/>
                    <param name="arrayMaxLength" type="int"/>
                </params>
                <declaration name="element" type="Element" line="894"/>
                <declaration name="obj" type="ObjectValue" line="895"/>
            </method>
            <javadoc line="904">
                Disallows an &lt;code&gt;Object&lt;/code&gt; reference from being stored in
                  nodes implementing the named element.                
                <param>
                    elementName the name of the element.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code> is
                      not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="removeObjectValue" type="void" line="913">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="914"/>
            </method>
            <method name="getRootName" type="String" line="924"/>
            <method name="canNodeAppear" type="boolean" line="930"/>
            <method name="getElementMinChildren" type="int" line="933">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="934"/>
                <scope line="935"/>
            </method>
            <method name="getElementMaxChildren" type="int" line="941">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="942"/>
                <scope line="943"/>
            </method>
            <method name="getResource" type="String" line="949">
                <params>
                    <param name="key" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="955">
                    If an applet supplies an implementation of IIOMetadataFormat and
                     resource bundles, then the resource bundle will need to be
                     accessed via the applet class loader. So first try the context
                     class loader to locate the resource bundle.
                     If that throws MissingResourceException, then try the
                     system class loader.                    
                </comment>
                <scope line="950"/>
                <anonymous_class line="964">
                    <method name="run" type="Object" line="965"/>
                </anonymous_class>
                <declaration name="loader" type="ClassLoader" line="962"/>
                <declaration name="bundle" type="ResourceBundle" line="970"/>
                <scope line="971"/>
                <scope line="974">
                    <scope line="975"/>
                    <scope line="977"/>
                </scope>
                <scope line="982"/>
                <scope line="984"/>
            </method>
            <javadoc line="989">
                Returns a &lt;code&gt;String&lt;/code&gt; containing a description of the
                  named element, or &lt;code&gt;null&lt;/code&gt;.  The desciption will be
                  localized for the supplied &lt;code&gt;Locale&lt;/code&gt; if possible.
                  &lt;p&gt; The default implementation will first locate a
                  &lt;code&gt;ResourceBundle&lt;/code&gt; using the current resource base
                  name set by &lt;code&gt;setResourceBaseName&lt;/code&gt; and the supplied
                  &lt;code&gt;Locale&lt;/code&gt;, using the fallback mechanism described in
                  the comments for &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt;.  If a
                  &lt;code&gt;ResourceBundle&lt;/code&gt; is found, the element name will be
                  used as a key to its &lt;code&gt;getString&lt;/code&gt; method, and the
                  result returned.  If no &lt;code&gt;ResourceBundle&lt;/code&gt; is found,
                  or no such key is present, &lt;code&gt;null&lt;/code&gt; will be returned.
                  &lt;p&gt; If &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the current
                  default &lt;code&gt;Locale&lt;/code&gt; returned by &lt;code&gt;Locale.getLocale&lt;/code&gt;
                  will be used.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    locale the <code>Locale</code> for which localization
                      will be attempted.                    
                </param>
                <return>
                    the element description.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this format.                    
                </exception>
                <see>
                    #setResourceBaseName                    
                </see>
            </javadoc>
            <method name="getElementDescription" type="String" line="1020">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="element" type="Element" line="1021"/>
            </method>
            <method name="getChildPolicy" type="int" line="1027">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="1028"/>
            </method>
            <method name="getChildNames" type="String[]" line="1032">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="1033"/>
                <scope line="1034"/>
            </method>
            <method name="getAttributeNames" type="String[]" line="1042">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="1043"/>
                <declaration name="names" type="List" line="1044"/>
                <declaration name="result" type="String[]" line="1046"/>
            </method>
            <method name="getAttributeValueType" type="int" line="1050">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1051"/>
            </method>
            <method name="getAttributeDataType" type="int" line="1055">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1056"/>
            </method>
            <method name="isAttributeRequired" type="boolean" line="1060">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1061"/>
            </method>
            <method name="getAttributeDefaultValue" type="String" line="1066">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1067"/>
            </method>
            <method name="getAttributeEnumerations" type="String[]" line="1072">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1073"/>
                <scope line="1074"/>
                <declaration name="values" type="List" line="1079"/>
                <declaration name="iter" type="Iterator" line="1080"/>
                <declaration name="result" type="String[]" line="1081"/>
            </method>
            <method name="getAttributeMinValue" type="String" line="1085">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1086"/>
                <scope line="1090"/>
            </method>
            <method name="getAttributeMaxValue" type="String" line="1097">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1098"/>
                <scope line="1102"/>
            </method>
            <method name="getAttributeListMinLength" type="int" line="1109">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1110"/>
                <scope line="1111"/>
            </method>
            <method name="getAttributeListMaxLength" type="int" line="1118">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="1119"/>
                <scope line="1120"/>
            </method>
            <javadoc line="1127">
                Returns a &lt;code&gt;String&lt;/code&gt; containing a description of the
                  named attribute, or &lt;code&gt;null&lt;/code&gt;.  The desciption will be
                  localized for the supplied &lt;code&gt;Locale&lt;/code&gt; if possible.
                  &lt;p&gt; The default implementation will first locate a
                  &lt;code&gt;ResourceBundle&lt;/code&gt; using the current resource base
                  name set by &lt;code&gt;setResourceBaseName&lt;/code&gt; and the supplied
                  &lt;code&gt;Locale&lt;/code&gt;, using the fallback mechanism described in
                  the comments for &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt;.  If a
                  &lt;code&gt;ResourceBundle&lt;/code&gt; is found, the element name followed
                  by a &quot;/&quot; character followed by the attribute name
                  (&lt;code&gt;elementName + &quot;/&quot; + attrName&lt;/code&gt;) will be used as a
                  key to its &lt;code&gt;getString&lt;/code&gt; method, and the result
                  returned.  If no &lt;code&gt;ResourceBundle&lt;/code&gt; is found, or no
                  such key is present, &lt;code&gt;null&lt;/code&gt; will be returned.
                  &lt;p&gt; If &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the current
                  default &lt;code&gt;Locale&lt;/code&gt; returned by &lt;code&gt;Locale.getLocale&lt;/code&gt;
                  will be used.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute.                    
                </param>
                <param>
                    locale the <code>Locale</code> for which localization
                      will be attempted, or <code>null</code>.                    
                </param>
                <return>
                    the attribute description.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
                <see>
                    #setResourceBaseName                    
                </see>
            </javadoc>
            <method name="getAttributeDescription" type="String" line="1165">
                <params>
                    <param name="elementName" type="String"/>
                    <param name="attrName" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="element" type="Element" line="1166"/>
                <scope line="1167"/>
                <declaration name="attr" type="Attribute" line="1170"/>
                <scope line="1171"/>
                <declaration name="key" type="String" line="1175"/>
            </method>
            <method name="getObjectValue" type="ObjectValue" line="1179">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="1180"/>
                <declaration name="objv" type="ObjectValue" line="1181"/>
                <scope line="1182"/>
            </method>
            <method name="getObjectValueType" type="int" line="1189">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="element" type="Element" line="1190"/>
                <declaration name="objv" type="ObjectValue" line="1191"/>
                <scope line="1192"/>
            </method>
            <method name="getObjectClass" type="Class<?>" line="1198">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="1199"/>
            </method>
            <method name="getObjectDefaultValue" type="Object" line="1203">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="1204"/>
            </method>
            <method name="getObjectEnumerations" type="Object[]" line="1208">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="1209"/>
                <scope line="1210"/>
                <declaration name="vlist" type="List" line="1213"/>
                <declaration name="values" type="Object[]" line="1214"/>
            </method>
            <method name="getObjectMinValue" type="Comparable<?>" line="1218">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="1219"/>
                <scope line="1220"/>
            </method>
            <method name="getObjectMaxValue" type="Comparable<?>" line="1226">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="1227"/>
                <scope line="1228"/>
            </method>
            <method name="getObjectArrayMinLength" type="int" line="1234">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="1235"/>
                <scope line="1236"/>
            </method>
            <method name="getObjectArrayMaxLength" type="int" line="1242">
                <params>
                    <param name="elementName" type="String"/>
                </params>
                <declaration name="objv" type="ObjectValue" line="1243"/>
                <scope line="1244"/>
            </method>
            <method name="createStandardFormat" type="void" line="1252">
                <scope line="1253"/>
            </method>
            <javadoc line="1258">
                Returns an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object describing the
                  standard, plug-in neutral &lt;code&gt;javax.imageio_1.0&lt;/code&gt;
                  metadata document format described in the comment of the
                  &lt;code&gt;javax.imageio.metadata&lt;/code&gt; package.                
                <return>
                    a predefined <code>IIOMetadataFormat</code> instance.                    
                </return>
            </javadoc>
            <method name="getStandardFormatInstance" type="IIOMetadataFormat" line="1266"/>
        </class>
    </source>