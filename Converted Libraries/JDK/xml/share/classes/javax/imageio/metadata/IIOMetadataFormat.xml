<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.metadata">
        <import package="java.util.Locale"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <interface name="IIOMetadataFormat">
            <javadoc line="4">
                An object describing the structure of metadata documents returned
                  from &lt;code&gt;IIOMetadata.getAsTree&lt;/code&gt; and passed to
                  &lt;code&gt;IIOMetadata.setFromTree&lt;/code&gt; and &lt;code&gt;mergeTree&lt;/code&gt;.
                  Document structures are described by a set of constraints on the
                  type and number of child elements that may belong to a given parent
                  element type, the names, types, and values of attributes that may
                  belong to an element, and the type and values of
                  &lt;code&gt;Object&lt;/code&gt; reference that may be stored at a node.
                  &lt;p&gt; N.B: classes that implement this interface should contain a
                  method declared as &lt;code&gt;public static getInstance()&lt;/code&gt; which
                  returns an instance of the class.  Commonly, an implentation will
                  construct only a single instance and cache it for future
                  invocations of &lt;code&gt;getInstance&lt;/code&gt;.
                  &lt;p&gt; The structures that may be described by this class are a subset
                  of those expressible using XML document type definitions (DTDs),
                  with the addition of some basic information on the datatypes of
                  attributes and the ability to store an &lt;code&gt;Object&lt;/code&gt;
                  reference within a node.  In the future, XML Schemas could be used
                  to represent these structures, and many others.
                  &lt;p&gt; The differences between
                  &lt;code&gt;IIOMetadataFormat&lt;/code&gt;-described structures and DTDs are as
                  follows:
                  &lt;ul&gt;
                  &lt;li&gt; Elements may not contain text or mix text with embedded
                  tags.
                  &lt;li&gt; The children of an element must conform to one of a few simple
                  patterns, described in the documentation for the
                  &lt;code&gt;CHILD_&lt;/code&gt; constants;
                  &lt;li&gt; The in-memory representation of an elements may contain a
                  reference to an &lt;code&gt;Object&lt;/code&gt;.  There is no provision for
                  representing such objects textually.
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="CHILD_POLICY_EMPTY" type="int" line="39"/>
            <javadoc line="39">
                A constant returned by &lt;code&gt;getChildPolicy&lt;/code&gt; to indicate
                  that an element may not have any children.  In other words, it
                  is required to be a leaf node.                
            </javadoc>
            <declaration name="CHILD_POLICY_ALL" type="int" line="45"/>
            <javadoc line="45">
                A constant returned by &lt;code&gt;getChildPolicy&lt;/code&gt; to indicate
                  that an element must have a single instance of each of its
                  legal child elements, in order.  In DTD terms, the contents of
                  the element are defined by a sequence &lt;code&gt;a,b,c,d,...&lt;/code&gt;.                
            </javadoc>
            <declaration name="CHILD_POLICY_SOME" type="int" line="52"/>
            <javadoc line="52">
                A constant returned by &lt;code&gt;getChildPolicy&lt;/code&gt; to indicate
                  that an element must have zero or one instance of each of its
                  legal child elements, in order.  In DTD terms, the contents of
                  the element are defined by a sequence
                  &lt;code&gt;a?,b?,c?,d?,...&lt;/code&gt;.                
            </javadoc>
            <declaration name="CHILD_POLICY_CHOICE" type="int" line="60"/>
            <javadoc line="60">
                A constant returned by &lt;code&gt;getChildPolicy&lt;/code&gt; to indicate
                  that an element must have zero or one children, selected from
                  among its legal child elements.  In DTD terms, the contents of
                  the element are defined by a selection
                  &lt;code&gt;a|b|c|d|...&lt;/code&gt;.                
            </javadoc>
            <declaration name="CHILD_POLICY_SEQUENCE" type="int" line="68"/>
            <javadoc line="68">
                A constant returned by &lt;code&gt;getChildPolicy&lt;/code&gt; to indicate
                  that an element must have a sequence of instances of any of its
                  legal child elements.  In DTD terms, the contents of the
                  element are defined by a sequence &lt;code&gt;(a|b|c|d|...)&lt;/code&gt;.                
            </javadoc>
            <declaration name="CHILD_POLICY_REPEAT" type="int" line="75"/>
            <javadoc line="75">
                A constant returned by &lt;code&gt;getChildPolicy&lt;/code&gt; to indicate
                  that an element must have zero or more instances of its unique
                  legal child element.  In DTD terms, the contents of the element
                  are defined by a starred expression &lt;code&gt;a&lt;/code&gt;.                
            </javadoc>
            <declaration name="CHILD_POLICY_MAX" type="int" line="82"/>
            <javadoc line="82">
                The largest valid &lt;code&gt;CHILD_POLICY_&lt;/code&gt; constant,
                  to be used for range checks.                
            </javadoc>
            <declaration name="VALUE_NONE" type="int" line="87"/>
            <javadoc line="87">
                A constant returned by &lt;code&gt;getObjectValueType&lt;/code&gt; to
                  indicate the absence of a user object.                
            </javadoc>
            <declaration name="VALUE_ARBITRARY" type="int" line="92"/>
            <javadoc line="92">
                A constant returned by &lt;code&gt;getAttributeValueType&lt;/code&gt; and
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to indicate that the attribute
                  or user object may be set a single, arbitrary value.                
            </javadoc>
            <declaration name="VALUE_RANGE" type="int" line="98"/>
            <javadoc line="98">
                A constant returned by &lt;code&gt;getAttributeValueType&lt;/code&gt; and
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to indicate that the attribute
                  or user object may be set a range of values.  Both the minimum
                  and maximum values of the range are exclusive.  It is
                  recommended that ranges of integers be inclusive on both ends,
                  and that exclusive ranges be used only for floating-point data.                
                <see>
                    #VALUE_RANGE_MIN_MAX_INCLUSIVE                    
                </see>
            </javadoc>
            <declaration name="VALUE_RANGE_MIN_INCLUSIVE_MASK" type="int" line="108"/>
            <javadoc line="108">
                A value that may be or&apos;ed with &lt;code&gt;VALUE_RANGE&lt;/code&gt; to
                  obtain &lt;code&gt;VALUE_RANGE_MIN_INCLUSIVE&lt;/code&gt;, and with
                  &lt;code&gt;VALUE_RANGE_MAX_INCLUSIVE&lt;/code&gt; to obtain
                  &lt;code&gt;VALUE_RANGE_MIN_MAX_INCLUSIVE&lt;/code&gt;.
                  &lt;p&gt; Similarly, the value may be and&apos;ed with the value of
                  &lt;code&gt;getAttributeValueType&lt;/code&gt;or
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to determine if the minimum
                  value of the range is inclusive.                
            </javadoc>
            <declaration name="VALUE_RANGE_MAX_INCLUSIVE_MASK" type="int" line="119"/>
            <javadoc line="119">
                A value that may be or&apos;ed with &lt;code&gt;VALUE_RANGE&lt;/code&gt; to
                  obtain &lt;code&gt;VALUE_RANGE_MAX_INCLUSIVE&lt;/code&gt;, and with
                  &lt;code&gt;VALUE_RANGE_MIN_INCLUSIVE&lt;/code&gt; to obtain
                  &lt;code&gt;VALUE_RANGE_MIN_MAX_INCLUSIVE&lt;/code&gt;.
                  &lt;p&gt; Similarly, the value may be and&apos;ed with the value of
                  &lt;code&gt;getAttributeValueType&lt;/code&gt;or
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to determine if the maximum
                  value of the range is inclusive.                
            </javadoc>
            <declaration name="VALUE_RANGE_MIN_INCLUSIVE" type="int" line="130"/>
            <javadoc line="130">
                A constant returned by &lt;code&gt;getAttributeValueType&lt;/code&gt; and
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to indicate that the attribute
                  or user object may be set to a range of values.  The minimum
                  (but not the maximum) value of the range is inclusive.                
            </javadoc>
            <declaration name="VALUE_RANGE_MAX_INCLUSIVE" type="int" line="137"/>
            <javadoc line="137">
                A constant returned by &lt;code&gt;getAttributeValueType&lt;/code&gt; and
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to indicate that the attribute
                  or user object may be set to a range of values.  The maximum
                  (but not the minimum) value of the range is inclusive.                
            </javadoc>
            <declaration name="VALUE_RANGE_MIN_MAX_INCLUSIVE" type="int" line="144"/>
            <javadoc line="144">
                A constant returned by &lt;code&gt;getAttributeValueType&lt;/code&gt; and
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to indicate that the attribute
                  or user object may be set a range of values.  Both the minimum
                  and maximum values of the range are inclusive.  It is
                  recommended that ranges of integers be inclusive on both ends,
                  and that exclusive ranges be used only for floating-point data.                
            </javadoc>
            <declaration name="VALUE_ENUMERATION" type="int" line="153"/>
            <javadoc line="153">
                A constant returned by &lt;code&gt;getAttributeValueType&lt;/code&gt; and
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to indicate that the attribute
                  or user object may be set one of a number of enumerated values.
                  In the case of attributes, these values are
                  &lt;code&gt;String&lt;/code&gt;s; for objects, they are
                  &lt;code&gt;Object&lt;/code&gt;s implementing a given class or interface.
                  &lt;p&gt; Attribute values of type &lt;code&gt;DATATYPE_BOOLEAN&lt;/code&gt;
                  should be marked as enumerations.                
            </javadoc>
            <declaration name="VALUE_LIST" type="int" line="164"/>
            <javadoc line="164">
                A constant returned by &lt;code&gt;getAttributeValueType&lt;/code&gt; and
                  &lt;code&gt;getObjectValueType&lt;/code&gt; to indicate that the attribute
                  or user object may be set to a list or array of values.  In the
                  case of attributes, the list will consist of
                  whitespace-separated values within a &lt;code&gt;String&lt;/code&gt;; for
                  objects, an array will be used.                
            </javadoc>
            <declaration name="DATATYPE_STRING" type="int" line="173"/>
            <javadoc line="173">
                A constant returned by &lt;code&gt;getAttributeDataType&lt;/code&gt;
                  indicating that the value of an attribute is a general Unicode
                  string.                
            </javadoc>
            <declaration name="DATATYPE_BOOLEAN" type="int" line="179"/>
            <javadoc line="179">
                A constant returned by &lt;code&gt;getAttributeDataType&lt;/code&gt;
                  indicating that the value of an attribute is one of the boolean
                  values &apos;true&apos; or &apos;false&apos;.
                  Attribute values of type DATATYPE_BOOLEAN should be marked as
                  enumerations, and the permitted values should be the string
                  literal values &quot;TRUE&quot; or &quot;FALSE&quot;, although a plugin may also
                  recognise lower or mixed case equivalents.                
            </javadoc>
            <declaration name="DATATYPE_INTEGER" type="int" line="189"/>
            <javadoc line="189">
                A constant returned by &lt;code&gt;getAttributeDataType&lt;/code&gt;
                  indicating that the value of an attribute is a string
                  representation of an integer.                
            </javadoc>
            <declaration name="DATATYPE_FLOAT" type="int" line="195"/>
            <javadoc line="195">
                A constant returned by &lt;code&gt;getAttributeDataType&lt;/code&gt;
                  indicating that the value of an attribute is a string
                  representation of a decimal floating-point number.                
            </javadoc>
            <declaration name="DATATYPE_DOUBLE" type="int" line="201"/>
            <javadoc line="201">
                A constant returned by &lt;code&gt;getAttributeDataType&lt;/code&gt;
                  indicating that the value of an attribute is a string
                  representation of a double-precision decimal floating-point
                  number.                
            </javadoc>
            <method name="getRootName" type="String" line="208"/>
            <javadoc line="208">
                Returns the name of the root element of the format.                
                <return>
                    a <code>String</code>.                    
                </return>
            </javadoc>
            <method name="canNodeAppear" type="boolean" line="213"/>
            <javadoc line="213">
                Returns &lt;code&gt;true&lt;/code&gt; if the element (and the subtree below
                  it) is allowed to appear in a metadata document for an image of
                  the given type, defined by an &lt;code&gt;ImageTypeSpecifier&lt;/code&gt;.
                  For example, a metadata document format might contain an
                  element that describes the primary colors of the image, which
                  would not be allowed when writing a grayscale image.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    imageType an <code>ImageTypeSpecifier</code> indicating
                      the type of the image that will be associated with the
                      metadata.                    
                </param>
                <return>
                    <code>true</code> if the node is meaningful for images
                      of the given type.                    
                </return>
            </javadoc>
            <method name="getElementMinChildren" type="int" line="228"/>
            <javadoc line="228">
                Returns the minimum number of children of the named element
                  with child policy &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.  For
                  example, an element representing color primary information
                  might be required to have at least 3 children, one for each
                  primay.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    an <code>int</code>.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element does
                      not have a child policy of <code>CHILD_POLICY_REPEAT</code>.                    
                </exception>
            </javadoc>
            <method name="getElementMaxChildren" type="int" line="243"/>
            <javadoc line="243">
                Returns the maximum number of children of the named element
                  with child policy &lt;code&gt;CHILD_POLICY_REPEAT&lt;/code&gt;.  For
                  example, an element representing an entry in an 8-bit color
                  palette might be allowed to repeat up to 256 times.  A value of
                  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; may be used to specify that
                  there is no upper bound.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    an <code>int</code>.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element does
                      not have a child policy of <code>CHILD_POLICY_REPEAT</code>.                    
                </exception>
            </javadoc>
            <method name="getElementDescription" type="String" line="259"/>
            <javadoc line="259">
                Returns a &lt;code&gt;String&lt;/code&gt; containing a description of the
                  named element, or &lt;code&gt;null&lt;/code&gt;.  The desciption will be
                  localized for the supplied &lt;code&gt;Locale&lt;/code&gt; if possible.
                  &lt;p&gt; If &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the current
                  default &lt;code&gt;Locale&lt;/code&gt; returned by &lt;code&gt;Locale.getLocale&lt;/code&gt;
                  will be used.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    locale the <code>Locale</code> for which localization
                      will be attempted.                    
                </param>
                <return>
                    the element description.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this format.                    
                </exception>
            </javadoc>
            <method name="getChildPolicy" type="int" line="274"/>
            <javadoc line="274">
                Returns one of the constants starting with
                  &lt;code&gt;CHILD_POLICY_&lt;/code&gt;, indicating the legal pattern of
                  children for the named element.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    one of the <code>CHILD_POLICY_</code> constants.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
            </javadoc>
            <method name="getChildNames" type="String[]" line="285"/>
            <javadoc line="285">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s indicating the names
                  of the element which are allowed to be children of the named
                  element, in the order in which they should appear.  If the
                  element cannot have children, &lt;code&gt;null&lt;/code&gt; is returned.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    an array of <code>String</code>s, or null.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
            </javadoc>
            <method name="getAttributeNames" type="String[]" line="297"/>
            <javadoc line="297">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s listing the names of
                  the attributes that may be associated with the named element.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    an array of <code>String</code>s.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
            </javadoc>
            <method name="getAttributeValueType" type="int" line="307"/>
            <javadoc line="307">
                Returns one of the constants starting with &lt;code&gt;VALUE_&lt;/code&gt;,
                  indicating whether the values of the given attribute within the
                  named element are arbitrary, constrained to lie within a
                  specified range, constrained to be one of a set of enumerated
                  values, or are a whitespace-separated list of arbitrary values.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    one of the <code>VALUE_</code> constants.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
            </javadoc>
            <method name="getAttributeDataType" type="int" line="324"/>
            <javadoc line="324">
                Returns one of the constants starting with
                  &lt;code&gt;DATATYPE_&lt;/code&gt;, indicating the format and
                  interpretation of the value of the given attribute within th
                  enamed element.  If &lt;code&gt;getAttributeValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_LIST&lt;/code&gt;, then the legal value is a
                  whitespace-spearated list of values of the returned datatype.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    one of the <code>DATATYPE_</code> constants.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
            </javadoc>
            <method name="isAttributeRequired" type="boolean" line="342"/>
            <javadoc line="342">
                Returns &lt;code&gt;true&lt;/code&gt; if the named attribute must be
                  present within the named element.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    <code>true</code> if the attribut must be present.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
            </javadoc>
            <method name="getAttributeDefaultValue" type="String" line="356"/>
            <javadoc line="356">
                Returns the default value of the named attribute, if it is not
                  explictly present within the named element, as a
                  &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if no default value
                  is available.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    a <code>String</code> containing the default value, or
                      <code>null</code>.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
            </javadoc>
            <method name="getAttributeEnumerations" type="String[]" line="373"/>
            <javadoc line="373">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing the legal
                  enumerated values for the given attribute within the named
                  element.  This method should only be called if
                  &lt;code&gt;getAttributeValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_ENUMERATION&lt;/code&gt;.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    an array of <code>String</code>s.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
                <exception>
                    IllegalArgumentException if the given attribute is
                      not defined as an enumeration.                    
                </exception>
            </javadoc>
            <method name="getAttributeMinValue" type="String" line="392"/>
            <javadoc line="392">
                Returns the minimum legal value for the attribute.  Whether
                  this value is inclusive or exclusive may be determined by the
                  value of &lt;code&gt;getAttributeValueType&lt;/code&gt;.  The value is
                  returned as a &lt;code&gt;String&lt;/code&gt;; its interpretation is
                  dependent on the value of &lt;code&gt;getAttributeDataType&lt;/code&gt;.
                  This method should only be called if
                  &lt;code&gt;getAttributeValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_RANGE_&lt;/code&gt;.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    a <code>String</code> containing the smallest legal
                      value for the attribute.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
                <exception>
                    IllegalArgumentException if the given attribute is
                      not defined as a range.                    
                </exception>
            </javadoc>
            <method name="getAttributeMaxValue" type="String" line="415"/>
            <javadoc line="415">
                Returns the maximum legal value for the attribute.  Whether
                  this value is inclusive or exclusive may be determined by the
                  value of &lt;code&gt;getAttributeValueType&lt;/code&gt;.  The value is
                  returned as a &lt;code&gt;String&lt;/code&gt;; its interpretation is
                  dependent on the value of &lt;code&gt;getAttributeDataType&lt;/code&gt;.
                  This method should only be called if
                  &lt;code&gt;getAttributeValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_RANGE_&lt;/code&gt;.                
                <param>
                    elementName the name of the element being queried, as a
                      <code>String</code>.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    a <code>String</code> containing the largest legal
                      value for the attribute.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
                <exception>
                    IllegalArgumentException if the given attribute is
                      not defined as a range.                    
                </exception>
            </javadoc>
            <method name="getAttributeListMinLength" type="int" line="439"/>
            <javadoc line="439">
                Returns the minimum number of list items that may be used to
                  define this attribute.  The attribute itself is defined as a
                  &lt;code&gt;String&lt;/code&gt; containing multiple whitespace-separated
                  items.  This method should only be called if
                  &lt;code&gt;getAttributeValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_LIST&lt;/code&gt;.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    the smallest legal number of list items for the
                      attribute.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
                <exception>
                    IllegalArgumentException if the given attribute is
                      not defined as a list.                    
                </exception>
            </javadoc>
            <method name="getAttributeListMaxLength" type="int" line="460"/>
            <javadoc line="460">
                Returns the maximum number of list items that may be used to
                  define this attribute.  A value of
                  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; may be used to specify that
                  there is no upper bound.  The attribute itself is defined as a
                  &lt;code&gt;String&lt;/code&gt; containing multiple whitespace-separated
                  items.  This method should only be called if
                  &lt;code&gt;getAttributeValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_LIST&lt;/code&gt;.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <param>
                    attrName the name of the attribute being queried.                    
                </param>
                <return>
                    the largest legal number of list items for the
                      attribute.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
                <exception>
                    IllegalArgumentException if the given attribute is
                      not defined as a list.                    
                </exception>
            </javadoc>
            <method name="getAttributeDescription" type="String" line="483"/>
            <javadoc line="483">
                Returns a &lt;code&gt;String&lt;/code&gt; containing a description of the
                  named attribute, or &lt;code&gt;null&lt;/code&gt;.  The desciption will be
                  localized for the supplied &lt;code&gt;Locale&lt;/code&gt; if possible.
                  &lt;p&gt; If &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the current
                  default &lt;code&gt;Locale&lt;/code&gt; returned by &lt;code&gt;Locale.getLocale&lt;/code&gt;
                  will be used.                
                <param>
                    elementName the name of the element.                    
                </param>
                <param>
                    attrName the name of the attribute.                    
                </param>
                <param>
                    locale the <code>Locale</code> for which localization
                      will be attempted.                    
                </param>
                <return>
                    the attribute description.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code>, or is not a legal element name for this format.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>attrName</code> is
                      <code>null</code> or is not a legal attribute name for this
                      element.                    
                </exception>
            </javadoc>
            <method name="getObjectValueType" type="int" line="502"/>
            <javadoc line="502">
                Returns one of the enumerated values starting with
                  &lt;code&gt;VALUE_&lt;/code&gt;, indicating the type of values
                  (enumeration, range, or array) that are allowed for the
                  &lt;code&gt;Object&lt;/code&gt; reference.  If no object value can be
                  stored within the given element, the result of this method will
                  be &lt;code&gt;VALUE_NONE&lt;/code&gt;.
                  &lt;p&gt; &lt;code&gt;Object&lt;/code&gt; references whose legal values are
                  defined as a range must implement the &lt;code&gt;Comparable&lt;/code&gt;
                  interface.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    one of the <code>VALUE_</code> constants.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <see>
                    Comparable                    
                </see>
            </javadoc>
            <method name="getObjectClass" type="Class<?>" line="520"/>
            <javadoc line="520">
                Returns the &lt;code&gt;Class&lt;/code&gt; type of the &lt;code&gt;Object&lt;/code&gt;
                  reference stored within the element.  If this element may not
                  contain an &lt;code&gt;Object&lt;/code&gt; reference, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown.  If the
                  class type is an array, this field indicates the underlying
                  class type (&lt;i&gt;e.g&lt;/i&gt;, for an array of &lt;code&gt;int&lt;/code&gt;s, this
                  method would return &lt;code&gt;int.class&lt;/code&gt;).
                  &lt;p&gt; &lt;code&gt;Object&lt;/code&gt; references whose legal values are
                  defined as a range must implement the &lt;code&gt;Comparable&lt;/code&gt;
                  interface.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    a <code>Class</code> object.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element cannot
                      contain an object value (<i>i.e.</i>, if
                      <code>getObjectValueType(elementName) == VALUE_NONE</code>).                    
                </exception>
            </javadoc>
            <method name="getObjectDefaultValue" type="Object" line="541"/>
            <javadoc line="541">
                Returns an &lt;code&gt;Object&lt;/code&gt;s containing the default
                  value for the &lt;code&gt;Object&lt;/code&gt; reference within
                  the named element.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    an <code>Object</code>.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element cannot
                      contain an object value (<i>i.e.</i>, if
                      <code>getObjectValueType(elementName) == VALUE_NONE</code>).                    
                </exception>
            </javadoc>
            <method name="getObjectEnumerations" type="Object[]" line="555"/>
            <javadoc line="555">
                Returns an array of &lt;code&gt;Object&lt;/code&gt;s containing the legal
                  enumerated values for the &lt;code&gt;Object&lt;/code&gt; reference within
                  the named element.  This method should only be called if
                  &lt;code&gt;getObjectValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_ENUMERATION&lt;/code&gt;.
                  &lt;p&gt; The &lt;code&gt;Object&lt;/code&gt; associated with a node that accepts
                  emuerated values must be equal to one of the values returned by
                  this method, as defined by the &lt;code&gt;==&lt;/code&gt; operator (as
                  opposed to the &lt;code&gt;Object.equals&lt;/code&gt; method).                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    an array of <code>Object</code>s.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element cannot
                      contain an object value (<i>i.e.</i>, if
                      <code>getObjectValueType(elementName) == VALUE_NONE</code>).                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>Object</code>
                      is not defined as an enumeration.                    
                </exception>
            </javadoc>
            <method name="getObjectMinValue" type="Comparable<?>" line="577"/>
            <javadoc line="577">
                Returns the minimum legal value for the &lt;code&gt;Object&lt;/code&gt;
                  reference within the named element.  Whether this value is
                  inclusive or exclusive may be determined by the value of
                  &lt;code&gt;getObjectValueType&lt;/code&gt;.  This method should only be
                  called if &lt;code&gt;getObjectValueType&lt;/code&gt; returns one of the
                  constants starting with &lt;code&gt;VALUE_RANGE&lt;/code&gt;.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    the smallest legal value for the attribute.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element cannot
                      contain an object value (<i>i.e.</i>, if
                      <code>getObjectValueType(elementName) == VALUE_NONE</code>).                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>Object</code>
                      is not defined as a range.                    
                </exception>
            </javadoc>
            <method name="getObjectMaxValue" type="Comparable<?>" line="596"/>
            <javadoc line="596">
                Returns the maximum legal value for the &lt;code&gt;Object&lt;/code&gt;
                  reference within the named element.  Whether this value is
                  inclusive or exclusive may be determined by the value of
                  &lt;code&gt;getObjectValueType&lt;/code&gt;.  This method should only be
                  called if &lt;code&gt;getObjectValueType&lt;/code&gt; returns one of the
                  constants starting with &lt;code&gt;VALUE_RANGE&lt;/code&gt;.                
                <return>
                    the smallest legal value for the attribute.                    
                </return>
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element cannot
                      contain an object value (<i>i.e.</i>, if
                      <code>getObjectValueType(elementName) == VALUE_NONE</code>).                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>Object</code>
                      is not defined as a range.                    
                </exception>
            </javadoc>
            <method name="getObjectArrayMinLength" type="int" line="615"/>
            <javadoc line="615">
                Returns the minimum number of array elements that may be used
                  to define the &lt;code&gt;Object&lt;/code&gt; reference within the named
                  element.  This method should only be called if
                  &lt;code&gt;getObjectValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_LIST&lt;/code&gt;.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    the smallest valid array length for the
                      <code>Object</code> reference.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element cannot
                      contain an object value (<i>i.e.</i>, if
                      <code>getObjectValueType(elementName) == VALUE_NONE</code>).                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>Object</code> is not
                      an array.                    
                </exception>
            </javadoc>
            <method name="getObjectArrayMaxLength" type="int" line="634"/>
            <javadoc line="634">
                Returns the maximum number of array elements that may be used
                  to define the &lt;code&gt;Object&lt;/code&gt; reference within the named
                  element.  A value of &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; may be used
                  to specify that there is no upper bound.  This method should
                  only be called if &lt;code&gt;getObjectValueType&lt;/code&gt; returns
                  &lt;code&gt;VALUE_LIST&lt;/code&gt;.                
                <param>
                    elementName the name of the element being queried.                    
                </param>
                <return>
                    the largest valid array length for the
                      <code>Object</code> reference.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>elementName</code>
                      is <code>null</code> or is not a legal element name for this
                      format.                    
                </exception>
                <exception>
                    IllegalArgumentException if the named element cannot
                      contain an object value (<i>i.e.</i>, if
                      <code>getObjectValueType(elementName) == VALUE_NONE</code>).                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>Object</code> is not
                      an array.                    
                </exception>
            </javadoc>
        </interface>
    </source>