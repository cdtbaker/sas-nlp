<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.metadata">
        <import package="org.w3c.dom.Node"/>
        <import package="java.lang.reflect.Method"/>
        <class name="IIOMetadata" line="31">
            <javadoc line="31">
                An abstract class to be extended by objects that represent metadata
                  (non-image data) associated with images and streams.  Plug-ins
                  represent metadata using opaque, plug-in specific objects.  These
                  objects, however, provide the ability to access their internal
                  information as a tree of &lt;code&gt;IIOMetadataNode&lt;/code&gt; objects that
                  support the XML DOM interfaces as well as additional interfaces for
                  storing non-textual data and retrieving information about legal
                  data values.  The format of such trees is plug-in dependent, but
                  plug-ins may choose to support a plug-in neutral format described
                  below.  A single plug-in may support multiple metadata formats,
                  whose names maybe determined by calling
                  &lt;code&gt;getMetadataFormatNames&lt;/code&gt;.  The plug-in may also support
                  a single special format, referred to as the &quot;native&quot; format, which
                  is designed to encode its metadata losslessly.  This format will
                  typically be designed specifically to work with a specific file
                  format, so that images may be loaded and saved in the same format
                  with no loss of metadata, but may be less useful for transfering
                  metadata between an &lt;code&gt;ImageReader&lt;/code&gt; and an
                  &lt;code&gt;ImageWriter&lt;/code&gt; for different image formats.  To convert
                  between two native formats as losslessly as the image file formats
                  will allow, an &lt;code&gt;ImageTranscoder&lt;/code&gt; object must be used.                
                <see>
                    javax.imageio.ImageReader#getImageMetadata                    
                </see>
                <see>
                    javax.imageio.ImageReader#getStreamMetadata                    
                </see>
                <see>
                    javax.imageio.ImageReader#readAll                    
                </see>
                <see>
                    javax.imageio.ImageWriter#getDefaultStreamMetadata                    
                </see>
                <see>
                    javax.imageio.ImageWriter#getDefaultImageMetadata                    
                </see>
                <see>
                    javax.imageio.ImageWriter#write                    
                </see>
                <see>
                    javax.imageio.ImageWriter#convertImageMetadata                    
                </see>
                <see>
                    javax.imageio.ImageWriter#convertStreamMetadata                    
                </see>
                <see>
                    javax.imageio.IIOImage                    
                </see>
                <see>
                    javax.imageio.ImageTranscoder                    
                </see>
            </javadoc>
            <declaration name="standardFormatSupported" type="boolean" line="68"/>
            <javadoc line="68">
                A boolean indicating whether the concrete subclass supports the
                  standard metadata format, set via the constructor.                
            </javadoc>
            <declaration name="nativeMetadataFormatName" type="String" line="74"/>
            <javadoc line="74">
                The name of the native metadata format for this object,
                  initialized to &lt;code&gt;null&lt;/code&gt; and set via the constructor.                
            </javadoc>
            <declaration name="nativeMetadataFormatClassName" type="String" line="80"/>
            <javadoc line="80">
                The name of the class implementing &lt;code&gt;IIOMetadataFormat&lt;/code&gt;
                  and representing the native metadata format, initialized to
                  &lt;code&gt;null&lt;/code&gt; and set via the constructor.                
            </javadoc>
            <declaration name="extraMetadataFormatNames" type="String[]" line="87"/>
            <javadoc line="87">
                An array of names of formats, other than the standard and
                  native formats, that are supported by this plug-in,
                  initialized to &lt;code&gt;null&lt;/code&gt; and set via the constructor.                
            </javadoc>
            <declaration name="extraMetadataFormatClassNames" type="String[]" line="94"/>
            <javadoc line="94">
                An array of names of classes implementing &lt;code&gt;IIOMetadataFormat&lt;/code&gt;
                  and representing the metadata formats, other than the standard and
                  native formats, that are supported by this plug-in,
                  initialized to &lt;code&gt;null&lt;/code&gt; and set via the constructor.                
            </javadoc>
            <declaration name="defaultController" type="IIOMetadataController" line="102"/>
            <javadoc line="102">
                An &lt;code&gt;IIOMetadataController&lt;/code&gt; that is suggested for use
                  as the controller for this &lt;code&gt;IIOMetadata&lt;/code&gt; object.  It
                  may be retrieved via &lt;code&gt;getDefaultController&lt;/code&gt;.  To
                  install the default controller, call
                  &lt;code&gt;setController(getDefaultController())&lt;/code&gt;.  This
                  instance variable should be set by subclasses that choose to
                  provide their own default controller, usually a GUI, for
                  setting parameters.                
                <see>
                    IIOMetadataController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
            </javadoc>
            <declaration name="controller" type="IIOMetadataController" line="117"/>
            <javadoc line="117">
                The &lt;code&gt;IIOMetadataController&lt;/code&gt; that will be
                  used to provide settings for this &lt;code&gt;IIOMetadata&lt;/code&gt;
                  object when the &lt;code&gt;activateController&lt;/code&gt; method
                  is called.  This value overrides any default controller,
                  even when &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    IIOMetadataController                    
                </see>
                <see>
                    #setController(IIOMetadataController)                    
                </see>
                <see>
                    #hasController()                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <javadoc line="131">
                Constructs an empty &lt;code&gt;IIOMetadata&lt;/code&gt; object.  The
                  subclass is responsible for suppying values for all protected
                  instance variables that will allow any non-overridden default
                  implemtations of methods to satisfy their contracts.  For example,
                  &lt;code&gt;extraMetadataFormatNames&lt;/code&gt; should not have length 0.                
            </javadoc>
            <method name="IIOMetadata" type="constructor" line="138"/>
            <javadoc line="140">
                Constructs an &lt;code&gt;IIOMetadata&lt;/code&gt; object with the given
                  format names and format class names, as well as a boolean
                  indicating whether the standard format is supported.
                  &lt;p&gt; This constructor does not attempt to check the class names
                  for validity.  Invalid class names may cause exceptions in
                  subsequent calls to &lt;code&gt;getMetadataFormat&lt;/code&gt;.                
                <param>
                    standardMetadataFormatSupported &lt;code&gt;true&lt;/code&gt; if
                      this object can return or accept a DOM tree using the standard
                      metadata format.                    
                </param>
                <param>
                    nativeMetadataFormatName the name of the native metadata
                      format, as a &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if there
                      is no native format.                    
                </param>
                <param>
                    nativeMetadataFormatClassName the name of the class of
                      the native metadata format, or &lt;code&gt;null&lt;/code&gt; if there is
                      no native format.                    
                </param>
                <param>
                    extraMetadataFormatNames an array of &lt;code&gt;String&lt;/code&gt;s
                      indicating additional formats supported by this object, or
                      &lt;code&gt;null&lt;/code&gt; if there are none.                    
                </param>
                <param>
                    extraMetadataFormatClassNames an array of &lt;code&gt;String&lt;/code&gt;s
                      indicating the class names of any additional formats supported by
                      this object, or &lt;code&gt;null&lt;/code&gt; if there are none.                    
                </param>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;extraMetadataFormatNames&lt;/code&gt; has length 0.                    
                </exception>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;extraMetadataFormatNames&lt;/code&gt; and
                      &lt;code&gt;extraMetadataFormatClassNames&lt;/code&gt; are neither both
                      &lt;code&gt;null&lt;/code&gt;, nor of the same length.                    
                </exception>
            </javadoc>
            <method name="IIOMetadata" type="constructor" line="176">
                <params>
                    <param name="standardMetadataFormatSupported" type="boolean"/>
                    <param name="nativeMetadataFormatName" type="String"/>
                    <param name="nativeMetadataFormatClassName" type="String"/>
                    <param name="extraMetadataFormatNames" type="String[]"/>
                    <param name="extraMetadataFormatClassNames" type="String[]"/>
                </params>
                <scope line="180">
                    <scope line="181"/>
                    <scope line="185"/>
                    <scope line="190"/>
                </scope>
                <scope line="198">
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="206">
                Returns &lt;code&gt;true&lt;/code&gt; if the standard metadata format is
                  supported by &lt;code&gt;getMetadataFormat&lt;/code&gt;,
                  &lt;code&gt;getAsTree&lt;/code&gt;, &lt;code&gt;setFromTree&lt;/code&gt;, and
                  &lt;code&gt;mergeTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;standardFormatSupported&lt;/code&gt; instance variable.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the standard metadata format
                      is supported.                    
                </return>
                <see>
                    #getAsTree                    
                </see>
                <see>
                    #setFromTree                    
                </see>
                <see>
                    #mergeTree                    
                </see>
                <see>
                    #getMetadataFormat                    
                </see>
            </javadoc>
            <method name="isStandardMetadataFormatSupported" type="boolean" line="223"/>
            <method name="isReadOnly" type="boolean" line="227"/>
            <javadoc line="227">
                Returns &lt;code&gt;true&lt;/code&gt; if this object does not support the
                  &lt;code&gt;mergeTree&lt;/code&gt;, &lt;code&gt;setFromTree&lt;/code&gt;, and
                  &lt;code&gt;reset&lt;/code&gt; methods.                
                <return>
                    true if this &lt;code&gt;IIOMetadata&lt;/code&gt; object cannot be
                      modified.                    
                </return>
            </javadoc>
            <javadoc line="237">
                Returns the name of the &quot;native&quot; metadata format for this
                  plug-in, which typically allows for lossless encoding and
                  transmission of the metadata stored in the format handled by
                  this plug-in.  If no such format is supported,
                  &lt;code&gt;null&lt;/code&gt;will be returned.
                  &lt;p&gt; The structure and contents of the &quot;native&quot; metadata format
                  are defined by the plug-in that created this
                  &lt;code&gt;IIOMetadata&lt;/code&gt; object.  Plug-ins for simple formats
                  will usually create a dummy node for the root, and then a
                  series of child nodes representing individual tags, chunks, or
                  keyword/value pairs.  A plug-in may choose whether or not to
                  document its native format.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;nativeMetadataFormatName&lt;/code&gt; instance variable.                
                <return>
                    the name of the native format, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getExtraMetadataFormatNames                    
                </see>
                <see>
                    #getMetadataFormatNames                    
                </see>
            </javadoc>
            <method name="getNativeMetadataFormatName" type="String" line="260"/>
            <javadoc line="264">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing the names
                  of additional metadata formats, other than the native and standard
                  formats, recognized by this plug-in&apos;s
                  &lt;code&gt;getAsTree&lt;/code&gt;, &lt;code&gt;setFromTree&lt;/code&gt;, and
                  &lt;code&gt;mergeTree&lt;/code&gt; methods.  If there are no such additional
                  formats, &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The default implementation returns a clone of the
                  &lt;code&gt;extraMetadataFormatNames&lt;/code&gt; instance variable.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s with length at least
                      1, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getAsTree                    
                </see>
                <see>
                    #setFromTree                    
                </see>
                <see>
                    #mergeTree                    
                </see>
                <see>
                    #getNativeMetadataFormatName                    
                </see>
                <see>
                    #getMetadataFormatNames                    
                </see>
            </javadoc>
            <method name="getExtraMetadataFormatNames" type="String[]" line="284">
                <scope line="285"/>
            </method>
            <javadoc line="291">
                Returns an array of &lt;code&gt;String&lt;/code&gt;s containing the names
                  of all metadata formats, including the native and standard
                  formats, recognized by this plug-in&apos;s &lt;code&gt;getAsTree&lt;/code&gt;,
                  &lt;code&gt;setFromTree&lt;/code&gt;, and &lt;code&gt;mergeTree&lt;/code&gt; methods.
                  If there are no such formats, &lt;code&gt;null&lt;/code&gt; is returned.
                  &lt;p&gt; The default implementation calls
                  &lt;code&gt;getNativeMetadataFormatName&lt;/code&gt;,
                  &lt;code&gt;isStandardMetadataFormatSupported&lt;/code&gt;, and
                  &lt;code&gt;getExtraMetadataFormatNames&lt;/code&gt; and returns the
                  combined results.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt;s.                    
                </return>
                <see>
                    #getNativeMetadataFormatName                    
                </see>
                <see>
                    #isStandardMetadataFormatSupported                    
                </see>
                <see>
                    #getExtraMetadataFormatNames                    
                </see>
            </javadoc>
            <method name="getMetadataFormatNames" type="String[]" line="310">
                <declaration name="nativeName" type="String" line="311"/>
                <declaration name="standardName" type="String" line="312"/>
                <declaration name="extraNames" type="String[]" line="314"/>
                <declaration name="numFormats" type="int" line="316"/>
                <scope line="317"/>
                <scope line="320"/>
                <scope line="323"/>
                <scope line="326"/>
                <declaration name="formats" type="String[]" line="330"/>
                <declaration name="index" type="int" line="331"/>
                <scope line="332"/>
                <scope line="335"/>
                <scope line="338">
                    <scope line="339"/>
                </scope>
            </method>
            <javadoc line="347">
                Returns an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object describing the
                  given metadata format, or &lt;code&gt;null&lt;/code&gt; if no description
                  is available.  The supplied name must be one of those returned
                  by &lt;code&gt;getMetadataFormatNames&lt;/code&gt; (&lt;i&gt;i.e.&lt;/i&gt;, either the
                  native format name, the standard format name, or one of those
                  returned by &lt;code&gt;getExtraMetadataFormatNames&lt;/code&gt;).
                  &lt;p&gt; The default implementation checks the name against the
                  global standard metadata format name, and returns that format
                  if it is supported.  Otherwise, it checks against the native
                  format names followed by any additional format names.  If a
                  match is found, it retrieves the name of the
                  &lt;code&gt;IIOMetadataFormat&lt;/code&gt; class from
                  &lt;code&gt;nativeMetadataFormatClassName&lt;/code&gt; or
                  &lt;code&gt;extraMetadataFormatClassNames&lt;/code&gt; as appropriate, and
                  constructs an instance of that class using its
                  &lt;code&gt;getInstance&lt;/code&gt; method.                
                <param>
                    formatName the desired metadata format.                    
                </param>
                <return>
                    an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or is not one of the names recognized by
                      the plug-in.                    
                </exception>
                <exception>
                    IllegalStateException if the class corresponding to
                      the format name cannot be loaded.                    
                </exception>
            </javadoc>
            <method name="getMetadataFormat" type="IIOMetadataFormat" line="376">
                <params>
                    <param name="formatName" type="String"/>
                </params>
                <comment line="393">
                    out of for                    
                </comment>
                <comment line="404">
                    firstly we try to use classloader used for loading
                     the IIOMetadata implemantation for this plugin.                    
                </comment>
                <comment line="418">
                    we failed to load IIOMetadataFormat class by
                     using IIOMetadata classloader.Next try is to
                     use thread context classloader.                    
                </comment>
                <comment line="432">
                    finally we try to use system classloader in case
                     if we failed to load IIOMetadataFormat implementation
                     class above.                    
                </comment>
                <scope line="377"/>
                <scope line="382"/>
                <declaration name="formatClassName" type="String" line="385"/>
                <scope line="386"/>
                <scope line="388">
                    <scope line="389">
                        <scope line="390"/>
                    </scope>
                </scope>
                <scope line="396"/>
                <scope line="399">
                    <declaration name="cls" type="Class" line="400"/>
                    <declaration name="o" type="Object" line="401"/>
                    <anonymous_class line="407">
                        <method name="run" type="Object" line="408"/>
                    </anonymous_class>
                    <declaration name="loader" type="ClassLoader" line="405"/>
                    <scope line="413"/>
                    <scope line="416">
                        <anonymous_class line="422">
                            <method name="run" type="Object" line="423"/>
                        </anonymous_class>
                        <scope line="427"/>
                        <scope line="430"/>
                    </scope>
                    <declaration name="meth" type="Method" line="439"/>
                </scope>
                <scope line="441">
                    <declaration name="ex" type="RuntimeException" line="442"/>
                </scope>
            </method>
            <method name="getAsTree" type="Node" line="450"/>
            <javadoc line="450">
                Returns an XML DOM &lt;code&gt;Node&lt;/code&gt; object that represents the
                  root of a tree of metadata contained within this object
                  according to the conventions defined by a given metadata
                  format.
                  &lt;p&gt; The names of the available metadata formats may be queried
                  using the &lt;code&gt;getMetadataFormatNames&lt;/code&gt; method.                
                <param>
                    formatName the desired metadata format.                    
                </param>
                <return>
                    an XML DOM &lt;code&gt;Node&lt;/code&gt; object forming the
                      root of a tree.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or is not one of the names returned by
                      &lt;code&gt;getMetadataFormatNames&lt;/code&gt;.                    
                </exception>
                <see>
                    #getMetadataFormatNames                    
                </see>
                <see>
                    #setFromTree                    
                </see>
                <see>
                    #mergeTree                    
                </see>
            </javadoc>
            <method name="mergeTree" type="void" line="474"/>
            <javadoc line="474">
                Alters the internal state of this &lt;code&gt;IIOMetadata&lt;/code&gt;
                  object from a tree of XML DOM &lt;code&gt;Node&lt;/code&gt;s whose syntax
                  is defined by the given metadata format.  The previous state is
                  altered only as necessary to accomodate the nodes that are
                  present in the given tree.  If the tree structure or contents
                  are invalid, an &lt;code&gt;IIOInvalidTreeException&lt;/code&gt; will be
                  thrown.
                  &lt;p&gt; As the semantics of how a tree or subtree may be merged with
                  another tree are completely format-specific, plug-in authors may
                  implement this method in whatever manner is most appropriate for
                  the format, including simply replacing all existing state with the
                  contents of the given tree.                
                <param>
                    formatName the desired metadata format.                    
                </param>
                <param>
                    root an XML DOM &lt;code&gt;Node&lt;/code&gt; object forming the
                      root of a tree.                    
                </param>
                <exception>
                    IllegalStateException if this object is read-only.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or is not one of the names returned by
                      &lt;code&gt;getMetadataFormatNames&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;root&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IIOInvalidTreeException if the tree cannot be parsed
                      successfully using the rules of the given format.                    
                </exception>
                <see>
                    #getMetadataFormatNames                    
                </see>
                <see>
                    #getAsTree                    
                </see>
                <see>
                    #setFromTree                    
                </see>
            </javadoc>
            <javadoc line="509">
                Returns an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the chroma
                  information of the standard &lt;code&gt;javax_imageio_1.0&lt;/code&gt;
                  metadata format, or &lt;code&gt;null&lt;/code&gt; if no such information is
                  available.  This method is intended to be called by the utility
                  routine &lt;code&gt;getStandardTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Subclasses should override this method to produce an
                  appropriate subtree if they wish to support the standard
                  metadata format.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getStandardTree                    
                </see>
            </javadoc>
            <method name="getStandardChromaNode" type="IIOMetadataNode" line="526"/>
            <javadoc line="530">
                Returns an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the
                  compression information of the standard
                  &lt;code&gt;javax_imageio_1.0&lt;/code&gt; metadata format, or
                  &lt;code&gt;null&lt;/code&gt; if no such information is available.  This
                  method is intended to be called by the utility routine
                  &lt;code&gt;getStandardTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Subclasses should override this method to produce an
                  appropriate subtree if they wish to support the standard
                  metadata format.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getStandardTree                    
                </see>
            </javadoc>
            <method name="getStandardCompressionNode" type="IIOMetadataNode" line="548"/>
            <javadoc line="552">
                Returns an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the data
                  format information of the standard
                  &lt;code&gt;javax_imageio_1.0&lt;/code&gt; metadata format, or
                  &lt;code&gt;null&lt;/code&gt; if no such information is available.  This
                  method is intended to be called by the utility routine
                  &lt;code&gt;getStandardTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Subclasses should override this method to produce an
                  appropriate subtree if they wish to support the standard
                  metadata format.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getStandardTree                    
                </see>
            </javadoc>
            <method name="getStandardDataNode" type="IIOMetadataNode" line="570"/>
            <javadoc line="574">
                Returns an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the
                  dimension information of the standard
                  &lt;code&gt;javax_imageio_1.0&lt;/code&gt; metadata format, or
                  &lt;code&gt;null&lt;/code&gt; if no such information is available.  This
                  method is intended to be called by the utility routine
                  &lt;code&gt;getStandardTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Subclasses should override this method to produce an
                  appropriate subtree if they wish to support the standard
                  metadata format.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getStandardTree                    
                </see>
            </javadoc>
            <method name="getStandardDimensionNode" type="IIOMetadataNode" line="592"/>
            <javadoc line="596">
                Returns an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the document
                  information of the standard &lt;code&gt;javax_imageio_1.0&lt;/code&gt;
                  metadata format, or &lt;code&gt;null&lt;/code&gt; if no such information is
                  available.  This method is intended to be called by the utility
                  routine &lt;code&gt;getStandardTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Subclasses should override this method to produce an
                  appropriate subtree if they wish to support the standard
                  metadata format.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getStandardTree                    
                </see>
            </javadoc>
            <method name="getStandardDocumentNode" type="IIOMetadataNode" line="613"/>
            <javadoc line="617">
                Returns an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the textual
                  information of the standard &lt;code&gt;javax_imageio_1.0&lt;/code&gt;
                  metadata format, or &lt;code&gt;null&lt;/code&gt; if no such information is
                  available.  This method is intended to be called by the utility
                  routine &lt;code&gt;getStandardTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Subclasses should override this method to produce an
                  appropriate subtree if they wish to support the standard
                  metadata format.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getStandardTree                    
                </see>
            </javadoc>
            <method name="getStandardTextNode" type="IIOMetadataNode" line="634"/>
            <javadoc line="638">
                Returns an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the tiling
                  information of the standard &lt;code&gt;javax_imageio_1.0&lt;/code&gt;
                  metadata format, or &lt;code&gt;null&lt;/code&gt; if no such information is
                  available.  This method is intended to be called by the utility
                  routine &lt;code&gt;getStandardTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Subclasses should override this method to produce an
                  appropriate subtree if they wish to support the standard
                  metadata format.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    #getStandardTree                    
                </see>
            </javadoc>
            <method name="getStandardTileNode" type="IIOMetadataNode" line="655"/>
            <javadoc line="659">
                Returns an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the
                  transparency information of the standard
                  &lt;code&gt;javax_imageio_1.0&lt;/code&gt; metadata format, or
                  &lt;code&gt;null&lt;/code&gt; if no such information is available.  This
                  method is intended to be called by the utility routine
                  &lt;code&gt;getStandardTree&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Subclasses should override this method to produce an
                  appropriate subtree if they wish to support the standard
                  metadata format.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getStandardTransparencyNode" type="IIOMetadataNode" line="675"/>
            <javadoc line="679">
                Appends a new node to an existing node, if the new node is
                  non-&lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="append" type="void" line="683">
                <params>
                    <param name="root" type="IIOMetadataNode"/>
                    <param name="node" type="IIOMetadataNode"/>
                </params>
                <scope line="684"/>
            </method>
            <javadoc line="689">
                A utility method to return a tree of
                  &lt;code&gt;IIOMetadataNode&lt;/code&gt;s representing the metadata
                  contained within this object according to the conventions of
                  the standard &lt;code&gt;javax_imageio_1.0&lt;/code&gt; metadata format.
                  &lt;p&gt; This method calls the various &lt;code&gt;getStandardNode&lt;/code&gt;
                  methods to supply each of the subtrees rooted at the children
                  of the root node.  If any of those methods returns
                  &lt;code&gt;null&lt;/code&gt;, the corresponding subtree will be omitted.
                  If all of them return &lt;code&gt;null&lt;/code&gt;, a tree consisting of a
                  single root node will be returned.                
                <return>
                    an &lt;code&gt;IIOMetadataNode&lt;/code&gt; representing the root
                      of a metadata tree in the &lt;code&gt;javax_imageio_1.0&lt;/code&gt;
                      format.                    
                </return>
                <see>
                    #getStandardChromaNode                    
                </see>
                <see>
                    #getStandardCompressionNode                    
                </see>
                <see>
                    #getStandardDataNode                    
                </see>
                <see>
                    #getStandardDimensionNode                    
                </see>
                <see>
                    #getStandardDocumentNode                    
                </see>
                <see>
                    #getStandardTextNode                    
                </see>
                <see>
                    #getStandardTileNode                    
                </see>
                <see>
                    #getStandardTransparencyNode                    
                </see>
            </javadoc>
            <method name="getStandardTree" type="IIOMetadataNode" line="715">
                <declaration name="root" type="IIOMetadataNode" line="716"/>
            </method>
            <javadoc line="729">
                Sets the internal state of this &lt;code&gt;IIOMetadata&lt;/code&gt; object
                  from a tree of XML DOM &lt;code&gt;Node&lt;/code&gt;s whose syntax is
                  defined by the given metadata format.  The previous state is
                  discarded.  If the tree&apos;s structure or contents are invalid, an
                  &lt;code&gt;IIOInvalidTreeException&lt;/code&gt; will be thrown.
                  &lt;p&gt; The default implementation calls &lt;code&gt;reset&lt;/code&gt;
                  followed by &lt;code&gt;mergeTree(formatName, root)&lt;/code&gt;.                
                <param>
                    formatName the desired metadata format.                    
                </param>
                <param>
                    root an XML DOM &lt;code&gt;Node&lt;/code&gt; object forming the
                      root of a tree.                    
                </param>
                <exception>
                    IllegalStateException if this object is read-only.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;formatName&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt; or is not one of the names returned by
                      &lt;code&gt;getMetadataFormatNames&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;root&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IIOInvalidTreeException if the tree cannot be parsed
                      successfully using the rules of the given format.                    
                </exception>
                <see>
                    #getMetadataFormatNames                    
                </see>
                <see>
                    #getAsTree                    
                </see>
                <see>
                    #mergeTree                    
                </see>
            </javadoc>
            <method name="setFromTree" type="void" line="757">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="root" type="Node"/>
                </params>
            </method>
            <method name="reset" type="void" line="762"/>
            <javadoc line="762">
                Resets all the data stored in this object to default values,
                  usually to the state this object was in immediately after
                  construction, though the precise semantics are plug-in specific.
                  Note that there are many possible default values, depending on
                  how the object was created.                
                <exception>
                    IllegalStateException if this object is read-only.                    
                </exception>
                <see>
                    javax.imageio.ImageReader#getStreamMetadata                    
                </see>
                <see>
                    javax.imageio.ImageReader#getImageMetadata                    
                </see>
                <see>
                    javax.imageio.ImageWriter#getDefaultStreamMetadata                    
                </see>
                <see>
                    javax.imageio.ImageWriter#getDefaultImageMetadata                    
                </see>
            </javadoc>
            <javadoc line="778">
                Sets the &lt;code&gt;IIOMetadataController&lt;/code&gt; to be used
                  to provide settings for this &lt;code&gt;IIOMetadata&lt;/code&gt;
                  object when the &lt;code&gt;activateController&lt;/code&gt; method
                  is called, overriding any default controller.  If the
                  argument is &lt;code&gt;null&lt;/code&gt;, no controller will be
                  used, including any default.  To restore the default, use
                  &lt;code&gt;setController(getDefaultController())&lt;/code&gt;.
                  &lt;p&gt; The default implementation sets the &lt;code&gt;controller&lt;/code&gt;
                  instance variable to the supplied value.                
                <param>
                    controller An appropriate
                      &lt;code&gt;IIOMetadataController&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <see>
                    IIOMetadataController                    
                </see>
                <see>
                    #getController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #hasController                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <method name="setController" type="void" line="799">
                <params>
                    <param name="controller" type="IIOMetadataController"/>
                </params>
            </method>
            <javadoc line="803">
                Returns whatever &lt;code&gt;IIOMetadataController&lt;/code&gt; is currently
                  installed.  This could be the default if there is one,
                  &lt;code&gt;null&lt;/code&gt;, or the argument of the most recent call
                  to &lt;code&gt;setController&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;controller&lt;/code&gt; instance variable.                
                <return>
                    the currently installed
                      &lt;code&gt;IIOMetadataController&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    IIOMetadataController                    
                </see>
                <see>
                    #setController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #hasController                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <method name="getController" type="IIOMetadataController" line="821"/>
            <javadoc line="825">
                Returns the default &lt;code&gt;IIOMetadataController&lt;/code&gt;, if there
                  is one, regardless of the currently installed controller.  If
                  there is no default controller, returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; The default implementation returns the value of the
                  &lt;code&gt;defaultController&lt;/code&gt; instance variable.                
                <return>
                    the default &lt;code&gt;IIOMetadataController&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    IIOMetadataController                    
                </see>
                <see>
                    #setController(IIOMetadataController)                    
                </see>
                <see>
                    #getController                    
                </see>
                <see>
                    #hasController                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <method name="getDefaultController" type="IIOMetadataController" line="842"/>
            <javadoc line="846">
                Returns &lt;code&gt;true&lt;/code&gt; if there is a controller installed
                  for this &lt;code&gt;IIOMetadata&lt;/code&gt; object.
                  &lt;p&gt; The default implementation returns &lt;code&gt;true&lt;/code&gt; if the
                  &lt;code&gt;getController&lt;/code&gt; method returns a
                  non-&lt;code&gt;null&lt;/code&gt; value.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if a controller is installed.                    
                </return>
                <see>
                    IIOMetadataController                    
                </see>
                <see>
                    #setController(IIOMetadataController)                    
                </see>
                <see>
                    #getController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #activateController()                    
                </see>
            </javadoc>
            <method name="hasController" type="boolean" line="862"/>
            <javadoc line="866">
                Activates the installed &lt;code&gt;IIOMetadataController&lt;/code&gt; for
                  this &lt;code&gt;IIOMetadata&lt;/code&gt; object and returns the resulting
                  value.  When this method returns &lt;code&gt;true&lt;/code&gt;, all values for this
                  &lt;code&gt;IIOMetadata&lt;/code&gt; object will be ready for the next write
                  operation.  If &lt;code&gt;false&lt;/code&gt; is
                  returned, no settings in this object will have been disturbed
                  (&lt;i&gt;i.e.&lt;/i&gt;, the user canceled the operation).
                  &lt;p&gt; Ordinarily, the controller will be a GUI providing a user
                  interface for a subclass of &lt;code&gt;IIOMetadata&lt;/code&gt; for a
                  particular plug-in.  Controllers need not be GUIs, however.
                  &lt;p&gt; The default implementation calls &lt;code&gt;getController&lt;/code&gt;
                  and the calls &lt;code&gt;activate&lt;/code&gt; on the returned object if
                  &lt;code&gt;hasController&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the controller completed normally.                    
                </return>
                <exception>
                    IllegalStateException if there is no controller
                      currently installed.                    
                </exception>
                <see>
                    IIOMetadataController                    
                </see>
                <see>
                    #setController(IIOMetadataController)                    
                </see>
                <see>
                    #getController                    
                </see>
                <see>
                    #getDefaultController                    
                </see>
                <see>
                    #hasController                    
                </see>
            </javadoc>
            <method name="activateController" type="boolean" line="894">
                <scope line="895"/>
            </method>
        </class>
    </source>