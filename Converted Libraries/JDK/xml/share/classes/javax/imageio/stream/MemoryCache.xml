<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.util.ArrayList"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <class name="MemoryCache" line="33">
            <javadoc line="33">
                Package-visible class consolidating common code for
                  &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt; and
                  &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt;.
                  This class keeps an &lt;code&gt;ArrayList&lt;/code&gt; of 8K blocks,
                  loaded sequentially.  Blocks may only be disposed of
                  from the index 0 forward.  As blocks are freed, the
                  corresponding entries in the array list are set to
                  &lt;code&gt;null&lt;/code&gt;, but no compacting is performed.
                  This allows the index for each block to never change,
                  and the length of the cache is always the same as the
                  total amount of data ever cached.  Cached data is
                  therefore always contiguous from the point of last
                  disposal to the current length.
                  &lt;p&gt; The total number of blocks resident in the cache must not
                  exceed &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.  In practice, the limit of
                  available memory will be exceeded long before this becomes an
                  issue, since a full cache would contain 81922^31 = 16 terabytes of
                  data.
                  A &lt;code&gt;MemoryCache&lt;/code&gt; may be reused after a call
                  to &lt;code&gt;reset()&lt;/code&gt;.                
            </javadoc>
            <declaration name="BUFFER_LENGTH" type="int" line="59"/>
            <declaration name="cache" type="ArrayList" line="61"/>
            <declaration name="cacheStart" type="long" line="63"/>
            <declaration name="length" type="long" line="65"/>
            <javadoc line="65">
                The largest position ever written to the cache.                
            </javadoc>
            <method name="getCacheBlock" type="byte[]" line="70">
                <params>
                    <param name="blockNum" type="long"/>
                </params>
                <comment line="74">
                    This can only happen when the cache hits 16 terabytes of
                     contiguous data...                    
                </comment>
                <declaration name="blockOffset" type="long" line="71"/>
                <scope line="72"/>
            </method>
            <javadoc line="80">
                Ensures that at least &lt;code&gt;pos&lt;/code&gt; bytes are cached,
                  or the end of the source is reached.  The return value
                  is equal to the smaller of &lt;code&gt;pos&lt;/code&gt; and the
                  length of the source.                
            </javadoc>
            <method name="loadFromStream" type="long" line="87">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="pos" type="long"/>
                </params>
                <comment line="89">
                    We&apos;ve already got enough data cached                    
                </comment>
                <comment line="116">
                    EOF                    
                </comment>
                <comment line="128">
                    we&apos;ve filled the current buffer, so a new one will be
                     allocated next time around (and offset will be reset to 0)                    
                </comment>
                <scope line="89"/>
                <declaration name="offset" type="int" line="93"/>
                <declaration name="buf" type="byte[]" line="94"/>
                <declaration name="len" type="long" line="96"/>
                <scope line="97"/>
                <scope line="101">
                    <scope line="102">
                        <scope line="103"/>
                        <scope line="105"/>
                    </scope>
                    <declaration name="left" type="int" line="111"/>
                    <declaration name="nbytes" type="int" line="112"/>
                    <scope line="114"/>
                    <scope line="118"/>
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="136">
                Writes out a portion of the cache to an &lt;code&gt;OutputStream&lt;/code&gt;.
                  This method preserves no state about the output stream, and does
                  not dispose of any blocks containing bytes written.  To dispose
                  blocks, use {@link #disposeBefore &lt;code&gt;disposeBefore()&lt;/code&gt;}.                
                <exception>
                    IndexOutOfBoundsException if any portion of
                      the requested data is not in the cache (including if &lt;code&gt;pos&lt;/code&gt;
                      is in a block already disposed), or if either &lt;code&gt;pos&lt;/code&gt; or
                      &lt;code&gt;len&lt;/code&gt; is &lt; 0.                    
                </exception>
            </javadoc>
            <method name="writeToStream" type="void" line="148">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="pos" type="long"/>
                    <param name="len" type="long"/>
                </params>
                <scope line="149"/>
                <scope line="152"/>
                <scope line="155"/>
                <declaration name="bufIndex" type="long" line="159"/>
                <scope line="160"/>
                <declaration name="offset" type="int" line="163"/>
                <declaration name="buf" type="byte[]" line="165"/>
                <scope line="166">
                    <scope line="167"/>
                    <declaration name="nbytes" type="int" line="171"/>
                </scope>
            </method>
            <javadoc line="178">
                Ensure that there is space to write a byte at the given position.                
            </javadoc>
            <method name="pad" type="void" line="181">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <declaration name="currIndex" type="long" line="182"/>
                <declaration name="lastIndex" type="long" line="183"/>
                <declaration name="numNewBuffers" type="long" line="184"/>
                <scope line="185">
                    <scope line="186"/>
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="194">
                Overwrites and/or appends the cache from a byte array.
                  The length of the cache will be extended as needed to hold
                  the incoming data.                
                <param>
                    b an array of bytes containing data to be written.                    
                </param>
                <param>
                    off the starting offset withing the data array.                    
                </param>
                <param>
                    len the number of bytes to be written.                    
                </param>
                <param>
                    pos the cache position at which to begin writing.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;off&lt;/code&gt;,
                      &lt;code&gt;len&lt;/code&gt;, or &lt;code&gt;pos&lt;/code&gt; are negative,
                      or if &lt;code&gt;off+len &gt; b.length&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="210">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="pos" type="long"/>
                </params>
                <comment line="215">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <comment line="221">
                    Ensure there is space for the incoming data                    
                </comment>
                <comment line="228">
                    Copy the data into the cache, block by block                    
                </comment>
                <comment line="238">
                    Always after the first time                    
                </comment>
                <scope line="211"/>
                <scope line="216"/>
                <declaration name="lastPos" type="long" line="221"/>
                <scope line="222"/>
                <declaration name="offset" type="int" line="228"/>
                <scope line="229">
                    <declaration name="buf" type="byte[]" line="230"/>
                    <declaration name="nbytes" type="int" line="231"/>
                </scope>
            </method>
            <javadoc line="241">
                Overwrites or appends a single byte to the cache.
                  The length of the cache will be extended as needed to hold
                  the incoming data.                
                <param>
                    b an &lt;code&gt;int&lt;/code&gt; whose 8 least significant bits
                      will be written.                    
                </param>
                <param>
                    pos the cache position at which to begin writing.                    
                </param>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;pos&lt;/code&gt; is negative.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="252">
                <params>
                    <param name="b" type="int"/>
                    <param name="pos" type="long"/>
                </params>
                <comment line="258">
                    Ensure there is space for the incoming data                    
                </comment>
                <comment line="264">
                    Insert the data.                    
                </comment>
                <scope line="253"/>
                <scope line="258"/>
                <declaration name="buf" type="byte[]" line="264"/>
                <declaration name="offset" type="int" line="265"/>
            </method>
            <javadoc line="269">
                Returns the total length of data that has been cached,
                  regardless of whether any early blocks have been disposed.
                  This value will only ever increase.                
            </javadoc>
            <method name="getLength" type="long" line="274"/>
            <javadoc line="278">
                Returns the single byte at the given position, as an
                  &lt;code&gt;int&lt;/code&gt;.  Returns -1 if this position has
                  not been cached or has been disposed.                
            </javadoc>
            <method name="read" type="int" line="283">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="284"/>
                <declaration name="buf" type="byte[]" line="288"/>
                <scope line="289"/>
            </method>
            <javadoc line="296">
                Copy &lt;code&gt;len&lt;/code&gt; bytes from the cache, starting
                  at cache position &lt;code&gt;pos&lt;/code&gt;, into the array
                  &lt;code&gt;b&lt;/code&gt; at offset &lt;code&gt;off&lt;/code&gt;.                
                <exception>
                    NullPointerException if b is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;off&lt;/code&gt;,
                      &lt;code&gt;len&lt;/code&gt; or &lt;code&gt;pos&lt;/code&gt; are negative or if
                      &lt;code&gt;off + len &gt; b.length&lt;/code&gt; or if any portion of the
                      requested data is not in the cache (including if
                      &lt;code&gt;pos&lt;/code&gt; is in a block that has already been disposed).                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="309">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="pos" type="long"/>
                </params>
                <comment line="314">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <comment line="332">
                    Always after the first time                    
                </comment>
                <scope line="310"/>
                <scope line="315"/>
                <scope line="318"/>
                <declaration name="index" type="long" line="322"/>
                <declaration name="offset" type="int" line="323"/>
                <scope line="324">
                    <declaration name="nbytes" type="int" line="325"/>
                    <declaration name="buf" type="byte[]" line="326"/>
                </scope>
            </method>
            <javadoc line="335">
                Free the blocks up to the position &lt;code&gt;pos&lt;/code&gt;.
                  The byte at &lt;code&gt;pos&lt;/code&gt; remains available.                
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;pos&lt;/code&gt;
                      is in a block that has already been disposed.                    
                </exception>
            </javadoc>
            <method name="disposeBefore" type="void" line="342">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <declaration name="index" type="long" line="343"/>
                <scope line="344"/>
                <declaration name="numBlocks" type="long" line="347"/>
                <scope line="348"/>
            </method>
            <javadoc line="354">
                Erase the entire cache contents and reset the length to 0.
                  The cache object may subsequently be reused as though it had just
                  been allocated.                
            </javadoc>
            <method name="reset" type="void" line="359"/>
        </class>
    </source>