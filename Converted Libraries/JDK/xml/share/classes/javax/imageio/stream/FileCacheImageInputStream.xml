<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="com.sun.imageio.stream.StreamCloser"/>
        <import package="com.sun.imageio.stream.StreamFinalizer"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <class name="FileCacheImageInputStream" line="37">
            <extends class="ImageInputStreamImpl"/>
            <javadoc line="37">
                An implementation of &lt;code&gt;ImageInputStream&lt;/code&gt; that gets its
                  input from a regular &lt;code&gt;InputStream&lt;/code&gt;.  A file is used to
                  cache previously read data.                
            </javadoc>
            <declaration name="stream" type="InputStream" line="45"/>
            <declaration name="cacheFile" type="File" line="47"/>
            <declaration name="cache" type="RandomAccessFile" line="49"/>
            <declaration name="BUFFER_LENGTH" type="int" line="51"/>
            <declaration name="buf" type="byte[]" line="53"/>
            <declaration name="length" type="long" line="55"/>
            <declaration name="foundEOF" type="boolean" line="57"/>
            <declaration name="disposerReferent" type="Object" line="59"/>
            <javadoc line="59">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="DisposerRecord" line="62"/>
            <javadoc line="62">
                The DisposerRecord that closes the underlying cache.                
            </javadoc>
            <declaration name="closeAction" type="StreamCloser.CloseAction" line="65"/>
            <javadoc line="65">
                The CloseAction that closes the stream in
                  the StreamCloser&apos;s shutdown hook                
            </javadoc>
            <javadoc line="69">
                Constructs a &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; that will read
                  from a given &lt;code&gt;InputStream&lt;/code&gt;.
                  &lt;p&gt; A temporary file is used as a cache.  If
                  &lt;code&gt;cacheDir&lt;/code&gt;is non-&lt;code&gt;null&lt;/code&gt; and is a
                  directory, the file will be created there.  If it is
                  &lt;code&gt;null&lt;/code&gt;, the system-dependent default temporary-file
                  directory will be used (see the documentation for
                  &lt;code&gt;File.createTempFile&lt;/code&gt; for details).                
                <param>
                    stream an &lt;code&gt;InputStream&lt;/code&gt; to read from.                    
                </param>
                <param>
                    cacheDir a &lt;code&gt;File&lt;/code&gt; indicating where the
                      cache file should be created, or &lt;code&gt;null&lt;/code&gt; to use the
                      system directory.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;stream&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;cacheDir&lt;/code&gt; is
                      non-&lt;code&gt;null&lt;/code&gt; but is not a directory.                    
                </exception>
                <exception>
                    IOException if a cache file cannot be created.                    
                </exception>
            </javadoc>
            <method name="FileCacheImageInputStream" type="constructor" line="92">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="cacheDir" type="File"/>
                </params>
                <scope line="93"/>
                <scope line="96"/>
                <scope line="108"/>
                <scope line="111"/>
            </method>
            <javadoc line="116">
                Ensures that at least &lt;code&gt;pos&lt;/code&gt; bytes are cached,
                  or the end of the source is reached.  The return value
                  is equal to the smaller of &lt;code&gt;pos&lt;/code&gt; and the
                  length of the source file.                
            </javadoc>
            <method name="readUntil" type="long" line="122">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <comment line="124">
                    We&apos;ve already got enough data cached                    
                </comment>
                <comment line="128">
                    pos &gt;= length but length isn&apos;t getting any bigger, so return it                    
                </comment>
                <comment line="136">
                    Copy a buffer&apos;s worth of data from the source to the cache
                     BUFFER_LENGTH will always fit into an int so this is safe                    
                </comment>
                <scope line="124"/>
                <scope line="128"/>
                <declaration name="len" type="long" line="132"/>
                <scope line="134">
                    <declaration name="nbytes" type="int" line="137"/>
                    <scope line="139"/>
                </scope>
            </method>
            <method name="read" type="int" line="152">
                <declaration name="next" type="long" line="155"/>
                <declaration name="pos" type="long" line="156"/>
                <scope line="157"/>
                <scope line="160"/>
            </method>
            <method name="read" type="int" line="165">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="172">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <comment line="186">
                    len will always fit into an int so this is safe                    
                </comment>
                <scope line="168"/>
                <scope line="172"/>
                <scope line="179"/>
                <declaration name="pos" type="long" line="183"/>
                <scope line="187"/>
                <scope line="192"/>
            </method>
            <javadoc line="197">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; caches data in order to allow
                  seeking backwards.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;.                    
                </return>
                <see>
                    #isCachedMemory                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCached" type="boolean" line="207"/>
            <javadoc line="211">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; maintains a file cache.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedMemory                    
                </see>
            </javadoc>
            <method name="isCachedFile" type="boolean" line="220"/>
            <javadoc line="224">
                Returns &lt;code&gt;false&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; does not maintain a main memory
                  cache.                
                <return>
                    &lt;code&gt;false&lt;/code&gt;.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="234"/>
            <javadoc line="238">
                Closes this &lt;code&gt;FileCacheImageInputStream&lt;/code&gt;, closing
                  and removing the cache file.  The source &lt;code&gt;InputStream&lt;/code&gt;
                  is not closed.                
                <exception>
                    IOException if an error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="245">
                <comment line="248">
                    this will close/delete the cache file                    
                </comment>
            </method>
            <javadoc line="254">
                {@inheritDoc}                
            </javadoc>
            <method name="finalize" type="void" line="257">
                <comment line="259">
                    Empty finalizer: for performance reasons we instead use the
                     Disposer mechanism for ensuring that the underlying
                     RandomAccessFile is closed/deleted prior to garbage collection                    
                </comment>
            </method>
            <class name="StreamDisposerRecord" line="263">
                <implements interface="DisposerRecord"/>
                <declaration name="cacheFile" type="File" line="264"/>
                <declaration name="cache" type="RandomAccessFile" line="265"/>
                <method name="StreamDisposerRecord" type="constructor" line="267">
                    <params>
                        <param name="cacheFile" type="File"/>
                        <param name="cache" type="RandomAccessFile"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="272">
                    <comment line="286">
                        Note: Explicit removal of the stream from the StreamCloser
                         queue is not mandatory in this case, as it will be removed
                         automatically by GC shortly after this method is called.                        
                    </comment>
                    <scope line="273">
                        <scope line="274"/>
                        <scope line="276"/>
                        <scope line="277"/>
                    </scope>
                    <scope line="281"/>
                </method>
            </class>
        </class>
    </source>