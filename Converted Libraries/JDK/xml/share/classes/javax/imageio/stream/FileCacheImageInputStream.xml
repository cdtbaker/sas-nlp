<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="com.sun.imageio.stream.StreamCloser"/>
        <import package="com.sun.imageio.stream.StreamFinalizer"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <class name="FileCacheImageInputStream" line="10">
            <extends class="ImageInputStreamImpl"/>
            <javadoc line="10">
                An implementation of &lt;code&gt;ImageInputStream&lt;/code&gt; that gets its
                  input from a regular &lt;code&gt;InputStream&lt;/code&gt;.  A file is used to
                  cache previously read data.                
            </javadoc>
            <declaration name="stream" type="InputStream" line="16"/>
            <declaration name="cacheFile" type="File" line="17"/>
            <declaration name="cache" type="RandomAccessFile" line="18"/>
            <declaration name="BUFFER_LENGTH" type="int" line="19"/>
            <declaration name="buf" type="byte[]" line="20"/>
            <declaration name="length" type="long" line="21"/>
            <declaration name="foundEOF" type="boolean" line="22"/>
            <declaration name="disposerReferent" type="Object" line="23"/>
            <javadoc line="23">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="DisposerRecord" line="27"/>
            <javadoc line="27">
                The DisposerRecord that closes the underlying cache.                
            </javadoc>
            <declaration name="closeAction" type="StreamCloser.CloseAction" line="31"/>
            <javadoc line="31">
                The CloseAction that closes the stream in
                  the StreamCloser&apos;s shutdown hook                
            </javadoc>
            <javadoc line="36">
                Constructs a &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; that will read
                  from a given &lt;code&gt;InputStream&lt;/code&gt;.
                  &lt;p&gt; A temporary file is used as a cache.  If
                  &lt;code&gt;cacheDir&lt;/code&gt;is non-&lt;code&gt;null&lt;/code&gt; and is a
                  directory, the file will be created there.  If it is
                  &lt;code&gt;null&lt;/code&gt;, the system-dependent default temporary-file
                  directory will be used (see the documentation for
                  &lt;code&gt;File.createTempFile&lt;/code&gt; for details).                
                <param>
                    stream an <code>InputStream</code> to read from.                    
                </param>
                <param>
                    cacheDir a <code>File</code> indicating where the
                      cache file should be created, or <code>null</code> to use the
                      system directory.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>stream</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>cacheDir</code> is
                      non-<code>null</code> but is not a directory.                    
                </exception>
                <exception>
                    IOException if a cache file cannot be created.                    
                </exception>
            </javadoc>
            <method name="FileCacheImageInputStream" type="constructor" line="55">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="cacheDir" type="File"/>
                </params>
                <scope line="56"/>
                <scope line="59"/>
                <scope line="68"/>
                <scope line="72"/>
            </method>
            <javadoc line="76">
                Ensures that at least &lt;code&gt;pos&lt;/code&gt; bytes are cached,
                  or the end of the source is reached.  The return value
                  is equal to the smaller of &lt;code&gt;pos&lt;/code&gt; and the
                  length of the source file.                
            </javadoc>
            <method name="readUntil" type="long" line="82">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="83"/>
                <scope line="86"/>
                <declaration name="len" type="long" line="89"/>
                <scope line="91">
                    <declaration name="nbytes" type="int" line="92"/>
                    <scope line="93"/>
                </scope>
            </method>
            <method name="read" type="int" line="103">
                <declaration name="next" type="long" line="106"/>
                <declaration name="pos" type="long" line="107"/>
                <scope line="108"/>
                <scope line="112"/>
            </method>
            <method name="read" type="int" line="116">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="125"/>
                <declaration name="pos" type="long" line="128"/>
                <scope line="130"/>
                <scope line="136"/>
            </method>
            <javadoc line="140">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; caches data in order to allow
                  seeking backwards.                
                <return>
                    <code>true</code>.                    
                </return>
                <see>
                    #isCachedMemory                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCached" type="boolean" line="148"/>
            <javadoc line="151">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; maintains a file cache.                
                <return>
                    <code>true</code>.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedMemory                    
                </see>
            </javadoc>
            <method name="isCachedFile" type="boolean" line="158"/>
            <javadoc line="161">
                Returns &lt;code&gt;false&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; does not maintain a main memory
                  cache.                
                <return>
                    <code>false</code>.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="169"/>
            <javadoc line="172">
                Closes this &lt;code&gt;FileCacheImageInputStream&lt;/code&gt;, closing
                  and removing the cache file.  The source &lt;code&gt;InputStream&lt;/code&gt;
                  is not closed.                
                <exception>
                    IOException if an error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="178"/>
            <javadoc line="186">
                {@inheritDoc}                
            </javadoc>
            <method name="finalize" type="void" line="189"/>
            <class name="StreamDisposerRecord" line="191">
                <implements interface="DisposerRecord"/>
                <declaration name="cacheFile" type="File" line="192"/>
                <declaration name="cache" type="RandomAccessFile" line="193"/>
                <method name="StreamDisposerRecord" type="constructor" line="194">
                    <params>
                        <param name="cacheFile" type="File"/>
                        <param name="cache" type="RandomAccessFile"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="198">
                    <scope line="199">
                        <scope line="200"/>
                        <scope line="203"/>
                        <scope line="205"/>
                    </scope>
                    <scope line="209"/>
                </method>
            </class>
        </class>
    </source>