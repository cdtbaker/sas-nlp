<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="com.sun.imageio.stream.CloseableDisposerRecord"/>
        <import package="com.sun.imageio.stream.StreamFinalizer"/>
        <import package="sun.java2d.Disposer"/>
        <class name="FileImageInputStream" line="9">
            <extends class="ImageInputStreamImpl"/>
            <javadoc line="9">
                An implementation of &lt;code&gt;ImageInputStream&lt;/code&gt; that gets its
                  input from a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;RandomAccessFile&lt;/code&gt;.
                  The file contents are assumed to be stable during the lifetime of
                  the object.                
            </javadoc>
            <declaration name="raf" type="RandomAccessFile" line="16"/>
            <declaration name="disposerReferent" type="Object" line="17"/>
            <javadoc line="17">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="CloseableDisposerRecord" line="21"/>
            <javadoc line="21">
                The DisposerRecord that closes the underlying RandomAccessFile.                
            </javadoc>
            <javadoc line="25">
                Constructs a &lt;code&gt;FileImageInputStream&lt;/code&gt; that will read
                  from a given &lt;code&gt;File&lt;/code&gt;.
                  &lt;p&gt; The file contents must not change between the time this
                  object is constructed and the time of the last call to a read
                  method.                
                <param>
                    f a <code>File</code> to read from.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>f</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    SecurityException if a security manager exists
                      and does not allow read access to the file.                    
                </exception>
                <exception>
                    FileNotFoundException if <code>f</code> is a
                      directory or cannot be opened for reading for any other reason.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="FileImageInputStream" type="constructor" line="40">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="43">
                Constructs a &lt;code&gt;FileImageInputStream&lt;/code&gt; that will read
                  from a given &lt;code&gt;RandomAccessFile&lt;/code&gt;.
                  &lt;p&gt; The file contents must not change between the time this
                  object is constructed and the time of the last call to a read
                  method.                
                <param>
                    raf a <code>RandomAccessFile</code> to read from.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>raf</code> is
                      <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="FileImageInputStream" type="constructor" line="53">
                <params>
                    <param name="raf" type="RandomAccessFile"/>
                </params>
                <scope line="54"/>
                <scope line="59"/>
                <scope line="63"/>
            </method>
            <method name="read" type="int" line="67">
                <declaration name="val" type="int" line="70"/>
                <scope line="71"/>
            </method>
            <method name="read" type="int" line="76">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="nbytes" type="int" line="79"/>
                <scope line="80"/>
            </method>
            <javadoc line="85">
                Returns the length of the underlying file, or &lt;code&gt;-1&lt;/code&gt;
                  if it is unknown.                
                <return>
                    the file length as a <code>long</code>, or
                      <code>-1</code>.                    
                </return>
            </javadoc>
            <method name="length" type="long" line="91">
                <scope line="92"/>
                <scope line="96"/>
            </method>
            <method name="seek" type="void" line="100">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="102"/>
            </method>
            <method name="close" type="void" line="109"/>
            <javadoc line="114">
                {@inheritDoc}                
            </javadoc>
            <method name="finalize" type="void" line="117"/>
        </class>
    </source>