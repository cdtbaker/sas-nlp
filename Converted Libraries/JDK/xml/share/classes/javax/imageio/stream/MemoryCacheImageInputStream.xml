<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="com.sun.imageio.stream.StreamFinalizer"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <class name="MemoryCacheImageInputStream" line="34">
            <extends class="ImageInputStreamImpl"/>
            <javadoc line="34">
                An implementation of &lt;code&gt;ImageInputStream&lt;/code&gt; that gets its
                  input from a regular &lt;code&gt;InputStream&lt;/code&gt;.  A memory buffer is
                  used to cache at least the data between the discard position and
                  the current read position.
                  &lt;p&gt; In general, it is preferable to use a
                  &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; when reading from a regular
                  &lt;code&gt;InputStream&lt;/code&gt;.  This class is provided for cases where
                  it is not possible to create a writable temporary file.                
            </javadoc>
            <declaration name="stream" type="InputStream" line="48"/>
            <declaration name="cache" type="MemoryCache" line="50"/>
            <declaration name="disposerReferent" type="Object" line="52"/>
            <javadoc line="52">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="DisposerRecord" line="55"/>
            <javadoc line="55">
                The DisposerRecord that resets the underlying MemoryCache.                
            </javadoc>
            <javadoc line="58">
                Constructs a &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt; that will read
                  from a given &lt;code&gt;InputStream&lt;/code&gt;.                
                <param>
                    stream an <code>InputStream</code> to read from.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>stream</code> is
                      <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="MemoryCacheImageInputStream" type="constructor" line="67">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <scope line="68"/>
                <scope line="74"/>
                <scope line="77"/>
            </method>
            <method name="read" type="int" line="82">
                <declaration name="pos" type="long" line="85"/>
                <scope line="86"/>
                <scope line="88"/>
            </method>
            <method name="read" type="int" line="93">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="113">
                    In case stream ended early                    
                </comment>
                <scope line="96"/>
                <scope line="99"/>
                <scope line="106"/>
                <declaration name="pos" type="long" line="110"/>
                <scope line="114"/>
                <scope line="118"/>
            </method>
            <method name="flushBefore" type="void" line="123">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <comment line="125">
                    this will call checkClosed() for us                    
                </comment>
            </method>
            <javadoc line="128">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; caches data in order to allow
                  seeking backwards.                
                <return>
                    <code>true</code>.                    
                </return>
                <see>
                    #isCachedMemory                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCached" type="boolean" line="138"/>
            <javadoc line="142">
                Returns &lt;code&gt;false&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; does not maintain a file cache.                
                <return>
                    <code>false</code>.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedMemory                    
                </see>
            </javadoc>
            <method name="isCachedFile" type="boolean" line="151"/>
            <javadoc line="155">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; maintains a main memory cache.                
                <return>
                    <code>true</code>.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="164"/>
            <javadoc line="168">
                Closes this &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt;, freeing
                  the cache.  The source &lt;code&gt;InputStream&lt;/code&gt; is not closed.                
            </javadoc>
            <method name="close" type="void" line="172">
                <comment line="175">
                    this resets the MemoryCache                    
                </comment>
            </method>
            <javadoc line="179">
                {@inheritDoc}                
            </javadoc>
            <method name="finalize" type="void" line="182">
                <comment line="184">
                    Empty finalizer: for performance reasons we instead use the
                     Disposer mechanism for ensuring that the underlying
                     MemoryCache is reset prior to garbage collection                    
                </comment>
            </method>
            <class name="StreamDisposerRecord" line="188">
                <implements interface="DisposerRecord"/>
                <declaration name="cache" type="MemoryCache" line="189"/>
                <method name="StreamDisposerRecord" type="constructor" line="191">
                    <params>
                        <param name="cache" type="MemoryCache"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="195">
                    <scope line="196"/>
                </method>
            </class>
        </class>
    </source>