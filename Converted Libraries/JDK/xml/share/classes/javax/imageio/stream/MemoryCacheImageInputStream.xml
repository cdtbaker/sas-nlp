<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="com.sun.imageio.stream.StreamFinalizer"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <class name="MemoryCacheImageInputStream" line="7">
            <extends class="ImageInputStreamImpl"/>
            <javadoc line="7">
                An implementation of &lt;code&gt;ImageInputStream&lt;/code&gt; that gets its
                  input from a regular &lt;code&gt;InputStream&lt;/code&gt;.  A memory buffer is
                  used to cache at least the data between the discard position and
                  the current read position.
                  &lt;p&gt; In general, it is preferable to use a
                  &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; when reading from a regular
                  &lt;code&gt;InputStream&lt;/code&gt;.  This class is provided for cases where
                  it is not possible to create a writable temporary file.                
            </javadoc>
            <declaration name="stream" type="InputStream" line="18"/>
            <declaration name="cache" type="MemoryCache" line="19"/>
            <declaration name="disposerReferent" type="Object" line="20"/>
            <javadoc line="20">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="DisposerRecord" line="24"/>
            <javadoc line="24">
                The DisposerRecord that resets the underlying MemoryCache.                
            </javadoc>
            <javadoc line="28">
                Constructs a &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt; that will read
                  from a given &lt;code&gt;InputStream&lt;/code&gt;.                
                <param>
                    stream an &lt;code&gt;InputStream&lt;/code&gt; to read from.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;stream&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="MemoryCacheImageInputStream" type="constructor" line="35">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <scope line="36"/>
                <scope line="41"/>
                <scope line="45"/>
            </method>
            <method name="read" type="int" line="49">
                <declaration name="pos" type="long" line="52"/>
                <scope line="53"/>
                <scope line="56"/>
            </method>
            <method name="read" type="int" line="60">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="62"/>
                <scope line="65"/>
                <scope line="69"/>
                <declaration name="pos" type="long" line="72"/>
                <scope line="74"/>
                <scope line="79"/>
            </method>
            <method name="flushBefore" type="void" line="83">
                <params>
                    <param name="pos" type="long"/>
                </params>
            </method>
            <javadoc line="87">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; caches data in order to allow
                  seeking backwards.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;.                    
                </return>
                <see>
                    #isCachedMemory                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCached" type="boolean" line="95"/>
            <javadoc line="98">
                Returns &lt;code&gt;false&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; does not maintain a file cache.                
                <return>
                    &lt;code&gt;false&lt;/code&gt;.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedMemory                    
                </see>
            </javadoc>
            <method name="isCachedFile" type="boolean" line="105"/>
            <javadoc line="108">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageInputStream&lt;/code&gt; maintains a main memory cache.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="115"/>
            <javadoc line="118">
                Closes this &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt;, freeing
                  the cache.  The source &lt;code&gt;InputStream&lt;/code&gt; is not closed.                
            </javadoc>
            <method name="close" type="void" line="122"/>
            <javadoc line="128">
                {@inheritDoc}                
            </javadoc>
            <method name="finalize" type="void" line="131"/>
            <class name="StreamDisposerRecord" line="133">
                <implements interface="DisposerRecord"/>
                <declaration name="cache" type="MemoryCache" line="134"/>
                <method name="StreamDisposerRecord" type="constructor" line="135">
                    <params>
                        <param name="cache" type="MemoryCache"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="138">
                    <scope line="139"/>
                </method>
            </class>
        </class>
    </source>