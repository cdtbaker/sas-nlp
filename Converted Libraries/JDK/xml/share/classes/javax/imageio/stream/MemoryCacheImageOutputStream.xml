<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <class name="MemoryCacheImageOutputStream" line="4">
            <extends class="ImageOutputStreamImpl"/>
            <javadoc line="4">
                An implementation of &lt;code&gt;ImageOutputStream&lt;/code&gt; that writes its
                  output to a regular &lt;code&gt;OutputStream&lt;/code&gt;.  A memory buffer is
                  used to cache at least the data between the discard position and
                  the current write position.  The only constructor takes an
                  &lt;code&gt;OutputStream&lt;/code&gt;, so this class may not be used for
                  read/modify/write operations.  Reading can occur only on parts of
                  the stream that have already been written to the cache and not
                  yet flushed.                
            </javadoc>
            <declaration name="stream" type="OutputStream" line="15"/>
            <declaration name="cache" type="MemoryCache" line="16"/>
            <javadoc line="17">
                Constructs a &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt; that will write
                  to a given &lt;code&gt;OutputStream&lt;/code&gt;.                
                <param>
                    stream an &lt;code&gt;OutputStream&lt;/code&gt; to write to.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;stream&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="MemoryCacheImageOutputStream" type="constructor" line="24">
                <params>
                    <param name="stream" type="OutputStream"/>
                </params>
                <scope line="25"/>
            </method>
            <method name="read" type="int" line="30">
                <declaration name="val" type="int" line="33"/>
                <scope line="34"/>
            </method>
            <method name="read" type="int" line="39">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="41"/>
                <scope line="44"/>
                <scope line="48"/>
                <declaration name="bytesLeftInCache" type="long" line="51"/>
                <scope line="52"/>
            </method>
            <method name="write" type="void" line="60">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="write" type="void" line="65">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="length" type="long" line="70">
                <scope line="71"/>
                <scope line="75"/>
            </method>
            <javadoc line="79">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; caches data in order to allow
                  seeking backwards.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;.                    
                </return>
                <see>
                    #isCachedMemory                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCached" type="boolean" line="87"/>
            <javadoc line="90">
                Returns &lt;code&gt;false&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; does not maintain a file cache.                
                <return>
                    &lt;code&gt;false&lt;/code&gt;.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedMemory                    
                </see>
            </javadoc>
            <method name="isCachedFile" type="boolean" line="97"/>
            <javadoc line="100">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; maintains a main memory cache.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="107"/>
            <javadoc line="110">
                Closes this &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt;.  All
                  pending data is flushed to the output, and the cache
                  is released.  The destination &lt;code&gt;OutputStream&lt;/code&gt;
                  is not closed.                
            </javadoc>
            <method name="close" type="void" line="116">
                <declaration name="length" type="long" line="117"/>
            </method>
            <method name="flushBefore" type="void" line="125">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <declaration name="oFlushedPos" type="long" line="126"/>
                <declaration name="flushBytes" type="long" line="128"/>
            </method>
        </class>
    </source>