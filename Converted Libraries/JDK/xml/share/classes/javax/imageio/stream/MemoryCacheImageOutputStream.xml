<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <class name="MemoryCacheImageOutputStream" line="31">
            <extends class="ImageOutputStreamImpl"/>
            <javadoc line="31">
                An implementation of &lt;code&gt;ImageOutputStream&lt;/code&gt; that writes its
                  output to a regular &lt;code&gt;OutputStream&lt;/code&gt;.  A memory buffer is
                  used to cache at least the data between the discard position and
                  the current write position.  The only constructor takes an
                  &lt;code&gt;OutputStream&lt;/code&gt;, so this class may not be used for
                  read/modify/write operations.  Reading can occur only on parts of
                  the stream that have already been written to the cache and not
                  yet flushed.                
            </javadoc>
            <declaration name="stream" type="OutputStream" line="44"/>
            <declaration name="cache" type="MemoryCache" line="46"/>
            <javadoc line="48">
                Constructs a &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt; that will write
                  to a given &lt;code&gt;OutputStream&lt;/code&gt;.                
                <param>
                    stream an <code>OutputStream</code> to write to.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>stream</code> is
                      <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="MemoryCacheImageOutputStream" type="constructor" line="57">
                <params>
                    <param name="stream" type="OutputStream"/>
                </params>
                <scope line="58"/>
            </method>
            <method name="read" type="int" line="64">
                <declaration name="val" type="int" line="69"/>
                <scope line="70"/>
            </method>
            <method name="read" type="int" line="76">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="83">
                    Fix 4467608: read([B,I,I) works incorrectly if len&lt;=0                    
                </comment>
                <comment line="95">
                    check if we&apos;re already at/past EOF i.e.
                     no more bytes left to read from cache                    
                </comment>
                <comment line="99">
                    EOF                    
                </comment>
                <comment line="102">
                    guaranteed by now that bytesLeftInCache &gt; 0 &amp;&amp; len &gt; 0
                     and so the rest of the error checking is done by cache.read()
                     NOTE that alot of error checking is duplicated                    
                </comment>
                <scope line="79"/>
                <scope line="83"/>
                <scope line="90"/>
                <declaration name="bytesLeftInCache" type="long" line="96"/>
                <scope line="97"/>
            </method>
            <method name="write" type="void" line="110">
                <params>
                    <param name="b" type="int"/>
                </params>
                <comment line="112">
                    this will call checkClosed() for us                    
                </comment>
            </method>
            <method name="write" type="void" line="116">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="118">
                    this will call checkClosed() for us                    
                </comment>
            </method>
            <method name="length" type="long" line="122">
                <scope line="123"/>
                <scope line="126"/>
            </method>
            <javadoc line="131">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; caches data in order to allow
                  seeking backwards.                
                <return>
                    <code>true</code>.                    
                </return>
                <see>
                    #isCachedMemory                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCached" type="boolean" line="141"/>
            <javadoc line="145">
                Returns &lt;code&gt;false&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; does not maintain a file cache.                
                <return>
                    <code>false</code>.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedMemory                    
                </see>
            </javadoc>
            <method name="isCachedFile" type="boolean" line="154"/>
            <javadoc line="158">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; maintains a main memory cache.                
                <return>
                    <code>true</code>.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="167"/>
            <javadoc line="171">
                Closes this &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt;.  All
                  pending data is flushed to the output, and the cache
                  is released.  The destination &lt;code&gt;OutputStream&lt;/code&gt;
                  is not closed.                
            </javadoc>
            <method name="close" type="void" line="177">
                <declaration name="length" type="long" line="178"/>
            </method>
            <method name="flushBefore" type="void" line="187">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <comment line="190">
                    this will call checkClosed() for us                    
                </comment>
                <declaration name="oFlushedPos" type="long" line="188"/>
                <declaration name="flushBytes" type="long" line="191"/>
            </method>
        </class>
    </source>