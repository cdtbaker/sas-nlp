<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.DataInputStream"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteOrder"/>
        <import package="java.util.Stack"/>
        <import package="javax.imageio.IIOException"/>
        <class name="ImageInputStreamImpl" line="35">
            <comment line="53">
                Length of the buffer used for readFully(type[], int, int)                
            </comment>
            <implements interface="ImageInputStream"/>
            <javadoc line="35">
                An abstract class implementing the &lt;code&gt;ImageInputStream&lt;/code&gt; interface.
                  This class is designed to reduce the number of methods that must
                  be implemented by subclasses.
                  &lt;p&gt; In particular, this class handles most or all of the details of
                  byte order interpretation, buffering, mark/reset, discarding,
                  closing, and disposing.                
            </javadoc>
            <declaration name="markByteStack" type="Stack" line="46"/>
            <declaration name="markBitStack" type="Stack" line="48"/>
            <declaration name="isClosed" type="boolean" line="50"/>
            <declaration name="BYTE_BUF_LENGTH" type="int" line="53"/>
            <declaration name="byteBuf" type="byte[]" line="55"/>
            <javadoc line="55">
                Byte buffer used for readFully(type[], int, int).  Note that this
                  array is also used for bulk reads in readShort(), readInt(), etc, so
                  it should be large enough to hold a primitive value (i.e. &gt;= 8 bytes).
                  Also note that this array is package protected, so that it can be
                  used by ImageOutputStreamImpl in a similar manner.                
            </javadoc>
            <declaration name="byteOrder" type="ByteOrder" line="64"/>
            <javadoc line="64">
                The byte order of the stream as an instance of the enumeration
                  class &lt;code&gt;java.nio.ByteOrder&lt;/code&gt;, where
                  &lt;code&gt;ByteOrder.BIG_ENDIAN&lt;/code&gt; indicates network byte order
                  and &lt;code&gt;ByteOrder.LITTLE_ENDIAN&lt;/code&gt; indicates the reverse
                  order.  By default, the value is
                  &lt;code&gt;ByteOrder.BIG_ENDIAN&lt;/code&gt;.                
            </javadoc>
            <declaration name="streamPos" type="long" line="74"/>
            <javadoc line="74">
                The current read position within the stream.  Subclasses are
                  responsible for keeping this value current from any method they
                  override that alters the read position.                
            </javadoc>
            <declaration name="bitOffset" type="int" line="81"/>
            <javadoc line="81">
                The current bit offset within the stream.  Subclasses are
                  responsible for keeping this value current from any method they
                  override that alters the bit offset.                
            </javadoc>
            <declaration name="flushedPos" type="long" line="88"/>
            <javadoc line="88">
                The position prior to which data may be discarded.  Seeking
                  to a smaller position is not allowed.  &lt;code&gt;flushedPos&lt;/code&gt;
                  will always be &gt;= 0.                
            </javadoc>
            <javadoc line="95">
                Constructs an &lt;code&gt;ImageInputStreamImpl&lt;/code&gt;.                
            </javadoc>
            <method name="ImageInputStreamImpl" type="constructor" line="98"/>
            <javadoc line="101">
                Throws an &lt;code&gt;IOException&lt;/code&gt; if the stream has been closed.
                  Subclasses may call this method from any of their methods that
                  require the stream not to be closed.                
                <exception>
                    IOException if the stream is closed.                    
                </exception>
            </javadoc>
            <method name="checkClosed" type="void" line="108">
                <scope line="109"/>
            </method>
            <method name="setByteOrder" type="void" line="114">
                <params>
                    <param name="byteOrder" type="ByteOrder"/>
                </params>
            </method>
            <method name="getByteOrder" type="ByteOrder" line="118"/>
            <method name="read" type="int" line="122"/>
            <javadoc line="122">
                Reads a single byte from the stream and returns it as an
                  &lt;code&gt;int&lt;/code&gt; between 0 and 255.  If EOF is reached,
                  &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt; Subclasses must provide an implementation for this method.
                  The subclass implementation should update the stream position
                  before exiting.
                  &lt;p&gt; The bit offset within the stream must be reset to zero before
                  the read occurs.                
                <return>
                    the value of the next byte in the stream, or &lt;code&gt;-1&lt;/code&gt;
                      if EOF is reached.                    
                </return>
                <exception>
                    IOException if the stream has been closed.                    
                </exception>
            </javadoc>
            <javadoc line="141">
                A convenience method that calls &lt;code&gt;read(b, 0, b.length)&lt;/code&gt;.
                  &lt;p&gt; The bit offset within the stream is reset to zero before
                  the read occurs.                
                <return>
                    the number of bytes actually read, or &lt;code&gt;-1&lt;/code&gt;
                      to indicate EOF.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;b&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="154">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <method name="read" type="int" line="158"/>
            <javadoc line="158">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes from the stream, and stores
                  them into &lt;code&gt;b&lt;/code&gt; starting at index &lt;code&gt;off&lt;/code&gt;.
                  If no bytes can be read because the end of the stream has been
                  reached, &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt; The bit offset within the stream must be reset to zero before
                  the read occurs.
                  &lt;p&gt; Subclasses must provide an implementation for this method.
                  The subclass implementation should update the stream position
                  before exiting.                
                <param>
                    b an array of bytes to be written to.                    
                </param>
                <param>
                    off the starting position within &lt;code&gt;b&lt;/code&gt; to write to.                    
                </param>
                <param>
                    len the maximum number of bytes to read.                    
                </param>
                <return>
                    the number of bytes actually read, or &lt;code&gt;-1&lt;/code&gt;
                      to indicate EOF.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;off&lt;/code&gt; is
                      negative, &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;off +
                      len&lt;/code&gt; is greater than &lt;code&gt;b.length&lt;/code&gt;.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;b&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readBytes" type="void" line="187">
                <params>
                    <param name="buf" type="IIOByteBuffer"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="188"/>
                <scope line="191"/>
                <declaration name="data" type="byte[]" line="195"/>
            </method>
            <method name="readBoolean" type="boolean" line="203">
                <declaration name="ch" type="int" line="204"/>
                <scope line="205"/>
            </method>
            <method name="readByte" type="byte" line="211">
                <declaration name="ch" type="int" line="212"/>
                <scope line="213"/>
            </method>
            <method name="readUnsignedByte" type="int" line="219">
                <declaration name="ch" type="int" line="220"/>
                <scope line="221"/>
            </method>
            <method name="readShort" type="short" line="227">
                <scope line="228"/>
                <scope line="232"/>
                <scope line="235"/>
            </method>
            <method name="readUnsignedShort" type="int" line="241"/>
            <method name="readChar" type="char" line="245"/>
            <method name="readInt" type="int" line="249">
                <scope line="250"/>
                <scope line="254"/>
                <scope line="258"/>
            </method>
            <method name="readUnsignedInt" type="long" line="265"/>
            <method name="readLong" type="long" line="269">
                <comment line="271">
                    REMIND: Once 6277756 is fixed, we should do a bulk read of all 8
                     bytes here as we do in readShort() and readInt() for even better
                     performance (see 6347575 for details).                    
                </comment>
                <declaration name="i1" type="int" line="273"/>
                <declaration name="i2" type="int" line="274"/>
                <scope line="276"/>
                <scope line="278"/>
            </method>
            <method name="readFloat" type="float" line="283"/>
            <method name="readDouble" type="double" line="287"/>
            <method name="readLine" type="String" line="291">
                <declaration name="input" type="StringBuffer" line="292"/>
                <declaration name="c" type="int" line="293"/>
                <declaration name="eol" type="boolean" line="294"/>
                <scope line="296">
                    <declaration name="cur" type="long" line="304"/>
                    <scope line="305"/>
                </scope>
                <scope line="315"/>
            </method>
            <method name="readUTF" type="String" line="321">
                <comment line="325">
                    Fix 4494369: method ImageInputStreamImpl.readUTF()
                     does not work as specified (it should always assume
                     network byte order).                    
                </comment>
                <comment line="335">
                    Restore the old byte order even if an exception occurs                    
                </comment>
                <declaration name="oldByteOrder" type="ByteOrder" line="327"/>
                <declaration name="ret" type="String" line="330"/>
                <scope line="331"/>
                <scope line="333"/>
            </method>
            <method name="readFully" type="void" line="343">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="345">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <scope line="345"/>
                <scope line="350">
                    <declaration name="nbytes" type="int" line="351"/>
                    <scope line="352"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="360">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <method name="readFully" type="void" line="364">
                <params>
                    <param name="s" type="short[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="366">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <scope line="366"/>
                <scope line="371">
                    <declaration name="nelts" type="int" line="372"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="380">
                <params>
                    <param name="c" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="382">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <scope line="382"/>
                <scope line="387">
                    <declaration name="nelts" type="int" line="388"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="396">
                <params>
                    <param name="i" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="398">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <scope line="398"/>
                <scope line="403">
                    <declaration name="nelts" type="int" line="404"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="412">
                <params>
                    <param name="l" type="long[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="414">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <scope line="414"/>
                <scope line="419">
                    <declaration name="nelts" type="int" line="420"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="428">
                <params>
                    <param name="f" type="float[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="430">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <scope line="430"/>
                <scope line="435">
                    <declaration name="nelts" type="int" line="436"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="444">
                <params>
                    <param name="d" type="double[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="446">
                    Fix 4430357 - if off + len &lt; 0, overflow occurred                    
                </comment>
                <scope line="446"/>
                <scope line="451">
                    <declaration name="nelts" type="int" line="452"/>
                </scope>
            </method>
            <method name="toShorts" type="void" line="460">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="s" type="short[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="461"/>
                <scope line="462">
                    <scope line="463">
                        <declaration name="b0" type="int" line="464"/>
                        <declaration name="b1" type="int" line="465"/>
                    </scope>
                </scope>
                <scope line="469">
                    <scope line="470">
                        <declaration name="b0" type="int" line="471"/>
                        <declaration name="b1" type="int" line="472"/>
                    </scope>
                </scope>
            </method>
            <method name="toChars" type="void" line="479">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="c" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="480"/>
                <scope line="481">
                    <scope line="482">
                        <declaration name="b0" type="int" line="483"/>
                        <declaration name="b1" type="int" line="484"/>
                    </scope>
                </scope>
                <scope line="488">
                    <scope line="489">
                        <declaration name="b0" type="int" line="490"/>
                        <declaration name="b1" type="int" line="491"/>
                    </scope>
                </scope>
            </method>
            <method name="toInts" type="void" line="498">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="i" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="499"/>
                <scope line="500">
                    <scope line="501">
                        <declaration name="b0" type="int" line="502"/>
                        <declaration name="b1" type="int" line="503"/>
                        <declaration name="b2" type="int" line="504"/>
                        <declaration name="b3" type="int" line="505"/>
                    </scope>
                </scope>
                <scope line="509">
                    <scope line="510">
                        <declaration name="b0" type="int" line="511"/>
                        <declaration name="b1" type="int" line="512"/>
                        <declaration name="b2" type="int" line="513"/>
                        <declaration name="b3" type="int" line="514"/>
                    </scope>
                </scope>
            </method>
            <method name="toLongs" type="void" line="521">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="l" type="long[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="522"/>
                <scope line="523">
                    <scope line="524">
                        <declaration name="b0" type="int" line="525"/>
                        <declaration name="b1" type="int" line="526"/>
                        <declaration name="b2" type="int" line="527"/>
                        <declaration name="b3" type="int" line="528"/>
                        <declaration name="b4" type="int" line="529"/>
                        <declaration name="b5" type="int" line="530"/>
                        <declaration name="b6" type="int" line="531"/>
                        <declaration name="b7" type="int" line="532"/>
                        <declaration name="i0" type="int" line="534"/>
                        <declaration name="i1" type="int" line="535"/>
                    </scope>
                </scope>
                <scope line="540">
                    <scope line="541">
                        <declaration name="b0" type="int" line="542"/>
                        <declaration name="b1" type="int" line="543"/>
                        <declaration name="b2" type="int" line="544"/>
                        <declaration name="b3" type="int" line="545"/>
                        <declaration name="b4" type="int" line="546"/>
                        <declaration name="b5" type="int" line="547"/>
                        <declaration name="b6" type="int" line="548"/>
                        <declaration name="b7" type="int" line="549"/>
                        <declaration name="i0" type="int" line="551"/>
                        <declaration name="i1" type="int" line="552"/>
                    </scope>
                </scope>
            </method>
            <method name="toFloats" type="void" line="560">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="f" type="float[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="561"/>
                <scope line="562">
                    <scope line="563">
                        <declaration name="b0" type="int" line="564"/>
                        <declaration name="b1" type="int" line="565"/>
                        <declaration name="b2" type="int" line="566"/>
                        <declaration name="b3" type="int" line="567"/>
                        <declaration name="i" type="int" line="568"/>
                    </scope>
                </scope>
                <scope line="572">
                    <scope line="573">
                        <declaration name="b0" type="int" line="574"/>
                        <declaration name="b1" type="int" line="575"/>
                        <declaration name="b2" type="int" line="576"/>
                        <declaration name="b3" type="int" line="577"/>
                        <declaration name="i" type="int" line="578"/>
                    </scope>
                </scope>
            </method>
            <method name="toDoubles" type="void" line="585">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="d" type="double[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="586"/>
                <scope line="587">
                    <scope line="588">
                        <declaration name="b0" type="int" line="589"/>
                        <declaration name="b1" type="int" line="590"/>
                        <declaration name="b2" type="int" line="591"/>
                        <declaration name="b3" type="int" line="592"/>
                        <declaration name="b4" type="int" line="593"/>
                        <declaration name="b5" type="int" line="594"/>
                        <declaration name="b6" type="int" line="595"/>
                        <declaration name="b7" type="int" line="596"/>
                        <declaration name="i0" type="int" line="598"/>
                        <declaration name="i1" type="int" line="599"/>
                        <declaration name="l" type="long" line="600"/>
                    </scope>
                </scope>
                <scope line="605">
                    <scope line="606">
                        <declaration name="b0" type="int" line="607"/>
                        <declaration name="b1" type="int" line="608"/>
                        <declaration name="b2" type="int" line="609"/>
                        <declaration name="b3" type="int" line="610"/>
                        <declaration name="b4" type="int" line="611"/>
                        <declaration name="b5" type="int" line="612"/>
                        <declaration name="b6" type="int" line="613"/>
                        <declaration name="b7" type="int" line="614"/>
                        <declaration name="i0" type="int" line="616"/>
                        <declaration name="i1" type="int" line="617"/>
                        <declaration name="l" type="long" line="618"/>
                    </scope>
                </scope>
            </method>
            <method name="getStreamPosition" type="long" line="626"/>
            <method name="getBitOffset" type="int" line="631"/>
            <method name="setBitOffset" type="void" line="636">
                <params>
                    <param name="bitOffset" type="int"/>
                </params>
                <scope line="638"/>
            </method>
            <method name="readBit" type="int" line="644">
                <comment line="648">
                    Compute final bit offset before we call read() and seek()                    
                </comment>
                <comment line="657">
                    Move byte position back if in the middle of a byte                    
                </comment>
                <comment line="659">
                    Shift the bit to be read to the rightmost position                    
                </comment>
                <declaration name="newBitOffset" type="int" line="648"/>
                <declaration name="val" type="int" line="650"/>
                <scope line="651"/>
                <scope line="655"/>
            </method>
            <method name="readBits" type="long" line="666">
                <params>
                    <param name="numBits" type="int"/>
                </params>
                <comment line="677">
                    Have to read additional bits on the left equal to the bit offset                    
                </comment>
                <comment line="680">
                    Compute final bit offset before we call read() and seek()                    
                </comment>
                <comment line="683">
                    Read a byte at a time, accumulate                    
                </comment>
                <comment line="696">
                    Move byte position back if in the middle of a byte                    
                </comment>
                <comment line="702">
                    Shift away unwanted bits on the right.                    
                </comment>
                <comment line="703">
                    Negative of bitsToRead == extra bits read                    
                </comment>
                <comment line="705">
                    Mask out unwanted bits on the left                    
                </comment>
                <scope line="669"/>
                <scope line="672"/>
                <declaration name="bitsToRead" type="int" line="677"/>
                <declaration name="newBitOffset" type="int" line="680"/>
                <declaration name="accum" type="long" line="683"/>
                <scope line="684">
                    <declaration name="val" type="int" line="685"/>
                    <scope line="686"/>
                </scope>
                <scope line="696"/>
            </method>
            <javadoc line="710">
                Returns &lt;code&gt;-1L&lt;/code&gt; to indicate that the stream has unknown
                  length.  Subclasses must override this method to provide actual
                  length information.                
                <return>
                    -1L to indicate unknown length.                    
                </return>
            </javadoc>
            <method name="length" type="long" line="717"/>
            <javadoc line="721">
                Advances the current stream position by calling
                  &lt;code&gt;seek(getStreamPosition() + n)&lt;/code&gt;.
                  &lt;p&gt; The bit offset is reset to zero.                
                <param>
                    n the number of bytes to seek forward.                    
                </param>
                <return>
                    an &lt;code&gt;int&lt;/code&gt; representing the number of bytes
                      skipped.                    
                </return>
                <exception>
                    IOException if &lt;code&gt;getStreamPosition&lt;/code&gt;
                      throws an &lt;code&gt;IOException&lt;/code&gt; when computing either
                      the starting or ending position.                    
                </exception>
            </javadoc>
            <method name="skipBytes" type="int" line="736">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="pos" type="long" line="737"/>
            </method>
            <javadoc line="742">
                Advances the current stream position by calling
                  &lt;code&gt;seek(getStreamPosition() + n)&lt;/code&gt;.
                  &lt;p&gt; The bit offset is reset to zero.                
                <param>
                    n the number of bytes to seek forward.                    
                </param>
                <return>
                    a &lt;code&gt;long&lt;/code&gt; representing the number of bytes
                      skipped.                    
                </return>
                <exception>
                    IOException if &lt;code&gt;getStreamPosition&lt;/code&gt;
                      throws an &lt;code&gt;IOException&lt;/code&gt; when computing either
                      the starting or ending position.                    
                </exception>
            </javadoc>
            <method name="skipBytes" type="long" line="757">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="pos" type="long" line="758"/>
            </method>
            <method name="seek" type="void" line="763">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <comment line="767">
                    This test also covers pos &lt; 0                    
                </comment>
                <scope line="767"/>
            </method>
            <javadoc line="775">
                Pushes the current stream position onto a stack of marked
                  positions.                
            </javadoc>
            <method name="mark" type="void" line="779">
                <scope line="780"/>
                <scope line="783"/>
            </method>
            <javadoc line="787">
                Resets the current stream byte and bit positions from the stack
                  of marked positions.
                  &lt;p&gt; An &lt;code&gt;IOException&lt;/code&gt; will be thrown if the previous
                  marked position lies in the discarded portion of the stream.                
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="796">
                <scope line="797"/>
                <declaration name="pos" type="long" line="801"/>
                <scope line="802"/>
                <declaration name="offset" type="int" line="808"/>
            </method>
            <method name="flushBefore" type="void" line="812">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <comment line="821">
                    Invariant: flushedPos &gt;= 0                    
                </comment>
                <scope line="814"/>
                <scope line="817"/>
            </method>
            <method name="flush" type="void" line="824"/>
            <method name="getFlushedPosition" type="long" line="828"/>
            <javadoc line="832">
                Default implementation returns false.  Subclasses should
                  override this if they cache data.                
            </javadoc>
            <method name="isCached" type="boolean" line="836"/>
            <javadoc line="840">
                Default implementation returns false.  Subclasses should
                  override this if they cache data in main memory.                
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="844"/>
            <javadoc line="848">
                Default implementation returns false.  Subclasses should
                  override this if they cache data in a temporary file.                
            </javadoc>
            <method name="isCachedFile" type="boolean" line="852"/>
            <method name="close" type="void" line="856"/>
            <javadoc line="862">
                Finalizes this object prior to garbage collection.  The
                  &lt;code&gt;close&lt;/code&gt; method is called to close any open input
                  source.  This method should not be called from application
                  code.                
                <exception>
                    Throwable if an error occurs during superclass
                      finalization.                    
                </exception>
            </javadoc>
            <method name="finalize" type="void" line="871">
                <scope line="872">
                    <scope line="873"/>
                    <scope line="875"/>
                </scope>
            </method>
        </class>
    </source>