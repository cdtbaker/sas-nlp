<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.DataInputStream"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteOrder"/>
        <import package="java.util.Stack"/>
        <import package="javax.imageio.IIOException"/>
        <class name="ImageInputStreamImpl" line="8">
            <implements interface="ImageInputStream"/>
            <javadoc line="8">
                An abstract class implementing the &lt;code&gt;ImageInputStream&lt;/code&gt; interface.
                  This class is designed to reduce the number of methods that must
                  be implemented by subclasses.
                  &lt;p&gt; In particular, this class handles most or all of the details of
                  byte order interpretation, buffering, mark/reset, discarding,
                  closing, and disposing.                
            </javadoc>
            <declaration name="markByteStack" type="Stack" line="17"/>
            <declaration name="markBitStack" type="Stack" line="18"/>
            <declaration name="isClosed" type="boolean" line="19"/>
            <declaration name="BYTE_BUF_LENGTH" type="int" line="20"/>
            <declaration name="byteBuf" type="byte[]" line="21"/>
            <javadoc line="21">
                Byte buffer used for readFully(type[], int, int).  Note that this
                  array is also used for bulk reads in readShort(), readInt(), etc, so
                  it should be large enough to hold a primitive value (i.e. &gt;= 8 bytes).
                  Also note that this array is package protected, so that it can be
                  used by ImageOutputStreamImpl in a similar manner.                
            </javadoc>
            <declaration name="byteOrder" type="ByteOrder" line="29"/>
            <javadoc line="29">
                The byte order of the stream as an instance of the enumeration
                  class &lt;code&gt;java.nio.ByteOrder&lt;/code&gt;, where
                  &lt;code&gt;ByteOrder.BIG_ENDIAN&lt;/code&gt; indicates network byte order
                  and &lt;code&gt;ByteOrder.LITTLE_ENDIAN&lt;/code&gt; indicates the reverse
                  order.  By default, the value is
                  &lt;code&gt;ByteOrder.BIG_ENDIAN&lt;/code&gt;.                
            </javadoc>
            <declaration name="streamPos" type="long" line="38"/>
            <javadoc line="38">
                The current read position within the stream.  Subclasses are
                  responsible for keeping this value current from any method they
                  override that alters the read position.                
            </javadoc>
            <declaration name="bitOffset" type="int" line="44"/>
            <javadoc line="44">
                The current bit offset within the stream.  Subclasses are
                  responsible for keeping this value current from any method they
                  override that alters the bit offset.                
            </javadoc>
            <declaration name="flushedPos" type="long" line="50"/>
            <javadoc line="50">
                The position prior to which data may be discarded.  Seeking
                  to a smaller position is not allowed.  &lt;code&gt;flushedPos&lt;/code&gt;
                  will always be &gt;= 0.                
            </javadoc>
            <javadoc line="56">
                Constructs an &lt;code&gt;ImageInputStreamImpl&lt;/code&gt;.                
            </javadoc>
            <method name="ImageInputStreamImpl" type="constructor" line="59"/>
            <javadoc line="61">
                Throws an &lt;code&gt;IOException&lt;/code&gt; if the stream has been closed.
                  Subclasses may call this method from any of their methods that
                  require the stream not to be closed.                
                <exception>
                    IOException if the stream is closed.                    
                </exception>
            </javadoc>
            <method name="checkClosed" type="void" line="67">
                <scope line="68"/>
            </method>
            <method name="setByteOrder" type="void" line="72">
                <params>
                    <param name="byteOrder" type="ByteOrder"/>
                </params>
            </method>
            <method name="getByteOrder" type="ByteOrder" line="75"/>
            <method name="read" type="int" line="78"/>
            <javadoc line="78">
                Reads a single byte from the stream and returns it as an
                  &lt;code&gt;int&lt;/code&gt; between 0 and 255.  If EOF is reached,
                  &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt; Subclasses must provide an implementation for this method.
                  The subclass implementation should update the stream position
                  before exiting.
                  &lt;p&gt; The bit offset within the stream must be reset to zero before
                  the read occurs.                
                <return>
                    the value of the next byte in the stream, or <code>-1</code>
                      if EOF is reached.                    
                </return>
                <exception>
                    IOException if the stream has been closed.                    
                </exception>
            </javadoc>
            <javadoc line="92">
                A convenience method that calls &lt;code&gt;read(b, 0, b.length)&lt;/code&gt;.
                  &lt;p&gt; The bit offset within the stream is reset to zero before
                  the read occurs.                
                <return>
                    the number of bytes actually read, or <code>-1</code>
                      to indicate EOF.                    
                </return>
                <exception>
                    NullPointerException if <code>b</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="102">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <method name="read" type="int" line="105"/>
            <javadoc line="105">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes from the stream, and stores
                  them into &lt;code&gt;b&lt;/code&gt; starting at index &lt;code&gt;off&lt;/code&gt;.
                  If no bytes can be read because the end of the stream has been
                  reached, &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt; The bit offset within the stream must be reset to zero before
                  the read occurs.
                  &lt;p&gt; Subclasses must provide an implementation for this method.
                  The subclass implementation should update the stream position
                  before exiting.                
                <param>
                    b an array of bytes to be written to.                    
                </param>
                <param>
                    off the starting position within <code>b</code> to write to.                    
                </param>
                <param>
                    len the maximum number of bytes to read.                    
                </param>
                <return>
                    the number of bytes actually read, or <code>-1</code>
                      to indicate EOF.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if <code>off</code> is
                      negative, <code>len</code> is negative, or <code>off +
                      len</code> is greater than <code>b.length</code>.                    
                </exception>
                <exception>
                    NullPointerException if <code>b</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readBytes" type="void" line="128">
                <params>
                    <param name="buf" type="IIOByteBuffer"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="129"/>
                <scope line="132"/>
                <declaration name="data" type="byte[]" line="135"/>
            </method>
            <method name="readBoolean" type="boolean" line="141">
                <declaration name="ch" type="int" line="142"/>
                <scope line="143"/>
            </method>
            <method name="readByte" type="byte" line="148">
                <declaration name="ch" type="int" line="149"/>
                <scope line="150"/>
            </method>
            <method name="readUnsignedByte" type="int" line="155">
                <declaration name="ch" type="int" line="156"/>
                <scope line="157"/>
            </method>
            <method name="readShort" type="short" line="162">
                <scope line="163"/>
                <scope line="166"/>
                <scope line="169"/>
            </method>
            <method name="readUnsignedShort" type="int" line="173"/>
            <method name="readChar" type="char" line="176"/>
            <method name="readInt" type="int" line="179">
                <scope line="180"/>
                <scope line="183"/>
                <scope line="186"/>
            </method>
            <method name="readUnsignedInt" type="long" line="190"/>
            <method name="readLong" type="long" line="193">
                <declaration name="i1" type="int" line="194"/>
                <declaration name="i2" type="int" line="195"/>
                <scope line="196"/>
                <scope line="199"/>
            </method>
            <method name="readFloat" type="float" line="203"/>
            <method name="readDouble" type="double" line="206"/>
            <method name="readLine" type="String" line="209">
                <declaration name="input" type="StringBuffer" line="210"/>
                <declaration name="c" type="int" line="211"/>
                <declaration name="eol" type="boolean" line="212"/>
                <scope line="213">
                    <declaration name="cur" type="long" line="221"/>
                    <scope line="222"/>
                </scope>
                <scope line="231"/>
            </method>
            <method name="readUTF" type="String" line="236">
                <declaration name="oldByteOrder" type="ByteOrder" line="238"/>
                <declaration name="ret" type="String" line="240"/>
                <scope line="241"/>
                <scope line="244"/>
            </method>
            <method name="readFully" type="void" line="251">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="252"/>
                <scope line="255">
                    <declaration name="nbytes" type="int" line="256"/>
                    <scope line="257"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="264">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <method name="readFully" type="void" line="267">
                <params>
                    <param name="s" type="short[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="268"/>
                <scope line="271">
                    <declaration name="nelts" type="int" line="272"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="279">
                <params>
                    <param name="c" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="280"/>
                <scope line="283">
                    <declaration name="nelts" type="int" line="284"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="291">
                <params>
                    <param name="i" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="292"/>
                <scope line="295">
                    <declaration name="nelts" type="int" line="296"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="303">
                <params>
                    <param name="l" type="long[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="304"/>
                <scope line="307">
                    <declaration name="nelts" type="int" line="308"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="315">
                <params>
                    <param name="f" type="float[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="316"/>
                <scope line="319">
                    <declaration name="nelts" type="int" line="320"/>
                </scope>
            </method>
            <method name="readFully" type="void" line="327">
                <params>
                    <param name="d" type="double[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="328"/>
                <scope line="331">
                    <declaration name="nelts" type="int" line="332"/>
                </scope>
            </method>
            <method name="toShorts" type="void" line="339">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="s" type="short[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="340"/>
                <scope line="341">
                    <scope line="342">
                        <declaration name="b0" type="int" line="343"/>
                        <declaration name="b1" type="int" line="344"/>
                    </scope>
                </scope>
                <scope line="349">
                    <scope line="350">
                        <declaration name="b0" type="int" line="351"/>
                        <declaration name="b1" type="int" line="352"/>
                    </scope>
                </scope>
            </method>
            <method name="toChars" type="void" line="358">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="c" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="359"/>
                <scope line="360">
                    <scope line="361">
                        <declaration name="b0" type="int" line="362"/>
                        <declaration name="b1" type="int" line="363"/>
                    </scope>
                </scope>
                <scope line="368">
                    <scope line="369">
                        <declaration name="b0" type="int" line="370"/>
                        <declaration name="b1" type="int" line="371"/>
                    </scope>
                </scope>
            </method>
            <method name="toInts" type="void" line="377">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="i" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="378"/>
                <scope line="379">
                    <scope line="380">
                        <declaration name="b0" type="int" line="381"/>
                        <declaration name="b1" type="int" line="382"/>
                        <declaration name="b2" type="int" line="383"/>
                        <declaration name="b3" type="int" line="384"/>
                    </scope>
                </scope>
                <scope line="389">
                    <scope line="390">
                        <declaration name="b0" type="int" line="391"/>
                        <declaration name="b1" type="int" line="392"/>
                        <declaration name="b2" type="int" line="393"/>
                        <declaration name="b3" type="int" line="394"/>
                    </scope>
                </scope>
            </method>
            <method name="toLongs" type="void" line="400">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="l" type="long[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="401"/>
                <scope line="402">
                    <scope line="403">
                        <declaration name="b0" type="int" line="404"/>
                        <declaration name="b1" type="int" line="405"/>
                        <declaration name="b2" type="int" line="406"/>
                        <declaration name="b3" type="int" line="407"/>
                        <declaration name="b4" type="int" line="408"/>
                        <declaration name="b5" type="int" line="409"/>
                        <declaration name="b6" type="int" line="410"/>
                        <declaration name="b7" type="int" line="411"/>
                        <declaration name="i0" type="int" line="412"/>
                        <declaration name="i1" type="int" line="413"/>
                    </scope>
                </scope>
                <scope line="418">
                    <scope line="419">
                        <declaration name="b0" type="int" line="420"/>
                        <declaration name="b1" type="int" line="421"/>
                        <declaration name="b2" type="int" line="422"/>
                        <declaration name="b3" type="int" line="423"/>
                        <declaration name="b4" type="int" line="424"/>
                        <declaration name="b5" type="int" line="425"/>
                        <declaration name="b6" type="int" line="426"/>
                        <declaration name="b7" type="int" line="427"/>
                        <declaration name="i0" type="int" line="428"/>
                        <declaration name="i1" type="int" line="429"/>
                    </scope>
                </scope>
            </method>
            <method name="toFloats" type="void" line="435">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="f" type="float[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="436"/>
                <scope line="437">
                    <scope line="438">
                        <declaration name="b0" type="int" line="439"/>
                        <declaration name="b1" type="int" line="440"/>
                        <declaration name="b2" type="int" line="441"/>
                        <declaration name="b3" type="int" line="442"/>
                        <declaration name="i" type="int" line="443"/>
                    </scope>
                </scope>
                <scope line="448">
                    <scope line="449">
                        <declaration name="b0" type="int" line="450"/>
                        <declaration name="b1" type="int" line="451"/>
                        <declaration name="b2" type="int" line="452"/>
                        <declaration name="b3" type="int" line="453"/>
                        <declaration name="i" type="int" line="454"/>
                    </scope>
                </scope>
            </method>
            <method name="toDoubles" type="void" line="460">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="d" type="double[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="boff" type="int" line="461"/>
                <scope line="462">
                    <scope line="463">
                        <declaration name="b0" type="int" line="464"/>
                        <declaration name="b1" type="int" line="465"/>
                        <declaration name="b2" type="int" line="466"/>
                        <declaration name="b3" type="int" line="467"/>
                        <declaration name="b4" type="int" line="468"/>
                        <declaration name="b5" type="int" line="469"/>
                        <declaration name="b6" type="int" line="470"/>
                        <declaration name="b7" type="int" line="471"/>
                        <declaration name="i0" type="int" line="472"/>
                        <declaration name="i1" type="int" line="473"/>
                        <declaration name="l" type="long" line="474"/>
                    </scope>
                </scope>
                <scope line="479">
                    <scope line="480">
                        <declaration name="b0" type="int" line="481"/>
                        <declaration name="b1" type="int" line="482"/>
                        <declaration name="b2" type="int" line="483"/>
                        <declaration name="b3" type="int" line="484"/>
                        <declaration name="b4" type="int" line="485"/>
                        <declaration name="b5" type="int" line="486"/>
                        <declaration name="b6" type="int" line="487"/>
                        <declaration name="b7" type="int" line="488"/>
                        <declaration name="i0" type="int" line="489"/>
                        <declaration name="i1" type="int" line="490"/>
                        <declaration name="l" type="long" line="491"/>
                    </scope>
                </scope>
            </method>
            <method name="getStreamPosition" type="long" line="497"/>
            <method name="getBitOffset" type="int" line="501"/>
            <method name="setBitOffset" type="void" line="505">
                <params>
                    <param name="bitOffset" type="int"/>
                </params>
                <scope line="507"/>
            </method>
            <method name="readBit" type="int" line="512">
                <declaration name="newBitOffset" type="int" line="514"/>
                <declaration name="val" type="int" line="515"/>
                <scope line="516"/>
                <scope line="519"/>
            </method>
            <method name="readBits" type="long" line="526">
                <params>
                    <param name="numBits" type="int"/>
                </params>
                <scope line="528"/>
                <scope line="531"/>
                <declaration name="bitsToRead" type="int" line="534"/>
                <declaration name="newBitOffset" type="int" line="535"/>
                <declaration name="accum" type="long" line="536"/>
                <scope line="537">
                    <declaration name="val" type="int" line="538"/>
                    <scope line="539"/>
                </scope>
                <scope line="546"/>
            </method>
            <javadoc line="554">
                Returns &lt;code&gt;-1L&lt;/code&gt; to indicate that the stream has unknown
                  length.  Subclasses must override this method to provide actual
                  length information.                
                <return>
                    -1L to indicate unknown length.                    
                </return>
            </javadoc>
            <method name="length" type="long" line="560"/>
            <javadoc line="563">
                Advances the current stream position by calling
                  &lt;code&gt;seek(getStreamPosition() + n)&lt;/code&gt;.
                  &lt;p&gt; The bit offset is reset to zero.                
                <param>
                    n the number of bytes to seek forward.                    
                </param>
                <return>
                    an <code>int</code> representing the number of bytes
                      skipped.                    
                </return>
                <exception>
                    IOException if <code>getStreamPosition</code>
                      throws an <code>IOException</code> when computing either
                      the starting or ending position.                    
                </exception>
            </javadoc>
            <method name="skipBytes" type="int" line="574">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="pos" type="long" line="575"/>
            </method>
            <javadoc line="579">
                Advances the current stream position by calling
                  &lt;code&gt;seek(getStreamPosition() + n)&lt;/code&gt;.
                  &lt;p&gt; The bit offset is reset to zero.                
                <param>
                    n the number of bytes to seek forward.                    
                </param>
                <return>
                    a <code>long</code> representing the number of bytes
                      skipped.                    
                </return>
                <exception>
                    IOException if <code>getStreamPosition</code>
                      throws an <code>IOException</code> when computing either
                      the starting or ending position.                    
                </exception>
            </javadoc>
            <method name="skipBytes" type="long" line="590">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="pos" type="long" line="591"/>
            </method>
            <method name="seek" type="void" line="595">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="597"/>
            </method>
            <javadoc line="603">
                Pushes the current stream position onto a stack of marked
                  positions.                
            </javadoc>
            <method name="mark" type="void" line="607">
                <scope line="608"/>
                <scope line="612"/>
            </method>
            <javadoc line="615">
                Resets the current stream byte and bit positions from the stack
                  of marked positions.
                  &lt;p&gt; An &lt;code&gt;IOException&lt;/code&gt; will be thrown if the previous
                  marked position lies in the discarded portion of the stream.                
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="622">
                <scope line="623"/>
                <declaration name="pos" type="long" line="626"/>
                <scope line="627"/>
                <declaration name="offset" type="int" line="631"/>
            </method>
            <method name="flushBefore" type="void" line="634">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="636"/>
                <scope line="639"/>
            </method>
            <method name="flush" type="void" line="644"/>
            <method name="getFlushedPosition" type="long" line="647"/>
            <javadoc line="650">
                Default implementation returns false.  Subclasses should
                  override this if they cache data.                
            </javadoc>
            <method name="isCached" type="boolean" line="654"/>
            <javadoc line="657">
                Default implementation returns false.  Subclasses should
                  override this if they cache data in main memory.                
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="661"/>
            <javadoc line="664">
                Default implementation returns false.  Subclasses should
                  override this if they cache data in a temporary file.                
            </javadoc>
            <method name="isCachedFile" type="boolean" line="668"/>
            <method name="close" type="void" line="671"/>
            <javadoc line="675">
                Finalizes this object prior to garbage collection.  The
                  &lt;code&gt;close&lt;/code&gt; method is called to close any open input
                  source.  This method should not be called from application
                  code.                
                <exception>
                    Throwable if an error occurs during superclass
                      finalization.                    
                </exception>
            </javadoc>
            <method name="finalize" type="void" line="683">
                <scope line="684">
                    <scope line="685"/>
                    <scope line="688"/>
                </scope>
            </method>
        </class>
    </source>