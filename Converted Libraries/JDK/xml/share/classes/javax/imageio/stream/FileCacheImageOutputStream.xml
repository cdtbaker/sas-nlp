<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="com.sun.imageio.stream.StreamCloser"/>
        <class name="FileCacheImageOutputStream" line="7">
            <extends class="ImageOutputStreamImpl"/>
            <javadoc line="7">
                An implementation of &lt;code&gt;ImageOutputStream&lt;/code&gt; that writes its
                  output to a regular &lt;code&gt;OutputStream&lt;/code&gt;.  A file is used to
                  cache data until it is flushed to the output stream.                
            </javadoc>
            <declaration name="stream" type="OutputStream" line="13"/>
            <declaration name="cacheFile" type="File" line="14"/>
            <declaration name="cache" type="RandomAccessFile" line="15"/>
            <declaration name="maxStreamPos" type="long" line="16"/>
            <declaration name="closeAction" type="StreamCloser.CloseAction" line="17"/>
            <javadoc line="17">
                The CloseAction that closes the stream in
                  the StreamCloser&apos;s shutdown hook                
            </javadoc>
            <javadoc line="22">
                Constructs a &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt; that will write
                  to a given &lt;code&gt;outputStream&lt;/code&gt;.
                  &lt;p&gt; A temporary file is used as a cache.  If
                  &lt;code&gt;cacheDir&lt;/code&gt;is non-&lt;code&gt;null&lt;/code&gt; and is a
                  directory, the file will be created there.  If it is
                  &lt;code&gt;null&lt;/code&gt;, the system-dependent default temporary-file
                  directory will be used (see the documentation for
                  &lt;code&gt;File.createTempFile&lt;/code&gt; for details).                
                <param>
                    stream an &lt;code&gt;OutputStream&lt;/code&gt; to write to.                    
                </param>
                <param>
                    cacheDir a &lt;code&gt;File&lt;/code&gt; indicating where the
                      cache file should be created, or &lt;code&gt;null&lt;/code&gt; to use the
                      system directory.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;stream&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;cacheDir&lt;/code&gt; is
                      non-&lt;code&gt;null&lt;/code&gt; but is not a directory.                    
                </exception>
                <exception>
                    IOException if a cache file cannot be created.                    
                </exception>
            </javadoc>
            <method name="FileCacheImageOutputStream" type="constructor" line="41">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="cacheDir" type="File"/>
                </params>
                <scope line="42"/>
                <scope line="45"/>
            </method>
            <method name="read" type="int" line="54">
                <declaration name="val" type="int" line="57"/>
                <scope line="58"/>
            </method>
            <method name="read" type="int" line="63">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="65"/>
                <scope line="68"/>
                <scope line="72"/>
                <declaration name="nbytes" type="int" line="75"/>
                <scope line="76"/>
            </method>
            <method name="write" type="void" line="81">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="write" type="void" line="87">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="length" type="long" line="93">
                <scope line="94"/>
                <scope line="98"/>
            </method>
            <javadoc line="102">
                Sets the current stream position and resets the bit offset to
                  0.  It is legal to seek past the end of the file; an
                  &lt;code&gt;EOFException&lt;/code&gt; will be thrown only if a read is
                  performed.  The file length will not be increased until a write
                  is performed.                
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;pos&lt;/code&gt; is smaller
                      than the flushed position.                    
                </exception>
                <exception>
                    IOException if any other I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="seek" type="void" line="112">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="114"/>
            </method>
            <javadoc line="122">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; caches data in order to allow
                  seeking backwards.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;.                    
                </return>
                <see>
                    #isCachedMemory                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCached" type="boolean" line="130"/>
            <javadoc line="133">
                Returns &lt;code&gt;true&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; maintains a file cache.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedMemory                    
                </see>
            </javadoc>
            <method name="isCachedFile" type="boolean" line="140"/>
            <javadoc line="143">
                Returns &lt;code&gt;false&lt;/code&gt; since this
                  &lt;code&gt;ImageOutputStream&lt;/code&gt; does not maintain a main memory
                  cache.                
                <return>
                    &lt;code&gt;false&lt;/code&gt;.                    
                </return>
                <see>
                    #isCached                    
                </see>
                <see>
                    #isCachedFile                    
                </see>
            </javadoc>
            <method name="isCachedMemory" type="boolean" line="151"/>
            <javadoc line="154">
                Closes this &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt;.  All
                  pending data is flushed to the output, and the cache file
                  is closed and removed.  The destination &lt;code&gt;OutputStream&lt;/code&gt;
                  is not closed.                
                <exception>
                    IOException if an error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="161"/>
            <method name="flushBefore" type="void" line="174">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <declaration name="oFlushedPos" type="long" line="175"/>
                <declaration name="flushBytes" type="long" line="177"/>
                <scope line="178">
                    <declaration name="bufLen" type="int" line="179"/>
                    <declaration name="buf" type="byte[]" line="180"/>
                    <scope line="182">
                        <declaration name="len" type="int" line="183"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>