<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="com.sun.imageio.stream.CloseableDisposerRecord"/>
        <import package="com.sun.imageio.stream.StreamFinalizer"/>
        <import package="sun.java2d.Disposer"/>
        <class name="FileImageOutputStream" line="36">
            <extends class="ImageOutputStreamImpl"/>
            <javadoc line="36">
                An implementation of &lt;code&gt;ImageOutputStream&lt;/code&gt; that writes its
                  output directly to a &lt;code&gt;File&lt;/code&gt; or
                  &lt;code&gt;RandomAccessFile&lt;/code&gt;.                
            </javadoc>
            <declaration name="raf" type="RandomAccessFile" line="44"/>
            <declaration name="disposerReferent" type="Object" line="46"/>
            <javadoc line="46">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="CloseableDisposerRecord" line="49"/>
            <javadoc line="49">
                The DisposerRecord that closes the underlying RandomAccessFile.                
            </javadoc>
            <javadoc line="52">
                Constructs a &lt;code&gt;FileImageOutputStream&lt;/code&gt; that will write
                  to a given &lt;code&gt;File&lt;/code&gt;.                
                <param>
                    f a <code>File</code> to write to.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>f</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    SecurityException if a security manager exists
                      and does not allow write access to the file.                    
                </exception>
                <exception>
                    FileNotFoundException if <code>f</code> does not denote
                      a regular file or it cannot be opened for reading and writing for any
                      other reason.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="FileImageOutputStream" type="constructor" line="68">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="72">
                Constructs a &lt;code&gt;FileImageOutputStream&lt;/code&gt; that will write
                  to a given &lt;code&gt;RandomAccessFile&lt;/code&gt;.                
                <param>
                    raf a <code>RandomAccessFile</code> to write to.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>raf</code> is
                      <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="FileImageOutputStream" type="constructor" line="81">
                <params>
                    <param name="raf" type="RandomAccessFile"/>
                </params>
                <scope line="82"/>
                <scope line="88"/>
                <scope line="91"/>
            </method>
            <method name="read" type="int" line="96">
                <declaration name="val" type="int" line="99"/>
                <scope line="100"/>
            </method>
            <method name="read" type="int" line="106">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="nbytes" type="int" line="109"/>
                <scope line="110"/>
            </method>
            <method name="write" type="void" line="116">
                <params>
                    <param name="b" type="int"/>
                </params>
                <comment line="117">
                    this will call checkClosed() for us                    
                </comment>
            </method>
            <method name="write" type="void" line="122">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="123">
                    this will call checkClosed() for us                    
                </comment>
            </method>
            <method name="length" type="long" line="128">
                <scope line="129"/>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Sets the current stream position and resets the bit offset to
                  0.  It is legal to seeking past the end of the file; an
                  &lt;code&gt;EOFException&lt;/code&gt; will be thrown only if a read is
                  performed.  The file length will not be increased until a write
                  is performed.                
                <exception>
                    IndexOutOfBoundsException if <code>pos</code> is smaller
                      than the flushed position.                    
                </exception>
                <exception>
                    IOException if any other I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="seek" type="void" line="148">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="150"/>
            </method>
            <method name="close" type="void" line="158">
                <comment line="160">
                    this closes the RandomAccessFile                    
                </comment>
            </method>
            <javadoc line="164">
                {@inheritDoc}                
            </javadoc>
            <method name="finalize" type="void" line="167">
                <comment line="168">
                    Empty finalizer: for performance reasons we instead use the                    
                </comment>
                <comment line="169">
                    Disposer mechanism for ensuring that the underlying                    
                </comment>
                <comment line="170">
                    RandomAccessFile is closed prior to garbage collection                    
                </comment>
            </method>
        </class>
    </source>