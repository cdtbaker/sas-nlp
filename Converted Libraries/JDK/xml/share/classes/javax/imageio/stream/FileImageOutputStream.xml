<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.imageio.stream">
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="com.sun.imageio.stream.CloseableDisposerRecord"/>
        <import package="com.sun.imageio.stream.StreamFinalizer"/>
        <import package="sun.java2d.Disposer"/>
        <class name="FileImageOutputStream" line="9">
            <extends class="ImageOutputStreamImpl"/>
            <javadoc line="9">
                An implementation of &lt;code&gt;ImageOutputStream&lt;/code&gt; that writes its
                  output directly to a &lt;code&gt;File&lt;/code&gt; or
                  &lt;code&gt;RandomAccessFile&lt;/code&gt;.                
            </javadoc>
            <declaration name="raf" type="RandomAccessFile" line="15"/>
            <declaration name="disposerReferent" type="Object" line="16"/>
            <javadoc line="16">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="CloseableDisposerRecord" line="20"/>
            <javadoc line="20">
                The DisposerRecord that closes the underlying RandomAccessFile.                
            </javadoc>
            <javadoc line="24">
                Constructs a &lt;code&gt;FileImageOutputStream&lt;/code&gt; that will write
                  to a given &lt;code&gt;File&lt;/code&gt;.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; to write to.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;f&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    SecurityException if a security manager exists
                      and does not allow write access to the file.                    
                </exception>
                <exception>
                    FileNotFoundException if &lt;code&gt;f&lt;/code&gt; does not denote
                      a regular file or it cannot be opened for reading and writing for any
                      other reason.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="FileImageOutputStream" type="constructor" line="37">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="40">
                Constructs a &lt;code&gt;FileImageOutputStream&lt;/code&gt; that will write
                  to a given &lt;code&gt;RandomAccessFile&lt;/code&gt;.                
                <param>
                    raf a &lt;code&gt;RandomAccessFile&lt;/code&gt; to write to.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;raf&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="FileImageOutputStream" type="constructor" line="47">
                <params>
                    <param name="raf" type="RandomAccessFile"/>
                </params>
                <scope line="48"/>
                <scope line="53"/>
                <scope line="57"/>
            </method>
            <method name="read" type="int" line="61">
                <declaration name="val" type="int" line="64"/>
                <scope line="65"/>
            </method>
            <method name="read" type="int" line="70">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="nbytes" type="int" line="73"/>
                <scope line="74"/>
            </method>
            <method name="write" type="void" line="79">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="write" type="void" line="84">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="length" type="long" line="89">
                <scope line="90"/>
                <scope line="94"/>
            </method>
            <javadoc line="98">
                Sets the current stream position and resets the bit offset to
                  0.  It is legal to seeking past the end of the file; an
                  &lt;code&gt;EOFException&lt;/code&gt; will be thrown only if a read is
                  performed.  The file length will not be increased until a write
                  is performed.                
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;pos&lt;/code&gt; is smaller
                      than the flushed position.                    
                </exception>
                <exception>
                    IOException if any other I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="seek" type="void" line="108">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="110"/>
            </method>
            <method name="close" type="void" line="117"/>
            <javadoc line="122">
                {@inheritDoc}                
            </javadoc>
            <method name="finalize" type="void" line="125"/>
        </class>
    </source>