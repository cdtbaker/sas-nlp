<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.security"/>
        <import package="java.util.jar"/>
        <class name="JarVerifier" line="33">
            <comment line="48">
                The URL for the JAR file we want to verify.                
            </comment>
            <javadoc line="33">
                This class verifies JAR files (and any supporting JAR files), and
                  determines whether they may be used in this implementation.
                  The JCE in OpenJDK has an open cryptographic interface, meaning it
                  does not restrict which providers can be used.  Compliance with
                  United States export controls and with local law governing the
                  import/export of products incorporating the JCE in the OpenJDK is
                  the responsibility of the licensee.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="jarURL" type="URL" line="48"/>
            <declaration name="savePerms" type="boolean" line="49"/>
            <declaration name="appPerms" type="CryptoPermissions" line="50"/>
            <javadoc line="52">
                Creates a JarVerifier object to verify the given URL.                
                <param>
                    jarURL the JAR file to be verified.                    
                </param>
                <param>
                    savePerms if true, save the permissions allowed by the
                      exemption mechanism                    
                </param>
            </javadoc>
            <method name="JarVerifier" type="constructor" line="59">
                <params>
                    <param name="jarURL" type="URL"/>
                    <param name="savePerms" type="boolean"/>
                </params>
            </method>
            <javadoc line="64">
                Verify the JAR file is signed by an entity which has a certificate
                  issued by a trusted CA.
                  In OpenJDK, we just need to examine the &quot;cryptoperms&quot; file to see
                  if any permissions were bundled together with this jar file.                
            </javadoc>
            <method name="verify" type="void" line="71">
                <comment line="74">
                    Short-circuit.  If we weren&apos;t asked to save any, we&apos;re done.                    
                </comment>
                <comment line="79">
                    If the protocol of jarURL isn&apos;t &quot;jar&quot;, we should
                     construct a JAR URL so we can open a JarURLConnection
                     for verifying this provider.                    
                </comment>
                <comment line="88">
                    Get a link to the Jarfile to search.                    
                </comment>
                <comment line="96">
                    You could do some caching here as
                     an optimization.                    
                </comment>
                <comment line="127">
                    Only call close() when caching is not enabled.
                     Otherwise, exceptions will be thrown for all
                     subsequent accesses of this cached jar.                    
                </comment>
                <scope line="74"/>
                <declaration name="url" type="URL" line="81"/>
                <declaration name="jf" type="JarFile" line="84"/>
                <scope line="85">
                    <scope line="88">
                        <anonymous_class line="91">
                            <method name="run" type="Object" line="92">
                                <comment line="96">
                                    You could do some caching here as
                                     an optimization.                                    
                                </comment>
                                <declaration name="conn" type="JarURLConnection" line="93"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="101">
                        <declaration name="se" type="SecurityException" line="102"/>
                    </scope>
                    <scope line="108">
                        <declaration name="je" type="JarEntry" line="109"/>
                        <scope line="110"/>
                        <scope line="114"/>
                        <scope line="117">
                            <declaration name="jex" type="JarException" line="118"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="125">
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="135">
                Verify that the provided certs include the
                  framework signing certificate.                
                <param>
                    certs the list of certs to be checked.                    
                </param>
                <throws>
                    Exception if the list of certs did not contain
                      the framework signing certificate                    
                </throws>
            </javadoc>
            <method name="verifyPolicySigned" type="void" line="144">
                <params>
                    <param name="certs" type="java.security.cert.Certificate[]"/>
                </params>
            </method>
            <javadoc line="147">
                Returns the permissions which are bundled with the JAR file,
                  aka the &quot;cryptoperms&quot; file.
                  NOTE: if this JarVerifier instance is constructed with &quot;savePerms&quot;
                  equal to false, then this method would always return null.                
            </javadoc>
            <method name="getPermissions" type="CryptoPermissions" line="154"/>
        </class>
    </source>