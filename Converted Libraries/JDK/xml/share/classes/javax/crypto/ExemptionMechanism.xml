<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.Provider"/>
        <import package="java.security.Key"/>
        <import package="java.security.Security"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="ExemptionMechanism" line="40">
            <comment line="54">
                The provider                
            </comment>
            <comment line="57">
                The provider implementation (delegate)                
            </comment>
            <comment line="60">
                The name of the exemption mechanism.                
            </comment>
            <comment line="63">
                Flag which indicates whether this ExemptionMechanism
                 result is generated successfully.                
            </comment>
            <comment line="67">
                State information                
            </comment>
            <comment line="70">
                Store away the key at init() time for later comparison.                
            </comment>
            <javadoc line="40">
                This class provides the functionality of an exemption mechanism, examples
                  of which are &lt;i&gt;key recovery&lt;/i&gt;, &lt;i&gt;key weakening&lt;/i&gt;, and
                  &lt;i&gt;key escrow&lt;/i&gt;.
                  &lt;p&gt;Applications or applets that use an exemption mechanism may be granted
                  stronger encryption capabilities than those which don&apos;t.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="provider" type="Provider" line="54"/>
            <declaration name="exmechSpi" type="ExemptionMechanismSpi" line="57"/>
            <declaration name="mechanism" type="String" line="60"/>
            <declaration name="done" type="boolean" line="64"/>
            <declaration name="initialized" type="boolean" line="67"/>
            <declaration name="keyStored" type="Key" line="70"/>
            <javadoc line="72">
                Creates a ExemptionMechanism object.                
                <param>
                    exmechSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    mechanism the exemption mechanism                    
                </param>
            </javadoc>
            <method name="ExemptionMechanism" type="constructor" line="81">
                <params>
                    <param name="exmechSpi" type="ExemptionMechanismSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="mechanism" type="String"/>
                </params>
            </method>
            <javadoc line="87">
                Returns the exemption mechanism name of this
                  &lt;code&gt;ExemptionMechanism&lt;/code&gt; object.
                  &lt;p&gt;This is the same name that was specified in one of the
                  &lt;code&gt;getInstance&lt;/code&gt; calls that created this
                  &lt;code&gt;ExemptionMechanism&lt;/code&gt; object.                
                <return>
                    the exemption mechanism name of this
                      &lt;code&gt;ExemptionMechanism&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="98"/>
            <javadoc line="102">
                Returns an &lt;code&gt;ExemptionMechanism&lt;/code&gt; object that implements the
                  specified exemption mechanism algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new ExemptionMechanism object encapsulating the
                  ExemptionMechanismSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested exemption
                      mechanism.
                      See the ExemptionMechanism section in the
                      &lt;a href=
                      &quot;{docRoot}/../technotes/guides/security/StandardNames.html#Exemption&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard exemption mechanism names.                    
                </param>
                <return>
                    the new &lt;code&gt;ExemptionMechanism&lt;/code&gt; object.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;algorithm&lt;/code&gt;
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if no Provider supports an
                      ExemptionMechanismSpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="ExemptionMechanism" line="135">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="136"/>
            </method>
            <javadoc line="143">
                Returns an &lt;code&gt;ExemptionMechanism&lt;/code&gt; object that implements the
                  specified exemption mechanism algorithm.
                  &lt;p&gt; A new ExemptionMechanism object encapsulating the
                  ExemptionMechanismSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested exemption mechanism.
                      See the ExemptionMechanism section in the
                      &lt;a href=
                      &quot;{docRoot}/../technotes/guides/security/StandardNames.html#Exemption&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard exemption mechanism names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;ExemptionMechanism&lt;/code&gt; object.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;algorithm&lt;/code&gt;
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if an ExemptionMechanismSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt;
                      is null or empty.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="ExemptionMechanism" line="183">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="184"/>
            </method>
            <javadoc line="190">
                Returns an &lt;code&gt;ExemptionMechanism&lt;/code&gt; object that implements the
                  specified exemption mechanism algorithm.
                  &lt;p&gt; A new ExemptionMechanism object encapsulating the
                  ExemptionMechanismSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the standard name of the requested exemption mechanism.
                      See the ExemptionMechanism section in the
                      &lt;a href=
                      &quot;{docRoot}/../technotes/guides/security/StandardNames.html#Exemption&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard exemption mechanism names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;ExemptionMechanism&lt;/code&gt; object.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;algorithm&lt;/code&gt;
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if an ExemptionMechanismSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt;
                      is null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="ExemptionMechanism" line="223">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="224"/>
            </method>
            <javadoc line="230">
                Returns the provider of this &lt;code&gt;ExemptionMechanism&lt;/code&gt; object.                
                <return>
                    the provider of this &lt;code&gt;ExemptionMechanism&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="235"/>
            <javadoc line="239">
                Returns whether the result blob has been generated successfully by this
                  exemption mechanism.
                  &lt;p&gt;The method also makes sure that the key passed in is the same as
                  the one this exemption mechanism used in initializing and generating
                  phases.                
                <param>
                    key the key the crypto is going to use.                    
                </param>
                <return>
                    whether the result blob of the same key has been generated
                      successfully by this exemption mechanism; false if &lt;code&gt;key&lt;/code&gt;
                      is null.                    
                </return>
                <exception>
                    ExemptionMechanismException if problem(s) encountered
                      while determining whether the result blob has been generated successfully
                      by this exemption mechanism object.                    
                </exception>
            </javadoc>
            <method name="isCryptoAllowed" type="boolean" line="258">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="262">
                    Check if the key passed in is the same as the one
                     this exemption mechanism used.                    
                </comment>
                <declaration name="ret" type="boolean" line="259"/>
                <scope line="260"/>
            </method>
            <javadoc line="268">
                Returns the length in bytes that an output buffer would need to be in
                  order to hold the result of the next{@link #genExemptionBlob(byte[]) genExemptionBlob}operation, given the input length &lt;code&gt;inputLen&lt;/code&gt; (in bytes).
                  &lt;p&gt;The actual output length of the next{@link #genExemptionBlob(byte[]) genExemptionBlob}call may be smaller than the length returned by this method.                
                <param>
                    inputLen the input length (in bytes)                    
                </param>
                <return>
                    the required output buffer size (in bytes)                    
                </return>
                <exception>
                    IllegalStateException if this exemption mechanism is in a
                      wrong state (e.g., has not yet been initialized)                    
                </exception>
            </javadoc>
            <method name="getOutputSize" type="int" line="285">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
                <scope line="286"/>
                <scope line="290"/>
            </method>
            <javadoc line="297">
                Initializes this exemption mechanism with a key.
                  &lt;p&gt;If this exemption mechanism requires any algorithm parameters
                  that cannot be derived from the given &lt;code&gt;key&lt;/code&gt;, the
                  underlying exemption mechanism implementation is supposed to
                  generate the required parameters itself (using provider-specific
                  default values); in the case that algorithm parameters must be
                  specified by the caller, an &lt;code&gt;InvalidKeyException&lt;/code&gt; is raised.                
                <param>
                    key the key for this exemption mechanism                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this exemption mechanism.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of initializing.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="315">
                <params>
                    <param name="key" type="Key"/>
                </params>
            </method>
            <javadoc line="324">
                Initializes this exemption mechanism with a key and a set of algorithm
                  parameters.
                  &lt;p&gt;If this exemption mechanism requires any algorithm parameters
                  and &lt;code&gt;params&lt;/code&gt; is null, the underlying exemption
                  mechanism implementation is supposed to generate the required
                  parameters itself (using provider-specific default values); in the case
                  that algorithm parameters must be specified by the caller, an
                  &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; is raised.                
                <param>
                    key the key for this exemption mechanism                    
                </param>
                <param>
                    params the algorithm parameters                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this exemption mechanism.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this exemption mechanism.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of initializing.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="347">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="356">
                Initializes this exemption mechanism with a key and a set of algorithm
                  parameters.
                  &lt;p&gt;If this exemption mechanism requires any algorithm parameters
                  and &lt;code&gt;params&lt;/code&gt; is null, the underlying exemption mechanism
                  implementation is supposed to generate the required parameters itself
                  (using provider-specific default values); in the case that algorithm
                  parameters must be specified by the caller, an
                  &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; is raised.                
                <param>
                    key the key for this exemption mechanism                    
                </param>
                <param>
                    params the algorithm parameters                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this exemption mechanism.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this exemption mechanism.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of initializing.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="379">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                </params>
            </method>
            <javadoc line="388">
                Generates the exemption mechanism key blob.                
                <return>
                    the new buffer with the result key blob.                    
                </return>
                <exception>
                    IllegalStateException if this exemption mechanism is in
                      a wrong state (e.g., has not been initialized).                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of generating.                    
                </exception>
            </javadoc>
            <method name="genExemptionBlob" type="byte[]" line="399">
                <scope line="400"/>
                <declaration name="blob" type="byte[]" line="404"/>
            </method>
            <javadoc line="409">
                Generates the exemption mechanism key blob, and stores the result in
                  the &lt;code&gt;output&lt;/code&gt; buffer.
                  &lt;p&gt;If the &lt;code&gt;output&lt;/code&gt; buffer is too small to hold the result,
                  a &lt;code&gt;ShortBufferException&lt;/code&gt; is thrown. In this case, repeat this
                  call with a larger output buffer. Use{@link #getOutputSize(int) getOutputSize} to determine how big
                  the output buffer should be.                
                <param>
                    output the buffer for the result                    
                </param>
                <return>
                    the number of bytes stored in &lt;code&gt;output&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalStateException if this exemption mechanism is in
                      a wrong state (e.g., has not been initialized).                    
                </exception>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of generating.                    
                </exception>
            </javadoc>
            <method name="genExemptionBlob" type="int" line="432">
                <params>
                    <param name="output" type="byte[]"/>
                </params>
                <scope line="433"/>
                <declaration name="n" type="int" line="437"/>
            </method>
            <javadoc line="442">
                Generates the exemption mechanism key blob, and stores the result in
                  the &lt;code&gt;output&lt;/code&gt; buffer, starting at &lt;code&gt;outputOffset&lt;/code&gt;
                  inclusive.
                  &lt;p&gt;If the &lt;code&gt;output&lt;/code&gt; buffer is too small to hold the result,
                  a &lt;code&gt;ShortBufferException&lt;/code&gt; is thrown. In this case, repeat this
                  call with a larger output buffer. Use{@link #getOutputSize(int) getOutputSize} to determine how big
                  the output buffer should be.                
                <param>
                    output the buffer for the result                    
                </param>
                <param>
                    outputOffset the offset in &lt;code&gt;output&lt;/code&gt; where the result
                      is stored                    
                </param>
                <return>
                    the number of bytes stored in &lt;code&gt;output&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalStateException if this exemption mechanism is in
                      a wrong state (e.g., has not been initialized).                    
                </exception>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of generating.                    
                </exception>
            </javadoc>
            <method name="genExemptionBlob" type="int" line="468">
                <params>
                    <param name="output" type="byte[]"/>
                    <param name="outputOffset" type="int"/>
                </params>
                <scope line="469"/>
                <declaration name="n" type="int" line="473"/>
            </method>
            <javadoc line="478">
                Ensures that the key stored away by this ExemptionMechanism
                  object will be wiped out when there are no more references to it.                
            </javadoc>
            <method name="finalize" type="void" line="482">
                <comment line="485">
                    Are there anything else we could do?                    
                </comment>
            </method>
        </class>
    </source>