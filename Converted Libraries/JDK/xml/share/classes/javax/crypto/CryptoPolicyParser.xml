<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.io"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Locale.ENGLISH"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.lang.reflect"/>
        <class name="CryptoPolicyParser" line="39">
            <comment line="70">
                Convenience variables for parsing                
            </comment>
            <javadoc line="39">
                JCE has two pairs of jurisdiction policy files: one represents U.S. export
                  laws, and the other represents the local laws of the country where the
                  JCE will be used.
                  The jurisdiction policy file has the same syntax as JDK policy files except
                  that JCE has new permission classes called javax.crypto.CryptoPermission
                  and javax.crypto.CryptoAllPermission.
                  The format of a permission entry in the jurisdiction policy file is:
                  permission &lt;crypto permission class name&gt;[, &lt;algorithm name&gt;
                  [[, &lt;exemption mechanism name&gt;][, &lt;maxKeySize&gt;
                  [, &lt;AlgrithomParameterSpec class name&gt;, &lt;parameters
                  for constructing an AlgrithomParameterSpec object&gt;]]]];                
                <author>
                    Sharon Liu                    
                </author>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.spec.AlgrithomParameterSpec                    
                </see>
                <see>
                    javax.crypto.CryptoPermission                    
                </see>
                <see>
                    javax.crypto.CryptoAllPermission                    
                </see>
                <see>
                    javax.crypto.CryptoPermissions                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="grantEntries" type="Vector" line="67"/>
            <declaration name="st" type="StreamTokenizer" line="70"/>
            <declaration name="lookahead" type="int" line="71"/>
            <javadoc line="73">
                Creates a CryptoPolicyParser object.                
            </javadoc>
            <method name="CryptoPolicyParser" type="constructor" line="76"/>
            <javadoc line="80">
                Reads a policy configuration using a Reader object. &lt;p&gt;                
                <param>
                    policy the policy Reader object.                    
                </param>
                <exception>
                    ParsingException if the policy configuration
                      contains a syntax error.                    
                </exception>
                <exception>
                    IOException if an error occurs while reading
                      the policy configuration.                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="94">
                <params>
                    <param name="policy" type="Reader"/>
                </params>
                <comment line="99">
                    Configure the stream tokenizer:
                          Recognize strings between &quot;...&quot;
                          Don&apos;t convert words to lowercase
                          Recognize both C-style and C++-style comments
                          Treat end-of-line as white space, not as a token                    
                </comment>
                <comment line="126">
                    The crypto jurisdiction policy must be consistent. The
                     following hashtable is used for checking consistency.                    
                </comment>
                <comment line="132">
                    The main parsing loop.  The loop is executed once for each entry
                     in the policy file. The entries are delimited by semicolons. Once
                     we&apos;ve read in the information for an entry, go ahead and try to
                     add it to the grantEntries.                    
                </comment>
                <scope line="95"/>
                <declaration name="processedPermissions" type="Hashtable" line="130"/>
                <scope line="139">
                    <scope line="140">
                        <declaration name="ge" type="GrantEntry" line="141"/>
                    </scope>
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="152">
                parse a Grant entry                
            </javadoc>
            <method name="parseGrantEntry" type="GrantEntry" line="157">
                <params>
                    <param name="processedPermissions" type="Hashtable"/>
                </params>
                <declaration name="e" type="GrantEntry" line="158"/>
                <scope line="163">
                    <scope line="164">
                        <declaration name="pe" type="CryptoPermissionEntry" line="165"/>
                    </scope>
                    <scope line="169"/>
                </scope>
            </method>
            <javadoc line="179">
                parse a CryptoPermission entry                
            </javadoc>
            <method name="parsePermissionEntry" type="CryptoPermissionEntry" line="185">
                <params>
                    <param name="processedPermissions" type="Hashtable"/>
                </params>
                <comment line="192">
                    Done with the CryptoAllPermission entry.                    
                </comment>
                <comment line="198">
                    Should see the algorithm name.                    
                </comment>
                <comment line="200">
                    Algorithm name - always convert to upper case after parsing.                    
                </comment>
                <comment line="203">
                    The algorithm name can be a wildcard.                    
                </comment>
                <comment line="215">
                    May see the exemption mechanism name.                    
                </comment>
                <comment line="217">
                    Exemption mechanism name - convert to upper case too.                    
                </comment>
                <comment line="223">
                    Check whether this entry is consistent with other permission entries                    
                </comment>
                <comment line="224">
                    that have been read.                    
                </comment>
                <comment line="229">
                    Should see the maxKeySize if not at the end of this entry yet.                    
                </comment>
                <comment line="242">
                    At the end of this permission entry                    
                </comment>
                <comment line="250">
                    May see an AlgorithmParameterSpec class name.                    
                </comment>
                <comment line="252">
                    AlgorithmParameterSpec class name.                    
                </comment>
                <declaration name="e" type="CryptoPermissionEntry" line="186"/>
                <scope line="191"/>
                <scope line="199"/>
                <scope line="202">
                    <scope line="204"/>
                    <scope line="207"/>
                </scope>
                <scope line="216"/>
                <scope line="225"/>
                <scope line="230"/>
                <scope line="232">
                    <scope line="233"/>
                    <scope line="236">
                        <scope line="237"/>
                        <scope line="241"/>
                    </scope>
                </scope>
                <scope line="251">
                    <declaration name="algParamSpecClassName" type="String" line="253"/>
                    <declaration name="paramsV" type="Vector" line="255"/>
                    <scope line="256">
                        <scope line="258"/>
                        <scope line="260">
                            <scope line="261"/>
                            <scope line="264"/>
                        </scope>
                    </scope>
                    <declaration name="params" type="Integer[]" line="271"/>
                </scope>
            </method>
            <method name="getInstance" type="AlgorithmParameterSpec" line="284">
                <params>
                    <param name="type" type="String"/>
                    <param name="params" type="Integer[]"/>
                </params>
                <declaration name="ret" type="AlgorithmParameterSpec" line="285"/>
                <scope line="287">
                    <declaration name="apsClass" type="Class" line="288"/>
                    <declaration name="paramClasses" type="Class[]" line="289"/>
                    <scope line="291"/>
                    <declaration name="c" type="Constructor" line="295"/>
                </scope>
                <scope line="297"/>
            </method>
            <method name="peekAndMatch" type="boolean" line="307">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <scope line="308"/>
            </method>
            <method name="peek" type="boolean" line="315">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <declaration name="found" type="boolean" line="316"/>
                <scope line="325"/>
            </method>
            <javadoc line="359">
                Excepts to match a non-negative number.                
            </javadoc>
            <method name="match" type="int" line="364">
                <declaration name="value" type="int" line="365"/>
                <declaration name="lineno" type="int" line="366"/>
                <declaration name="sValue" type="String" line="367"/>
                <scope line="372"/>
                <scope line="381"/>
            </method>
            <method name="match" type="String" line="390">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <declaration name="value" type="String" line="391"/>
                <scope line="400"/>
                <scope line="403"/>
                <scope line="411"/>
                <scope line="414"/>
            </method>
            <method name="getPermissions" type="CryptoPermission[]" line="458">
                <declaration name="result" type="Vector" line="459"/>
                <declaration name="grantEnum" type="Enumeration" line="461"/>
                <scope line="462">
                    <declaration name="ge" type="GrantEntry" line="463"/>
                    <declaration name="permEnum" type="Enumeration" line="464"/>
                    <scope line="465">
                        <declaration name="pe" type="CryptoPermissionEntry" line="466"/>
                        <scope line="469"/>
                        <scope line="471">
                            <scope line="472"/>
                            <scope line="478"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ret" type="CryptoPermission[]" line="488"/>
            </method>
            <method name="isConsistent" type="boolean" line="496">
                <params>
                    <param name="alg" type="String"/>
                    <param name="exemptionMechanism" type="String"/>
                    <param name="processedPermissions" type="Hashtable"/>
                </params>
                <declaration name="thisExemptionMechanism" type="String" line="497"/>
                <scope line="500">
                    <declaration name="exemptionMechanisms" type="Vector" line="502"/>
                </scope>
                <scope line="508"/>
                <declaration name="exemptionMechanisms" type="Vector" line="512"/>
                <scope line="514">
                    <scope line="516"/>
                </scope>
                <scope line="519"/>
            </method>
            <class name="GrantEntry" line="528">
                <javadoc line="528">
                    Each grant entry in the policy configuration file is  represented by a
                      GrantEntry object.  &lt;p&gt;
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      grant {
                      permission javax.crypto.CryptoPermission &quot;DES&quot;, 56;
                      };
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      pe = new CryptoPermissionEntry(&quot;javax.crypto.CryptoPermission&quot;,
                      &quot;DES&quot;, 56);
                      ge = new GrantEntry();
                      ge.add(pe);
                      &lt;/pre&gt;                    
                    <see>
                        java.security.Permission                        
                    </see>
                    <see>
                        javax.crypto.CryptoPermission                        
                    </see>
                    <see>
                        javax.crypto.CryptoPermissions                        
                    </see>
                </javadoc>
                <declaration name="permissionEntries" type="Vector" line="559"/>
                <method name="GrantEntry" type="constructor" line="561"/>
                <method name="add" type="void" line="566">
                    <params>
                        <param name="pe" type="CryptoPermissionEntry"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="571">
                    <params>
                        <param name="pe" type="CryptoPermissionEntry"/>
                    </params>
                </method>
                <method name="contains" type="boolean" line="576">
                    <params>
                        <param name="pe" type="CryptoPermissionEntry"/>
                    </params>
                </method>
                <javadoc line="580">
                    Enumerate all the permission entries in this GrantEntry.                    
                </javadoc>
                <method name="permissionElements" type="Enumeration" line="583"/>
            </class>
            <class name="CryptoPermissionEntry" line="589">
                <javadoc line="589">
                    Each crypto permission entry in the policy configuration file is
                      represented by a CryptoPermissionEntry object.  &lt;p&gt;
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      permission javax.crypto.CryptoPermission &quot;DES&quot;, 56;
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      pe = new CryptoPermissionEntry(&quot;javax.crypto.cryptoPermission&quot;,
                      &quot;DES&quot;, 56);
                      &lt;/pre&gt;                    
                    <see>
                        java.security.Permissions                        
                    </see>
                    <see>
                        javax.crypto.CryptoPermission                        
                    </see>
                    <see>
                        javax.crypto.CryptoAllPermission                        
                    </see>
                </javadoc>
                <declaration name="cryptoPermission" type="String" line="612"/>
                <declaration name="alg" type="String" line="613"/>
                <declaration name="exemptionMechanism" type="String" line="614"/>
                <declaration name="maxKeySize" type="int" line="615"/>
                <declaration name="checkParam" type="boolean" line="616"/>
                <declaration name="algParamSpec" type="AlgorithmParameterSpec" line="617"/>
                <method name="CryptoPermissionEntry" type="constructor" line="619">
                    <comment line="620">
                        Set default values.                        
                    </comment>
                </method>
                <javadoc line="628">
                    Calculates a hash code value for the object.  Objects
                      which are equal will also have the same hashcode.                    
                </javadoc>
                <method name="hashCode" type="int" line="632">
                    <declaration name="retval" type="int" line="633"/>
                    <scope line="635"/>
                    <scope line="640"/>
                </method>
                <method name="equals" type="boolean" line="646">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <comment line="681">
                        everything matched -- the 2 objects are equal                        
                    </comment>
                    <declaration name="that" type="CryptoPermissionEntry" line="653"/>
                    <scope line="655"/>
                    <scope line="657"/>
                    <scope line="663"/>
                    <scope line="665"/>
                    <scope line="674"/>
                    <scope line="676"/>
                </method>
            </class>
            <class name="ParsingException" line="686">
                <extends class="GeneralSecurityException"/>
                <declaration name="serialVersionUID" type="long" line="688"/>
                <javadoc line="690">
                    Constructs a ParsingException with the specified
                      detail message.                    
                    <param>
                        msg the detail message.                        
                    </param>
                </javadoc>
                <method name="ParsingException" type="constructor" line="695">
                    <params>
                        <param name="msg" type="String"/>
                    </params>
                </method>
                <method name="ParsingException" type="constructor" line="699">
                    <params>
                        <param name="line" type="int"/>
                        <param name="msg" type="String"/>
                    </params>
                </method>
                <method name="ParsingException" type="constructor" line="703">
                    <params>
                        <param name="line" type="int"/>
                        <param name="expect" type="String"/>
                        <param name="actual" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>