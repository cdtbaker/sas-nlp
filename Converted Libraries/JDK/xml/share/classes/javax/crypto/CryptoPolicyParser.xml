<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.io"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Locale.ENGLISH"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.lang.reflect"/>
        <class name="CryptoPolicyParser" line="11">
            <javadoc line="11">
                JCE has two pairs of jurisdiction policy files: one represents U.S. export
                  laws, and the other represents the local laws of the country where the
                  JCE will be used.
                  The jurisdiction policy file has the same syntax as JDK policy files except
                  that JCE has new permission classes called javax.crypto.CryptoPermission
                  and javax.crypto.CryptoAllPermission.
                  The format of a permission entry in the jurisdiction policy file is:
                  permission &lt;crypto permission class name&gt;[, &lt;algorithm name&gt;
                  [[, &lt;exemption mechanism name&gt;][, &lt;maxKeySize&gt;
                  [, &lt;AlgrithomParameterSpec class name&gt;, &lt;parameters
                  for constructing an AlgrithomParameterSpec object&gt;]]]];                
                <author>
                    Sharon Liu                    
                </author>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.spec.AlgrithomParameterSpec                    
                </see>
                <see>
                    javax.crypto.CryptoPermission                    
                </see>
                <see>
                    javax.crypto.CryptoAllPermission                    
                </see>
                <see>
                    javax.crypto.CryptoPermissions                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="grantEntries" type="Vector" line="32"/>
            <declaration name="st" type="StreamTokenizer" line="33"/>
            <declaration name="lookahead" type="int" line="34"/>
            <javadoc line="35">
                Creates a CryptoPolicyParser object.                
            </javadoc>
            <method name="CryptoPolicyParser" type="constructor" line="38"/>
            <javadoc line="41">
                Reads a policy configuration using a Reader object. &lt;p&gt;                
                <param>
                    policy the policy Reader object.                    
                </param>
                <exception>
                    ParsingException if the policy configuration
                      contains a syntax error.                    
                </exception>
                <exception>
                    IOException if an error occurs while reading
                      the policy configuration.                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="49">
                <params>
                    <param name="policy" type="Reader"/>
                </params>
                <scope line="50"/>
                <declaration name="processedPermissions" type="Hashtable" line="71"/>
                <scope line="73">
                    <scope line="74">
                        <declaration name="ge" type="GrantEntry" line="75"/>
                    </scope>
                    <scope line="78"/>
                </scope>
            </method>
            <javadoc line="84">
                parse a Grant entry                
            </javadoc>
            <method name="parseGrantEntry" type="GrantEntry" line="87">
                <params>
                    <param name="processedPermissions" type="Hashtable"/>
                </params>
                <declaration name="e" type="GrantEntry" line="88"/>
                <scope line="91">
                    <scope line="92">
                        <declaration name="pe" type="CryptoPermissionEntry" line="93"/>
                    </scope>
                    <scope line="97"/>
                </scope>
            </method>
            <javadoc line="104">
                parse a CryptoPermission entry                
            </javadoc>
            <method name="parsePermissionEntry" type="CryptoPermissionEntry" line="107">
                <params>
                    <param name="processedPermissions" type="Hashtable"/>
                </params>
                <declaration name="e" type="CryptoPermissionEntry" line="108"/>
                <scope line="111"/>
                <scope line="116"/>
                <scope line="119">
                    <scope line="120"/>
                    <scope line="124"/>
                </scope>
                <scope line="129"/>
                <scope line="133"/>
                <scope line="136"/>
                <scope line="139">
                    <scope line="140"/>
                    <scope line="144">
                        <scope line="145"/>
                        <scope line="148"/>
                    </scope>
                </scope>
                <scope line="154">
                    <declaration name="algParamSpecClassName" type="String" line="155"/>
                    <declaration name="paramsV" type="Vector" line="156"/>
                    <scope line="157">
                        <scope line="159"/>
                        <scope line="162">
                            <scope line="163"/>
                            <scope line="167"/>
                        </scope>
                    </scope>
                    <declaration name="params" type="Integer[]" line="172"/>
                </scope>
            </method>
            <method name="getInstance" type="AlgorithmParameterSpec" line="179">
                <params>
                    <param name="type" type="String"/>
                    <param name="params" type="Integer[]"/>
                </params>
                <declaration name="ret" type="AlgorithmParameterSpec" line="180"/>
                <scope line="181">
                    <declaration name="apsClass" type="Class" line="182"/>
                    <declaration name="paramClasses" type="Class[]" line="183"/>
                    <scope line="184"/>
                    <declaration name="c" type="Constructor" line="187"/>
                </scope>
                <scope line="190"/>
            </method>
            <method name="peekAndMatch" type="boolean" line="195">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <scope line="196"/>
            </method>
            <method name="peek" type="boolean" line="202">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <declaration name="found" type="boolean" line="203"/>
                <scope line="209"/>
            </method>
            <javadoc line="236">
                Excepts to match a non-negative number.                
            </javadoc>
            <method name="match" type="int" line="239">
                <declaration name="value" type="int" line="240"/>
                <declaration name="lineno" type="int" line="241"/>
                <declaration name="sValue" type="String" line="242"/>
                <scope line="246"/>
                <scope line="255"/>
            </method>
            <method name="match" type="String" line="260">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <declaration name="value" type="String" line="261"/>
                <scope line="268"/>
                <scope line="271"/>
                <scope line="278"/>
                <scope line="282"/>
            </method>
            <method name="getPermissions" type="CryptoPermission[]" line="313">
                <declaration name="result" type="Vector" line="314"/>
                <declaration name="grantEnum" type="Enumeration" line="315"/>
                <scope line="316">
                    <declaration name="ge" type="GrantEntry" line="317"/>
                    <declaration name="permEnum" type="Enumeration" line="318"/>
                    <scope line="319">
                        <declaration name="pe" type="CryptoPermissionEntry" line="320"/>
                        <scope line="321"/>
                        <scope line="324">
                            <scope line="325"/>
                            <scope line="328"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ret" type="CryptoPermission[]" line="334"/>
            </method>
            <method name="isConsistent" type="boolean" line="338">
                <params>
                    <param name="alg" type="String"/>
                    <param name="exemptionMechanism" type="String"/>
                    <param name="processedPermissions" type="Hashtable"/>
                </params>
                <declaration name="thisExemptionMechanism" type="String" line="339"/>
                <scope line="340">
                    <declaration name="exemptionMechanisms" type="Vector" line="342"/>
                </scope>
                <scope line="347"/>
                <declaration name="exemptionMechanisms" type="Vector" line="350"/>
                <scope line="351">
                    <scope line="353"/>
                </scope>
                <scope line="357"/>
            </method>
            <class name="GrantEntry" line="364">
                <javadoc line="364">
                    Each grant entry in the policy configuration file is  represented by a
                      GrantEntry object.  &lt;p&gt;
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      grant {
                      permission javax.crypto.CryptoPermission &quot;DES&quot;, 56;
                      };
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      pe = new CryptoPermissionEntry(&quot;javax.crypto.CryptoPermission&quot;,
                      &quot;DES&quot;, 56);
                      ge = new GrantEntry();
                      ge.add(pe);
                      &lt;/pre&gt;                    
                    <see>
                        java.security.Permission                        
                    </see>
                    <see>
                        javax.crypto.CryptoPermission                        
                    </see>
                    <see>
                        javax.crypto.CryptoPermissions                        
                    </see>
                </javadoc>
                <declaration name="permissionEntries" type="Vector" line="386"/>
                <method name="GrantEntry" type="constructor" line="387"/>
                <method name="add" type="void" line="390">
                    <params>
                        <param name="pe" type="CryptoPermissionEntry"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="393">
                    <params>
                        <param name="pe" type="CryptoPermissionEntry"/>
                    </params>
                </method>
                <method name="contains" type="boolean" line="396">
                    <params>
                        <param name="pe" type="CryptoPermissionEntry"/>
                    </params>
                </method>
                <javadoc line="399">
                    Enumerate all the permission entries in this GrantEntry.                    
                </javadoc>
                <method name="permissionElements" type="Enumeration" line="402"/>
            </class>
            <class name="CryptoPermissionEntry" line="406">
                <javadoc line="406">
                    Each crypto permission entry in the policy configuration file is
                      represented by a CryptoPermissionEntry object.  &lt;p&gt;
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      permission javax.crypto.CryptoPermission &quot;DES&quot;, 56;
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      pe = new CryptoPermissionEntry(&quot;javax.crypto.cryptoPermission&quot;,
                      &quot;DES&quot;, 56);
                      &lt;/pre&gt;                    
                    <see>
                        java.security.Permissions                        
                    </see>
                    <see>
                        javax.crypto.CryptoPermission                        
                    </see>
                    <see>
                        javax.crypto.CryptoAllPermission                        
                    </see>
                </javadoc>
                <declaration name="cryptoPermission" type="String" line="424"/>
                <declaration name="alg" type="String" line="425"/>
                <declaration name="exemptionMechanism" type="String" line="426"/>
                <declaration name="maxKeySize" type="int" line="427"/>
                <declaration name="checkParam" type="boolean" line="428"/>
                <declaration name="algParamSpec" type="AlgorithmParameterSpec" line="429"/>
                <method name="CryptoPermissionEntry" type="constructor" line="430"/>
                <javadoc line="437">
                    Calculates a hash code value for the object.  Objects
                      which are equal will also have the same hashcode.                    
                </javadoc>
                <method name="hashCode" type="int" line="441">
                    <declaration name="retval" type="int" line="442"/>
                    <scope line="444"/>
                    <scope line="449"/>
                </method>
                <method name="equals" type="boolean" line="454">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="CryptoPermissionEntry" line="457"/>
                    <scope line="458"/>
                    <scope line="461"/>
                    <scope line="464"/>
                    <scope line="467"/>
                    <scope line="472"/>
                    <scope line="475"/>
                </method>
            </class>
            <class name="ParsingException" line="481">
                <extends class="GeneralSecurityException"/>
                <declaration name="serialVersionUID" type="long" line="482"/>
                <javadoc line="483">
                    Constructs a ParsingException with the specified
                      detail message.                    
                    <param>
                        msg the detail message.                        
                    </param>
                </javadoc>
                <method name="ParsingException" type="constructor" line="488">
                    <params>
                        <param name="msg" type="String"/>
                    </params>
                </method>
                <method name="ParsingException" type="constructor" line="491">
                    <params>
                        <param name="line" type="int"/>
                        <param name="msg" type="String"/>
                    </params>
                </method>
                <method name="ParsingException" type="constructor" line="494">
                    <params>
                        <param name="line" type="int"/>
                        <param name="expect" type="String"/>
                        <param name="actual" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>