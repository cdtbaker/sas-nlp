<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <class name="EncryptedPrivateKeyInfo" line="9">
            <javadoc line="9">
                This class implements the &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; type
                  as defined in PKCS #8.
                  &lt;p&gt;Its ASN.1 definition is as follows:
                  &lt;pre&gt;
                  EncryptedPrivateKeyInfo ::=  SEQUENCE {
                  encryptionAlgorithm   AlgorithmIdentifier,
                  encryptedData   OCTET STRING }
                  AlgorithmIdentifier  ::=  SEQUENCE  {
                  algorithm              OBJECT IDENTIFIER,
                  parameters             ANY DEFINED BY algorithm OPTIONAL  }
                  &lt;/pre&gt;                
                <author>
                    Valerie Peng                    
                </author>
                <see>
                    java.security.spec.PKCS8EncodedKeySpec                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="algid" type="AlgorithmId" line="26"/>
            <declaration name="encryptedData" type="byte[]" line="27"/>
            <declaration name="encoded" type="byte[]" line="28"/>
            <javadoc line="29">
                Constructs (i.e., parses) an &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; from
                  its ASN.1 encoding.                
                <param>
                    encoded the ASN.1 encoding of this object. The contents of
                      the array are copied to protect against subsequent modification.                    
                </param>
                <exception>
                    NullPointerException if the &lt;code&gt;encoded&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IOException if error occurs when parsing the ASN.1 encoding.                    
                </exception>
            </javadoc>
            <method name="EncryptedPrivateKeyInfo" type="constructor" line="37">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
                <scope line="38"/>
                <declaration name="val" type="DerValue" line="42"/>
                <declaration name="seq" type="DerValue[]" line="43"/>
                <scope line="46"/>
                <scope line="50"/>
                <scope line="54"/>
            </method>
            <javadoc line="58">
                Constructs an &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; from the
                  encryption algorithm name and the encrypted data.
                  &lt;p&gt;Note: This constructor will use null as the value of the
                  algorithm parameters. If the encryption algorithm has
                  parameters whose value is not null, a different constructor,
                  e.g. EncryptedPrivateKeyInfo(AlgorithmParameters, byte[]),
                  should be used.                
                <param>
                    algName encryption algorithm name. See Appendix A in the
                      &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA&quot;&gt;
                      Java Cryptography Architecture Reference Guide&lt;/a&gt;
                      for information about standard Cipher algorithm names.                    
                </param>
                <param>
                    encryptedData encrypted data. The contents of
                      &lt;code&gt;encrypedData&lt;/code&gt; are copied to protect against subsequent
                      modification when constructing this object.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;algName&lt;/code&gt; or
                      &lt;code&gt;encryptedData&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;encryptedData&lt;/code&gt;
                      is empty, i.e. 0-length.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the specified algName is
                      not supported.                    
                </exception>
            </javadoc>
            <method name="EncryptedPrivateKeyInfo" type="constructor" line="81">
                <params>
                    <param name="algName" type="String"/>
                    <param name="encryptedData" type="byte[]"/>
                </params>
                <scope line="84"/>
                <scope line="87"/>
                <scope line="90"/>
            </method>
            <javadoc line="95">
                Constructs an &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; from the
                  encryption algorithm parameters and the encrypted data.                
                <param>
                    algParams the algorithm parameters for the encryption
                      algorithm. &lt;code&gt;algParams.getEncoded()&lt;/code&gt; should return
                      the ASN.1 encoded bytes of the &lt;code&gt;parameters&lt;/code&gt; field
                      of the &lt;code&gt;AlgorithmIdentifer&lt;/code&gt; component of the
                      &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; type.                    
                </param>
                <param>
                    encryptedData encrypted data. The contents of
                      &lt;code&gt;encrypedData&lt;/code&gt; are copied to protect against
                      subsequent modification when constructing this object.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;algParams&lt;/code&gt; or
                      &lt;code&gt;encryptedData&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;encryptedData&lt;/code&gt;
                      is empty, i.e. 0-length.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the specified algName of
                      the specified &lt;code&gt;algParams&lt;/code&gt; parameter is not supported.                    
                </exception>
            </javadoc>
            <method name="EncryptedPrivateKeyInfo" type="constructor" line="113">
                <params>
                    <param name="algParams" type="AlgorithmParameters"/>
                    <param name="encryptedData" type="byte[]"/>
                </params>
                <scope line="114"/>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="124"/>
            </method>
            <javadoc line="129">
                Returns the encryption algorithm.
                  &lt;p&gt;Note: Standard name is returned instead of the specified one
                  in the constructor when such mapping is available.
                  See Appendix A in the
                  &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA&quot;&gt;
                  Java Cryptography Architecture Reference Guide&lt;/a&gt;
                  for information about standard Cipher algorithm names.                
                <return>
                    the encryption algorithm name.                    
                </return>
            </javadoc>
            <method name="getAlgName" type="String" line="140"/>
            <javadoc line="143">
                Returns the algorithm parameters used by the encryption algorithm.                
                <return>
                    the algorithm parameters.                    
                </return>
            </javadoc>
            <method name="getAlgParameters" type="AlgorithmParameters" line="147"/>
            <javadoc line="150">
                Returns the encrypted data.                
                <return>
                    the encrypted data. Returns a new array
                      each time this method is called.                    
                </return>
            </javadoc>
            <method name="getEncryptedData" type="byte[]" line="155"/>
            <javadoc line="158">
                Extract the enclosed PKCS8EncodedKeySpec object from the
                  encrypted data and return it.
                  &lt;br&gt;Note: In order to successfully retrieve the enclosed
                  PKCS8EncodedKeySpec object, &lt;code&gt;cipher&lt;/code&gt; needs
                  to be initialized to either Cipher.DECRYPT_MODE or
                  Cipher.UNWRAP_MODE, with the same key and parameters used
                  for generating the encrypted data.                
                <param>
                    cipher the initialized cipher object which will be
                      used for decrypting the encrypted data.                    
                </param>
                <return>
                    the PKCS8EncodedKeySpec object.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;cipher&lt;/code&gt;
                      is null.                    
                </exception>
                <exception>
                    InvalidKeySpecException if the given cipher is
                      inappropriate for the encrypted data or the encrypted
                      data is corrupted and cannot be decrypted.                    
                </exception>
            </javadoc>
            <method name="getKeySpec" type="PKCS8EncodedKeySpec" line="175">
                <params>
                    <param name="cipher" type="Cipher"/>
                </params>
                <declaration name="encoded" type="byte[]" line="176"/>
                <scope line="177"/>
                <scope line="181">
                    <declaration name="ikse" type="InvalidKeySpecException" line="182"/>
                </scope>
                <scope line="186">
                    <declaration name="ikse" type="InvalidKeySpecException" line="187"/>
                </scope>
                <scope line="191">
                    <declaration name="ikse" type="InvalidKeySpecException" line="192"/>
                </scope>
            </method>
            <method name="getKeySpecImpl" type="PKCS8EncodedKeySpec" line="198">
                <params>
                    <param name="decryptKey" type="Key"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="encoded" type="byte[]" line="199"/>
                <declaration name="c" type="Cipher" line="200"/>
                <scope line="201">
                    <scope line="202"/>
                    <scope line="205"/>
                </scope>
                <scope line="212"/>
                <scope line="215">
                    <declaration name="ike" type="InvalidKeyException" line="216"/>
                </scope>
                <scope line="220">
                    <declaration name="ike" type="InvalidKeyException" line="221"/>
                </scope>
            </method>
            <javadoc line="227">
                Extract the enclosed PKCS8EncodedKeySpec object from the
                  encrypted data and return it.                
                <param>
                    decryptKey key used for decrypting the encrypted data.                    
                </param>
                <return>
                    the PKCS8EncodedKeySpec object.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;decryptKey&lt;/code&gt;
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if cannot find appropriate
                      cipher to decrypt the encrypted data.                    
                </exception>
                <exception>
                    InvalidKeyException if &lt;code&gt;decryptKey&lt;/code&gt;
                      cannot be used to decrypt the encrypted data or the decryption
                      result is not a valid PKCS8KeySpec.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getKeySpec" type="PKCS8EncodedKeySpec" line="241">
                <params>
                    <param name="decryptKey" type="Key"/>
                </params>
                <scope line="242"/>
            </method>
            <javadoc line="247">
                Extract the enclosed PKCS8EncodedKeySpec object from the
                  encrypted data and return it.                
                <param>
                    decryptKey key used for decrypting the encrypted data.                    
                </param>
                <param>
                    providerName the name of provider whose Cipher
                      implementation will be used.                    
                </param>
                <return>
                    the PKCS8EncodedKeySpec object.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;decryptKey&lt;/code&gt;
                      or &lt;code&gt;providerName&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    NoSuchProviderException if no provider
                      &lt;code&gt;providerName&lt;/code&gt; is registered.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if cannot find appropriate
                      cipher to decrypt the encrypted data.                    
                </exception>
                <exception>
                    InvalidKeyException if &lt;code&gt;decryptKey&lt;/code&gt;
                      cannot be used to decrypt the encrypted data or the decryption
                      result is not a valid PKCS8KeySpec.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getKeySpec" type="PKCS8EncodedKeySpec" line="265">
                <params>
                    <param name="decryptKey" type="Key"/>
                    <param name="providerName" type="String"/>
                </params>
                <scope line="266"/>
                <scope line="269"/>
                <declaration name="provider" type="Provider" line="272"/>
                <scope line="273"/>
            </method>
            <javadoc line="278">
                Extract the enclosed PKCS8EncodedKeySpec object from the
                  encrypted data and return it.                
                <param>
                    decryptKey key used for decrypting the encrypted data.                    
                </param>
                <param>
                    provider the name of provider whose Cipher implementation
                      will be used.                    
                </param>
                <return>
                    the PKCS8EncodedKeySpec object.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;decryptKey&lt;/code&gt;
                      or &lt;code&gt;provider&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if cannot find appropriate
                      cipher to decrypt the encrypted data in &lt;code&gt;provider&lt;/code&gt;.                    
                </exception>
                <exception>
                    InvalidKeyException if &lt;code&gt;decryptKey&lt;/code&gt;
                      cannot be used to decrypt the encrypted data or the decryption
                      result is not a valid PKCS8KeySpec.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getKeySpec" type="PKCS8EncodedKeySpec" line="294">
                <params>
                    <param name="decryptKey" type="Key"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="295"/>
                <scope line="298"/>
            </method>
            <javadoc line="303">
                Returns the ASN.1 encoding of this object.                
                <return>
                    the ASN.1 encoding. Returns a new array
                      each time this method is called.                    
                </return>
                <exception>
                    IOException if error occurs when constructing its
                      ASN.1 encoding.                    
                </exception>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="310">
                <scope line="311">
                    <declaration name="out" type="DerOutputStream" line="312"/>
                    <declaration name="tmp" type="DerOutputStream" line="313"/>
                </scope>
            </method>
            <method name="checkTag" type="void" line="321">
                <params>
                    <param name="val" type="DerValue"/>
                    <param name="tag" type="byte"/>
                    <param name="valName" type="String"/>
                </params>
                <scope line="322"/>
            </method>
            <method name="checkPKCS8Encoding" type="void" line="326">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                </params>
                <declaration name="in" type="DerInputStream" line="327"/>
                <declaration name="values" type="DerValue[]" line="328"/>
                <declaration name="algid" type="DerInputStream" line="334"/>
                <scope line="336"/>
            </method>
        </class>
    </source>