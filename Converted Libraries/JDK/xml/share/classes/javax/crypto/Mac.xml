<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.Provider.Service"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="Mac" line="10">
            <implements interface="Cloneable"/>
            <javadoc line="10">
                This class provides the functionality of a &quot;Message Authentication Code&quot;
                  (MAC) algorithm.
                  &lt;p&gt; A MAC provides a way to check
                  the integrity of information transmitted over or stored in an unreliable
                  medium, based on a secret key. Typically, message
                  authentication codes are used between two parties that share a secret
                  key in order to validate information transmitted between these
                  parties.
                  &lt;p&gt; A MAC mechanism that is based on cryptographic hash functions is
                  referred to as HMAC. HMAC can be used with any cryptographic hash function,
                  e.g., MD5 or SHA-1, in combination with a secret shared key. HMAC is
                  specified in RFC 2104.
                  &lt;p&gt; Every implementation of the Java platform is required to support
                  the following standard &lt;code&gt;Mac&lt;/code&gt; algorithms:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;HmacMD5&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;HmacSHA1&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;HmacSHA256&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Mac&quot;&gt;
                  Mac section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Jan Luehe                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="debug" type="Debug" line="40"/>
            <declaration name="provider" type="Provider" line="41"/>
            <declaration name="spi" type="MacSpi" line="42"/>
            <declaration name="algorithm" type="String" line="43"/>
            <declaration name="initialized" type="boolean" line="44"/>
            <declaration name="firstService" type="Service" line="45"/>
            <declaration name="serviceIterator" type="Iterator" line="46"/>
            <declaration name="lock" type="Object" line="47"/>
            <javadoc line="48">
                Creates a MAC object.                
                <param>
                    macSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    algorithm the algorithm                    
                </param>
            </javadoc>
            <method name="Mac" type="constructor" line="54">
                <params>
                    <param name="macSpi" type="MacSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <method name="Mac" type="constructor" line="61">
                <params>
                    <param name="s" type="Service"/>
                    <param name="t" type="Iterator"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="67">
                Returns the algorithm name of this &lt;code&gt;Mac&lt;/code&gt; object.
                  &lt;p&gt;This is the same name that was specified in one of the
                  &lt;code&gt;getInstance&lt;/code&gt; calls that created this
                  &lt;code&gt;Mac&lt;/code&gt; object.                
                <return>
                    the algorithm name of this &lt;code&gt;Mac&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="74"/>
            <javadoc line="77">
                Returns a &lt;code&gt;Mac&lt;/code&gt; object that implements the
                  specified MAC algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new Mac object encapsulating the
                  MacSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested MAC algorithm.
                      See the Mac section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Mac&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new &lt;code&gt;Mac&lt;/code&gt; object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      MacSpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="Mac" line="98">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="services" type="List" line="99"/>
                <declaration name="t" type="Iterator" line="100"/>
                <scope line="101">
                    <declaration name="s" type="Service" line="102"/>
                    <scope line="103"/>
                </scope>
            </method>
            <javadoc line="110">
                Returns a &lt;code&gt;Mac&lt;/code&gt; object that implements the
                  specified MAC algorithm.
                  &lt;p&gt; A new Mac object encapsulating the
                  MacSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested MAC algorithm.
                      See the Mac section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Mac&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;Mac&lt;/code&gt; object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a MacSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt;
                      is null or empty.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="Mac" line="135">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="136"/>
            </method>
            <javadoc line="139">
                Returns a &lt;code&gt;Mac&lt;/code&gt; object that implements the
                  specified MAC algorithm.
                  &lt;p&gt; A new Mac object encapsulating the
                  MacSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the standard name of the requested MAC algorithm.
                      See the Mac section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Mac&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;Mac&lt;/code&gt; object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a MacSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt;
                      is null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="Mac" line="160">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="161"/>
            </method>
            <declaration name="warnCount" type="int" line="164"/>
            <javadoc line="165">
                Choose the Spi from the first provider available. Used if
                  delayed provider selection is not possible because init()
                  is not the first method called.                
            </javadoc>
            <method name="chooseFirstProvider" type="void" line="170">
                <scope line="171"/>
                <scope line="174">
                    <scope line="175"/>
                    <scope line="178">
                        <declaration name="w" type="int" line="179"/>
                        <scope line="180">
                            <scope line="182"/>
                        </scope>
                    </scope>
                    <declaration name="lastException" type="Exception" line="188"/>
                    <scope line="189">
                        <declaration name="s" type="Service" line="190"/>
                        <scope line="191"/>
                        <scope line="195"/>
                        <scope line="198"/>
                        <scope line="201">
                            <declaration name="obj" type="Object" line="202"/>
                            <scope line="203"/>
                        </scope>
                        <scope line="212"/>
                    </scope>
                    <declaration name="e" type="ProviderException" line="216"/>
                    <scope line="217"/>
                </scope>
            </method>
            <method name="chooseProvider" type="void" line="223">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
                <scope line="224">
                    <scope line="225"/>
                    <declaration name="lastException" type="Exception" line="229"/>
                    <scope line="230">
                        <declaration name="s" type="Service" line="231"/>
                        <scope line="232"/>
                        <scope line="236"/>
                        <scope line="239"/>
                        <scope line="242"/>
                        <scope line="245">
                            <declaration name="spi" type="MacSpi" line="246"/>
                        </scope>
                        <scope line="254">
                            <scope line="255"/>
                        </scope>
                    </scope>
                    <scope line="260"/>
                    <scope line="263"/>
                    <scope line="266"/>
                    <declaration name="kName" type="String" line="269"/>
                </scope>
            </method>
            <javadoc line="273">
                Returns the provider of this &lt;code&gt;Mac&lt;/code&gt; object.                
                <return>
                    the provider of this &lt;code&gt;Mac&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="277"/>
            <javadoc line="281">
                Returns the length of the MAC in bytes.                
                <return>
                    the MAC length in bytes.                    
                </return>
            </javadoc>
            <method name="getMacLength" type="int" line="285"/>
            <javadoc line="289">
                Initializes this &lt;code&gt;Mac&lt;/code&gt; object with the given key.                
                <param>
                    key the key.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this MAC.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="295">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <scope line="296">
                    <scope line="297"/>
                    <scope line="300"/>
                </scope>
                <scope line="304"/>
            </method>
            <javadoc line="309">
                Initializes this &lt;code&gt;Mac&lt;/code&gt; object with the given key and
                  algorithm parameters.                
                <param>
                    key the key.                    
                </param>
                <param>
                    params the algorithm parameters.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this MAC.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this MAC.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="319">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
                <scope line="320"/>
                <scope line="323"/>
            </method>
            <javadoc line="328">
                Processes the given byte.                
                <param>
                    input the input byte to be processed.                    
                </param>
                <exception>
                    IllegalStateException if this &lt;code&gt;Mac&lt;/code&gt; has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="334">
                <params>
                    <param name="input" type="byte"/>
                </params>
                <scope line="336"/>
            </method>
            <javadoc line="341">
                Processes the given array of bytes.                
                <param>
                    input the array of bytes to be processed.                    
                </param>
                <exception>
                    IllegalStateException if this &lt;code&gt;Mac&lt;/code&gt; has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="347">
                <params>
                    <param name="input" type="byte[]"/>
                </params>
                <scope line="349"/>
                <scope line="352"/>
            </method>
            <javadoc line="356">
                Processes the first &lt;code&gt;len&lt;/code&gt; bytes in &lt;code&gt;input&lt;/code&gt;,
                  starting at &lt;code&gt;offset&lt;/code&gt; inclusive.                
                <param>
                    input the input buffer.                    
                </param>
                <param>
                    offset the offset in &lt;code&gt;input&lt;/code&gt; where the input starts.                    
                </param>
                <param>
                    len the number of bytes to process.                    
                </param>
                <exception>
                    IllegalStateException if this &lt;code&gt;Mac&lt;/code&gt; has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="update" type="void" line="365">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="367"/>
                <scope line="370"/>
            </method>
            <javadoc line="375">
                Processes &lt;code&gt;input.remaining()&lt;/code&gt; bytes in the ByteBuffer
                  &lt;code&gt;input&lt;/code&gt;, starting at &lt;code&gt;input.position()&lt;/code&gt;.
                  Upon return, the buffer&apos;s position will be equal to its limit;
                  its limit will not have changed.                
                <param>
                    input the ByteBuffer                    
                </param>
                <exception>
                    IllegalStateException if this &lt;code&gt;Mac&lt;/code&gt; has not been
                      initialized.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="update" type="void" line="385">
                <params>
                    <param name="input" type="ByteBuffer"/>
                </params>
                <scope line="387"/>
                <scope line="390"/>
            </method>
            <javadoc line="395">
                Finishes the MAC operation.
                  &lt;p&gt;A call to this method resets this &lt;code&gt;Mac&lt;/code&gt; object to the
                  state it was in when previously initialized via a call to
                  &lt;code&gt;init(Key)&lt;/code&gt; or
                  &lt;code&gt;init(Key, AlgorithmParameterSpec)&lt;/code&gt;.
                  That is, the object is reset and available to generate another MAC from
                  the same key, if desired, via new calls to &lt;code&gt;update&lt;/code&gt; and
                  &lt;code&gt;doFinal&lt;/code&gt;.
                  (In order to reuse this &lt;code&gt;Mac&lt;/code&gt; object with a different key,
                  it must be reinitialized via a call to &lt;code&gt;init(Key)&lt;/code&gt; or
                  &lt;code&gt;init(Key, AlgorithmParameterSpec)&lt;/code&gt;.                
                <return>
                    the MAC result.                    
                </return>
                <exception>
                    IllegalStateException if this &lt;code&gt;Mac&lt;/code&gt; has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="doFinal" type="byte[]" line="411">
                <scope line="413"/>
                <declaration name="mac" type="byte[]" line="416"/>
            </method>
            <javadoc line="420">
                Finishes the MAC operation.
                  &lt;p&gt;A call to this method resets this &lt;code&gt;Mac&lt;/code&gt; object to the
                  state it was in when previously initialized via a call to
                  &lt;code&gt;init(Key)&lt;/code&gt; or
                  &lt;code&gt;init(Key, AlgorithmParameterSpec)&lt;/code&gt;.
                  That is, the object is reset and available to generate another MAC from
                  the same key, if desired, via new calls to &lt;code&gt;update&lt;/code&gt; and
                  &lt;code&gt;doFinal&lt;/code&gt;.
                  (In order to reuse this &lt;code&gt;Mac&lt;/code&gt; object with a different key,
                  it must be reinitialized via a call to &lt;code&gt;init(Key)&lt;/code&gt; or
                  &lt;code&gt;init(Key, AlgorithmParameterSpec)&lt;/code&gt;.
                  &lt;p&gt;The MAC result is stored in &lt;code&gt;output&lt;/code&gt;, starting at
                  &lt;code&gt;outOffset&lt;/code&gt; inclusive.                
                <param>
                    output the buffer where the MAC result is stored                    
                </param>
                <param>
                    outOffset the offset in &lt;code&gt;output&lt;/code&gt; where the MAC is
                      stored                    
                </param>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result                    
                </exception>
                <exception>
                    IllegalStateException if this &lt;code&gt;Mac&lt;/code&gt; has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="doFinal" type="void" line="442">
                <params>
                    <param name="output" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <scope line="444"/>
                <declaration name="macLen" type="int" line="447"/>
                <scope line="448"/>
                <declaration name="mac" type="byte[]" line="451"/>
            </method>
            <javadoc line="455">
                Processes the given array of bytes and finishes the MAC operation.
                  &lt;p&gt;A call to this method resets this &lt;code&gt;Mac&lt;/code&gt; object to the
                  state it was in when previously initialized via a call to
                  &lt;code&gt;init(Key)&lt;/code&gt; or
                  &lt;code&gt;init(Key, AlgorithmParameterSpec)&lt;/code&gt;.
                  That is, the object is reset and available to generate another MAC from
                  the same key, if desired, via new calls to &lt;code&gt;update&lt;/code&gt; and
                  &lt;code&gt;doFinal&lt;/code&gt;.
                  (In order to reuse this &lt;code&gt;Mac&lt;/code&gt; object with a different key,
                  it must be reinitialized via a call to &lt;code&gt;init(Key)&lt;/code&gt; or
                  &lt;code&gt;init(Key, AlgorithmParameterSpec)&lt;/code&gt;.                
                <param>
                    input data in bytes                    
                </param>
                <return>
                    the MAC result.                    
                </return>
                <exception>
                    IllegalStateException if this &lt;code&gt;Mac&lt;/code&gt; has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="doFinal" type="byte[]" line="472">
                <params>
                    <param name="input" type="byte[]"/>
                </params>
                <scope line="474"/>
            </method>
            <javadoc line="480">
                Resets this &lt;code&gt;Mac&lt;/code&gt; object.
                  &lt;p&gt;A call to this method resets this &lt;code&gt;Mac&lt;/code&gt; object to the
                  state it was in when previously initialized via a call to
                  &lt;code&gt;init(Key)&lt;/code&gt; or
                  &lt;code&gt;init(Key, AlgorithmParameterSpec)&lt;/code&gt;.
                  That is, the object is reset and available to generate another MAC from
                  the same key, if desired, via new calls to &lt;code&gt;update&lt;/code&gt; and
                  &lt;code&gt;doFinal&lt;/code&gt;.
                  (In order to reuse this &lt;code&gt;Mac&lt;/code&gt; object with a different key,
                  it must be reinitialized via a call to &lt;code&gt;init(Key)&lt;/code&gt; or
                  &lt;code&gt;init(Key, AlgorithmParameterSpec)&lt;/code&gt;.                
            </javadoc>
            <method name="reset" type="void" line="493"/>
            <javadoc line="497">
                Returns a clone if the provider implementation is cloneable.                
                <return>
                    a clone if the provider implementation is cloneable.                    
                </return>
                <exception>
                    CloneNotSupportedException if this is called on a
                      delegate that does not support &lt;code&gt;Cloneable&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="503">
                <declaration name="that" type="Mac" line="505"/>
            </method>
        </class>
    </source>