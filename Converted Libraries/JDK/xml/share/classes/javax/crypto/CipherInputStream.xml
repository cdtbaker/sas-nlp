<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.io"/>
        <class name="CipherInputStream" line="3">
            <extends class="FilterInputStream"/>
            <javadoc line="3">
                A CipherInputStream is composed of an InputStream and a Cipher so
                  that read() methods return data that are read in from the
                  underlying InputStream but have been additionally processed by the
                  Cipher.  The Cipher must be fully initialized before being used by
                  a CipherInputStream.
                  &lt;p&gt; For example, if the Cipher is initialized for decryption, the
                  CipherInputStream will attempt to read in data and decrypt them,
                  before returning the decrypted data.
                  &lt;p&gt; This class adheres strictly to the semantics, especially the
                  failure semantics, of its ancestor classes
                  java.io.FilterInputStream and java.io.InputStream.  This class has
                  exactly those methods specified in its ancestor classes, and
                  overrides them all.  Moreover, this class catches all exceptions
                  that are not thrown by its ancestor classes.  In particular, the
                  &lt;code&gt;skip&lt;/code&gt; method skips, and the &lt;code&gt;available&lt;/code&gt;
                  method counts only data that have been processed by the encapsulated Cipher.
                  &lt;p&gt; It is crucial for a programmer using this class not to use
                  methods that are not defined or overriden in this class (such as a
                  new method or constructor that is later added to one of the super
                  classes), because the design and implementation of those methods
                  are unlikely to have considered security impact with regard to
                  CipherInputStream.                
                <author>
                    Li Gong                    
                </author>
                <see>
                    java.io.InputStream                    
                </see>
                <see>
                    java.io.FilterInputStream                    
                </see>
                <see>
                    javax.crypto.Cipher                    
                </see>
                <see>
                    javax.crypto.CipherOutputStream                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="cipher" type="Cipher" line="34"/>
            <declaration name="input" type="InputStream" line="35"/>
            <declaration name="ibuffer" type="byte[]" line="36"/>
            <declaration name="done" type="boolean" line="37"/>
            <declaration name="obuffer" type="byte[]" line="38"/>
            <declaration name="ostart" type="int" line="39"/>
            <declaration name="ofinish" type="int" line="40"/>
            <javadoc line="41">
                private convenience function.
                  Entry condition: ostart = ofinish
                  Exit condition: ostart &lt;= ofinish
                  return (ofinish-ostart) (we have this many bytes for you)
                  return 0 (no data now, but could have more later)
                  return -1 (absolutely no more data)                
            </javadoc>
            <method name="getMoreData" type="int" line="49">
                <declaration name="readin" type="int" line="51"/>
                <scope line="52">
                    <scope line="54"/>
                    <scope line="57"/>
                    <scope line="60"/>
                    <scope line="64"/>
                </scope>
                <scope line="70"/>
                <scope line="73"/>
            </method>
            <javadoc line="82">
                Constructs a CipherInputStream from an InputStream and a
                  Cipher.
                  &lt;br&gt;Note: if the specified input stream or cipher is
                  null, a NullPointerException may be thrown later when
                  they are used.                
                <param>
                    is the to-be-processed input stream                    
                </param>
                <param>
                    c an initialized Cipher object                    
                </param>
            </javadoc>
            <method name="CipherInputStream" type="constructor" line="91">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="c" type="Cipher"/>
                </params>
            </method>
            <javadoc line="96">
                Constructs a CipherInputStream from an InputStream without
                  specifying a Cipher. This has the effect of constructing a
                  CipherInputStream using a NullCipher.
                  &lt;br&gt;Note: if the specified input stream is null, a
                  NullPointerException may be thrown later when it is used.                
                <param>
                    is the to-be-processed input stream                    
                </param>
            </javadoc>
            <method name="CipherInputStream" type="constructor" line="104">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <javadoc line="109">
                Reads the next byte of data from this input stream. The value
                  byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range
                  &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available
                  because the end of the stream has been reached, the value
                  &lt;code&gt;-1&lt;/code&gt; is returned. This method blocks until input data
                  is available, the end of the stream is detected, or an exception
                  is thrown.
                  &lt;p&gt;                
                <return>
                    the next byte of data, or <code>-1</code> if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <since>
                    JCE1.2                    
                </since>
            </javadoc>
            <method name="read" type="int" line="123">
                <scope line="124">
                    <declaration name="i" type="int" line="125"/>
                </scope>
            </method>
            <javadoc line="131">
                Reads up to &lt;code&gt;b.length&lt;/code&gt; bytes of data from this input
                  stream into an array of bytes.
                  &lt;p&gt;
                  The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; calls
                  the &lt;code&gt;read&lt;/code&gt; method of three arguments with the arguments
                  &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> is there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.InputStream#read(byte[],int,int)                    
                </see>
                <since>
                    JCE1.2                    
                </since>
            </javadoc>
            <method name="read" type="int" line="146">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="149">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this input stream
                  into an array of bytes. This method blocks until some input is
                  available. If the first argument is &lt;code&gt;null,&lt;/code&gt; up to
                  &lt;code&gt;len&lt;/code&gt; bytes are read and discarded.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in the destination array
                      <code>buf</code>                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.InputStream#read()                    
                </see>
                <since>
                    JCE1.2                    
                </since>
            </javadoc>
            <method name="read" type="int" line="165">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="166">
                    <declaration name="i" type="int" line="167"/>
                </scope>
                <scope line="171"/>
                <declaration name="available" type="int" line="174"/>
                <scope line="176"/>
            </method>
            <javadoc line="182">
                Skips &lt;code&gt;n&lt;/code&gt; bytes of input from the bytes that can be read
                  from this input stream without blocking.
                  &lt;p&gt;Fewer bytes than requested might be skipped.
                  The actual number of bytes skipped is equal to &lt;code&gt;n&lt;/code&gt; or
                  the result of a call to{@link #available() &lt;code&gt;available&lt;/code&gt;},
                  whichever is smaller.
                  If &lt;code&gt;n&lt;/code&gt; is less than zero, no bytes are skipped.
                  &lt;p&gt;The actual number of bytes skipped is returned.                
                <param>
                    n the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <since>
                    JCE1.2                    
                </since>
            </javadoc>
            <method name="skip" type="long" line="196">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="available" type="int" line="197"/>
                <scope line="198"/>
                <scope line="201"/>
            </method>
            <javadoc line="207">
                Returns the number of bytes that can be read from this input
                  stream without blocking. The &lt;code&gt;available&lt;/code&gt; method of
                  &lt;code&gt;InputStream&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;. This method
                  &lt;B&gt;should&lt;/B&gt; be overridden by subclasses.                
                <return>
                    the number of bytes that can be read from this input stream
                      without blocking.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <since>
                    JCE1.2                    
                </since>
            </javadoc>
            <method name="available" type="int" line="217"/>
            <javadoc line="220">
                Closes this input stream and releases any system resources
                  associated with the stream.
                  &lt;p&gt;
                  The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;CipherInputStream&lt;/code&gt;
                  calls the &lt;code&gt;close&lt;/code&gt; method of its underlying input
                  stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <since>
                    JCE1.2                    
                </since>
            </javadoc>
            <method name="close" type="void" line="230">
                <scope line="232"/>
                <scope line="235"/>
                <scope line="237"/>
            </method>
            <javadoc line="242">
                Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt;
                  and &lt;code&gt;reset&lt;/code&gt; methods, which it does not.                
                <return>
                    <code>false</code>, since this class does not support the
                      <code>mark</code> and <code>reset</code> methods.                    
                </return>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.InputStream#reset()                    
                </see>
                <since>
                    JCE1.2                    
                </since>
            </javadoc>
            <method name="markSupported" type="boolean" line="251"/>
        </class>
    </source>