<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.security"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <class name="CryptoPermissions" line="39">
            <extends class="PermissionCollection"/>
            <comment line="65">
                This class is similar to java.security.Permissions                
            </comment>
            <comment line="429">
                all the perms                
            </comment>
            <comment line="431">
                the current set                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="39">
                This class contains CryptoPermission objects, organized into
                  PermissionCollections according to algorithm names.
                  &lt;p&gt;When the &lt;code&gt;add&lt;/code&gt; method is called to add a
                  CryptoPermission, the CryptoPermission is stored in the
                  appropriate PermissionCollection. If no such
                  collection exists yet, the algorithm name associated with
                  the CryptoPermission object is
                  determined and the &lt;code&gt;newPermissionCollection&lt;/code&gt; method
                  is called on the CryptoPermission or CryptoAllPermission class to
                  create the PermissionCollection and add it to the Permissions object.                
                <see>
                    javax.crypto.CryptoPermission                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <author>
                    Sharon Liu                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="62"/>
            <declaration name="perms" type="Hashtable" line="65"/>
            <javadoc line="67">
                Creates a new CryptoPermissions object containing
                  no CryptoPermissionCollections.                
            </javadoc>
            <method name="CryptoPermissions" type="constructor" line="71"/>
            <javadoc line="75">
                Populates the crypto policy from the specified
                  InputStream into this CryptoPermissions object.                
                <param>
                    in the InputStream to load from.                    
                </param>
                <exception>
                    SecurityException if cannot load
                      successfully.                    
                </exception>
            </javadoc>
            <method name="load" type="void" line="85">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="parser" type="CryptoPolicyParser" line="86"/>
                <declaration name="parsingResult" type="CryptoPermission[]" line="89"/>
                <scope line="90"/>
            </method>
            <javadoc line="95">
                Returns true if this CryptoPermissions object doesn&apos;t
                  contain any CryptoPermission objects; otherwise, returns
                  false.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="100"/>
            <javadoc line="104">
                Adds a permission object to the PermissionCollection for the
                  algorithm returned by
                  &lt;code&gt;(CryptoPermission)permission.getAlgorithm()&lt;/code&gt;.
                  This method creates
                  a new PermissionCollection object (and adds the permission to it)
                  if an appropriate collection does not yet exist. &lt;p&gt;                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    SecurityException if this CryptoPermissions object is
                      marked as readonly.                    
                </exception>
                <see>
                    isReadOnly                    
                </see>
            </javadoc>
            <method name="add" type="void" line="120">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="cryptoPerm" type="CryptoPermission" line="130"/>
                <declaration name="pc" type="PermissionCollection" line="131"/>
                <declaration name="alg" type="String" line="134"/>
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Checks if this object&apos;s PermissionCollection for permissons
                  of the specified permission&apos;s algorithm implies the specified
                  permission. Returns true if the checking succeeded.                
                <param>
                    permission the Permission object to check.                    
                </param>
                <return>
                    true if "permission" is implied by the permissions
                      in the PermissionCollection it belongs to, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="151">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="152"/>
                <declaration name="cryptoPerm" type="CryptoPermission" line="156"/>
                <declaration name="pc" type="PermissionCollection" line="158"/>
            </method>
            <javadoc line="163">
                Returns an enumeration of all the Permission objects in all the
                  PermissionCollections in this CryptoPermissions object.                
                <return>
                    an enumeration of all the Permissions.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration" line="169">
                <comment line="171">
                    go through each Permissions in the hash table
                     and call their elements() function.                    
                </comment>
            </method>
            <javadoc line="175">
                Returns a CryptoPermissions object which
                  represents the minimum of the specified
                  CryptoPermissions object and this
                  CryptoPermissions object.                
                <param>
                    other the CryptoPermission
                      object to compare with this object.                    
                </param>
            </javadoc>
            <method name="getMinimum" type="CryptoPermissions" line="184">
                <params>
                    <param name="other" type="CryptoPermissions"/>
                </params>
                <comment line="209">
                    For each algorithm in this CryptoPermissions,
                     find out if there is anything we should add into
                     ret.                    
                </comment>
                <comment line="225">
                    The other CryptoPermissions
                     doesn&apos;t allow this given
                     algorithm at all. Just skip this
                     algorithm.                    
                </comment>
                <comment line="245">
                    If this CryptoPermissions doesn&apos;t
                     have a wildcard, we are done.                    
                </comment>
                <comment line="251">
                    Deal with the algorithms only appear
                     in the other CryptoPermissions.                    
                </comment>
                <scope line="185"/>
                <scope line="189"/>
                <scope line="193"/>
                <declaration name="ret" type="CryptoPermissions" line="197"/>
                <declaration name="thatWildcard" type="PermissionCollection" line="200"/>
                <declaration name="maxKeySize" type="int" line="203"/>
                <scope line="204"/>
                <declaration name="thisKeys" type="Enumeration" line="211"/>
                <scope line="212">
                    <declaration name="alg" type="String" line="213"/>
                    <declaration name="thisPc" type="PermissionCollection" line="215"/>
                    <declaration name="thatPc" type="PermissionCollection" line="217"/>
                    <declaration name="partialResult" type="CryptoPermission[]" line="220"/>
                    <scope line="222">
                        <scope line="223"/>
                    </scope>
                    <scope line="231"/>
                    <scope line="235"/>
                </scope>
                <declaration name="thisWildcard" type="PermissionCollection" line="240"/>
                <scope line="246"/>
                <declaration name="thatKeys" type="Enumeration" line="255"/>
                <scope line="256">
                    <declaration name="alg" type="String" line="257"/>
                    <scope line="259"/>
                    <declaration name="thatPc" type="PermissionCollection" line="263"/>
                    <declaration name="partialResult" type="CryptoPermission[]" line="266"/>
                    <scope line="270"/>
                </scope>
            </method>
            <javadoc line="277">
                Get the minimum of the two given PermissionCollection
                  &lt;code&gt;thisPc&lt;/code&gt; and &lt;code&gt;thatPc&lt;/code&gt;.                
                <param>
                    thisPc the first given PermissionColloection
                      object.                    
                </param>
                <param>
                    thatPc the second given PermissionCollection
                      object.                    
                </param>
            </javadoc>
            <method name="getMinimum" type="CryptoPermission[]" line="288">
                <params>
                    <param name="thisPc" type="PermissionCollection"/>
                    <param name="thatPc" type="PermissionCollection"/>
                </params>
                <comment line="294">
                    For each CryptoPermission in
                     thisPc object, do the following:
                     1) if this CryptoPermission is implied
                         by thatPc, this CryptoPermission
                         should be returned, and we can
                         move on to check the next
                         CryptoPermission in thisPc.
                     2) otherwise, we should return
                         all CryptoPermissions in thatPc
                         which
                         are implied by this CryptoPermission.
                         Then we can move on to the
                         next CryptoPermission in thisPc.                    
                </comment>
                <declaration name="permVector" type="Vector" line="289"/>
                <declaration name="thisPcPermissions" type="Enumeration" line="291"/>
                <scope line="306">
                    <declaration name="thisCp" type="CryptoPermission" line="307"/>
                    <declaration name="thatPcPermissions" type="Enumeration" line="310"/>
                    <scope line="311">
                        <declaration name="thatCp" type="CryptoPermission" line="312"/>
                        <scope line="315"/>
                        <scope line="319"/>
                    </scope>
                </scope>
                <declaration name="ret" type="CryptoPermission[]" line="325"/>
            </method>
            <javadoc line="330">
                Returns all the CryptoPermission objects in the given
                  PermissionCollection object
                  whose maximum keysize no greater than &lt;code&gt;maxKeySize&lt;/code&gt;.
                  For all CryptoPermission objects with a maximum keysize greater
                  than &lt;code&gt;maxKeySize&lt;/code&gt;, this method constructs a
                  corresponding CryptoPermission object whose maximum keysize is
                  set to &lt;code&gt;maxKeySize&lt;/code&gt;, and includes that in the result.                
                <param>
                    maxKeySize the given maximum key size.                    
                </param>
                <param>
                    pc the given PermissionCollection object.                    
                </param>
            </javadoc>
            <method name="getMinimum" type="CryptoPermission[]" line="344">
                <params>
                    <param name="maxKeySize" type="int"/>
                    <param name="pc" type="PermissionCollection"/>
                </params>
                <declaration name="permVector" type="Vector" line="345"/>
                <declaration name="enum_" type="Enumeration" line="347"/>
                <scope line="349">
                    <declaration name="cp" type="CryptoPermission" line="350"/>
                    <scope line="352"/>
                    <scope line="354">
                        <scope line="355"/>
                        <scope line="361"/>
                    </scope>
                </scope>
                <declaration name="ret" type="CryptoPermission[]" line="370"/>
            </method>
            <javadoc line="375">
                Returns the PermissionCollection for the
                  specified algorithm. Returns null if there
                  isn&apos;t such a PermissionCollection.                
                <param>
                    alg the algorithm name.                    
                </param>
            </javadoc>
            <method name="getPermissionCollection" type="PermissionCollection" line="382">
                <params>
                    <param name="alg" type="String"/>
                </params>
                <comment line="384">
                    If this CryptoPermissions includes CryptoAllPermission,
                     we should return CryptoAllPermission.                    
                </comment>
                <comment line="393">
                    If there isn&apos;t a PermissionCollection for
                     the given algorithm,we should return the
                     PermissionCollection for the wildcard
                     if there is one.                    
                </comment>
                <scope line="385"/>
                <declaration name="pc" type="PermissionCollection" line="390"/>
                <scope line="396"/>
            </method>
            <javadoc line="403">
                Returns the PermissionCollection for the algorithm
                  associated with the specified CryptoPermission
                  object. Creates such a PermissionCollection
                  if such a PermissionCollection does not
                  exist yet.                
                <param>
                    cryptoPerm the CryptoPermission object.                    
                </param>
            </javadoc>
            <method name="getPermissionCollection" type="PermissionCollection" line="413">
                <params>
                    <param name="cryptoPerm" type="CryptoPermission"/>
                </params>
                <declaration name="alg" type="String" line="415"/>
                <declaration name="pc" type="PermissionCollection" line="417"/>
                <scope line="419"/>
            </method>
        </class>
        <class name="PermissionsEnumerator" line="426">
            <comment line="65">
                This class is similar to java.security.Permissions                
            </comment>
            <comment line="429">
                all the perms                
            </comment>
            <comment line="431">
                the current set                
            </comment>
            <implements interface="Enumeration"/>
            <declaration name="perms" type="Enumeration" line="429"/>
            <declaration name="permset" type="Enumeration" line="431"/>
            <method name="PermissionsEnumerator" type="constructor" line="433">
                <params>
                    <param name="e" type="Enumeration"/>
                </params>
            </method>
            <method name="hasMoreElements" type="boolean" line="438">
                <comment line="440">
                    if we enter with permissionimpl null, we know
                     there are no more left.                    
                </comment>
                <comment line="446">
                    try to see if there are any left in the current one                    
                </comment>
                <comment line="451">
                    get the next one that has something in it...                    
                </comment>
                <comment line="454">
                    if it is null, we are done!                    
                </comment>
            </method>
            <method name="nextElement" type="Object" line="457">
                <comment line="459">
                    hasMoreElements will update permset to the next permset
                     with something in it...                    
                </comment>
                <scope line="461"/>
                <scope line="463"/>
            </method>
            <method name="getNextEnumWithMore" type="Enumeration" line="469">
                <scope line="470">
                    <declaration name="pc" type="PermissionCollection" line="471"/>
                    <declaration name="next" type="Enumeration" line="473"/>
                </scope>
            </method>
        </class>
    </source>