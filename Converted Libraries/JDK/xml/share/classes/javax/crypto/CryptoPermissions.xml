<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.security"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <class name="CryptoPermissions" line="12">
            <extends class="PermissionCollection"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                This class contains CryptoPermission objects, organized into
                  PermissionCollections according to algorithm names.
                  &lt;p&gt;When the &lt;code&gt;add&lt;/code&gt; method is called to add a
                  CryptoPermission, the CryptoPermission is stored in the
                  appropriate PermissionCollection. If no such
                  collection exists yet, the algorithm name associated with
                  the CryptoPermission object is
                  determined and the &lt;code&gt;newPermissionCollection&lt;/code&gt; method
                  is called on the CryptoPermission or CryptoAllPermission class to
                  create the PermissionCollection and add it to the Permissions object.                
                <see>
                    javax.crypto.CryptoPermission                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <author>
                    Sharon Liu                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="30"/>
            <declaration name="perms" type="Hashtable" line="31"/>
            <javadoc line="32">
                Creates a new CryptoPermissions object containing
                  no CryptoPermissionCollections.                
            </javadoc>
            <method name="CryptoPermissions" type="constructor" line="36"/>
            <javadoc line="39">
                Populates the crypto policy from the specified
                  InputStream into this CryptoPermissions object.                
                <param>
                    in the InputStream to load from.                    
                </param>
                <exception>
                    SecurityException if cannot load
                      successfully.                    
                </exception>
            </javadoc>
            <method name="load" type="void" line="46">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="parser" type="CryptoPolicyParser" line="47"/>
                <declaration name="parsingResult" type="CryptoPermission[]" line="49"/>
                <scope line="50"/>
            </method>
            <javadoc line="54">
                Returns true if this CryptoPermissions object doesn&apos;t
                  contain any CryptoPermission objects; otherwise, returns
                  false.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="59"/>
            <javadoc line="62">
                Adds a permission object to the PermissionCollection for the
                  algorithm returned by
                  &lt;code&gt;(CryptoPermission)permission.getAlgorithm()&lt;/code&gt;.
                  This method creates
                  a new PermissionCollection object (and adds the permission to it)
                  if an appropriate collection does not yet exist. &lt;p&gt;                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    SecurityException if this CryptoPermissions object is
                      marked as readonly.                    
                </exception>
                <see>
                    isReadOnly                    
                </see>
            </javadoc>
            <method name="add" type="void" line="74">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="cryptoPerm" type="CryptoPermission" line="77"/>
                <declaration name="pc" type="PermissionCollection" line="78"/>
                <declaration name="alg" type="String" line="80"/>
                <scope line="81"/>
            </method>
            <javadoc line="85">
                Checks if this object&apos;s PermissionCollection for permissons
                  of the specified permission&apos;s algorithm implies the specified
                  permission. Returns true if the checking succeeded.                
                <param>
                    permission the Permission object to check.                    
                </param>
                <return>
                    true if &quot;permission&quot; is implied by the permissions
                      in the PermissionCollection it belongs to, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="93">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="94"/>
                <declaration name="cryptoPerm" type="CryptoPermission" line="97"/>
                <declaration name="pc" type="PermissionCollection" line="98"/>
            </method>
            <javadoc line="101">
                Returns an enumeration of all the Permission objects in all the
                  PermissionCollections in this CryptoPermissions object.                
                <return>
                    an enumeration of all the Permissions.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration" line="106"/>
            <javadoc line="109">
                Returns a CryptoPermissions object which
                  represents the minimum of the specified
                  CryptoPermissions object and this
                  CryptoPermissions object.                
                <param>
                    other the CryptoPermission
                      object to compare with this object.                    
                </param>
            </javadoc>
            <method name="getMinimum" type="CryptoPermissions" line="117">
                <params>
                    <param name="other" type="CryptoPermissions"/>
                </params>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="124"/>
                <declaration name="ret" type="CryptoPermissions" line="127"/>
                <declaration name="thatWildcard" type="PermissionCollection" line="128"/>
                <declaration name="maxKeySize" type="int" line="129"/>
                <scope line="130"/>
                <declaration name="thisKeys" type="Enumeration" line="133"/>
                <scope line="134">
                    <declaration name="alg" type="String" line="135"/>
                    <declaration name="thisPc" type="PermissionCollection" line="136"/>
                    <declaration name="thatPc" type="PermissionCollection" line="137"/>
                    <declaration name="partialResult" type="CryptoPermission[]" line="138"/>
                    <scope line="139">
                        <scope line="140"/>
                    </scope>
                    <scope line="145"/>
                    <scope line="148"/>
                </scope>
                <declaration name="thisWildcard" type="PermissionCollection" line="152"/>
                <scope line="153"/>
                <declaration name="thatKeys" type="Enumeration" line="157"/>
                <scope line="158">
                    <declaration name="alg" type="String" line="159"/>
                    <scope line="160"/>
                    <declaration name="thatPc" type="PermissionCollection" line="163"/>
                    <declaration name="partialResult" type="CryptoPermission[]" line="164"/>
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="172">
                Get the minimum of the two given PermissionCollection
                  &lt;code&gt;thisPc&lt;/code&gt; and &lt;code&gt;thatPc&lt;/code&gt;.                
                <param>
                    thisPc the first given PermissionColloection
                      object.                    
                </param>
                <param>
                    thatPc the second given PermissionCollection
                      object.                    
                </param>
            </javadoc>
            <method name="getMinimum" type="CryptoPermission[]" line="180">
                <params>
                    <param name="thisPc" type="PermissionCollection"/>
                    <param name="thatPc" type="PermissionCollection"/>
                </params>
                <declaration name="permVector" type="Vector" line="181"/>
                <declaration name="thisPcPermissions" type="Enumeration" line="182"/>
                <scope line="183">
                    <declaration name="thisCp" type="CryptoPermission" line="184"/>
                    <declaration name="thatPcPermissions" type="Enumeration" line="185"/>
                    <scope line="186">
                        <declaration name="thatCp" type="CryptoPermission" line="187"/>
                        <scope line="188"/>
                        <scope line="192"/>
                    </scope>
                </scope>
                <declaration name="ret" type="CryptoPermission[]" line="197"/>
            </method>
            <javadoc line="201">
                Returns all the CryptoPermission objects in the given
                  PermissionCollection object
                  whose maximum keysize no greater than &lt;code&gt;maxKeySize&lt;/code&gt;.
                  For all CryptoPermission objects with a maximum keysize greater
                  than &lt;code&gt;maxKeySize&lt;/code&gt;, this method constructs a
                  corresponding CryptoPermission object whose maximum keysize is
                  set to &lt;code&gt;maxKeySize&lt;/code&gt;, and includes that in the result.                
                <param>
                    maxKeySize the given maximum key size.                    
                </param>
                <param>
                    pc the given PermissionCollection object.                    
                </param>
            </javadoc>
            <method name="getMinimum" type="CryptoPermission[]" line="212">
                <params>
                    <param name="maxKeySize" type="int"/>
                    <param name="pc" type="PermissionCollection"/>
                </params>
                <declaration name="permVector" type="Vector" line="213"/>
                <declaration name="enum_" type="Enumeration" line="214"/>
                <scope line="215">
                    <declaration name="cp" type="CryptoPermission" line="216"/>
                    <scope line="217"/>
                    <scope line="220">
                        <scope line="221"/>
                        <scope line="224"/>
                    </scope>
                </scope>
                <declaration name="ret" type="CryptoPermission[]" line="229"/>
            </method>
            <javadoc line="233">
                Returns the PermissionCollection for the
                  specified algorithm. Returns null if there
                  isn&apos;t such a PermissionCollection.                
                <param>
                    alg the algorithm name.                    
                </param>
            </javadoc>
            <method name="getPermissionCollection" type="PermissionCollection" line="239">
                <params>
                    <param name="alg" type="String"/>
                </params>
                <scope line="240"/>
                <declaration name="pc" type="PermissionCollection" line="243"/>
                <scope line="244"/>
            </method>
            <javadoc line="249">
                Returns the PermissionCollection for the algorithm
                  associated with the specified CryptoPermission
                  object. Creates such a PermissionCollection
                  if such a PermissionCollection does not
                  exist yet.                
                <param>
                    cryptoPerm the CryptoPermission object.                    
                </param>
            </javadoc>
            <method name="getPermissionCollection" type="PermissionCollection" line="257">
                <params>
                    <param name="cryptoPerm" type="CryptoPermission"/>
                </params>
                <declaration name="alg" type="String" line="258"/>
                <declaration name="pc" type="PermissionCollection" line="259"/>
                <scope line="260"/>
            </method>
        </class>
        <class name="PermissionsEnumerator" line="266">
            <implements interface="Enumeration"/>
            <declaration name="perms" type="Enumeration" line="267"/>
            <declaration name="permset" type="Enumeration" line="268"/>
            <method name="PermissionsEnumerator" type="constructor" line="269">
                <params>
                    <param name="e" type="Enumeration"/>
                </params>
            </method>
            <method name="hasMoreElements" type="boolean" line="273"/>
            <method name="nextElement" type="Object" line="279">
                <scope line="280"/>
                <scope line="283"/>
            </method>
            <method name="getNextEnumWithMore" type="Enumeration" line="287">
                <scope line="288">
                    <declaration name="pc" type="PermissionCollection" line="289"/>
                    <declaration name="next" type="Enumeration" line="290"/>
                </scope>
            </method>
        </class>
    </source>